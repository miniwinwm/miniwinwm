
MiniWinSimple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008574  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00088574  00088574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c28  20070000  0008857c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000003c8  20070c28  000891a4  00020c28  2**2
                  ALLOC
  4 .stack        00002000  20070ff0  0008956c  00020c28  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020c28  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020c51  2**0
                  CONTENTS, READONLY
  7 .debug_info   00024e24  00000000  00000000  00020caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000054d7  00000000  00000000  00045ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007823  00000000  00000000  0004afa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c98  00000000  00000000  000527c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c18  00000000  00000000  00053460  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001fac8  00000000  00000000  00054078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00019f42  00000000  00000000  00073b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000736f5  00000000  00000000  0008da82  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002dd8  00000000  00000000  00101178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f0 2f 07 20 e5 2f 08 00 e1 2f 08 00 e1 2f 08 00     ./. ./.../.../..
   80010:	e1 2f 08 00 e1 2f 08 00 e1 2f 08 00 00 00 00 00     ./.../.../......
	...
   8002c:	e1 2f 08 00 e1 2f 08 00 00 00 00 00 e1 2f 08 00     ./.../......./..
   8003c:	e1 2f 08 00 e1 2f 08 00 e1 2f 08 00 e1 2f 08 00     ./.../.../.../..
   8004c:	e1 2f 08 00 e1 2f 08 00 e1 2f 08 00 e1 2f 08 00     ./.../.../.../..
   8005c:	e1 2f 08 00 e1 2f 08 00 e1 2f 08 00 00 00 00 00     ./.../.../......
   8006c:	2d 2e 08 00 41 2e 08 00 55 2e 08 00 69 2e 08 00     -...A...U...i...
	...
   80084:	e1 2f 08 00 e1 2f 08 00 e1 2f 08 00 e1 2f 08 00     ./.../.../.../..
   80094:	e1 2f 08 00 e1 2f 08 00 e1 2f 08 00 e1 2f 08 00     ./.../.../.../..
   800a4:	00 00 00 00 e1 2f 08 00 05 02 08 00 e1 2f 08 00     ...../......./..
   800b4:	e1 2f 08 00 e1 2f 08 00 e1 2f 08 00 e1 2f 08 00     ./.../.../.../..
   800c4:	e1 2f 08 00 e1 2f 08 00 e1 2f 08 00 e1 2f 08 00     ./.../.../.../..
   800d4:	e1 2f 08 00 e1 2f 08 00 e1 2f 08 00 59 1b 08 00     ./.../.../..Y...
   800e4:	e1 2f 08 00 e1 2f 08 00 e1 2f 08 00 e1 2f 08 00     ./.../.../.../..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070c28 	.word	0x20070c28
   80110:	00000000 	.word	0x00000000
   80114:	0008857c 	.word	0x0008857c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008857c 	.word	0x0008857c
   80154:	20070c2c 	.word	0x20070c2c
   80158:	0008857c 	.word	0x0008857c
   8015c:	00000000 	.word	0x00000000

00080160 <mw_hal_delay_ms>:
void mw_hal_delay_init(void)
{
}

void mw_hal_delay_ms(uint16_t ms)
{
   80160:	b538      	push	{r3, r4, r5, lr}
	delay_ms(ms);
   80162:	b918      	cbnz	r0, 8016c <mw_hal_delay_ms+0xc>
   80164:	2006      	movs	r0, #6
   80166:	4b0a      	ldr	r3, [pc, #40]	; (80190 <mw_hal_delay_ms+0x30>)
   80168:	4798      	blx	r3
   8016a:	bd38      	pop	{r3, r4, r5, pc}
   8016c:	4601      	mov	r1, r0
   8016e:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80172:	2300      	movs	r3, #0
   80174:	f243 64af 	movw	r4, #13999	; 0x36af
   80178:	2500      	movs	r5, #0
   8017a:	4806      	ldr	r0, [pc, #24]	; (80194 <mw_hal_delay_ms+0x34>)
   8017c:	fbe0 4501 	umlal	r4, r5, r0, r1
   80180:	4620      	mov	r0, r4
   80182:	4629      	mov	r1, r5
   80184:	4c04      	ldr	r4, [pc, #16]	; (80198 <mw_hal_delay_ms+0x38>)
   80186:	47a0      	blx	r4
   80188:	4b01      	ldr	r3, [pc, #4]	; (80190 <mw_hal_delay_ms+0x30>)
   8018a:	4798      	blx	r3
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	20070001 	.word	0x20070001
   80194:	0501bd00 	.word	0x0501bd00
   80198:	0008368d 	.word	0x0008368d

0008019c <mw_hal_non_vol_load>:
void mw_hal_non_vol_init(void)
{
}

void mw_hal_non_vol_load(uint8_t *data, uint16_t length)
{
   8019c:	b508      	push	{r3, lr}
    (void)memcpy((void *)data, (void *)TEST_PAGE_ADDRESS, (size_t)length);
   8019e:	460a      	mov	r2, r1
   801a0:	4901      	ldr	r1, [pc, #4]	; (801a8 <mw_hal_non_vol_load+0xc>)
   801a2:	4b02      	ldr	r3, [pc, #8]	; (801ac <mw_hal_non_vol_load+0x10>)
   801a4:	4798      	blx	r3
   801a6:	bd08      	pop	{r3, pc}
   801a8:	000fff00 	.word	0x000fff00
   801ac:	000839ed 	.word	0x000839ed

000801b0 <mw_hal_non_vol_save>:
}

void mw_hal_non_vol_save(uint8_t *data, uint16_t length)
{
   801b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801b4:	4680      	mov	r8, r0
   801b6:	460f      	mov	r7, r1
	(void)flash_init(FLASH_ACCESS_MODE_128, 6);
   801b8:	2106      	movs	r1, #6
   801ba:	2000      	movs	r0, #0
   801bc:	4b0b      	ldr	r3, [pc, #44]	; (801ec <mw_hal_non_vol_save+0x3c>)
   801be:	4798      	blx	r3
	(void)flash_unlock(TEST_PAGE_ADDRESS, TEST_PAGE_ADDRESS + IFLASH1_PAGE_SIZE - 1U, 0U, 0U);
   801c0:	4d0b      	ldr	r5, [pc, #44]	; (801f0 <mw_hal_non_vol_save+0x40>)
   801c2:	4c0c      	ldr	r4, [pc, #48]	; (801f4 <mw_hal_non_vol_save+0x44>)
   801c4:	2300      	movs	r3, #0
   801c6:	461a      	mov	r2, r3
   801c8:	4629      	mov	r1, r5
   801ca:	4620      	mov	r0, r4
   801cc:	4e0a      	ldr	r6, [pc, #40]	; (801f8 <mw_hal_non_vol_save+0x48>)
   801ce:	47b0      	blx	r6
	
	(void)flash_write(TEST_PAGE_ADDRESS, data, (uint32_t)length, 1U);	
   801d0:	2301      	movs	r3, #1
   801d2:	463a      	mov	r2, r7
   801d4:	4641      	mov	r1, r8
   801d6:	4620      	mov	r0, r4
   801d8:	4e08      	ldr	r6, [pc, #32]	; (801fc <mw_hal_non_vol_save+0x4c>)
   801da:	47b0      	blx	r6
	
	(void)flash_lock(TEST_PAGE_ADDRESS, TEST_PAGE_ADDRESS + IFLASH1_PAGE_SIZE - 1U, 0U, 0U);
   801dc:	2300      	movs	r3, #0
   801de:	461a      	mov	r2, r3
   801e0:	4629      	mov	r1, r5
   801e2:	4620      	mov	r0, r4
   801e4:	4c06      	ldr	r4, [pc, #24]	; (80200 <mw_hal_non_vol_save+0x50>)
   801e6:	47a0      	blx	r4
   801e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801ec:	000828bd 	.word	0x000828bd
   801f0:	000fffff 	.word	0x000fffff
   801f4:	000fff00 	.word	0x000fff00
   801f8:	00082a59 	.word	0x00082a59
   801fc:	000828e5 	.word	0x000828e5
   80200:	000829e5 	.word	0x000829e5

00080204 <TC0_Handler>:
/**********************
*** LOCAL FUNCTIONS ***
**********************/

void TC0_Handler(void)
{
   80204:	b508      	push	{r3, lr}
	/* Clear status bit to acknowledge interrupt */
	(void)tc_get_status(TC0, 0);
   80206:	2100      	movs	r1, #0
   80208:	4806      	ldr	r0, [pc, #24]	; (80224 <TC0_Handler+0x20>)
   8020a:	4b07      	ldr	r3, [pc, #28]	; (80228 <TC0_Handler+0x24>)
   8020c:	4798      	blx	r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   8020e:	4b07      	ldr	r3, [pc, #28]	; (8022c <TC0_Handler+0x28>)
   80210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80212:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
		port->PIO_CODR = mask;
   80216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8021a:	4b04      	ldr	r3, [pc, #16]	; (8022c <TC0_Handler+0x28>)
   8021c:	bf14      	ite	ne
   8021e:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   80220:	631a      	streq	r2, [r3, #48]	; 0x30
   80222:	bd08      	pop	{r3, pc}
   80224:	40080000 	.word	0x40080000
   80228:	000813b1 	.word	0x000813b1
   8022c:	400e1000 	.word	0x400e1000

00080230 <mw_hal_timer_init>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

void mw_hal_timer_init(void)
{
   80230:	b530      	push	{r4, r5, lr}
   80232:	b085      	sub	sp, #20
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   80234:	201b      	movs	r0, #27
   80236:	4b16      	ldr	r3, [pc, #88]	; (80290 <mw_hal_timer_init+0x60>)
   80238:	4798      	blx	r3

	/** Configure TC and trigger on RC compare. */
	tc_find_mck_divisor(20, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   8023a:	4c16      	ldr	r4, [pc, #88]	; (80294 <mw_hal_timer_init+0x64>)
   8023c:	9400      	str	r4, [sp, #0]
   8023e:	ab02      	add	r3, sp, #8
   80240:	aa03      	add	r2, sp, #12
   80242:	4621      	mov	r1, r4
   80244:	2014      	movs	r0, #20
   80246:	4d14      	ldr	r5, [pc, #80]	; (80298 <mw_hal_timer_init+0x68>)
   80248:	47a8      	blx	r5
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
   8024a:	4d14      	ldr	r5, [pc, #80]	; (8029c <mw_hal_timer_init+0x6c>)
   8024c:	9a02      	ldr	r2, [sp, #8]
   8024e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80252:	2100      	movs	r1, #0
   80254:	4628      	mov	r0, r5
   80256:	4b12      	ldr	r3, [pc, #72]	; (802a0 <mw_hal_timer_init+0x70>)
   80258:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / 20);
   8025a:	9a03      	ldr	r2, [sp, #12]
   8025c:	fbb4 f4f2 	udiv	r4, r4, r2
   80260:	4a10      	ldr	r2, [pc, #64]	; (802a4 <mw_hal_timer_init+0x74>)
   80262:	fba2 3204 	umull	r3, r2, r2, r4
   80266:	0912      	lsrs	r2, r2, #4
   80268:	2100      	movs	r1, #0
   8026a:	4628      	mov	r0, r5
   8026c:	4b0e      	ldr	r3, [pc, #56]	; (802a8 <mw_hal_timer_init+0x78>)
   8026e:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80270:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80274:	4b0d      	ldr	r3, [pc, #52]	; (802ac <mw_hal_timer_init+0x7c>)
   80276:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   80278:	2210      	movs	r2, #16
   8027a:	2100      	movs	r1, #0
   8027c:	4628      	mov	r0, r5
   8027e:	4b0c      	ldr	r3, [pc, #48]	; (802b0 <mw_hal_timer_init+0x80>)
   80280:	4798      	blx	r3

	tc_start(TC0, 0);
   80282:	2100      	movs	r1, #0
   80284:	4628      	mov	r0, r5
   80286:	4b0b      	ldr	r3, [pc, #44]	; (802b4 <mw_hal_timer_init+0x84>)
   80288:	4798      	blx	r3
}
   8028a:	b005      	add	sp, #20
   8028c:	bd30      	pop	{r4, r5, pc}
   8028e:	bf00      	nop
   80290:	00082f7d 	.word	0x00082f7d
   80294:	0501bd00 	.word	0x0501bd00
   80298:	000813b9 	.word	0x000813b9
   8029c:	40080000 	.word	0x40080000
   802a0:	00081381 	.word	0x00081381
   802a4:	cccccccd 	.word	0xcccccccd
   802a8:	000813a1 	.word	0x000813a1
   802ac:	e000e100 	.word	0xe000e100
   802b0:	000813a9 	.word	0x000813a9
   802b4:	00081399 	.word	0x00081399

000802b8 <spi_master_transfer>:
/**********************
*** LOCAL FUNCTIONS ***
**********************/

static void spi_master_transfer(uint8_t *tx_buf, uint8_t *rx_buf, size_t size)
{
   802b8:	b4f0      	push	{r4, r5, r6, r7}
	size_t i;

	size--;
	for (i = (size_t)0; i < size; i++)
   802ba:	1e57      	subs	r7, r2, #1
   802bc:	d010      	beq.n	802e0 <spi_master_transfer+0x28>
   802be:	1e44      	subs	r4, r0, #1
   802c0:	1e4d      	subs	r5, r1, #1
   802c2:	3a02      	subs	r2, #2
   802c4:	1886      	adds	r6, r0, r2
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   802c6:	4a0e      	ldr	r2, [pc, #56]	; (80300 <spi_master_transfer+0x48>)
   802c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   802cc:	60d3      	str	r3, [r2, #12]
	return p_spi->SPI_SR;
   802ce:	6913      	ldr	r3, [r2, #16]
	{
		spi_put(SPI_MASTER_BASE, (uint16_t)tx_buf[i]);
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0U)
   802d0:	f013 0f01 	tst.w	r3, #1
   802d4:	d0fb      	beq.n	802ce <spi_master_transfer+0x16>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   802d6:	6893      	ldr	r3, [r2, #8]
		{
		}
		rx_buf[i] = (uint8_t)spi_get(SPI_MASTER_BASE);
   802d8:	f805 3f01 	strb.w	r3, [r5, #1]!
	for (i = (size_t)0; i < size; i++)
   802dc:	42b4      	cmp	r4, r6
   802de:	d1f3      	bne.n	802c8 <spi_master_transfer+0x10>
	p_spi->SPI_CR = SPI_CR_LASTXFER;
   802e0:	4b07      	ldr	r3, [pc, #28]	; (80300 <spi_master_transfer+0x48>)
   802e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   802e6:	601a      	str	r2, [r3, #0]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   802e8:	5dc2      	ldrb	r2, [r0, r7]
   802ea:	60da      	str	r2, [r3, #12]
	return p_spi->SPI_SR;
   802ec:	461a      	mov	r2, r3
   802ee:	6913      	ldr	r3, [r2, #16]
	}
	
	spi_set_lastxfer(SPI_MASTER_BASE);

	spi_put(SPI_MASTER_BASE, (uint16_t)tx_buf[i]);
	while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0U)
   802f0:	f013 0f01 	tst.w	r3, #1
   802f4:	d0fb      	beq.n	802ee <spi_master_transfer+0x36>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   802f6:	4b02      	ldr	r3, [pc, #8]	; (80300 <spi_master_transfer+0x48>)
   802f8:	689b      	ldr	r3, [r3, #8]
	{
	}
	rx_buf[i] = (uint8_t)spi_get(SPI_MASTER_BASE);
   802fa:	55cb      	strb	r3, [r1, r7]
}
   802fc:	bcf0      	pop	{r4, r5, r6, r7}
   802fe:	4770      	bx	lr
   80300:	40008000 	.word	0x40008000

00080304 <mw_hal_touch_init>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

void mw_hal_touch_init(void)
{
   80304:	b538      	push	{r3, r4, r5, lr}
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80306:	4b27      	ldr	r3, [pc, #156]	; (803a4 <mw_hal_touch_init+0xa0>)
   80308:	2502      	movs	r5, #2
   8030a:	615d      	str	r5, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8030c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	/* t_irq pin */
	ioport_set_pin_dir(PIO_PD1_IDX, IOPORT_DIR_INPUT);	
	
	(void)gpio_configure_pin(PIO_PA25_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   80310:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80314:	2019      	movs	r0, #25
   80316:	4c24      	ldr	r4, [pc, #144]	; (803a8 <mw_hal_touch_init+0xa4>)
   80318:	47a0      	blx	r4
	(void)gpio_configure_pin(PIO_PA26_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   8031a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8031e:	201a      	movs	r0, #26
   80320:	47a0      	blx	r4
	(void)gpio_configure_pin(PIO_PA27_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   80322:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80326:	201b      	movs	r0, #27
   80328:	47a0      	blx	r4
	(void)gpio_configure_pin(PIO_PA28_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   8032a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8032e:	201c      	movs	r0, #28
   80330:	47a0      	blx	r4
	(void)gpio_configure_pin(PIO_PA29_IDX, PIO_PERIPH_A | PIO_DEFAULT);
   80332:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80336:	201d      	movs	r0, #29
   80338:	47a0      	blx	r4
	
	spi_enable_clock(SPI_MASTER_BASE);
   8033a:	4c1c      	ldr	r4, [pc, #112]	; (803ac <mw_hal_touch_init+0xa8>)
   8033c:	4620      	mov	r0, r4
   8033e:	4b1c      	ldr	r3, [pc, #112]	; (803b0 <mw_hal_touch_init+0xac>)
   80340:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   80342:	6025      	str	r5, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
   80344:	2380      	movs	r3, #128	; 0x80
   80346:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR &= (~SPI_MR_PS);
   80348:	6863      	ldr	r3, [r4, #4]
   8034a:	f023 0302 	bic.w	r3, r3, #2
   8034e:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80350:	6863      	ldr	r3, [r4, #4]
   80352:	f043 0301 	orr.w	r3, r3, #1
   80356:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80358:	6863      	ldr	r3, [r4, #4]
   8035a:	f043 0310 	orr.w	r3, r3, #16
   8035e:	6063      	str	r3, [r4, #4]
	spi_disable(SPI_MASTER_BASE);
	spi_reset(SPI_MASTER_BASE);
	spi_set_fixed_peripheral_select(SPI_MASTER_BASE);
	spi_set_master_mode(SPI_MASTER_BASE);
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   80360:	210d      	movs	r1, #13
   80362:	4620      	mov	r0, r4
   80364:	4b13      	ldr	r3, [pc, #76]	; (803b4 <mw_hal_touch_init+0xb0>)
   80366:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_TS_CHIP_SEL, SPI_CLK_POLARITY);
   80368:	2200      	movs	r2, #0
   8036a:	4611      	mov	r1, r2
   8036c:	4620      	mov	r0, r4
   8036e:	4b12      	ldr	r3, [pc, #72]	; (803b8 <mw_hal_touch_init+0xb4>)
   80370:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_TS_CHIP_SEL, SPI_CLK_PHASE);
   80372:	2200      	movs	r2, #0
   80374:	4611      	mov	r1, r2
   80376:	4620      	mov	r0, r4
   80378:	4b10      	ldr	r3, [pc, #64]	; (803bc <mw_hal_touch_init+0xb8>)
   8037a:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_TS_CHIP_SEL, SPI_CSR_BITS_8_BIT);
   8037c:	2200      	movs	r2, #0
   8037e:	4611      	mov	r1, r2
   80380:	4620      	mov	r0, r4
   80382:	4b0f      	ldr	r3, [pc, #60]	; (803c0 <mw_hal_touch_init+0xbc>)
   80384:	4798      	blx	r3
	(void)spi_set_baudrate_div(SPI_MASTER_BASE, SPI_TS_CHIP_SEL, (sysclk_get_peripheral_hz() / gs_ul_spi_clock));
   80386:	2254      	movs	r2, #84	; 0x54
   80388:	2100      	movs	r1, #0
   8038a:	4620      	mov	r0, r4
   8038c:	4b0d      	ldr	r3, [pc, #52]	; (803c4 <mw_hal_touch_init+0xc0>)
   8038e:	4798      	blx	r3
	spi_set_transfer_delay(SPI_MASTER_BASE, SPI_TS_CHIP_SEL, SPI_DLYBS, SPI_DLYBCT);
   80390:	2310      	movs	r3, #16
   80392:	2240      	movs	r2, #64	; 0x40
   80394:	2100      	movs	r1, #0
   80396:	4620      	mov	r0, r4
   80398:	4d0b      	ldr	r5, [pc, #44]	; (803c8 <mw_hal_touch_init+0xc4>)
   8039a:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8039c:	2301      	movs	r3, #1
   8039e:	6023      	str	r3, [r4, #0]
   803a0:	bd38      	pop	{r3, r4, r5, pc}
   803a2:	bf00      	nop
   803a4:	400e1400 	.word	0x400e1400
   803a8:	00082c71 	.word	0x00082c71
   803ac:	40008000 	.word	0x40008000
   803b0:	000812bd 	.word	0x000812bd
   803b4:	000812d9 	.word	0x000812d9
   803b8:	000812ef 	.word	0x000812ef
   803bc:	0008130d 	.word	0x0008130d
   803c0:	0008132b 	.word	0x0008132b
   803c4:	0008133f 	.word	0x0008133f
   803c8:	00081365 	.word	0x00081365

000803cc <mw_hal_touch_get_state>:
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   803cc:	4b02      	ldr	r3, [pc, #8]	; (803d8 <mw_hal_touch_get_state+0xc>)
   803ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	{
		return(MW_HAL_TOUCH_STATE_DOWN);
	}

	return (MW_HAL_TOUCH_STATE_UP);
}
   803d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   803d4:	4770      	bx	lr
   803d6:	bf00      	nop
   803d8:	400e1400 	.word	0x400e1400

000803dc <mw_hal_touch_get_point>:

bool mw_hal_touch_get_point(uint16_t* x, uint16_t* y)
{
   803dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   803e0:	b08d      	sub	sp, #52	; 0x34
   803e2:	4682      	mov	sl, r0
   803e4:	4689      	mov	r9, r1
	uint16_t swap_value;
	uint16_t x_raw;
	uint16_t y_raw;
	uint16_t databuffer[2][MW_HAL_TOUCH_READ_POINTS_COUNT];
	uint8_t touch_count;
	uint8_t ts_command[3] = {0};
   803e6:	2400      	movs	r4, #0
   803e8:	f8ad 4004 	strh.w	r4, [sp, #4]
   803ec:	f88d 4006 	strb.w	r4, [sp, #6]
	uint8_t ts_response[3];
	
	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, spi_get_pcs(SPI_TS_CHIP_SEL));
   803f0:	210e      	movs	r1, #14
   803f2:	4836      	ldr	r0, [pc, #216]	; (804cc <mw_hal_touch_get_point+0xf0>)
   803f4:	4b36      	ldr	r3, [pc, #216]	; (804d0 <mw_hal_touch_get_point+0xf4>)
   803f6:	4798      	blx	r3
   803f8:	ad02      	add	r5, sp, #8
	
	touch_count = 0U;
	do
	{
		ts_command[0] = COMMAND_READ_X;
		spi_master_transfer(ts_command, ts_response, sizeof(ts_response));
   803fa:	2703      	movs	r7, #3
   803fc:	4e35      	ldr	r6, [pc, #212]	; (804d4 <mw_hal_touch_get_point+0xf8>)
		
		databuffer[0][touch_count] = x_raw;
		databuffer[1][touch_count] = y_raw;
		touch_count++;
	}
	while ((mw_hal_touch_get_state() == MW_HAL_TOUCH_STATE_DOWN) && (touch_count < MW_HAL_TOUCH_READ_POINTS_COUNT));
   803fe:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 804d8 <mw_hal_touch_get_point+0xfc>
		ts_command[0] = COMMAND_READ_X;
   80402:	23d0      	movs	r3, #208	; 0xd0
   80404:	f88d 3004 	strb.w	r3, [sp, #4]
		spi_master_transfer(ts_command, ts_response, sizeof(ts_response));
   80408:	463a      	mov	r2, r7
   8040a:	4669      	mov	r1, sp
   8040c:	a801      	add	r0, sp, #4
   8040e:	47b0      	blx	r6
		x_raw = (uint16_t)ts_response[1] << 8;
   80410:	f89d 3001 	ldrb.w	r3, [sp, #1]
		x_raw |= (uint16_t)ts_response[2];
   80414:	f89d b002 	ldrb.w	fp, [sp, #2]
   80418:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
		ts_command[0] = COMMAND_READ_Y;
   8041c:	2390      	movs	r3, #144	; 0x90
   8041e:	f88d 3004 	strb.w	r3, [sp, #4]
		spi_master_transfer(ts_command, ts_response, sizeof(ts_response));
   80422:	463a      	mov	r2, r7
   80424:	4669      	mov	r1, sp
   80426:	a801      	add	r0, sp, #4
   80428:	47b0      	blx	r6
		y_raw = (uint16_t)ts_response[1] << 8;
   8042a:	f89d 2001 	ldrb.w	r2, [sp, #1]
		y_raw |= (uint16_t)ts_response[2];
   8042e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   80432:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		x_raw >>= 3;
   80436:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
		databuffer[0][touch_count] = x_raw;
   8043a:	f825 bb02 	strh.w	fp, [r5], #2
		y_raw >>= 3;
   8043e:	08db      	lsrs	r3, r3, #3
		databuffer[1][touch_count] = y_raw;
   80440:	826b      	strh	r3, [r5, #18]
		touch_count++;
   80442:	3401      	adds	r4, #1
   80444:	b2e4      	uxtb	r4, r4
	while ((mw_hal_touch_get_state() == MW_HAL_TOUCH_STATE_DOWN) && (touch_count < MW_HAL_TOUCH_READ_POINTS_COUNT));
   80446:	47c0      	blx	r8
   80448:	b940      	cbnz	r0, 8045c <mw_hal_touch_get_point+0x80>
   8044a:	2c0a      	cmp	r4, #10
   8044c:	d1d9      	bne.n	80402 <mw_hal_touch_get_point+0x26>
   8044e:	f10d 001a 	add.w	r0, sp, #26
	touch_count = 0U;
   80452:	2601      	movs	r6, #1
			if (databuffer[0][i] > databuffer[0][i + 1U])
			{
				swap_value = databuffer[0][i + 1U];
				databuffer[0][i + 1U] = databuffer[0][i];
				databuffer[0][i] = swap_value;
				sorted = false;
   80454:	2400      	movs	r4, #0
	touch_count = 0U;
   80456:	ab02      	add	r3, sp, #8
   80458:	4635      	mov	r5, r6
   8045a:	e009      	b.n	80470 <mw_hal_touch_get_point+0x94>
	if (touch_count != MW_HAL_TOUCH_READ_POINTS_COUNT)
   8045c:	2c0a      	cmp	r4, #10
		return (false);
   8045e:	bf18      	it	ne
   80460:	2000      	movne	r0, #0
	if (touch_count != MW_HAL_TOUCH_READ_POINTS_COUNT)
   80462:	d0f4      	beq.n	8044e <mw_hal_touch_get_point+0x72>

	*x = (databuffer[0][4] + databuffer[0][5]) / 8U;
	*y = (databuffer[1][4] + databuffer[1][5]) / 8U;
	
	return (true);
}
   80464:	b00d      	add	sp, #52	; 0x34
   80466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8046a:	3302      	adds	r3, #2
		for (i = 0U; i < (touch_count - 1U); i++)
   8046c:	4283      	cmp	r3, r0
   8046e:	d007      	beq.n	80480 <mw_hal_touch_get_point+0xa4>
			if (databuffer[0][i] > databuffer[0][i + 1U])
   80470:	8819      	ldrh	r1, [r3, #0]
   80472:	885a      	ldrh	r2, [r3, #2]
   80474:	4291      	cmp	r1, r2
   80476:	d9f8      	bls.n	8046a <mw_hal_touch_get_point+0x8e>
				databuffer[0][i + 1U] = databuffer[0][i];
   80478:	8059      	strh	r1, [r3, #2]
				databuffer[0][i] = swap_value;
   8047a:	801a      	strh	r2, [r3, #0]
				sorted = false;
   8047c:	4625      	mov	r5, r4
   8047e:	e7f4      	b.n	8046a <mw_hal_touch_get_point+0x8e>
	while (!sorted);
   80480:	2d00      	cmp	r5, #0
   80482:	d0e8      	beq.n	80456 <mw_hal_touch_get_point+0x7a>
   80484:	f10d 042e 	add.w	r4, sp, #46	; 0x2e
				sorted = false;
   80488:	2600      	movs	r6, #0
   8048a:	ab07      	add	r3, sp, #28
				sorted = false;
   8048c:	4628      	mov	r0, r5
   8048e:	e002      	b.n	80496 <mw_hal_touch_get_point+0xba>
   80490:	3302      	adds	r3, #2
		for (i = 0U; i < (touch_count - 1U); i++)
   80492:	429c      	cmp	r4, r3
   80494:	d007      	beq.n	804a6 <mw_hal_touch_get_point+0xca>
			if (databuffer[1][i] > databuffer[1][i + 1U])
   80496:	8819      	ldrh	r1, [r3, #0]
   80498:	885a      	ldrh	r2, [r3, #2]
   8049a:	4291      	cmp	r1, r2
   8049c:	d9f8      	bls.n	80490 <mw_hal_touch_get_point+0xb4>
				databuffer[1][i + 1U] = databuffer[1][i];
   8049e:	8059      	strh	r1, [r3, #2]
				databuffer[1][i] = swap_value;
   804a0:	801a      	strh	r2, [r3, #0]
				sorted = false;
   804a2:	4630      	mov	r0, r6
   804a4:	e7f4      	b.n	80490 <mw_hal_touch_get_point+0xb4>
	while (!sorted);
   804a6:	2800      	cmp	r0, #0
   804a8:	d0ef      	beq.n	8048a <mw_hal_touch_get_point+0xae>
	*x = (databuffer[0][4] + databuffer[0][5]) / 8U;
   804aa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   804ae:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   804b2:	4413      	add	r3, r2
   804b4:	08db      	lsrs	r3, r3, #3
   804b6:	f8aa 3000 	strh.w	r3, [sl]
	*y = (databuffer[1][4] + databuffer[1][5]) / 8U;
   804ba:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   804be:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   804c2:	4413      	add	r3, r2
   804c4:	08db      	lsrs	r3, r3, #3
   804c6:	f8a9 3000 	strh.w	r3, [r9]
	return (true);
   804ca:	e7cb      	b.n	80464 <mw_hal_touch_get_point+0x88>
   804cc:	40008000 	.word	0x40008000
   804d0:	000812d9 	.word	0x000812d9
   804d4:	000802b9 	.word	0x000802b9
   804d8:	000803cd 	.word	0x000803cd

000804dc <app_init>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

void app_init(void)
{
   804dc:	b508      	push	{r3, lr}
	/* Initialize all modules */
	sysclk_init();
   804de:	4b02      	ldr	r3, [pc, #8]	; (804e8 <app_init+0xc>)
   804e0:	4798      	blx	r3
	board_init();
   804e2:	4b02      	ldr	r3, [pc, #8]	; (804ec <app_init+0x10>)
   804e4:	4798      	blx	r3
   804e6:	bd08      	pop	{r3, pc}
   804e8:	00082aed 	.word	0x00082aed
   804ec:	00082b51 	.word	0x00082b51

000804f0 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   804f0:	490e      	ldr	r1, [pc, #56]	; (8052c <udi_cdc_comm_enable+0x3c>)
   804f2:	2300      	movs	r3, #0
   804f4:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   804f6:	4a0e      	ldr	r2, [pc, #56]	; (80530 <udi_cdc_comm_enable+0x40>)
   804f8:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   804fa:	4a0e      	ldr	r2, [pc, #56]	; (80534 <udi_cdc_comm_enable+0x44>)
   804fc:	20a1      	movs	r0, #161	; 0xa1
   804fe:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   80500:	2020      	movs	r0, #32
   80502:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   80504:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   80506:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   80508:	2002      	movs	r0, #2
   8050a:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   8050c:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8050e:	4a0a      	ldr	r2, [pc, #40]	; (80538 <udi_cdc_comm_enable+0x48>)
   80510:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
   80514:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   80516:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   80518:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8051a:	2308      	movs	r3, #8
   8051c:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   8051e:	780b      	ldrb	r3, [r1, #0]
   80520:	3301      	adds	r3, #1
   80522:	b2db      	uxtb	r3, r3
   80524:	700b      	strb	r3, [r1, #0]
	return true;
}
   80526:	2001      	movs	r0, #1
   80528:	4770      	bx	lr
   8052a:	bf00      	nop
   8052c:	20070c4f 	.word	0x20070c4f
   80530:	20070ce4 	.word	0x20070ce4
   80534:	20070d7c 	.word	0x20070d7c
   80538:	20070c48 	.word	0x20070c48

0008053c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   8053c:	4a02      	ldr	r2, [pc, #8]	; (80548 <udi_cdc_comm_disable+0xc>)
   8053e:	7813      	ldrb	r3, [r2, #0]
   80540:	3b01      	subs	r3, #1
   80542:	b2db      	uxtb	r3, r3
   80544:	7013      	strb	r3, [r2, #0]
   80546:	4770      	bx	lr
   80548:	20070c4f 	.word	0x20070c4f

0008054c <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   8054c:	4a04      	ldr	r2, [pc, #16]	; (80560 <udi_cdc_data_disable+0x14>)
   8054e:	7813      	ldrb	r3, [r2, #0]
   80550:	3b01      	subs	r3, #1
   80552:	b2db      	uxtb	r3, r3
   80554:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   80556:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
   80558:	2200      	movs	r2, #0
   8055a:	4b02      	ldr	r3, [pc, #8]	; (80564 <udi_cdc_data_disable+0x18>)
   8055c:	701a      	strb	r2, [r3, #0]
   8055e:	4770      	bx	lr
   80560:	20070c50 	.word	0x20070c50
   80564:	20070c46 	.word	0x20070c46

00080568 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80568:	2000      	movs	r0, #0
   8056a:	4770      	bx	lr

0008056c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   8056c:	2000      	movs	r0, #0
   8056e:	4770      	bx	lr

00080570 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80570:	4b1d      	ldr	r3, [pc, #116]	; (805e8 <udi_cdc_comm_setup+0x78>)
   80572:	781b      	ldrb	r3, [r3, #0]
   80574:	f013 0f80 	tst.w	r3, #128	; 0x80
   80578:	d105      	bne.n	80586 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8057a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8057e:	2b20      	cmp	r3, #32
   80580:	d018      	beq.n	805b4 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
   80582:	2000      	movs	r0, #0
   80584:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80586:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8058a:	2b20      	cmp	r3, #32
   8058c:	d001      	beq.n	80592 <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
   8058e:	2000      	movs	r0, #0
   80590:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80592:	4b15      	ldr	r3, [pc, #84]	; (805e8 <udi_cdc_comm_setup+0x78>)
   80594:	785b      	ldrb	r3, [r3, #1]
   80596:	2b21      	cmp	r3, #33	; 0x21
   80598:	d124      	bne.n	805e4 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
   8059a:	4b13      	ldr	r3, [pc, #76]	; (805e8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   8059c:	88db      	ldrh	r3, [r3, #6]
   8059e:	2b07      	cmp	r3, #7
   805a0:	d001      	beq.n	805a6 <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
   805a2:	2000      	movs	r0, #0
   805a4:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   805a6:	4b10      	ldr	r3, [pc, #64]	; (805e8 <udi_cdc_comm_setup+0x78>)
   805a8:	4a10      	ldr	r2, [pc, #64]	; (805ec <udi_cdc_comm_setup+0x7c>)
   805aa:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   805ac:	2207      	movs	r2, #7
   805ae:	819a      	strh	r2, [r3, #12]
				return true;
   805b0:	2001      	movs	r0, #1
   805b2:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   805b4:	4b0c      	ldr	r3, [pc, #48]	; (805e8 <udi_cdc_comm_setup+0x78>)
   805b6:	7858      	ldrb	r0, [r3, #1]
   805b8:	2820      	cmp	r0, #32
   805ba:	d004      	beq.n	805c6 <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
   805bc:	2822      	cmp	r0, #34	; 0x22
   805be:	bf14      	ite	ne
   805c0:	2000      	movne	r0, #0
   805c2:	2001      	moveq	r0, #1
   805c4:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   805c6:	4b08      	ldr	r3, [pc, #32]	; (805e8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   805c8:	88db      	ldrh	r3, [r3, #6]
   805ca:	2b07      	cmp	r3, #7
   805cc:	d001      	beq.n	805d2 <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
   805ce:	2000      	movs	r0, #0
}
   805d0:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   805d2:	4b05      	ldr	r3, [pc, #20]	; (805e8 <udi_cdc_comm_setup+0x78>)
   805d4:	4a06      	ldr	r2, [pc, #24]	; (805f0 <udi_cdc_comm_setup+0x80>)
   805d6:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   805d8:	4a04      	ldr	r2, [pc, #16]	; (805ec <udi_cdc_comm_setup+0x7c>)
   805da:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   805dc:	2207      	movs	r2, #7
   805de:	819a      	strh	r2, [r3, #12]
				return true;
   805e0:	2001      	movs	r0, #1
   805e2:	4770      	bx	lr
	return false;  // request Not supported
   805e4:	2000      	movs	r0, #0
   805e6:	4770      	bx	lr
   805e8:	20070fa8 	.word	0x20070fa8
   805ec:	20070c48 	.word	0x20070c48
   805f0:	000805f5 	.word	0x000805f5

000805f4 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   805f4:	4770      	bx	lr
	...

000805f8 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   805f8:	4b44      	ldr	r3, [pc, #272]	; (8070c <udi_cdc_tx_send+0x114>)
   805fa:	781b      	ldrb	r3, [r3, #0]
   805fc:	b103      	cbz	r3, 80600 <udi_cdc_tx_send+0x8>
   805fe:	4770      	bx	lr
{
   80600:	b570      	push	{r4, r5, r6, lr}
   80602:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   80604:	4b42      	ldr	r3, [pc, #264]	; (80710 <udi_cdc_tx_send+0x118>)
   80606:	4798      	blx	r3
   80608:	2800      	cmp	r0, #0
   8060a:	d041      	beq.n	80690 <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   8060c:	4b41      	ldr	r3, [pc, #260]	; (80714 <udi_cdc_tx_send+0x11c>)
   8060e:	881c      	ldrh	r4, [r3, #0]
   80610:	4b41      	ldr	r3, [pc, #260]	; (80718 <udi_cdc_tx_send+0x120>)
   80612:	4798      	blx	r3
   80614:	4284      	cmp	r4, r0
   80616:	d076      	beq.n	80706 <udi_cdc_tx_send+0x10e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   80618:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8061c:	fab3 f383 	clz	r3, r3
   80620:	095b      	lsrs	r3, r3, #5
   80622:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   80624:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   80626:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8062a:	2200      	movs	r2, #0
   8062c:	4b3b      	ldr	r3, [pc, #236]	; (8071c <udi_cdc_tx_send+0x124>)
   8062e:	701a      	strb	r2, [r3, #0]
	return flags;
   80630:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80632:	4b3b      	ldr	r3, [pc, #236]	; (80720 <udi_cdc_tx_send+0x128>)
   80634:	781c      	ldrb	r4, [r3, #0]
   80636:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80638:	4b3a      	ldr	r3, [pc, #232]	; (80724 <udi_cdc_tx_send+0x12c>)
   8063a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8063e:	2b00      	cmp	r3, #0
   80640:	d02d      	beq.n	8069e <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80642:	2200      	movs	r2, #0
   80644:	4b38      	ldr	r3, [pc, #224]	; (80728 <udi_cdc_tx_send+0x130>)
   80646:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80648:	4b38      	ldr	r3, [pc, #224]	; (8072c <udi_cdc_tx_send+0x134>)
   8064a:	781b      	ldrb	r3, [r3, #0]
   8064c:	2b00      	cmp	r3, #0
   8064e:	d142      	bne.n	806d6 <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80650:	fab4 f384 	clz	r3, r4
   80654:	095b      	lsrs	r3, r3, #5
   80656:	4a32      	ldr	r2, [pc, #200]	; (80720 <udi_cdc_tx_send+0x128>)
   80658:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   8065a:	2201      	movs	r2, #1
   8065c:	4b2b      	ldr	r3, [pc, #172]	; (8070c <udi_cdc_tx_send+0x114>)
   8065e:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80660:	b125      	cbz	r5, 8066c <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
   80662:	4b2e      	ldr	r3, [pc, #184]	; (8071c <udi_cdc_tx_send+0x124>)
   80664:	701a      	strb	r2, [r3, #0]
   80666:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8066a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8066c:	4626      	mov	r6, r4
   8066e:	4b2d      	ldr	r3, [pc, #180]	; (80724 <udi_cdc_tx_send+0x12c>)
   80670:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80674:	2b40      	cmp	r3, #64	; 0x40
   80676:	bf14      	ite	ne
   80678:	2501      	movne	r5, #1
   8067a:	2500      	moveq	r5, #0
	if (b_short_packet) {
   8067c:	d034      	beq.n	806e8 <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
   8067e:	4b24      	ldr	r3, [pc, #144]	; (80710 <udi_cdc_tx_send+0x118>)
   80680:	4798      	blx	r3
   80682:	2800      	cmp	r0, #0
   80684:	d02b      	beq.n	806de <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   80686:	4b24      	ldr	r3, [pc, #144]	; (80718 <udi_cdc_tx_send+0x120>)
   80688:	4798      	blx	r3
   8068a:	4b22      	ldr	r3, [pc, #136]	; (80714 <udi_cdc_tx_send+0x11c>)
   8068c:	8018      	strh	r0, [r3, #0]
   8068e:	e02e      	b.n	806ee <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   80690:	4b20      	ldr	r3, [pc, #128]	; (80714 <udi_cdc_tx_send+0x11c>)
   80692:	881c      	ldrh	r4, [r3, #0]
   80694:	4b26      	ldr	r3, [pc, #152]	; (80730 <udi_cdc_tx_send+0x138>)
   80696:	4798      	blx	r3
   80698:	4284      	cmp	r4, r0
   8069a:	d1bd      	bne.n	80618 <udi_cdc_tx_send+0x20>
   8069c:	e033      	b.n	80706 <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
   8069e:	4a22      	ldr	r2, [pc, #136]	; (80728 <udi_cdc_tx_send+0x130>)
   806a0:	8813      	ldrh	r3, [r2, #0]
   806a2:	3301      	adds	r3, #1
   806a4:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   806a6:	4b1a      	ldr	r3, [pc, #104]	; (80710 <udi_cdc_tx_send+0x118>)
   806a8:	4798      	blx	r3
   806aa:	b918      	cbnz	r0, 806b4 <udi_cdc_tx_send+0xbc>
   806ac:	4b1e      	ldr	r3, [pc, #120]	; (80728 <udi_cdc_tx_send+0x130>)
   806ae:	881b      	ldrh	r3, [r3, #0]
   806b0:	2b63      	cmp	r3, #99	; 0x63
   806b2:	d908      	bls.n	806c6 <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   806b4:	4b16      	ldr	r3, [pc, #88]	; (80710 <udi_cdc_tx_send+0x118>)
   806b6:	4798      	blx	r3
   806b8:	2800      	cmp	r0, #0
   806ba:	d0c2      	beq.n	80642 <udi_cdc_tx_send+0x4a>
   806bc:	4b1a      	ldr	r3, [pc, #104]	; (80728 <udi_cdc_tx_send+0x130>)
   806be:	881b      	ldrh	r3, [r3, #0]
   806c0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   806c4:	d2bd      	bcs.n	80642 <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
   806c6:	b1f5      	cbz	r5, 80706 <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
   806c8:	2201      	movs	r2, #1
   806ca:	4b14      	ldr	r3, [pc, #80]	; (8071c <udi_cdc_tx_send+0x124>)
   806cc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   806ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   806d2:	b662      	cpsie	i
   806d4:	e017      	b.n	80706 <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   806d6:	fab4 f484 	clz	r4, r4
   806da:	0964      	lsrs	r4, r4, #5
   806dc:	e7bd      	b.n	8065a <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   806de:	4b14      	ldr	r3, [pc, #80]	; (80730 <udi_cdc_tx_send+0x138>)
   806e0:	4798      	blx	r3
   806e2:	4b0c      	ldr	r3, [pc, #48]	; (80714 <udi_cdc_tx_send+0x11c>)
   806e4:	8018      	strh	r0, [r3, #0]
   806e6:	e002      	b.n	806ee <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   806e8:	2200      	movs	r2, #0
   806ea:	4b0a      	ldr	r3, [pc, #40]	; (80714 <udi_cdc_tx_send+0x11c>)
   806ec:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   806ee:	4b0d      	ldr	r3, [pc, #52]	; (80724 <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
   806f0:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   806f4:	4a0f      	ldr	r2, [pc, #60]	; (80734 <udi_cdc_tx_send+0x13c>)
   806f6:	9200      	str	r2, [sp, #0]
   806f8:	4a0f      	ldr	r2, [pc, #60]	; (80738 <udi_cdc_tx_send+0x140>)
   806fa:	eb02 1284 	add.w	r2, r2, r4, lsl #6
   806fe:	4629      	mov	r1, r5
   80700:	2081      	movs	r0, #129	; 0x81
   80702:	4c0e      	ldr	r4, [pc, #56]	; (8073c <udi_cdc_tx_send+0x144>)
   80704:	47a0      	blx	r4
			udi_cdc_data_sent);
}
   80706:	b004      	add	sp, #16
   80708:	bd70      	pop	{r4, r5, r6, pc}
   8070a:	bf00      	nop
   8070c:	20070d78 	.word	0x20070d78
   80710:	00082171 	.word	0x00082171
   80714:	20070d74 	.word	0x20070d74
   80718:	000821bd 	.word	0x000821bd
   8071c:	20070270 	.word	0x20070270
   80720:	20070d70 	.word	0x20070d70
   80724:	20070d6c 	.word	0x20070d6c
   80728:	20070c44 	.word	0x20070c44
   8072c:	20070ce8 	.word	0x20070ce8
   80730:	000821ad 	.word	0x000821ad
   80734:	00080741 	.word	0x00080741
   80738:	20070cec 	.word	0x20070cec
   8073c:	00082425 	.word	0x00082425

00080740 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   80740:	b100      	cbz	r0, 80744 <udi_cdc_data_sent+0x4>
   80742:	4770      	bx	lr
{
   80744:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80746:	4b07      	ldr	r3, [pc, #28]	; (80764 <udi_cdc_data_sent+0x24>)
   80748:	781b      	ldrb	r3, [r3, #0]
   8074a:	fab3 f383 	clz	r3, r3
   8074e:	095b      	lsrs	r3, r3, #5
   80750:	4a05      	ldr	r2, [pc, #20]	; (80768 <udi_cdc_data_sent+0x28>)
   80752:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80756:	4b05      	ldr	r3, [pc, #20]	; (8076c <udi_cdc_data_sent+0x2c>)
   80758:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8075a:	4b05      	ldr	r3, [pc, #20]	; (80770 <udi_cdc_data_sent+0x30>)
   8075c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8075e:	4b05      	ldr	r3, [pc, #20]	; (80774 <udi_cdc_data_sent+0x34>)
   80760:	4798      	blx	r3
   80762:	bd08      	pop	{r3, pc}
   80764:	20070d70 	.word	0x20070d70
   80768:	20070d6c 	.word	0x20070d6c
   8076c:	20070ce8 	.word	0x20070ce8
   80770:	20070d78 	.word	0x20070d78
   80774:	000805f9 	.word	0x000805f9

00080778 <udi_cdc_data_sof_notify>:
{
   80778:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   8077a:	2000      	movs	r0, #0
   8077c:	4b01      	ldr	r3, [pc, #4]	; (80784 <udi_cdc_data_sof_notify+0xc>)
   8077e:	4798      	blx	r3
   80780:	bd08      	pop	{r3, pc}
   80782:	bf00      	nop
   80784:	000805f9 	.word	0x000805f9

00080788 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
   80788:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8078a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8078e:	fab3 f383 	clz	r3, r3
   80792:	095b      	lsrs	r3, r3, #5
   80794:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   80796:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   80798:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8079c:	2200      	movs	r2, #0
   8079e:	4b0b      	ldr	r3, [pc, #44]	; (807cc <udi_cdc_multi_get_nb_received_data+0x44>)
   807a0:	701a      	strb	r2, [r3, #0]
	return flags;
   807a2:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   807a4:	4b0a      	ldr	r3, [pc, #40]	; (807d0 <udi_cdc_multi_get_nb_received_data+0x48>)
   807a6:	8818      	ldrh	r0, [r3, #0]
   807a8:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   807aa:	4a0a      	ldr	r2, [pc, #40]	; (807d4 <udi_cdc_multi_get_nb_received_data+0x4c>)
   807ac:	7812      	ldrb	r2, [r2, #0]
   807ae:	b2d2      	uxtb	r2, r2
   807b0:	4809      	ldr	r0, [pc, #36]	; (807d8 <udi_cdc_multi_get_nb_received_data+0x50>)
   807b2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   807b6:	b280      	uxth	r0, r0
   807b8:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   807ba:	b129      	cbz	r1, 807c8 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
   807bc:	2201      	movs	r2, #1
   807be:	4b03      	ldr	r3, [pc, #12]	; (807cc <udi_cdc_multi_get_nb_received_data+0x44>)
   807c0:	701a      	strb	r2, [r3, #0]
   807c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   807c6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   807c8:	b002      	add	sp, #8
   807ca:	4770      	bx	lr
   807cc:	20070270 	.word	0x20070270
   807d0:	20070cdc 	.word	0x20070cdc
   807d4:	20070cd8 	.word	0x20070cd8
   807d8:	20070cd4 	.word	0x20070cd4

000807dc <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   807dc:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   807de:	4b03      	ldr	r3, [pc, #12]	; (807ec <udi_cdc_multi_is_rx_ready+0x10>)
   807e0:	4798      	blx	r3
}
   807e2:	3000      	adds	r0, #0
   807e4:	bf18      	it	ne
   807e6:	2001      	movne	r0, #1
   807e8:	bd08      	pop	{r3, pc}
   807ea:	bf00      	nop
   807ec:	00080789 	.word	0x00080789

000807f0 <udi_cdc_rx_start>:
{
   807f0:	b510      	push	{r4, lr}
   807f2:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   807f4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   807f8:	fab3 f383 	clz	r3, r3
   807fc:	095b      	lsrs	r3, r3, #5
   807fe:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   80800:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   80802:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80806:	2200      	movs	r2, #0
   80808:	4b1e      	ldr	r3, [pc, #120]	; (80884 <udi_cdc_rx_start+0x94>)
   8080a:	701a      	strb	r2, [r3, #0]
	return flags;
   8080c:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   8080e:	4a1e      	ldr	r2, [pc, #120]	; (80888 <udi_cdc_rx_start+0x98>)
   80810:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80812:	4a1e      	ldr	r2, [pc, #120]	; (8088c <udi_cdc_rx_start+0x9c>)
   80814:	7812      	ldrb	r2, [r2, #0]
   80816:	b94a      	cbnz	r2, 8082c <udi_cdc_rx_start+0x3c>
   80818:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8081a:	4a1d      	ldr	r2, [pc, #116]	; (80890 <udi_cdc_rx_start+0xa0>)
   8081c:	8811      	ldrh	r1, [r2, #0]
   8081e:	b289      	uxth	r1, r1
   80820:	4a1c      	ldr	r2, [pc, #112]	; (80894 <udi_cdc_rx_start+0xa4>)
   80822:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   80826:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   80828:	4291      	cmp	r1, r2
   8082a:	d209      	bcs.n	80840 <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
   8082c:	b33b      	cbz	r3, 8087e <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
   8082e:	2201      	movs	r2, #1
   80830:	4b14      	ldr	r3, [pc, #80]	; (80884 <udi_cdc_rx_start+0x94>)
   80832:	701a      	strb	r2, [r3, #0]
   80834:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80838:	b662      	cpsie	i
		return false;
   8083a:	2000      	movs	r0, #0
}
   8083c:	b004      	add	sp, #16
   8083e:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
   80840:	2100      	movs	r1, #0
   80842:	4a13      	ldr	r2, [pc, #76]	; (80890 <udi_cdc_rx_start+0xa0>)
   80844:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80846:	fab4 f284 	clz	r2, r4
   8084a:	0952      	lsrs	r2, r2, #5
   8084c:	490e      	ldr	r1, [pc, #56]	; (80888 <udi_cdc_rx_start+0x98>)
   8084e:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   80850:	2101      	movs	r1, #1
   80852:	4a0e      	ldr	r2, [pc, #56]	; (8088c <udi_cdc_rx_start+0x9c>)
   80854:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   80856:	b123      	cbz	r3, 80862 <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
   80858:	4b0a      	ldr	r3, [pc, #40]	; (80884 <udi_cdc_rx_start+0x94>)
   8085a:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8085c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80860:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   80862:	2000      	movs	r0, #0
   80864:	4b0c      	ldr	r3, [pc, #48]	; (80898 <udi_cdc_rx_start+0xa8>)
   80866:	4798      	blx	r3
	return udd_ep_run(ep,
   80868:	4b0c      	ldr	r3, [pc, #48]	; (8089c <udi_cdc_rx_start+0xac>)
   8086a:	9300      	str	r3, [sp, #0]
   8086c:	2340      	movs	r3, #64	; 0x40
   8086e:	4a0c      	ldr	r2, [pc, #48]	; (808a0 <udi_cdc_rx_start+0xb0>)
   80870:	eb02 1284 	add.w	r2, r2, r4, lsl #6
   80874:	2101      	movs	r1, #1
   80876:	2002      	movs	r0, #2
   80878:	4c0a      	ldr	r4, [pc, #40]	; (808a4 <udi_cdc_rx_start+0xb4>)
   8087a:	47a0      	blx	r4
   8087c:	e7de      	b.n	8083c <udi_cdc_rx_start+0x4c>
		return false;
   8087e:	2000      	movs	r0, #0
   80880:	e7dc      	b.n	8083c <udi_cdc_rx_start+0x4c>
   80882:	bf00      	nop
   80884:	20070270 	.word	0x20070270
   80888:	20070cd8 	.word	0x20070cd8
   8088c:	20070ce0 	.word	0x20070ce0
   80890:	20070cdc 	.word	0x20070cdc
   80894:	20070cd4 	.word	0x20070cd4
   80898:	000807dd 	.word	0x000807dd
   8089c:	0008093d 	.word	0x0008093d
   808a0:	20070c54 	.word	0x20070c54
   808a4:	00082425 	.word	0x00082425

000808a8 <udi_cdc_data_enable>:
{
   808a8:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   808aa:	2400      	movs	r4, #0
   808ac:	4b16      	ldr	r3, [pc, #88]	; (80908 <udi_cdc_data_enable+0x60>)
   808ae:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   808b0:	4b16      	ldr	r3, [pc, #88]	; (8090c <udi_cdc_data_enable+0x64>)
   808b2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   808b4:	4b16      	ldr	r3, [pc, #88]	; (80910 <udi_cdc_data_enable+0x68>)
   808b6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   808b8:	4b16      	ldr	r3, [pc, #88]	; (80914 <udi_cdc_data_enable+0x6c>)
   808ba:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   808bc:	4b16      	ldr	r3, [pc, #88]	; (80918 <udi_cdc_data_enable+0x70>)
   808be:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   808c0:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   808c2:	4b16      	ldr	r3, [pc, #88]	; (8091c <udi_cdc_data_enable+0x74>)
   808c4:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   808c6:	4620      	mov	r0, r4
   808c8:	4b15      	ldr	r3, [pc, #84]	; (80920 <udi_cdc_data_enable+0x78>)
   808ca:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   808cc:	4b15      	ldr	r3, [pc, #84]	; (80924 <udi_cdc_data_enable+0x7c>)
   808ce:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   808d0:	4b15      	ldr	r3, [pc, #84]	; (80928 <udi_cdc_data_enable+0x80>)
   808d2:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   808d4:	4b15      	ldr	r3, [pc, #84]	; (8092c <udi_cdc_data_enable+0x84>)
   808d6:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   808d8:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   808da:	4b15      	ldr	r3, [pc, #84]	; (80930 <udi_cdc_data_enable+0x88>)
   808dc:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   808de:	4620      	mov	r0, r4
   808e0:	4b14      	ldr	r3, [pc, #80]	; (80934 <udi_cdc_data_enable+0x8c>)
   808e2:	4798      	blx	r3
   808e4:	4601      	mov	r1, r0
   808e6:	b140      	cbz	r0, 808fa <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
   808e8:	4a07      	ldr	r2, [pc, #28]	; (80908 <udi_cdc_data_enable+0x60>)
   808ea:	7813      	ldrb	r3, [r2, #0]
   808ec:	3301      	adds	r3, #1
   808ee:	b2db      	uxtb	r3, r3
   808f0:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   808f2:	7813      	ldrb	r3, [r2, #0]
   808f4:	b2db      	uxtb	r3, r3
   808f6:	2b01      	cmp	r3, #1
   808f8:	d001      	beq.n	808fe <udi_cdc_data_enable+0x56>
}
   808fa:	4608      	mov	r0, r1
   808fc:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   808fe:	2201      	movs	r2, #1
   80900:	4b0d      	ldr	r3, [pc, #52]	; (80938 <udi_cdc_data_enable+0x90>)
   80902:	701a      	strb	r2, [r3, #0]
   80904:	e7f9      	b.n	808fa <udi_cdc_data_enable+0x52>
   80906:	bf00      	nop
   80908:	20070c50 	.word	0x20070c50
   8090c:	20070d78 	.word	0x20070d78
   80910:	20070ce8 	.word	0x20070ce8
   80914:	20070d70 	.word	0x20070d70
   80918:	20070d6c 	.word	0x20070d6c
   8091c:	20070d74 	.word	0x20070d74
   80920:	000805f9 	.word	0x000805f9
   80924:	20070ce0 	.word	0x20070ce0
   80928:	20070cd8 	.word	0x20070cd8
   8092c:	20070cd4 	.word	0x20070cd4
   80930:	20070cdc 	.word	0x20070cdc
   80934:	000807f1 	.word	0x000807f1
   80938:	20070c46 	.word	0x20070c46

0008093c <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   8093c:	b9e8      	cbnz	r0, 8097a <udi_cdc_data_received+0x3e>
{
   8093e:	b510      	push	{r4, lr}
   80940:	b082      	sub	sp, #8
   80942:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   80944:	4b0d      	ldr	r3, [pc, #52]	; (8097c <udi_cdc_data_received+0x40>)
   80946:	781c      	ldrb	r4, [r3, #0]
   80948:	fab4 f484 	clz	r4, r4
   8094c:	0964      	lsrs	r4, r4, #5
	if (!n) {
   8094e:	b151      	cbz	r1, 80966 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   80950:	b289      	uxth	r1, r1
   80952:	4b0b      	ldr	r3, [pc, #44]	; (80980 <udi_cdc_data_received+0x44>)
   80954:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   80958:	2000      	movs	r0, #0
   8095a:	4b0a      	ldr	r3, [pc, #40]	; (80984 <udi_cdc_data_received+0x48>)
   8095c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   8095e:	4b0a      	ldr	r3, [pc, #40]	; (80988 <udi_cdc_data_received+0x4c>)
   80960:	4798      	blx	r3
}
   80962:	b002      	add	sp, #8
   80964:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
   80966:	4b09      	ldr	r3, [pc, #36]	; (8098c <udi_cdc_data_received+0x50>)
   80968:	9300      	str	r3, [sp, #0]
   8096a:	2340      	movs	r3, #64	; 0x40
   8096c:	4a08      	ldr	r2, [pc, #32]	; (80990 <udi_cdc_data_received+0x54>)
   8096e:	eb02 1284 	add.w	r2, r2, r4, lsl #6
   80972:	2101      	movs	r1, #1
   80974:	4c07      	ldr	r4, [pc, #28]	; (80994 <udi_cdc_data_received+0x58>)
   80976:	47a0      	blx	r4
		return;
   80978:	e7f3      	b.n	80962 <udi_cdc_data_received+0x26>
   8097a:	4770      	bx	lr
   8097c:	20070cd8 	.word	0x20070cd8
   80980:	20070cd4 	.word	0x20070cd4
   80984:	20070ce0 	.word	0x20070ce0
   80988:	000807f1 	.word	0x000807f1
   8098c:	0008093d 	.word	0x0008093d
   80990:	20070c54 	.word	0x20070c54
   80994:	00082425 	.word	0x00082425

00080998 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
   80998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8099c:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   8099e:	4b25      	ldr	r3, [pc, #148]	; (80a34 <udi_cdc_multi_getc+0x9c>)
   809a0:	f893 8006 	ldrb.w	r8, [r3, #6]
   809a4:	f1b8 0f09 	cmp.w	r8, #9
   809a8:	bf14      	ite	ne
   809aa:	f04f 0800 	movne.w	r8, #0
   809ae:	f04f 0801 	moveq.w	r8, #1
	int rx_data = 0;
   809b2:	f04f 0a00 	mov.w	sl, #0
	cpu_irq_disable();
   809b6:	4c20      	ldr	r4, [pc, #128]	; (80a38 <udi_cdc_multi_getc+0xa0>)
   809b8:	46d1      	mov	r9, sl
   809ba:	4657      	mov	r7, sl

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   809bc:	4d1f      	ldr	r5, [pc, #124]	; (80a3c <udi_cdc_multi_getc+0xa4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   809be:	4e20      	ldr	r6, [pc, #128]	; (80a40 <udi_cdc_multi_getc+0xa8>)
   809c0:	e004      	b.n	809cc <udi_cdc_multi_getc+0x34>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
   809c2:	428b      	cmp	r3, r1
   809c4:	d323      	bcc.n	80a0e <udi_cdc_multi_getc+0x76>
		if (!udi_cdc_data_running) {
   809c6:	4b1f      	ldr	r3, [pc, #124]	; (80a44 <udi_cdc_multi_getc+0xac>)
   809c8:	781b      	ldrb	r3, [r3, #0]
   809ca:	b1d3      	cbz	r3, 80a02 <udi_cdc_multi_getc+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   809cc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   809d0:	fab3 f383 	clz	r3, r3
   809d4:	095b      	lsrs	r3, r3, #5
   809d6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   809d8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   809da:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   809de:	7027      	strb	r7, [r4, #0]
	return flags;
   809e0:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
   809e2:	882b      	ldrh	r3, [r5, #0]
   809e4:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
   809e6:	7832      	ldrb	r2, [r6, #0]
   809e8:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   809ea:	4917      	ldr	r1, [pc, #92]	; (80a48 <udi_cdc_multi_getc+0xb0>)
   809ec:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   809f0:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
   809f2:	2800      	cmp	r0, #0
   809f4:	d0e5      	beq.n	809c2 <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
   809f6:	2001      	movs	r0, #1
   809f8:	7020      	strb	r0, [r4, #0]
   809fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   809fe:	b662      	cpsie	i
   80a00:	e7df      	b.n	809c2 <udi_cdc_multi_getc+0x2a>
			return 0;
   80a02:	f04f 0a00 	mov.w	sl, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
   80a06:	4650      	mov	r0, sl
   80a08:	b002      	add	sp, #8
   80a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
   80a0e:	490f      	ldr	r1, [pc, #60]	; (80a4c <udi_cdc_multi_getc+0xb4>)
   80a10:	eb01 1282 	add.w	r2, r1, r2, lsl #6
   80a14:	5cd2      	ldrb	r2, [r2, r3]
   80a16:	ea42 0a0a 	orr.w	sl, r2, sl
	udi_cdc_rx_pos[port] = pos+1;
   80a1a:	3301      	adds	r3, #1
   80a1c:	b29b      	uxth	r3, r3
   80a1e:	802b      	strh	r3, [r5, #0]
	udi_cdc_rx_start(port);
   80a20:	4648      	mov	r0, r9
   80a22:	4b0b      	ldr	r3, [pc, #44]	; (80a50 <udi_cdc_multi_getc+0xb8>)
   80a24:	4798      	blx	r3
	if (b_databit_9) {
   80a26:	f1b8 0f00 	cmp.w	r8, #0
   80a2a:	d0ec      	beq.n	80a06 <udi_cdc_multi_getc+0x6e>
		rx_data = rx_data << 8;
   80a2c:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
		b_databit_9 = false;
   80a30:	46c8      	mov	r8, r9
		goto udi_cdc_getc_process_one_byte;
   80a32:	e7cb      	b.n	809cc <udi_cdc_multi_getc+0x34>
   80a34:	20070c48 	.word	0x20070c48
   80a38:	20070270 	.word	0x20070270
   80a3c:	20070cdc 	.word	0x20070cdc
   80a40:	20070cd8 	.word	0x20070cd8
   80a44:	20070c46 	.word	0x20070c46
   80a48:	20070cd4 	.word	0x20070cd4
   80a4c:	20070c54 	.word	0x20070c54
   80a50:	000807f1 	.word	0x000807f1

00080a54 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
   80a54:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
   80a56:	2000      	movs	r0, #0
   80a58:	4b01      	ldr	r3, [pc, #4]	; (80a60 <udi_cdc_getc+0xc>)
   80a5a:	4798      	blx	r3
}
   80a5c:	bd08      	pop	{r3, pc}
   80a5e:	bf00      	nop
   80a60:	00080999 	.word	0x00080999

00080a64 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   80a64:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   80a66:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80a6a:	fab3 f383 	clz	r3, r3
   80a6e:	095b      	lsrs	r3, r3, #5
   80a70:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   80a72:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   80a74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80a78:	2200      	movs	r2, #0
   80a7a:	4b14      	ldr	r3, [pc, #80]	; (80acc <udi_cdc_multi_get_free_tx_buffer+0x68>)
   80a7c:	701a      	strb	r2, [r3, #0]
	return flags;
   80a7e:	9a01      	ldr	r2, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   80a80:	4b13      	ldr	r3, [pc, #76]	; (80ad0 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   80a82:	781b      	ldrb	r3, [r3, #0]
   80a84:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   80a86:	4913      	ldr	r1, [pc, #76]	; (80ad4 <udi_cdc_multi_get_free_tx_buffer+0x70>)
   80a88:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   80a8c:	2840      	cmp	r0, #64	; 0x40
   80a8e:	d00a      	beq.n	80aa6 <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   80a90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	if (cpu_irq_is_enabled_flags(flags))
   80a94:	b12a      	cbz	r2, 80aa2 <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
   80a96:	2201      	movs	r2, #1
   80a98:	4b0c      	ldr	r3, [pc, #48]	; (80acc <udi_cdc_multi_get_free_tx_buffer+0x68>)
   80a9a:	701a      	strb	r2, [r3, #0]
   80a9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80aa0:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   80aa2:	b002      	add	sp, #8
   80aa4:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   80aa6:	490c      	ldr	r1, [pc, #48]	; (80ad8 <udi_cdc_multi_get_free_tx_buffer+0x74>)
   80aa8:	7809      	ldrb	r1, [r1, #0]
   80aaa:	2900      	cmp	r1, #0
   80aac:	d1f0      	bne.n	80a90 <udi_cdc_multi_get_free_tx_buffer+0x2c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   80aae:	490b      	ldr	r1, [pc, #44]	; (80adc <udi_cdc_multi_get_free_tx_buffer+0x78>)
   80ab0:	7809      	ldrb	r1, [r1, #0]
   80ab2:	2900      	cmp	r1, #0
   80ab4:	d1ec      	bne.n	80a90 <udi_cdc_multi_get_free_tx_buffer+0x2c>
			udi_cdc_tx_both_buf_to_send[port] = true;
   80ab6:	2001      	movs	r0, #1
   80ab8:	4908      	ldr	r1, [pc, #32]	; (80adc <udi_cdc_multi_get_free_tx_buffer+0x78>)
   80aba:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   80abc:	fab3 f383 	clz	r3, r3
   80ac0:	095b      	lsrs	r3, r3, #5
   80ac2:	4903      	ldr	r1, [pc, #12]	; (80ad0 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   80ac4:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
   80ac6:	2000      	movs	r0, #0
   80ac8:	e7e2      	b.n	80a90 <udi_cdc_multi_get_free_tx_buffer+0x2c>
   80aca:	bf00      	nop
   80acc:	20070270 	.word	0x20070270
   80ad0:	20070d70 	.word	0x20070d70
   80ad4:	20070d6c 	.word	0x20070d6c
   80ad8:	20070d78 	.word	0x20070d78
   80adc:	20070ce8 	.word	0x20070ce8

00080ae0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   80ae0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   80ae2:	4b03      	ldr	r3, [pc, #12]	; (80af0 <udi_cdc_multi_is_tx_ready+0x10>)
   80ae4:	4798      	blx	r3
}
   80ae6:	3000      	adds	r0, #0
   80ae8:	bf18      	it	ne
   80aea:	2001      	movne	r0, #1
   80aec:	bd08      	pop	{r3, pc}
   80aee:	bf00      	nop
   80af0:	00080a65 	.word	0x00080a65

00080af4 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80af8:	b082      	sub	sp, #8
   80afa:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   80afc:	4b1d      	ldr	r3, [pc, #116]	; (80b74 <udi_cdc_multi_putc+0x80>)
   80afe:	799d      	ldrb	r5, [r3, #6]
   80b00:	2d09      	cmp	r5, #9
   80b02:	bf14      	ite	ne
   80b04:	2500      	movne	r5, #0
   80b06:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80b08:	4e1b      	ldr	r6, [pc, #108]	; (80b78 <udi_cdc_multi_putc+0x84>)
	cpu_irq_disable();
   80b0a:	4f1c      	ldr	r7, [pc, #112]	; (80b7c <udi_cdc_multi_putc+0x88>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   80b0c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80b8c <udi_cdc_multi_putc+0x98>
   80b10:	e022      	b.n	80b58 <udi_cdc_multi_putc+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   80b12:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80b16:	fab3 f383 	clz	r3, r3
   80b1a:	095b      	lsrs	r3, r3, #5
   80b1c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   80b1e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   80b20:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80b24:	2300      	movs	r3, #0
   80b26:	703b      	strb	r3, [r7, #0]
	return flags;
   80b28:	9801      	ldr	r0, [sp, #4]
   80b2a:	f898 3000 	ldrb.w	r3, [r8]
   80b2e:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80b30:	4a13      	ldr	r2, [pc, #76]	; (80b80 <udi_cdc_multi_putc+0x8c>)
   80b32:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   80b36:	f101 0e01 	add.w	lr, r1, #1
   80b3a:	f822 e013 	strh.w	lr, [r2, r3, lsl #1]
   80b3e:	4a11      	ldr	r2, [pc, #68]	; (80b84 <udi_cdc_multi_putc+0x90>)
   80b40:	eb02 1383 	add.w	r3, r2, r3, lsl #6
   80b44:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
   80b46:	b120      	cbz	r0, 80b52 <udi_cdc_multi_putc+0x5e>
		cpu_irq_enable();
   80b48:	2301      	movs	r3, #1
   80b4a:	703b      	strb	r3, [r7, #0]
   80b4c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80b50:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80b52:	b165      	cbz	r5, 80b6e <udi_cdc_multi_putc+0x7a>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80b54:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   80b56:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80b58:	2000      	movs	r0, #0
   80b5a:	47b0      	blx	r6
   80b5c:	2800      	cmp	r0, #0
   80b5e:	d1d8      	bne.n	80b12 <udi_cdc_multi_putc+0x1e>
		if (!udi_cdc_data_running) {
   80b60:	4b09      	ldr	r3, [pc, #36]	; (80b88 <udi_cdc_multi_putc+0x94>)
   80b62:	781b      	ldrb	r3, [r3, #0]
   80b64:	2b00      	cmp	r3, #0
   80b66:	d1f7      	bne.n	80b58 <udi_cdc_multi_putc+0x64>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
   80b68:	b002      	add	sp, #8
   80b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
   80b6e:	2001      	movs	r0, #1
   80b70:	e7fa      	b.n	80b68 <udi_cdc_multi_putc+0x74>
   80b72:	bf00      	nop
   80b74:	20070c48 	.word	0x20070c48
   80b78:	00080ae1 	.word	0x00080ae1
   80b7c:	20070270 	.word	0x20070270
   80b80:	20070d6c 	.word	0x20070d6c
   80b84:	20070cec 	.word	0x20070cec
   80b88:	20070c46 	.word	0x20070c46
   80b8c:	20070d70 	.word	0x20070d70

00080b90 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
   80b90:	b508      	push	{r3, lr}
	return udi_cdc_multi_putc(0, value);
   80b92:	4601      	mov	r1, r0
   80b94:	2000      	movs	r0, #0
   80b96:	4b01      	ldr	r3, [pc, #4]	; (80b9c <udi_cdc_putc+0xc>)
   80b98:	4798      	blx	r3
}
   80b9a:	bd08      	pop	{r3, pc}
   80b9c:	00080af5 	.word	0x00080af5

00080ba0 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   80ba0:	4b10      	ldr	r3, [pc, #64]	; (80be4 <udc_next_desc_in_iface+0x44>)
   80ba2:	681b      	ldr	r3, [r3, #0]
   80ba4:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80ba6:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80ba8:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   80baa:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80bac:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   80bae:	4290      	cmp	r0, r2
   80bb0:	d211      	bcs.n	80bd6 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80bb2:	7843      	ldrb	r3, [r0, #1]
   80bb4:	2b04      	cmp	r3, #4
   80bb6:	d010      	beq.n	80bda <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   80bb8:	428b      	cmp	r3, r1
   80bba:	d009      	beq.n	80bd0 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   80bbc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80bbe:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   80bc0:	4290      	cmp	r0, r2
   80bc2:	d206      	bcs.n	80bd2 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80bc4:	7843      	ldrb	r3, [r0, #1]
   80bc6:	2b04      	cmp	r3, #4
   80bc8:	d009      	beq.n	80bde <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
   80bca:	428b      	cmp	r3, r1
   80bcc:	d1f6      	bne.n	80bbc <udc_next_desc_in_iface+0x1c>
   80bce:	e007      	b.n	80be0 <udc_next_desc_in_iface+0x40>
   80bd0:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
   80bd2:	2000      	movs	r0, #0
   80bd4:	4770      	bx	lr
   80bd6:	2000      	movs	r0, #0
   80bd8:	4770      	bx	lr
   80bda:	2000      	movs	r0, #0
   80bdc:	4770      	bx	lr
   80bde:	2000      	movs	r0, #0
}
   80be0:	4770      	bx	lr
   80be2:	bf00      	nop
   80be4:	20070d94 	.word	0x20070d94

00080be8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   80be8:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   80bea:	4b03      	ldr	r3, [pc, #12]	; (80bf8 <udc_valid_address+0x10>)
   80bec:	7898      	ldrb	r0, [r3, #2]
   80bee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   80bf2:	4b02      	ldr	r3, [pc, #8]	; (80bfc <udc_valid_address+0x14>)
   80bf4:	4798      	blx	r3
   80bf6:	bd08      	pop	{r3, pc}
   80bf8:	20070fa8 	.word	0x20070fa8
   80bfc:	00082175 	.word	0x00082175

00080c00 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   80c00:	4b19      	ldr	r3, [pc, #100]	; (80c68 <udc_update_iface_desc+0x68>)
   80c02:	781b      	ldrb	r3, [r3, #0]
   80c04:	b34b      	cbz	r3, 80c5a <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80c06:	4b19      	ldr	r3, [pc, #100]	; (80c6c <udc_update_iface_desc+0x6c>)
   80c08:	681b      	ldr	r3, [r3, #0]
   80c0a:	681b      	ldr	r3, [r3, #0]
   80c0c:	791a      	ldrb	r2, [r3, #4]
   80c0e:	4282      	cmp	r2, r0
   80c10:	d925      	bls.n	80c5e <udc_update_iface_desc+0x5e>
{
   80c12:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80c14:	4a16      	ldr	r2, [pc, #88]	; (80c70 <udc_update_iface_desc+0x70>)
   80c16:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80c18:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80c1a:	441c      	add	r4, r3
	while (ptr_end_desc >
   80c1c:	42a3      	cmp	r3, r4
   80c1e:	d220      	bcs.n	80c62 <udc_update_iface_desc+0x62>
   80c20:	2500      	movs	r5, #0
   80c22:	2601      	movs	r6, #1
   80c24:	e007      	b.n	80c36 <udc_update_iface_desc+0x36>
   80c26:	4a12      	ldr	r2, [pc, #72]	; (80c70 <udc_update_iface_desc+0x70>)
   80c28:	6013      	str	r3, [r2, #0]
   80c2a:	e00f      	b.n	80c4c <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
   80c2c:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   80c2e:	4413      	add	r3, r2
   80c30:	4635      	mov	r5, r6
	while (ptr_end_desc >
   80c32:	42a3      	cmp	r3, r4
   80c34:	d20c      	bcs.n	80c50 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   80c36:	785a      	ldrb	r2, [r3, #1]
   80c38:	2a04      	cmp	r2, #4
   80c3a:	d1f7      	bne.n	80c2c <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80c3c:	789a      	ldrb	r2, [r3, #2]
   80c3e:	4282      	cmp	r2, r0
   80c40:	d1f4      	bne.n	80c2c <udc_update_iface_desc+0x2c>
   80c42:	78da      	ldrb	r2, [r3, #3]
   80c44:	428a      	cmp	r2, r1
   80c46:	d1f1      	bne.n	80c2c <udc_update_iface_desc+0x2c>
   80c48:	2d00      	cmp	r5, #0
   80c4a:	d1ec      	bne.n	80c26 <udc_update_iface_desc+0x26>
				return true; // Interface found
   80c4c:	2001      	movs	r0, #1
   80c4e:	e002      	b.n	80c56 <udc_update_iface_desc+0x56>
   80c50:	4a07      	ldr	r2, [pc, #28]	; (80c70 <udc_update_iface_desc+0x70>)
   80c52:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   80c54:	2000      	movs	r0, #0
}
   80c56:	bc70      	pop	{r4, r5, r6}
   80c58:	4770      	bx	lr
		return false;
   80c5a:	2000      	movs	r0, #0
   80c5c:	4770      	bx	lr
		return false;
   80c5e:	2000      	movs	r0, #0
   80c60:	4770      	bx	lr
	return false; // Interface not found
   80c62:	2000      	movs	r0, #0
   80c64:	e7f7      	b.n	80c56 <udc_update_iface_desc+0x56>
   80c66:	bf00      	nop
   80c68:	20070d90 	.word	0x20070d90
   80c6c:	20070d94 	.word	0x20070d94
   80c70:	20070d98 	.word	0x20070d98

00080c74 <udc_iface_disable>:
{
   80c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80c78:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   80c7a:	2100      	movs	r1, #0
   80c7c:	4b13      	ldr	r3, [pc, #76]	; (80ccc <udc_iface_disable+0x58>)
   80c7e:	4798      	blx	r3
   80c80:	4680      	mov	r8, r0
   80c82:	b910      	cbnz	r0, 80c8a <udc_iface_disable+0x16>
}
   80c84:	4640      	mov	r0, r8
   80c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80c8a:	4b11      	ldr	r3, [pc, #68]	; (80cd0 <udc_iface_disable+0x5c>)
   80c8c:	681b      	ldr	r3, [r3, #0]
   80c8e:	685b      	ldr	r3, [r3, #4]
   80c90:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80c94:	f8d9 300c 	ldr.w	r3, [r9, #12]
   80c98:	4798      	blx	r3
   80c9a:	4601      	mov	r1, r0
   80c9c:	4620      	mov	r0, r4
   80c9e:	4b0b      	ldr	r3, [pc, #44]	; (80ccc <udc_iface_disable+0x58>)
   80ca0:	4798      	blx	r3
   80ca2:	4680      	mov	r8, r0
   80ca4:	2800      	cmp	r0, #0
   80ca6:	d0ed      	beq.n	80c84 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80ca8:	4b0a      	ldr	r3, [pc, #40]	; (80cd4 <udc_iface_disable+0x60>)
   80caa:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80cac:	2605      	movs	r6, #5
   80cae:	4d0a      	ldr	r5, [pc, #40]	; (80cd8 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
   80cb0:	4f0a      	ldr	r7, [pc, #40]	; (80cdc <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80cb2:	4631      	mov	r1, r6
   80cb4:	4620      	mov	r0, r4
   80cb6:	47a8      	blx	r5
			if (NULL == ep_desc) {
   80cb8:	4604      	mov	r4, r0
   80cba:	b110      	cbz	r0, 80cc2 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
   80cbc:	7880      	ldrb	r0, [r0, #2]
   80cbe:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80cc0:	e7f7      	b.n	80cb2 <udc_iface_disable+0x3e>
	udi_api->disable();
   80cc2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   80cc6:	4798      	blx	r3
	return true;
   80cc8:	e7dc      	b.n	80c84 <udc_iface_disable+0x10>
   80cca:	bf00      	nop
   80ccc:	00080c01 	.word	0x00080c01
   80cd0:	20070d94 	.word	0x20070d94
   80cd4:	20070d98 	.word	0x20070d98
   80cd8:	00080ba1 	.word	0x00080ba1
   80cdc:	000821d9 	.word	0x000821d9

00080ce0 <udc_iface_enable>:
{
   80ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ce4:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   80ce6:	4b10      	ldr	r3, [pc, #64]	; (80d28 <udc_iface_enable+0x48>)
   80ce8:	4798      	blx	r3
   80cea:	4603      	mov	r3, r0
   80cec:	b1c8      	cbz	r0, 80d22 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80cee:	4b0f      	ldr	r3, [pc, #60]	; (80d2c <udc_iface_enable+0x4c>)
   80cf0:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80cf2:	2605      	movs	r6, #5
   80cf4:	4d0e      	ldr	r5, [pc, #56]	; (80d30 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80cf6:	4f0f      	ldr	r7, [pc, #60]	; (80d34 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80cf8:	4631      	mov	r1, r6
   80cfa:	4620      	mov	r0, r4
   80cfc:	47a8      	blx	r5
		if (NULL == ep_desc)
   80cfe:	4604      	mov	r4, r0
   80d00:	b138      	cbz	r0, 80d12 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80d02:	8882      	ldrh	r2, [r0, #4]
   80d04:	78c1      	ldrb	r1, [r0, #3]
   80d06:	7880      	ldrb	r0, [r0, #2]
   80d08:	47b8      	blx	r7
   80d0a:	4603      	mov	r3, r0
   80d0c:	2800      	cmp	r0, #0
   80d0e:	d1f3      	bne.n	80cf8 <udc_iface_enable+0x18>
   80d10:	e007      	b.n	80d22 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   80d12:	4b09      	ldr	r3, [pc, #36]	; (80d38 <udc_iface_enable+0x58>)
   80d14:	681b      	ldr	r3, [r3, #0]
   80d16:	685b      	ldr	r3, [r3, #4]
   80d18:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   80d1c:	681b      	ldr	r3, [r3, #0]
   80d1e:	4798      	blx	r3
   80d20:	4603      	mov	r3, r0
}
   80d22:	4618      	mov	r0, r3
   80d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d28:	00080c01 	.word	0x00080c01
   80d2c:	20070d98 	.word	0x20070d98
   80d30:	00080ba1 	.word	0x00080ba1
   80d34:	00082521 	.word	0x00082521
   80d38:	20070d94 	.word	0x20070d94

00080d3c <udc_start>:
{
   80d3c:	b508      	push	{r3, lr}
	udd_enable();
   80d3e:	4b01      	ldr	r3, [pc, #4]	; (80d44 <udc_start+0x8>)
   80d40:	4798      	blx	r3
   80d42:	bd08      	pop	{r3, pc}
   80d44:	00081901 	.word	0x00081901

00080d48 <udc_reset>:
{
   80d48:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   80d4a:	4b0d      	ldr	r3, [pc, #52]	; (80d80 <udc_reset+0x38>)
   80d4c:	781b      	ldrb	r3, [r3, #0]
   80d4e:	b183      	cbz	r3, 80d72 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80d50:	4b0c      	ldr	r3, [pc, #48]	; (80d84 <udc_reset+0x3c>)
   80d52:	681b      	ldr	r3, [r3, #0]
   80d54:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   80d56:	791b      	ldrb	r3, [r3, #4]
   80d58:	b15b      	cbz	r3, 80d72 <udc_reset+0x2a>
   80d5a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   80d5c:	4e0a      	ldr	r6, [pc, #40]	; (80d88 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80d5e:	4d09      	ldr	r5, [pc, #36]	; (80d84 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   80d60:	4620      	mov	r0, r4
   80d62:	47b0      	blx	r6
				iface_num++) {
   80d64:	3401      	adds	r4, #1
   80d66:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80d68:	682b      	ldr	r3, [r5, #0]
   80d6a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   80d6c:	791b      	ldrb	r3, [r3, #4]
   80d6e:	42a3      	cmp	r3, r4
   80d70:	d8f6      	bhi.n	80d60 <udc_reset+0x18>
	udc_num_configuration = 0;
   80d72:	2200      	movs	r2, #0
   80d74:	4b02      	ldr	r3, [pc, #8]	; (80d80 <udc_reset+0x38>)
   80d76:	701a      	strb	r2, [r3, #0]
	udc_device_status =
   80d78:	2201      	movs	r2, #1
   80d7a:	4b04      	ldr	r3, [pc, #16]	; (80d8c <udc_reset+0x44>)
   80d7c:	801a      	strh	r2, [r3, #0]
   80d7e:	bd70      	pop	{r4, r5, r6, pc}
   80d80:	20070d90 	.word	0x20070d90
   80d84:	20070d94 	.word	0x20070d94
   80d88:	00080c75 	.word	0x00080c75
   80d8c:	20070d86 	.word	0x20070d86

00080d90 <udc_sof_notify>:
{
   80d90:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   80d92:	4b0d      	ldr	r3, [pc, #52]	; (80dc8 <udc_sof_notify+0x38>)
   80d94:	781b      	ldrb	r3, [r3, #0]
   80d96:	b1b3      	cbz	r3, 80dc6 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80d98:	4b0c      	ldr	r3, [pc, #48]	; (80dcc <udc_sof_notify+0x3c>)
   80d9a:	681b      	ldr	r3, [r3, #0]
   80d9c:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   80d9e:	7912      	ldrb	r2, [r2, #4]
   80da0:	b18a      	cbz	r2, 80dc6 <udc_sof_notify+0x36>
   80da2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80da4:	4d09      	ldr	r5, [pc, #36]	; (80dcc <udc_sof_notify+0x3c>)
   80da6:	e006      	b.n	80db6 <udc_sof_notify+0x26>
				iface_num++) {
   80da8:	3401      	adds	r4, #1
   80daa:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80dac:	682b      	ldr	r3, [r5, #0]
   80dae:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   80db0:	7912      	ldrb	r2, [r2, #4]
   80db2:	42a2      	cmp	r2, r4
   80db4:	d907      	bls.n	80dc6 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   80db6:	685b      	ldr	r3, [r3, #4]
   80db8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   80dbc:	691b      	ldr	r3, [r3, #16]
   80dbe:	2b00      	cmp	r3, #0
   80dc0:	d0f2      	beq.n	80da8 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   80dc2:	4798      	blx	r3
   80dc4:	e7f0      	b.n	80da8 <udc_sof_notify+0x18>
   80dc6:	bd38      	pop	{r3, r4, r5, pc}
   80dc8:	20070d90 	.word	0x20070d90
   80dcc:	20070d94 	.word	0x20070d94

00080dd0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   80dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   80dd2:	4b96      	ldr	r3, [pc, #600]	; (8102c <udc_process_setup+0x25c>)
   80dd4:	2200      	movs	r2, #0
   80dd6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   80dd8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   80dda:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   80ddc:	781b      	ldrb	r3, [r3, #0]
   80dde:	f013 0f80 	tst.w	r3, #128	; 0x80
   80de2:	d114      	bne.n	80e0e <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   80de4:	f013 0f60 	tst.w	r3, #96	; 0x60
   80de8:	f000 80b8 	beq.w	80f5c <udc_process_setup+0x18c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   80dec:	4b8f      	ldr	r3, [pc, #572]	; (8102c <udc_process_setup+0x25c>)
   80dee:	781b      	ldrb	r3, [r3, #0]
   80df0:	f003 031f 	and.w	r3, r3, #31
   80df4:	2b01      	cmp	r3, #1
   80df6:	f000 818b 	beq.w	81110 <udc_process_setup+0x340>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   80dfa:	4b8c      	ldr	r3, [pc, #560]	; (8102c <udc_process_setup+0x25c>)
   80dfc:	781b      	ldrb	r3, [r3, #0]
   80dfe:	f003 031f 	and.w	r3, r3, #31
   80e02:	2b02      	cmp	r3, #2
   80e04:	f000 81ac 	beq.w	81160 <udc_process_setup+0x390>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   80e08:	2300      	movs	r3, #0
#endif
}
   80e0a:	4618      	mov	r0, r3
   80e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
   80e0e:	4a87      	ldr	r2, [pc, #540]	; (8102c <udc_process_setup+0x25c>)
   80e10:	88d2      	ldrh	r2, [r2, #6]
   80e12:	2a00      	cmp	r2, #0
   80e14:	f000 81cd 	beq.w	811b2 <udc_process_setup+0x3e2>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   80e18:	f013 0f60 	tst.w	r3, #96	; 0x60
   80e1c:	d1e6      	bne.n	80dec <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80e1e:	f013 031f 	ands.w	r3, r3, #31
   80e22:	d106      	bne.n	80e32 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
   80e24:	4981      	ldr	r1, [pc, #516]	; (8102c <udc_process_setup+0x25c>)
   80e26:	7849      	ldrb	r1, [r1, #1]
   80e28:	2906      	cmp	r1, #6
   80e2a:	d013      	beq.n	80e54 <udc_process_setup+0x84>
   80e2c:	2908      	cmp	r1, #8
   80e2e:	d058      	beq.n	80ee2 <udc_process_setup+0x112>
   80e30:	b149      	cbz	r1, 80e46 <udc_process_setup+0x76>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80e32:	2b01      	cmp	r3, #1
   80e34:	d05c      	beq.n	80ef0 <udc_process_setup+0x120>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80e36:	2b02      	cmp	r3, #2
   80e38:	d1d8      	bne.n	80dec <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
   80e3a:	4b7c      	ldr	r3, [pc, #496]	; (8102c <udc_process_setup+0x25c>)
   80e3c:	785b      	ldrb	r3, [r3, #1]
   80e3e:	2b00      	cmp	r3, #0
   80e40:	d07e      	beq.n	80f40 <udc_process_setup+0x170>
	return false;
   80e42:	2300      	movs	r3, #0
   80e44:	e160      	b.n	81108 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   80e46:	2a02      	cmp	r2, #2
   80e48:	d1d0      	bne.n	80dec <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   80e4a:	2102      	movs	r1, #2
   80e4c:	4878      	ldr	r0, [pc, #480]	; (81030 <udc_process_setup+0x260>)
   80e4e:	4b79      	ldr	r3, [pc, #484]	; (81034 <udc_process_setup+0x264>)
   80e50:	4798      	blx	r3
   80e52:	e09f      	b.n	80f94 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   80e54:	4b75      	ldr	r3, [pc, #468]	; (8102c <udc_process_setup+0x25c>)
   80e56:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   80e58:	0a13      	lsrs	r3, r2, #8
   80e5a:	3b01      	subs	r3, #1
   80e5c:	2b0e      	cmp	r3, #14
   80e5e:	f200 8150 	bhi.w	81102 <udc_process_setup+0x332>
   80e62:	e8df f013 	tbh	[pc, r3, lsl #1]
   80e66:	000f      	.short	0x000f
   80e68:	0036001c 	.word	0x0036001c
   80e6c:	014e014e 	.word	0x014e014e
   80e70:	014e014e 	.word	0x014e014e
   80e74:	014e014e 	.word	0x014e014e
   80e78:	014e014e 	.word	0x014e014e
   80e7c:	014e014e 	.word	0x014e014e
   80e80:	002e014e 	.word	0x002e014e
				(uint8_t *) udc_config.confdev_lsfs,
   80e84:	4b6c      	ldr	r3, [pc, #432]	; (81038 <udc_process_setup+0x268>)
   80e86:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   80e88:	7801      	ldrb	r1, [r0, #0]
   80e8a:	4b6a      	ldr	r3, [pc, #424]	; (81034 <udc_process_setup+0x264>)
   80e8c:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   80e8e:	4b67      	ldr	r3, [pc, #412]	; (8102c <udc_process_setup+0x25c>)
   80e90:	88da      	ldrh	r2, [r3, #6]
   80e92:	899b      	ldrh	r3, [r3, #12]
   80e94:	4293      	cmp	r3, r2
   80e96:	d97d      	bls.n	80f94 <udc_process_setup+0x1c4>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   80e98:	4b64      	ldr	r3, [pc, #400]	; (8102c <udc_process_setup+0x25c>)
   80e9a:	819a      	strh	r2, [r3, #12]
   80e9c:	e07a      	b.n	80f94 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   80e9e:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
   80ea0:	4b65      	ldr	r3, [pc, #404]	; (81038 <udc_process_setup+0x268>)
   80ea2:	681b      	ldr	r3, [r3, #0]
   80ea4:	7c5b      	ldrb	r3, [r3, #17]
   80ea6:	4293      	cmp	r3, r2
   80ea8:	d9a0      	bls.n	80dec <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   80eaa:	4b63      	ldr	r3, [pc, #396]	; (81038 <udc_process_setup+0x268>)
   80eac:	685b      	ldr	r3, [r3, #4]
   80eae:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
   80eb2:	8841      	ldrh	r1, [r0, #2]
   80eb4:	4b5f      	ldr	r3, [pc, #380]	; (81034 <udc_process_setup+0x264>)
   80eb6:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   80eb8:	4b5c      	ldr	r3, [pc, #368]	; (8102c <udc_process_setup+0x25c>)
   80eba:	689b      	ldr	r3, [r3, #8]
   80ebc:	2202      	movs	r2, #2
   80ebe:	705a      	strb	r2, [r3, #1]
   80ec0:	e7e5      	b.n	80e8e <udc_process_setup+0xbe>
		if (udc_config.conf_bos == NULL) {
   80ec2:	4b5d      	ldr	r3, [pc, #372]	; (81038 <udc_process_setup+0x268>)
   80ec4:	6898      	ldr	r0, [r3, #8]
   80ec6:	2800      	cmp	r0, #0
   80ec8:	d090      	beq.n	80dec <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   80eca:	8841      	ldrh	r1, [r0, #2]
   80ecc:	4b59      	ldr	r3, [pc, #356]	; (81034 <udc_process_setup+0x264>)
   80ece:	4798      	blx	r3
   80ed0:	e7dd      	b.n	80e8e <udc_process_setup+0xbe>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   80ed2:	f012 0fff 	tst.w	r2, #255	; 0xff
   80ed6:	d189      	bne.n	80dec <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   80ed8:	2104      	movs	r1, #4
   80eda:	4858      	ldr	r0, [pc, #352]	; (8103c <udc_process_setup+0x26c>)
   80edc:	4b55      	ldr	r3, [pc, #340]	; (81034 <udc_process_setup+0x264>)
   80ede:	4798      	blx	r3
   80ee0:	e7d5      	b.n	80e8e <udc_process_setup+0xbe>
	if (udd_g_ctrlreq.req.wLength != 1) {
   80ee2:	2a01      	cmp	r2, #1
   80ee4:	d182      	bne.n	80dec <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
   80ee6:	2101      	movs	r1, #1
   80ee8:	4855      	ldr	r0, [pc, #340]	; (81040 <udc_process_setup+0x270>)
   80eea:	4b52      	ldr	r3, [pc, #328]	; (81034 <udc_process_setup+0x264>)
   80eec:	4798      	blx	r3
   80eee:	e051      	b.n	80f94 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
   80ef0:	494e      	ldr	r1, [pc, #312]	; (8102c <udc_process_setup+0x25c>)
   80ef2:	7849      	ldrb	r1, [r1, #1]
   80ef4:	290a      	cmp	r1, #10
   80ef6:	d19e      	bne.n	80e36 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
   80ef8:	2a01      	cmp	r2, #1
   80efa:	f47f af77 	bne.w	80dec <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
   80efe:	4b50      	ldr	r3, [pc, #320]	; (81040 <udc_process_setup+0x270>)
   80f00:	781b      	ldrb	r3, [r3, #0]
   80f02:	2b00      	cmp	r3, #0
   80f04:	f43f af72 	beq.w	80dec <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80f08:	4b48      	ldr	r3, [pc, #288]	; (8102c <udc_process_setup+0x25c>)
   80f0a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80f0c:	4b4d      	ldr	r3, [pc, #308]	; (81044 <udc_process_setup+0x274>)
   80f0e:	681d      	ldr	r5, [r3, #0]
   80f10:	682b      	ldr	r3, [r5, #0]
   80f12:	791b      	ldrb	r3, [r3, #4]
   80f14:	42a3      	cmp	r3, r4
   80f16:	f67f af69 	bls.w	80dec <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
   80f1a:	2100      	movs	r1, #0
   80f1c:	4620      	mov	r0, r4
   80f1e:	4b4a      	ldr	r3, [pc, #296]	; (81048 <udc_process_setup+0x278>)
   80f20:	4798      	blx	r3
   80f22:	2800      	cmp	r0, #0
   80f24:	f43f af62 	beq.w	80dec <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80f28:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   80f2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   80f2e:	68db      	ldr	r3, [r3, #12]
   80f30:	4798      	blx	r3
   80f32:	4b46      	ldr	r3, [pc, #280]	; (8104c <udc_process_setup+0x27c>)
   80f34:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   80f36:	2101      	movs	r1, #1
   80f38:	4618      	mov	r0, r3
   80f3a:	4b3e      	ldr	r3, [pc, #248]	; (81034 <udc_process_setup+0x264>)
   80f3c:	4798      	blx	r3
   80f3e:	e029      	b.n	80f94 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   80f40:	2a02      	cmp	r2, #2
   80f42:	f47f af53 	bne.w	80dec <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   80f46:	4b39      	ldr	r3, [pc, #228]	; (8102c <udc_process_setup+0x25c>)
   80f48:	7918      	ldrb	r0, [r3, #4]
   80f4a:	4b41      	ldr	r3, [pc, #260]	; (81050 <udc_process_setup+0x280>)
   80f4c:	4798      	blx	r3
   80f4e:	4b41      	ldr	r3, [pc, #260]	; (81054 <udc_process_setup+0x284>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   80f50:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   80f52:	2102      	movs	r1, #2
   80f54:	4618      	mov	r0, r3
   80f56:	4b37      	ldr	r3, [pc, #220]	; (81034 <udc_process_setup+0x264>)
   80f58:	4798      	blx	r3
   80f5a:	e01b      	b.n	80f94 <udc_process_setup+0x1c4>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80f5c:	f013 031f 	ands.w	r3, r3, #31
   80f60:	f040 8082 	bne.w	81068 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
   80f64:	4a31      	ldr	r2, [pc, #196]	; (8102c <udc_process_setup+0x25c>)
   80f66:	7852      	ldrb	r2, [r2, #1]
   80f68:	3a01      	subs	r2, #1
   80f6a:	2a08      	cmp	r2, #8
   80f6c:	d87c      	bhi.n	81068 <udc_process_setup+0x298>
   80f6e:	e8df f012 	tbh	[pc, r2, lsl #1]
   80f72:	0013      	.short	0x0013
   80f74:	00ca007b 	.word	0x00ca007b
   80f78:	0009007b 	.word	0x0009007b
   80f7c:	007b007b 	.word	0x007b007b
   80f80:	0023007b 	.word	0x0023007b
	if (udd_g_ctrlreq.req.wLength) {
   80f84:	4b29      	ldr	r3, [pc, #164]	; (8102c <udc_process_setup+0x25c>)
   80f86:	88db      	ldrh	r3, [r3, #6]
   80f88:	2b00      	cmp	r3, #0
   80f8a:	f47f af2f 	bne.w	80dec <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
   80f8e:	4a32      	ldr	r2, [pc, #200]	; (81058 <udc_process_setup+0x288>)
   80f90:	4b26      	ldr	r3, [pc, #152]	; (8102c <udc_process_setup+0x25c>)
   80f92:	611a      	str	r2, [r3, #16]
			return true;
   80f94:	2301      	movs	r3, #1
   80f96:	e738      	b.n	80e0a <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
   80f98:	4b24      	ldr	r3, [pc, #144]	; (8102c <udc_process_setup+0x25c>)
   80f9a:	88db      	ldrh	r3, [r3, #6]
   80f9c:	2b00      	cmp	r3, #0
   80f9e:	f47f af25 	bne.w	80dec <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   80fa2:	4b22      	ldr	r3, [pc, #136]	; (8102c <udc_process_setup+0x25c>)
   80fa4:	885b      	ldrh	r3, [r3, #2]
   80fa6:	2b01      	cmp	r3, #1
   80fa8:	f47f af20 	bne.w	80dec <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   80fac:	4a20      	ldr	r2, [pc, #128]	; (81030 <udc_process_setup+0x260>)
   80fae:	8813      	ldrh	r3, [r2, #0]
   80fb0:	f023 0302 	bic.w	r3, r3, #2
   80fb4:	8013      	strh	r3, [r2, #0]
   80fb6:	e7ed      	b.n	80f94 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength) {
   80fb8:	4b1c      	ldr	r3, [pc, #112]	; (8102c <udc_process_setup+0x25c>)
   80fba:	88db      	ldrh	r3, [r3, #6]
   80fbc:	2b00      	cmp	r3, #0
   80fbe:	f47f af15 	bne.w	80dec <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
   80fc2:	4b26      	ldr	r3, [pc, #152]	; (8105c <udc_process_setup+0x28c>)
   80fc4:	4798      	blx	r3
   80fc6:	2800      	cmp	r0, #0
   80fc8:	f43f af10 	beq.w	80dec <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80fcc:	4b17      	ldr	r3, [pc, #92]	; (8102c <udc_process_setup+0x25c>)
   80fce:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   80fd0:	4b19      	ldr	r3, [pc, #100]	; (81038 <udc_process_setup+0x268>)
   80fd2:	681b      	ldr	r3, [r3, #0]
   80fd4:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80fd6:	429a      	cmp	r2, r3
   80fd8:	f73f af08 	bgt.w	80dec <udc_process_setup+0x1c>
	udc_reset();
   80fdc:	4b20      	ldr	r3, [pc, #128]	; (81060 <udc_process_setup+0x290>)
   80fde:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   80fe0:	4b12      	ldr	r3, [pc, #72]	; (8102c <udc_process_setup+0x25c>)
   80fe2:	789b      	ldrb	r3, [r3, #2]
   80fe4:	4a16      	ldr	r2, [pc, #88]	; (81040 <udc_process_setup+0x270>)
   80fe6:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   80fe8:	2b00      	cmp	r3, #0
   80fea:	d0d3      	beq.n	80f94 <udc_process_setup+0x1c4>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   80fec:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   80ff0:	3b01      	subs	r3, #1
   80ff2:	4a11      	ldr	r2, [pc, #68]	; (81038 <udc_process_setup+0x268>)
   80ff4:	6852      	ldr	r2, [r2, #4]
   80ff6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   80ffa:	4912      	ldr	r1, [pc, #72]	; (81044 <udc_process_setup+0x274>)
   80ffc:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80ffe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   81002:	791b      	ldrb	r3, [r3, #4]
   81004:	2b00      	cmp	r3, #0
   81006:	d0c5      	beq.n	80f94 <udc_process_setup+0x1c4>
   81008:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   8100a:	4626      	mov	r6, r4
   8100c:	4d15      	ldr	r5, [pc, #84]	; (81064 <udc_process_setup+0x294>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8100e:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
   81010:	4631      	mov	r1, r6
   81012:	4620      	mov	r0, r4
   81014:	47a8      	blx	r5
   81016:	2800      	cmp	r0, #0
   81018:	f43f aee8 	beq.w	80dec <udc_process_setup+0x1c>
			iface_num++) {
   8101c:	3401      	adds	r4, #1
   8101e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81020:	683b      	ldr	r3, [r7, #0]
   81022:	681b      	ldr	r3, [r3, #0]
   81024:	791b      	ldrb	r3, [r3, #4]
   81026:	42a3      	cmp	r3, r4
   81028:	d8f2      	bhi.n	81010 <udc_process_setup+0x240>
   8102a:	e7b3      	b.n	80f94 <udc_process_setup+0x1c4>
   8102c:	20070fa8 	.word	0x20070fa8
   81030:	20070d86 	.word	0x20070d86
   81034:	000821cd 	.word	0x000821cd
   81038:	200701fc 	.word	0x200701fc
   8103c:	200701f8 	.word	0x200701f8
   81040:	20070d90 	.word	0x20070d90
   81044:	20070d94 	.word	0x20070d94
   81048:	00080c01 	.word	0x00080c01
   8104c:	20070d8c 	.word	0x20070d8c
   81050:	00082235 	.word	0x00082235
   81054:	20070d88 	.word	0x20070d88
   81058:	00080be9 	.word	0x00080be9
   8105c:	0008219d 	.word	0x0008219d
   81060:	00080d49 	.word	0x00080d49
   81064:	00080ce1 	.word	0x00080ce1
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81068:	2b01      	cmp	r3, #1
   8106a:	d00a      	beq.n	81082 <udc_process_setup+0x2b2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8106c:	2b02      	cmp	r3, #2
   8106e:	f47f aebd 	bne.w	80dec <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
   81072:	4b52      	ldr	r3, [pc, #328]	; (811bc <udc_process_setup+0x3ec>)
   81074:	785b      	ldrb	r3, [r3, #1]
   81076:	2b01      	cmp	r3, #1
   81078:	d020      	beq.n	810bc <udc_process_setup+0x2ec>
   8107a:	2b03      	cmp	r3, #3
   8107c:	d02e      	beq.n	810dc <udc_process_setup+0x30c>
	return false;
   8107e:	2300      	movs	r3, #0
   81080:	e042      	b.n	81108 <udc_process_setup+0x338>
			switch (udd_g_ctrlreq.req.bRequest) {
   81082:	4a4e      	ldr	r2, [pc, #312]	; (811bc <udc_process_setup+0x3ec>)
   81084:	7852      	ldrb	r2, [r2, #1]
   81086:	2a0b      	cmp	r2, #11
   81088:	d1f0      	bne.n	8106c <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
   8108a:	4b4c      	ldr	r3, [pc, #304]	; (811bc <udc_process_setup+0x3ec>)
   8108c:	88db      	ldrh	r3, [r3, #6]
   8108e:	2b00      	cmp	r3, #0
   81090:	f47f aeac 	bne.w	80dec <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
   81094:	4b4a      	ldr	r3, [pc, #296]	; (811c0 <udc_process_setup+0x3f0>)
   81096:	781b      	ldrb	r3, [r3, #0]
   81098:	2b00      	cmp	r3, #0
   8109a:	f43f aea7 	beq.w	80dec <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8109e:	4b47      	ldr	r3, [pc, #284]	; (811bc <udc_process_setup+0x3ec>)
   810a0:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   810a2:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   810a4:	4620      	mov	r0, r4
   810a6:	4b47      	ldr	r3, [pc, #284]	; (811c4 <udc_process_setup+0x3f4>)
   810a8:	4798      	blx	r3
   810aa:	2800      	cmp	r0, #0
   810ac:	f43f ae9e 	beq.w	80dec <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
   810b0:	b2e9      	uxtb	r1, r5
   810b2:	4620      	mov	r0, r4
   810b4:	4b44      	ldr	r3, [pc, #272]	; (811c8 <udc_process_setup+0x3f8>)
   810b6:	4798      	blx	r3
   810b8:	4603      	mov	r3, r0
   810ba:	e025      	b.n	81108 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
   810bc:	4b3f      	ldr	r3, [pc, #252]	; (811bc <udc_process_setup+0x3ec>)
   810be:	88db      	ldrh	r3, [r3, #6]
   810c0:	2b00      	cmp	r3, #0
   810c2:	f47f ae93 	bne.w	80dec <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   810c6:	4b3d      	ldr	r3, [pc, #244]	; (811bc <udc_process_setup+0x3ec>)
   810c8:	885b      	ldrh	r3, [r3, #2]
   810ca:	2b00      	cmp	r3, #0
   810cc:	f47f ae8e 	bne.w	80dec <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   810d0:	4b3a      	ldr	r3, [pc, #232]	; (811bc <udc_process_setup+0x3ec>)
   810d2:	7918      	ldrb	r0, [r3, #4]
   810d4:	4b3d      	ldr	r3, [pc, #244]	; (811cc <udc_process_setup+0x3fc>)
   810d6:	4798      	blx	r3
   810d8:	4603      	mov	r3, r0
   810da:	e015      	b.n	81108 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
   810dc:	4b37      	ldr	r3, [pc, #220]	; (811bc <udc_process_setup+0x3ec>)
   810de:	88db      	ldrh	r3, [r3, #6]
   810e0:	2b00      	cmp	r3, #0
   810e2:	f47f ae83 	bne.w	80dec <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   810e6:	4b35      	ldr	r3, [pc, #212]	; (811bc <udc_process_setup+0x3ec>)
   810e8:	885b      	ldrh	r3, [r3, #2]
   810ea:	2b00      	cmp	r3, #0
   810ec:	f47f ae7e 	bne.w	80dec <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   810f0:	4c32      	ldr	r4, [pc, #200]	; (811bc <udc_process_setup+0x3ec>)
   810f2:	7920      	ldrb	r0, [r4, #4]
   810f4:	4b36      	ldr	r3, [pc, #216]	; (811d0 <udc_process_setup+0x400>)
   810f6:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   810f8:	7920      	ldrb	r0, [r4, #4]
   810fa:	4b36      	ldr	r3, [pc, #216]	; (811d4 <udc_process_setup+0x404>)
   810fc:	4798      	blx	r3
   810fe:	4603      	mov	r3, r0
   81100:	e002      	b.n	81108 <udc_process_setup+0x338>
		return false;
   81102:	2300      	movs	r3, #0
   81104:	e000      	b.n	81108 <udc_process_setup+0x338>
				return udc_req_std_dev_set_feature();
   81106:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   81108:	2b00      	cmp	r3, #0
   8110a:	f47f ae7e 	bne.w	80e0a <udc_process_setup+0x3a>
   8110e:	e66d      	b.n	80dec <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
   81110:	4b2b      	ldr	r3, [pc, #172]	; (811c0 <udc_process_setup+0x3f0>)
   81112:	781b      	ldrb	r3, [r3, #0]
   81114:	2b00      	cmp	r3, #0
   81116:	d04e      	beq.n	811b6 <udc_process_setup+0x3e6>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81118:	4b28      	ldr	r3, [pc, #160]	; (811bc <udc_process_setup+0x3ec>)
   8111a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8111c:	4b2e      	ldr	r3, [pc, #184]	; (811d8 <udc_process_setup+0x408>)
   8111e:	681d      	ldr	r5, [r3, #0]
   81120:	682b      	ldr	r3, [r5, #0]
   81122:	791b      	ldrb	r3, [r3, #4]
   81124:	42a3      	cmp	r3, r4
   81126:	d801      	bhi.n	8112c <udc_process_setup+0x35c>
	return false;
   81128:	2300      	movs	r3, #0
   8112a:	e66e      	b.n	80e0a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
   8112c:	2100      	movs	r1, #0
   8112e:	4620      	mov	r0, r4
   81130:	4b2a      	ldr	r3, [pc, #168]	; (811dc <udc_process_setup+0x40c>)
   81132:	4798      	blx	r3
   81134:	2800      	cmp	r0, #0
   81136:	f43f ae60 	beq.w	80dfa <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8113a:	686b      	ldr	r3, [r5, #4]
   8113c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81140:	68eb      	ldr	r3, [r5, #12]
   81142:	4798      	blx	r3
   81144:	4601      	mov	r1, r0
   81146:	4620      	mov	r0, r4
   81148:	4b24      	ldr	r3, [pc, #144]	; (811dc <udc_process_setup+0x40c>)
   8114a:	4798      	blx	r3
   8114c:	2800      	cmp	r0, #0
   8114e:	f43f ae54 	beq.w	80dfa <udc_process_setup+0x2a>
	return udi_api->setup();
   81152:	68ab      	ldr	r3, [r5, #8]
   81154:	4798      	blx	r3
		if (udc_req_iface()) {
   81156:	4603      	mov	r3, r0
   81158:	2800      	cmp	r0, #0
   8115a:	f47f ae56 	bne.w	80e0a <udc_process_setup+0x3a>
   8115e:	e64c      	b.n	80dfa <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
   81160:	4b17      	ldr	r3, [pc, #92]	; (811c0 <udc_process_setup+0x3f0>)
   81162:	781b      	ldrb	r3, [r3, #0]
   81164:	b30b      	cbz	r3, 811aa <udc_process_setup+0x3da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81166:	4b1c      	ldr	r3, [pc, #112]	; (811d8 <udc_process_setup+0x408>)
   81168:	681a      	ldr	r2, [r3, #0]
   8116a:	6813      	ldr	r3, [r2, #0]
   8116c:	791b      	ldrb	r3, [r3, #4]
   8116e:	b1f3      	cbz	r3, 811ae <udc_process_setup+0x3de>
   81170:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81172:	4e1a      	ldr	r6, [pc, #104]	; (811dc <udc_process_setup+0x40c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81174:	4f18      	ldr	r7, [pc, #96]	; (811d8 <udc_process_setup+0x408>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   81176:	6853      	ldr	r3, [r2, #4]
   81178:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8117c:	68eb      	ldr	r3, [r5, #12]
   8117e:	4798      	blx	r3
   81180:	4601      	mov	r1, r0
   81182:	4620      	mov	r0, r4
   81184:	47b0      	blx	r6
   81186:	4603      	mov	r3, r0
   81188:	2800      	cmp	r0, #0
   8118a:	f43f ae3e 	beq.w	80e0a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
   8118e:	68ab      	ldr	r3, [r5, #8]
   81190:	4798      	blx	r3
   81192:	4603      	mov	r3, r0
   81194:	2800      	cmp	r0, #0
   81196:	f47f ae38 	bne.w	80e0a <udc_process_setup+0x3a>
			iface_num++) {
   8119a:	3401      	adds	r4, #1
   8119c:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8119e:	683a      	ldr	r2, [r7, #0]
   811a0:	6811      	ldr	r1, [r2, #0]
   811a2:	7909      	ldrb	r1, [r1, #4]
   811a4:	42a1      	cmp	r1, r4
   811a6:	d8e6      	bhi.n	81176 <udc_process_setup+0x3a6>
   811a8:	e62f      	b.n	80e0a <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
   811aa:	2300      	movs	r3, #0
   811ac:	e62d      	b.n	80e0a <udc_process_setup+0x3a>
	return false;
   811ae:	2300      	movs	r3, #0
   811b0:	e62b      	b.n	80e0a <udc_process_setup+0x3a>
			return false; // Error from USB host
   811b2:	2300      	movs	r3, #0
   811b4:	e629      	b.n	80e0a <udc_process_setup+0x3a>
	return false;
   811b6:	2300      	movs	r3, #0
   811b8:	e627      	b.n	80e0a <udc_process_setup+0x3a>
   811ba:	bf00      	nop
   811bc:	20070fa8 	.word	0x20070fa8
   811c0:	20070d90 	.word	0x20070d90
   811c4:	00080c75 	.word	0x00080c75
   811c8:	00080ce1 	.word	0x00080ce1
   811cc:	00082349 	.word	0x00082349
   811d0:	00082719 	.word	0x00082719
   811d4:	00082249 	.word	0x00082249
   811d8:	20070d94 	.word	0x20070d94
   811dc:	00080c01 	.word	0x00080c01

000811e0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   811e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   811e4:	b980      	cbnz	r0, 81208 <_read+0x28>
   811e6:	460c      	mov	r4, r1
   811e8:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   811ea:	2a00      	cmp	r2, #0
   811ec:	dd0f      	ble.n	8120e <_read+0x2e>
   811ee:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   811f0:	4e08      	ldr	r6, [pc, #32]	; (81214 <_read+0x34>)
   811f2:	4d09      	ldr	r5, [pc, #36]	; (81218 <_read+0x38>)
   811f4:	6830      	ldr	r0, [r6, #0]
   811f6:	4621      	mov	r1, r4
   811f8:	682b      	ldr	r3, [r5, #0]
   811fa:	4798      	blx	r3
		ptr++;
   811fc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   811fe:	42bc      	cmp	r4, r7
   81200:	d1f8      	bne.n	811f4 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   81202:	4640      	mov	r0, r8
   81204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   81208:	f04f 38ff 	mov.w	r8, #4294967295
   8120c:	e7f9      	b.n	81202 <_read+0x22>
	for (; len > 0; --len) {
   8120e:	4680      	mov	r8, r0
   81210:	e7f7      	b.n	81202 <_read+0x22>
   81212:	bf00      	nop
   81214:	20070fc4 	.word	0x20070fc4
   81218:	20070fa4 	.word	0x20070fa4

0008121c <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * unused, char data)
{
   8121c:	b508      	push	{r3, lr}
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
   8121e:	4b06      	ldr	r3, [pc, #24]	; (81238 <stdio_usb_putchar+0x1c>)
   81220:	781b      	ldrb	r3, [r3, #0]
   81222:	b90b      	cbnz	r3, 81228 <stdio_usb_putchar+0xc>
		return 0;  // -1
   81224:	2000      	movs	r0, #0
	}

	return udi_cdc_putc(data) ? 0 : -1;
}
   81226:	bd08      	pop	{r3, pc}
   81228:	4608      	mov	r0, r1
	return udi_cdc_putc(data) ? 0 : -1;
   8122a:	4b04      	ldr	r3, [pc, #16]	; (8123c <stdio_usb_putchar+0x20>)
   8122c:	4798      	blx	r3
   8122e:	fab0 f080 	clz	r0, r0
   81232:	0940      	lsrs	r0, r0, #5
   81234:	4240      	negs	r0, r0
   81236:	bd08      	pop	{r3, pc}
   81238:	20070d9c 	.word	0x20070d9c
   8123c:	00080b91 	.word	0x00080b91

00081240 <stdio_usb_getchar>:
void stdio_usb_getchar (void volatile * unused, char *data)
{
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
   81240:	4b05      	ldr	r3, [pc, #20]	; (81258 <stdio_usb_getchar+0x18>)
   81242:	781b      	ldrb	r3, [r3, #0]
   81244:	b90b      	cbnz	r3, 8124a <stdio_usb_getchar+0xa>
		*data = 0;  // -1
   81246:	700b      	strb	r3, [r1, #0]
		return;
   81248:	4770      	bx	lr
{
   8124a:	b510      	push	{r4, lr}
   8124c:	460c      	mov	r4, r1
	}

	*data = (char)udi_cdc_getc();
   8124e:	4b03      	ldr	r3, [pc, #12]	; (8125c <stdio_usb_getchar+0x1c>)
   81250:	4798      	blx	r3
   81252:	7020      	strb	r0, [r4, #0]
   81254:	bd10      	pop	{r4, pc}
   81256:	bf00      	nop
   81258:	20070d9c 	.word	0x20070d9c
   8125c:	00080a55 	.word	0x00080a55

00081260 <stdio_usb_enable>:
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
   81260:	2001      	movs	r0, #1
   81262:	4b01      	ldr	r3, [pc, #4]	; (81268 <stdio_usb_enable+0x8>)
   81264:	7018      	strb	r0, [r3, #0]
	return true;
}
   81266:	4770      	bx	lr
   81268:	20070d9c 	.word	0x20070d9c

0008126c <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
   8126c:	b570      	push	{r4, r5, r6, lr}
	stdio_base = NULL;
   8126e:	2400      	movs	r4, #0
   81270:	4b0a      	ldr	r3, [pc, #40]	; (8129c <stdio_usb_init+0x30>)
   81272:	601c      	str	r4, [r3, #0]
	ptr_put = stdio_usb_putchar;
   81274:	4a0a      	ldr	r2, [pc, #40]	; (812a0 <stdio_usb_init+0x34>)
   81276:	4b0b      	ldr	r3, [pc, #44]	; (812a4 <stdio_usb_init+0x38>)
   81278:	601a      	str	r2, [r3, #0]
	ptr_get = stdio_usb_getchar;
   8127a:	4a0b      	ldr	r2, [pc, #44]	; (812a8 <stdio_usb_init+0x3c>)
   8127c:	4b0b      	ldr	r3, [pc, #44]	; (812ac <stdio_usb_init+0x40>)
   8127e:	601a      	str	r2, [r3, #0]
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
   81280:	4b0b      	ldr	r3, [pc, #44]	; (812b0 <stdio_usb_init+0x44>)
   81282:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81284:	4e0b      	ldr	r6, [pc, #44]	; (812b4 <stdio_usb_init+0x48>)
   81286:	6833      	ldr	r3, [r6, #0]
   81288:	4621      	mov	r1, r4
   8128a:	6898      	ldr	r0, [r3, #8]
   8128c:	4d0a      	ldr	r5, [pc, #40]	; (812b8 <stdio_usb_init+0x4c>)
   8128e:	47a8      	blx	r5
	setbuf(stdin, NULL);
   81290:	6833      	ldr	r3, [r6, #0]
   81292:	4621      	mov	r1, r4
   81294:	6858      	ldr	r0, [r3, #4]
   81296:	47a8      	blx	r5
   81298:	bd70      	pop	{r4, r5, r6, pc}
   8129a:	bf00      	nop
   8129c:	20070fc4 	.word	0x20070fc4
   812a0:	0008121d 	.word	0x0008121d
   812a4:	20070fc0 	.word	0x20070fc0
   812a8:	00081241 	.word	0x00081241
   812ac:	20070fa4 	.word	0x20070fa4
   812b0:	00080d3d 	.word	0x00080d3d
   812b4:	20070278 	.word	0x20070278
   812b8:	00083b75 	.word	0x00083b75

000812bc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   812bc:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
   812be:	4b04      	ldr	r3, [pc, #16]	; (812d0 <spi_enable_clock+0x14>)
   812c0:	4298      	cmp	r0, r3
   812c2:	d000      	beq.n	812c6 <spi_enable_clock+0xa>
   812c4:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   812c6:	2018      	movs	r0, #24
   812c8:	4b02      	ldr	r3, [pc, #8]	; (812d4 <spi_enable_clock+0x18>)
   812ca:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   812cc:	e7fa      	b.n	812c4 <spi_enable_clock+0x8>
   812ce:	bf00      	nop
   812d0:	40008000 	.word	0x40008000
   812d4:	00082f7d 	.word	0x00082f7d

000812d8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   812d8:	6843      	ldr	r3, [r0, #4]
   812da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   812de:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   812e0:	6843      	ldr	r3, [r0, #4]
   812e2:	0409      	lsls	r1, r1, #16
   812e4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   812e8:	4319      	orrs	r1, r3
   812ea:	6041      	str	r1, [r0, #4]
   812ec:	4770      	bx	lr

000812ee <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   812ee:	b932      	cbnz	r2, 812fe <spi_set_clock_polarity+0x10>
   812f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   812f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   812f6:	f023 0301 	bic.w	r3, r3, #1
   812fa:	6303      	str	r3, [r0, #48]	; 0x30
   812fc:	4770      	bx	lr
   812fe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   81302:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81304:	f043 0301 	orr.w	r3, r3, #1
   81308:	6303      	str	r3, [r0, #48]	; 0x30
   8130a:	4770      	bx	lr

0008130c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   8130c:	b932      	cbnz	r2, 8131c <spi_set_clock_phase+0x10>
   8130e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   81312:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81314:	f023 0302 	bic.w	r3, r3, #2
   81318:	6303      	str	r3, [r0, #48]	; 0x30
   8131a:	4770      	bx	lr
   8131c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   81320:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81322:	f043 0302 	orr.w	r3, r3, #2
   81326:	6303      	str	r3, [r0, #48]	; 0x30
   81328:	4770      	bx	lr

0008132a <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   8132a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   8132e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81330:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   81334:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   81336:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81338:	431a      	orrs	r2, r3
   8133a:	630a      	str	r2, [r1, #48]	; 0x30
   8133c:	4770      	bx	lr

0008133e <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
   8133e:	b172      	cbz	r2, 8135e <spi_set_baudrate_div+0x20>
{
   81340:	b410      	push	{r4}
   81342:	4614      	mov	r4, r2
   81344:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   81348:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8134a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   8134e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   81350:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   81352:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   81356:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   81358:	2000      	movs	r0, #0
}
   8135a:	bc10      	pop	{r4}
   8135c:	4770      	bx	lr
        return -1;
   8135e:	f04f 30ff 	mov.w	r0, #4294967295
   81362:	4770      	bx	lr

00081364 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   81364:	b410      	push	{r4}
   81366:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   8136a:	6b08      	ldr	r0, [r1, #48]	; 0x30
   8136c:	b280      	uxth	r0, r0
   8136e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   81370:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   81372:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   81376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8137a:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   8137c:	bc10      	pop	{r4}
   8137e:	4770      	bx	lr

00081380 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   81380:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81382:	0189      	lsls	r1, r1, #6
   81384:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81386:	2402      	movs	r4, #2
   81388:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8138a:	f04f 31ff 	mov.w	r1, #4294967295
   8138e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81390:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81392:	605a      	str	r2, [r3, #4]
}
   81394:	bc10      	pop	{r4}
   81396:	4770      	bx	lr

00081398 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81398:	0189      	lsls	r1, r1, #6
   8139a:	2305      	movs	r3, #5
   8139c:	5043      	str	r3, [r0, r1]
   8139e:	4770      	bx	lr

000813a0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   813a0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   813a4:	61ca      	str	r2, [r1, #28]
   813a6:	4770      	bx	lr

000813a8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   813a8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   813ac:	624a      	str	r2, [r1, #36]	; 0x24
   813ae:	4770      	bx	lr

000813b0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   813b0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   813b4:	6a08      	ldr	r0, [r1, #32]
}
   813b6:	4770      	bx	lr

000813b8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
   813b8:	b4f0      	push	{r4, r5, r6, r7}
   813ba:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   813bc:	2402      	movs	r4, #2
   813be:	9401      	str	r4, [sp, #4]
   813c0:	2408      	movs	r4, #8
   813c2:	9402      	str	r4, [sp, #8]
   813c4:	2420      	movs	r4, #32
   813c6:	9403      	str	r4, [sp, #12]
   813c8:	2480      	movs	r4, #128	; 0x80
   813ca:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   813cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   813ce:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   813d0:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
   813d2:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
   813d6:	d814      	bhi.n	81402 <tc_find_mck_divisor+0x4a>
   813d8:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
   813da:	42a0      	cmp	r0, r4
   813dc:	d217      	bcs.n	8140e <tc_find_mck_divisor+0x56>
   813de:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
   813e0:	af01      	add	r7, sp, #4
   813e2:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
   813e6:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
   813ea:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
   813ec:	4284      	cmp	r4, r0
   813ee:	d30a      	bcc.n	81406 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
   813f0:	4286      	cmp	r6, r0
   813f2:	d90d      	bls.n	81410 <tc_find_mck_divisor+0x58>
			ul_index++) {
   813f4:	3501      	adds	r5, #1
	for (ul_index = 0;
   813f6:	2d05      	cmp	r5, #5
   813f8:	d1f3      	bne.n	813e2 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
   813fa:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
   813fc:	b006      	add	sp, #24
   813fe:	bcf0      	pop	{r4, r5, r6, r7}
   81400:	4770      	bx	lr
			return 0;
   81402:	2000      	movs	r0, #0
   81404:	e7fa      	b.n	813fc <tc_find_mck_divisor+0x44>
   81406:	2000      	movs	r0, #0
   81408:	e7f8      	b.n	813fc <tc_find_mck_divisor+0x44>
	return 1;
   8140a:	2001      	movs	r0, #1
   8140c:	e7f6      	b.n	813fc <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
   8140e:	2500      	movs	r5, #0
	if (p_uldiv) {
   81410:	b12a      	cbz	r2, 8141e <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
   81412:	a906      	add	r1, sp, #24
   81414:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   81418:	f851 1c14 	ldr.w	r1, [r1, #-20]
   8141c:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
   8141e:	2b00      	cmp	r3, #0
   81420:	d0f3      	beq.n	8140a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
   81422:	601d      	str	r5, [r3, #0]
	return 1;
   81424:	2001      	movs	r0, #1
   81426:	e7e9      	b.n	813fc <tc_find_mck_divisor+0x44>

00081428 <udd_ctrl_init>:
	udd_enable_endpoint_interrupt(0);
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
   81428:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8142a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8142e:	fab3 f383 	clz	r3, r3
   81432:	095b      	lsrs	r3, r3, #5
   81434:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   81436:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81438:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8143c:	2200      	movs	r2, #0
   8143e:	4b0c      	ldr	r3, [pc, #48]	; (81470 <udd_ctrl_init+0x48>)
   81440:	701a      	strb	r2, [r3, #0]
	return flags;
   81442:	9b01      	ldr	r3, [sp, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   81444:	2101      	movs	r1, #1
   81446:	4a0b      	ldr	r2, [pc, #44]	; (81474 <udd_ctrl_init+0x4c>)
   81448:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   8144a:	b123      	cbz	r3, 81456 <udd_ctrl_init+0x2e>
		cpu_irq_enable();
   8144c:	4b08      	ldr	r3, [pc, #32]	; (81470 <udd_ctrl_init+0x48>)
   8144e:	7019      	strb	r1, [r3, #0]
   81450:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81454:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   81456:	2202      	movs	r2, #2
   81458:	4b07      	ldr	r3, [pc, #28]	; (81478 <udd_ctrl_init+0x50>)
   8145a:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
   8145c:	4a07      	ldr	r2, [pc, #28]	; (8147c <udd_ctrl_init+0x54>)
   8145e:	2300      	movs	r3, #0
   81460:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   81462:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   81464:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   81466:	4a06      	ldr	r2, [pc, #24]	; (81480 <udd_ctrl_init+0x58>)
   81468:	7013      	strb	r3, [r2, #0]
}
   8146a:	b002      	add	sp, #8
   8146c:	4770      	bx	lr
   8146e:	bf00      	nop
   81470:	20070270 	.word	0x20070270
   81474:	400ac220 	.word	0x400ac220
   81478:	400ac160 	.word	0x400ac160
   8147c:	20070fa8 	.word	0x20070fa8
   81480:	20070da4 	.word	0x20070da4

00081484 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   81484:	2205      	movs	r2, #5
   81486:	4b03      	ldr	r3, [pc, #12]	; (81494 <udd_ctrl_stall_data+0x10>)
   81488:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8148a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8148e:	4b02      	ldr	r3, [pc, #8]	; (81498 <udd_ctrl_stall_data+0x14>)
   81490:	601a      	str	r2, [r3, #0]
   81492:	4770      	bx	lr
   81494:	20070da4 	.word	0x20070da4
   81498:	400ac1f0 	.word	0x400ac1f0

0008149c <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
   8149c:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8149e:	2203      	movs	r2, #3
   814a0:	4b0f      	ldr	r3, [pc, #60]	; (814e0 <udd_ctrl_send_zlp_in+0x44>)
   814a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   814a4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   814a8:	fab3 f383 	clz	r3, r3
   814ac:	095b      	lsrs	r3, r3, #5
   814ae:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   814b0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   814b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   814b6:	2200      	movs	r2, #0
   814b8:	4b0a      	ldr	r3, [pc, #40]	; (814e4 <udd_ctrl_send_zlp_in+0x48>)
   814ba:	701a      	strb	r2, [r3, #0]
	return flags;
   814bc:	9801      	ldr	r0, [sp, #4]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   814be:	490a      	ldr	r1, [pc, #40]	; (814e8 <udd_ctrl_send_zlp_in+0x4c>)
   814c0:	2201      	movs	r2, #1
   814c2:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
   814c4:	4b09      	ldr	r3, [pc, #36]	; (814ec <udd_ctrl_send_zlp_in+0x50>)
   814c6:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   814c8:	2208      	movs	r2, #8
   814ca:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
   814cc:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   814ce:	b128      	cbz	r0, 814dc <udd_ctrl_send_zlp_in+0x40>
		cpu_irq_enable();
   814d0:	2201      	movs	r2, #1
   814d2:	4b04      	ldr	r3, [pc, #16]	; (814e4 <udd_ctrl_send_zlp_in+0x48>)
   814d4:	701a      	strb	r2, [r3, #0]
   814d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   814da:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   814dc:	b002      	add	sp, #8
   814de:	4770      	bx	lr
   814e0:	20070da4 	.word	0x20070da4
   814e4:	20070270 	.word	0x20070270
   814e8:	400ac160 	.word	0x400ac160
   814ec:	400ac1f0 	.word	0x400ac1f0

000814f0 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   814f0:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   814f2:	4b02      	ldr	r3, [pc, #8]	; (814fc <udd_ctrl_endofrequest+0xc>)
   814f4:	691b      	ldr	r3, [r3, #16]
   814f6:	b103      	cbz	r3, 814fa <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   814f8:	4798      	blx	r3
   814fa:	bd08      	pop	{r3, pc}
   814fc:	20070fa8 	.word	0x20070fa8

00081500 <udd_ctrl_in_sent>:
{
   81500:	b530      	push	{r4, r5, lr}
   81502:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81504:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81508:	fab3 f383 	clz	r3, r3
   8150c:	095b      	lsrs	r3, r3, #5
   8150e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   81510:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81512:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81516:	2200      	movs	r2, #0
   81518:	4b4c      	ldr	r3, [pc, #304]	; (8164c <udd_ctrl_in_sent+0x14c>)
   8151a:	701a      	strb	r2, [r3, #0]
	return flags;
   8151c:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
   8151e:	2101      	movs	r1, #1
   81520:	4a4b      	ldr	r2, [pc, #300]	; (81650 <udd_ctrl_in_sent+0x150>)
   81522:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   81524:	b123      	cbz	r3, 81530 <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
   81526:	4b49      	ldr	r3, [pc, #292]	; (8164c <udd_ctrl_in_sent+0x14c>)
   81528:	7019      	strb	r1, [r3, #0]
   8152a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8152e:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   81530:	4b48      	ldr	r3, [pc, #288]	; (81654 <udd_ctrl_in_sent+0x154>)
   81532:	781b      	ldrb	r3, [r3, #0]
   81534:	2b03      	cmp	r3, #3
   81536:	d057      	beq.n	815e8 <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   81538:	4b47      	ldr	r3, [pc, #284]	; (81658 <udd_ctrl_in_sent+0x158>)
   8153a:	881b      	ldrh	r3, [r3, #0]
   8153c:	4a47      	ldr	r2, [pc, #284]	; (8165c <udd_ctrl_in_sent+0x15c>)
   8153e:	8994      	ldrh	r4, [r2, #12]
   81540:	1ae4      	subs	r4, r4, r3
   81542:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   81544:	b9c4      	cbnz	r4, 81578 <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81546:	4a46      	ldr	r2, [pc, #280]	; (81660 <udd_ctrl_in_sent+0x160>)
   81548:	8811      	ldrh	r1, [r2, #0]
   8154a:	440b      	add	r3, r1
   8154c:	b29b      	uxth	r3, r3
   8154e:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   81550:	4a42      	ldr	r2, [pc, #264]	; (8165c <udd_ctrl_in_sent+0x15c>)
   81552:	88d2      	ldrh	r2, [r2, #6]
   81554:	429a      	cmp	r2, r3
   81556:	d04c      	beq.n	815f2 <udd_ctrl_in_sent+0xf2>
					|| b_shortpacket) {
   81558:	4b42      	ldr	r3, [pc, #264]	; (81664 <udd_ctrl_in_sent+0x164>)
   8155a:	781b      	ldrb	r3, [r3, #0]
   8155c:	2b00      	cmp	r3, #0
   8155e:	d148      	bne.n	815f2 <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   81560:	4b3e      	ldr	r3, [pc, #248]	; (8165c <udd_ctrl_in_sent+0x15c>)
   81562:	695b      	ldr	r3, [r3, #20]
   81564:	2b00      	cmp	r3, #0
   81566:	d061      	beq.n	8162c <udd_ctrl_in_sent+0x12c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   81568:	4798      	blx	r3
   8156a:	2800      	cmp	r0, #0
   8156c:	d05e      	beq.n	8162c <udd_ctrl_in_sent+0x12c>
			udd_ctrl_payload_buf_cnt = 0;
   8156e:	2200      	movs	r2, #0
   81570:	4b39      	ldr	r3, [pc, #228]	; (81658 <udd_ctrl_in_sent+0x158>)
   81572:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   81574:	4b39      	ldr	r3, [pc, #228]	; (8165c <udd_ctrl_in_sent+0x15c>)
   81576:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   81578:	2c3f      	cmp	r4, #63	; 0x3f
   8157a:	d957      	bls.n	8162c <udd_ctrl_in_sent+0x12c>
		b_shortpacket = false;
   8157c:	2200      	movs	r2, #0
   8157e:	4b39      	ldr	r3, [pc, #228]	; (81664 <udd_ctrl_in_sent+0x164>)
   81580:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   81582:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81584:	4b35      	ldr	r3, [pc, #212]	; (8165c <udd_ctrl_in_sent+0x15c>)
   81586:	689a      	ldr	r2, [r3, #8]
   81588:	4b33      	ldr	r3, [pc, #204]	; (81658 <udd_ctrl_in_sent+0x158>)
   8158a:	881d      	ldrh	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8158c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81590:	fab3 f383 	clz	r3, r3
   81594:	095b      	lsrs	r3, r3, #5
   81596:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   81598:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8159a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8159e:	2100      	movs	r1, #0
   815a0:	4b2a      	ldr	r3, [pc, #168]	; (8164c <udd_ctrl_in_sent+0x14c>)
   815a2:	7019      	strb	r1, [r3, #0]
	return flags;
   815a4:	9802      	ldr	r0, [sp, #8]
	if (Is_udd_out_received(0)) {
   815a6:	4b30      	ldr	r3, [pc, #192]	; (81668 <udd_ctrl_in_sent+0x168>)
   815a8:	681b      	ldr	r3, [r3, #0]
   815aa:	f013 0f02 	tst.w	r3, #2
   815ae:	d141      	bne.n	81634 <udd_ctrl_in_sent+0x134>
	for (i = 0; i < nb_remain; i++) {
   815b0:	b144      	cbz	r4, 815c4 <udd_ctrl_in_sent+0xc4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   815b2:	442a      	add	r2, r5
   815b4:	4b2d      	ldr	r3, [pc, #180]	; (8166c <udd_ctrl_in_sent+0x16c>)
		*ptr_dest++ = *ptr_src++;
   815b6:	f812 1b01 	ldrb.w	r1, [r2], #1
   815ba:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < nb_remain; i++) {
   815be:	b2d9      	uxtb	r1, r3
   815c0:	42a1      	cmp	r1, r4
   815c2:	d3f8      	bcc.n	815b6 <udd_ctrl_in_sent+0xb6>
	udd_ctrl_payload_buf_cnt += nb_remain;
   815c4:	4b24      	ldr	r3, [pc, #144]	; (81658 <udd_ctrl_in_sent+0x158>)
   815c6:	881a      	ldrh	r2, [r3, #0]
   815c8:	4414      	add	r4, r2
   815ca:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   815cc:	2301      	movs	r3, #1
   815ce:	4a28      	ldr	r2, [pc, #160]	; (81670 <udd_ctrl_in_sent+0x170>)
   815d0:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
   815d2:	3290      	adds	r2, #144	; 0x90
   815d4:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   815d6:	2800      	cmp	r0, #0
   815d8:	d036      	beq.n	81648 <udd_ctrl_in_sent+0x148>
		cpu_irq_enable();
   815da:	461a      	mov	r2, r3
   815dc:	4b1b      	ldr	r3, [pc, #108]	; (8164c <udd_ctrl_in_sent+0x14c>)
   815de:	701a      	strb	r2, [r3, #0]
   815e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   815e4:	b662      	cpsie	i
   815e6:	e02f      	b.n	81648 <udd_ctrl_in_sent+0x148>
		udd_ctrl_endofrequest();
   815e8:	4b22      	ldr	r3, [pc, #136]	; (81674 <udd_ctrl_in_sent+0x174>)
   815ea:	4798      	blx	r3
		udd_ctrl_init();
   815ec:	4b22      	ldr	r3, [pc, #136]	; (81678 <udd_ctrl_in_sent+0x178>)
   815ee:	4798      	blx	r3
		return;
   815f0:	e02a      	b.n	81648 <udd_ctrl_in_sent+0x148>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   815f2:	2204      	movs	r2, #4
   815f4:	4b17      	ldr	r3, [pc, #92]	; (81654 <udd_ctrl_in_sent+0x154>)
   815f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   815f8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   815fc:	fab3 f383 	clz	r3, r3
   81600:	095b      	lsrs	r3, r3, #5
   81602:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   81604:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81606:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8160a:	2200      	movs	r2, #0
   8160c:	4b0f      	ldr	r3, [pc, #60]	; (8164c <udd_ctrl_in_sent+0x14c>)
   8160e:	701a      	strb	r2, [r3, #0]
	return flags;
   81610:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
   81612:	2310      	movs	r3, #16
   81614:	4916      	ldr	r1, [pc, #88]	; (81670 <udd_ctrl_in_sent+0x170>)
   81616:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   81618:	3190      	adds	r1, #144	; 0x90
   8161a:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
   8161c:	b1a2      	cbz	r2, 81648 <udd_ctrl_in_sent+0x148>
		cpu_irq_enable();
   8161e:	2201      	movs	r2, #1
   81620:	4b0a      	ldr	r3, [pc, #40]	; (8164c <udd_ctrl_in_sent+0x14c>)
   81622:	701a      	strb	r2, [r3, #0]
   81624:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81628:	b662      	cpsie	i
   8162a:	e00d      	b.n	81648 <udd_ctrl_in_sent+0x148>
		b_shortpacket = true;
   8162c:	2201      	movs	r2, #1
   8162e:	4b0d      	ldr	r3, [pc, #52]	; (81664 <udd_ctrl_in_sent+0x164>)
   81630:	701a      	strb	r2, [r3, #0]
   81632:	e7a7      	b.n	81584 <udd_ctrl_in_sent+0x84>
	if (cpu_irq_is_enabled_flags(flags))
   81634:	b128      	cbz	r0, 81642 <udd_ctrl_in_sent+0x142>
		cpu_irq_enable();
   81636:	2201      	movs	r2, #1
   81638:	4b04      	ldr	r3, [pc, #16]	; (8164c <udd_ctrl_in_sent+0x14c>)
   8163a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8163c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81640:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   81642:	2204      	movs	r2, #4
   81644:	4b03      	ldr	r3, [pc, #12]	; (81654 <udd_ctrl_in_sent+0x154>)
   81646:	701a      	strb	r2, [r3, #0]
}
   81648:	b005      	add	sp, #20
   8164a:	bd30      	pop	{r4, r5, pc}
   8164c:	20070270 	.word	0x20070270
   81650:	400ac220 	.word	0x400ac220
   81654:	20070da4 	.word	0x20070da4
   81658:	20070da0 	.word	0x20070da0
   8165c:	20070fa8 	.word	0x20070fa8
   81660:	20070da2 	.word	0x20070da2
   81664:	20070d9d 	.word	0x20070d9d
   81668:	400ac130 	.word	0x400ac130
   8166c:	20180000 	.word	0x20180000
   81670:	400ac160 	.word	0x400ac160
   81674:	000814f1 	.word	0x000814f1
   81678:	00081429 	.word	0x00081429

0008167c <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
   8167c:	7d03      	ldrb	r3, [r0, #20]
   8167e:	f013 0f01 	tst.w	r3, #1
   81682:	d013      	beq.n	816ac <udd_ep_finish_job+0x30>
{
   81684:	b510      	push	{r4, lr}
   81686:	460c      	mov	r4, r1
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   81688:	7d03      	ldrb	r3, [r0, #20]
   8168a:	f36f 0300 	bfc	r3, #0, #1
   8168e:	7503      	strb	r3, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   81690:	6803      	ldr	r3, [r0, #0]
   81692:	b153      	cbz	r3, 816aa <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   81694:	4906      	ldr	r1, [pc, #24]	; (816b0 <udd_ep_finish_job+0x34>)
   81696:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   8169a:	f411 7f80 	tst.w	r1, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   8169e:	bf18      	it	ne
   816a0:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   816a4:	6881      	ldr	r1, [r0, #8]
   816a6:	4620      	mov	r0, r4
   816a8:	4798      	blx	r3
   816aa:	bd10      	pop	{r4, pc}
   816ac:	4770      	bx	lr
   816ae:	bf00      	nop
   816b0:	400ac100 	.word	0x400ac100

000816b4 <udd_ep_trans_done>:
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   816b4:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   816b6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   816ba:	4a5f      	ldr	r2, [pc, #380]	; (81838 <udd_ep_trans_done+0x184>)
   816bc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   816c0:	7d12      	ldrb	r2, [r2, #20]
   816c2:	f012 0f01 	tst.w	r2, #1
   816c6:	f000 80b5 	beq.w	81834 <udd_ep_trans_done+0x180>
{
   816ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   816cc:	b083      	sub	sp, #12
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   816ce:	460a      	mov	r2, r1
   816d0:	4959      	ldr	r1, [pc, #356]	; (81838 <udd_ep_trans_done+0x184>)
   816d2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   816d6:	68d1      	ldr	r1, [r2, #12]
   816d8:	6892      	ldr	r2, [r2, #8]
   816da:	4291      	cmp	r1, r2
   816dc:	d077      	beq.n	817ce <udd_ep_trans_done+0x11a>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   816de:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   816e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   816e4:	bf92      	itee	ls
   816e6:	0417      	lslls	r7, r2, #16
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   816e8:	f44f 3280 	movhi.w	r2, #65536	; 0x10000
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   816ec:	2700      	movhi	r7, #0
		}
		if (Is_udd_endpoint_in(ep)) {
   816ee:	4c53      	ldr	r4, [pc, #332]	; (8183c <udd_ep_trans_done+0x188>)
   816f0:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   816f4:	f415 7f80 	tst.w	r5, #256	; 0x100
   816f8:	d014      	beq.n	81724 <udd_ep_trans_done+0x70>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   816fa:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   816fe:	f3c5 1502 	ubfx	r5, r5, #4, #3
   81702:	2408      	movs	r4, #8
   81704:	40ac      	lsls	r4, r5
   81706:	3c01      	subs	r4, #1
   81708:	4214      	tst	r4, r2
   8170a:	d013      	beq.n	81734 <udd_ep_trans_done+0x80>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   8170c:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   81710:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   81714:	4d48      	ldr	r5, [pc, #288]	; (81838 <udd_ep_trans_done+0x184>)
   81716:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   8171a:	7d25      	ldrb	r5, [r4, #20]
   8171c:	f36f 0541 	bfc	r5, #1, #1
   81720:	7525      	strb	r5, [r4, #20]
   81722:	e007      	b.n	81734 <udd_ep_trans_done+0x80>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   81724:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   81728:	f3c5 25c1 	ubfx	r5, r5, #11, #2
   8172c:	2d01      	cmp	r5, #1
   8172e:	d037      	beq.n	817a0 <udd_ep_trans_done+0xec>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   81730:	f047 0714 	orr.w	r7, r7, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   81734:	4c42      	ldr	r4, [pc, #264]	; (81840 <udd_ep_trans_done+0x18c>)
   81736:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   8173a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   8173e:	4e3e      	ldr	r6, [pc, #248]	; (81838 <udd_ep_trans_done+0x184>)
   81740:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   81744:	686d      	ldr	r5, [r5, #4]
   81746:	4429      	add	r1, r5
   81748:	6061      	str	r1, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8174a:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8174e:	fab1 f181 	clz	r1, r1
   81752:	0949      	lsrs	r1, r1, #5
   81754:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   81756:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81758:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8175c:	2500      	movs	r5, #0
   8175e:	4939      	ldr	r1, [pc, #228]	; (81844 <udd_ep_trans_done+0x190>)
   81760:	700d      	strb	r5, [r1, #0]
	return flags;
   81762:	9d01      	ldr	r5, [sp, #4]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   81764:	68e1      	ldr	r1, [r4, #12]
   81766:	f011 0f10 	tst.w	r1, #16
   8176a:	d122      	bne.n	817b2 <udd_ep_trans_done+0xfe>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   8176c:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   81770:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
   81772:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   81776:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
   8177a:	68c8      	ldr	r0, [r1, #12]
   8177c:	4410      	add	r0, r2
   8177e:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
   81780:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   81782:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   81786:	fa00 f303 	lsl.w	r3, r0, r3
   8178a:	4a2f      	ldr	r2, [pc, #188]	; (81848 <udd_ep_trans_done+0x194>)
   8178c:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
   8178e:	2d00      	cmp	r5, #0
   81790:	d04e      	beq.n	81830 <udd_ep_trans_done+0x17c>
		cpu_irq_enable();
   81792:	2201      	movs	r2, #1
   81794:	4b2b      	ldr	r3, [pc, #172]	; (81844 <udd_ep_trans_done+0x190>)
   81796:	701a      	strb	r2, [r3, #0]
   81798:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8179c:	b662      	cpsie	i
   8179e:	e047      	b.n	81830 <udd_ep_trans_done+0x17c>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   817a0:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   817a4:	f3c5 1502 	ubfx	r5, r5, #4, #3
   817a8:	2408      	movs	r4, #8
   817aa:	40ac      	lsls	r4, r5
   817ac:	42a2      	cmp	r2, r4
   817ae:	d8c1      	bhi.n	81734 <udd_ep_trans_done+0x80>
   817b0:	e7be      	b.n	81730 <udd_ep_trans_done+0x7c>
	if (cpu_irq_is_enabled_flags(flags))
   817b2:	b12d      	cbz	r5, 817c0 <udd_ep_trans_done+0x10c>
		cpu_irq_enable();
   817b4:	2101      	movs	r1, #1
   817b6:	4a23      	ldr	r2, [pc, #140]	; (81844 <udd_ep_trans_done+0x190>)
   817b8:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   817ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   817be:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   817c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   817c4:	491c      	ldr	r1, [pc, #112]	; (81838 <udd_ep_trans_done+0x184>)
   817c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   817ca:	68d1      	ldr	r1, [r2, #12]
   817cc:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   817ce:	4a1b      	ldr	r2, [pc, #108]	; (8183c <udd_ep_trans_done+0x188>)
   817d0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   817d4:	f412 7f80 	tst.w	r2, #256	; 0x100
   817d8:	d021      	beq.n	8181e <udd_ep_trans_done+0x16a>
		if (ptr_job->b_shortpacket) {
   817da:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   817de:	4916      	ldr	r1, [pc, #88]	; (81838 <udd_ep_trans_done+0x184>)
   817e0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   817e4:	7d12      	ldrb	r2, [r2, #20]
   817e6:	f012 0f02 	tst.w	r2, #2
   817ea:	d018      	beq.n	8181e <udd_ep_trans_done+0x16a>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   817ec:	2201      	movs	r2, #1
   817ee:	4b17      	ldr	r3, [pc, #92]	; (8184c <udd_ep_trans_done+0x198>)
   817f0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   817f4:	3b30      	subs	r3, #48	; 0x30
   817f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   817fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   817fe:	bf1c      	itt	ne
   81800:	4b13      	ldrne	r3, [pc, #76]	; (81850 <udd_ep_trans_done+0x19c>)
   81802:	f843 2020 	strne.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   81806:	2201      	movs	r2, #1
   81808:	4b12      	ldr	r3, [pc, #72]	; (81854 <udd_ep_trans_done+0x1a0>)
   8180a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   8180e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81812:	fa02 f000 	lsl.w	r0, r2, r0
   81816:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
   8181a:	6198      	str	r0, [r3, #24]
			return;
   8181c:	e008      	b.n	81830 <udd_ep_trans_done+0x17c>
   8181e:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
   81820:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   81824:	2100      	movs	r1, #0
   81826:	4804      	ldr	r0, [pc, #16]	; (81838 <udd_ep_trans_done+0x184>)
   81828:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   8182c:	4b0a      	ldr	r3, [pc, #40]	; (81858 <udd_ep_trans_done+0x1a4>)
   8182e:	4798      	blx	r3
}
   81830:	b003      	add	sp, #12
   81832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81834:	4770      	bx	lr
   81836:	bf00      	nop
   81838:	20070da8 	.word	0x20070da8
   8183c:	400ac100 	.word	0x400ac100
   81840:	400ac300 	.word	0x400ac300
   81844:	20070270 	.word	0x20070270
   81848:	400ac000 	.word	0x400ac000
   8184c:	400ac160 	.word	0x400ac160
   81850:	400ac190 	.word	0x400ac190
   81854:	400ac1f0 	.word	0x400ac1f0
   81858:	0008167d 	.word	0x0008167d

0008185c <udd_sleep_mode>:
{
   8185c:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
   8185e:	4601      	mov	r1, r0
   81860:	bb28      	cbnz	r0, 818ae <udd_sleep_mode+0x52>
   81862:	4b24      	ldr	r3, [pc, #144]	; (818f4 <udd_sleep_mode+0x98>)
   81864:	781b      	ldrb	r3, [r3, #0]
   81866:	b91b      	cbnz	r3, 81870 <udd_sleep_mode+0x14>
	udd_b_idle = b_idle;
   81868:	4b22      	ldr	r3, [pc, #136]	; (818f4 <udd_sleep_mode+0x98>)
   8186a:	7019      	strb	r1, [r3, #0]
}
   8186c:	b002      	add	sp, #8
   8186e:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   81870:	4b21      	ldr	r3, [pc, #132]	; (818f8 <udd_sleep_mode+0x9c>)
   81872:	789b      	ldrb	r3, [r3, #2]
   81874:	b903      	cbnz	r3, 81878 <udd_sleep_mode+0x1c>
   81876:	e7fe      	b.n	81876 <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81878:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8187c:	fab3 f383 	clz	r3, r3
   81880:	095b      	lsrs	r3, r3, #5
   81882:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   81884:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81886:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8188a:	2200      	movs	r2, #0
   8188c:	4b1b      	ldr	r3, [pc, #108]	; (818fc <udd_sleep_mode+0xa0>)
   8188e:	701a      	strb	r2, [r3, #0]
	return flags;
   81890:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   81892:	4a19      	ldr	r2, [pc, #100]	; (818f8 <udd_sleep_mode+0x9c>)
   81894:	7893      	ldrb	r3, [r2, #2]
   81896:	3b01      	subs	r3, #1
   81898:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8189a:	2800      	cmp	r0, #0
   8189c:	d0e4      	beq.n	81868 <udd_sleep_mode+0xc>
		cpu_irq_enable();
   8189e:	2201      	movs	r2, #1
   818a0:	4b16      	ldr	r3, [pc, #88]	; (818fc <udd_sleep_mode+0xa0>)
   818a2:	701a      	strb	r2, [r3, #0]
   818a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   818a8:	b662      	cpsie	i
   818aa:	e7dd      	b.n	81868 <udd_sleep_mode+0xc>
   818ac:	e7fe      	b.n	818ac <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
   818ae:	4b11      	ldr	r3, [pc, #68]	; (818f4 <udd_sleep_mode+0x98>)
   818b0:	781b      	ldrb	r3, [r3, #0]
   818b2:	2b00      	cmp	r3, #0
   818b4:	d1d8      	bne.n	81868 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
   818b6:	4b10      	ldr	r3, [pc, #64]	; (818f8 <udd_sleep_mode+0x9c>)
   818b8:	789b      	ldrb	r3, [r3, #2]
   818ba:	2bff      	cmp	r3, #255	; 0xff
   818bc:	d0f6      	beq.n	818ac <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   818be:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   818c2:	fab3 f383 	clz	r3, r3
   818c6:	095b      	lsrs	r3, r3, #5
   818c8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   818ca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   818cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   818d0:	2200      	movs	r2, #0
   818d2:	4b0a      	ldr	r3, [pc, #40]	; (818fc <udd_sleep_mode+0xa0>)
   818d4:	701a      	strb	r2, [r3, #0]
	return flags;
   818d6:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
   818d8:	4a07      	ldr	r2, [pc, #28]	; (818f8 <udd_sleep_mode+0x9c>)
   818da:	7893      	ldrb	r3, [r2, #2]
   818dc:	3301      	adds	r3, #1
   818de:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
   818e0:	2800      	cmp	r0, #0
   818e2:	d0c1      	beq.n	81868 <udd_sleep_mode+0xc>
		cpu_irq_enable();
   818e4:	2201      	movs	r2, #1
   818e6:	4b05      	ldr	r3, [pc, #20]	; (818fc <udd_sleep_mode+0xa0>)
   818e8:	701a      	strb	r2, [r3, #0]
   818ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   818ee:	b662      	cpsie	i
   818f0:	e7ba      	b.n	81868 <udd_sleep_mode+0xc>
   818f2:	bf00      	nop
   818f4:	20070d9e 	.word	0x20070d9e
   818f8:	20070f9c 	.word	0x20070f9c
   818fc:	20070270 	.word	0x20070270

00081900 <udd_enable>:
{
   81900:	b510      	push	{r4, lr}
   81902:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81904:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81908:	fab3 f383 	clz	r3, r3
   8190c:	095b      	lsrs	r3, r3, #5
   8190e:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   81910:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81912:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81916:	2200      	movs	r2, #0
   81918:	4b54      	ldr	r3, [pc, #336]	; (81a6c <udd_enable+0x16c>)
   8191a:	701a      	strb	r2, [r3, #0]
	return flags;
   8191c:	9c00      	ldr	r4, [sp, #0]
	pmc_enable_periph_clk(ID_UOTGHS);
   8191e:	2028      	movs	r0, #40	; 0x28
   81920:	4b53      	ldr	r3, [pc, #332]	; (81a70 <udd_enable+0x170>)
   81922:	4798      	blx	r3
	sysclk_enable_usb();
   81924:	4b53      	ldr	r3, [pc, #332]	; (81a74 <udd_enable+0x174>)
   81926:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81928:	4b53      	ldr	r3, [pc, #332]	; (81a78 <udd_enable+0x178>)
   8192a:	2250      	movs	r2, #80	; 0x50
   8192c:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81930:	f44f 7280 	mov.w	r2, #256	; 0x100
   81934:	605a      	str	r2, [r3, #4]
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   81936:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8193a:	4b50      	ldr	r3, [pc, #320]	; (81a7c <udd_enable+0x17c>)
   8193c:	4798      	blx	r3
	otg_disable_id_pin();
   8193e:	4b50      	ldr	r3, [pc, #320]	; (81a80 <udd_enable+0x180>)
   81940:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81944:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   81948:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_force_device_mode();
   8194c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81950:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   81954:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   81958:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8195c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   81960:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable_pad();
   81964:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81968:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   8196c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
   81970:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   81978:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_low_speed_disable();
   8197c:	681a      	ldr	r2, [r3, #0]
   8197e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   81982:	601a      	str	r2, [r3, #0]
	udd_high_speed_disable();
   81984:	681a      	ldr	r2, [r3, #0]
   81986:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
   8198a:	601a      	str	r2, [r3, #0]
	otg_unfreeze_clock();
   8198c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81990:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81994:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   81998:	461a      	mov	r2, r3
   8199a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   8199e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   819a2:	d0fa      	beq.n	8199a <udd_enable+0x9a>
		udd_ep_job[i].busy = false;
   819a4:	4b37      	ldr	r3, [pc, #220]	; (81a84 <udd_enable+0x184>)
   819a6:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   819a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   819ac:	f36f 0282 	bfc	r2, #2, #1
   819b0:	751a      	strb	r2, [r3, #20]
		udd_ep_job[i].busy = false;
   819b2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   819b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   819ba:	f36f 0282 	bfc	r2, #2, #1
   819be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		udd_ep_job[i].busy = false;
   819c2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   819c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   819ca:	f36f 0282 	bfc	r2, #2, #1
   819ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	otg_ack_vbus_transition();
   819d2:	4b2b      	ldr	r3, [pc, #172]	; (81a80 <udd_enable+0x180>)
   819d4:	2202      	movs	r2, #2
   819d6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	if (Is_otg_vbus_high()) {
   819da:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   819de:	f413 6f00 	tst.w	r3, #2048	; 0x800
		otg_raise_vbus_transition();
   819e2:	bf1c      	itt	ne
   819e4:	4b26      	ldrne	r3, [pc, #152]	; (81a80 <udd_enable+0x180>)
   819e6:	f8c3 280c 	strne.w	r2, [r3, #2060]	; 0x80c
	otg_enable_vbus_interrupt();
   819ea:	4b25      	ldr	r3, [pc, #148]	; (81a80 <udd_enable+0x180>)
   819ec:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   819f0:	f042 0202 	orr.w	r2, r2, #2
   819f4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_freeze_clock();
   819f8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   819fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81a00:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (!udd_b_sleep_initialized) {
   81a04:	4b20      	ldr	r3, [pc, #128]	; (81a88 <udd_enable+0x188>)
   81a06:	781b      	ldrb	r3, [r3, #0]
   81a08:	bb1b      	cbnz	r3, 81a52 <udd_enable+0x152>
		udd_b_sleep_initialized = true;
   81a0a:	2201      	movs	r2, #1
   81a0c:	4b1e      	ldr	r3, [pc, #120]	; (81a88 <udd_enable+0x188>)
   81a0e:	701a      	strb	r2, [r3, #0]
		udd_b_idle = false;
   81a10:	2200      	movs	r2, #0
   81a12:	4b1e      	ldr	r3, [pc, #120]	; (81a8c <udd_enable+0x18c>)
   81a14:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
   81a16:	4b1e      	ldr	r3, [pc, #120]	; (81a90 <udd_enable+0x190>)
   81a18:	78db      	ldrb	r3, [r3, #3]
   81a1a:	2bff      	cmp	r3, #255	; 0xff
   81a1c:	d018      	beq.n	81a50 <udd_enable+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81a1e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81a22:	fab3 f383 	clz	r3, r3
   81a26:	095b      	lsrs	r3, r3, #5
   81a28:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   81a2a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81a2c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81a30:	2200      	movs	r2, #0
   81a32:	4b0e      	ldr	r3, [pc, #56]	; (81a6c <udd_enable+0x16c>)
   81a34:	701a      	strb	r2, [r3, #0]
	return flags;
   81a36:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
   81a38:	4a15      	ldr	r2, [pc, #84]	; (81a90 <udd_enable+0x190>)
   81a3a:	78d3      	ldrb	r3, [r2, #3]
   81a3c:	3301      	adds	r3, #1
   81a3e:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   81a40:	b151      	cbz	r1, 81a58 <udd_enable+0x158>
		cpu_irq_enable();
   81a42:	2201      	movs	r2, #1
   81a44:	4b09      	ldr	r3, [pc, #36]	; (81a6c <udd_enable+0x16c>)
   81a46:	701a      	strb	r2, [r3, #0]
   81a48:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81a4c:	b662      	cpsie	i
   81a4e:	e003      	b.n	81a58 <udd_enable+0x158>
   81a50:	e7fe      	b.n	81a50 <udd_enable+0x150>
		udd_sleep_mode(false); // Enter idle mode
   81a52:	2000      	movs	r0, #0
   81a54:	4b0f      	ldr	r3, [pc, #60]	; (81a94 <udd_enable+0x194>)
   81a56:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   81a58:	b12c      	cbz	r4, 81a66 <udd_enable+0x166>
		cpu_irq_enable();
   81a5a:	2201      	movs	r2, #1
   81a5c:	4b03      	ldr	r3, [pc, #12]	; (81a6c <udd_enable+0x16c>)
   81a5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   81a60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81a64:	b662      	cpsie	i
}
   81a66:	b002      	add	sp, #8
   81a68:	bd10      	pop	{r4, pc}
   81a6a:	bf00      	nop
   81a6c:	20070270 	.word	0x20070270
   81a70:	00082f7d 	.word	0x00082f7d
   81a74:	00082acd 	.word	0x00082acd
   81a78:	e000e100 	.word	0xe000e100
   81a7c:	00082fbd 	.word	0x00082fbd
   81a80:	400ac000 	.word	0x400ac000
   81a84:	20070da8 	.word	0x20070da8
   81a88:	20070d9f 	.word	0x20070d9f
   81a8c:	20070d9e 	.word	0x20070d9e
   81a90:	20070f9c 	.word	0x20070f9c
   81a94:	0008185d 	.word	0x0008185d

00081a98 <udd_attach>:
{
   81a98:	b530      	push	{r4, r5, lr}
   81a9a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81a9c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81aa0:	fab3 f383 	clz	r3, r3
   81aa4:	095b      	lsrs	r3, r3, #5
   81aa6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   81aa8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81aaa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81aae:	2200      	movs	r2, #0
   81ab0:	4b19      	ldr	r3, [pc, #100]	; (81b18 <udd_attach+0x80>)
   81ab2:	701a      	strb	r2, [r3, #0]
	return flags;
   81ab4:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
   81ab6:	2001      	movs	r0, #1
   81ab8:	4b18      	ldr	r3, [pc, #96]	; (81b1c <udd_attach+0x84>)
   81aba:	4798      	blx	r3
	otg_unfreeze_clock();
   81abc:	4a18      	ldr	r2, [pc, #96]	; (81b20 <udd_attach+0x88>)
   81abe:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   81ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   81ac6:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   81aca:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   81ace:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   81ad2:	d0fa      	beq.n	81aca <udd_attach+0x32>
	udd_attach_device();
   81ad4:	4b12      	ldr	r3, [pc, #72]	; (81b20 <udd_attach+0x88>)
   81ad6:	681a      	ldr	r2, [r3, #0]
   81ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   81adc:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   81ade:	2508      	movs	r5, #8
   81ae0:	619d      	str	r5, [r3, #24]
	udd_enable_suspend_interrupt();
   81ae2:	2101      	movs	r1, #1
   81ae4:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   81ae6:	2210      	movs	r2, #16
   81ae8:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   81aea:	2004      	movs	r0, #4
   81aec:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
   81aee:	609d      	str	r5, [r3, #8]
	udd_ack_sof();
   81af0:	6098      	str	r0, [r3, #8]
	udd_ack_msof();
   81af2:	2002      	movs	r0, #2
   81af4:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
   81af6:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
   81af8:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   81afa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81b02:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
   81b06:	b124      	cbz	r4, 81b12 <udd_attach+0x7a>
		cpu_irq_enable();
   81b08:	4b03      	ldr	r3, [pc, #12]	; (81b18 <udd_attach+0x80>)
   81b0a:	7019      	strb	r1, [r3, #0]
   81b0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81b10:	b662      	cpsie	i
}
   81b12:	b003      	add	sp, #12
   81b14:	bd30      	pop	{r4, r5, pc}
   81b16:	bf00      	nop
   81b18:	20070270 	.word	0x20070270
   81b1c:	0008185d 	.word	0x0008185d
   81b20:	400ac000 	.word	0x400ac000

00081b24 <udd_detach>:
{
   81b24:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   81b26:	4b0a      	ldr	r3, [pc, #40]	; (81b50 <udd_detach+0x2c>)
   81b28:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81b2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81b30:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_detach_device();
   81b34:	681a      	ldr	r2, [r3, #0]
   81b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   81b3a:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   81b3c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81b40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81b44:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   81b48:	2000      	movs	r0, #0
   81b4a:	4b02      	ldr	r3, [pc, #8]	; (81b54 <udd_detach+0x30>)
   81b4c:	4798      	blx	r3
   81b4e:	bd08      	pop	{r3, pc}
   81b50:	400ac000 	.word	0x400ac000
   81b54:	0008185d 	.word	0x0008185d

00081b58 <UOTGHS_Handler>:
{
   81b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81b5c:	b085      	sub	sp, #20
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   81b5e:	4b9a      	ldr	r3, [pc, #616]	; (81dc8 <UOTGHS_Handler+0x270>)
   81b60:	4798      	blx	r3
   81b62:	b920      	cbnz	r0, 81b6e <UOTGHS_Handler+0x16>
   81b64:	4b99      	ldr	r3, [pc, #612]	; (81dcc <UOTGHS_Handler+0x274>)
   81b66:	685b      	ldr	r3, [r3, #4]
   81b68:	f013 0f01 	tst.w	r3, #1
   81b6c:	d00f      	beq.n	81b8e <UOTGHS_Handler+0x36>
	if (Is_udd_sof()) {
   81b6e:	4b97      	ldr	r3, [pc, #604]	; (81dcc <UOTGHS_Handler+0x274>)
   81b70:	685b      	ldr	r3, [r3, #4]
   81b72:	f013 0f04 	tst.w	r3, #4
   81b76:	d014      	beq.n	81ba2 <UOTGHS_Handler+0x4a>
		udd_ack_sof();
   81b78:	4b94      	ldr	r3, [pc, #592]	; (81dcc <UOTGHS_Handler+0x274>)
   81b7a:	2204      	movs	r2, #4
   81b7c:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
   81b7e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81b82:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   81b86:	d009      	beq.n	81b9c <UOTGHS_Handler+0x44>
}
   81b88:	b005      	add	sp, #20
   81b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("cpsid i" : : : "memory");
   81b8e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81b90:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   81b94:	2200      	movs	r2, #0
   81b96:	4b8e      	ldr	r3, [pc, #568]	; (81dd0 <UOTGHS_Handler+0x278>)
   81b98:	701a      	strb	r2, [r3, #0]
		return;
   81b9a:	e7f5      	b.n	81b88 <UOTGHS_Handler+0x30>
			udc_sof_notify();
   81b9c:	4b8d      	ldr	r3, [pc, #564]	; (81dd4 <UOTGHS_Handler+0x27c>)
   81b9e:	4798      	blx	r3
   81ba0:	e7f2      	b.n	81b88 <UOTGHS_Handler+0x30>
	if (Is_udd_msof()) {
   81ba2:	4b8a      	ldr	r3, [pc, #552]	; (81dcc <UOTGHS_Handler+0x274>)
   81ba4:	685b      	ldr	r3, [r3, #4]
   81ba6:	f013 0f02 	tst.w	r3, #2
   81baa:	d133      	bne.n	81c14 <UOTGHS_Handler+0xbc>
	if (!Is_udd_endpoint_interrupt(0)) {
   81bac:	4b87      	ldr	r3, [pc, #540]	; (81dcc <UOTGHS_Handler+0x274>)
   81bae:	685b      	ldr	r3, [r3, #4]
   81bb0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   81bb4:	d026      	beq.n	81c04 <UOTGHS_Handler+0xac>
	udd_disable_nak_in_interrupt(0);
   81bb6:	4b88      	ldr	r3, [pc, #544]	; (81dd8 <UOTGHS_Handler+0x280>)
   81bb8:	2210      	movs	r2, #16
   81bba:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
   81bbc:	2208      	movs	r2, #8
   81bbe:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
   81bc0:	3bf0      	subs	r3, #240	; 0xf0
   81bc2:	681b      	ldr	r3, [r3, #0]
   81bc4:	f013 0f04 	tst.w	r3, #4
   81bc8:	d12a      	bne.n	81c20 <UOTGHS_Handler+0xc8>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   81bca:	4b84      	ldr	r3, [pc, #528]	; (81ddc <UOTGHS_Handler+0x284>)
   81bcc:	681b      	ldr	r3, [r3, #0]
   81bce:	f013 0f01 	tst.w	r3, #1
   81bd2:	d005      	beq.n	81be0 <UOTGHS_Handler+0x88>
   81bd4:	4b82      	ldr	r3, [pc, #520]	; (81de0 <UOTGHS_Handler+0x288>)
   81bd6:	681b      	ldr	r3, [r3, #0]
   81bd8:	f013 0f01 	tst.w	r3, #1
   81bdc:	f040 8085 	bne.w	81cea <UOTGHS_Handler+0x192>
	if (Is_udd_out_received(0)) {
   81be0:	4b7e      	ldr	r3, [pc, #504]	; (81ddc <UOTGHS_Handler+0x284>)
   81be2:	681b      	ldr	r3, [r3, #0]
   81be4:	f013 0f02 	tst.w	r3, #2
   81be8:	f040 8082 	bne.w	81cf0 <UOTGHS_Handler+0x198>
	if (Is_udd_nak_out(0)) {
   81bec:	4b7b      	ldr	r3, [pc, #492]	; (81ddc <UOTGHS_Handler+0x284>)
   81bee:	681b      	ldr	r3, [r3, #0]
   81bf0:	f013 0f08 	tst.w	r3, #8
   81bf4:	f040 8130 	bne.w	81e58 <UOTGHS_Handler+0x300>
	if (Is_udd_nak_in(0)) {
   81bf8:	4b78      	ldr	r3, [pc, #480]	; (81ddc <UOTGHS_Handler+0x284>)
   81bfa:	681b      	ldr	r3, [r3, #0]
   81bfc:	f013 0f10 	tst.w	r3, #16
   81c00:	f040 813d 	bne.w	81e7e <UOTGHS_Handler+0x326>
	for (i = 0; i < nb_data; i++) {
   81c04:	4e77      	ldr	r6, [pc, #476]	; (81de4 <UOTGHS_Handler+0x28c>)
   81c06:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   81c08:	4a70      	ldr	r2, [pc, #448]	; (81dcc <UOTGHS_Handler+0x274>)
   81c0a:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81c0e:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   81c12:	e17f      	b.n	81f14 <UOTGHS_Handler+0x3bc>
		udd_ack_msof();
   81c14:	2202      	movs	r2, #2
   81c16:	4b6d      	ldr	r3, [pc, #436]	; (81dcc <UOTGHS_Handler+0x274>)
   81c18:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
   81c1a:	4b6e      	ldr	r3, [pc, #440]	; (81dd4 <UOTGHS_Handler+0x27c>)
   81c1c:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   81c1e:	e7b3      	b.n	81b88 <UOTGHS_Handler+0x30>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   81c20:	4b71      	ldr	r3, [pc, #452]	; (81de8 <UOTGHS_Handler+0x290>)
   81c22:	781b      	ldrb	r3, [r3, #0]
   81c24:	2b00      	cmp	r3, #0
   81c26:	d141      	bne.n	81cac <UOTGHS_Handler+0x154>
	if (8 != udd_byte_count(0)) {
   81c28:	4b6c      	ldr	r3, [pc, #432]	; (81ddc <UOTGHS_Handler+0x284>)
   81c2a:	681b      	ldr	r3, [r3, #0]
   81c2c:	f3c3 530a 	ubfx	r3, r3, #20, #11
   81c30:	2b08      	cmp	r3, #8
   81c32:	d140      	bne.n	81cb6 <UOTGHS_Handler+0x15e>
   81c34:	4a6d      	ldr	r2, [pc, #436]	; (81dec <UOTGHS_Handler+0x294>)
   81c36:	4b6e      	ldr	r3, [pc, #440]	; (81df0 <UOTGHS_Handler+0x298>)
	for (i = 0; i < 8; i++) {
   81c38:	486e      	ldr	r0, [pc, #440]	; (81df4 <UOTGHS_Handler+0x29c>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   81c3a:	f813 1b01 	ldrb.w	r1, [r3], #1
   81c3e:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   81c42:	4283      	cmp	r3, r0
   81c44:	d1f9      	bne.n	81c3a <UOTGHS_Handler+0xe2>
	if (udc_process_setup() == false) {
   81c46:	4b6c      	ldr	r3, [pc, #432]	; (81df8 <UOTGHS_Handler+0x2a0>)
   81c48:	4798      	blx	r3
   81c4a:	2800      	cmp	r0, #0
   81c4c:	d039      	beq.n	81cc2 <UOTGHS_Handler+0x16a>
	udd_ack_setup_received(0);
   81c4e:	2204      	movs	r2, #4
   81c50:	4b6a      	ldr	r3, [pc, #424]	; (81dfc <UOTGHS_Handler+0x2a4>)
   81c52:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
   81c54:	4b6a      	ldr	r3, [pc, #424]	; (81e00 <UOTGHS_Handler+0x2a8>)
   81c56:	f993 3000 	ldrsb.w	r3, [r3]
   81c5a:	2b00      	cmp	r3, #0
   81c5c:	db37      	blt.n	81cce <UOTGHS_Handler+0x176>
		if (0 == udd_g_ctrlreq.req.wLength) {
   81c5e:	4b68      	ldr	r3, [pc, #416]	; (81e00 <UOTGHS_Handler+0x2a8>)
   81c60:	88db      	ldrh	r3, [r3, #6]
   81c62:	2b00      	cmp	r3, #0
   81c64:	d03e      	beq.n	81ce4 <UOTGHS_Handler+0x18c>
		udd_ctrl_prev_payload_buf_cnt = 0;
   81c66:	2200      	movs	r2, #0
   81c68:	4b66      	ldr	r3, [pc, #408]	; (81e04 <UOTGHS_Handler+0x2ac>)
   81c6a:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   81c6c:	4b66      	ldr	r3, [pc, #408]	; (81e08 <UOTGHS_Handler+0x2b0>)
   81c6e:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   81c70:	2101      	movs	r1, #1
   81c72:	4b5d      	ldr	r3, [pc, #372]	; (81de8 <UOTGHS_Handler+0x290>)
   81c74:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
   81c76:	2110      	movs	r1, #16
   81c78:	4b60      	ldr	r3, [pc, #384]	; (81dfc <UOTGHS_Handler+0x2a4>)
   81c7a:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81c7c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81c80:	fab3 f383 	clz	r3, r3
   81c84:	095b      	lsrs	r3, r3, #5
   81c86:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   81c88:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81c8a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81c8e:	4b50      	ldr	r3, [pc, #320]	; (81dd0 <UOTGHS_Handler+0x278>)
   81c90:	701a      	strb	r2, [r3, #0]
	return flags;
   81c92:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
   81c94:	4a5d      	ldr	r2, [pc, #372]	; (81e0c <UOTGHS_Handler+0x2b4>)
   81c96:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   81c98:	2b00      	cmp	r3, #0
   81c9a:	f43f af75 	beq.w	81b88 <UOTGHS_Handler+0x30>
		cpu_irq_enable();
   81c9e:	2201      	movs	r2, #1
   81ca0:	4b4b      	ldr	r3, [pc, #300]	; (81dd0 <UOTGHS_Handler+0x278>)
   81ca2:	701a      	strb	r2, [r3, #0]
   81ca4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81ca8:	b662      	cpsie	i
   81caa:	e76d      	b.n	81b88 <UOTGHS_Handler+0x30>
		udd_ctrl_endofrequest();
   81cac:	4b58      	ldr	r3, [pc, #352]	; (81e10 <UOTGHS_Handler+0x2b8>)
   81cae:	4798      	blx	r3
		udd_ctrl_init();
   81cb0:	4b58      	ldr	r3, [pc, #352]	; (81e14 <UOTGHS_Handler+0x2bc>)
   81cb2:	4798      	blx	r3
   81cb4:	e7b8      	b.n	81c28 <UOTGHS_Handler+0xd0>
		udd_ctrl_stall_data();
   81cb6:	4b58      	ldr	r3, [pc, #352]	; (81e18 <UOTGHS_Handler+0x2c0>)
   81cb8:	4798      	blx	r3
		udd_ack_setup_received(0);
   81cba:	2204      	movs	r2, #4
   81cbc:	4b4f      	ldr	r3, [pc, #316]	; (81dfc <UOTGHS_Handler+0x2a4>)
   81cbe:	601a      	str	r2, [r3, #0]
   81cc0:	e762      	b.n	81b88 <UOTGHS_Handler+0x30>
		udd_ctrl_stall_data();
   81cc2:	4b55      	ldr	r3, [pc, #340]	; (81e18 <UOTGHS_Handler+0x2c0>)
   81cc4:	4798      	blx	r3
		udd_ack_setup_received(0);
   81cc6:	2204      	movs	r2, #4
   81cc8:	4b4c      	ldr	r3, [pc, #304]	; (81dfc <UOTGHS_Handler+0x2a4>)
   81cca:	601a      	str	r2, [r3, #0]
   81ccc:	e75c      	b.n	81b88 <UOTGHS_Handler+0x30>
		udd_ctrl_prev_payload_buf_cnt = 0;
   81cce:	2300      	movs	r3, #0
   81cd0:	4a4c      	ldr	r2, [pc, #304]	; (81e04 <UOTGHS_Handler+0x2ac>)
   81cd2:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   81cd4:	4a4c      	ldr	r2, [pc, #304]	; (81e08 <UOTGHS_Handler+0x2b0>)
   81cd6:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   81cd8:	2202      	movs	r2, #2
   81cda:	4b43      	ldr	r3, [pc, #268]	; (81de8 <UOTGHS_Handler+0x290>)
   81cdc:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   81cde:	4b4f      	ldr	r3, [pc, #316]	; (81e1c <UOTGHS_Handler+0x2c4>)
   81ce0:	4798      	blx	r3
   81ce2:	e751      	b.n	81b88 <UOTGHS_Handler+0x30>
			udd_ctrl_send_zlp_in();
   81ce4:	4b4e      	ldr	r3, [pc, #312]	; (81e20 <UOTGHS_Handler+0x2c8>)
   81ce6:	4798      	blx	r3
   81ce8:	e74e      	b.n	81b88 <UOTGHS_Handler+0x30>
		udd_ctrl_in_sent();
   81cea:	4b4c      	ldr	r3, [pc, #304]	; (81e1c <UOTGHS_Handler+0x2c4>)
   81cec:	4798      	blx	r3
   81cee:	e74b      	b.n	81b88 <UOTGHS_Handler+0x30>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   81cf0:	4b3d      	ldr	r3, [pc, #244]	; (81de8 <UOTGHS_Handler+0x290>)
   81cf2:	781b      	ldrb	r3, [r3, #0]
   81cf4:	2b01      	cmp	r3, #1
   81cf6:	d00b      	beq.n	81d10 <UOTGHS_Handler+0x1b8>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   81cf8:	2b02      	cmp	r3, #2
   81cfa:	d004      	beq.n	81d06 <UOTGHS_Handler+0x1ae>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   81cfc:	2b04      	cmp	r3, #4
   81cfe:	d002      	beq.n	81d06 <UOTGHS_Handler+0x1ae>
			udd_ctrl_stall_data();
   81d00:	4b45      	ldr	r3, [pc, #276]	; (81e18 <UOTGHS_Handler+0x2c0>)
   81d02:	4798      	blx	r3
   81d04:	e001      	b.n	81d0a <UOTGHS_Handler+0x1b2>
			udd_ctrl_endofrequest();
   81d06:	4b42      	ldr	r3, [pc, #264]	; (81e10 <UOTGHS_Handler+0x2b8>)
   81d08:	4798      	blx	r3
		udd_ctrl_init();
   81d0a:	4b42      	ldr	r3, [pc, #264]	; (81e14 <UOTGHS_Handler+0x2bc>)
   81d0c:	4798      	blx	r3
   81d0e:	e73b      	b.n	81b88 <UOTGHS_Handler+0x30>
	nb_data = udd_byte_count(0);
   81d10:	4b32      	ldr	r3, [pc, #200]	; (81ddc <UOTGHS_Handler+0x284>)
   81d12:	6818      	ldr	r0, [r3, #0]
   81d14:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   81d18:	4b39      	ldr	r3, [pc, #228]	; (81e00 <UOTGHS_Handler+0x2a8>)
   81d1a:	899b      	ldrh	r3, [r3, #12]
   81d1c:	4a3a      	ldr	r2, [pc, #232]	; (81e08 <UOTGHS_Handler+0x2b0>)
   81d1e:	8814      	ldrh	r4, [r2, #0]
   81d20:	1822      	adds	r2, r4, r0
   81d22:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   81d24:	bfbc      	itt	lt
   81d26:	1b1b      	sublt	r3, r3, r4
   81d28:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81d2a:	4b35      	ldr	r3, [pc, #212]	; (81e00 <UOTGHS_Handler+0x2a8>)
   81d2c:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   81d2e:	b178      	cbz	r0, 81d50 <UOTGHS_Handler+0x1f8>
   81d30:	1e63      	subs	r3, r4, #1
   81d32:	441a      	add	r2, r3
   81d34:	4b2e      	ldr	r3, [pc, #184]	; (81df0 <UOTGHS_Handler+0x298>)
		*ptr_dest++ = *ptr_src++;
   81d36:	f813 1b01 	ldrb.w	r1, [r3], #1
   81d3a:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < nb_data; i++) {
   81d3e:	b2d9      	uxtb	r1, r3
   81d40:	4281      	cmp	r1, r0
   81d42:	d3f8      	bcc.n	81d36 <UOTGHS_Handler+0x1de>
	udd_ctrl_payload_buf_cnt += nb_data;
   81d44:	4404      	add	r4, r0
   81d46:	b2a4      	uxth	r4, r4
   81d48:	4b2f      	ldr	r3, [pc, #188]	; (81e08 <UOTGHS_Handler+0x2b0>)
   81d4a:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   81d4c:	2840      	cmp	r0, #64	; 0x40
   81d4e:	d00c      	beq.n	81d6a <UOTGHS_Handler+0x212>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   81d50:	4b2b      	ldr	r3, [pc, #172]	; (81e00 <UOTGHS_Handler+0x2a8>)
   81d52:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   81d54:	695b      	ldr	r3, [r3, #20]
   81d56:	b113      	cbz	r3, 81d5e <UOTGHS_Handler+0x206>
			if (!udd_g_ctrlreq.over_under_run()) {
   81d58:	4798      	blx	r3
   81d5a:	2800      	cmp	r0, #0
   81d5c:	d02e      	beq.n	81dbc <UOTGHS_Handler+0x264>
		udd_ack_out_received(0);
   81d5e:	2202      	movs	r2, #2
   81d60:	4b26      	ldr	r3, [pc, #152]	; (81dfc <UOTGHS_Handler+0x2a4>)
   81d62:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
   81d64:	4b2e      	ldr	r3, [pc, #184]	; (81e20 <UOTGHS_Handler+0x2c8>)
   81d66:	4798      	blx	r3
   81d68:	e70e      	b.n	81b88 <UOTGHS_Handler+0x30>
			|| (udd_g_ctrlreq.req.wLength <=
   81d6a:	4b25      	ldr	r3, [pc, #148]	; (81e00 <UOTGHS_Handler+0x2a8>)
   81d6c:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   81d6e:	4b25      	ldr	r3, [pc, #148]	; (81e04 <UOTGHS_Handler+0x2ac>)
   81d70:	881b      	ldrh	r3, [r3, #0]
   81d72:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   81d74:	429a      	cmp	r2, r3
   81d76:	ddeb      	ble.n	81d50 <UOTGHS_Handler+0x1f8>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   81d78:	4b21      	ldr	r3, [pc, #132]	; (81e00 <UOTGHS_Handler+0x2a8>)
   81d7a:	899b      	ldrh	r3, [r3, #12]
   81d7c:	42a3      	cmp	r3, r4
   81d7e:	d051      	beq.n	81e24 <UOTGHS_Handler+0x2cc>
	udd_ack_out_received(0);
   81d80:	4b1e      	ldr	r3, [pc, #120]	; (81dfc <UOTGHS_Handler+0x2a4>)
   81d82:	2202      	movs	r2, #2
   81d84:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
   81d86:	2210      	movs	r2, #16
   81d88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81d8a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81d8e:	fab3 f383 	clz	r3, r3
   81d92:	095b      	lsrs	r3, r3, #5
   81d94:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   81d96:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81d98:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81d9c:	2100      	movs	r1, #0
   81d9e:	4b0c      	ldr	r3, [pc, #48]	; (81dd0 <UOTGHS_Handler+0x278>)
   81da0:	7019      	strb	r1, [r3, #0]
	return flags;
   81da2:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
   81da4:	4919      	ldr	r1, [pc, #100]	; (81e0c <UOTGHS_Handler+0x2b4>)
   81da6:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
   81da8:	2b00      	cmp	r3, #0
   81daa:	f43f aeed 	beq.w	81b88 <UOTGHS_Handler+0x30>
		cpu_irq_enable();
   81dae:	2201      	movs	r2, #1
   81db0:	4b07      	ldr	r3, [pc, #28]	; (81dd0 <UOTGHS_Handler+0x278>)
   81db2:	701a      	strb	r2, [r3, #0]
   81db4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81db8:	b662      	cpsie	i
   81dba:	e6e5      	b.n	81b88 <UOTGHS_Handler+0x30>
				udd_ctrl_stall_data();
   81dbc:	4b16      	ldr	r3, [pc, #88]	; (81e18 <UOTGHS_Handler+0x2c0>)
   81dbe:	4798      	blx	r3
				udd_ack_out_received(0);
   81dc0:	2202      	movs	r2, #2
   81dc2:	4b0e      	ldr	r3, [pc, #56]	; (81dfc <UOTGHS_Handler+0x2a4>)
   81dc4:	601a      	str	r2, [r3, #0]
   81dc6:	e6df      	b.n	81b88 <UOTGHS_Handler+0x30>
   81dc8:	00082fd1 	.word	0x00082fd1
   81dcc:	400ac000 	.word	0x400ac000
   81dd0:	20070270 	.word	0x20070270
   81dd4:	00080d91 	.word	0x00080d91
   81dd8:	400ac220 	.word	0x400ac220
   81ddc:	400ac130 	.word	0x400ac130
   81de0:	400ac1c0 	.word	0x400ac1c0
   81de4:	400ac134 	.word	0x400ac134
   81de8:	20070da4 	.word	0x20070da4
   81dec:	20070fa7 	.word	0x20070fa7
   81df0:	20180000 	.word	0x20180000
   81df4:	20180008 	.word	0x20180008
   81df8:	00080dd1 	.word	0x00080dd1
   81dfc:	400ac160 	.word	0x400ac160
   81e00:	20070fa8 	.word	0x20070fa8
   81e04:	20070da2 	.word	0x20070da2
   81e08:	20070da0 	.word	0x20070da0
   81e0c:	400ac1f0 	.word	0x400ac1f0
   81e10:	000814f1 	.word	0x000814f1
   81e14:	00081429 	.word	0x00081429
   81e18:	00081485 	.word	0x00081485
   81e1c:	00081501 	.word	0x00081501
   81e20:	0008149d 	.word	0x0008149d
		if (!udd_g_ctrlreq.over_under_run) {
   81e24:	4ba1      	ldr	r3, [pc, #644]	; (820ac <UOTGHS_Handler+0x554>)
   81e26:	695b      	ldr	r3, [r3, #20]
   81e28:	b153      	cbz	r3, 81e40 <UOTGHS_Handler+0x2e8>
		if (!udd_g_ctrlreq.over_under_run()) {
   81e2a:	4798      	blx	r3
   81e2c:	b170      	cbz	r0, 81e4c <UOTGHS_Handler+0x2f4>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81e2e:	49a0      	ldr	r1, [pc, #640]	; (820b0 <UOTGHS_Handler+0x558>)
   81e30:	4aa0      	ldr	r2, [pc, #640]	; (820b4 <UOTGHS_Handler+0x55c>)
   81e32:	880b      	ldrh	r3, [r1, #0]
   81e34:	8810      	ldrh	r0, [r2, #0]
   81e36:	4403      	add	r3, r0
   81e38:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   81e3a:	2300      	movs	r3, #0
   81e3c:	8013      	strh	r3, [r2, #0]
   81e3e:	e79f      	b.n	81d80 <UOTGHS_Handler+0x228>
			udd_ctrl_stall_data();
   81e40:	4b9d      	ldr	r3, [pc, #628]	; (820b8 <UOTGHS_Handler+0x560>)
   81e42:	4798      	blx	r3
			udd_ack_out_received(0);
   81e44:	2202      	movs	r2, #2
   81e46:	4b9d      	ldr	r3, [pc, #628]	; (820bc <UOTGHS_Handler+0x564>)
   81e48:	601a      	str	r2, [r3, #0]
   81e4a:	e69d      	b.n	81b88 <UOTGHS_Handler+0x30>
			udd_ctrl_stall_data();
   81e4c:	4b9a      	ldr	r3, [pc, #616]	; (820b8 <UOTGHS_Handler+0x560>)
   81e4e:	4798      	blx	r3
			udd_ack_out_received(0);
   81e50:	2202      	movs	r2, #2
   81e52:	4b9a      	ldr	r3, [pc, #616]	; (820bc <UOTGHS_Handler+0x564>)
   81e54:	601a      	str	r2, [r3, #0]
   81e56:	e697      	b.n	81b88 <UOTGHS_Handler+0x30>
		udd_ack_nak_out(0);
   81e58:	2208      	movs	r2, #8
   81e5a:	4b98      	ldr	r3, [pc, #608]	; (820bc <UOTGHS_Handler+0x564>)
   81e5c:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0))
   81e5e:	3b30      	subs	r3, #48	; 0x30
   81e60:	681b      	ldr	r3, [r3, #0]
   81e62:	f013 0f01 	tst.w	r3, #1
   81e66:	f47f ae8f 	bne.w	81b88 <UOTGHS_Handler+0x30>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   81e6a:	4b95      	ldr	r3, [pc, #596]	; (820c0 <UOTGHS_Handler+0x568>)
   81e6c:	781b      	ldrb	r3, [r3, #0]
   81e6e:	2b03      	cmp	r3, #3
   81e70:	f47f ae8a 	bne.w	81b88 <UOTGHS_Handler+0x30>
		udd_enable_stall_handshake(0);
   81e74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81e78:	4b92      	ldr	r3, [pc, #584]	; (820c4 <UOTGHS_Handler+0x56c>)
   81e7a:	601a      	str	r2, [r3, #0]
   81e7c:	e684      	b.n	81b88 <UOTGHS_Handler+0x30>
		udd_ack_nak_in(0);
   81e7e:	2210      	movs	r2, #16
   81e80:	4b8e      	ldr	r3, [pc, #568]	; (820bc <UOTGHS_Handler+0x564>)
   81e82:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
   81e84:	3b30      	subs	r3, #48	; 0x30
   81e86:	681b      	ldr	r3, [r3, #0]
   81e88:	f013 0f02 	tst.w	r3, #2
   81e8c:	f47f ae7c 	bne.w	81b88 <UOTGHS_Handler+0x30>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   81e90:	4b8b      	ldr	r3, [pc, #556]	; (820c0 <UOTGHS_Handler+0x568>)
   81e92:	781b      	ldrb	r3, [r3, #0]
   81e94:	2b01      	cmp	r3, #1
   81e96:	d007      	beq.n	81ea8 <UOTGHS_Handler+0x350>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   81e98:	2b04      	cmp	r3, #4
   81e9a:	f47f ae75 	bne.w	81b88 <UOTGHS_Handler+0x30>
		udd_enable_stall_handshake(0);
   81e9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81ea2:	4b88      	ldr	r3, [pc, #544]	; (820c4 <UOTGHS_Handler+0x56c>)
   81ea4:	601a      	str	r2, [r3, #0]
   81ea6:	e66f      	b.n	81b88 <UOTGHS_Handler+0x30>
		udd_ctrl_send_zlp_in();
   81ea8:	4b87      	ldr	r3, [pc, #540]	; (820c8 <UOTGHS_Handler+0x570>)
   81eaa:	4798      	blx	r3
   81eac:	e66c      	b.n	81b88 <UOTGHS_Handler+0x30>
			if (udd_endpoint_dma_get_status(ep)
   81eae:	4b87      	ldr	r3, [pc, #540]	; (820cc <UOTGHS_Handler+0x574>)
   81eb0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   81eb4:	68da      	ldr	r2, [r3, #12]
   81eb6:	f012 0f01 	tst.w	r2, #1
   81eba:	f47f ae65 	bne.w	81b88 <UOTGHS_Handler+0x30>
			udd_disable_endpoint_dma_interrupt(ep);
   81ebe:	4a84      	ldr	r2, [pc, #528]	; (820d0 <UOTGHS_Handler+0x578>)
   81ec0:	6151      	str	r1, [r2, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   81ec2:	68dd      	ldr	r5, [r3, #12]
			if (nb_remaining) {
   81ec4:	0c2d      	lsrs	r5, r5, #16
   81ec6:	d008      	beq.n	81eda <UOTGHS_Handler+0x382>
				ptr_job->buf_cnt -= nb_remaining;
   81ec8:	4b82      	ldr	r3, [pc, #520]	; (820d4 <UOTGHS_Handler+0x57c>)
   81eca:	0079      	lsls	r1, r7, #1
   81ecc:	19cc      	adds	r4, r1, r7
   81ece:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   81ed2:	68e2      	ldr	r2, [r4, #12]
   81ed4:	1b52      	subs	r2, r2, r5
   81ed6:	60e2      	str	r2, [r4, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   81ed8:	60a2      	str	r2, [r4, #8]
			udd_ep_trans_done(ep);
   81eda:	4b7f      	ldr	r3, [pc, #508]	; (820d8 <UOTGHS_Handler+0x580>)
   81edc:	4798      	blx	r3
   81ede:	e653      	b.n	81b88 <UOTGHS_Handler+0x30>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   81ee0:	4b7e      	ldr	r3, [pc, #504]	; (820dc <UOTGHS_Handler+0x584>)
   81ee2:	2201      	movs	r2, #1
   81ee4:	f849 2003 	str.w	r2, [r9, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   81ee8:	4974      	ldr	r1, [pc, #464]	; (820bc <UOTGHS_Handler+0x564>)
   81eea:	f849 2001 	str.w	r2, [r9, r1]
				udd_ack_fifocon(ep);
   81eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81ef2:	f849 2003 	str.w	r2, [r9, r3]
		ptr_job = &udd_ep_job[ep - 1];
   81ef6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   81efa:	4602      	mov	r2, r0
   81efc:	2100      	movs	r1, #0
   81efe:	4875      	ldr	r0, [pc, #468]	; (820d4 <UOTGHS_Handler+0x57c>)
   81f00:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
   81f04:	4b76      	ldr	r3, [pc, #472]	; (820e0 <UOTGHS_Handler+0x588>)
   81f06:	4798      	blx	r3
   81f08:	e63e      	b.n	81b88 <UOTGHS_Handler+0x30>
   81f0a:	3301      	adds	r3, #1
   81f0c:	3604      	adds	r6, #4
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   81f0e:	2b04      	cmp	r3, #4
   81f10:	f000 80f6 	beq.w	82100 <UOTGHS_Handler+0x5a8>
   81f14:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
   81f16:	461d      	mov	r5, r3
   81f18:	1e5f      	subs	r7, r3, #1
   81f1a:	46b8      	mov	r8, r7
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   81f1c:	6914      	ldr	r4, [r2, #16]
   81f1e:	fa0e f107 	lsl.w	r1, lr, r7
   81f22:	420c      	tst	r4, r1
   81f24:	d002      	beq.n	81f2c <UOTGHS_Handler+0x3d4>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   81f26:	6854      	ldr	r4, [r2, #4]
   81f28:	4221      	tst	r1, r4
   81f2a:	d1c0      	bne.n	81eae <UOTGHS_Handler+0x356>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81f2c:	6911      	ldr	r1, [r2, #16]
   81f2e:	fa0c f505 	lsl.w	r5, ip, r5
   81f32:	4229      	tst	r1, r5
   81f34:	d0e9      	beq.n	81f0a <UOTGHS_Handler+0x3b2>
   81f36:	ea4f 0983 	mov.w	r9, r3, lsl #2
   81f3a:	f106 0490 	add.w	r4, r6, #144	; 0x90
			if (Is_udd_in_send_interrupt_enabled(ep)
   81f3e:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
   81f42:	f011 0f01 	tst.w	r1, #1
   81f46:	d003      	beq.n	81f50 <UOTGHS_Handler+0x3f8>
					&& Is_udd_in_send(ep)) {
   81f48:	6831      	ldr	r1, [r6, #0]
   81f4a:	f011 0f01 	tst.w	r1, #1
   81f4e:	d1c7      	bne.n	81ee0 <UOTGHS_Handler+0x388>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   81f50:	6821      	ldr	r1, [r4, #0]
   81f52:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   81f56:	d0d8      	beq.n	81f0a <UOTGHS_Handler+0x3b2>
					&& (0 == udd_nb_busy_bank(ep))) {
   81f58:	6831      	ldr	r1, [r6, #0]
   81f5a:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   81f5e:	d1d4      	bne.n	81f0a <UOTGHS_Handler+0x3b2>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   81f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81f64:	4b5d      	ldr	r3, [pc, #372]	; (820dc <UOTGHS_Handler+0x584>)
   81f66:	f849 2003 	str.w	r2, [r9, r3]
				udd_disable_endpoint_interrupt(ep);
   81f6a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   81f6e:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   81f70:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   81f74:	4b57      	ldr	r3, [pc, #348]	; (820d4 <UOTGHS_Handler+0x57c>)
   81f76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   81f7a:	f898 2014 	ldrb.w	r2, [r8, #20]
   81f7e:	f36f 0282 	bfc	r2, #2, #1
   81f82:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   81f86:	4a57      	ldr	r2, [pc, #348]	; (820e4 <UOTGHS_Handler+0x58c>)
   81f88:	f859 3002 	ldr.w	r3, [r9, r2]
   81f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   81f90:	f849 3002 	str.w	r3, [r9, r2]
				udd_enable_stall_handshake(ep);
   81f94:	4b4b      	ldr	r3, [pc, #300]	; (820c4 <UOTGHS_Handler+0x56c>)
   81f96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81f9a:	f849 2003 	str.w	r2, [r9, r3]
				udd_reset_data_toggle(ep);
   81f9e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81fa2:	f849 2003 	str.w	r2, [r9, r3]
   81fa6:	e5ef      	b.n	81b88 <UOTGHS_Handler+0x30>
		udd_ack_reset();
   81fa8:	4c49      	ldr	r4, [pc, #292]	; (820d0 <UOTGHS_Handler+0x578>)
   81faa:	2308      	movs	r3, #8
   81fac:	60a3      	str	r3, [r4, #8]
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   81fae:	4e49      	ldr	r6, [pc, #292]	; (820d4 <UOTGHS_Handler+0x57c>)
   81fb0:	2201      	movs	r2, #1
   81fb2:	4611      	mov	r1, r2
   81fb4:	4630      	mov	r0, r6
   81fb6:	4d4a      	ldr	r5, [pc, #296]	; (820e0 <UOTGHS_Handler+0x588>)
   81fb8:	47a8      	blx	r5
   81fba:	2202      	movs	r2, #2
   81fbc:	2101      	movs	r1, #1
   81fbe:	f106 0018 	add.w	r0, r6, #24
   81fc2:	47a8      	blx	r5
   81fc4:	2203      	movs	r2, #3
   81fc6:	2101      	movs	r1, #1
   81fc8:	f106 0030 	add.w	r0, r6, #48	; 0x30
   81fcc:	47a8      	blx	r5
		udc_reset();
   81fce:	4b46      	ldr	r3, [pc, #280]	; (820e8 <UOTGHS_Handler+0x590>)
   81fd0:	4798      	blx	r3
	udd_configure_address(0);
   81fd2:	6823      	ldr	r3, [r4, #0]
   81fd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81fd8:	6023      	str	r3, [r4, #0]
	udd_enable_address();
   81fda:	6823      	ldr	r3, [r4, #0]
   81fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81fe0:	6023      	str	r3, [r4, #0]
	udd_configure_endpoint(0,
   81fe2:	4a40      	ldr	r2, [pc, #256]	; (820e4 <UOTGHS_Handler+0x58c>)
   81fe4:	6813      	ldr	r3, [r2, #0]
   81fe6:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   81fea:	f023 031c 	bic.w	r3, r3, #28
   81fee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   81ff2:	6013      	str	r3, [r2, #0]
	udd_allocate_memory(0);
   81ff4:	6813      	ldr	r3, [r2, #0]
   81ff6:	f043 0302 	orr.w	r3, r3, #2
   81ffa:	6013      	str	r3, [r2, #0]
	udd_enable_endpoint(0);
   81ffc:	69e3      	ldr	r3, [r4, #28]
   81ffe:	f043 0301 	orr.w	r3, r3, #1
   82002:	61e3      	str	r3, [r4, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82004:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82008:	fab3 f383 	clz	r3, r3
   8200c:	095b      	lsrs	r3, r3, #5
   8200e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   82010:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82012:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82016:	2200      	movs	r2, #0
   82018:	4b34      	ldr	r3, [pc, #208]	; (820ec <UOTGHS_Handler+0x594>)
   8201a:	701a      	strb	r2, [r3, #0]
	return flags;
   8201c:	9a03      	ldr	r2, [sp, #12]
	udd_enable_setup_received_interrupt(0);
   8201e:	4b29      	ldr	r3, [pc, #164]	; (820c4 <UOTGHS_Handler+0x56c>)
   82020:	2104      	movs	r1, #4
   82022:	6019      	str	r1, [r3, #0]
	udd_enable_out_received_interrupt(0);
   82024:	2102      	movs	r1, #2
   82026:	6019      	str	r1, [r3, #0]
	udd_enable_endpoint_interrupt(0);
   82028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8202c:	61a3      	str	r3, [r4, #24]
	if (cpu_irq_is_enabled_flags(flags))
   8202e:	b12a      	cbz	r2, 8203c <UOTGHS_Handler+0x4e4>
		cpu_irq_enable();
   82030:	2201      	movs	r2, #1
   82032:	4b2e      	ldr	r3, [pc, #184]	; (820ec <UOTGHS_Handler+0x594>)
   82034:	701a      	strb	r2, [r3, #0]
   82036:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8203a:	b662      	cpsie	i
		udd_ctrl_init();
   8203c:	4b2c      	ldr	r3, [pc, #176]	; (820f0 <UOTGHS_Handler+0x598>)
   8203e:	4798      	blx	r3
		goto udd_interrupt_end;
   82040:	e5a2      	b.n	81b88 <UOTGHS_Handler+0x30>
		otg_unfreeze_clock();
   82042:	4b23      	ldr	r3, [pc, #140]	; (820d0 <UOTGHS_Handler+0x578>)
   82044:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82048:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   8204c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
   82050:	2201      	movs	r2, #1
   82052:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
   82054:	2210      	movs	r2, #16
   82056:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   82058:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8205c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82060:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   82064:	2000      	movs	r0, #0
   82066:	4b23      	ldr	r3, [pc, #140]	; (820f4 <UOTGHS_Handler+0x59c>)
   82068:	4798      	blx	r3
		goto udd_interrupt_end;
   8206a:	e58d      	b.n	81b88 <UOTGHS_Handler+0x30>
	if (Is_otg_vbus_transition()) {
   8206c:	4b18      	ldr	r3, [pc, #96]	; (820d0 <UOTGHS_Handler+0x578>)
   8206e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   82072:	f013 0f02 	tst.w	r3, #2
   82076:	f43f ad87 	beq.w	81b88 <UOTGHS_Handler+0x30>
		otg_unfreeze_clock();
   8207a:	4b15      	ldr	r3, [pc, #84]	; (820d0 <UOTGHS_Handler+0x578>)
   8207c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82080:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82084:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   82088:	2202      	movs	r2, #2
   8208a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		otg_freeze_clock();
   8208e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82096:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		if (Is_otg_vbus_high()) {
   8209a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   8209e:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   820a2:	bf14      	ite	ne
   820a4:	4b14      	ldrne	r3, [pc, #80]	; (820f8 <UOTGHS_Handler+0x5a0>)
			udd_detach();
   820a6:	4b15      	ldreq	r3, [pc, #84]	; (820fc <UOTGHS_Handler+0x5a4>)
   820a8:	4798      	blx	r3
   820aa:	e56d      	b.n	81b88 <UOTGHS_Handler+0x30>
   820ac:	20070fa8 	.word	0x20070fa8
   820b0:	20070da2 	.word	0x20070da2
   820b4:	20070da0 	.word	0x20070da0
   820b8:	00081485 	.word	0x00081485
   820bc:	400ac160 	.word	0x400ac160
   820c0:	20070da4 	.word	0x20070da4
   820c4:	400ac1f0 	.word	0x400ac1f0
   820c8:	0008149d 	.word	0x0008149d
   820cc:	400ac300 	.word	0x400ac300
   820d0:	400ac000 	.word	0x400ac000
   820d4:	20070da8 	.word	0x20070da8
   820d8:	000816b5 	.word	0x000816b5
   820dc:	400ac220 	.word	0x400ac220
   820e0:	0008167d 	.word	0x0008167d
   820e4:	400ac100 	.word	0x400ac100
   820e8:	00080d49 	.word	0x00080d49
   820ec:	20070270 	.word	0x20070270
   820f0:	00081429 	.word	0x00081429
   820f4:	0008185d 	.word	0x0008185d
   820f8:	00081a99 	.word	0x00081a99
   820fc:	00081b25 	.word	0x00081b25
	if (Is_udd_reset()) {
   82100:	4b19      	ldr	r3, [pc, #100]	; (82168 <UOTGHS_Handler+0x610>)
   82102:	685b      	ldr	r3, [r3, #4]
   82104:	f013 0f08 	tst.w	r3, #8
   82108:	f47f af4e 	bne.w	81fa8 <UOTGHS_Handler+0x450>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   8210c:	4b16      	ldr	r3, [pc, #88]	; (82168 <UOTGHS_Handler+0x610>)
   8210e:	691b      	ldr	r3, [r3, #16]
   82110:	f013 0f01 	tst.w	r3, #1
   82114:	d004      	beq.n	82120 <UOTGHS_Handler+0x5c8>
   82116:	4b14      	ldr	r3, [pc, #80]	; (82168 <UOTGHS_Handler+0x610>)
   82118:	685b      	ldr	r3, [r3, #4]
   8211a:	f013 0f01 	tst.w	r3, #1
   8211e:	d190      	bne.n	82042 <UOTGHS_Handler+0x4ea>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   82120:	4b11      	ldr	r3, [pc, #68]	; (82168 <UOTGHS_Handler+0x610>)
   82122:	691b      	ldr	r3, [r3, #16]
   82124:	f013 0f10 	tst.w	r3, #16
   82128:	d0a0      	beq.n	8206c <UOTGHS_Handler+0x514>
   8212a:	4b0f      	ldr	r3, [pc, #60]	; (82168 <UOTGHS_Handler+0x610>)
   8212c:	685b      	ldr	r3, [r3, #4]
   8212e:	f013 0f10 	tst.w	r3, #16
   82132:	d09b      	beq.n	8206c <UOTGHS_Handler+0x514>
		otg_unfreeze_clock();
   82134:	4a0c      	ldr	r2, [pc, #48]	; (82168 <UOTGHS_Handler+0x610>)
   82136:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   8213a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   8213e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
   82142:	4613      	mov	r3, r2
   82144:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   82148:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   8214c:	d103      	bne.n	82156 <UOTGHS_Handler+0x5fe>
			if (Is_udd_suspend()) {
   8214e:	685a      	ldr	r2, [r3, #4]
   82150:	f012 0f01 	tst.w	r2, #1
   82154:	d0f6      	beq.n	82144 <UOTGHS_Handler+0x5ec>
		udd_disable_wake_up_interrupt();
   82156:	4b04      	ldr	r3, [pc, #16]	; (82168 <UOTGHS_Handler+0x610>)
   82158:	2210      	movs	r2, #16
   8215a:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
   8215c:	2001      	movs	r0, #1
   8215e:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   82160:	4b02      	ldr	r3, [pc, #8]	; (8216c <UOTGHS_Handler+0x614>)
   82162:	4798      	blx	r3
		goto udd_interrupt_end;
   82164:	e510      	b.n	81b88 <UOTGHS_Handler+0x30>
   82166:	bf00      	nop
   82168:	400ac000 	.word	0x400ac000
   8216c:	0008185d 	.word	0x0008185d

00082170 <udd_is_high_speed>:
}
   82170:	2000      	movs	r0, #0
   82172:	4770      	bx	lr

00082174 <udd_set_address>:
	udd_disable_address();
   82174:	4b08      	ldr	r3, [pc, #32]	; (82198 <udd_set_address+0x24>)
   82176:	681a      	ldr	r2, [r3, #0]
   82178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   8217c:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   8217e:	681a      	ldr	r2, [r3, #0]
   82180:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82184:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82188:	4302      	orrs	r2, r0
   8218a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   8218c:	681a      	ldr	r2, [r3, #0]
   8218e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82192:	601a      	str	r2, [r3, #0]
   82194:	4770      	bx	lr
   82196:	bf00      	nop
   82198:	400ac000 	.word	0x400ac000

0008219c <udd_getaddress>:
	return udd_get_configured_address();
   8219c:	4b02      	ldr	r3, [pc, #8]	; (821a8 <udd_getaddress+0xc>)
   8219e:	6818      	ldr	r0, [r3, #0]
}
   821a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   821a4:	4770      	bx	lr
   821a6:	bf00      	nop
   821a8:	400ac000 	.word	0x400ac000

000821ac <udd_get_frame_number>:
	return udd_frame_number();
   821ac:	4b02      	ldr	r3, [pc, #8]	; (821b8 <udd_get_frame_number+0xc>)
   821ae:	6a18      	ldr	r0, [r3, #32]
}
   821b0:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   821b4:	4770      	bx	lr
   821b6:	bf00      	nop
   821b8:	400ac000 	.word	0x400ac000

000821bc <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   821bc:	4b02      	ldr	r3, [pc, #8]	; (821c8 <udd_get_micro_frame_number+0xc>)
   821be:	6a18      	ldr	r0, [r3, #32]
}
   821c0:	f3c0 000d 	ubfx	r0, r0, #0, #14
   821c4:	4770      	bx	lr
   821c6:	bf00      	nop
   821c8:	400ac000 	.word	0x400ac000

000821cc <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   821cc:	4b01      	ldr	r3, [pc, #4]	; (821d4 <udd_set_setup_payload+0x8>)
   821ce:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   821d0:	8199      	strh	r1, [r3, #12]
   821d2:	4770      	bx	lr
   821d4:	20070fa8 	.word	0x20070fa8

000821d8 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   821d8:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   821dc:	2a03      	cmp	r2, #3
   821de:	d900      	bls.n	821e2 <udd_ep_free+0xa>
   821e0:	4770      	bx	lr
{
   821e2:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   821e4:	4810      	ldr	r0, [pc, #64]	; (82228 <udd_ep_free+0x50>)
   821e6:	69c3      	ldr	r3, [r0, #28]
   821e8:	2101      	movs	r1, #1
   821ea:	fa01 f402 	lsl.w	r4, r1, r2
   821ee:	ea23 0304 	bic.w	r3, r3, r4
   821f2:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
   821f4:	f500 7080 	add.w	r0, r0, #256	; 0x100
   821f8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   821fc:	f023 0302 	bic.w	r3, r3, #2
   82200:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82204:	1e56      	subs	r6, r2, #1
   82206:	4c09      	ldr	r4, [pc, #36]	; (8222c <udd_ep_free+0x54>)
   82208:	fa06 f501 	lsl.w	r5, r6, r1
   8220c:	19a8      	adds	r0, r5, r6
   8220e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   82212:	4b07      	ldr	r3, [pc, #28]	; (82230 <udd_ep_free+0x58>)
   82214:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   82216:	4435      	add	r5, r6
   82218:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   8221c:	7d23      	ldrb	r3, [r4, #20]
   8221e:	f36f 0382 	bfc	r3, #2, #1
   82222:	7523      	strb	r3, [r4, #20]
   82224:	bd70      	pop	{r4, r5, r6, pc}
   82226:	bf00      	nop
   82228:	400ac000 	.word	0x400ac000
   8222c:	20070da8 	.word	0x20070da8
   82230:	0008167d 	.word	0x0008167d

00082234 <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
   82234:	f000 000f 	and.w	r0, r0, #15
   82238:	4b02      	ldr	r3, [pc, #8]	; (82244 <udd_ep_is_halted+0x10>)
   8223a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   8223e:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   82242:	4770      	bx	lr
   82244:	400ac1c0 	.word	0x400ac1c0

00082248 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82248:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   8224c:	2b03      	cmp	r3, #3
   8224e:	d85d      	bhi.n	8230c <udd_ep_set_halt+0xc4>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   82250:	4a35      	ldr	r2, [pc, #212]	; (82328 <udd_ep_set_halt+0xe0>)
   82252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82256:	f412 2f00 	tst.w	r2, #524288	; 0x80000
   8225a:	d159      	bne.n	82310 <udd_ep_set_halt+0xc8>
{
   8225c:	b410      	push	{r4}
   8225e:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82260:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   82262:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   82266:	4a31      	ldr	r2, [pc, #196]	; (8232c <udd_ep_set_halt+0xe4>)
   82268:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   8226c:	7d12      	ldrb	r2, [r2, #20]
   8226e:	f012 0f04 	tst.w	r2, #4
   82272:	d14f      	bne.n	82314 <udd_ep_set_halt+0xcc>
	if (ptr_job->busy == true) {
   82274:	f012 0f01 	tst.w	r2, #1
   82278:	d150      	bne.n	8231c <udd_ep_set_halt+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8227a:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8227e:	fab2 f282 	clz	r2, r2
   82282:	0952      	lsrs	r2, r2, #5
   82284:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   82286:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82288:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8228c:	2400      	movs	r4, #0
   8228e:	4a28      	ldr	r2, [pc, #160]	; (82330 <udd_ep_set_halt+0xe8>)
   82290:	7014      	strb	r4, [r2, #0]
	return flags;
   82292:	9c01      	ldr	r4, [sp, #4]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   82294:	f010 0f80 	tst.w	r0, #128	; 0x80
   82298:	d118      	bne.n	822cc <udd_ep_set_halt+0x84>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   8229a:	4926      	ldr	r1, [pc, #152]	; (82334 <udd_ep_set_halt+0xec>)
   8229c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   822a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   822a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_ack_stall(ep_index);
   822a8:	2140      	movs	r1, #64	; 0x40
   822aa:	4a23      	ldr	r2, [pc, #140]	; (82338 <udd_ep_set_halt+0xf0>)
   822ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   822b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   822b4:	3290      	adds	r2, #144	; 0x90
   822b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
   822ba:	2c00      	cmp	r4, #0
   822bc:	d032      	beq.n	82324 <udd_ep_set_halt+0xdc>
		cpu_irq_enable();
   822be:	2001      	movs	r0, #1
   822c0:	4b1b      	ldr	r3, [pc, #108]	; (82330 <udd_ep_set_halt+0xe8>)
   822c2:	7018      	strb	r0, [r3, #0]
   822c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   822c8:	b662      	cpsie	i
   822ca:	e024      	b.n	82316 <udd_ep_set_halt+0xce>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   822cc:	4a1b      	ldr	r2, [pc, #108]	; (8233c <udd_ep_set_halt+0xf4>)
   822ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   822d2:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   822d6:	d0e0      	beq.n	8229a <udd_ep_set_halt+0x52>
		ptr_job->stall_requested = true;
   822d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   822dc:	4a13      	ldr	r2, [pc, #76]	; (8232c <udd_ep_set_halt+0xe4>)
   822de:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   822e2:	7d0a      	ldrb	r2, [r1, #20]
   822e4:	f042 0204 	orr.w	r2, r2, #4
   822e8:	750a      	strb	r2, [r1, #20]
		udd_enable_bank_interrupt(ep_index);
   822ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   822ee:	4914      	ldr	r1, [pc, #80]	; (82340 <udd_ep_set_halt+0xf8>)
   822f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   822f4:	fa02 f303 	lsl.w	r3, r2, r3
   822f8:	4a12      	ldr	r2, [pc, #72]	; (82344 <udd_ep_set_halt+0xfc>)
   822fa:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
   822fc:	b184      	cbz	r4, 82320 <udd_ep_set_halt+0xd8>
		cpu_irq_enable();
   822fe:	2001      	movs	r0, #1
   82300:	4b0b      	ldr	r3, [pc, #44]	; (82330 <udd_ep_set_halt+0xe8>)
   82302:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   82304:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82308:	b662      	cpsie	i
   8230a:	e004      	b.n	82316 <udd_ep_set_halt+0xce>
		return false;
   8230c:	2000      	movs	r0, #0
   8230e:	4770      	bx	lr
		return true; // Already STALL
   82310:	2001      	movs	r0, #1
   82312:	4770      	bx	lr
   82314:	2001      	movs	r0, #1
}
   82316:	b003      	add	sp, #12
   82318:	bc10      	pop	{r4}
   8231a:	4770      	bx	lr
		return false; // Job on going, stall impossible
   8231c:	2000      	movs	r0, #0
   8231e:	e7fa      	b.n	82316 <udd_ep_set_halt+0xce>
		return true;
   82320:	2001      	movs	r0, #1
   82322:	e7f8      	b.n	82316 <udd_ep_set_halt+0xce>
	return true;
   82324:	2001      	movs	r0, #1
   82326:	e7f6      	b.n	82316 <udd_ep_set_halt+0xce>
   82328:	400ac1c0 	.word	0x400ac1c0
   8232c:	20070da8 	.word	0x20070da8
   82330:	20070270 	.word	0x20070270
   82334:	400ac100 	.word	0x400ac100
   82338:	400ac160 	.word	0x400ac160
   8233c:	400ac130 	.word	0x400ac130
   82340:	400ac1f0 	.word	0x400ac1f0
   82344:	400ac000 	.word	0x400ac000

00082348 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82348:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
   8234c:	2803      	cmp	r0, #3
   8234e:	d851      	bhi.n	823f4 <udd_ep_clear_halt+0xac>
{
   82350:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82352:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
   82354:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   82358:	4a2c      	ldr	r2, [pc, #176]	; (8240c <udd_ep_clear_halt+0xc4>)
   8235a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   8235e:	7d12      	ldrb	r2, [r2, #20]
   82360:	f012 0f04 	tst.w	r2, #4
   82364:	d048      	beq.n	823f8 <udd_ep_clear_halt+0xb0>
		ptr_job->stall_requested = false;
   82366:	460a      	mov	r2, r1
   82368:	4928      	ldr	r1, [pc, #160]	; (8240c <udd_ep_clear_halt+0xc4>)
   8236a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   8236e:	7d11      	ldrb	r1, [r2, #20]
   82370:	f36f 0182 	bfc	r1, #2, #1
   82374:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   82376:	0082      	lsls	r2, r0, #2
   82378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8237c:	4c24      	ldr	r4, [pc, #144]	; (82410 <udd_ep_clear_halt+0xc8>)
   8237e:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   82382:	4081      	lsls	r1, r0
   82384:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
   82388:	6161      	str	r1, [r4, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   8238a:	4922      	ldr	r1, [pc, #136]	; (82414 <udd_ep_clear_halt+0xcc>)
   8238c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82390:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   82394:	d014      	beq.n	823c0 <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
   82396:	4920      	ldr	r1, [pc, #128]	; (82418 <udd_ep_clear_halt+0xd0>)
   82398:	5851      	ldr	r1, [r2, r1]
   8239a:	f011 0f40 	tst.w	r1, #64	; 0x40
   8239e:	d006      	beq.n	823ae <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
   823a0:	2040      	movs	r0, #64	; 0x40
   823a2:	491e      	ldr	r1, [pc, #120]	; (8241c <udd_ep_clear_halt+0xd4>)
   823a4:	5050      	str	r0, [r2, r1]
			udd_reset_data_toggle(ep_index);
   823a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   823aa:	3190      	adds	r1, #144	; 0x90
   823ac:	5050      	str	r0, [r2, r1]
		udd_disable_stall_handshake(ep_index);
   823ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   823b2:	4917      	ldr	r1, [pc, #92]	; (82410 <udd_ep_clear_halt+0xc8>)
   823b4:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   823b6:	481a      	ldr	r0, [pc, #104]	; (82420 <udd_ep_clear_halt+0xd8>)
   823b8:	5811      	ldr	r1, [r2, r0]
   823ba:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   823be:	5011      	str	r1, [r2, r0]
		if (ptr_job->busy == true) {
   823c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   823c4:	4911      	ldr	r1, [pc, #68]	; (8240c <udd_ep_clear_halt+0xc4>)
   823c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   823ca:	7d12      	ldrb	r2, [r2, #20]
   823cc:	f012 0f01 	tst.w	r2, #1
   823d0:	d101      	bne.n	823d6 <udd_ep_clear_halt+0x8e>
	return true;
   823d2:	2001      	movs	r0, #1
   823d4:	bd10      	pop	{r4, pc}
			ptr_job->busy = false;
   823d6:	4608      	mov	r0, r1
   823d8:	0059      	lsls	r1, r3, #1
   823da:	18ca      	adds	r2, r1, r3
   823dc:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   823e0:	7d14      	ldrb	r4, [r2, #20]
   823e2:	f36f 0400 	bfc	r4, #0, #1
   823e6:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
   823e8:	440b      	add	r3, r1
   823ea:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
   823ee:	4798      	blx	r3
	return true;
   823f0:	2001      	movs	r0, #1
   823f2:	bd10      	pop	{r4, pc}
		return false;
   823f4:	2000      	movs	r0, #0
   823f6:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   823f8:	0082      	lsls	r2, r0, #2
   823fa:	4906      	ldr	r1, [pc, #24]	; (82414 <udd_ep_clear_halt+0xcc>)
   823fc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82400:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   82404:	d1c7      	bne.n	82396 <udd_ep_clear_halt+0x4e>
	return true;
   82406:	2001      	movs	r0, #1
}
   82408:	bd10      	pop	{r4, pc}
   8240a:	bf00      	nop
   8240c:	20070da8 	.word	0x20070da8
   82410:	400ac220 	.word	0x400ac220
   82414:	400ac1c0 	.word	0x400ac1c0
   82418:	400ac130 	.word	0x400ac130
   8241c:	400ac160 	.word	0x400ac160
   82420:	400ac100 	.word	0x400ac100

00082424 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   82424:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   82428:	2803      	cmp	r0, #3
   8242a:	d864      	bhi.n	824f6 <udd_ep_run+0xd2>
{
   8242c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8242e:	b083      	sub	sp, #12
	if ((!Is_udd_endpoint_enabled(ep))
   82430:	4c36      	ldr	r4, [pc, #216]	; (8250c <udd_ep_run+0xe8>)
   82432:	69e5      	ldr	r5, [r4, #28]
   82434:	2401      	movs	r4, #1
   82436:	4084      	lsls	r4, r0
   82438:	422c      	tst	r4, r5
   8243a:	d05e      	beq.n	824fa <udd_ep_run+0xd6>
			|| Is_udd_endpoint_stall_requested(ep)
   8243c:	4c34      	ldr	r4, [pc, #208]	; (82510 <udd_ep_run+0xec>)
   8243e:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   82442:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   82446:	d15b      	bne.n	82500 <udd_ep_run+0xdc>
	ptr_job = &udd_ep_job[ep - 1];
   82448:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   8244a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   8244e:	4d31      	ldr	r5, [pc, #196]	; (82514 <udd_ep_run+0xf0>)
   82450:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   82454:	7d2d      	ldrb	r5, [r5, #20]
   82456:	f015 0f04 	tst.w	r5, #4
   8245a:	d153      	bne.n	82504 <udd_ep_run+0xe0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8245c:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82460:	fab5 f585 	clz	r5, r5
   82464:	096d      	lsrs	r5, r5, #5
   82466:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   82468:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8246a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8246e:	2600      	movs	r6, #0
   82470:	4d29      	ldr	r5, [pc, #164]	; (82518 <udd_ep_run+0xf4>)
   82472:	702e      	strb	r6, [r5, #0]
	return flags;
   82474:	9f01      	ldr	r7, [sp, #4]
	if (ptr_job->busy == true) {
   82476:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   8247a:	4e26      	ldr	r6, [pc, #152]	; (82514 <udd_ep_run+0xf0>)
   8247c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   82480:	7d2d      	ldrb	r5, [r5, #20]
   82482:	f015 0f01 	tst.w	r5, #1
   82486:	d009      	beq.n	8249c <udd_ep_run+0x78>
	if (cpu_irq_is_enabled_flags(flags))
   82488:	2f00      	cmp	r7, #0
   8248a:	d03d      	beq.n	82508 <udd_ep_run+0xe4>
		cpu_irq_enable();
   8248c:	2201      	movs	r2, #1
   8248e:	4b22      	ldr	r3, [pc, #136]	; (82518 <udd_ep_run+0xf4>)
   82490:	701a      	strb	r2, [r3, #0]
   82492:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82496:	b662      	cpsie	i
		return false; // Job already on going
   82498:	2000      	movs	r0, #0
   8249a:	e02f      	b.n	824fc <udd_ep_run+0xd8>
	ptr_job->busy = true;
   8249c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   824a0:	4e1c      	ldr	r6, [pc, #112]	; (82514 <udd_ep_run+0xf0>)
   824a2:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   824a6:	7d2e      	ldrb	r6, [r5, #20]
   824a8:	f046 0601 	orr.w	r6, r6, #1
   824ac:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   824ae:	b12f      	cbz	r7, 824bc <udd_ep_run+0x98>
		cpu_irq_enable();
   824b0:	2601      	movs	r6, #1
   824b2:	4d19      	ldr	r5, [pc, #100]	; (82518 <udd_ep_run+0xf4>)
   824b4:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   824b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   824ba:	b662      	cpsie	i
	ptr_job->buf = buf;
   824bc:	4f15      	ldr	r7, [pc, #84]	; (82514 <udd_ep_run+0xf0>)
   824be:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   824c2:	00ed      	lsls	r5, r5, #3
   824c4:	197e      	adds	r6, r7, r5
   824c6:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   824c8:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   824ca:	2200      	movs	r2, #0
   824cc:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   824ce:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   824d0:	9a08      	ldr	r2, [sp, #32]
   824d2:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   824d4:	b911      	cbnz	r1, 824dc <udd_ep_run+0xb8>
   824d6:	fab3 f183 	clz	r1, r3
   824da:	0949      	lsrs	r1, r1, #5
   824dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   824e0:	4b0c      	ldr	r3, [pc, #48]	; (82514 <udd_ep_run+0xf0>)
   824e2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   824e6:	7d23      	ldrb	r3, [r4, #20]
   824e8:	f361 0341 	bfi	r3, r1, #1, #1
   824ec:	7523      	strb	r3, [r4, #20]
	udd_ep_trans_done(ep);
   824ee:	4b0b      	ldr	r3, [pc, #44]	; (8251c <udd_ep_run+0xf8>)
   824f0:	4798      	blx	r3
	return true;
   824f2:	2001      	movs	r0, #1
   824f4:	e002      	b.n	824fc <udd_ep_run+0xd8>
		return false;
   824f6:	2000      	movs	r0, #0
   824f8:	4770      	bx	lr
		return false; // Endpoint is halted
   824fa:	2000      	movs	r0, #0
}
   824fc:	b003      	add	sp, #12
   824fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   82500:	2000      	movs	r0, #0
   82502:	e7fb      	b.n	824fc <udd_ep_run+0xd8>
   82504:	2000      	movs	r0, #0
   82506:	e7f9      	b.n	824fc <udd_ep_run+0xd8>
		return false; // Job already on going
   82508:	2000      	movs	r0, #0
   8250a:	e7f7      	b.n	824fc <udd_ep_run+0xd8>
   8250c:	400ac000 	.word	0x400ac000
   82510:	400ac1c0 	.word	0x400ac1c0
   82514:	20070da8 	.word	0x20070da8
   82518:	20070270 	.word	0x20070270
   8251c:	000816b5 	.word	0x000816b5

00082520 <udd_ep_alloc>:
{
   82520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82524:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   82526:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   8252a:	2c03      	cmp	r4, #3
   8252c:	f200 80df 	bhi.w	826ee <udd_ep_alloc+0x1ce>
	if (Is_udd_endpoint_enabled(ep)) {
   82530:	4b74      	ldr	r3, [pc, #464]	; (82704 <udd_ep_alloc+0x1e4>)
   82532:	69dd      	ldr	r5, [r3, #28]
   82534:	2301      	movs	r3, #1
   82536:	40a3      	lsls	r3, r4
   82538:	402b      	ands	r3, r5
   8253a:	f040 80dd 	bne.w	826f8 <udd_ep_alloc+0x1d8>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8253e:	f011 0503 	ands.w	r5, r1, #3
   82542:	f000 80db 	beq.w	826fc <udd_ep_alloc+0x1dc>
   82546:	2d02      	cmp	r5, #2
   82548:	d920      	bls.n	8258c <udd_ep_alloc+0x6c>
   8254a:	2d03      	cmp	r5, #3
   8254c:	f040 80d6 	bne.w	826fc <udd_ep_alloc+0x1dc>
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   82550:	f04f 0e00 	mov.w	lr, #0
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82554:	4e6c      	ldr	r6, [pc, #432]	; (82708 <udd_ep_alloc+0x1e8>)
   82556:	eb06 0584 	add.w	r5, r6, r4, lsl #2
   8255a:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
   8255e:	f427 57cb 	bic.w	r7, r7, #6496	; 0x1960
   82562:	f027 071c 	bic.w	r7, r7, #28
   82566:	02c9      	lsls	r1, r1, #11
   82568:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   8256c:	b240      	sxtb	r0, r0
   8256e:	2800      	cmp	r0, #0
   82570:	bfb8      	it	lt
   82572:	f44f 7380 	movlt.w	r3, #256	; 0x100
   82576:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
   8257a:	b280      	uxth	r0, r0
   8257c:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
   82580:	d307      	bcc.n	82592 <udd_ep_alloc+0x72>
   82582:	2a08      	cmp	r2, #8
   82584:	d924      	bls.n	825d0 <udd_ep_alloc+0xb0>
   82586:	0052      	lsls	r2, r2, #1
   82588:	3a01      	subs	r2, #1
   8258a:	e004      	b.n	82596 <udd_ep_alloc+0x76>
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   8258c:	f04f 0e01 	mov.w	lr, #1
   82590:	e7e0      	b.n	82554 <udd_ep_alloc+0x34>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82592:	f240 72ff 	movw	r2, #2047	; 0x7ff
   82596:	fab2 f282 	clz	r2, r2
   8259a:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
   8259e:	4319      	orrs	r1, r3
   825a0:	f1c2 031c 	rsb	r3, r2, #28
   825a4:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
   825a8:	f423 63d0 	bic.w	r3, r3, #1664	; 0x680
   825ac:	f023 0303 	bic.w	r3, r3, #3
   825b0:	04db      	lsls	r3, r3, #19
   825b2:	0cdb      	lsrs	r3, r3, #19
   825b4:	433b      	orrs	r3, r7
   825b6:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	ep_allocated = 1 << ep;
   825ba:	2701      	movs	r7, #1
   825bc:	40a7      	lsls	r7, r4
   825be:	b2bf      	uxth	r7, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   825c0:	2c02      	cmp	r4, #2
   825c2:	d81c      	bhi.n	825fe <udd_ep_alloc+0xde>
   825c4:	4a51      	ldr	r2, [pc, #324]	; (8270c <udd_ep_alloc+0x1ec>)
   825c6:	2303      	movs	r3, #3
		if (Is_udd_endpoint_enabled(i)) {
   825c8:	484e      	ldr	r0, [pc, #312]	; (82704 <udd_ep_alloc+0x1e4>)
   825ca:	f04f 0e01 	mov.w	lr, #1
   825ce:	e006      	b.n	825de <udd_ep_alloc+0xbe>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   825d0:	220f      	movs	r2, #15
   825d2:	e7e0      	b.n	82596 <udd_ep_alloc+0x76>
   825d4:	3b01      	subs	r3, #1
   825d6:	3a04      	subs	r2, #4
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   825d8:	b2d9      	uxtb	r1, r3
   825da:	428c      	cmp	r4, r1
   825dc:	d20f      	bcs.n	825fe <udd_ep_alloc+0xde>
		if (Is_udd_endpoint_enabled(i)) {
   825de:	69c6      	ldr	r6, [r0, #28]
   825e0:	fa0e f103 	lsl.w	r1, lr, r3
   825e4:	420e      	tst	r6, r1
   825e6:	d0f5      	beq.n	825d4 <udd_ep_alloc+0xb4>
			ep_allocated |= 1 << i;
   825e8:	430f      	orrs	r7, r1
   825ea:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   825ec:	69c6      	ldr	r6, [r0, #28]
   825ee:	ea26 0101 	bic.w	r1, r6, r1
   825f2:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
   825f4:	6811      	ldr	r1, [r2, #0]
   825f6:	f021 0102 	bic.w	r1, r1, #2
   825fa:	6011      	str	r1, [r2, #0]
   825fc:	e7ea      	b.n	825d4 <udd_ep_alloc+0xb4>
   825fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   82602:	4e43      	ldr	r6, [pc, #268]	; (82710 <udd_ep_alloc+0x1f0>)
   82604:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
			bool b_restart = ptr_job->busy;
   82608:	f8df 9104 	ldr.w	r9, [pc, #260]	; 82710 <udd_ep_alloc+0x1f0>
			udd_enable_endpoint(i);
   8260c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 82704 <udd_ep_alloc+0x1e4>
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   82610:	f8df a100 	ldr.w	sl, [pc, #256]	; 82714 <udd_ep_alloc+0x1f4>
   82614:	e01d      	b.n	82652 <udd_ep_alloc+0x132>
				if (NULL == ptr_job->call_trans) {
   82616:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   8261a:	4a3d      	ldr	r2, [pc, #244]	; (82710 <udd_ep_alloc+0x1f0>)
   8261c:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   82620:	2c00      	cmp	r4, #0
   82622:	d06d      	beq.n	82700 <udd_ep_alloc+0x1e0>
				if (Is_udd_endpoint_in(i)) {
   82624:	682b      	ldr	r3, [r5, #0]
   82626:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
   8262a:	bf18      	it	ne
   8262c:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   82630:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   82634:	4b36      	ldr	r3, [pc, #216]	; (82710 <udd_ep_alloc+0x1f0>)
   82636:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   8263a:	4602      	mov	r2, r0
   8263c:	68c9      	ldr	r1, [r1, #12]
   8263e:	2001      	movs	r0, #1
   82640:	47a0      	blx	r4
				return false;
   82642:	2300      	movs	r3, #0
   82644:	e054      	b.n	826f0 <udd_ep_alloc+0x1d0>
   82646:	3401      	adds	r4, #1
   82648:	3504      	adds	r5, #4
   8264a:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8264c:	b2e3      	uxtb	r3, r4
   8264e:	2b03      	cmp	r3, #3
   82650:	d84b      	bhi.n	826ea <udd_ep_alloc+0x1ca>
   82652:	b2e0      	uxtb	r0, r4
		if (ep_allocated & (1 << i)) {
   82654:	fa47 f304 	asr.w	r3, r7, r4
   82658:	f013 0f01 	tst.w	r3, #1
   8265c:	d0f3      	beq.n	82646 <udd_ep_alloc+0x126>
   8265e:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
   82660:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   82664:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   82668:	f893 e014 	ldrb.w	lr, [r3, #20]
   8266c:	f00e 0201 	and.w	r2, lr, #1
			ptr_job->busy = false;
   82670:	f36f 0e00 	bfc	lr, #0, #1
   82674:	f883 e014 	strb.w	lr, [r3, #20]
			udd_allocate_memory(i);
   82678:	682b      	ldr	r3, [r5, #0]
   8267a:	f043 0302 	orr.w	r3, r3, #2
   8267e:	602b      	str	r3, [r5, #0]
			udd_enable_endpoint(i);
   82680:	f8d8 e01c 	ldr.w	lr, [r8, #28]
   82684:	2301      	movs	r3, #1
   82686:	40a3      	lsls	r3, r4
   82688:	ea43 030e 	orr.w	r3, r3, lr
   8268c:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   82690:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82692:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   82696:	d0be      	beq.n	82616 <udd_ep_alloc+0xf6>
			udd_enable_endpoint_bank_autoswitch(i);
   82698:	682b      	ldr	r3, [r5, #0]
   8269a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8269e:	602b      	str	r3, [r5, #0]
			if (b_restart) {
   826a0:	2a00      	cmp	r2, #0
   826a2:	d0d0      	beq.n	82646 <udd_ep_alloc+0x126>
				ptr_job->buf_cnt -= ptr_job->buf_load;
   826a4:	f856 3c0c 	ldr.w	r3, [r6, #-12]
   826a8:	f856 2c08 	ldr.w	r2, [r6, #-8]
   826ac:	1a9a      	subs	r2, r3, r2
   826ae:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   826b2:	682b      	ldr	r3, [r5, #0]
   826b4:	f413 7f80 	tst.w	r3, #256	; 0x100
   826b8:	bf18      	it	ne
   826ba:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
   826be:	f856 bc10 	ldr.w	fp, [r6, #-16]
   826c2:	f856 cc14 	ldr.w	ip, [r6, #-20]
						ptr_job->b_shortpacket,
   826c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   826ca:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
   826ce:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   826d0:	f856 3c18 	ldr.w	r3, [r6, #-24]
   826d4:	9300      	str	r3, [sp, #0]
   826d6:	ebab 0302 	sub.w	r3, fp, r2
   826da:	4462      	add	r2, ip
   826dc:	f3c1 0140 	ubfx	r1, r1, #1, #1
   826e0:	47d0      	blx	sl
				if (!b_restart) {
   826e2:	4603      	mov	r3, r0
   826e4:	2800      	cmp	r0, #0
   826e6:	d1ae      	bne.n	82646 <udd_ep_alloc+0x126>
   826e8:	e002      	b.n	826f0 <udd_ep_alloc+0x1d0>
	return true;
   826ea:	2301      	movs	r3, #1
   826ec:	e000      	b.n	826f0 <udd_ep_alloc+0x1d0>
		return false;
   826ee:	2300      	movs	r3, #0
}
   826f0:	4618      	mov	r0, r3
   826f2:	b003      	add	sp, #12
   826f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   826f8:	2300      	movs	r3, #0
   826fa:	e7f9      	b.n	826f0 <udd_ep_alloc+0x1d0>
		return false;
   826fc:	2300      	movs	r3, #0
   826fe:	e7f7      	b.n	826f0 <udd_ep_alloc+0x1d0>
					return false;
   82700:	2300      	movs	r3, #0
   82702:	e7f5      	b.n	826f0 <udd_ep_alloc+0x1d0>
   82704:	400ac000 	.word	0x400ac000
   82708:	400ac100 	.word	0x400ac100
   8270c:	400ac10c 	.word	0x400ac10c
   82710:	20070da8 	.word	0x20070da8
   82714:	00082425 	.word	0x00082425

00082718 <udd_ep_abort>:
{
   82718:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8271a:	f000 020f 	and.w	r2, r0, #15
		udd_disable_endpoint_dma_interrupt(ep_index);
   8271e:	1e54      	subs	r4, r2, #1
   82720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   82724:	40a3      	lsls	r3, r4
   82726:	4916      	ldr	r1, [pc, #88]	; (82780 <udd_ep_abort+0x68>)
   82728:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   8272a:	4b16      	ldr	r3, [pc, #88]	; (82784 <udd_ep_abort+0x6c>)
   8272c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   82730:	2500      	movs	r5, #0
   82732:	609d      	str	r5, [r3, #8]
	udd_disable_endpoint_interrupt(ep_index);
   82734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82738:	4093      	lsls	r3, r2
   8273a:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   8273c:	f010 0f80 	tst.w	r0, #128	; 0x80
   82740:	d108      	bne.n	82754 <udd_ep_abort+0x3c>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82742:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   82746:	2101      	movs	r1, #1
   82748:	480f      	ldr	r0, [pc, #60]	; (82788 <udd_ep_abort+0x70>)
   8274a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   8274e:	4b0f      	ldr	r3, [pc, #60]	; (8278c <udd_ep_abort+0x74>)
   82750:	4798      	blx	r3
   82752:	bd70      	pop	{r4, r5, r6, pc}
		while(udd_nb_busy_bank(ep_index)) {
   82754:	0093      	lsls	r3, r2, #2
   82756:	480e      	ldr	r0, [pc, #56]	; (82790 <udd_ep_abort+0x78>)
   82758:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
   8275a:	4d0e      	ldr	r5, [pc, #56]	; (82794 <udd_ep_abort+0x7c>)
   8275c:	441d      	add	r5, r3
   8275e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   82762:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   82766:	4419      	add	r1, r3
   82768:	e004      	b.n	82774 <udd_ep_abort+0x5c>
			udd_kill_last_in_bank(ep_index);
   8276a:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
   8276c:	680b      	ldr	r3, [r1, #0]
   8276e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   82772:	d1fb      	bne.n	8276c <udd_ep_abort+0x54>
		while(udd_nb_busy_bank(ep_index)) {
   82774:	6803      	ldr	r3, [r0, #0]
   82776:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   8277a:	d1f6      	bne.n	8276a <udd_ep_abort+0x52>
   8277c:	e7e1      	b.n	82742 <udd_ep_abort+0x2a>
   8277e:	bf00      	nop
   82780:	400ac000 	.word	0x400ac000
   82784:	400ac300 	.word	0x400ac300
   82788:	20070da8 	.word	0x20070da8
   8278c:	0008167d 	.word	0x0008167d
   82790:	400ac130 	.word	0x400ac130
   82794:	400ac1f0 	.word	0x400ac1f0

00082798 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   82798:	3801      	subs	r0, #1
   8279a:	2802      	cmp	r0, #2
   8279c:	d815      	bhi.n	827ca <_write+0x32>
{
   8279e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   827a2:	460e      	mov	r6, r1
   827a4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   827a6:	b19a      	cbz	r2, 827d0 <_write+0x38>
   827a8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   827aa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 827e4 <_write+0x4c>
   827ae:	4f0c      	ldr	r7, [pc, #48]	; (827e0 <_write+0x48>)
   827b0:	f8d8 0000 	ldr.w	r0, [r8]
   827b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   827b8:	683b      	ldr	r3, [r7, #0]
   827ba:	4798      	blx	r3
   827bc:	2800      	cmp	r0, #0
   827be:	db0a      	blt.n	827d6 <_write+0x3e>
   827c0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   827c2:	3c01      	subs	r4, #1
   827c4:	d1f4      	bne.n	827b0 <_write+0x18>
   827c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   827ca:	f04f 30ff 	mov.w	r0, #4294967295
   827ce:	4770      	bx	lr
	for (; len != 0; --len) {
   827d0:	4610      	mov	r0, r2
   827d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   827d6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   827da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   827de:	bf00      	nop
   827e0:	20070fc0 	.word	0x20070fc0
   827e4:	20070fc4 	.word	0x20070fc4

000827e8 <efc_get_wait_state>:
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   827e8:	6800      	ldr	r0, [r0, #0]
}
   827ea:	f3c0 2003 	ubfx	r0, r0, #8, #4
   827ee:	4770      	bx	lr

000827f0 <efc_init>:
{
   827f0:	b508      	push	{r3, lr}
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   827f2:	0212      	lsls	r2, r2, #8
   827f4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   827f8:	4311      	orrs	r1, r2
   827fa:	4b02      	ldr	r3, [pc, #8]	; (82804 <efc_init+0x14>)
   827fc:	4798      	blx	r3
}
   827fe:	2000      	movs	r0, #0
   82800:	bd08      	pop	{r3, pc}
   82802:	bf00      	nop
   82804:	20070085 	.word	0x20070085

00082808 <efc_set_wait_state>:
{
   82808:	b508      	push	{r3, lr}
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   8280a:	6803      	ldr	r3, [r0, #0]
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   8280c:	0209      	lsls	r1, r1, #8
   8280e:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   82812:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   82816:	4319      	orrs	r1, r3
   82818:	4b01      	ldr	r3, [pc, #4]	; (82820 <efc_set_wait_state+0x18>)
   8281a:	4798      	blx	r3
   8281c:	bd08      	pop	{r3, pc}
   8281e:	bf00      	nop
   82820:	20070085 	.word	0x20070085

00082824 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   82824:	f1a1 030e 	sub.w	r3, r1, #14
   82828:	2b01      	cmp	r3, #1
   8282a:	d802      	bhi.n	82832 <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
   8282c:	f04f 30ff 	mov.w	r0, #4294967295
   82830:	4770      	bx	lr
{
   82832:	b510      	push	{r4, lr}
   82834:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82836:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8283a:	fab3 f383 	clz	r3, r3
   8283e:	095b      	lsrs	r3, r3, #5
   82840:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   82842:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82844:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82848:	2400      	movs	r4, #0
   8284a:	4b0b      	ldr	r3, [pc, #44]	; (82878 <efc_perform_command+0x54>)
   8284c:	701c      	strb	r4, [r3, #0]
	return flags;
   8284e:	9c01      	ldr	r4, [sp, #4]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82850:	0212      	lsls	r2, r2, #8
   82852:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   82856:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   8285a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   8285e:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   82860:	4311      	orrs	r1, r2
   82862:	4b06      	ldr	r3, [pc, #24]	; (8287c <efc_perform_command+0x58>)
   82864:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   82866:	b12c      	cbz	r4, 82874 <efc_perform_command+0x50>
		cpu_irq_enable();
   82868:	2201      	movs	r2, #1
   8286a:	4b03      	ldr	r3, [pc, #12]	; (82878 <efc_perform_command+0x54>)
   8286c:	701a      	strb	r2, [r3, #0]
   8286e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82872:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   82874:	b002      	add	sp, #8
   82876:	bd10      	pop	{r4, pc}
   82878:	20070270 	.word	0x20070270
   8287c:	20070089 	.word	0x20070089

00082880 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   82880:	b430      	push	{r4, r5}
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   82882:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
   82886:	d30d      	bcc.n	828a4 <translate_address+0x24>
		p_efc = EFC1;
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   82888:	f5a1 2440 	sub.w	r4, r1, #786432	; 0xc0000
   8288c:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   82890:	b2c9      	uxtb	r1, r1
		p_efc = EFC1;
   82892:	4d08      	ldr	r5, [pc, #32]	; (828b4 <translate_address+0x34>)
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   82894:	b100      	cbz	r0, 82898 <translate_address+0x18>
		*pp_efc = p_efc;
   82896:	6005      	str	r5, [r0, #0]
	}

	if (pus_page) {
   82898:	b102      	cbz	r2, 8289c <translate_address+0x1c>
		*pus_page = us_page;
   8289a:	8014      	strh	r4, [r2, #0]
	}

	if (pus_offset) {
   8289c:	b103      	cbz	r3, 828a0 <translate_address+0x20>
		*pus_offset = us_offset;
   8289e:	8019      	strh	r1, [r3, #0]
	}
}
   828a0:	bc30      	pop	{r4, r5}
   828a2:	4770      	bx	lr
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   828a4:	f5a1 2400 	sub.w	r4, r1, #524288	; 0x80000
   828a8:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   828ac:	b2c9      	uxtb	r1, r1
		p_efc = EFC0;
   828ae:	4d02      	ldr	r5, [pc, #8]	; (828b8 <translate_address+0x38>)
   828b0:	e7f0      	b.n	82894 <translate_address+0x14>
   828b2:	bf00      	nop
   828b4:	400e0c00 	.word	0x400e0c00
   828b8:	400e0a00 	.word	0x400e0a00

000828bc <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   828bc:	b570      	push	{r4, r5, r6, lr}
   828be:	4605      	mov	r5, r0
   828c0:	460e      	mov	r6, r1
	efc_init(EFC, ul_mode, ul_fws);
   828c2:	460a      	mov	r2, r1
   828c4:	4601      	mov	r1, r0
   828c6:	4804      	ldr	r0, [pc, #16]	; (828d8 <flash_init+0x1c>)
   828c8:	4c04      	ldr	r4, [pc, #16]	; (828dc <flash_init+0x20>)
   828ca:	47a0      	blx	r4

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   828cc:	4632      	mov	r2, r6
   828ce:	4629      	mov	r1, r5
   828d0:	4803      	ldr	r0, [pc, #12]	; (828e0 <flash_init+0x24>)
   828d2:	47a0      	blx	r4
#endif

	return FLASH_RC_OK;
}
   828d4:	2000      	movs	r0, #0
   828d6:	bd70      	pop	{r4, r5, r6, pc}
   828d8:	400e0a00 	.word	0x400e0a00
   828dc:	000827f1 	.word	0x000827f1
   828e0:	400e0c00 	.word	0x400e0c00

000828e4 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   828e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   828e8:	b085      	sub	sp, #20
   828ea:	468b      	mov	fp, r1
   828ec:	4692      	mov	sl, r2
   828ee:	9300      	str	r3, [sp, #0]
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   828f0:	ab02      	add	r3, sp, #8
   828f2:	f10d 020a 	add.w	r2, sp, #10
   828f6:	4601      	mov	r1, r0
   828f8:	a803      	add	r0, sp, #12
   828fa:	4c33      	ldr	r4, [pc, #204]	; (829c8 <flash_write+0xe4>)
   828fc:	47a0      	blx	r4

#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   828fe:	9803      	ldr	r0, [sp, #12]
   82900:	4b32      	ldr	r3, [pc, #200]	; (829cc <flash_write+0xe8>)
   82902:	4798      	blx	r3
   82904:	9001      	str	r0, [sp, #4]
	efc_set_wait_state(p_efc, 6);
   82906:	2106      	movs	r1, #6
   82908:	9803      	ldr	r0, [sp, #12]
   8290a:	4b31      	ldr	r3, [pc, #196]	; (829d0 <flash_write+0xec>)
   8290c:	4798      	blx	r3
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
   8290e:	f1ba 0f00 	cmp.w	sl, #0
   82912:	d050      	beq.n	829b6 <flash_write+0xd2>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   82914:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 829dc <flash_write+0xf8>
   82918:	f108 05fc 	add.w	r5, r8, #252	; 0xfc
   8291c:	e013      	b.n	82946 <flash_write+0x62>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   8291e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   82922:	2101      	movs	r1, #1
   82924:	9803      	ldr	r0, [sp, #12]
   82926:	4b2b      	ldr	r3, [pc, #172]	; (829d4 <flash_write+0xf0>)
   82928:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
   8292a:	2800      	cmp	r0, #0
   8292c:	d148      	bne.n	829c0 <flash_write+0xdc>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   8292e:	44bb      	add	fp, r7
		ul_size -= writeSize;
		us_page++;
   82930:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   82934:	3301      	adds	r3, #1
   82936:	f8ad 300a 	strh.w	r3, [sp, #10]
		us_offset = 0;
   8293a:	2300      	movs	r3, #0
   8293c:	f8ad 3008 	strh.w	r3, [sp, #8]
	while (ul_size > 0) {
   82940:	ebba 0a07 	subs.w	sl, sl, r7
   82944:	d037      	beq.n	829b6 <flash_write+0xd2>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   82946:	f8bd 6008 	ldrh.w	r6, [sp, #8]
   8294a:	f5c6 7780 	rsb	r7, r6, #256	; 0x100
   8294e:	4557      	cmp	r7, sl
   82950:	bf28      	it	cs
   82952:	4657      	movcs	r7, sl
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   82954:	f8bd 300a 	ldrh.w	r3, [sp, #10]
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   82958:	9a03      	ldr	r2, [sp, #12]
   8295a:	491f      	ldr	r1, [pc, #124]	; (829d8 <flash_write+0xf4>)
   8295c:	428a      	cmp	r2, r1
   8295e:	bf0c      	ite	eq
   82960:	f503 6300 	addeq.w	r3, r3, #2048	; 0x800
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   82964:	f503 6340 	addne.w	r3, r3, #3072	; 0xc00
   82968:	021c      	lsls	r4, r3, #8
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   8296a:	4632      	mov	r2, r6
   8296c:	4621      	mov	r1, r4
   8296e:	4640      	mov	r0, r8
   82970:	f8df 906c 	ldr.w	r9, [pc, #108]	; 829e0 <flash_write+0xfc>
   82974:	47c8      	blx	r9
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   82976:	463a      	mov	r2, r7
   82978:	4659      	mov	r1, fp
   8297a:	eb08 0006 	add.w	r0, r8, r6
   8297e:	47c8      	blx	r9
		memcpy(puc_page_buffer + us_offset + writeSize,
   82980:	19f0      	adds	r0, r6, r7
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   82982:	f5c6 7280 	rsb	r2, r6, #256	; 0x100
   82986:	1bd2      	subs	r2, r2, r7
		memcpy(puc_page_buffer + us_offset + writeSize,
   82988:	b292      	uxth	r2, r2
   8298a:	1901      	adds	r1, r0, r4
   8298c:	4440      	add	r0, r8
   8298e:	47c8      	blx	r9
   82990:	f1a8 0304 	sub.w	r3, r8, #4
   82994:	3c04      	subs	r4, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   82996:	f853 2f04 	ldr.w	r2, [r3, #4]!
   8299a:	f844 2f04 	str.w	r2, [r4, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   8299e:	42ab      	cmp	r3, r5
   829a0:	d1f9      	bne.n	82996 <flash_write+0xb2>
		if (ul_erase_flag) {
   829a2:	9b00      	ldr	r3, [sp, #0]
   829a4:	2b00      	cmp	r3, #0
   829a6:	d0ba      	beq.n	8291e <flash_write+0x3a>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   829a8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   829ac:	2103      	movs	r1, #3
   829ae:	9803      	ldr	r0, [sp, #12]
   829b0:	4b08      	ldr	r3, [pc, #32]	; (829d4 <flash_write+0xf0>)
   829b2:	4798      	blx	r3
   829b4:	e7b9      	b.n	8292a <flash_write+0x46>
	}

#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   829b6:	9901      	ldr	r1, [sp, #4]
   829b8:	9803      	ldr	r0, [sp, #12]
   829ba:	4b05      	ldr	r3, [pc, #20]	; (829d0 <flash_write+0xec>)
   829bc:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   829be:	2000      	movs	r0, #0
}
   829c0:	b005      	add	sp, #20
   829c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829c6:	bf00      	nop
   829c8:	00082881 	.word	0x00082881
   829cc:	000827e9 	.word	0x000827e9
   829d0:	00082809 	.word	0x00082809
   829d4:	00082825 	.word	0x00082825
   829d8:	400e0a00 	.word	0x400e0a00
   829dc:	20070df0 	.word	0x20070df0
   829e0:	000839ed 	.word	0x000839ed

000829e4 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   829e4:	b530      	push	{r4, r5, lr}
   829e6:	b083      	sub	sp, #12
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   829e8:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
   829ec:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   829f0:	ea6f 3491 	mvn.w	r4, r1, lsr #14
   829f4:	ea6f 3484 	mvn.w	r4, r4, lsl #14
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);

	if (pul_actual_start != NULL) {
   829f8:	b102      	cbz	r2, 829fc <flash_lock+0x18>
		*pul_actual_start = ul_actual_start;
   829fa:	6010      	str	r0, [r2, #0]
	}

	if (pul_actual_end != NULL) {
   829fc:	b103      	cbz	r3, 82a00 <flash_lock+0x1c>
		*pul_actual_end = ul_actual_end;
   829fe:	601c      	str	r4, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   82a00:	2300      	movs	r3, #0
   82a02:	f10d 0202 	add.w	r2, sp, #2
   82a06:	4601      	mov	r1, r0
   82a08:	a801      	add	r0, sp, #4
   82a0a:	4d11      	ldr	r5, [pc, #68]	; (82a50 <flash_lock+0x6c>)
   82a0c:	47a8      	blx	r5
	translate_address(0, ul_actual_end, &us_end_page, 0);
   82a0e:	2300      	movs	r3, #0
   82a10:	466a      	mov	r2, sp
   82a12:	4621      	mov	r1, r4
   82a14:	4618      	mov	r0, r3
   82a16:	47a8      	blx	r5

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   82a18:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   82a1c:	f8bd 3000 	ldrh.w	r3, [sp]
   82a20:	4293      	cmp	r3, r2
   82a22:	d913      	bls.n	82a4c <flash_lock+0x68>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   82a24:	2508      	movs	r5, #8
   82a26:	4c0b      	ldr	r4, [pc, #44]	; (82a54 <flash_lock+0x70>)
   82a28:	4629      	mov	r1, r5
   82a2a:	9801      	ldr	r0, [sp, #4]
   82a2c:	47a0      	blx	r4

		if (ul_error) {
   82a2e:	4601      	mov	r1, r0
   82a30:	b948      	cbnz	r0, 82a46 <flash_lock+0x62>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   82a32:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   82a36:	3240      	adds	r2, #64	; 0x40
   82a38:	b292      	uxth	r2, r2
   82a3a:	f8ad 2002 	strh.w	r2, [sp, #2]
	while (us_start_page < us_end_page) {
   82a3e:	f8bd 3000 	ldrh.w	r3, [sp]
   82a42:	4293      	cmp	r3, r2
   82a44:	d8f0      	bhi.n	82a28 <flash_lock+0x44>
	}

	return FLASH_RC_OK;
}
   82a46:	4608      	mov	r0, r1
   82a48:	b003      	add	sp, #12
   82a4a:	bd30      	pop	{r4, r5, pc}
	return FLASH_RC_OK;
   82a4c:	2100      	movs	r1, #0
   82a4e:	e7fa      	b.n	82a46 <flash_lock+0x62>
   82a50:	00082881 	.word	0x00082881
   82a54:	00082825 	.word	0x00082825

00082a58 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   82a58:	b530      	push	{r4, r5, lr}
   82a5a:	b083      	sub	sp, #12
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   82a5c:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
   82a60:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   82a64:	ea6f 3491 	mvn.w	r4, r1, lsr #14
   82a68:	ea6f 3484 	mvn.w	r4, r4, lsl #14
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
   82a6c:	b102      	cbz	r2, 82a70 <flash_unlock+0x18>
		*pul_actual_start = ul_actual_start;
   82a6e:	6010      	str	r0, [r2, #0]
	}
	if (pul_actual_end != NULL) {
   82a70:	b103      	cbz	r3, 82a74 <flash_unlock+0x1c>
		*pul_actual_end = ul_actual_end;
   82a72:	601c      	str	r4, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   82a74:	2300      	movs	r3, #0
   82a76:	f10d 0202 	add.w	r2, sp, #2
   82a7a:	4601      	mov	r1, r0
   82a7c:	a801      	add	r0, sp, #4
   82a7e:	4d11      	ldr	r5, [pc, #68]	; (82ac4 <flash_unlock+0x6c>)
   82a80:	47a8      	blx	r5
	translate_address(0, ul_actual_end, &us_end_page, 0);
   82a82:	2300      	movs	r3, #0
   82a84:	466a      	mov	r2, sp
   82a86:	4621      	mov	r1, r4
   82a88:	4618      	mov	r0, r3
   82a8a:	47a8      	blx	r5

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   82a8c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   82a90:	f8bd 3000 	ldrh.w	r3, [sp]
   82a94:	4293      	cmp	r3, r2
   82a96:	d913      	bls.n	82ac0 <flash_unlock+0x68>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   82a98:	2509      	movs	r5, #9
   82a9a:	4c0b      	ldr	r4, [pc, #44]	; (82ac8 <flash_unlock+0x70>)
   82a9c:	4629      	mov	r1, r5
   82a9e:	9801      	ldr	r0, [sp, #4]
   82aa0:	47a0      	blx	r4
				us_start_page);
		if (ul_error) {
   82aa2:	4601      	mov	r1, r0
   82aa4:	b948      	cbnz	r0, 82aba <flash_unlock+0x62>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   82aa6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   82aaa:	3240      	adds	r2, #64	; 0x40
   82aac:	b292      	uxth	r2, r2
   82aae:	f8ad 2002 	strh.w	r2, [sp, #2]
	while (us_start_page < us_end_page) {
   82ab2:	f8bd 3000 	ldrh.w	r3, [sp]
   82ab6:	4293      	cmp	r3, r2
   82ab8:	d8f0      	bhi.n	82a9c <flash_unlock+0x44>
	}

	return FLASH_RC_OK;
}
   82aba:	4608      	mov	r0, r1
   82abc:	b003      	add	sp, #12
   82abe:	bd30      	pop	{r4, r5, pc}
	return FLASH_RC_OK;
   82ac0:	2100      	movs	r1, #0
   82ac2:	e7fa      	b.n	82aba <flash_unlock+0x62>
   82ac4:	00082881 	.word	0x00082881
   82ac8:	00082825 	.word	0x00082825

00082acc <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   82acc:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   82ace:	4b04      	ldr	r3, [pc, #16]	; (82ae0 <sysclk_enable_usb+0x14>)
   82ad0:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   82ad2:	2000      	movs	r0, #0
   82ad4:	4b03      	ldr	r3, [pc, #12]	; (82ae4 <sysclk_enable_usb+0x18>)
   82ad6:	4798      	blx	r3
		pmc_enable_udpck();
   82ad8:	4b03      	ldr	r3, [pc, #12]	; (82ae8 <sysclk_enable_usb+0x1c>)
   82ada:	4798      	blx	r3
   82adc:	bd08      	pop	{r3, pc}
   82ade:	bf00      	nop
   82ae0:	00082f65 	.word	0x00082f65
   82ae4:	00082f9d 	.word	0x00082f9d
   82ae8:	00082fb1 	.word	0x00082fb1

00082aec <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82aec:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82aee:	480e      	ldr	r0, [pc, #56]	; (82b28 <sysclk_init+0x3c>)
   82af0:	4b0e      	ldr	r3, [pc, #56]	; (82b2c <sysclk_init+0x40>)
   82af2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82af4:	213e      	movs	r1, #62	; 0x3e
   82af6:	2000      	movs	r0, #0
   82af8:	4b0d      	ldr	r3, [pc, #52]	; (82b30 <sysclk_init+0x44>)
   82afa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82afc:	4c0d      	ldr	r4, [pc, #52]	; (82b34 <sysclk_init+0x48>)
   82afe:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82b00:	2800      	cmp	r0, #0
   82b02:	d0fc      	beq.n	82afe <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82b04:	4b0c      	ldr	r3, [pc, #48]	; (82b38 <sysclk_init+0x4c>)
   82b06:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82b08:	4a0c      	ldr	r2, [pc, #48]	; (82b3c <sysclk_init+0x50>)
   82b0a:	4b0d      	ldr	r3, [pc, #52]	; (82b40 <sysclk_init+0x54>)
   82b0c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82b0e:	4c0d      	ldr	r4, [pc, #52]	; (82b44 <sysclk_init+0x58>)
   82b10:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82b12:	2800      	cmp	r0, #0
   82b14:	d0fc      	beq.n	82b10 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82b16:	2010      	movs	r0, #16
   82b18:	4b0b      	ldr	r3, [pc, #44]	; (82b48 <sysclk_init+0x5c>)
   82b1a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82b1c:	4b0b      	ldr	r3, [pc, #44]	; (82b4c <sysclk_init+0x60>)
   82b1e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82b20:	4801      	ldr	r0, [pc, #4]	; (82b28 <sysclk_init+0x3c>)
   82b22:	4b02      	ldr	r3, [pc, #8]	; (82b2c <sysclk_init+0x40>)
   82b24:	4798      	blx	r3
   82b26:	bd10      	pop	{r4, pc}
   82b28:	0501bd00 	.word	0x0501bd00
   82b2c:	20070149 	.word	0x20070149
   82b30:	00082ee1 	.word	0x00082ee1
   82b34:	00082f35 	.word	0x00082f35
   82b38:	00082f45 	.word	0x00082f45
   82b3c:	200d3f01 	.word	0x200d3f01
   82b40:	400e0600 	.word	0x400e0600
   82b44:	00082f55 	.word	0x00082f55
   82b48:	00082e7d 	.word	0x00082e7d
   82b4c:	0008307d 	.word	0x0008307d

00082b50 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82b50:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82b52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82b56:	4b16      	ldr	r3, [pc, #88]	; (82bb0 <board_init+0x60>)
   82b58:	605a      	str	r2, [r3, #4]
   82b5a:	200b      	movs	r0, #11
   82b5c:	4c15      	ldr	r4, [pc, #84]	; (82bb4 <board_init+0x64>)
   82b5e:	47a0      	blx	r4
   82b60:	200c      	movs	r0, #12
   82b62:	47a0      	blx	r4
   82b64:	200d      	movs	r0, #13
   82b66:	47a0      	blx	r4
   82b68:	200e      	movs	r0, #14
   82b6a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82b6c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82b70:	203b      	movs	r0, #59	; 0x3b
   82b72:	4c11      	ldr	r4, [pc, #68]	; (82bb8 <board_init+0x68>)
   82b74:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82b76:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82b7a:	2055      	movs	r0, #85	; 0x55
   82b7c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82b7e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82b82:	2056      	movs	r0, #86	; 0x56
   82b84:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82b86:	490d      	ldr	r1, [pc, #52]	; (82bbc <board_init+0x6c>)
   82b88:	2068      	movs	r0, #104	; 0x68
   82b8a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82b8c:	490c      	ldr	r1, [pc, #48]	; (82bc0 <board_init+0x70>)
   82b8e:	205c      	movs	r0, #92	; 0x5c
   82b90:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82b92:	4a0c      	ldr	r2, [pc, #48]	; (82bc4 <board_init+0x74>)
   82b94:	f44f 7140 	mov.w	r1, #768	; 0x300
   82b98:	480b      	ldr	r0, [pc, #44]	; (82bc8 <board_init+0x78>)
   82b9a:	4b0c      	ldr	r3, [pc, #48]	; (82bcc <board_init+0x7c>)
   82b9c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82b9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82ba2:	202b      	movs	r0, #43	; 0x2b
   82ba4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82ba6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82baa:	202a      	movs	r0, #42	; 0x2a
   82bac:	47a0      	blx	r4
   82bae:	bd10      	pop	{r4, pc}
   82bb0:	400e1a50 	.word	0x400e1a50
   82bb4:	00082f7d 	.word	0x00082f7d
   82bb8:	00082c71 	.word	0x00082c71
   82bbc:	28000079 	.word	0x28000079
   82bc0:	28000001 	.word	0x28000001
   82bc4:	08000001 	.word	0x08000001
   82bc8:	400e0e00 	.word	0x400e0e00
   82bcc:	00082d41 	.word	0x00082d41

00082bd0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82bd0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82bd2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82bd6:	d016      	beq.n	82c06 <pio_set_peripheral+0x36>
   82bd8:	d80b      	bhi.n	82bf2 <pio_set_peripheral+0x22>
   82bda:	b149      	cbz	r1, 82bf0 <pio_set_peripheral+0x20>
   82bdc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82be0:	d105      	bne.n	82bee <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82be2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82be4:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82be6:	400b      	ands	r3, r1
   82be8:	ea23 0302 	bic.w	r3, r3, r2
   82bec:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82bee:	6042      	str	r2, [r0, #4]
   82bf0:	4770      	bx	lr
	switch (ul_type) {
   82bf2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82bf6:	d0fb      	beq.n	82bf0 <pio_set_peripheral+0x20>
   82bf8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82bfc:	d0f8      	beq.n	82bf0 <pio_set_peripheral+0x20>
   82bfe:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82c02:	d1f4      	bne.n	82bee <pio_set_peripheral+0x1e>
   82c04:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   82c06:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82c08:	4313      	orrs	r3, r2
   82c0a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82c0c:	e7ef      	b.n	82bee <pio_set_peripheral+0x1e>

00082c0e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82c0e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82c10:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82c14:	bf14      	ite	ne
   82c16:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82c18:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82c1a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82c1e:	bf14      	ite	ne
   82c20:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   82c22:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   82c24:	f012 0f02 	tst.w	r2, #2
   82c28:	d107      	bne.n	82c3a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   82c2a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82c2e:	bf18      	it	ne
   82c30:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   82c34:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82c36:	6001      	str	r1, [r0, #0]
   82c38:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   82c3a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82c3e:	e7f9      	b.n	82c34 <pio_set_input+0x26>

00082c40 <pio_set_output>:
{
   82c40:	b410      	push	{r4}
   82c42:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   82c44:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82c46:	b944      	cbnz	r4, 82c5a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   82c48:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   82c4a:	b143      	cbz	r3, 82c5e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   82c4c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   82c4e:	b942      	cbnz	r2, 82c62 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   82c50:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   82c52:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82c54:	6001      	str	r1, [r0, #0]
}
   82c56:	bc10      	pop	{r4}
   82c58:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   82c5a:	6641      	str	r1, [r0, #100]	; 0x64
   82c5c:	e7f5      	b.n	82c4a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   82c5e:	6541      	str	r1, [r0, #84]	; 0x54
   82c60:	e7f5      	b.n	82c4e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   82c62:	6301      	str	r1, [r0, #48]	; 0x30
   82c64:	e7f5      	b.n	82c52 <pio_set_output+0x12>

00082c66 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82c66:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82c68:	4770      	bx	lr

00082c6a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82c6a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82c6c:	4770      	bx	lr
	...

00082c70 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82c70:	b570      	push	{r4, r5, r6, lr}
   82c72:	b082      	sub	sp, #8
   82c74:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82c76:	0943      	lsrs	r3, r0, #5
   82c78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82c7c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82c80:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   82c82:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82c86:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82c8a:	d031      	beq.n	82cf0 <pio_configure_pin+0x80>
   82c8c:	d816      	bhi.n	82cbc <pio_configure_pin+0x4c>
   82c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82c92:	d01b      	beq.n	82ccc <pio_configure_pin+0x5c>
   82c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82c98:	d116      	bne.n	82cc8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82c9a:	f000 001f 	and.w	r0, r0, #31
   82c9e:	2601      	movs	r6, #1
   82ca0:	4086      	lsls	r6, r0
   82ca2:	4632      	mov	r2, r6
   82ca4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82ca8:	4620      	mov	r0, r4
   82caa:	4b22      	ldr	r3, [pc, #136]	; (82d34 <pio_configure_pin+0xc4>)
   82cac:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82cae:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82cb2:	bf14      	ite	ne
   82cb4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82cb6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82cb8:	2001      	movs	r0, #1
   82cba:	e017      	b.n	82cec <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82cbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82cc0:	d021      	beq.n	82d06 <pio_configure_pin+0x96>
   82cc2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82cc6:	d01e      	beq.n	82d06 <pio_configure_pin+0x96>
		return 0;
   82cc8:	2000      	movs	r0, #0
   82cca:	e00f      	b.n	82cec <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82ccc:	f000 001f 	and.w	r0, r0, #31
   82cd0:	2601      	movs	r6, #1
   82cd2:	4086      	lsls	r6, r0
   82cd4:	4632      	mov	r2, r6
   82cd6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82cda:	4620      	mov	r0, r4
   82cdc:	4b15      	ldr	r3, [pc, #84]	; (82d34 <pio_configure_pin+0xc4>)
   82cde:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82ce0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82ce4:	bf14      	ite	ne
   82ce6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82ce8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82cea:	2001      	movs	r0, #1
}
   82cec:	b002      	add	sp, #8
   82cee:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82cf0:	f000 011f 	and.w	r1, r0, #31
   82cf4:	2601      	movs	r6, #1
   82cf6:	462a      	mov	r2, r5
   82cf8:	fa06 f101 	lsl.w	r1, r6, r1
   82cfc:	4620      	mov	r0, r4
   82cfe:	4b0e      	ldr	r3, [pc, #56]	; (82d38 <pio_configure_pin+0xc8>)
   82d00:	4798      	blx	r3
	return 1;
   82d02:	4630      	mov	r0, r6
		break;
   82d04:	e7f2      	b.n	82cec <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82d06:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82d0a:	f000 011f 	and.w	r1, r0, #31
   82d0e:	2601      	movs	r6, #1
   82d10:	ea05 0306 	and.w	r3, r5, r6
   82d14:	9300      	str	r3, [sp, #0]
   82d16:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82d1a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82d1e:	bf14      	ite	ne
   82d20:	2200      	movne	r2, #0
   82d22:	2201      	moveq	r2, #1
   82d24:	fa06 f101 	lsl.w	r1, r6, r1
   82d28:	4620      	mov	r0, r4
   82d2a:	4c04      	ldr	r4, [pc, #16]	; (82d3c <pio_configure_pin+0xcc>)
   82d2c:	47a0      	blx	r4
	return 1;
   82d2e:	4630      	mov	r0, r6
		break;
   82d30:	e7dc      	b.n	82cec <pio_configure_pin+0x7c>
   82d32:	bf00      	nop
   82d34:	00082bd1 	.word	0x00082bd1
   82d38:	00082c0f 	.word	0x00082c0f
   82d3c:	00082c41 	.word	0x00082c41

00082d40 <pio_configure_pin_group>:
{
   82d40:	b570      	push	{r4, r5, r6, lr}
   82d42:	b082      	sub	sp, #8
   82d44:	4605      	mov	r5, r0
   82d46:	460e      	mov	r6, r1
   82d48:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   82d4a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82d4e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82d52:	d027      	beq.n	82da4 <pio_configure_pin_group+0x64>
   82d54:	d811      	bhi.n	82d7a <pio_configure_pin_group+0x3a>
   82d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82d5a:	d016      	beq.n	82d8a <pio_configure_pin_group+0x4a>
   82d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82d60:	d111      	bne.n	82d86 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82d62:	460a      	mov	r2, r1
   82d64:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82d68:	4b19      	ldr	r3, [pc, #100]	; (82dd0 <pio_configure_pin_group+0x90>)
   82d6a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82d6c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82d70:	bf14      	ite	ne
   82d72:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82d74:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82d76:	2001      	movs	r0, #1
   82d78:	e012      	b.n	82da0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   82d7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82d7e:	d015      	beq.n	82dac <pio_configure_pin_group+0x6c>
   82d80:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82d84:	d012      	beq.n	82dac <pio_configure_pin_group+0x6c>
		return 0;
   82d86:	2000      	movs	r0, #0
   82d88:	e00a      	b.n	82da0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82d8a:	460a      	mov	r2, r1
   82d8c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d90:	4b0f      	ldr	r3, [pc, #60]	; (82dd0 <pio_configure_pin_group+0x90>)
   82d92:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82d94:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82d98:	bf14      	ite	ne
   82d9a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82d9c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82d9e:	2001      	movs	r0, #1
}
   82da0:	b002      	add	sp, #8
   82da2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82da4:	4b0b      	ldr	r3, [pc, #44]	; (82dd4 <pio_configure_pin_group+0x94>)
   82da6:	4798      	blx	r3
	return 1;
   82da8:	2001      	movs	r0, #1
		break;
   82daa:	e7f9      	b.n	82da0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82dac:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82db0:	f004 0301 	and.w	r3, r4, #1
   82db4:	9300      	str	r3, [sp, #0]
   82db6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   82dba:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82dbe:	bf14      	ite	ne
   82dc0:	2200      	movne	r2, #0
   82dc2:	2201      	moveq	r2, #1
   82dc4:	4631      	mov	r1, r6
   82dc6:	4628      	mov	r0, r5
   82dc8:	4c03      	ldr	r4, [pc, #12]	; (82dd8 <pio_configure_pin_group+0x98>)
   82dca:	47a0      	blx	r4
	return 1;
   82dcc:	2001      	movs	r0, #1
		break;
   82dce:	e7e7      	b.n	82da0 <pio_configure_pin_group+0x60>
   82dd0:	00082bd1 	.word	0x00082bd1
   82dd4:	00082c0f 	.word	0x00082c0f
   82dd8:	00082c41 	.word	0x00082c41

00082ddc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82de0:	4604      	mov	r4, r0
   82de2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82de4:	4b0e      	ldr	r3, [pc, #56]	; (82e20 <pio_handler_process+0x44>)
   82de6:	4798      	blx	r3
   82de8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82dea:	4620      	mov	r0, r4
   82dec:	4b0d      	ldr	r3, [pc, #52]	; (82e24 <pio_handler_process+0x48>)
   82dee:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82df0:	4005      	ands	r5, r0
   82df2:	d013      	beq.n	82e1c <pio_handler_process+0x40>
   82df4:	4c0c      	ldr	r4, [pc, #48]	; (82e28 <pio_handler_process+0x4c>)
   82df6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   82dfa:	e003      	b.n	82e04 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82dfc:	42b4      	cmp	r4, r6
   82dfe:	d00d      	beq.n	82e1c <pio_handler_process+0x40>
   82e00:	3410      	adds	r4, #16
		while (status != 0) {
   82e02:	b15d      	cbz	r5, 82e1c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82e04:	6820      	ldr	r0, [r4, #0]
   82e06:	4540      	cmp	r0, r8
   82e08:	d1f8      	bne.n	82dfc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82e0a:	6861      	ldr	r1, [r4, #4]
   82e0c:	4229      	tst	r1, r5
   82e0e:	d0f5      	beq.n	82dfc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82e10:	68e3      	ldr	r3, [r4, #12]
   82e12:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82e14:	6863      	ldr	r3, [r4, #4]
   82e16:	ea25 0503 	bic.w	r5, r5, r3
   82e1a:	e7ef      	b.n	82dfc <pio_handler_process+0x20>
   82e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e20:	00082c67 	.word	0x00082c67
   82e24:	00082c6b 	.word	0x00082c6b
   82e28:	20070ef0 	.word	0x20070ef0

00082e2c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82e2c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82e2e:	210b      	movs	r1, #11
   82e30:	4801      	ldr	r0, [pc, #4]	; (82e38 <PIOA_Handler+0xc>)
   82e32:	4b02      	ldr	r3, [pc, #8]	; (82e3c <PIOA_Handler+0x10>)
   82e34:	4798      	blx	r3
   82e36:	bd08      	pop	{r3, pc}
   82e38:	400e0e00 	.word	0x400e0e00
   82e3c:	00082ddd 	.word	0x00082ddd

00082e40 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82e40:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82e42:	210c      	movs	r1, #12
   82e44:	4801      	ldr	r0, [pc, #4]	; (82e4c <PIOB_Handler+0xc>)
   82e46:	4b02      	ldr	r3, [pc, #8]	; (82e50 <PIOB_Handler+0x10>)
   82e48:	4798      	blx	r3
   82e4a:	bd08      	pop	{r3, pc}
   82e4c:	400e1000 	.word	0x400e1000
   82e50:	00082ddd 	.word	0x00082ddd

00082e54 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82e54:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82e56:	210d      	movs	r1, #13
   82e58:	4801      	ldr	r0, [pc, #4]	; (82e60 <PIOC_Handler+0xc>)
   82e5a:	4b02      	ldr	r3, [pc, #8]	; (82e64 <PIOC_Handler+0x10>)
   82e5c:	4798      	blx	r3
   82e5e:	bd08      	pop	{r3, pc}
   82e60:	400e1200 	.word	0x400e1200
   82e64:	00082ddd 	.word	0x00082ddd

00082e68 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82e68:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82e6a:	210e      	movs	r1, #14
   82e6c:	4801      	ldr	r0, [pc, #4]	; (82e74 <PIOD_Handler+0xc>)
   82e6e:	4b02      	ldr	r3, [pc, #8]	; (82e78 <PIOD_Handler+0x10>)
   82e70:	4798      	blx	r3
   82e72:	bd08      	pop	{r3, pc}
   82e74:	400e1400 	.word	0x400e1400
   82e78:	00082ddd 	.word	0x00082ddd

00082e7c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82e7c:	4a17      	ldr	r2, [pc, #92]	; (82edc <pmc_switch_mck_to_pllack+0x60>)
   82e7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82e84:	4318      	orrs	r0, r3
   82e86:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82e88:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82e8a:	f013 0f08 	tst.w	r3, #8
   82e8e:	d10a      	bne.n	82ea6 <pmc_switch_mck_to_pllack+0x2a>
   82e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82e94:	4911      	ldr	r1, [pc, #68]	; (82edc <pmc_switch_mck_to_pllack+0x60>)
   82e96:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82e98:	f012 0f08 	tst.w	r2, #8
   82e9c:	d103      	bne.n	82ea6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82e9e:	3b01      	subs	r3, #1
   82ea0:	d1f9      	bne.n	82e96 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   82ea2:	2001      	movs	r0, #1
   82ea4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82ea6:	4a0d      	ldr	r2, [pc, #52]	; (82edc <pmc_switch_mck_to_pllack+0x60>)
   82ea8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82eaa:	f023 0303 	bic.w	r3, r3, #3
   82eae:	f043 0302 	orr.w	r3, r3, #2
   82eb2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82eb4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82eb6:	f013 0f08 	tst.w	r3, #8
   82eba:	d10a      	bne.n	82ed2 <pmc_switch_mck_to_pllack+0x56>
   82ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82ec0:	4906      	ldr	r1, [pc, #24]	; (82edc <pmc_switch_mck_to_pllack+0x60>)
   82ec2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82ec4:	f012 0f08 	tst.w	r2, #8
   82ec8:	d105      	bne.n	82ed6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82eca:	3b01      	subs	r3, #1
   82ecc:	d1f9      	bne.n	82ec2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   82ece:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82ed0:	4770      	bx	lr
	return 0;
   82ed2:	2000      	movs	r0, #0
   82ed4:	4770      	bx	lr
   82ed6:	2000      	movs	r0, #0
   82ed8:	4770      	bx	lr
   82eda:	bf00      	nop
   82edc:	400e0600 	.word	0x400e0600

00082ee0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82ee0:	b9c8      	cbnz	r0, 82f16 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82ee2:	4a11      	ldr	r2, [pc, #68]	; (82f28 <pmc_switch_mainck_to_xtal+0x48>)
   82ee4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82ee6:	0209      	lsls	r1, r1, #8
   82ee8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82eea:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82eee:	f023 0303 	bic.w	r3, r3, #3
   82ef2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82ef6:	f043 0301 	orr.w	r3, r3, #1
   82efa:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82efc:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82efe:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82f00:	f013 0f01 	tst.w	r3, #1
   82f04:	d0fb      	beq.n	82efe <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82f06:	4a08      	ldr	r2, [pc, #32]	; (82f28 <pmc_switch_mainck_to_xtal+0x48>)
   82f08:	6a13      	ldr	r3, [r2, #32]
   82f0a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82f12:	6213      	str	r3, [r2, #32]
   82f14:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82f16:	4904      	ldr	r1, [pc, #16]	; (82f28 <pmc_switch_mainck_to_xtal+0x48>)
   82f18:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82f1a:	4a04      	ldr	r2, [pc, #16]	; (82f2c <pmc_switch_mainck_to_xtal+0x4c>)
   82f1c:	401a      	ands	r2, r3
   82f1e:	4b04      	ldr	r3, [pc, #16]	; (82f30 <pmc_switch_mainck_to_xtal+0x50>)
   82f20:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82f22:	620b      	str	r3, [r1, #32]
   82f24:	4770      	bx	lr
   82f26:	bf00      	nop
   82f28:	400e0600 	.word	0x400e0600
   82f2c:	fec8fffc 	.word	0xfec8fffc
   82f30:	01370002 	.word	0x01370002

00082f34 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82f34:	4b02      	ldr	r3, [pc, #8]	; (82f40 <pmc_osc_is_ready_mainck+0xc>)
   82f36:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82f38:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82f3c:	4770      	bx	lr
   82f3e:	bf00      	nop
   82f40:	400e0600 	.word	0x400e0600

00082f44 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82f44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82f48:	4b01      	ldr	r3, [pc, #4]	; (82f50 <pmc_disable_pllack+0xc>)
   82f4a:	629a      	str	r2, [r3, #40]	; 0x28
   82f4c:	4770      	bx	lr
   82f4e:	bf00      	nop
   82f50:	400e0600 	.word	0x400e0600

00082f54 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82f54:	4b02      	ldr	r3, [pc, #8]	; (82f60 <pmc_is_locked_pllack+0xc>)
   82f56:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82f58:	f000 0002 	and.w	r0, r0, #2
   82f5c:	4770      	bx	lr
   82f5e:	bf00      	nop
   82f60:	400e0600 	.word	0x400e0600

00082f64 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   82f64:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   82f68:	4b03      	ldr	r3, [pc, #12]	; (82f78 <pmc_enable_upll_clock+0x14>)
   82f6a:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   82f6c:	461a      	mov	r2, r3
   82f6e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82f70:	f013 0f40 	tst.w	r3, #64	; 0x40
   82f74:	d0fb      	beq.n	82f6e <pmc_enable_upll_clock+0xa>
}
   82f76:	4770      	bx	lr
   82f78:	400e0600 	.word	0x400e0600

00082f7c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   82f7c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82f80:	4b05      	ldr	r3, [pc, #20]	; (82f98 <pmc_enable_periph_clk+0x1c>)
   82f82:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   82f86:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   82f8a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   82f8e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   82f92:	2000      	movs	r0, #0
   82f94:	4770      	bx	lr
   82f96:	bf00      	nop
   82f98:	400e0600 	.word	0x400e0600

00082f9c <pmc_switch_udpck_to_upllck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   82f9c:	0200      	lsls	r0, r0, #8
   82f9e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
   82fa2:	f040 0001 	orr.w	r0, r0, #1
   82fa6:	4b01      	ldr	r3, [pc, #4]	; (82fac <pmc_switch_udpck_to_upllck+0x10>)
   82fa8:	6398      	str	r0, [r3, #56]	; 0x38
   82faa:	4770      	bx	lr
   82fac:	400e0600 	.word	0x400e0600

00082fb0 <pmc_enable_udpck>:
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   82fb0:	2220      	movs	r2, #32
   82fb2:	4b01      	ldr	r3, [pc, #4]	; (82fb8 <pmc_enable_udpck+0x8>)
   82fb4:	601a      	str	r2, [r3, #0]
   82fb6:	4770      	bx	lr
   82fb8:	400e0600 	.word	0x400e0600

00082fbc <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   82fbc:	4b03      	ldr	r3, [pc, #12]	; (82fcc <pmc_set_fast_startup_input+0x10>)
   82fbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   82fc0:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   82fc4:	4310      	orrs	r0, r2
   82fc6:	6718      	str	r0, [r3, #112]	; 0x70
   82fc8:	4770      	bx	lr
   82fca:	bf00      	nop
   82fcc:	400e0600 	.word	0x400e0600

00082fd0 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   82fd0:	4b02      	ldr	r3, [pc, #8]	; (82fdc <pmc_is_wakeup_clocks_restored+0xc>)
   82fd2:	7818      	ldrb	r0, [r3, #0]
}
   82fd4:	f080 0001 	eor.w	r0, r0, #1
   82fd8:	4770      	bx	lr
   82fda:	bf00      	nop
   82fdc:	20070f60 	.word	0x20070f60

00082fe0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82fe0:	e7fe      	b.n	82fe0 <Dummy_Handler>
	...

00082fe4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82fe4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82fe6:	4b1c      	ldr	r3, [pc, #112]	; (83058 <Reset_Handler+0x74>)
   82fe8:	4a1c      	ldr	r2, [pc, #112]	; (8305c <Reset_Handler+0x78>)
   82fea:	429a      	cmp	r2, r3
   82fec:	d010      	beq.n	83010 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   82fee:	4b1c      	ldr	r3, [pc, #112]	; (83060 <Reset_Handler+0x7c>)
   82ff0:	4a19      	ldr	r2, [pc, #100]	; (83058 <Reset_Handler+0x74>)
   82ff2:	429a      	cmp	r2, r3
   82ff4:	d20c      	bcs.n	83010 <Reset_Handler+0x2c>
   82ff6:	3b01      	subs	r3, #1
   82ff8:	1a9b      	subs	r3, r3, r2
   82ffa:	f023 0303 	bic.w	r3, r3, #3
   82ffe:	3304      	adds	r3, #4
   83000:	4413      	add	r3, r2
   83002:	4916      	ldr	r1, [pc, #88]	; (8305c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   83004:	f851 0b04 	ldr.w	r0, [r1], #4
   83008:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   8300c:	429a      	cmp	r2, r3
   8300e:	d1f9      	bne.n	83004 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83010:	4b14      	ldr	r3, [pc, #80]	; (83064 <Reset_Handler+0x80>)
   83012:	4a15      	ldr	r2, [pc, #84]	; (83068 <Reset_Handler+0x84>)
   83014:	429a      	cmp	r2, r3
   83016:	d20a      	bcs.n	8302e <Reset_Handler+0x4a>
   83018:	3b01      	subs	r3, #1
   8301a:	1a9b      	subs	r3, r3, r2
   8301c:	f023 0303 	bic.w	r3, r3, #3
   83020:	3304      	adds	r3, #4
   83022:	4413      	add	r3, r2
		*pDest++ = 0;
   83024:	2100      	movs	r1, #0
   83026:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8302a:	4293      	cmp	r3, r2
   8302c:	d1fb      	bne.n	83026 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8302e:	4b0f      	ldr	r3, [pc, #60]	; (8306c <Reset_Handler+0x88>)
   83030:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   83034:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83038:	490d      	ldr	r1, [pc, #52]	; (83070 <Reset_Handler+0x8c>)
   8303a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8303c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   83040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   83044:	d203      	bcs.n	8304e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83046:	688b      	ldr	r3, [r1, #8]
   83048:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8304c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8304e:	4b09      	ldr	r3, [pc, #36]	; (83074 <Reset_Handler+0x90>)
   83050:	4798      	blx	r3

	/* Branch to main function */
	main();
   83052:	4b09      	ldr	r3, [pc, #36]	; (83078 <Reset_Handler+0x94>)
   83054:	4798      	blx	r3
   83056:	e7fe      	b.n	83056 <Reset_Handler+0x72>
   83058:	20070000 	.word	0x20070000
   8305c:	0008857c 	.word	0x0008857c
   83060:	20070c28 	.word	0x20070c28
   83064:	20070ff0 	.word	0x20070ff0
   83068:	20070c28 	.word	0x20070c28
   8306c:	00080000 	.word	0x00080000
   83070:	e000ed00 	.word	0xe000ed00
   83074:	0008399d 	.word	0x0008399d
   83078:	00083201 	.word	0x00083201

0008307c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8307c:	4b3d      	ldr	r3, [pc, #244]	; (83174 <SystemCoreClockUpdate+0xf8>)
   8307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83080:	f003 0303 	and.w	r3, r3, #3
   83084:	2b03      	cmp	r3, #3
   83086:	d80e      	bhi.n	830a6 <SystemCoreClockUpdate+0x2a>
   83088:	e8df f003 	tbb	[pc, r3]
   8308c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83090:	4b39      	ldr	r3, [pc, #228]	; (83178 <SystemCoreClockUpdate+0xfc>)
   83092:	695b      	ldr	r3, [r3, #20]
   83094:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83098:	bf14      	ite	ne
   8309a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8309e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   830a2:	4b36      	ldr	r3, [pc, #216]	; (8317c <SystemCoreClockUpdate+0x100>)
   830a4:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   830a6:	4b33      	ldr	r3, [pc, #204]	; (83174 <SystemCoreClockUpdate+0xf8>)
   830a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   830aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   830ae:	2b70      	cmp	r3, #112	; 0x70
   830b0:	d057      	beq.n	83162 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   830b2:	4b30      	ldr	r3, [pc, #192]	; (83174 <SystemCoreClockUpdate+0xf8>)
   830b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   830b6:	4931      	ldr	r1, [pc, #196]	; (8317c <SystemCoreClockUpdate+0x100>)
   830b8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   830bc:	680b      	ldr	r3, [r1, #0]
   830be:	40d3      	lsrs	r3, r2
   830c0:	600b      	str	r3, [r1, #0]
   830c2:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   830c4:	4b2b      	ldr	r3, [pc, #172]	; (83174 <SystemCoreClockUpdate+0xf8>)
   830c6:	6a1b      	ldr	r3, [r3, #32]
   830c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   830cc:	d003      	beq.n	830d6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   830ce:	4a2c      	ldr	r2, [pc, #176]	; (83180 <SystemCoreClockUpdate+0x104>)
   830d0:	4b2a      	ldr	r3, [pc, #168]	; (8317c <SystemCoreClockUpdate+0x100>)
   830d2:	601a      	str	r2, [r3, #0]
   830d4:	e7e7      	b.n	830a6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   830d6:	4a2b      	ldr	r2, [pc, #172]	; (83184 <SystemCoreClockUpdate+0x108>)
   830d8:	4b28      	ldr	r3, [pc, #160]	; (8317c <SystemCoreClockUpdate+0x100>)
   830da:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   830dc:	4b25      	ldr	r3, [pc, #148]	; (83174 <SystemCoreClockUpdate+0xf8>)
   830de:	6a1b      	ldr	r3, [r3, #32]
   830e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   830e4:	2b10      	cmp	r3, #16
   830e6:	d005      	beq.n	830f4 <SystemCoreClockUpdate+0x78>
   830e8:	2b20      	cmp	r3, #32
   830ea:	d1dc      	bne.n	830a6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   830ec:	4a24      	ldr	r2, [pc, #144]	; (83180 <SystemCoreClockUpdate+0x104>)
   830ee:	4b23      	ldr	r3, [pc, #140]	; (8317c <SystemCoreClockUpdate+0x100>)
   830f0:	601a      	str	r2, [r3, #0]
				break;
   830f2:	e7d8      	b.n	830a6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   830f4:	4a24      	ldr	r2, [pc, #144]	; (83188 <SystemCoreClockUpdate+0x10c>)
   830f6:	4b21      	ldr	r3, [pc, #132]	; (8317c <SystemCoreClockUpdate+0x100>)
   830f8:	601a      	str	r2, [r3, #0]
				break;
   830fa:	e7d4      	b.n	830a6 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   830fc:	4b1d      	ldr	r3, [pc, #116]	; (83174 <SystemCoreClockUpdate+0xf8>)
   830fe:	6a1b      	ldr	r3, [r3, #32]
   83100:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   83104:	d00c      	beq.n	83120 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83106:	4a1e      	ldr	r2, [pc, #120]	; (83180 <SystemCoreClockUpdate+0x104>)
   83108:	4b1c      	ldr	r3, [pc, #112]	; (8317c <SystemCoreClockUpdate+0x100>)
   8310a:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8310c:	4b19      	ldr	r3, [pc, #100]	; (83174 <SystemCoreClockUpdate+0xf8>)
   8310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83110:	f003 0303 	and.w	r3, r3, #3
   83114:	2b02      	cmp	r3, #2
   83116:	d016      	beq.n	83146 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83118:	4a1c      	ldr	r2, [pc, #112]	; (8318c <SystemCoreClockUpdate+0x110>)
   8311a:	4b18      	ldr	r3, [pc, #96]	; (8317c <SystemCoreClockUpdate+0x100>)
   8311c:	601a      	str	r2, [r3, #0]
   8311e:	e7c2      	b.n	830a6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83120:	4a18      	ldr	r2, [pc, #96]	; (83184 <SystemCoreClockUpdate+0x108>)
   83122:	4b16      	ldr	r3, [pc, #88]	; (8317c <SystemCoreClockUpdate+0x100>)
   83124:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83126:	4b13      	ldr	r3, [pc, #76]	; (83174 <SystemCoreClockUpdate+0xf8>)
   83128:	6a1b      	ldr	r3, [r3, #32]
   8312a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8312e:	2b10      	cmp	r3, #16
   83130:	d005      	beq.n	8313e <SystemCoreClockUpdate+0xc2>
   83132:	2b20      	cmp	r3, #32
   83134:	d1ea      	bne.n	8310c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   83136:	4a12      	ldr	r2, [pc, #72]	; (83180 <SystemCoreClockUpdate+0x104>)
   83138:	4b10      	ldr	r3, [pc, #64]	; (8317c <SystemCoreClockUpdate+0x100>)
   8313a:	601a      	str	r2, [r3, #0]
				break;
   8313c:	e7e6      	b.n	8310c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8313e:	4a12      	ldr	r2, [pc, #72]	; (83188 <SystemCoreClockUpdate+0x10c>)
   83140:	4b0e      	ldr	r3, [pc, #56]	; (8317c <SystemCoreClockUpdate+0x100>)
   83142:	601a      	str	r2, [r3, #0]
				break;
   83144:	e7e2      	b.n	8310c <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83146:	4a0b      	ldr	r2, [pc, #44]	; (83174 <SystemCoreClockUpdate+0xf8>)
   83148:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8314a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8314c:	480b      	ldr	r0, [pc, #44]	; (8317c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8314e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   83152:	6803      	ldr	r3, [r0, #0]
   83154:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83158:	b2d2      	uxtb	r2, r2
   8315a:	fbb3 f3f2 	udiv	r3, r3, r2
   8315e:	6003      	str	r3, [r0, #0]
   83160:	e7a1      	b.n	830a6 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   83162:	4a06      	ldr	r2, [pc, #24]	; (8317c <SystemCoreClockUpdate+0x100>)
   83164:	6813      	ldr	r3, [r2, #0]
   83166:	490a      	ldr	r1, [pc, #40]	; (83190 <SystemCoreClockUpdate+0x114>)
   83168:	fba1 1303 	umull	r1, r3, r1, r3
   8316c:	085b      	lsrs	r3, r3, #1
   8316e:	6013      	str	r3, [r2, #0]
   83170:	4770      	bx	lr
   83172:	bf00      	nop
   83174:	400e0600 	.word	0x400e0600
   83178:	400e1a10 	.word	0x400e1a10
   8317c:	20070274 	.word	0x20070274
   83180:	00b71b00 	.word	0x00b71b00
   83184:	003d0900 	.word	0x003d0900
   83188:	007a1200 	.word	0x007a1200
   8318c:	0e4e1c00 	.word	0x0e4e1c00
   83190:	aaaaaaab 	.word	0xaaaaaaab

00083194 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   83194:	4b0a      	ldr	r3, [pc, #40]	; (831c0 <_sbrk+0x2c>)
   83196:	681b      	ldr	r3, [r3, #0]
   83198:	b153      	cbz	r3, 831b0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8319a:	4b09      	ldr	r3, [pc, #36]	; (831c0 <_sbrk+0x2c>)
   8319c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8319e:	181a      	adds	r2, r3, r0
   831a0:	4908      	ldr	r1, [pc, #32]	; (831c4 <_sbrk+0x30>)
   831a2:	4291      	cmp	r1, r2
   831a4:	db08      	blt.n	831b8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   831a6:	4610      	mov	r0, r2
   831a8:	4a05      	ldr	r2, [pc, #20]	; (831c0 <_sbrk+0x2c>)
   831aa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   831ac:	4618      	mov	r0, r3
   831ae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   831b0:	4a05      	ldr	r2, [pc, #20]	; (831c8 <_sbrk+0x34>)
   831b2:	4b03      	ldr	r3, [pc, #12]	; (831c0 <_sbrk+0x2c>)
   831b4:	601a      	str	r2, [r3, #0]
   831b6:	e7f0      	b.n	8319a <_sbrk+0x6>
		return (caddr_t) -1;	
   831b8:	f04f 30ff 	mov.w	r0, #4294967295
}
   831bc:	4770      	bx	lr
   831be:	bf00      	nop
   831c0:	20070f64 	.word	0x20070f64
   831c4:	20087ffc 	.word	0x20087ffc
   831c8:	20072ff0 	.word	0x20072ff0

000831cc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   831cc:	f04f 30ff 	mov.w	r0, #4294967295
   831d0:	4770      	bx	lr

000831d2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   831d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   831d6:	604b      	str	r3, [r1, #4]

	return 0;
}
   831d8:	2000      	movs	r0, #0
   831da:	4770      	bx	lr

000831dc <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   831dc:	2000      	movs	r0, #0
   831de:	4770      	bx	lr

000831e0 <send_buf>:

void send_buf(char *buf)
{
	int i = 0;
	
	while (buf[i])
   831e0:	7801      	ldrb	r1, [r0, #0]
   831e2:	b151      	cbz	r1, 831fa <send_buf+0x1a>
{
   831e4:	b570      	push	{r4, r5, r6, lr}
   831e6:	4604      	mov	r4, r0
	{
		stdio_usb_putchar(NULL, buf[i]);
   831e8:	2600      	movs	r6, #0
   831ea:	4d04      	ldr	r5, [pc, #16]	; (831fc <send_buf+0x1c>)
   831ec:	4630      	mov	r0, r6
   831ee:	47a8      	blx	r5
	while (buf[i])
   831f0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   831f4:	2900      	cmp	r1, #0
   831f6:	d1f9      	bne.n	831ec <send_buf+0xc>
   831f8:	bd70      	pop	{r4, r5, r6, pc}
   831fa:	4770      	bx	lr
   831fc:	0008121d 	.word	0x0008121d

00083200 <main>:
	}
}


int main (void)
{
   83200:	b580      	push	{r7, lr}
   83202:	b0a8      	sub	sp, #160	; 0xa0
	app_init();
   83204:	4b34      	ldr	r3, [pc, #208]	; (832d8 <main+0xd8>)
   83206:	4798      	blx	r3
	
	mw_hal_timer_init();
   83208:	4b34      	ldr	r3, [pc, #208]	; (832dc <main+0xdc>)
   8320a:	4798      	blx	r3
	
	stdio_usb_init();
   8320c:	4b34      	ldr	r3, [pc, #208]	; (832e0 <main+0xe0>)
   8320e:	4798      	blx	r3
	stdio_usb_enable();	
   83210:	4b34      	ldr	r3, [pc, #208]	; (832e4 <main+0xe4>)
   83212:	4798      	blx	r3
	
	float td[4]={0.1f,1.1f,3.1f,6.6f};
   83214:	4b34      	ldr	r3, [pc, #208]	; (832e8 <main+0xe8>)
   83216:	ac24      	add	r4, sp, #144	; 0x90
   83218:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   8321a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float td2[4];
	char buf[100];
	
	mw_hal_delay_ms(4000);
   8321e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   83222:	4b32      	ldr	r3, [pc, #200]	; (832ec <main+0xec>)
   83224:	4798      	blx	r3
		
	mw_hal_non_vol_save((uint8_t*)&td[0], 16);
   83226:	2110      	movs	r1, #16
   83228:	4620      	mov	r0, r4
   8322a:	4b31      	ldr	r3, [pc, #196]	; (832f0 <main+0xf0>)
   8322c:	4798      	blx	r3
	mw_hal_non_vol_load((uint8_t*)&td2[0],16);
   8322e:	2110      	movs	r1, #16
   83230:	a820      	add	r0, sp, #128	; 0x80
   83232:	4b30      	ldr	r3, [pc, #192]	; (832f4 <main+0xf4>)
   83234:	4798      	blx	r3
	sprintf(buf, "%f %f %f %f\n\r", td[0], td[1], td[2], td[3]);
   83236:	4c30      	ldr	r4, [pc, #192]	; (832f8 <main+0xf8>)
   83238:	9824      	ldr	r0, [sp, #144]	; 0x90
   8323a:	47a0      	blx	r4
   8323c:	4680      	mov	r8, r0
   8323e:	4689      	mov	r9, r1
   83240:	4f2e      	ldr	r7, [pc, #184]	; (832fc <main+0xfc>)
   83242:	9827      	ldr	r0, [sp, #156]	; 0x9c
   83244:	47a0      	blx	r4
   83246:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8324a:	9826      	ldr	r0, [sp, #152]	; 0x98
   8324c:	47a0      	blx	r4
   8324e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   83252:	9825      	ldr	r0, [sp, #148]	; 0x94
   83254:	47a0      	blx	r4
   83256:	e9cd 0100 	strd	r0, r1, [sp]
   8325a:	4642      	mov	r2, r8
   8325c:	464b      	mov	r3, r9
   8325e:	4639      	mov	r1, r7
   83260:	a807      	add	r0, sp, #28
   83262:	4e27      	ldr	r6, [pc, #156]	; (83300 <main+0x100>)
   83264:	47b0      	blx	r6
	send_buf(buf);
   83266:	a807      	add	r0, sp, #28
   83268:	4d26      	ldr	r5, [pc, #152]	; (83304 <main+0x104>)
   8326a:	47a8      	blx	r5
	sprintf(buf, "%f %f %f %f\n\r", td2[0], td2[1], td2[2], td2[3]);
   8326c:	9820      	ldr	r0, [sp, #128]	; 0x80
   8326e:	47a0      	blx	r4
   83270:	4680      	mov	r8, r0
   83272:	4689      	mov	r9, r1
   83274:	9823      	ldr	r0, [sp, #140]	; 0x8c
   83276:	47a0      	blx	r4
   83278:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8327c:	9822      	ldr	r0, [sp, #136]	; 0x88
   8327e:	47a0      	blx	r4
   83280:	e9cd 0102 	strd	r0, r1, [sp, #8]
   83284:	9821      	ldr	r0, [sp, #132]	; 0x84
   83286:	47a0      	blx	r4
   83288:	e9cd 0100 	strd	r0, r1, [sp]
   8328c:	4642      	mov	r2, r8
   8328e:	464b      	mov	r3, r9
   83290:	4639      	mov	r1, r7
   83292:	a807      	add	r0, sp, #28
   83294:	47b0      	blx	r6
	send_buf(buf);
   83296:	a807      	add	r0, sp, #28
   83298:	47a8      	blx	r5
	
	mw_hal_touch_init();
   8329a:	4b1b      	ldr	r3, [pc, #108]	; (83308 <main+0x108>)
   8329c:	4798      	blx	r3
   8329e:	4c1b      	ldr	r4, [pc, #108]	; (8330c <main+0x10c>)
			sprintf(buf, "u\n\r");
		}
		else
		{
			uint16_t x, y;
			mw_hal_touch_get_point(&x, &y);
   832a0:	4f1b      	ldr	r7, [pc, #108]	; (83310 <main+0x110>)
			sprintf(buf, "x=%hu, y=%hu\n\r", x, y);
   832a2:	4e1c      	ldr	r6, [pc, #112]	; (83314 <main+0x114>)
   832a4:	e011      	b.n	832ca <main+0xca>
			mw_hal_touch_get_point(&x, &y);
   832a6:	f10d 011a 	add.w	r1, sp, #26
   832aa:	a806      	add	r0, sp, #24
   832ac:	47b8      	blx	r7
			sprintf(buf, "x=%hu, y=%hu\n\r", x, y);
   832ae:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   832b2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   832b6:	4631      	mov	r1, r6
   832b8:	a807      	add	r0, sp, #28
   832ba:	4d11      	ldr	r5, [pc, #68]	; (83300 <main+0x100>)
   832bc:	47a8      	blx	r5
		}
		send_buf(buf);
   832be:	a807      	add	r0, sp, #28
   832c0:	4b10      	ldr	r3, [pc, #64]	; (83304 <main+0x104>)
   832c2:	4798      	blx	r3
		
		mw_hal_delay_ms(250);
   832c4:	20fa      	movs	r0, #250	; 0xfa
   832c6:	4b09      	ldr	r3, [pc, #36]	; (832ec <main+0xec>)
   832c8:	4798      	blx	r3
   832ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		if (ioport_get_pin_level(PIO_PD1_IDX))
   832cc:	f013 0f02 	tst.w	r3, #2
   832d0:	d0e9      	beq.n	832a6 <main+0xa6>
			sprintf(buf, "u\n\r");
   832d2:	4b11      	ldr	r3, [pc, #68]	; (83318 <main+0x118>)
   832d4:	9307      	str	r3, [sp, #28]
   832d6:	e7f2      	b.n	832be <main+0xbe>
   832d8:	000804dd 	.word	0x000804dd
   832dc:	00080231 	.word	0x00080231
   832e0:	0008126d 	.word	0x0008126d
   832e4:	00081261 	.word	0x00081261
   832e8:	00088298 	.word	0x00088298
   832ec:	00080161 	.word	0x00080161
   832f0:	000801b1 	.word	0x000801b1
   832f4:	0008019d 	.word	0x0008019d
   832f8:	000835e5 	.word	0x000835e5
   832fc:	000882a8 	.word	0x000882a8
   83300:	00083d15 	.word	0x00083d15
   83304:	000831e1 	.word	0x000831e1
   83308:	00080305 	.word	0x00080305
   8330c:	400e1400 	.word	0x400e1400
   83310:	000803dd 	.word	0x000803dd
   83314:	000882b8 	.word	0x000882b8
   83318:	000d0a75 	.word	0x000d0a75

0008331c <__aeabi_drsub>:
   8331c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83320:	e002      	b.n	83328 <__adddf3>
   83322:	bf00      	nop

00083324 <__aeabi_dsub>:
   83324:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083328 <__adddf3>:
   83328:	b530      	push	{r4, r5, lr}
   8332a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8332e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83332:	ea94 0f05 	teq	r4, r5
   83336:	bf08      	it	eq
   83338:	ea90 0f02 	teqeq	r0, r2
   8333c:	bf1f      	itttt	ne
   8333e:	ea54 0c00 	orrsne.w	ip, r4, r0
   83342:	ea55 0c02 	orrsne.w	ip, r5, r2
   83346:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8334a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8334e:	f000 80e2 	beq.w	83516 <__adddf3+0x1ee>
   83352:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83356:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8335a:	bfb8      	it	lt
   8335c:	426d      	neglt	r5, r5
   8335e:	dd0c      	ble.n	8337a <__adddf3+0x52>
   83360:	442c      	add	r4, r5
   83362:	ea80 0202 	eor.w	r2, r0, r2
   83366:	ea81 0303 	eor.w	r3, r1, r3
   8336a:	ea82 0000 	eor.w	r0, r2, r0
   8336e:	ea83 0101 	eor.w	r1, r3, r1
   83372:	ea80 0202 	eor.w	r2, r0, r2
   83376:	ea81 0303 	eor.w	r3, r1, r3
   8337a:	2d36      	cmp	r5, #54	; 0x36
   8337c:	bf88      	it	hi
   8337e:	bd30      	pophi	{r4, r5, pc}
   83380:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83384:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83388:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8338c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83390:	d002      	beq.n	83398 <__adddf3+0x70>
   83392:	4240      	negs	r0, r0
   83394:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83398:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8339c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   833a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   833a4:	d002      	beq.n	833ac <__adddf3+0x84>
   833a6:	4252      	negs	r2, r2
   833a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   833ac:	ea94 0f05 	teq	r4, r5
   833b0:	f000 80a7 	beq.w	83502 <__adddf3+0x1da>
   833b4:	f1a4 0401 	sub.w	r4, r4, #1
   833b8:	f1d5 0e20 	rsbs	lr, r5, #32
   833bc:	db0d      	blt.n	833da <__adddf3+0xb2>
   833be:	fa02 fc0e 	lsl.w	ip, r2, lr
   833c2:	fa22 f205 	lsr.w	r2, r2, r5
   833c6:	1880      	adds	r0, r0, r2
   833c8:	f141 0100 	adc.w	r1, r1, #0
   833cc:	fa03 f20e 	lsl.w	r2, r3, lr
   833d0:	1880      	adds	r0, r0, r2
   833d2:	fa43 f305 	asr.w	r3, r3, r5
   833d6:	4159      	adcs	r1, r3
   833d8:	e00e      	b.n	833f8 <__adddf3+0xd0>
   833da:	f1a5 0520 	sub.w	r5, r5, #32
   833de:	f10e 0e20 	add.w	lr, lr, #32
   833e2:	2a01      	cmp	r2, #1
   833e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   833e8:	bf28      	it	cs
   833ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   833ee:	fa43 f305 	asr.w	r3, r3, r5
   833f2:	18c0      	adds	r0, r0, r3
   833f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   833f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   833fc:	d507      	bpl.n	8340e <__adddf3+0xe6>
   833fe:	f04f 0e00 	mov.w	lr, #0
   83402:	f1dc 0c00 	rsbs	ip, ip, #0
   83406:	eb7e 0000 	sbcs.w	r0, lr, r0
   8340a:	eb6e 0101 	sbc.w	r1, lr, r1
   8340e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83412:	d31b      	bcc.n	8344c <__adddf3+0x124>
   83414:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83418:	d30c      	bcc.n	83434 <__adddf3+0x10c>
   8341a:	0849      	lsrs	r1, r1, #1
   8341c:	ea5f 0030 	movs.w	r0, r0, rrx
   83420:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83424:	f104 0401 	add.w	r4, r4, #1
   83428:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8342c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83430:	f080 809a 	bcs.w	83568 <__adddf3+0x240>
   83434:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83438:	bf08      	it	eq
   8343a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8343e:	f150 0000 	adcs.w	r0, r0, #0
   83442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83446:	ea41 0105 	orr.w	r1, r1, r5
   8344a:	bd30      	pop	{r4, r5, pc}
   8344c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83450:	4140      	adcs	r0, r0
   83452:	eb41 0101 	adc.w	r1, r1, r1
   83456:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8345a:	f1a4 0401 	sub.w	r4, r4, #1
   8345e:	d1e9      	bne.n	83434 <__adddf3+0x10c>
   83460:	f091 0f00 	teq	r1, #0
   83464:	bf04      	itt	eq
   83466:	4601      	moveq	r1, r0
   83468:	2000      	moveq	r0, #0
   8346a:	fab1 f381 	clz	r3, r1
   8346e:	bf08      	it	eq
   83470:	3320      	addeq	r3, #32
   83472:	f1a3 030b 	sub.w	r3, r3, #11
   83476:	f1b3 0220 	subs.w	r2, r3, #32
   8347a:	da0c      	bge.n	83496 <__adddf3+0x16e>
   8347c:	320c      	adds	r2, #12
   8347e:	dd08      	ble.n	83492 <__adddf3+0x16a>
   83480:	f102 0c14 	add.w	ip, r2, #20
   83484:	f1c2 020c 	rsb	r2, r2, #12
   83488:	fa01 f00c 	lsl.w	r0, r1, ip
   8348c:	fa21 f102 	lsr.w	r1, r1, r2
   83490:	e00c      	b.n	834ac <__adddf3+0x184>
   83492:	f102 0214 	add.w	r2, r2, #20
   83496:	bfd8      	it	le
   83498:	f1c2 0c20 	rsble	ip, r2, #32
   8349c:	fa01 f102 	lsl.w	r1, r1, r2
   834a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   834a4:	bfdc      	itt	le
   834a6:	ea41 010c 	orrle.w	r1, r1, ip
   834aa:	4090      	lslle	r0, r2
   834ac:	1ae4      	subs	r4, r4, r3
   834ae:	bfa2      	ittt	ge
   834b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   834b4:	4329      	orrge	r1, r5
   834b6:	bd30      	popge	{r4, r5, pc}
   834b8:	ea6f 0404 	mvn.w	r4, r4
   834bc:	3c1f      	subs	r4, #31
   834be:	da1c      	bge.n	834fa <__adddf3+0x1d2>
   834c0:	340c      	adds	r4, #12
   834c2:	dc0e      	bgt.n	834e2 <__adddf3+0x1ba>
   834c4:	f104 0414 	add.w	r4, r4, #20
   834c8:	f1c4 0220 	rsb	r2, r4, #32
   834cc:	fa20 f004 	lsr.w	r0, r0, r4
   834d0:	fa01 f302 	lsl.w	r3, r1, r2
   834d4:	ea40 0003 	orr.w	r0, r0, r3
   834d8:	fa21 f304 	lsr.w	r3, r1, r4
   834dc:	ea45 0103 	orr.w	r1, r5, r3
   834e0:	bd30      	pop	{r4, r5, pc}
   834e2:	f1c4 040c 	rsb	r4, r4, #12
   834e6:	f1c4 0220 	rsb	r2, r4, #32
   834ea:	fa20 f002 	lsr.w	r0, r0, r2
   834ee:	fa01 f304 	lsl.w	r3, r1, r4
   834f2:	ea40 0003 	orr.w	r0, r0, r3
   834f6:	4629      	mov	r1, r5
   834f8:	bd30      	pop	{r4, r5, pc}
   834fa:	fa21 f004 	lsr.w	r0, r1, r4
   834fe:	4629      	mov	r1, r5
   83500:	bd30      	pop	{r4, r5, pc}
   83502:	f094 0f00 	teq	r4, #0
   83506:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8350a:	bf06      	itte	eq
   8350c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83510:	3401      	addeq	r4, #1
   83512:	3d01      	subne	r5, #1
   83514:	e74e      	b.n	833b4 <__adddf3+0x8c>
   83516:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8351a:	bf18      	it	ne
   8351c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83520:	d029      	beq.n	83576 <__adddf3+0x24e>
   83522:	ea94 0f05 	teq	r4, r5
   83526:	bf08      	it	eq
   83528:	ea90 0f02 	teqeq	r0, r2
   8352c:	d005      	beq.n	8353a <__adddf3+0x212>
   8352e:	ea54 0c00 	orrs.w	ip, r4, r0
   83532:	bf04      	itt	eq
   83534:	4619      	moveq	r1, r3
   83536:	4610      	moveq	r0, r2
   83538:	bd30      	pop	{r4, r5, pc}
   8353a:	ea91 0f03 	teq	r1, r3
   8353e:	bf1e      	ittt	ne
   83540:	2100      	movne	r1, #0
   83542:	2000      	movne	r0, #0
   83544:	bd30      	popne	{r4, r5, pc}
   83546:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8354a:	d105      	bne.n	83558 <__adddf3+0x230>
   8354c:	0040      	lsls	r0, r0, #1
   8354e:	4149      	adcs	r1, r1
   83550:	bf28      	it	cs
   83552:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83556:	bd30      	pop	{r4, r5, pc}
   83558:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8355c:	bf3c      	itt	cc
   8355e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83562:	bd30      	popcc	{r4, r5, pc}
   83564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83568:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8356c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83570:	f04f 0000 	mov.w	r0, #0
   83574:	bd30      	pop	{r4, r5, pc}
   83576:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8357a:	bf1a      	itte	ne
   8357c:	4619      	movne	r1, r3
   8357e:	4610      	movne	r0, r2
   83580:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83584:	bf1c      	itt	ne
   83586:	460b      	movne	r3, r1
   83588:	4602      	movne	r2, r0
   8358a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8358e:	bf06      	itte	eq
   83590:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83594:	ea91 0f03 	teqeq	r1, r3
   83598:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8359c:	bd30      	pop	{r4, r5, pc}
   8359e:	bf00      	nop

000835a0 <__aeabi_ui2d>:
   835a0:	f090 0f00 	teq	r0, #0
   835a4:	bf04      	itt	eq
   835a6:	2100      	moveq	r1, #0
   835a8:	4770      	bxeq	lr
   835aa:	b530      	push	{r4, r5, lr}
   835ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   835b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   835b4:	f04f 0500 	mov.w	r5, #0
   835b8:	f04f 0100 	mov.w	r1, #0
   835bc:	e750      	b.n	83460 <__adddf3+0x138>
   835be:	bf00      	nop

000835c0 <__aeabi_i2d>:
   835c0:	f090 0f00 	teq	r0, #0
   835c4:	bf04      	itt	eq
   835c6:	2100      	moveq	r1, #0
   835c8:	4770      	bxeq	lr
   835ca:	b530      	push	{r4, r5, lr}
   835cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   835d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   835d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   835d8:	bf48      	it	mi
   835da:	4240      	negmi	r0, r0
   835dc:	f04f 0100 	mov.w	r1, #0
   835e0:	e73e      	b.n	83460 <__adddf3+0x138>
   835e2:	bf00      	nop

000835e4 <__aeabi_f2d>:
   835e4:	0042      	lsls	r2, r0, #1
   835e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   835ea:	ea4f 0131 	mov.w	r1, r1, rrx
   835ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   835f2:	bf1f      	itttt	ne
   835f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   835f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   835fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83600:	4770      	bxne	lr
   83602:	f092 0f00 	teq	r2, #0
   83606:	bf14      	ite	ne
   83608:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8360c:	4770      	bxeq	lr
   8360e:	b530      	push	{r4, r5, lr}
   83610:	f44f 7460 	mov.w	r4, #896	; 0x380
   83614:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8361c:	e720      	b.n	83460 <__adddf3+0x138>
   8361e:	bf00      	nop

00083620 <__aeabi_ul2d>:
   83620:	ea50 0201 	orrs.w	r2, r0, r1
   83624:	bf08      	it	eq
   83626:	4770      	bxeq	lr
   83628:	b530      	push	{r4, r5, lr}
   8362a:	f04f 0500 	mov.w	r5, #0
   8362e:	e00a      	b.n	83646 <__aeabi_l2d+0x16>

00083630 <__aeabi_l2d>:
   83630:	ea50 0201 	orrs.w	r2, r0, r1
   83634:	bf08      	it	eq
   83636:	4770      	bxeq	lr
   83638:	b530      	push	{r4, r5, lr}
   8363a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8363e:	d502      	bpl.n	83646 <__aeabi_l2d+0x16>
   83640:	4240      	negs	r0, r0
   83642:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83646:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8364a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8364e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83652:	f43f aedc 	beq.w	8340e <__adddf3+0xe6>
   83656:	f04f 0203 	mov.w	r2, #3
   8365a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8365e:	bf18      	it	ne
   83660:	3203      	addne	r2, #3
   83662:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83666:	bf18      	it	ne
   83668:	3203      	addne	r2, #3
   8366a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8366e:	f1c2 0320 	rsb	r3, r2, #32
   83672:	fa00 fc03 	lsl.w	ip, r0, r3
   83676:	fa20 f002 	lsr.w	r0, r0, r2
   8367a:	fa01 fe03 	lsl.w	lr, r1, r3
   8367e:	ea40 000e 	orr.w	r0, r0, lr
   83682:	fa21 f102 	lsr.w	r1, r1, r2
   83686:	4414      	add	r4, r2
   83688:	e6c1      	b.n	8340e <__adddf3+0xe6>
   8368a:	bf00      	nop

0008368c <__aeabi_uldivmod>:
   8368c:	b953      	cbnz	r3, 836a4 <__aeabi_uldivmod+0x18>
   8368e:	b94a      	cbnz	r2, 836a4 <__aeabi_uldivmod+0x18>
   83690:	2900      	cmp	r1, #0
   83692:	bf08      	it	eq
   83694:	2800      	cmpeq	r0, #0
   83696:	bf1c      	itt	ne
   83698:	f04f 31ff 	movne.w	r1, #4294967295
   8369c:	f04f 30ff 	movne.w	r0, #4294967295
   836a0:	f000 b97a 	b.w	83998 <__aeabi_idiv0>
   836a4:	f1ad 0c08 	sub.w	ip, sp, #8
   836a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   836ac:	f000 f806 	bl	836bc <__udivmoddi4>
   836b0:	f8dd e004 	ldr.w	lr, [sp, #4]
   836b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   836b8:	b004      	add	sp, #16
   836ba:	4770      	bx	lr

000836bc <__udivmoddi4>:
   836bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   836c0:	468c      	mov	ip, r1
   836c2:	460e      	mov	r6, r1
   836c4:	4604      	mov	r4, r0
   836c6:	9d08      	ldr	r5, [sp, #32]
   836c8:	2b00      	cmp	r3, #0
   836ca:	d150      	bne.n	8376e <__udivmoddi4+0xb2>
   836cc:	428a      	cmp	r2, r1
   836ce:	4617      	mov	r7, r2
   836d0:	d96c      	bls.n	837ac <__udivmoddi4+0xf0>
   836d2:	fab2 fe82 	clz	lr, r2
   836d6:	f1be 0f00 	cmp.w	lr, #0
   836da:	d00b      	beq.n	836f4 <__udivmoddi4+0x38>
   836dc:	f1ce 0c20 	rsb	ip, lr, #32
   836e0:	fa01 f60e 	lsl.w	r6, r1, lr
   836e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   836e8:	fa02 f70e 	lsl.w	r7, r2, lr
   836ec:	ea4c 0c06 	orr.w	ip, ip, r6
   836f0:	fa00 f40e 	lsl.w	r4, r0, lr
   836f4:	0c3a      	lsrs	r2, r7, #16
   836f6:	fbbc f9f2 	udiv	r9, ip, r2
   836fa:	b2bb      	uxth	r3, r7
   836fc:	fb02 cc19 	mls	ip, r2, r9, ip
   83700:	fb09 fa03 	mul.w	sl, r9, r3
   83704:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83708:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8370c:	45b2      	cmp	sl, r6
   8370e:	d90a      	bls.n	83726 <__udivmoddi4+0x6a>
   83710:	19f6      	adds	r6, r6, r7
   83712:	f109 31ff 	add.w	r1, r9, #4294967295
   83716:	f080 8125 	bcs.w	83964 <__udivmoddi4+0x2a8>
   8371a:	45b2      	cmp	sl, r6
   8371c:	f240 8122 	bls.w	83964 <__udivmoddi4+0x2a8>
   83720:	f1a9 0902 	sub.w	r9, r9, #2
   83724:	443e      	add	r6, r7
   83726:	eba6 060a 	sub.w	r6, r6, sl
   8372a:	fbb6 f0f2 	udiv	r0, r6, r2
   8372e:	fb02 6610 	mls	r6, r2, r0, r6
   83732:	fb00 f303 	mul.w	r3, r0, r3
   83736:	b2a4      	uxth	r4, r4
   83738:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8373c:	42a3      	cmp	r3, r4
   8373e:	d909      	bls.n	83754 <__udivmoddi4+0x98>
   83740:	19e4      	adds	r4, r4, r7
   83742:	f100 32ff 	add.w	r2, r0, #4294967295
   83746:	f080 810b 	bcs.w	83960 <__udivmoddi4+0x2a4>
   8374a:	42a3      	cmp	r3, r4
   8374c:	f240 8108 	bls.w	83960 <__udivmoddi4+0x2a4>
   83750:	3802      	subs	r0, #2
   83752:	443c      	add	r4, r7
   83754:	2100      	movs	r1, #0
   83756:	1ae4      	subs	r4, r4, r3
   83758:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8375c:	2d00      	cmp	r5, #0
   8375e:	d062      	beq.n	83826 <__udivmoddi4+0x16a>
   83760:	2300      	movs	r3, #0
   83762:	fa24 f40e 	lsr.w	r4, r4, lr
   83766:	602c      	str	r4, [r5, #0]
   83768:	606b      	str	r3, [r5, #4]
   8376a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8376e:	428b      	cmp	r3, r1
   83770:	d907      	bls.n	83782 <__udivmoddi4+0xc6>
   83772:	2d00      	cmp	r5, #0
   83774:	d055      	beq.n	83822 <__udivmoddi4+0x166>
   83776:	2100      	movs	r1, #0
   83778:	e885 0041 	stmia.w	r5, {r0, r6}
   8377c:	4608      	mov	r0, r1
   8377e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83782:	fab3 f183 	clz	r1, r3
   83786:	2900      	cmp	r1, #0
   83788:	f040 808f 	bne.w	838aa <__udivmoddi4+0x1ee>
   8378c:	42b3      	cmp	r3, r6
   8378e:	d302      	bcc.n	83796 <__udivmoddi4+0xda>
   83790:	4282      	cmp	r2, r0
   83792:	f200 80fc 	bhi.w	8398e <__udivmoddi4+0x2d2>
   83796:	1a84      	subs	r4, r0, r2
   83798:	eb66 0603 	sbc.w	r6, r6, r3
   8379c:	2001      	movs	r0, #1
   8379e:	46b4      	mov	ip, r6
   837a0:	2d00      	cmp	r5, #0
   837a2:	d040      	beq.n	83826 <__udivmoddi4+0x16a>
   837a4:	e885 1010 	stmia.w	r5, {r4, ip}
   837a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   837ac:	b912      	cbnz	r2, 837b4 <__udivmoddi4+0xf8>
   837ae:	2701      	movs	r7, #1
   837b0:	fbb7 f7f2 	udiv	r7, r7, r2
   837b4:	fab7 fe87 	clz	lr, r7
   837b8:	f1be 0f00 	cmp.w	lr, #0
   837bc:	d135      	bne.n	8382a <__udivmoddi4+0x16e>
   837be:	2101      	movs	r1, #1
   837c0:	1bf6      	subs	r6, r6, r7
   837c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   837c6:	fa1f f887 	uxth.w	r8, r7
   837ca:	fbb6 f2fc 	udiv	r2, r6, ip
   837ce:	fb0c 6612 	mls	r6, ip, r2, r6
   837d2:	fb08 f002 	mul.w	r0, r8, r2
   837d6:	0c23      	lsrs	r3, r4, #16
   837d8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   837dc:	42b0      	cmp	r0, r6
   837de:	d907      	bls.n	837f0 <__udivmoddi4+0x134>
   837e0:	19f6      	adds	r6, r6, r7
   837e2:	f102 33ff 	add.w	r3, r2, #4294967295
   837e6:	d202      	bcs.n	837ee <__udivmoddi4+0x132>
   837e8:	42b0      	cmp	r0, r6
   837ea:	f200 80d2 	bhi.w	83992 <__udivmoddi4+0x2d6>
   837ee:	461a      	mov	r2, r3
   837f0:	1a36      	subs	r6, r6, r0
   837f2:	fbb6 f0fc 	udiv	r0, r6, ip
   837f6:	fb0c 6610 	mls	r6, ip, r0, r6
   837fa:	fb08 f800 	mul.w	r8, r8, r0
   837fe:	b2a3      	uxth	r3, r4
   83800:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83804:	45a0      	cmp	r8, r4
   83806:	d907      	bls.n	83818 <__udivmoddi4+0x15c>
   83808:	19e4      	adds	r4, r4, r7
   8380a:	f100 33ff 	add.w	r3, r0, #4294967295
   8380e:	d202      	bcs.n	83816 <__udivmoddi4+0x15a>
   83810:	45a0      	cmp	r8, r4
   83812:	f200 80b9 	bhi.w	83988 <__udivmoddi4+0x2cc>
   83816:	4618      	mov	r0, r3
   83818:	eba4 0408 	sub.w	r4, r4, r8
   8381c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83820:	e79c      	b.n	8375c <__udivmoddi4+0xa0>
   83822:	4629      	mov	r1, r5
   83824:	4628      	mov	r0, r5
   83826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8382a:	fa07 f70e 	lsl.w	r7, r7, lr
   8382e:	f1ce 0320 	rsb	r3, lr, #32
   83832:	fa26 f203 	lsr.w	r2, r6, r3
   83836:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8383a:	fbb2 f1fc 	udiv	r1, r2, ip
   8383e:	fa1f f887 	uxth.w	r8, r7
   83842:	fb0c 2211 	mls	r2, ip, r1, r2
   83846:	fa06 f60e 	lsl.w	r6, r6, lr
   8384a:	fa20 f303 	lsr.w	r3, r0, r3
   8384e:	fb01 f908 	mul.w	r9, r1, r8
   83852:	4333      	orrs	r3, r6
   83854:	0c1e      	lsrs	r6, r3, #16
   83856:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8385a:	45b1      	cmp	r9, r6
   8385c:	fa00 f40e 	lsl.w	r4, r0, lr
   83860:	d909      	bls.n	83876 <__udivmoddi4+0x1ba>
   83862:	19f6      	adds	r6, r6, r7
   83864:	f101 32ff 	add.w	r2, r1, #4294967295
   83868:	f080 808c 	bcs.w	83984 <__udivmoddi4+0x2c8>
   8386c:	45b1      	cmp	r9, r6
   8386e:	f240 8089 	bls.w	83984 <__udivmoddi4+0x2c8>
   83872:	3902      	subs	r1, #2
   83874:	443e      	add	r6, r7
   83876:	eba6 0609 	sub.w	r6, r6, r9
   8387a:	fbb6 f0fc 	udiv	r0, r6, ip
   8387e:	fb0c 6210 	mls	r2, ip, r0, r6
   83882:	fb00 f908 	mul.w	r9, r0, r8
   83886:	b29e      	uxth	r6, r3
   83888:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8388c:	45b1      	cmp	r9, r6
   8388e:	d907      	bls.n	838a0 <__udivmoddi4+0x1e4>
   83890:	19f6      	adds	r6, r6, r7
   83892:	f100 33ff 	add.w	r3, r0, #4294967295
   83896:	d271      	bcs.n	8397c <__udivmoddi4+0x2c0>
   83898:	45b1      	cmp	r9, r6
   8389a:	d96f      	bls.n	8397c <__udivmoddi4+0x2c0>
   8389c:	3802      	subs	r0, #2
   8389e:	443e      	add	r6, r7
   838a0:	eba6 0609 	sub.w	r6, r6, r9
   838a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   838a8:	e78f      	b.n	837ca <__udivmoddi4+0x10e>
   838aa:	f1c1 0720 	rsb	r7, r1, #32
   838ae:	fa22 f807 	lsr.w	r8, r2, r7
   838b2:	408b      	lsls	r3, r1
   838b4:	ea48 0303 	orr.w	r3, r8, r3
   838b8:	fa26 f407 	lsr.w	r4, r6, r7
   838bc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   838c0:	fbb4 f9fe 	udiv	r9, r4, lr
   838c4:	fa1f fc83 	uxth.w	ip, r3
   838c8:	fb0e 4419 	mls	r4, lr, r9, r4
   838cc:	408e      	lsls	r6, r1
   838ce:	fa20 f807 	lsr.w	r8, r0, r7
   838d2:	fb09 fa0c 	mul.w	sl, r9, ip
   838d6:	ea48 0806 	orr.w	r8, r8, r6
   838da:	ea4f 4618 	mov.w	r6, r8, lsr #16
   838de:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   838e2:	45a2      	cmp	sl, r4
   838e4:	fa02 f201 	lsl.w	r2, r2, r1
   838e8:	fa00 f601 	lsl.w	r6, r0, r1
   838ec:	d908      	bls.n	83900 <__udivmoddi4+0x244>
   838ee:	18e4      	adds	r4, r4, r3
   838f0:	f109 30ff 	add.w	r0, r9, #4294967295
   838f4:	d244      	bcs.n	83980 <__udivmoddi4+0x2c4>
   838f6:	45a2      	cmp	sl, r4
   838f8:	d942      	bls.n	83980 <__udivmoddi4+0x2c4>
   838fa:	f1a9 0902 	sub.w	r9, r9, #2
   838fe:	441c      	add	r4, r3
   83900:	eba4 040a 	sub.w	r4, r4, sl
   83904:	fbb4 f0fe 	udiv	r0, r4, lr
   83908:	fb0e 4410 	mls	r4, lr, r0, r4
   8390c:	fb00 fc0c 	mul.w	ip, r0, ip
   83910:	fa1f f888 	uxth.w	r8, r8
   83914:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83918:	45a4      	cmp	ip, r4
   8391a:	d907      	bls.n	8392c <__udivmoddi4+0x270>
   8391c:	18e4      	adds	r4, r4, r3
   8391e:	f100 3eff 	add.w	lr, r0, #4294967295
   83922:	d229      	bcs.n	83978 <__udivmoddi4+0x2bc>
   83924:	45a4      	cmp	ip, r4
   83926:	d927      	bls.n	83978 <__udivmoddi4+0x2bc>
   83928:	3802      	subs	r0, #2
   8392a:	441c      	add	r4, r3
   8392c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83930:	fba0 8902 	umull	r8, r9, r0, r2
   83934:	eba4 0c0c 	sub.w	ip, r4, ip
   83938:	45cc      	cmp	ip, r9
   8393a:	46c2      	mov	sl, r8
   8393c:	46ce      	mov	lr, r9
   8393e:	d315      	bcc.n	8396c <__udivmoddi4+0x2b0>
   83940:	d012      	beq.n	83968 <__udivmoddi4+0x2ac>
   83942:	b155      	cbz	r5, 8395a <__udivmoddi4+0x29e>
   83944:	ebb6 030a 	subs.w	r3, r6, sl
   83948:	eb6c 060e 	sbc.w	r6, ip, lr
   8394c:	fa06 f707 	lsl.w	r7, r6, r7
   83950:	40cb      	lsrs	r3, r1
   83952:	431f      	orrs	r7, r3
   83954:	40ce      	lsrs	r6, r1
   83956:	602f      	str	r7, [r5, #0]
   83958:	606e      	str	r6, [r5, #4]
   8395a:	2100      	movs	r1, #0
   8395c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83960:	4610      	mov	r0, r2
   83962:	e6f7      	b.n	83754 <__udivmoddi4+0x98>
   83964:	4689      	mov	r9, r1
   83966:	e6de      	b.n	83726 <__udivmoddi4+0x6a>
   83968:	4546      	cmp	r6, r8
   8396a:	d2ea      	bcs.n	83942 <__udivmoddi4+0x286>
   8396c:	ebb8 0a02 	subs.w	sl, r8, r2
   83970:	eb69 0e03 	sbc.w	lr, r9, r3
   83974:	3801      	subs	r0, #1
   83976:	e7e4      	b.n	83942 <__udivmoddi4+0x286>
   83978:	4670      	mov	r0, lr
   8397a:	e7d7      	b.n	8392c <__udivmoddi4+0x270>
   8397c:	4618      	mov	r0, r3
   8397e:	e78f      	b.n	838a0 <__udivmoddi4+0x1e4>
   83980:	4681      	mov	r9, r0
   83982:	e7bd      	b.n	83900 <__udivmoddi4+0x244>
   83984:	4611      	mov	r1, r2
   83986:	e776      	b.n	83876 <__udivmoddi4+0x1ba>
   83988:	3802      	subs	r0, #2
   8398a:	443c      	add	r4, r7
   8398c:	e744      	b.n	83818 <__udivmoddi4+0x15c>
   8398e:	4608      	mov	r0, r1
   83990:	e706      	b.n	837a0 <__udivmoddi4+0xe4>
   83992:	3a02      	subs	r2, #2
   83994:	443e      	add	r6, r7
   83996:	e72b      	b.n	837f0 <__udivmoddi4+0x134>

00083998 <__aeabi_idiv0>:
   83998:	4770      	bx	lr
   8399a:	bf00      	nop

0008399c <__libc_init_array>:
   8399c:	b570      	push	{r4, r5, r6, lr}
   8399e:	4e0f      	ldr	r6, [pc, #60]	; (839dc <__libc_init_array+0x40>)
   839a0:	4d0f      	ldr	r5, [pc, #60]	; (839e0 <__libc_init_array+0x44>)
   839a2:	1b76      	subs	r6, r6, r5
   839a4:	10b6      	asrs	r6, r6, #2
   839a6:	bf18      	it	ne
   839a8:	2400      	movne	r4, #0
   839aa:	d005      	beq.n	839b8 <__libc_init_array+0x1c>
   839ac:	3401      	adds	r4, #1
   839ae:	f855 3b04 	ldr.w	r3, [r5], #4
   839b2:	4798      	blx	r3
   839b4:	42a6      	cmp	r6, r4
   839b6:	d1f9      	bne.n	839ac <__libc_init_array+0x10>
   839b8:	4e0a      	ldr	r6, [pc, #40]	; (839e4 <__libc_init_array+0x48>)
   839ba:	4d0b      	ldr	r5, [pc, #44]	; (839e8 <__libc_init_array+0x4c>)
   839bc:	f004 fdc8 	bl	88550 <_init>
   839c0:	1b76      	subs	r6, r6, r5
   839c2:	10b6      	asrs	r6, r6, #2
   839c4:	bf18      	it	ne
   839c6:	2400      	movne	r4, #0
   839c8:	d006      	beq.n	839d8 <__libc_init_array+0x3c>
   839ca:	3401      	adds	r4, #1
   839cc:	f855 3b04 	ldr.w	r3, [r5], #4
   839d0:	4798      	blx	r3
   839d2:	42a6      	cmp	r6, r4
   839d4:	d1f9      	bne.n	839ca <__libc_init_array+0x2e>
   839d6:	bd70      	pop	{r4, r5, r6, pc}
   839d8:	bd70      	pop	{r4, r5, r6, pc}
   839da:	bf00      	nop
   839dc:	0008855c 	.word	0x0008855c
   839e0:	0008855c 	.word	0x0008855c
   839e4:	00088564 	.word	0x00088564
   839e8:	0008855c 	.word	0x0008855c

000839ec <memcpy>:
   839ec:	4684      	mov	ip, r0
   839ee:	ea41 0300 	orr.w	r3, r1, r0
   839f2:	f013 0303 	ands.w	r3, r3, #3
   839f6:	d149      	bne.n	83a8c <memcpy+0xa0>
   839f8:	3a40      	subs	r2, #64	; 0x40
   839fa:	d323      	bcc.n	83a44 <memcpy+0x58>
   839fc:	680b      	ldr	r3, [r1, #0]
   839fe:	6003      	str	r3, [r0, #0]
   83a00:	684b      	ldr	r3, [r1, #4]
   83a02:	6043      	str	r3, [r0, #4]
   83a04:	688b      	ldr	r3, [r1, #8]
   83a06:	6083      	str	r3, [r0, #8]
   83a08:	68cb      	ldr	r3, [r1, #12]
   83a0a:	60c3      	str	r3, [r0, #12]
   83a0c:	690b      	ldr	r3, [r1, #16]
   83a0e:	6103      	str	r3, [r0, #16]
   83a10:	694b      	ldr	r3, [r1, #20]
   83a12:	6143      	str	r3, [r0, #20]
   83a14:	698b      	ldr	r3, [r1, #24]
   83a16:	6183      	str	r3, [r0, #24]
   83a18:	69cb      	ldr	r3, [r1, #28]
   83a1a:	61c3      	str	r3, [r0, #28]
   83a1c:	6a0b      	ldr	r3, [r1, #32]
   83a1e:	6203      	str	r3, [r0, #32]
   83a20:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83a22:	6243      	str	r3, [r0, #36]	; 0x24
   83a24:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83a26:	6283      	str	r3, [r0, #40]	; 0x28
   83a28:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83a2a:	62c3      	str	r3, [r0, #44]	; 0x2c
   83a2c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83a2e:	6303      	str	r3, [r0, #48]	; 0x30
   83a30:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83a32:	6343      	str	r3, [r0, #52]	; 0x34
   83a34:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83a36:	6383      	str	r3, [r0, #56]	; 0x38
   83a38:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83a3a:	63c3      	str	r3, [r0, #60]	; 0x3c
   83a3c:	3040      	adds	r0, #64	; 0x40
   83a3e:	3140      	adds	r1, #64	; 0x40
   83a40:	3a40      	subs	r2, #64	; 0x40
   83a42:	d2db      	bcs.n	839fc <memcpy+0x10>
   83a44:	3230      	adds	r2, #48	; 0x30
   83a46:	d30b      	bcc.n	83a60 <memcpy+0x74>
   83a48:	680b      	ldr	r3, [r1, #0]
   83a4a:	6003      	str	r3, [r0, #0]
   83a4c:	684b      	ldr	r3, [r1, #4]
   83a4e:	6043      	str	r3, [r0, #4]
   83a50:	688b      	ldr	r3, [r1, #8]
   83a52:	6083      	str	r3, [r0, #8]
   83a54:	68cb      	ldr	r3, [r1, #12]
   83a56:	60c3      	str	r3, [r0, #12]
   83a58:	3010      	adds	r0, #16
   83a5a:	3110      	adds	r1, #16
   83a5c:	3a10      	subs	r2, #16
   83a5e:	d2f3      	bcs.n	83a48 <memcpy+0x5c>
   83a60:	320c      	adds	r2, #12
   83a62:	d305      	bcc.n	83a70 <memcpy+0x84>
   83a64:	f851 3b04 	ldr.w	r3, [r1], #4
   83a68:	f840 3b04 	str.w	r3, [r0], #4
   83a6c:	3a04      	subs	r2, #4
   83a6e:	d2f9      	bcs.n	83a64 <memcpy+0x78>
   83a70:	3204      	adds	r2, #4
   83a72:	d008      	beq.n	83a86 <memcpy+0x9a>
   83a74:	07d2      	lsls	r2, r2, #31
   83a76:	bf1c      	itt	ne
   83a78:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83a7c:	f800 3b01 	strbne.w	r3, [r0], #1
   83a80:	d301      	bcc.n	83a86 <memcpy+0x9a>
   83a82:	880b      	ldrh	r3, [r1, #0]
   83a84:	8003      	strh	r3, [r0, #0]
   83a86:	4660      	mov	r0, ip
   83a88:	4770      	bx	lr
   83a8a:	bf00      	nop
   83a8c:	2a08      	cmp	r2, #8
   83a8e:	d313      	bcc.n	83ab8 <memcpy+0xcc>
   83a90:	078b      	lsls	r3, r1, #30
   83a92:	d0b1      	beq.n	839f8 <memcpy+0xc>
   83a94:	f010 0303 	ands.w	r3, r0, #3
   83a98:	d0ae      	beq.n	839f8 <memcpy+0xc>
   83a9a:	f1c3 0304 	rsb	r3, r3, #4
   83a9e:	1ad2      	subs	r2, r2, r3
   83aa0:	07db      	lsls	r3, r3, #31
   83aa2:	bf1c      	itt	ne
   83aa4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83aa8:	f800 3b01 	strbne.w	r3, [r0], #1
   83aac:	d3a4      	bcc.n	839f8 <memcpy+0xc>
   83aae:	f831 3b02 	ldrh.w	r3, [r1], #2
   83ab2:	f820 3b02 	strh.w	r3, [r0], #2
   83ab6:	e79f      	b.n	839f8 <memcpy+0xc>
   83ab8:	3a04      	subs	r2, #4
   83aba:	d3d9      	bcc.n	83a70 <memcpy+0x84>
   83abc:	3a01      	subs	r2, #1
   83abe:	f811 3b01 	ldrb.w	r3, [r1], #1
   83ac2:	f800 3b01 	strb.w	r3, [r0], #1
   83ac6:	d2f9      	bcs.n	83abc <memcpy+0xd0>
   83ac8:	780b      	ldrb	r3, [r1, #0]
   83aca:	7003      	strb	r3, [r0, #0]
   83acc:	784b      	ldrb	r3, [r1, #1]
   83ace:	7043      	strb	r3, [r0, #1]
   83ad0:	788b      	ldrb	r3, [r1, #2]
   83ad2:	7083      	strb	r3, [r0, #2]
   83ad4:	4660      	mov	r0, ip
   83ad6:	4770      	bx	lr

00083ad8 <memset>:
   83ad8:	b470      	push	{r4, r5, r6}
   83ada:	0786      	lsls	r6, r0, #30
   83adc:	d046      	beq.n	83b6c <memset+0x94>
   83ade:	1e54      	subs	r4, r2, #1
   83ae0:	2a00      	cmp	r2, #0
   83ae2:	d041      	beq.n	83b68 <memset+0x90>
   83ae4:	b2ca      	uxtb	r2, r1
   83ae6:	4603      	mov	r3, r0
   83ae8:	e002      	b.n	83af0 <memset+0x18>
   83aea:	f114 34ff 	adds.w	r4, r4, #4294967295
   83aee:	d33b      	bcc.n	83b68 <memset+0x90>
   83af0:	f803 2b01 	strb.w	r2, [r3], #1
   83af4:	079d      	lsls	r5, r3, #30
   83af6:	d1f8      	bne.n	83aea <memset+0x12>
   83af8:	2c03      	cmp	r4, #3
   83afa:	d92e      	bls.n	83b5a <memset+0x82>
   83afc:	b2cd      	uxtb	r5, r1
   83afe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83b02:	2c0f      	cmp	r4, #15
   83b04:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83b08:	d919      	bls.n	83b3e <memset+0x66>
   83b0a:	4626      	mov	r6, r4
   83b0c:	f103 0210 	add.w	r2, r3, #16
   83b10:	3e10      	subs	r6, #16
   83b12:	2e0f      	cmp	r6, #15
   83b14:	f842 5c10 	str.w	r5, [r2, #-16]
   83b18:	f842 5c0c 	str.w	r5, [r2, #-12]
   83b1c:	f842 5c08 	str.w	r5, [r2, #-8]
   83b20:	f842 5c04 	str.w	r5, [r2, #-4]
   83b24:	f102 0210 	add.w	r2, r2, #16
   83b28:	d8f2      	bhi.n	83b10 <memset+0x38>
   83b2a:	f1a4 0210 	sub.w	r2, r4, #16
   83b2e:	f022 020f 	bic.w	r2, r2, #15
   83b32:	f004 040f 	and.w	r4, r4, #15
   83b36:	3210      	adds	r2, #16
   83b38:	2c03      	cmp	r4, #3
   83b3a:	4413      	add	r3, r2
   83b3c:	d90d      	bls.n	83b5a <memset+0x82>
   83b3e:	461e      	mov	r6, r3
   83b40:	4622      	mov	r2, r4
   83b42:	3a04      	subs	r2, #4
   83b44:	2a03      	cmp	r2, #3
   83b46:	f846 5b04 	str.w	r5, [r6], #4
   83b4a:	d8fa      	bhi.n	83b42 <memset+0x6a>
   83b4c:	1f22      	subs	r2, r4, #4
   83b4e:	f022 0203 	bic.w	r2, r2, #3
   83b52:	3204      	adds	r2, #4
   83b54:	4413      	add	r3, r2
   83b56:	f004 0403 	and.w	r4, r4, #3
   83b5a:	b12c      	cbz	r4, 83b68 <memset+0x90>
   83b5c:	b2c9      	uxtb	r1, r1
   83b5e:	441c      	add	r4, r3
   83b60:	f803 1b01 	strb.w	r1, [r3], #1
   83b64:	429c      	cmp	r4, r3
   83b66:	d1fb      	bne.n	83b60 <memset+0x88>
   83b68:	bc70      	pop	{r4, r5, r6}
   83b6a:	4770      	bx	lr
   83b6c:	4614      	mov	r4, r2
   83b6e:	4603      	mov	r3, r0
   83b70:	e7c2      	b.n	83af8 <memset+0x20>
   83b72:	bf00      	nop

00083b74 <setbuf>:
   83b74:	2900      	cmp	r1, #0
   83b76:	bf0c      	ite	eq
   83b78:	2202      	moveq	r2, #2
   83b7a:	2200      	movne	r2, #0
   83b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83b80:	f000 b800 	b.w	83b84 <setvbuf>

00083b84 <setvbuf>:
   83b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83b88:	4d61      	ldr	r5, [pc, #388]	; (83d10 <setvbuf+0x18c>)
   83b8a:	b083      	sub	sp, #12
   83b8c:	682d      	ldr	r5, [r5, #0]
   83b8e:	4604      	mov	r4, r0
   83b90:	460f      	mov	r7, r1
   83b92:	4690      	mov	r8, r2
   83b94:	461e      	mov	r6, r3
   83b96:	b115      	cbz	r5, 83b9e <setvbuf+0x1a>
   83b98:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83b9a:	2b00      	cmp	r3, #0
   83b9c:	d064      	beq.n	83c68 <setvbuf+0xe4>
   83b9e:	f1b8 0f02 	cmp.w	r8, #2
   83ba2:	d006      	beq.n	83bb2 <setvbuf+0x2e>
   83ba4:	f1b8 0f01 	cmp.w	r8, #1
   83ba8:	f200 809f 	bhi.w	83cea <setvbuf+0x166>
   83bac:	2e00      	cmp	r6, #0
   83bae:	f2c0 809c 	blt.w	83cea <setvbuf+0x166>
   83bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83bb4:	07d8      	lsls	r0, r3, #31
   83bb6:	d534      	bpl.n	83c22 <setvbuf+0x9e>
   83bb8:	4621      	mov	r1, r4
   83bba:	4628      	mov	r0, r5
   83bbc:	f002 fbb2 	bl	86324 <_fflush_r>
   83bc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83bc2:	b141      	cbz	r1, 83bd6 <setvbuf+0x52>
   83bc4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83bc8:	4299      	cmp	r1, r3
   83bca:	d002      	beq.n	83bd2 <setvbuf+0x4e>
   83bcc:	4628      	mov	r0, r5
   83bce:	f002 fca7 	bl	86520 <_free_r>
   83bd2:	2300      	movs	r3, #0
   83bd4:	6323      	str	r3, [r4, #48]	; 0x30
   83bd6:	2200      	movs	r2, #0
   83bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83bdc:	61a2      	str	r2, [r4, #24]
   83bde:	6062      	str	r2, [r4, #4]
   83be0:	061a      	lsls	r2, r3, #24
   83be2:	d43a      	bmi.n	83c5a <setvbuf+0xd6>
   83be4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   83be8:	f023 0303 	bic.w	r3, r3, #3
   83bec:	f1b8 0f02 	cmp.w	r8, #2
   83bf0:	81a3      	strh	r3, [r4, #12]
   83bf2:	d01d      	beq.n	83c30 <setvbuf+0xac>
   83bf4:	ab01      	add	r3, sp, #4
   83bf6:	466a      	mov	r2, sp
   83bf8:	4621      	mov	r1, r4
   83bfa:	4628      	mov	r0, r5
   83bfc:	f002 fdb4 	bl	86768 <__swhatbuf_r>
   83c00:	89a3      	ldrh	r3, [r4, #12]
   83c02:	4318      	orrs	r0, r3
   83c04:	81a0      	strh	r0, [r4, #12]
   83c06:	2e00      	cmp	r6, #0
   83c08:	d132      	bne.n	83c70 <setvbuf+0xec>
   83c0a:	9e00      	ldr	r6, [sp, #0]
   83c0c:	4630      	mov	r0, r6
   83c0e:	f002 fdd9 	bl	867c4 <malloc>
   83c12:	4607      	mov	r7, r0
   83c14:	2800      	cmp	r0, #0
   83c16:	d06b      	beq.n	83cf0 <setvbuf+0x16c>
   83c18:	89a3      	ldrh	r3, [r4, #12]
   83c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83c1e:	81a3      	strh	r3, [r4, #12]
   83c20:	e028      	b.n	83c74 <setvbuf+0xf0>
   83c22:	89a3      	ldrh	r3, [r4, #12]
   83c24:	0599      	lsls	r1, r3, #22
   83c26:	d4c7      	bmi.n	83bb8 <setvbuf+0x34>
   83c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c2a:	f002 fd99 	bl	86760 <__retarget_lock_acquire_recursive>
   83c2e:	e7c3      	b.n	83bb8 <setvbuf+0x34>
   83c30:	2500      	movs	r5, #0
   83c32:	2600      	movs	r6, #0
   83c34:	2001      	movs	r0, #1
   83c36:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83c3c:	f043 0302 	orr.w	r3, r3, #2
   83c40:	60a6      	str	r6, [r4, #8]
   83c42:	07ce      	lsls	r6, r1, #31
   83c44:	81a3      	strh	r3, [r4, #12]
   83c46:	6160      	str	r0, [r4, #20]
   83c48:	6022      	str	r2, [r4, #0]
   83c4a:	6122      	str	r2, [r4, #16]
   83c4c:	d401      	bmi.n	83c52 <setvbuf+0xce>
   83c4e:	0598      	lsls	r0, r3, #22
   83c50:	d53e      	bpl.n	83cd0 <setvbuf+0x14c>
   83c52:	4628      	mov	r0, r5
   83c54:	b003      	add	sp, #12
   83c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83c5a:	6921      	ldr	r1, [r4, #16]
   83c5c:	4628      	mov	r0, r5
   83c5e:	f002 fc5f 	bl	86520 <_free_r>
   83c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c66:	e7bd      	b.n	83be4 <setvbuf+0x60>
   83c68:	4628      	mov	r0, r5
   83c6a:	f002 fbb3 	bl	863d4 <__sinit>
   83c6e:	e796      	b.n	83b9e <setvbuf+0x1a>
   83c70:	2f00      	cmp	r7, #0
   83c72:	d0cb      	beq.n	83c0c <setvbuf+0x88>
   83c74:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83c76:	2b00      	cmp	r3, #0
   83c78:	d033      	beq.n	83ce2 <setvbuf+0x15e>
   83c7a:	9b00      	ldr	r3, [sp, #0]
   83c7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83c80:	429e      	cmp	r6, r3
   83c82:	bf1c      	itt	ne
   83c84:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   83c88:	81a2      	strhne	r2, [r4, #12]
   83c8a:	f1b8 0f01 	cmp.w	r8, #1
   83c8e:	bf04      	itt	eq
   83c90:	f042 0201 	orreq.w	r2, r2, #1
   83c94:	81a2      	strheq	r2, [r4, #12]
   83c96:	b292      	uxth	r2, r2
   83c98:	f012 0308 	ands.w	r3, r2, #8
   83c9c:	6027      	str	r7, [r4, #0]
   83c9e:	6127      	str	r7, [r4, #16]
   83ca0:	6166      	str	r6, [r4, #20]
   83ca2:	d00e      	beq.n	83cc2 <setvbuf+0x13e>
   83ca4:	07d1      	lsls	r1, r2, #31
   83ca6:	d51a      	bpl.n	83cde <setvbuf+0x15a>
   83ca8:	2300      	movs	r3, #0
   83caa:	6e65      	ldr	r5, [r4, #100]	; 0x64
   83cac:	4276      	negs	r6, r6
   83cae:	f015 0501 	ands.w	r5, r5, #1
   83cb2:	61a6      	str	r6, [r4, #24]
   83cb4:	60a3      	str	r3, [r4, #8]
   83cb6:	d009      	beq.n	83ccc <setvbuf+0x148>
   83cb8:	2500      	movs	r5, #0
   83cba:	4628      	mov	r0, r5
   83cbc:	b003      	add	sp, #12
   83cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83cc2:	60a3      	str	r3, [r4, #8]
   83cc4:	6e65      	ldr	r5, [r4, #100]	; 0x64
   83cc6:	f015 0501 	ands.w	r5, r5, #1
   83cca:	d1f5      	bne.n	83cb8 <setvbuf+0x134>
   83ccc:	0593      	lsls	r3, r2, #22
   83cce:	d4c0      	bmi.n	83c52 <setvbuf+0xce>
   83cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83cd2:	f002 fd47 	bl	86764 <__retarget_lock_release_recursive>
   83cd6:	4628      	mov	r0, r5
   83cd8:	b003      	add	sp, #12
   83cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83cde:	60a6      	str	r6, [r4, #8]
   83ce0:	e7f0      	b.n	83cc4 <setvbuf+0x140>
   83ce2:	4628      	mov	r0, r5
   83ce4:	f002 fb76 	bl	863d4 <__sinit>
   83ce8:	e7c7      	b.n	83c7a <setvbuf+0xf6>
   83cea:	f04f 35ff 	mov.w	r5, #4294967295
   83cee:	e7b0      	b.n	83c52 <setvbuf+0xce>
   83cf0:	f8dd 9000 	ldr.w	r9, [sp]
   83cf4:	45b1      	cmp	r9, r6
   83cf6:	d004      	beq.n	83d02 <setvbuf+0x17e>
   83cf8:	4648      	mov	r0, r9
   83cfa:	f002 fd63 	bl	867c4 <malloc>
   83cfe:	4607      	mov	r7, r0
   83d00:	b920      	cbnz	r0, 83d0c <setvbuf+0x188>
   83d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83d06:	f04f 35ff 	mov.w	r5, #4294967295
   83d0a:	e792      	b.n	83c32 <setvbuf+0xae>
   83d0c:	464e      	mov	r6, r9
   83d0e:	e783      	b.n	83c18 <setvbuf+0x94>
   83d10:	20070278 	.word	0x20070278

00083d14 <sprintf>:
   83d14:	b40e      	push	{r1, r2, r3}
   83d16:	4601      	mov	r1, r0
   83d18:	b5f0      	push	{r4, r5, r6, r7, lr}
   83d1a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   83d1e:	f44f 7702 	mov.w	r7, #520	; 0x208
   83d22:	f64f 76ff 	movw	r6, #65535	; 0xffff
   83d26:	b09c      	sub	sp, #112	; 0x70
   83d28:	ac21      	add	r4, sp, #132	; 0x84
   83d2a:	f854 2b04 	ldr.w	r2, [r4], #4
   83d2e:	4b0b      	ldr	r3, [pc, #44]	; (83d5c <sprintf+0x48>)
   83d30:	9102      	str	r1, [sp, #8]
   83d32:	9106      	str	r1, [sp, #24]
   83d34:	6818      	ldr	r0, [r3, #0]
   83d36:	a902      	add	r1, sp, #8
   83d38:	4623      	mov	r3, r4
   83d3a:	9401      	str	r4, [sp, #4]
   83d3c:	f8ad 7014 	strh.w	r7, [sp, #20]
   83d40:	9504      	str	r5, [sp, #16]
   83d42:	9507      	str	r5, [sp, #28]
   83d44:	f8ad 6016 	strh.w	r6, [sp, #22]
   83d48:	f000 f80a 	bl	83d60 <_svfprintf_r>
   83d4c:	2200      	movs	r2, #0
   83d4e:	9b02      	ldr	r3, [sp, #8]
   83d50:	701a      	strb	r2, [r3, #0]
   83d52:	b01c      	add	sp, #112	; 0x70
   83d54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   83d58:	b003      	add	sp, #12
   83d5a:	4770      	bx	lr
   83d5c:	20070278 	.word	0x20070278

00083d60 <_svfprintf_r>:
   83d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d64:	b0c3      	sub	sp, #268	; 0x10c
   83d66:	460c      	mov	r4, r1
   83d68:	910b      	str	r1, [sp, #44]	; 0x2c
   83d6a:	4692      	mov	sl, r2
   83d6c:	930f      	str	r3, [sp, #60]	; 0x3c
   83d6e:	900c      	str	r0, [sp, #48]	; 0x30
   83d70:	f002 fce4 	bl	8673c <_localeconv_r>
   83d74:	6803      	ldr	r3, [r0, #0]
   83d76:	4618      	mov	r0, r3
   83d78:	931a      	str	r3, [sp, #104]	; 0x68
   83d7a:	f003 fb71 	bl	87460 <strlen>
   83d7e:	89a3      	ldrh	r3, [r4, #12]
   83d80:	9019      	str	r0, [sp, #100]	; 0x64
   83d82:	0619      	lsls	r1, r3, #24
   83d84:	d503      	bpl.n	83d8e <_svfprintf_r+0x2e>
   83d86:	6923      	ldr	r3, [r4, #16]
   83d88:	2b00      	cmp	r3, #0
   83d8a:	f001 8035 	beq.w	84df8 <_svfprintf_r+0x1098>
   83d8e:	2300      	movs	r3, #0
   83d90:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   83d94:	46c8      	mov	r8, r9
   83d96:	9315      	str	r3, [sp, #84]	; 0x54
   83d98:	9313      	str	r3, [sp, #76]	; 0x4c
   83d9a:	9314      	str	r3, [sp, #80]	; 0x50
   83d9c:	9318      	str	r3, [sp, #96]	; 0x60
   83d9e:	931b      	str	r3, [sp, #108]	; 0x6c
   83da0:	9309      	str	r3, [sp, #36]	; 0x24
   83da2:	9316      	str	r3, [sp, #88]	; 0x58
   83da4:	9317      	str	r3, [sp, #92]	; 0x5c
   83da6:	9327      	str	r3, [sp, #156]	; 0x9c
   83da8:	9326      	str	r3, [sp, #152]	; 0x98
   83daa:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   83dae:	f89a 3000 	ldrb.w	r3, [sl]
   83db2:	4654      	mov	r4, sl
   83db4:	b1eb      	cbz	r3, 83df2 <_svfprintf_r+0x92>
   83db6:	2b25      	cmp	r3, #37	; 0x25
   83db8:	d102      	bne.n	83dc0 <_svfprintf_r+0x60>
   83dba:	e01a      	b.n	83df2 <_svfprintf_r+0x92>
   83dbc:	2b25      	cmp	r3, #37	; 0x25
   83dbe:	d003      	beq.n	83dc8 <_svfprintf_r+0x68>
   83dc0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   83dc4:	2b00      	cmp	r3, #0
   83dc6:	d1f9      	bne.n	83dbc <_svfprintf_r+0x5c>
   83dc8:	eba4 050a 	sub.w	r5, r4, sl
   83dcc:	b18d      	cbz	r5, 83df2 <_svfprintf_r+0x92>
   83dce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83dd0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83dd2:	3301      	adds	r3, #1
   83dd4:	442a      	add	r2, r5
   83dd6:	2b07      	cmp	r3, #7
   83dd8:	f8c8 a000 	str.w	sl, [r8]
   83ddc:	f8c8 5004 	str.w	r5, [r8, #4]
   83de0:	9227      	str	r2, [sp, #156]	; 0x9c
   83de2:	9326      	str	r3, [sp, #152]	; 0x98
   83de4:	f300 808a 	bgt.w	83efc <_svfprintf_r+0x19c>
   83de8:	f108 0808 	add.w	r8, r8, #8
   83dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83dee:	442b      	add	r3, r5
   83df0:	9309      	str	r3, [sp, #36]	; 0x24
   83df2:	7823      	ldrb	r3, [r4, #0]
   83df4:	2b00      	cmp	r3, #0
   83df6:	f000 8089 	beq.w	83f0c <_svfprintf_r+0x1ac>
   83dfa:	2300      	movs	r3, #0
   83dfc:	f04f 30ff 	mov.w	r0, #4294967295
   83e00:	461a      	mov	r2, r3
   83e02:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83e06:	4619      	mov	r1, r3
   83e08:	930d      	str	r3, [sp, #52]	; 0x34
   83e0a:	469b      	mov	fp, r3
   83e0c:	7863      	ldrb	r3, [r4, #1]
   83e0e:	f104 0a01 	add.w	sl, r4, #1
   83e12:	900a      	str	r0, [sp, #40]	; 0x28
   83e14:	f10a 0a01 	add.w	sl, sl, #1
   83e18:	f1a3 0020 	sub.w	r0, r3, #32
   83e1c:	2858      	cmp	r0, #88	; 0x58
   83e1e:	f200 83b7 	bhi.w	84590 <_svfprintf_r+0x830>
   83e22:	e8df f010 	tbh	[pc, r0, lsl #1]
   83e26:	034c      	.short	0x034c
   83e28:	03b503b5 	.word	0x03b503b5
   83e2c:	03b50354 	.word	0x03b50354
   83e30:	03b503b5 	.word	0x03b503b5
   83e34:	03b503b5 	.word	0x03b503b5
   83e38:	005903b5 	.word	0x005903b5
   83e3c:	03b50359 	.word	0x03b50359
   83e40:	02140066 	.word	0x02140066
   83e44:	022f03b5 	.word	0x022f03b5
   83e48:	03a503a5 	.word	0x03a503a5
   83e4c:	03a503a5 	.word	0x03a503a5
   83e50:	03a503a5 	.word	0x03a503a5
   83e54:	03a503a5 	.word	0x03a503a5
   83e58:	03b503a5 	.word	0x03b503a5
   83e5c:	03b503b5 	.word	0x03b503b5
   83e60:	03b503b5 	.word	0x03b503b5
   83e64:	03b503b5 	.word	0x03b503b5
   83e68:	03b503b5 	.word	0x03b503b5
   83e6c:	028b03b5 	.word	0x028b03b5
   83e70:	03b502d3 	.word	0x03b502d3
   83e74:	03b502d3 	.word	0x03b502d3
   83e78:	03b503b5 	.word	0x03b503b5
   83e7c:	031b03b5 	.word	0x031b03b5
   83e80:	03b503b5 	.word	0x03b503b5
   83e84:	03b50320 	.word	0x03b50320
   83e88:	03b503b5 	.word	0x03b503b5
   83e8c:	03b503b5 	.word	0x03b503b5
   83e90:	03b50234 	.word	0x03b50234
   83e94:	024b03b5 	.word	0x024b03b5
   83e98:	03b503b5 	.word	0x03b503b5
   83e9c:	03b503b5 	.word	0x03b503b5
   83ea0:	03b503b5 	.word	0x03b503b5
   83ea4:	03b503b5 	.word	0x03b503b5
   83ea8:	03b503b5 	.word	0x03b503b5
   83eac:	039e0276 	.word	0x039e0276
   83eb0:	02d302d3 	.word	0x02d302d3
   83eb4:	036302d3 	.word	0x036302d3
   83eb8:	03b5039e 	.word	0x03b5039e
   83ebc:	036803b5 	.word	0x036803b5
   83ec0:	037503b5 	.word	0x037503b5
   83ec4:	038c01dd 	.word	0x038c01dd
   83ec8:	03b5035e 	.word	0x03b5035e
   83ecc:	03b501f2 	.word	0x03b501f2
   83ed0:	03b50087 	.word	0x03b50087
   83ed4:	033203b5 	.word	0x033203b5
   83ed8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83eda:	6823      	ldr	r3, [r4, #0]
   83edc:	4618      	mov	r0, r3
   83ede:	930d      	str	r3, [sp, #52]	; 0x34
   83ee0:	4623      	mov	r3, r4
   83ee2:	2800      	cmp	r0, #0
   83ee4:	f103 0304 	add.w	r3, r3, #4
   83ee8:	930f      	str	r3, [sp, #60]	; 0x3c
   83eea:	da04      	bge.n	83ef6 <_svfprintf_r+0x196>
   83eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83eee:	425b      	negs	r3, r3
   83ef0:	930d      	str	r3, [sp, #52]	; 0x34
   83ef2:	f04b 0b04 	orr.w	fp, fp, #4
   83ef6:	f89a 3000 	ldrb.w	r3, [sl]
   83efa:	e78b      	b.n	83e14 <_svfprintf_r+0xb4>
   83efc:	aa25      	add	r2, sp, #148	; 0x94
   83efe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83f00:	980c      	ldr	r0, [sp, #48]	; 0x30
   83f02:	f003 fadb 	bl	874bc <__ssprint_r>
   83f06:	b940      	cbnz	r0, 83f1a <_svfprintf_r+0x1ba>
   83f08:	46c8      	mov	r8, r9
   83f0a:	e76f      	b.n	83dec <_svfprintf_r+0x8c>
   83f0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   83f0e:	b123      	cbz	r3, 83f1a <_svfprintf_r+0x1ba>
   83f10:	980c      	ldr	r0, [sp, #48]	; 0x30
   83f12:	aa25      	add	r2, sp, #148	; 0x94
   83f14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83f16:	f003 fad1 	bl	874bc <__ssprint_r>
   83f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83f1c:	899b      	ldrh	r3, [r3, #12]
   83f1e:	f013 0f40 	tst.w	r3, #64	; 0x40
   83f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83f24:	bf18      	it	ne
   83f26:	f04f 33ff 	movne.w	r3, #4294967295
   83f2a:	9309      	str	r3, [sp, #36]	; 0x24
   83f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   83f2e:	b043      	add	sp, #268	; 0x10c
   83f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f34:	f01b 0f20 	tst.w	fp, #32
   83f38:	9311      	str	r3, [sp, #68]	; 0x44
   83f3a:	f040 81af 	bne.w	8429c <_svfprintf_r+0x53c>
   83f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83f40:	f01b 0f10 	tst.w	fp, #16
   83f44:	4613      	mov	r3, r2
   83f46:	f040 859a 	bne.w	84a7e <_svfprintf_r+0xd1e>
   83f4a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83f4e:	f000 8596 	beq.w	84a7e <_svfprintf_r+0xd1e>
   83f52:	2500      	movs	r5, #0
   83f54:	2301      	movs	r3, #1
   83f56:	8814      	ldrh	r4, [r2, #0]
   83f58:	3204      	adds	r2, #4
   83f5a:	920f      	str	r2, [sp, #60]	; 0x3c
   83f5c:	2200      	movs	r2, #0
   83f5e:	4617      	mov	r7, r2
   83f60:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   83f64:	990a      	ldr	r1, [sp, #40]	; 0x28
   83f66:	1c4a      	adds	r2, r1, #1
   83f68:	f000 8210 	beq.w	8438c <_svfprintf_r+0x62c>
   83f6c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   83f70:	9207      	str	r2, [sp, #28]
   83f72:	ea54 0205 	orrs.w	r2, r4, r5
   83f76:	f040 820f 	bne.w	84398 <_svfprintf_r+0x638>
   83f7a:	2900      	cmp	r1, #0
   83f7c:	f040 8431 	bne.w	847e2 <_svfprintf_r+0xa82>
   83f80:	2b00      	cmp	r3, #0
   83f82:	f040 8539 	bne.w	849f8 <_svfprintf_r+0xc98>
   83f86:	f01b 0301 	ands.w	r3, fp, #1
   83f8a:	930e      	str	r3, [sp, #56]	; 0x38
   83f8c:	f000 8662 	beq.w	84c54 <_svfprintf_r+0xef4>
   83f90:	2330      	movs	r3, #48	; 0x30
   83f92:	ae42      	add	r6, sp, #264	; 0x108
   83f94:	f806 3d41 	strb.w	r3, [r6, #-65]!
   83f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83f9c:	4293      	cmp	r3, r2
   83f9e:	bfb8      	it	lt
   83fa0:	4613      	movlt	r3, r2
   83fa2:	9308      	str	r3, [sp, #32]
   83fa4:	2300      	movs	r3, #0
   83fa6:	9312      	str	r3, [sp, #72]	; 0x48
   83fa8:	b117      	cbz	r7, 83fb0 <_svfprintf_r+0x250>
   83faa:	9b08      	ldr	r3, [sp, #32]
   83fac:	3301      	adds	r3, #1
   83fae:	9308      	str	r3, [sp, #32]
   83fb0:	9b07      	ldr	r3, [sp, #28]
   83fb2:	f013 0302 	ands.w	r3, r3, #2
   83fb6:	9310      	str	r3, [sp, #64]	; 0x40
   83fb8:	d002      	beq.n	83fc0 <_svfprintf_r+0x260>
   83fba:	9b08      	ldr	r3, [sp, #32]
   83fbc:	3302      	adds	r3, #2
   83fbe:	9308      	str	r3, [sp, #32]
   83fc0:	9b07      	ldr	r3, [sp, #28]
   83fc2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   83fc6:	f040 8310 	bne.w	845ea <_svfprintf_r+0x88a>
   83fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83fcc:	9a08      	ldr	r2, [sp, #32]
   83fce:	eba3 0b02 	sub.w	fp, r3, r2
   83fd2:	f1bb 0f00 	cmp.w	fp, #0
   83fd6:	f340 8308 	ble.w	845ea <_svfprintf_r+0x88a>
   83fda:	f1bb 0f10 	cmp.w	fp, #16
   83fde:	f340 87b2 	ble.w	84f46 <_svfprintf_r+0x11e6>
   83fe2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83fe4:	4643      	mov	r3, r8
   83fe6:	4621      	mov	r1, r4
   83fe8:	46a8      	mov	r8, r5
   83fea:	2710      	movs	r7, #16
   83fec:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83fee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   83ff0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83ff2:	e006      	b.n	84002 <_svfprintf_r+0x2a2>
   83ff4:	f1ab 0b10 	sub.w	fp, fp, #16
   83ff8:	f1bb 0f10 	cmp.w	fp, #16
   83ffc:	f103 0308 	add.w	r3, r3, #8
   84000:	dd18      	ble.n	84034 <_svfprintf_r+0x2d4>
   84002:	3201      	adds	r2, #1
   84004:	48ab      	ldr	r0, [pc, #684]	; (842b4 <_svfprintf_r+0x554>)
   84006:	3110      	adds	r1, #16
   84008:	2a07      	cmp	r2, #7
   8400a:	9127      	str	r1, [sp, #156]	; 0x9c
   8400c:	9226      	str	r2, [sp, #152]	; 0x98
   8400e:	e883 0081 	stmia.w	r3, {r0, r7}
   84012:	ddef      	ble.n	83ff4 <_svfprintf_r+0x294>
   84014:	aa25      	add	r2, sp, #148	; 0x94
   84016:	4629      	mov	r1, r5
   84018:	4620      	mov	r0, r4
   8401a:	f003 fa4f 	bl	874bc <__ssprint_r>
   8401e:	2800      	cmp	r0, #0
   84020:	f47f af7b 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84024:	f1ab 0b10 	sub.w	fp, fp, #16
   84028:	f1bb 0f10 	cmp.w	fp, #16
   8402c:	464b      	mov	r3, r9
   8402e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84030:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84032:	dce6      	bgt.n	84002 <_svfprintf_r+0x2a2>
   84034:	4645      	mov	r5, r8
   84036:	460c      	mov	r4, r1
   84038:	4698      	mov	r8, r3
   8403a:	3201      	adds	r2, #1
   8403c:	4b9d      	ldr	r3, [pc, #628]	; (842b4 <_svfprintf_r+0x554>)
   8403e:	445c      	add	r4, fp
   84040:	2a07      	cmp	r2, #7
   84042:	9427      	str	r4, [sp, #156]	; 0x9c
   84044:	9226      	str	r2, [sp, #152]	; 0x98
   84046:	e888 0808 	stmia.w	r8, {r3, fp}
   8404a:	f300 82c3 	bgt.w	845d4 <_svfprintf_r+0x874>
   8404e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84052:	f108 0808 	add.w	r8, r8, #8
   84056:	b187      	cbz	r7, 8407a <_svfprintf_r+0x31a>
   84058:	2101      	movs	r1, #1
   8405a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8405c:	440c      	add	r4, r1
   8405e:	440b      	add	r3, r1
   84060:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   84064:	2b07      	cmp	r3, #7
   84066:	9427      	str	r4, [sp, #156]	; 0x9c
   84068:	9326      	str	r3, [sp, #152]	; 0x98
   8406a:	f8c8 1004 	str.w	r1, [r8, #4]
   8406e:	f8c8 2000 	str.w	r2, [r8]
   84072:	f300 83cd 	bgt.w	84810 <_svfprintf_r+0xab0>
   84076:	f108 0808 	add.w	r8, r8, #8
   8407a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8407c:	b17b      	cbz	r3, 8409e <_svfprintf_r+0x33e>
   8407e:	2102      	movs	r1, #2
   84080:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84082:	440c      	add	r4, r1
   84084:	3301      	adds	r3, #1
   84086:	aa1e      	add	r2, sp, #120	; 0x78
   84088:	2b07      	cmp	r3, #7
   8408a:	9427      	str	r4, [sp, #156]	; 0x9c
   8408c:	9326      	str	r3, [sp, #152]	; 0x98
   8408e:	f8c8 1004 	str.w	r1, [r8, #4]
   84092:	f8c8 2000 	str.w	r2, [r8]
   84096:	f300 8411 	bgt.w	848bc <_svfprintf_r+0xb5c>
   8409a:	f108 0808 	add.w	r8, r8, #8
   8409e:	2d80      	cmp	r5, #128	; 0x80
   840a0:	f000 8304 	beq.w	846ac <_svfprintf_r+0x94c>
   840a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   840a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   840a8:	1a9f      	subs	r7, r3, r2
   840aa:	2f00      	cmp	r7, #0
   840ac:	dd37      	ble.n	8411e <_svfprintf_r+0x3be>
   840ae:	2f10      	cmp	r7, #16
   840b0:	f340 8679 	ble.w	84da6 <_svfprintf_r+0x1046>
   840b4:	4d80      	ldr	r5, [pc, #512]	; (842b8 <_svfprintf_r+0x558>)
   840b6:	4642      	mov	r2, r8
   840b8:	4621      	mov	r1, r4
   840ba:	46b0      	mov	r8, r6
   840bc:	f04f 0b10 	mov.w	fp, #16
   840c0:	462e      	mov	r6, r5
   840c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   840c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   840c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   840c8:	e004      	b.n	840d4 <_svfprintf_r+0x374>
   840ca:	3f10      	subs	r7, #16
   840cc:	2f10      	cmp	r7, #16
   840ce:	f102 0208 	add.w	r2, r2, #8
   840d2:	dd15      	ble.n	84100 <_svfprintf_r+0x3a0>
   840d4:	3301      	adds	r3, #1
   840d6:	3110      	adds	r1, #16
   840d8:	2b07      	cmp	r3, #7
   840da:	9127      	str	r1, [sp, #156]	; 0x9c
   840dc:	9326      	str	r3, [sp, #152]	; 0x98
   840de:	e882 0840 	stmia.w	r2, {r6, fp}
   840e2:	ddf2      	ble.n	840ca <_svfprintf_r+0x36a>
   840e4:	aa25      	add	r2, sp, #148	; 0x94
   840e6:	4629      	mov	r1, r5
   840e8:	4620      	mov	r0, r4
   840ea:	f003 f9e7 	bl	874bc <__ssprint_r>
   840ee:	2800      	cmp	r0, #0
   840f0:	f47f af13 	bne.w	83f1a <_svfprintf_r+0x1ba>
   840f4:	3f10      	subs	r7, #16
   840f6:	2f10      	cmp	r7, #16
   840f8:	464a      	mov	r2, r9
   840fa:	9927      	ldr	r1, [sp, #156]	; 0x9c
   840fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   840fe:	dce9      	bgt.n	840d4 <_svfprintf_r+0x374>
   84100:	4635      	mov	r5, r6
   84102:	460c      	mov	r4, r1
   84104:	4646      	mov	r6, r8
   84106:	4690      	mov	r8, r2
   84108:	3301      	adds	r3, #1
   8410a:	443c      	add	r4, r7
   8410c:	2b07      	cmp	r3, #7
   8410e:	9427      	str	r4, [sp, #156]	; 0x9c
   84110:	9326      	str	r3, [sp, #152]	; 0x98
   84112:	e888 00a0 	stmia.w	r8, {r5, r7}
   84116:	f300 8370 	bgt.w	847fa <_svfprintf_r+0xa9a>
   8411a:	f108 0808 	add.w	r8, r8, #8
   8411e:	9b07      	ldr	r3, [sp, #28]
   84120:	05df      	lsls	r7, r3, #23
   84122:	f100 8264 	bmi.w	845ee <_svfprintf_r+0x88e>
   84126:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84128:	990e      	ldr	r1, [sp, #56]	; 0x38
   8412a:	3301      	adds	r3, #1
   8412c:	440c      	add	r4, r1
   8412e:	2b07      	cmp	r3, #7
   84130:	9427      	str	r4, [sp, #156]	; 0x9c
   84132:	f8c8 6000 	str.w	r6, [r8]
   84136:	f8c8 1004 	str.w	r1, [r8, #4]
   8413a:	9326      	str	r3, [sp, #152]	; 0x98
   8413c:	f300 83b3 	bgt.w	848a6 <_svfprintf_r+0xb46>
   84140:	f108 0808 	add.w	r8, r8, #8
   84144:	9b07      	ldr	r3, [sp, #28]
   84146:	075b      	lsls	r3, r3, #29
   84148:	d53b      	bpl.n	841c2 <_svfprintf_r+0x462>
   8414a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8414c:	9a08      	ldr	r2, [sp, #32]
   8414e:	1a9d      	subs	r5, r3, r2
   84150:	2d00      	cmp	r5, #0
   84152:	dd36      	ble.n	841c2 <_svfprintf_r+0x462>
   84154:	2d10      	cmp	r5, #16
   84156:	f340 8721 	ble.w	84f9c <_svfprintf_r+0x123c>
   8415a:	2610      	movs	r6, #16
   8415c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8415e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84160:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   84164:	e004      	b.n	84170 <_svfprintf_r+0x410>
   84166:	3d10      	subs	r5, #16
   84168:	2d10      	cmp	r5, #16
   8416a:	f108 0808 	add.w	r8, r8, #8
   8416e:	dd16      	ble.n	8419e <_svfprintf_r+0x43e>
   84170:	3301      	adds	r3, #1
   84172:	4a50      	ldr	r2, [pc, #320]	; (842b4 <_svfprintf_r+0x554>)
   84174:	3410      	adds	r4, #16
   84176:	2b07      	cmp	r3, #7
   84178:	9427      	str	r4, [sp, #156]	; 0x9c
   8417a:	9326      	str	r3, [sp, #152]	; 0x98
   8417c:	e888 0044 	stmia.w	r8, {r2, r6}
   84180:	ddf1      	ble.n	84166 <_svfprintf_r+0x406>
   84182:	aa25      	add	r2, sp, #148	; 0x94
   84184:	4659      	mov	r1, fp
   84186:	4638      	mov	r0, r7
   84188:	f003 f998 	bl	874bc <__ssprint_r>
   8418c:	2800      	cmp	r0, #0
   8418e:	f47f aec4 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84192:	3d10      	subs	r5, #16
   84194:	2d10      	cmp	r5, #16
   84196:	46c8      	mov	r8, r9
   84198:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8419a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8419c:	dce8      	bgt.n	84170 <_svfprintf_r+0x410>
   8419e:	3301      	adds	r3, #1
   841a0:	4a44      	ldr	r2, [pc, #272]	; (842b4 <_svfprintf_r+0x554>)
   841a2:	442c      	add	r4, r5
   841a4:	2b07      	cmp	r3, #7
   841a6:	9427      	str	r4, [sp, #156]	; 0x9c
   841a8:	9326      	str	r3, [sp, #152]	; 0x98
   841aa:	e888 0024 	stmia.w	r8, {r2, r5}
   841ae:	dd08      	ble.n	841c2 <_svfprintf_r+0x462>
   841b0:	aa25      	add	r2, sp, #148	; 0x94
   841b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   841b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   841b6:	f003 f981 	bl	874bc <__ssprint_r>
   841ba:	2800      	cmp	r0, #0
   841bc:	f47f aead 	bne.w	83f1a <_svfprintf_r+0x1ba>
   841c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   841c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   841c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   841c6:	9908      	ldr	r1, [sp, #32]
   841c8:	428a      	cmp	r2, r1
   841ca:	bfac      	ite	ge
   841cc:	189b      	addge	r3, r3, r2
   841ce:	185b      	addlt	r3, r3, r1
   841d0:	9309      	str	r3, [sp, #36]	; 0x24
   841d2:	2c00      	cmp	r4, #0
   841d4:	f040 82fb 	bne.w	847ce <_svfprintf_r+0xa6e>
   841d8:	2300      	movs	r3, #0
   841da:	46c8      	mov	r8, r9
   841dc:	9326      	str	r3, [sp, #152]	; 0x98
   841de:	e5e6      	b.n	83dae <_svfprintf_r+0x4e>
   841e0:	9311      	str	r3, [sp, #68]	; 0x44
   841e2:	f01b 0320 	ands.w	r3, fp, #32
   841e6:	f040 8145 	bne.w	84474 <_svfprintf_r+0x714>
   841ea:	f01b 0210 	ands.w	r2, fp, #16
   841ee:	f040 8466 	bne.w	84abe <_svfprintf_r+0xd5e>
   841f2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   841f6:	f000 8462 	beq.w	84abe <_svfprintf_r+0xd5e>
   841fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   841fc:	4613      	mov	r3, r2
   841fe:	460a      	mov	r2, r1
   84200:	3204      	adds	r2, #4
   84202:	880c      	ldrh	r4, [r1, #0]
   84204:	2500      	movs	r5, #0
   84206:	920f      	str	r2, [sp, #60]	; 0x3c
   84208:	e6a8      	b.n	83f5c <_svfprintf_r+0x1fc>
   8420a:	2500      	movs	r5, #0
   8420c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8420e:	9311      	str	r3, [sp, #68]	; 0x44
   84210:	6816      	ldr	r6, [r2, #0]
   84212:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   84216:	1d14      	adds	r4, r2, #4
   84218:	2e00      	cmp	r6, #0
   8421a:	f000 86cd 	beq.w	84fb8 <_svfprintf_r+0x1258>
   8421e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84220:	1c53      	adds	r3, r2, #1
   84222:	f000 861b 	beq.w	84e5c <_svfprintf_r+0x10fc>
   84226:	4629      	mov	r1, r5
   84228:	4630      	mov	r0, r6
   8422a:	f002 fd75 	bl	86d18 <memchr>
   8422e:	2800      	cmp	r0, #0
   84230:	f000 870d 	beq.w	8504e <_svfprintf_r+0x12ee>
   84234:	1b83      	subs	r3, r0, r6
   84236:	950a      	str	r5, [sp, #40]	; 0x28
   84238:	930e      	str	r3, [sp, #56]	; 0x38
   8423a:	940f      	str	r4, [sp, #60]	; 0x3c
   8423c:	f8cd b01c 	str.w	fp, [sp, #28]
   84240:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84244:	9308      	str	r3, [sp, #32]
   84246:	9512      	str	r5, [sp, #72]	; 0x48
   84248:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8424c:	e6ac      	b.n	83fa8 <_svfprintf_r+0x248>
   8424e:	f89a 3000 	ldrb.w	r3, [sl]
   84252:	f10a 0401 	add.w	r4, sl, #1
   84256:	2b2a      	cmp	r3, #42	; 0x2a
   84258:	f000 87c2 	beq.w	851e0 <_svfprintf_r+0x1480>
   8425c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84260:	2809      	cmp	r0, #9
   84262:	46a2      	mov	sl, r4
   84264:	f200 8718 	bhi.w	85098 <_svfprintf_r+0x1338>
   84268:	2300      	movs	r3, #0
   8426a:	461c      	mov	r4, r3
   8426c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   84270:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84274:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   84278:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8427c:	2809      	cmp	r0, #9
   8427e:	d9f5      	bls.n	8426c <_svfprintf_r+0x50c>
   84280:	940a      	str	r4, [sp, #40]	; 0x28
   84282:	e5c9      	b.n	83e18 <_svfprintf_r+0xb8>
   84284:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   84288:	f89a 3000 	ldrb.w	r3, [sl]
   8428c:	e5c2      	b.n	83e14 <_svfprintf_r+0xb4>
   8428e:	f04b 0b10 	orr.w	fp, fp, #16
   84292:	f01b 0f20 	tst.w	fp, #32
   84296:	9311      	str	r3, [sp, #68]	; 0x44
   84298:	f43f ae51 	beq.w	83f3e <_svfprintf_r+0x1de>
   8429c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8429e:	3407      	adds	r4, #7
   842a0:	f024 0307 	bic.w	r3, r4, #7
   842a4:	f103 0208 	add.w	r2, r3, #8
   842a8:	e9d3 4500 	ldrd	r4, r5, [r3]
   842ac:	920f      	str	r2, [sp, #60]	; 0x3c
   842ae:	2301      	movs	r3, #1
   842b0:	e654      	b.n	83f5c <_svfprintf_r+0x1fc>
   842b2:	bf00      	nop
   842b4:	00088310 	.word	0x00088310
   842b8:	00088320 	.word	0x00088320
   842bc:	9311      	str	r3, [sp, #68]	; 0x44
   842be:	2a00      	cmp	r2, #0
   842c0:	f040 87ad 	bne.w	8521e <_svfprintf_r+0x14be>
   842c4:	4bbe      	ldr	r3, [pc, #760]	; (845c0 <_svfprintf_r+0x860>)
   842c6:	f01b 0f20 	tst.w	fp, #32
   842ca:	9318      	str	r3, [sp, #96]	; 0x60
   842cc:	f040 80e7 	bne.w	8449e <_svfprintf_r+0x73e>
   842d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   842d2:	f01b 0f10 	tst.w	fp, #16
   842d6:	4613      	mov	r3, r2
   842d8:	f040 83d8 	bne.w	84a8c <_svfprintf_r+0xd2c>
   842dc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   842e0:	f000 83d4 	beq.w	84a8c <_svfprintf_r+0xd2c>
   842e4:	2500      	movs	r5, #0
   842e6:	3304      	adds	r3, #4
   842e8:	8814      	ldrh	r4, [r2, #0]
   842ea:	930f      	str	r3, [sp, #60]	; 0x3c
   842ec:	f01b 0f01 	tst.w	fp, #1
   842f0:	f000 80e3 	beq.w	844ba <_svfprintf_r+0x75a>
   842f4:	ea54 0305 	orrs.w	r3, r4, r5
   842f8:	f000 80df 	beq.w	844ba <_svfprintf_r+0x75a>
   842fc:	2330      	movs	r3, #48	; 0x30
   842fe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   84302:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   84306:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   8430a:	f04b 0b02 	orr.w	fp, fp, #2
   8430e:	2302      	movs	r3, #2
   84310:	e624      	b.n	83f5c <_svfprintf_r+0x1fc>
   84312:	2201      	movs	r2, #1
   84314:	9311      	str	r3, [sp, #68]	; 0x44
   84316:	2300      	movs	r3, #0
   84318:	4611      	mov	r1, r2
   8431a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8431c:	9208      	str	r2, [sp, #32]
   8431e:	6802      	ldr	r2, [r0, #0]
   84320:	461f      	mov	r7, r3
   84322:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84326:	930a      	str	r3, [sp, #40]	; 0x28
   84328:	9312      	str	r3, [sp, #72]	; 0x48
   8432a:	1d03      	adds	r3, r0, #4
   8432c:	f8cd b01c 	str.w	fp, [sp, #28]
   84330:	910e      	str	r1, [sp, #56]	; 0x38
   84332:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   84336:	930f      	str	r3, [sp, #60]	; 0x3c
   84338:	ae28      	add	r6, sp, #160	; 0xa0
   8433a:	e639      	b.n	83fb0 <_svfprintf_r+0x250>
   8433c:	9311      	str	r3, [sp, #68]	; 0x44
   8433e:	2a00      	cmp	r2, #0
   84340:	f040 8784 	bne.w	8524c <_svfprintf_r+0x14ec>
   84344:	f04b 0b10 	orr.w	fp, fp, #16
   84348:	f01b 0f20 	tst.w	fp, #32
   8434c:	f040 8475 	bne.w	84c3a <_svfprintf_r+0xeda>
   84350:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84352:	f01b 0f10 	tst.w	fp, #16
   84356:	4613      	mov	r3, r2
   84358:	f040 839d 	bne.w	84a96 <_svfprintf_r+0xd36>
   8435c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84360:	f000 8399 	beq.w	84a96 <_svfprintf_r+0xd36>
   84364:	f9b2 4000 	ldrsh.w	r4, [r2]
   84368:	3304      	adds	r3, #4
   8436a:	17e5      	asrs	r5, r4, #31
   8436c:	930f      	str	r3, [sp, #60]	; 0x3c
   8436e:	4622      	mov	r2, r4
   84370:	462b      	mov	r3, r5
   84372:	2a00      	cmp	r2, #0
   84374:	f173 0300 	sbcs.w	r3, r3, #0
   84378:	f2c0 8398 	blt.w	84aac <_svfprintf_r+0xd4c>
   8437c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8437e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84382:	1c4a      	adds	r2, r1, #1
   84384:	f04f 0301 	mov.w	r3, #1
   84388:	f47f adf0 	bne.w	83f6c <_svfprintf_r+0x20c>
   8438c:	ea54 0205 	orrs.w	r2, r4, r5
   84390:	f000 8229 	beq.w	847e6 <_svfprintf_r+0xa86>
   84394:	f8cd b01c 	str.w	fp, [sp, #28]
   84398:	2b01      	cmp	r3, #1
   8439a:	f000 830e 	beq.w	849ba <_svfprintf_r+0xc5a>
   8439e:	2b02      	cmp	r3, #2
   843a0:	f040 829c 	bne.w	848dc <_svfprintf_r+0xb7c>
   843a4:	464e      	mov	r6, r9
   843a6:	9818      	ldr	r0, [sp, #96]	; 0x60
   843a8:	0923      	lsrs	r3, r4, #4
   843aa:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   843ae:	0929      	lsrs	r1, r5, #4
   843b0:	f004 020f 	and.w	r2, r4, #15
   843b4:	460d      	mov	r5, r1
   843b6:	461c      	mov	r4, r3
   843b8:	5c83      	ldrb	r3, [r0, r2]
   843ba:	f806 3d01 	strb.w	r3, [r6, #-1]!
   843be:	ea54 0305 	orrs.w	r3, r4, r5
   843c2:	d1f1      	bne.n	843a8 <_svfprintf_r+0x648>
   843c4:	eba9 0306 	sub.w	r3, r9, r6
   843c8:	930e      	str	r3, [sp, #56]	; 0x38
   843ca:	e5e5      	b.n	83f98 <_svfprintf_r+0x238>
   843cc:	9311      	str	r3, [sp, #68]	; 0x44
   843ce:	2a00      	cmp	r2, #0
   843d0:	f040 8738 	bne.w	85244 <_svfprintf_r+0x14e4>
   843d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   843d6:	f01b 0f08 	tst.w	fp, #8
   843da:	f104 0407 	add.w	r4, r4, #7
   843de:	f000 84cf 	beq.w	84d80 <_svfprintf_r+0x1020>
   843e2:	f024 0307 	bic.w	r3, r4, #7
   843e6:	f103 0208 	add.w	r2, r3, #8
   843ea:	920f      	str	r2, [sp, #60]	; 0x3c
   843ec:	681a      	ldr	r2, [r3, #0]
   843ee:	685b      	ldr	r3, [r3, #4]
   843f0:	9215      	str	r2, [sp, #84]	; 0x54
   843f2:	9314      	str	r3, [sp, #80]	; 0x50
   843f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   843f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   843f8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   843fc:	4628      	mov	r0, r5
   843fe:	4621      	mov	r1, r4
   84400:	f04f 32ff 	mov.w	r2, #4294967295
   84404:	4b6f      	ldr	r3, [pc, #444]	; (845c4 <_svfprintf_r+0x864>)
   84406:	f003 ff09 	bl	8821c <__aeabi_dcmpun>
   8440a:	2800      	cmp	r0, #0
   8440c:	f040 8434 	bne.w	84c78 <_svfprintf_r+0xf18>
   84410:	4628      	mov	r0, r5
   84412:	4621      	mov	r1, r4
   84414:	f04f 32ff 	mov.w	r2, #4294967295
   84418:	4b6a      	ldr	r3, [pc, #424]	; (845c4 <_svfprintf_r+0x864>)
   8441a:	f003 fee1 	bl	881e0 <__aeabi_dcmple>
   8441e:	2800      	cmp	r0, #0
   84420:	f040 842a 	bne.w	84c78 <_svfprintf_r+0xf18>
   84424:	a815      	add	r0, sp, #84	; 0x54
   84426:	c80d      	ldmia	r0, {r0, r2, r3}
   84428:	9914      	ldr	r1, [sp, #80]	; 0x50
   8442a:	f003 fecf 	bl	881cc <__aeabi_dcmplt>
   8442e:	2800      	cmp	r0, #0
   84430:	f040 85d4 	bne.w	84fdc <_svfprintf_r+0x127c>
   84434:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84438:	2303      	movs	r3, #3
   8443a:	461a      	mov	r2, r3
   8443c:	9308      	str	r3, [sp, #32]
   8443e:	2300      	movs	r3, #0
   84440:	4e61      	ldr	r6, [pc, #388]	; (845c8 <_svfprintf_r+0x868>)
   84442:	4619      	mov	r1, r3
   84444:	930a      	str	r3, [sp, #40]	; 0x28
   84446:	4b61      	ldr	r3, [pc, #388]	; (845cc <_svfprintf_r+0x86c>)
   84448:	920e      	str	r2, [sp, #56]	; 0x38
   8444a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8444c:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   84450:	9007      	str	r0, [sp, #28]
   84452:	9112      	str	r1, [sp, #72]	; 0x48
   84454:	2a47      	cmp	r2, #71	; 0x47
   84456:	bfd8      	it	le
   84458:	461e      	movle	r6, r3
   8445a:	e5a5      	b.n	83fa8 <_svfprintf_r+0x248>
   8445c:	f04b 0b08 	orr.w	fp, fp, #8
   84460:	f89a 3000 	ldrb.w	r3, [sl]
   84464:	e4d6      	b.n	83e14 <_svfprintf_r+0xb4>
   84466:	f04b 0b10 	orr.w	fp, fp, #16
   8446a:	9311      	str	r3, [sp, #68]	; 0x44
   8446c:	f01b 0320 	ands.w	r3, fp, #32
   84470:	f43f aebb 	beq.w	841ea <_svfprintf_r+0x48a>
   84474:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84476:	3407      	adds	r4, #7
   84478:	f024 0307 	bic.w	r3, r4, #7
   8447c:	f103 0208 	add.w	r2, r3, #8
   84480:	e9d3 4500 	ldrd	r4, r5, [r3]
   84484:	920f      	str	r2, [sp, #60]	; 0x3c
   84486:	2300      	movs	r3, #0
   84488:	e568      	b.n	83f5c <_svfprintf_r+0x1fc>
   8448a:	9311      	str	r3, [sp, #68]	; 0x44
   8448c:	2a00      	cmp	r2, #0
   8448e:	f040 86c2 	bne.w	85216 <_svfprintf_r+0x14b6>
   84492:	4b4f      	ldr	r3, [pc, #316]	; (845d0 <_svfprintf_r+0x870>)
   84494:	f01b 0f20 	tst.w	fp, #32
   84498:	9318      	str	r3, [sp, #96]	; 0x60
   8449a:	f43f af19 	beq.w	842d0 <_svfprintf_r+0x570>
   8449e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   844a0:	f01b 0f01 	tst.w	fp, #1
   844a4:	f104 0407 	add.w	r4, r4, #7
   844a8:	f024 0307 	bic.w	r3, r4, #7
   844ac:	f103 0208 	add.w	r2, r3, #8
   844b0:	920f      	str	r2, [sp, #60]	; 0x3c
   844b2:	e9d3 4500 	ldrd	r4, r5, [r3]
   844b6:	f47f af1d 	bne.w	842f4 <_svfprintf_r+0x594>
   844ba:	2302      	movs	r3, #2
   844bc:	e54e      	b.n	83f5c <_svfprintf_r+0x1fc>
   844be:	f89a 3000 	ldrb.w	r3, [sl]
   844c2:	2900      	cmp	r1, #0
   844c4:	f47f aca6 	bne.w	83e14 <_svfprintf_r+0xb4>
   844c8:	2201      	movs	r2, #1
   844ca:	2120      	movs	r1, #32
   844cc:	e4a2      	b.n	83e14 <_svfprintf_r+0xb4>
   844ce:	f04b 0b01 	orr.w	fp, fp, #1
   844d2:	f89a 3000 	ldrb.w	r3, [sl]
   844d6:	e49d      	b.n	83e14 <_svfprintf_r+0xb4>
   844d8:	f89a 3000 	ldrb.w	r3, [sl]
   844dc:	2201      	movs	r2, #1
   844de:	212b      	movs	r1, #43	; 0x2b
   844e0:	e498      	b.n	83e14 <_svfprintf_r+0xb4>
   844e2:	f04b 0b20 	orr.w	fp, fp, #32
   844e6:	f89a 3000 	ldrb.w	r3, [sl]
   844ea:	e493      	b.n	83e14 <_svfprintf_r+0xb4>
   844ec:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   844f0:	f89a 3000 	ldrb.w	r3, [sl]
   844f4:	e48e      	b.n	83e14 <_svfprintf_r+0xb4>
   844f6:	f89a 3000 	ldrb.w	r3, [sl]
   844fa:	2b6c      	cmp	r3, #108	; 0x6c
   844fc:	bf03      	ittte	eq
   844fe:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   84502:	f04b 0b20 	orreq.w	fp, fp, #32
   84506:	f10a 0a01 	addeq.w	sl, sl, #1
   8450a:	f04b 0b10 	orrne.w	fp, fp, #16
   8450e:	e481      	b.n	83e14 <_svfprintf_r+0xb4>
   84510:	2a00      	cmp	r2, #0
   84512:	f040 867c 	bne.w	8520e <_svfprintf_r+0x14ae>
   84516:	f01b 0f20 	tst.w	fp, #32
   8451a:	f040 8452 	bne.w	84dc2 <_svfprintf_r+0x1062>
   8451e:	f01b 0f10 	tst.w	fp, #16
   84522:	f040 8438 	bne.w	84d96 <_svfprintf_r+0x1036>
   84526:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8452a:	f000 8434 	beq.w	84d96 <_svfprintf_r+0x1036>
   8452e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84530:	6813      	ldr	r3, [r2, #0]
   84532:	3204      	adds	r2, #4
   84534:	920f      	str	r2, [sp, #60]	; 0x3c
   84536:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   8453a:	801a      	strh	r2, [r3, #0]
   8453c:	e437      	b.n	83dae <_svfprintf_r+0x4e>
   8453e:	2378      	movs	r3, #120	; 0x78
   84540:	2230      	movs	r2, #48	; 0x30
   84542:	980f      	ldr	r0, [sp, #60]	; 0x3c
   84544:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   84548:	9311      	str	r3, [sp, #68]	; 0x44
   8454a:	1d03      	adds	r3, r0, #4
   8454c:	930f      	str	r3, [sp, #60]	; 0x3c
   8454e:	4b20      	ldr	r3, [pc, #128]	; (845d0 <_svfprintf_r+0x870>)
   84550:	6804      	ldr	r4, [r0, #0]
   84552:	9318      	str	r3, [sp, #96]	; 0x60
   84554:	f04b 0b02 	orr.w	fp, fp, #2
   84558:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   8455c:	2500      	movs	r5, #0
   8455e:	2302      	movs	r3, #2
   84560:	e4fc      	b.n	83f5c <_svfprintf_r+0x1fc>
   84562:	9311      	str	r3, [sp, #68]	; 0x44
   84564:	2a00      	cmp	r2, #0
   84566:	f43f aeef 	beq.w	84348 <_svfprintf_r+0x5e8>
   8456a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8456e:	e6eb      	b.n	84348 <_svfprintf_r+0x5e8>
   84570:	2000      	movs	r0, #0
   84572:	4604      	mov	r4, r0
   84574:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84578:	f81a 3b01 	ldrb.w	r3, [sl], #1
   8457c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84580:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   84584:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84588:	2809      	cmp	r0, #9
   8458a:	d9f5      	bls.n	84578 <_svfprintf_r+0x818>
   8458c:	940d      	str	r4, [sp, #52]	; 0x34
   8458e:	e443      	b.n	83e18 <_svfprintf_r+0xb8>
   84590:	9311      	str	r3, [sp, #68]	; 0x44
   84592:	2a00      	cmp	r2, #0
   84594:	f040 864a 	bne.w	8522c <_svfprintf_r+0x14cc>
   84598:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8459a:	2a00      	cmp	r2, #0
   8459c:	f43f acb6 	beq.w	83f0c <_svfprintf_r+0x1ac>
   845a0:	2300      	movs	r3, #0
   845a2:	2101      	movs	r1, #1
   845a4:	461f      	mov	r7, r3
   845a6:	9108      	str	r1, [sp, #32]
   845a8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   845ac:	f8cd b01c 	str.w	fp, [sp, #28]
   845b0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   845b4:	930a      	str	r3, [sp, #40]	; 0x28
   845b6:	9312      	str	r3, [sp, #72]	; 0x48
   845b8:	910e      	str	r1, [sp, #56]	; 0x38
   845ba:	ae28      	add	r6, sp, #160	; 0xa0
   845bc:	e4f8      	b.n	83fb0 <_svfprintf_r+0x250>
   845be:	bf00      	nop
   845c0:	000882dc 	.word	0x000882dc
   845c4:	7fefffff 	.word	0x7fefffff
   845c8:	000882d0 	.word	0x000882d0
   845cc:	000882cc 	.word	0x000882cc
   845d0:	000882f0 	.word	0x000882f0
   845d4:	aa25      	add	r2, sp, #148	; 0x94
   845d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   845d8:	980c      	ldr	r0, [sp, #48]	; 0x30
   845da:	f002 ff6f 	bl	874bc <__ssprint_r>
   845de:	2800      	cmp	r0, #0
   845e0:	f47f ac9b 	bne.w	83f1a <_svfprintf_r+0x1ba>
   845e4:	46c8      	mov	r8, r9
   845e6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   845ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   845ec:	e533      	b.n	84056 <_svfprintf_r+0x2f6>
   845ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   845f0:	2b65      	cmp	r3, #101	; 0x65
   845f2:	f340 809a 	ble.w	8472a <_svfprintf_r+0x9ca>
   845f6:	a815      	add	r0, sp, #84	; 0x54
   845f8:	c80d      	ldmia	r0, {r0, r2, r3}
   845fa:	9914      	ldr	r1, [sp, #80]	; 0x50
   845fc:	f003 fddc 	bl	881b8 <__aeabi_dcmpeq>
   84600:	2800      	cmp	r0, #0
   84602:	f000 8193 	beq.w	8492c <_svfprintf_r+0xbcc>
   84606:	2101      	movs	r1, #1
   84608:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8460a:	4ab5      	ldr	r2, [pc, #724]	; (848e0 <_svfprintf_r+0xb80>)
   8460c:	440b      	add	r3, r1
   8460e:	440c      	add	r4, r1
   84610:	2b07      	cmp	r3, #7
   84612:	9427      	str	r4, [sp, #156]	; 0x9c
   84614:	9326      	str	r3, [sp, #152]	; 0x98
   84616:	f8c8 1004 	str.w	r1, [r8, #4]
   8461a:	f8c8 2000 	str.w	r2, [r8]
   8461e:	f300 83c6 	bgt.w	84dae <_svfprintf_r+0x104e>
   84622:	f108 0808 	add.w	r8, r8, #8
   84626:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8462a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8462c:	4293      	cmp	r3, r2
   8462e:	db03      	blt.n	84638 <_svfprintf_r+0x8d8>
   84630:	9b07      	ldr	r3, [sp, #28]
   84632:	07dd      	lsls	r5, r3, #31
   84634:	f57f ad86 	bpl.w	84144 <_svfprintf_r+0x3e4>
   84638:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8463a:	9919      	ldr	r1, [sp, #100]	; 0x64
   8463c:	3301      	adds	r3, #1
   8463e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   84640:	440c      	add	r4, r1
   84642:	2b07      	cmp	r3, #7
   84644:	f8c8 2000 	str.w	r2, [r8]
   84648:	f8c8 1004 	str.w	r1, [r8, #4]
   8464c:	9427      	str	r4, [sp, #156]	; 0x9c
   8464e:	9326      	str	r3, [sp, #152]	; 0x98
   84650:	f300 83c4 	bgt.w	84ddc <_svfprintf_r+0x107c>
   84654:	f108 0808 	add.w	r8, r8, #8
   84658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8465a:	1e5e      	subs	r6, r3, #1
   8465c:	2e00      	cmp	r6, #0
   8465e:	f77f ad71 	ble.w	84144 <_svfprintf_r+0x3e4>
   84662:	2e10      	cmp	r6, #16
   84664:	f340 8575 	ble.w	85152 <_svfprintf_r+0x13f2>
   84668:	4622      	mov	r2, r4
   8466a:	2710      	movs	r7, #16
   8466c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8466e:	4d9d      	ldr	r5, [pc, #628]	; (848e4 <_svfprintf_r+0xb84>)
   84670:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84674:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84676:	e005      	b.n	84684 <_svfprintf_r+0x924>
   84678:	f108 0808 	add.w	r8, r8, #8
   8467c:	3e10      	subs	r6, #16
   8467e:	2e10      	cmp	r6, #16
   84680:	f340 8225 	ble.w	84ace <_svfprintf_r+0xd6e>
   84684:	3301      	adds	r3, #1
   84686:	3210      	adds	r2, #16
   84688:	2b07      	cmp	r3, #7
   8468a:	9227      	str	r2, [sp, #156]	; 0x9c
   8468c:	9326      	str	r3, [sp, #152]	; 0x98
   8468e:	e888 00a0 	stmia.w	r8, {r5, r7}
   84692:	ddf1      	ble.n	84678 <_svfprintf_r+0x918>
   84694:	aa25      	add	r2, sp, #148	; 0x94
   84696:	4621      	mov	r1, r4
   84698:	4658      	mov	r0, fp
   8469a:	f002 ff0f 	bl	874bc <__ssprint_r>
   8469e:	2800      	cmp	r0, #0
   846a0:	f47f ac3b 	bne.w	83f1a <_svfprintf_r+0x1ba>
   846a4:	46c8      	mov	r8, r9
   846a6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   846a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   846aa:	e7e7      	b.n	8467c <_svfprintf_r+0x91c>
   846ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   846ae:	9a08      	ldr	r2, [sp, #32]
   846b0:	1a9f      	subs	r7, r3, r2
   846b2:	2f00      	cmp	r7, #0
   846b4:	f77f acf6 	ble.w	840a4 <_svfprintf_r+0x344>
   846b8:	2f10      	cmp	r7, #16
   846ba:	f340 84a8 	ble.w	8500e <_svfprintf_r+0x12ae>
   846be:	4d89      	ldr	r5, [pc, #548]	; (848e4 <_svfprintf_r+0xb84>)
   846c0:	4642      	mov	r2, r8
   846c2:	4621      	mov	r1, r4
   846c4:	46b0      	mov	r8, r6
   846c6:	f04f 0b10 	mov.w	fp, #16
   846ca:	462e      	mov	r6, r5
   846cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   846ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   846d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   846d2:	e004      	b.n	846de <_svfprintf_r+0x97e>
   846d4:	3f10      	subs	r7, #16
   846d6:	2f10      	cmp	r7, #16
   846d8:	f102 0208 	add.w	r2, r2, #8
   846dc:	dd15      	ble.n	8470a <_svfprintf_r+0x9aa>
   846de:	3301      	adds	r3, #1
   846e0:	3110      	adds	r1, #16
   846e2:	2b07      	cmp	r3, #7
   846e4:	9127      	str	r1, [sp, #156]	; 0x9c
   846e6:	9326      	str	r3, [sp, #152]	; 0x98
   846e8:	e882 0840 	stmia.w	r2, {r6, fp}
   846ec:	ddf2      	ble.n	846d4 <_svfprintf_r+0x974>
   846ee:	aa25      	add	r2, sp, #148	; 0x94
   846f0:	4629      	mov	r1, r5
   846f2:	4620      	mov	r0, r4
   846f4:	f002 fee2 	bl	874bc <__ssprint_r>
   846f8:	2800      	cmp	r0, #0
   846fa:	f47f ac0e 	bne.w	83f1a <_svfprintf_r+0x1ba>
   846fe:	3f10      	subs	r7, #16
   84700:	2f10      	cmp	r7, #16
   84702:	464a      	mov	r2, r9
   84704:	9927      	ldr	r1, [sp, #156]	; 0x9c
   84706:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84708:	dce9      	bgt.n	846de <_svfprintf_r+0x97e>
   8470a:	4635      	mov	r5, r6
   8470c:	460c      	mov	r4, r1
   8470e:	4646      	mov	r6, r8
   84710:	4690      	mov	r8, r2
   84712:	3301      	adds	r3, #1
   84714:	443c      	add	r4, r7
   84716:	2b07      	cmp	r3, #7
   84718:	9427      	str	r4, [sp, #156]	; 0x9c
   8471a:	9326      	str	r3, [sp, #152]	; 0x98
   8471c:	e888 00a0 	stmia.w	r8, {r5, r7}
   84720:	f300 829e 	bgt.w	84c60 <_svfprintf_r+0xf00>
   84724:	f108 0808 	add.w	r8, r8, #8
   84728:	e4bc      	b.n	840a4 <_svfprintf_r+0x344>
   8472a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8472c:	2b01      	cmp	r3, #1
   8472e:	f340 824f 	ble.w	84bd0 <_svfprintf_r+0xe70>
   84732:	2301      	movs	r3, #1
   84734:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84736:	441c      	add	r4, r3
   84738:	441f      	add	r7, r3
   8473a:	2f07      	cmp	r7, #7
   8473c:	9427      	str	r4, [sp, #156]	; 0x9c
   8473e:	f8c8 6000 	str.w	r6, [r8]
   84742:	9726      	str	r7, [sp, #152]	; 0x98
   84744:	f8c8 3004 	str.w	r3, [r8, #4]
   84748:	f300 825f 	bgt.w	84c0a <_svfprintf_r+0xeaa>
   8474c:	f108 0808 	add.w	r8, r8, #8
   84750:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84752:	3701      	adds	r7, #1
   84754:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   84756:	4414      	add	r4, r2
   84758:	2f07      	cmp	r7, #7
   8475a:	9427      	str	r4, [sp, #156]	; 0x9c
   8475c:	9726      	str	r7, [sp, #152]	; 0x98
   8475e:	f8c8 3000 	str.w	r3, [r8]
   84762:	f8c8 2004 	str.w	r2, [r8, #4]
   84766:	f300 825c 	bgt.w	84c22 <_svfprintf_r+0xec2>
   8476a:	f108 0808 	add.w	r8, r8, #8
   8476e:	a815      	add	r0, sp, #84	; 0x54
   84770:	c80d      	ldmia	r0, {r0, r2, r3}
   84772:	9914      	ldr	r1, [sp, #80]	; 0x50
   84774:	f003 fd20 	bl	881b8 <__aeabi_dcmpeq>
   84778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8477a:	2800      	cmp	r0, #0
   8477c:	f040 8141 	bne.w	84a02 <_svfprintf_r+0xca2>
   84780:	3b01      	subs	r3, #1
   84782:	3701      	adds	r7, #1
   84784:	3601      	adds	r6, #1
   84786:	441c      	add	r4, r3
   84788:	2f07      	cmp	r7, #7
   8478a:	f8c8 6000 	str.w	r6, [r8]
   8478e:	9726      	str	r7, [sp, #152]	; 0x98
   84790:	9427      	str	r4, [sp, #156]	; 0x9c
   84792:	f8c8 3004 	str.w	r3, [r8, #4]
   84796:	f300 8166 	bgt.w	84a66 <_svfprintf_r+0xd06>
   8479a:	f108 0808 	add.w	r8, r8, #8
   8479e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   847a0:	3701      	adds	r7, #1
   847a2:	4414      	add	r4, r2
   847a4:	ab21      	add	r3, sp, #132	; 0x84
   847a6:	2f07      	cmp	r7, #7
   847a8:	9427      	str	r4, [sp, #156]	; 0x9c
   847aa:	9726      	str	r7, [sp, #152]	; 0x98
   847ac:	f8c8 2004 	str.w	r2, [r8, #4]
   847b0:	f8c8 3000 	str.w	r3, [r8]
   847b4:	f77f acc4 	ble.w	84140 <_svfprintf_r+0x3e0>
   847b8:	aa25      	add	r2, sp, #148	; 0x94
   847ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   847bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   847be:	f002 fe7d 	bl	874bc <__ssprint_r>
   847c2:	2800      	cmp	r0, #0
   847c4:	f47f aba9 	bne.w	83f1a <_svfprintf_r+0x1ba>
   847c8:	46c8      	mov	r8, r9
   847ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   847cc:	e4ba      	b.n	84144 <_svfprintf_r+0x3e4>
   847ce:	aa25      	add	r2, sp, #148	; 0x94
   847d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   847d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   847d4:	f002 fe72 	bl	874bc <__ssprint_r>
   847d8:	2800      	cmp	r0, #0
   847da:	f43f acfd 	beq.w	841d8 <_svfprintf_r+0x478>
   847de:	f7ff bb9c 	b.w	83f1a <_svfprintf_r+0x1ba>
   847e2:	f8dd b01c 	ldr.w	fp, [sp, #28]
   847e6:	2b01      	cmp	r3, #1
   847e8:	f000 817e 	beq.w	84ae8 <_svfprintf_r+0xd88>
   847ec:	2b02      	cmp	r3, #2
   847ee:	d171      	bne.n	848d4 <_svfprintf_r+0xb74>
   847f0:	f8cd b01c 	str.w	fp, [sp, #28]
   847f4:	2400      	movs	r4, #0
   847f6:	2500      	movs	r5, #0
   847f8:	e5d4      	b.n	843a4 <_svfprintf_r+0x644>
   847fa:	aa25      	add	r2, sp, #148	; 0x94
   847fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   847fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   84800:	f002 fe5c 	bl	874bc <__ssprint_r>
   84804:	2800      	cmp	r0, #0
   84806:	f47f ab88 	bne.w	83f1a <_svfprintf_r+0x1ba>
   8480a:	46c8      	mov	r8, r9
   8480c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8480e:	e486      	b.n	8411e <_svfprintf_r+0x3be>
   84810:	aa25      	add	r2, sp, #148	; 0x94
   84812:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84814:	980c      	ldr	r0, [sp, #48]	; 0x30
   84816:	f002 fe51 	bl	874bc <__ssprint_r>
   8481a:	2800      	cmp	r0, #0
   8481c:	f47f ab7d 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84820:	46c8      	mov	r8, r9
   84822:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84824:	e429      	b.n	8407a <_svfprintf_r+0x31a>
   84826:	2001      	movs	r0, #1
   84828:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8482a:	4a2d      	ldr	r2, [pc, #180]	; (848e0 <_svfprintf_r+0xb80>)
   8482c:	4403      	add	r3, r0
   8482e:	4404      	add	r4, r0
   84830:	2b07      	cmp	r3, #7
   84832:	9427      	str	r4, [sp, #156]	; 0x9c
   84834:	9326      	str	r3, [sp, #152]	; 0x98
   84836:	f8c8 0004 	str.w	r0, [r8, #4]
   8483a:	f8c8 2000 	str.w	r2, [r8]
   8483e:	f340 82d8 	ble.w	84df2 <_svfprintf_r+0x1092>
   84842:	aa25      	add	r2, sp, #148	; 0x94
   84844:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84846:	980c      	ldr	r0, [sp, #48]	; 0x30
   84848:	f002 fe38 	bl	874bc <__ssprint_r>
   8484c:	2800      	cmp	r0, #0
   8484e:	f47f ab64 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84852:	46c8      	mov	r8, r9
   84854:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84856:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84858:	b929      	cbnz	r1, 84866 <_svfprintf_r+0xb06>
   8485a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8485c:	b91b      	cbnz	r3, 84866 <_svfprintf_r+0xb06>
   8485e:	9b07      	ldr	r3, [sp, #28]
   84860:	07d8      	lsls	r0, r3, #31
   84862:	f57f ac6f 	bpl.w	84144 <_svfprintf_r+0x3e4>
   84866:	9819      	ldr	r0, [sp, #100]	; 0x64
   84868:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8486a:	4602      	mov	r2, r0
   8486c:	3301      	adds	r3, #1
   8486e:	4422      	add	r2, r4
   84870:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   84872:	2b07      	cmp	r3, #7
   84874:	9227      	str	r2, [sp, #156]	; 0x9c
   84876:	f8c8 4000 	str.w	r4, [r8]
   8487a:	f8c8 0004 	str.w	r0, [r8, #4]
   8487e:	9326      	str	r3, [sp, #152]	; 0x98
   84880:	f300 8431 	bgt.w	850e6 <_svfprintf_r+0x1386>
   84884:	f108 0808 	add.w	r8, r8, #8
   84888:	2900      	cmp	r1, #0
   8488a:	f2c0 8409 	blt.w	850a0 <_svfprintf_r+0x1340>
   8488e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   84890:	3301      	adds	r3, #1
   84892:	188c      	adds	r4, r1, r2
   84894:	2b07      	cmp	r3, #7
   84896:	9427      	str	r4, [sp, #156]	; 0x9c
   84898:	9326      	str	r3, [sp, #152]	; 0x98
   8489a:	f8c8 6000 	str.w	r6, [r8]
   8489e:	f8c8 1004 	str.w	r1, [r8, #4]
   848a2:	f77f ac4d 	ble.w	84140 <_svfprintf_r+0x3e0>
   848a6:	aa25      	add	r2, sp, #148	; 0x94
   848a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   848aa:	980c      	ldr	r0, [sp, #48]	; 0x30
   848ac:	f002 fe06 	bl	874bc <__ssprint_r>
   848b0:	2800      	cmp	r0, #0
   848b2:	f47f ab32 	bne.w	83f1a <_svfprintf_r+0x1ba>
   848b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   848b8:	46c8      	mov	r8, r9
   848ba:	e443      	b.n	84144 <_svfprintf_r+0x3e4>
   848bc:	aa25      	add	r2, sp, #148	; 0x94
   848be:	990b      	ldr	r1, [sp, #44]	; 0x2c
   848c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   848c2:	f002 fdfb 	bl	874bc <__ssprint_r>
   848c6:	2800      	cmp	r0, #0
   848c8:	f47f ab27 	bne.w	83f1a <_svfprintf_r+0x1ba>
   848cc:	46c8      	mov	r8, r9
   848ce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   848d0:	f7ff bbe5 	b.w	8409e <_svfprintf_r+0x33e>
   848d4:	2400      	movs	r4, #0
   848d6:	2500      	movs	r5, #0
   848d8:	f8cd b01c 	str.w	fp, [sp, #28]
   848dc:	4649      	mov	r1, r9
   848de:	e004      	b.n	848ea <_svfprintf_r+0xb8a>
   848e0:	0008830c 	.word	0x0008830c
   848e4:	00088320 	.word	0x00088320
   848e8:	4631      	mov	r1, r6
   848ea:	08e2      	lsrs	r2, r4, #3
   848ec:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   848f0:	08e8      	lsrs	r0, r5, #3
   848f2:	f004 0307 	and.w	r3, r4, #7
   848f6:	4605      	mov	r5, r0
   848f8:	4614      	mov	r4, r2
   848fa:	3330      	adds	r3, #48	; 0x30
   848fc:	ea54 0205 	orrs.w	r2, r4, r5
   84900:	f801 3c01 	strb.w	r3, [r1, #-1]
   84904:	f101 36ff 	add.w	r6, r1, #4294967295
   84908:	d1ee      	bne.n	848e8 <_svfprintf_r+0xb88>
   8490a:	9a07      	ldr	r2, [sp, #28]
   8490c:	07d2      	lsls	r2, r2, #31
   8490e:	f57f ad59 	bpl.w	843c4 <_svfprintf_r+0x664>
   84912:	2b30      	cmp	r3, #48	; 0x30
   84914:	f43f ad56 	beq.w	843c4 <_svfprintf_r+0x664>
   84918:	2330      	movs	r3, #48	; 0x30
   8491a:	3902      	subs	r1, #2
   8491c:	f806 3c01 	strb.w	r3, [r6, #-1]
   84920:	eba9 0301 	sub.w	r3, r9, r1
   84924:	930e      	str	r3, [sp, #56]	; 0x38
   84926:	460e      	mov	r6, r1
   84928:	f7ff bb36 	b.w	83f98 <_svfprintf_r+0x238>
   8492c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8492e:	2900      	cmp	r1, #0
   84930:	f77f af79 	ble.w	84826 <_svfprintf_r+0xac6>
   84934:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84936:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   84938:	4293      	cmp	r3, r2
   8493a:	bfa8      	it	ge
   8493c:	4613      	movge	r3, r2
   8493e:	2b00      	cmp	r3, #0
   84940:	461f      	mov	r7, r3
   84942:	dd0b      	ble.n	8495c <_svfprintf_r+0xbfc>
   84944:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84946:	443c      	add	r4, r7
   84948:	3301      	adds	r3, #1
   8494a:	2b07      	cmp	r3, #7
   8494c:	9427      	str	r4, [sp, #156]	; 0x9c
   8494e:	e888 00c0 	stmia.w	r8, {r6, r7}
   84952:	9326      	str	r3, [sp, #152]	; 0x98
   84954:	f300 82fb 	bgt.w	84f4e <_svfprintf_r+0x11ee>
   84958:	f108 0808 	add.w	r8, r8, #8
   8495c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8495e:	2f00      	cmp	r7, #0
   84960:	bfa8      	it	ge
   84962:	1bdb      	subge	r3, r3, r7
   84964:	2b00      	cmp	r3, #0
   84966:	461f      	mov	r7, r3
   84968:	f340 80d7 	ble.w	84b1a <_svfprintf_r+0xdba>
   8496c:	2b10      	cmp	r3, #16
   8496e:	f340 8434 	ble.w	851da <_svfprintf_r+0x147a>
   84972:	4dba      	ldr	r5, [pc, #744]	; (84c5c <_svfprintf_r+0xefc>)
   84974:	4642      	mov	r2, r8
   84976:	4621      	mov	r1, r4
   84978:	46b0      	mov	r8, r6
   8497a:	f04f 0b10 	mov.w	fp, #16
   8497e:	462e      	mov	r6, r5
   84980:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84982:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84984:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84986:	e004      	b.n	84992 <_svfprintf_r+0xc32>
   84988:	3208      	adds	r2, #8
   8498a:	3f10      	subs	r7, #16
   8498c:	2f10      	cmp	r7, #16
   8498e:	f340 80b5 	ble.w	84afc <_svfprintf_r+0xd9c>
   84992:	3301      	adds	r3, #1
   84994:	3110      	adds	r1, #16
   84996:	2b07      	cmp	r3, #7
   84998:	9127      	str	r1, [sp, #156]	; 0x9c
   8499a:	9326      	str	r3, [sp, #152]	; 0x98
   8499c:	e882 0840 	stmia.w	r2, {r6, fp}
   849a0:	ddf2      	ble.n	84988 <_svfprintf_r+0xc28>
   849a2:	aa25      	add	r2, sp, #148	; 0x94
   849a4:	4629      	mov	r1, r5
   849a6:	4620      	mov	r0, r4
   849a8:	f002 fd88 	bl	874bc <__ssprint_r>
   849ac:	2800      	cmp	r0, #0
   849ae:	f47f aab4 	bne.w	83f1a <_svfprintf_r+0x1ba>
   849b2:	464a      	mov	r2, r9
   849b4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   849b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   849b8:	e7e7      	b.n	8498a <_svfprintf_r+0xc2a>
   849ba:	2d00      	cmp	r5, #0
   849bc:	bf08      	it	eq
   849be:	2c0a      	cmpeq	r4, #10
   849c0:	f0c0 8090 	bcc.w	84ae4 <_svfprintf_r+0xd84>
   849c4:	464e      	mov	r6, r9
   849c6:	4620      	mov	r0, r4
   849c8:	4629      	mov	r1, r5
   849ca:	220a      	movs	r2, #10
   849cc:	2300      	movs	r3, #0
   849ce:	f7fe fe5d 	bl	8368c <__aeabi_uldivmod>
   849d2:	3230      	adds	r2, #48	; 0x30
   849d4:	f806 2d01 	strb.w	r2, [r6, #-1]!
   849d8:	4620      	mov	r0, r4
   849da:	4629      	mov	r1, r5
   849dc:	2300      	movs	r3, #0
   849de:	220a      	movs	r2, #10
   849e0:	f7fe fe54 	bl	8368c <__aeabi_uldivmod>
   849e4:	4604      	mov	r4, r0
   849e6:	460d      	mov	r5, r1
   849e8:	ea54 0305 	orrs.w	r3, r4, r5
   849ec:	d1eb      	bne.n	849c6 <_svfprintf_r+0xc66>
   849ee:	eba9 0306 	sub.w	r3, r9, r6
   849f2:	930e      	str	r3, [sp, #56]	; 0x38
   849f4:	f7ff bad0 	b.w	83f98 <_svfprintf_r+0x238>
   849f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   849fa:	464e      	mov	r6, r9
   849fc:	930e      	str	r3, [sp, #56]	; 0x38
   849fe:	f7ff bacb 	b.w	83f98 <_svfprintf_r+0x238>
   84a02:	1e5e      	subs	r6, r3, #1
   84a04:	2e00      	cmp	r6, #0
   84a06:	f77f aeca 	ble.w	8479e <_svfprintf_r+0xa3e>
   84a0a:	2e10      	cmp	r6, #16
   84a0c:	f340 83e3 	ble.w	851d6 <_svfprintf_r+0x1476>
   84a10:	4622      	mov	r2, r4
   84a12:	f04f 0b10 	mov.w	fp, #16
   84a16:	4d91      	ldr	r5, [pc, #580]	; (84c5c <_svfprintf_r+0xefc>)
   84a18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84a1a:	e004      	b.n	84a26 <_svfprintf_r+0xcc6>
   84a1c:	3e10      	subs	r6, #16
   84a1e:	2e10      	cmp	r6, #16
   84a20:	f108 0808 	add.w	r8, r8, #8
   84a24:	dd15      	ble.n	84a52 <_svfprintf_r+0xcf2>
   84a26:	3701      	adds	r7, #1
   84a28:	3210      	adds	r2, #16
   84a2a:	2f07      	cmp	r7, #7
   84a2c:	9227      	str	r2, [sp, #156]	; 0x9c
   84a2e:	9726      	str	r7, [sp, #152]	; 0x98
   84a30:	e888 0820 	stmia.w	r8, {r5, fp}
   84a34:	ddf2      	ble.n	84a1c <_svfprintf_r+0xcbc>
   84a36:	aa25      	add	r2, sp, #148	; 0x94
   84a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84a3a:	4620      	mov	r0, r4
   84a3c:	f002 fd3e 	bl	874bc <__ssprint_r>
   84a40:	2800      	cmp	r0, #0
   84a42:	f47f aa6a 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84a46:	3e10      	subs	r6, #16
   84a48:	2e10      	cmp	r6, #16
   84a4a:	46c8      	mov	r8, r9
   84a4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84a4e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84a50:	dce9      	bgt.n	84a26 <_svfprintf_r+0xcc6>
   84a52:	4614      	mov	r4, r2
   84a54:	3701      	adds	r7, #1
   84a56:	4434      	add	r4, r6
   84a58:	2f07      	cmp	r7, #7
   84a5a:	9427      	str	r4, [sp, #156]	; 0x9c
   84a5c:	9726      	str	r7, [sp, #152]	; 0x98
   84a5e:	e888 0060 	stmia.w	r8, {r5, r6}
   84a62:	f77f ae9a 	ble.w	8479a <_svfprintf_r+0xa3a>
   84a66:	aa25      	add	r2, sp, #148	; 0x94
   84a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84a6a:	980c      	ldr	r0, [sp, #48]	; 0x30
   84a6c:	f002 fd26 	bl	874bc <__ssprint_r>
   84a70:	2800      	cmp	r0, #0
   84a72:	f47f aa52 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84a76:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84a78:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84a7a:	46c8      	mov	r8, r9
   84a7c:	e68f      	b.n	8479e <_svfprintf_r+0xa3e>
   84a7e:	3204      	adds	r2, #4
   84a80:	681c      	ldr	r4, [r3, #0]
   84a82:	2500      	movs	r5, #0
   84a84:	2301      	movs	r3, #1
   84a86:	920f      	str	r2, [sp, #60]	; 0x3c
   84a88:	f7ff ba68 	b.w	83f5c <_svfprintf_r+0x1fc>
   84a8c:	681c      	ldr	r4, [r3, #0]
   84a8e:	3304      	adds	r3, #4
   84a90:	930f      	str	r3, [sp, #60]	; 0x3c
   84a92:	2500      	movs	r5, #0
   84a94:	e42a      	b.n	842ec <_svfprintf_r+0x58c>
   84a96:	681c      	ldr	r4, [r3, #0]
   84a98:	3304      	adds	r3, #4
   84a9a:	17e5      	asrs	r5, r4, #31
   84a9c:	4622      	mov	r2, r4
   84a9e:	930f      	str	r3, [sp, #60]	; 0x3c
   84aa0:	462b      	mov	r3, r5
   84aa2:	2a00      	cmp	r2, #0
   84aa4:	f173 0300 	sbcs.w	r3, r3, #0
   84aa8:	f6bf ac68 	bge.w	8437c <_svfprintf_r+0x61c>
   84aac:	272d      	movs	r7, #45	; 0x2d
   84aae:	4264      	negs	r4, r4
   84ab0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84ab4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   84ab8:	2301      	movs	r3, #1
   84aba:	f7ff ba53 	b.w	83f64 <_svfprintf_r+0x204>
   84abe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   84ac0:	2500      	movs	r5, #0
   84ac2:	460a      	mov	r2, r1
   84ac4:	3204      	adds	r2, #4
   84ac6:	680c      	ldr	r4, [r1, #0]
   84ac8:	920f      	str	r2, [sp, #60]	; 0x3c
   84aca:	f7ff ba47 	b.w	83f5c <_svfprintf_r+0x1fc>
   84ace:	4614      	mov	r4, r2
   84ad0:	3301      	adds	r3, #1
   84ad2:	4434      	add	r4, r6
   84ad4:	2b07      	cmp	r3, #7
   84ad6:	9427      	str	r4, [sp, #156]	; 0x9c
   84ad8:	9326      	str	r3, [sp, #152]	; 0x98
   84ada:	e888 0060 	stmia.w	r8, {r5, r6}
   84ade:	f77f ab2f 	ble.w	84140 <_svfprintf_r+0x3e0>
   84ae2:	e6e0      	b.n	848a6 <_svfprintf_r+0xb46>
   84ae4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84ae8:	2301      	movs	r3, #1
   84aea:	ae42      	add	r6, sp, #264	; 0x108
   84aec:	3430      	adds	r4, #48	; 0x30
   84aee:	f8cd b01c 	str.w	fp, [sp, #28]
   84af2:	f806 4d41 	strb.w	r4, [r6, #-65]!
   84af6:	930e      	str	r3, [sp, #56]	; 0x38
   84af8:	f7ff ba4e 	b.w	83f98 <_svfprintf_r+0x238>
   84afc:	4635      	mov	r5, r6
   84afe:	460c      	mov	r4, r1
   84b00:	4646      	mov	r6, r8
   84b02:	4690      	mov	r8, r2
   84b04:	3301      	adds	r3, #1
   84b06:	443c      	add	r4, r7
   84b08:	2b07      	cmp	r3, #7
   84b0a:	9427      	str	r4, [sp, #156]	; 0x9c
   84b0c:	9326      	str	r3, [sp, #152]	; 0x98
   84b0e:	e888 00a0 	stmia.w	r8, {r5, r7}
   84b12:	f300 8246 	bgt.w	84fa2 <_svfprintf_r+0x1242>
   84b16:	f108 0808 	add.w	r8, r8, #8
   84b1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84b1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84b1e:	429a      	cmp	r2, r3
   84b20:	db45      	blt.n	84bae <_svfprintf_r+0xe4e>
   84b22:	9b07      	ldr	r3, [sp, #28]
   84b24:	07d9      	lsls	r1, r3, #31
   84b26:	d442      	bmi.n	84bae <_svfprintf_r+0xe4e>
   84b28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84b2a:	9812      	ldr	r0, [sp, #72]	; 0x48
   84b2c:	1a9a      	subs	r2, r3, r2
   84b2e:	1a1d      	subs	r5, r3, r0
   84b30:	4295      	cmp	r5, r2
   84b32:	bfa8      	it	ge
   84b34:	4615      	movge	r5, r2
   84b36:	2d00      	cmp	r5, #0
   84b38:	dd0e      	ble.n	84b58 <_svfprintf_r+0xdf8>
   84b3a:	9926      	ldr	r1, [sp, #152]	; 0x98
   84b3c:	4406      	add	r6, r0
   84b3e:	3101      	adds	r1, #1
   84b40:	442c      	add	r4, r5
   84b42:	2907      	cmp	r1, #7
   84b44:	f8c8 6000 	str.w	r6, [r8]
   84b48:	9427      	str	r4, [sp, #156]	; 0x9c
   84b4a:	f8c8 5004 	str.w	r5, [r8, #4]
   84b4e:	9126      	str	r1, [sp, #152]	; 0x98
   84b50:	f300 8216 	bgt.w	84f80 <_svfprintf_r+0x1220>
   84b54:	f108 0808 	add.w	r8, r8, #8
   84b58:	2d00      	cmp	r5, #0
   84b5a:	bfb4      	ite	lt
   84b5c:	4616      	movlt	r6, r2
   84b5e:	1b56      	subge	r6, r2, r5
   84b60:	2e00      	cmp	r6, #0
   84b62:	f77f aaef 	ble.w	84144 <_svfprintf_r+0x3e4>
   84b66:	2e10      	cmp	r6, #16
   84b68:	f340 82f3 	ble.w	85152 <_svfprintf_r+0x13f2>
   84b6c:	4622      	mov	r2, r4
   84b6e:	2710      	movs	r7, #16
   84b70:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84b72:	4d3a      	ldr	r5, [pc, #232]	; (84c5c <_svfprintf_r+0xefc>)
   84b74:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84b78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84b7a:	e004      	b.n	84b86 <_svfprintf_r+0xe26>
   84b7c:	f108 0808 	add.w	r8, r8, #8
   84b80:	3e10      	subs	r6, #16
   84b82:	2e10      	cmp	r6, #16
   84b84:	dda3      	ble.n	84ace <_svfprintf_r+0xd6e>
   84b86:	3301      	adds	r3, #1
   84b88:	3210      	adds	r2, #16
   84b8a:	2b07      	cmp	r3, #7
   84b8c:	9227      	str	r2, [sp, #156]	; 0x9c
   84b8e:	9326      	str	r3, [sp, #152]	; 0x98
   84b90:	e888 00a0 	stmia.w	r8, {r5, r7}
   84b94:	ddf2      	ble.n	84b7c <_svfprintf_r+0xe1c>
   84b96:	aa25      	add	r2, sp, #148	; 0x94
   84b98:	4621      	mov	r1, r4
   84b9a:	4658      	mov	r0, fp
   84b9c:	f002 fc8e 	bl	874bc <__ssprint_r>
   84ba0:	2800      	cmp	r0, #0
   84ba2:	f47f a9ba 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84ba6:	46c8      	mov	r8, r9
   84ba8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84baa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84bac:	e7e8      	b.n	84b80 <_svfprintf_r+0xe20>
   84bae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84bb0:	9819      	ldr	r0, [sp, #100]	; 0x64
   84bb2:	3301      	adds	r3, #1
   84bb4:	991a      	ldr	r1, [sp, #104]	; 0x68
   84bb6:	4404      	add	r4, r0
   84bb8:	2b07      	cmp	r3, #7
   84bba:	9427      	str	r4, [sp, #156]	; 0x9c
   84bbc:	f8c8 1000 	str.w	r1, [r8]
   84bc0:	f8c8 0004 	str.w	r0, [r8, #4]
   84bc4:	9326      	str	r3, [sp, #152]	; 0x98
   84bc6:	f300 81cf 	bgt.w	84f68 <_svfprintf_r+0x1208>
   84bca:	f108 0808 	add.w	r8, r8, #8
   84bce:	e7ab      	b.n	84b28 <_svfprintf_r+0xdc8>
   84bd0:	9b07      	ldr	r3, [sp, #28]
   84bd2:	07da      	lsls	r2, r3, #31
   84bd4:	f53f adad 	bmi.w	84732 <_svfprintf_r+0x9d2>
   84bd8:	2301      	movs	r3, #1
   84bda:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84bdc:	441c      	add	r4, r3
   84bde:	441f      	add	r7, r3
   84be0:	2f07      	cmp	r7, #7
   84be2:	9427      	str	r4, [sp, #156]	; 0x9c
   84be4:	f8c8 6000 	str.w	r6, [r8]
   84be8:	9726      	str	r7, [sp, #152]	; 0x98
   84bea:	f8c8 3004 	str.w	r3, [r8, #4]
   84bee:	f77f add4 	ble.w	8479a <_svfprintf_r+0xa3a>
   84bf2:	aa25      	add	r2, sp, #148	; 0x94
   84bf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84bf6:	980c      	ldr	r0, [sp, #48]	; 0x30
   84bf8:	f002 fc60 	bl	874bc <__ssprint_r>
   84bfc:	2800      	cmp	r0, #0
   84bfe:	f47f a98c 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84c02:	46c8      	mov	r8, r9
   84c04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c06:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84c08:	e5c9      	b.n	8479e <_svfprintf_r+0xa3e>
   84c0a:	aa25      	add	r2, sp, #148	; 0x94
   84c0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c0e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c10:	f002 fc54 	bl	874bc <__ssprint_r>
   84c14:	2800      	cmp	r0, #0
   84c16:	f47f a980 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84c1a:	46c8      	mov	r8, r9
   84c1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c1e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84c20:	e596      	b.n	84750 <_svfprintf_r+0x9f0>
   84c22:	aa25      	add	r2, sp, #148	; 0x94
   84c24:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c26:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c28:	f002 fc48 	bl	874bc <__ssprint_r>
   84c2c:	2800      	cmp	r0, #0
   84c2e:	f47f a974 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84c32:	46c8      	mov	r8, r9
   84c34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c36:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84c38:	e599      	b.n	8476e <_svfprintf_r+0xa0e>
   84c3a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84c3c:	3407      	adds	r4, #7
   84c3e:	f024 0407 	bic.w	r4, r4, #7
   84c42:	f104 0108 	add.w	r1, r4, #8
   84c46:	e9d4 2300 	ldrd	r2, r3, [r4]
   84c4a:	910f      	str	r1, [sp, #60]	; 0x3c
   84c4c:	4614      	mov	r4, r2
   84c4e:	461d      	mov	r5, r3
   84c50:	f7ff bb8f 	b.w	84372 <_svfprintf_r+0x612>
   84c54:	464e      	mov	r6, r9
   84c56:	f7ff b99f 	b.w	83f98 <_svfprintf_r+0x238>
   84c5a:	bf00      	nop
   84c5c:	00088320 	.word	0x00088320
   84c60:	aa25      	add	r2, sp, #148	; 0x94
   84c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c64:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c66:	f002 fc29 	bl	874bc <__ssprint_r>
   84c6a:	2800      	cmp	r0, #0
   84c6c:	f47f a955 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84c70:	46c8      	mov	r8, r9
   84c72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84c74:	f7ff ba16 	b.w	840a4 <_svfprintf_r+0x344>
   84c78:	9c15      	ldr	r4, [sp, #84]	; 0x54
   84c7a:	4622      	mov	r2, r4
   84c7c:	4620      	mov	r0, r4
   84c7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   84c80:	4623      	mov	r3, r4
   84c82:	4621      	mov	r1, r4
   84c84:	f003 faca 	bl	8821c <__aeabi_dcmpun>
   84c88:	2800      	cmp	r0, #0
   84c8a:	f040 8273 	bne.w	85174 <_svfprintf_r+0x1414>
   84c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84c90:	3301      	adds	r3, #1
   84c92:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84c94:	f023 0320 	bic.w	r3, r3, #32
   84c98:	930e      	str	r3, [sp, #56]	; 0x38
   84c9a:	f000 819c 	beq.w	84fd6 <_svfprintf_r+0x1276>
   84c9e:	2b47      	cmp	r3, #71	; 0x47
   84ca0:	f000 80d6 	beq.w	84e50 <_svfprintf_r+0x10f0>
   84ca4:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   84ca8:	9307      	str	r3, [sp, #28]
   84caa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84cac:	1e1f      	subs	r7, r3, #0
   84cae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84cb0:	9308      	str	r3, [sp, #32]
   84cb2:	bfb7      	itett	lt
   84cb4:	463b      	movlt	r3, r7
   84cb6:	2300      	movge	r3, #0
   84cb8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   84cbc:	232d      	movlt	r3, #45	; 0x2d
   84cbe:	9310      	str	r3, [sp, #64]	; 0x40
   84cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84cc2:	2b66      	cmp	r3, #102	; 0x66
   84cc4:	f000 8190 	beq.w	84fe8 <_svfprintf_r+0x1288>
   84cc8:	2b46      	cmp	r3, #70	; 0x46
   84cca:	f000 80a4 	beq.w	84e16 <_svfprintf_r+0x10b6>
   84cce:	2002      	movs	r0, #2
   84cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84cd2:	a923      	add	r1, sp, #140	; 0x8c
   84cd4:	2b45      	cmp	r3, #69	; 0x45
   84cd6:	bf0a      	itet	eq
   84cd8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   84cda:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   84cdc:	1c5d      	addeq	r5, r3, #1
   84cde:	e88d 0021 	stmia.w	sp, {r0, r5}
   84ce2:	9104      	str	r1, [sp, #16]
   84ce4:	a820      	add	r0, sp, #128	; 0x80
   84ce6:	a91f      	add	r1, sp, #124	; 0x7c
   84ce8:	463b      	mov	r3, r7
   84cea:	9003      	str	r0, [sp, #12]
   84cec:	9a08      	ldr	r2, [sp, #32]
   84cee:	9102      	str	r1, [sp, #8]
   84cf0:	980c      	ldr	r0, [sp, #48]	; 0x30
   84cf2:	f000 fb59 	bl	853a8 <_dtoa_r>
   84cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84cf8:	4606      	mov	r6, r0
   84cfa:	2b67      	cmp	r3, #103	; 0x67
   84cfc:	f040 81ba 	bne.w	85074 <_svfprintf_r+0x1314>
   84d00:	f01b 0f01 	tst.w	fp, #1
   84d04:	f000 8223 	beq.w	8514e <_svfprintf_r+0x13ee>
   84d08:	1974      	adds	r4, r6, r5
   84d0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   84d0c:	9808      	ldr	r0, [sp, #32]
   84d0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   84d10:	4639      	mov	r1, r7
   84d12:	f003 fa51 	bl	881b8 <__aeabi_dcmpeq>
   84d16:	2800      	cmp	r0, #0
   84d18:	f040 8124 	bne.w	84f64 <_svfprintf_r+0x1204>
   84d1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84d1e:	42a3      	cmp	r3, r4
   84d20:	d206      	bcs.n	84d30 <_svfprintf_r+0xfd0>
   84d22:	2130      	movs	r1, #48	; 0x30
   84d24:	1c5a      	adds	r2, r3, #1
   84d26:	9223      	str	r2, [sp, #140]	; 0x8c
   84d28:	7019      	strb	r1, [r3, #0]
   84d2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84d2c:	429c      	cmp	r4, r3
   84d2e:	d8f9      	bhi.n	84d24 <_svfprintf_r+0xfc4>
   84d30:	1b9b      	subs	r3, r3, r6
   84d32:	9313      	str	r3, [sp, #76]	; 0x4c
   84d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84d36:	2b47      	cmp	r3, #71	; 0x47
   84d38:	f000 80a2 	beq.w	84e80 <_svfprintf_r+0x1120>
   84d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84d3e:	2b65      	cmp	r3, #101	; 0x65
   84d40:	f340 81a7 	ble.w	85092 <_svfprintf_r+0x1332>
   84d44:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84d46:	2b66      	cmp	r3, #102	; 0x66
   84d48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84d4a:	9312      	str	r3, [sp, #72]	; 0x48
   84d4c:	f000 8171 	beq.w	85032 <_svfprintf_r+0x12d2>
   84d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84d52:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84d54:	4619      	mov	r1, r3
   84d56:	4291      	cmp	r1, r2
   84d58:	f300 815d 	bgt.w	85016 <_svfprintf_r+0x12b6>
   84d5c:	f01b 0f01 	tst.w	fp, #1
   84d60:	f040 81f0 	bne.w	85144 <_svfprintf_r+0x13e4>
   84d64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   84d68:	9308      	str	r3, [sp, #32]
   84d6a:	2367      	movs	r3, #103	; 0x67
   84d6c:	920e      	str	r2, [sp, #56]	; 0x38
   84d6e:	9311      	str	r3, [sp, #68]	; 0x44
   84d70:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84d72:	2b00      	cmp	r3, #0
   84d74:	d17d      	bne.n	84e72 <_svfprintf_r+0x1112>
   84d76:	930a      	str	r3, [sp, #40]	; 0x28
   84d78:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84d7c:	f7ff b914 	b.w	83fa8 <_svfprintf_r+0x248>
   84d80:	f024 0407 	bic.w	r4, r4, #7
   84d84:	6823      	ldr	r3, [r4, #0]
   84d86:	9315      	str	r3, [sp, #84]	; 0x54
   84d88:	6863      	ldr	r3, [r4, #4]
   84d8a:	9314      	str	r3, [sp, #80]	; 0x50
   84d8c:	f104 0308 	add.w	r3, r4, #8
   84d90:	930f      	str	r3, [sp, #60]	; 0x3c
   84d92:	f7ff bb2f 	b.w	843f4 <_svfprintf_r+0x694>
   84d96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84d98:	6813      	ldr	r3, [r2, #0]
   84d9a:	3204      	adds	r2, #4
   84d9c:	920f      	str	r2, [sp, #60]	; 0x3c
   84d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   84da0:	601a      	str	r2, [r3, #0]
   84da2:	f7ff b804 	b.w	83dae <_svfprintf_r+0x4e>
   84da6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84da8:	4daf      	ldr	r5, [pc, #700]	; (85068 <_svfprintf_r+0x1308>)
   84daa:	f7ff b9ad 	b.w	84108 <_svfprintf_r+0x3a8>
   84dae:	aa25      	add	r2, sp, #148	; 0x94
   84db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84db2:	980c      	ldr	r0, [sp, #48]	; 0x30
   84db4:	f002 fb82 	bl	874bc <__ssprint_r>
   84db8:	2800      	cmp	r0, #0
   84dba:	f47f a8ae 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84dbe:	46c8      	mov	r8, r9
   84dc0:	e431      	b.n	84626 <_svfprintf_r+0x8c6>
   84dc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84dc4:	4613      	mov	r3, r2
   84dc6:	3304      	adds	r3, #4
   84dc8:	930f      	str	r3, [sp, #60]	; 0x3c
   84dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84dcc:	6811      	ldr	r1, [r2, #0]
   84dce:	17dd      	asrs	r5, r3, #31
   84dd0:	461a      	mov	r2, r3
   84dd2:	462b      	mov	r3, r5
   84dd4:	e9c1 2300 	strd	r2, r3, [r1]
   84dd8:	f7fe bfe9 	b.w	83dae <_svfprintf_r+0x4e>
   84ddc:	aa25      	add	r2, sp, #148	; 0x94
   84dde:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84de0:	980c      	ldr	r0, [sp, #48]	; 0x30
   84de2:	f002 fb6b 	bl	874bc <__ssprint_r>
   84de6:	2800      	cmp	r0, #0
   84de8:	f47f a897 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84dec:	46c8      	mov	r8, r9
   84dee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84df0:	e432      	b.n	84658 <_svfprintf_r+0x8f8>
   84df2:	f108 0808 	add.w	r8, r8, #8
   84df6:	e52f      	b.n	84858 <_svfprintf_r+0xaf8>
   84df8:	2140      	movs	r1, #64	; 0x40
   84dfa:	980c      	ldr	r0, [sp, #48]	; 0x30
   84dfc:	f001 fcea 	bl	867d4 <_malloc_r>
   84e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84e02:	6010      	str	r0, [r2, #0]
   84e04:	6110      	str	r0, [r2, #16]
   84e06:	2800      	cmp	r0, #0
   84e08:	f000 8214 	beq.w	85234 <_svfprintf_r+0x14d4>
   84e0c:	2340      	movs	r3, #64	; 0x40
   84e0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84e10:	6153      	str	r3, [r2, #20]
   84e12:	f7fe bfbc 	b.w	83d8e <_svfprintf_r+0x2e>
   84e16:	2003      	movs	r0, #3
   84e18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84e1a:	a923      	add	r1, sp, #140	; 0x8c
   84e1c:	e88d 0011 	stmia.w	sp, {r0, r4}
   84e20:	9104      	str	r1, [sp, #16]
   84e22:	a820      	add	r0, sp, #128	; 0x80
   84e24:	a91f      	add	r1, sp, #124	; 0x7c
   84e26:	9003      	str	r0, [sp, #12]
   84e28:	9a08      	ldr	r2, [sp, #32]
   84e2a:	463b      	mov	r3, r7
   84e2c:	9102      	str	r1, [sp, #8]
   84e2e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84e30:	f000 faba 	bl	853a8 <_dtoa_r>
   84e34:	4625      	mov	r5, r4
   84e36:	4606      	mov	r6, r0
   84e38:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84e3a:	1974      	adds	r4, r6, r5
   84e3c:	2b46      	cmp	r3, #70	; 0x46
   84e3e:	f47f af64 	bne.w	84d0a <_svfprintf_r+0xfaa>
   84e42:	7833      	ldrb	r3, [r6, #0]
   84e44:	2b30      	cmp	r3, #48	; 0x30
   84e46:	f000 8187 	beq.w	85158 <_svfprintf_r+0x13f8>
   84e4a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   84e4c:	442c      	add	r4, r5
   84e4e:	e75c      	b.n	84d0a <_svfprintf_r+0xfaa>
   84e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84e52:	2b00      	cmp	r3, #0
   84e54:	bf08      	it	eq
   84e56:	2301      	moveq	r3, #1
   84e58:	930a      	str	r3, [sp, #40]	; 0x28
   84e5a:	e723      	b.n	84ca4 <_svfprintf_r+0xf44>
   84e5c:	4630      	mov	r0, r6
   84e5e:	950a      	str	r5, [sp, #40]	; 0x28
   84e60:	f002 fafe 	bl	87460 <strlen>
   84e64:	940f      	str	r4, [sp, #60]	; 0x3c
   84e66:	900e      	str	r0, [sp, #56]	; 0x38
   84e68:	f8cd b01c 	str.w	fp, [sp, #28]
   84e6c:	4603      	mov	r3, r0
   84e6e:	f7ff b9e7 	b.w	84240 <_svfprintf_r+0x4e0>
   84e72:	272d      	movs	r7, #45	; 0x2d
   84e74:	2300      	movs	r3, #0
   84e76:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   84e7a:	930a      	str	r3, [sp, #40]	; 0x28
   84e7c:	f7ff b895 	b.w	83faa <_svfprintf_r+0x24a>
   84e80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84e82:	461a      	mov	r2, r3
   84e84:	9312      	str	r3, [sp, #72]	; 0x48
   84e86:	3303      	adds	r3, #3
   84e88:	db04      	blt.n	84e94 <_svfprintf_r+0x1134>
   84e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84e8c:	4619      	mov	r1, r3
   84e8e:	4291      	cmp	r1, r2
   84e90:	f6bf af5e 	bge.w	84d50 <_svfprintf_r+0xff0>
   84e94:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84e96:	3b02      	subs	r3, #2
   84e98:	9311      	str	r3, [sp, #68]	; 0x44
   84e9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84e9c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   84ea0:	3b01      	subs	r3, #1
   84ea2:	2b00      	cmp	r3, #0
   84ea4:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   84ea8:	bfb4      	ite	lt
   84eaa:	222d      	movlt	r2, #45	; 0x2d
   84eac:	222b      	movge	r2, #43	; 0x2b
   84eae:	931f      	str	r3, [sp, #124]	; 0x7c
   84eb0:	bfb8      	it	lt
   84eb2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   84eb4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   84eb8:	bfb8      	it	lt
   84eba:	f1c3 0301 	rsblt	r3, r3, #1
   84ebe:	2b09      	cmp	r3, #9
   84ec0:	f340 811f 	ble.w	85102 <_svfprintf_r+0x13a2>
   84ec4:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   84ec8:	4601      	mov	r1, r0
   84eca:	4c68      	ldr	r4, [pc, #416]	; (8506c <_svfprintf_r+0x130c>)
   84ecc:	e000      	b.n	84ed0 <_svfprintf_r+0x1170>
   84ece:	4611      	mov	r1, r2
   84ed0:	fb84 5203 	smull	r5, r2, r4, r3
   84ed4:	17dd      	asrs	r5, r3, #31
   84ed6:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   84eda:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   84ede:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   84ee2:	3230      	adds	r2, #48	; 0x30
   84ee4:	2d09      	cmp	r5, #9
   84ee6:	f801 2c01 	strb.w	r2, [r1, #-1]
   84eea:	462b      	mov	r3, r5
   84eec:	f101 32ff 	add.w	r2, r1, #4294967295
   84ef0:	dced      	bgt.n	84ece <_svfprintf_r+0x116e>
   84ef2:	3330      	adds	r3, #48	; 0x30
   84ef4:	3902      	subs	r1, #2
   84ef6:	b2dc      	uxtb	r4, r3
   84ef8:	4288      	cmp	r0, r1
   84efa:	f802 4c01 	strb.w	r4, [r2, #-1]
   84efe:	f240 8192 	bls.w	85226 <_svfprintf_r+0x14c6>
   84f02:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   84f06:	4613      	mov	r3, r2
   84f08:	e001      	b.n	84f0e <_svfprintf_r+0x11ae>
   84f0a:	f813 4b01 	ldrb.w	r4, [r3], #1
   84f0e:	4283      	cmp	r3, r0
   84f10:	f801 4b01 	strb.w	r4, [r1], #1
   84f14:	d1f9      	bne.n	84f0a <_svfprintf_r+0x11aa>
   84f16:	3301      	adds	r3, #1
   84f18:	1a9b      	subs	r3, r3, r2
   84f1a:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   84f1e:	4413      	add	r3, r2
   84f20:	aa21      	add	r2, sp, #132	; 0x84
   84f22:	1a9b      	subs	r3, r3, r2
   84f24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   84f26:	931b      	str	r3, [sp, #108]	; 0x6c
   84f28:	2a01      	cmp	r2, #1
   84f2a:	4413      	add	r3, r2
   84f2c:	930e      	str	r3, [sp, #56]	; 0x38
   84f2e:	f340 8148 	ble.w	851c2 <_svfprintf_r+0x1462>
   84f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84f34:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84f36:	4413      	add	r3, r2
   84f38:	930e      	str	r3, [sp, #56]	; 0x38
   84f3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84f3e:	9308      	str	r3, [sp, #32]
   84f40:	2300      	movs	r3, #0
   84f42:	9312      	str	r3, [sp, #72]	; 0x48
   84f44:	e714      	b.n	84d70 <_svfprintf_r+0x1010>
   84f46:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84f48:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84f4a:	f7ff b876 	b.w	8403a <_svfprintf_r+0x2da>
   84f4e:	aa25      	add	r2, sp, #148	; 0x94
   84f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f52:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f54:	f002 fab2 	bl	874bc <__ssprint_r>
   84f58:	2800      	cmp	r0, #0
   84f5a:	f47e afde 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84f5e:	46c8      	mov	r8, r9
   84f60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84f62:	e4fb      	b.n	8495c <_svfprintf_r+0xbfc>
   84f64:	4623      	mov	r3, r4
   84f66:	e6e3      	b.n	84d30 <_svfprintf_r+0xfd0>
   84f68:	aa25      	add	r2, sp, #148	; 0x94
   84f6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f6c:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f6e:	f002 faa5 	bl	874bc <__ssprint_r>
   84f72:	2800      	cmp	r0, #0
   84f74:	f47e afd1 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84f78:	46c8      	mov	r8, r9
   84f7a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84f7c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84f7e:	e5d3      	b.n	84b28 <_svfprintf_r+0xdc8>
   84f80:	aa25      	add	r2, sp, #148	; 0x94
   84f82:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f84:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f86:	f002 fa99 	bl	874bc <__ssprint_r>
   84f8a:	2800      	cmp	r0, #0
   84f8c:	f47e afc5 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84f90:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84f92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84f94:	46c8      	mov	r8, r9
   84f96:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84f98:	1a9a      	subs	r2, r3, r2
   84f9a:	e5dd      	b.n	84b58 <_svfprintf_r+0xdf8>
   84f9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84f9e:	f7ff b8fe 	b.w	8419e <_svfprintf_r+0x43e>
   84fa2:	aa25      	add	r2, sp, #148	; 0x94
   84fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
   84fa8:	f002 fa88 	bl	874bc <__ssprint_r>
   84fac:	2800      	cmp	r0, #0
   84fae:	f47e afb4 	bne.w	83f1a <_svfprintf_r+0x1ba>
   84fb2:	46c8      	mov	r8, r9
   84fb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84fb6:	e5b0      	b.n	84b1a <_svfprintf_r+0xdba>
   84fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84fba:	4637      	mov	r7, r6
   84fbc:	2b06      	cmp	r3, #6
   84fbe:	bf28      	it	cs
   84fc0:	2306      	movcs	r3, #6
   84fc2:	960a      	str	r6, [sp, #40]	; 0x28
   84fc4:	9612      	str	r6, [sp, #72]	; 0x48
   84fc6:	9308      	str	r3, [sp, #32]
   84fc8:	940f      	str	r4, [sp, #60]	; 0x3c
   84fca:	f8cd b01c 	str.w	fp, [sp, #28]
   84fce:	930e      	str	r3, [sp, #56]	; 0x38
   84fd0:	4e27      	ldr	r6, [pc, #156]	; (85070 <_svfprintf_r+0x1310>)
   84fd2:	f7fe bfe9 	b.w	83fa8 <_svfprintf_r+0x248>
   84fd6:	2306      	movs	r3, #6
   84fd8:	930a      	str	r3, [sp, #40]	; 0x28
   84fda:	e663      	b.n	84ca4 <_svfprintf_r+0xf44>
   84fdc:	232d      	movs	r3, #45	; 0x2d
   84fde:	461f      	mov	r7, r3
   84fe0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84fe4:	f7ff ba28 	b.w	84438 <_svfprintf_r+0x6d8>
   84fe8:	2003      	movs	r0, #3
   84fea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84fec:	a923      	add	r1, sp, #140	; 0x8c
   84fee:	e88d 0011 	stmia.w	sp, {r0, r4}
   84ff2:	9104      	str	r1, [sp, #16]
   84ff4:	a820      	add	r0, sp, #128	; 0x80
   84ff6:	a91f      	add	r1, sp, #124	; 0x7c
   84ff8:	9003      	str	r0, [sp, #12]
   84ffa:	9a08      	ldr	r2, [sp, #32]
   84ffc:	463b      	mov	r3, r7
   84ffe:	9102      	str	r1, [sp, #8]
   85000:	980c      	ldr	r0, [sp, #48]	; 0x30
   85002:	f000 f9d1 	bl	853a8 <_dtoa_r>
   85006:	4625      	mov	r5, r4
   85008:	4606      	mov	r6, r0
   8500a:	1904      	adds	r4, r0, r4
   8500c:	e719      	b.n	84e42 <_svfprintf_r+0x10e2>
   8500e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85010:	4d15      	ldr	r5, [pc, #84]	; (85068 <_svfprintf_r+0x1308>)
   85012:	f7ff bb7e 	b.w	84712 <_svfprintf_r+0x9b2>
   85016:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85018:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8501a:	4413      	add	r3, r2
   8501c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8501e:	930e      	str	r3, [sp, #56]	; 0x38
   85020:	2a00      	cmp	r2, #0
   85022:	f340 80c7 	ble.w	851b4 <_svfprintf_r+0x1454>
   85026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8502a:	9308      	str	r3, [sp, #32]
   8502c:	2367      	movs	r3, #103	; 0x67
   8502e:	9311      	str	r3, [sp, #68]	; 0x44
   85030:	e69e      	b.n	84d70 <_svfprintf_r+0x1010>
   85032:	2b00      	cmp	r3, #0
   85034:	f340 80e1 	ble.w	851fa <_svfprintf_r+0x149a>
   85038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8503a:	2a00      	cmp	r2, #0
   8503c:	f040 80b0 	bne.w	851a0 <_svfprintf_r+0x1440>
   85040:	f01b 0f01 	tst.w	fp, #1
   85044:	f040 80ac 	bne.w	851a0 <_svfprintf_r+0x1440>
   85048:	9308      	str	r3, [sp, #32]
   8504a:	930e      	str	r3, [sp, #56]	; 0x38
   8504c:	e690      	b.n	84d70 <_svfprintf_r+0x1010>
   8504e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85050:	940f      	str	r4, [sp, #60]	; 0x3c
   85052:	9308      	str	r3, [sp, #32]
   85054:	930e      	str	r3, [sp, #56]	; 0x38
   85056:	900a      	str	r0, [sp, #40]	; 0x28
   85058:	f8cd b01c 	str.w	fp, [sp, #28]
   8505c:	9012      	str	r0, [sp, #72]	; 0x48
   8505e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85062:	f7fe bfa1 	b.w	83fa8 <_svfprintf_r+0x248>
   85066:	bf00      	nop
   85068:	00088320 	.word	0x00088320
   8506c:	66666667 	.word	0x66666667
   85070:	00088304 	.word	0x00088304
   85074:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85076:	2b47      	cmp	r3, #71	; 0x47
   85078:	f47f ae46 	bne.w	84d08 <_svfprintf_r+0xfa8>
   8507c:	f01b 0f01 	tst.w	fp, #1
   85080:	f47f aeda 	bne.w	84e38 <_svfprintf_r+0x10d8>
   85084:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85086:	1b9b      	subs	r3, r3, r6
   85088:	9313      	str	r3, [sp, #76]	; 0x4c
   8508a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8508c:	2b47      	cmp	r3, #71	; 0x47
   8508e:	f43f aef7 	beq.w	84e80 <_svfprintf_r+0x1120>
   85092:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85094:	9312      	str	r3, [sp, #72]	; 0x48
   85096:	e700      	b.n	84e9a <_svfprintf_r+0x113a>
   85098:	2000      	movs	r0, #0
   8509a:	900a      	str	r0, [sp, #40]	; 0x28
   8509c:	f7fe bebc 	b.w	83e18 <_svfprintf_r+0xb8>
   850a0:	424f      	negs	r7, r1
   850a2:	3110      	adds	r1, #16
   850a4:	da35      	bge.n	85112 <_svfprintf_r+0x13b2>
   850a6:	2410      	movs	r4, #16
   850a8:	4d6a      	ldr	r5, [pc, #424]	; (85254 <_svfprintf_r+0x14f4>)
   850aa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   850ae:	e004      	b.n	850ba <_svfprintf_r+0x135a>
   850b0:	f108 0808 	add.w	r8, r8, #8
   850b4:	3f10      	subs	r7, #16
   850b6:	2f10      	cmp	r7, #16
   850b8:	dd2c      	ble.n	85114 <_svfprintf_r+0x13b4>
   850ba:	3301      	adds	r3, #1
   850bc:	3210      	adds	r2, #16
   850be:	2b07      	cmp	r3, #7
   850c0:	9227      	str	r2, [sp, #156]	; 0x9c
   850c2:	9326      	str	r3, [sp, #152]	; 0x98
   850c4:	f8c8 5000 	str.w	r5, [r8]
   850c8:	f8c8 4004 	str.w	r4, [r8, #4]
   850cc:	ddf0      	ble.n	850b0 <_svfprintf_r+0x1350>
   850ce:	aa25      	add	r2, sp, #148	; 0x94
   850d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   850d2:	4658      	mov	r0, fp
   850d4:	f002 f9f2 	bl	874bc <__ssprint_r>
   850d8:	2800      	cmp	r0, #0
   850da:	f47e af1e 	bne.w	83f1a <_svfprintf_r+0x1ba>
   850de:	46c8      	mov	r8, r9
   850e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   850e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   850e4:	e7e6      	b.n	850b4 <_svfprintf_r+0x1354>
   850e6:	aa25      	add	r2, sp, #148	; 0x94
   850e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   850ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   850ec:	f002 f9e6 	bl	874bc <__ssprint_r>
   850f0:	2800      	cmp	r0, #0
   850f2:	f47e af12 	bne.w	83f1a <_svfprintf_r+0x1ba>
   850f6:	46c8      	mov	r8, r9
   850f8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   850fa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   850fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   850fe:	f7ff bbc3 	b.w	84888 <_svfprintf_r+0xb28>
   85102:	2230      	movs	r2, #48	; 0x30
   85104:	4413      	add	r3, r2
   85106:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   8510a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   8510e:	ab22      	add	r3, sp, #136	; 0x88
   85110:	e706      	b.n	84f20 <_svfprintf_r+0x11c0>
   85112:	4d50      	ldr	r5, [pc, #320]	; (85254 <_svfprintf_r+0x14f4>)
   85114:	3301      	adds	r3, #1
   85116:	443a      	add	r2, r7
   85118:	2b07      	cmp	r3, #7
   8511a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8511e:	9227      	str	r2, [sp, #156]	; 0x9c
   85120:	9326      	str	r3, [sp, #152]	; 0x98
   85122:	f108 0808 	add.w	r8, r8, #8
   85126:	f77f abb2 	ble.w	8488e <_svfprintf_r+0xb2e>
   8512a:	aa25      	add	r2, sp, #148	; 0x94
   8512c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8512e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85130:	f002 f9c4 	bl	874bc <__ssprint_r>
   85134:	2800      	cmp	r0, #0
   85136:	f47e aef0 	bne.w	83f1a <_svfprintf_r+0x1ba>
   8513a:	46c8      	mov	r8, r9
   8513c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8513e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85140:	f7ff bba5 	b.w	8488e <_svfprintf_r+0xb2e>
   85144:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85146:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85148:	4413      	add	r3, r2
   8514a:	930e      	str	r3, [sp, #56]	; 0x38
   8514c:	e76b      	b.n	85026 <_svfprintf_r+0x12c6>
   8514e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85150:	e5ee      	b.n	84d30 <_svfprintf_r+0xfd0>
   85152:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85154:	4d3f      	ldr	r5, [pc, #252]	; (85254 <_svfprintf_r+0x14f4>)
   85156:	e4bb      	b.n	84ad0 <_svfprintf_r+0xd70>
   85158:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8515a:	9808      	ldr	r0, [sp, #32]
   8515c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8515e:	4639      	mov	r1, r7
   85160:	f003 f82a 	bl	881b8 <__aeabi_dcmpeq>
   85164:	2800      	cmp	r0, #0
   85166:	f47f ae70 	bne.w	84e4a <_svfprintf_r+0x10ea>
   8516a:	f1c5 0501 	rsb	r5, r5, #1
   8516e:	951f      	str	r5, [sp, #124]	; 0x7c
   85170:	442c      	add	r4, r5
   85172:	e5ca      	b.n	84d0a <_svfprintf_r+0xfaa>
   85174:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85176:	4e38      	ldr	r6, [pc, #224]	; (85258 <_svfprintf_r+0x14f8>)
   85178:	2b00      	cmp	r3, #0
   8517a:	bfbe      	ittt	lt
   8517c:	232d      	movlt	r3, #45	; 0x2d
   8517e:	461f      	movlt	r7, r3
   85180:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   85184:	f04f 0303 	mov.w	r3, #3
   85188:	461a      	mov	r2, r3
   8518a:	9308      	str	r3, [sp, #32]
   8518c:	f04f 0300 	mov.w	r3, #0
   85190:	bfa8      	it	ge
   85192:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   85196:	4619      	mov	r1, r3
   85198:	930a      	str	r3, [sp, #40]	; 0x28
   8519a:	4b30      	ldr	r3, [pc, #192]	; (8525c <_svfprintf_r+0x14fc>)
   8519c:	f7ff b954 	b.w	84448 <_svfprintf_r+0x6e8>
   851a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   851a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   851a4:	4413      	add	r3, r2
   851a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   851a8:	441a      	add	r2, r3
   851aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   851ae:	920e      	str	r2, [sp, #56]	; 0x38
   851b0:	9308      	str	r3, [sp, #32]
   851b2:	e5dd      	b.n	84d70 <_svfprintf_r+0x1010>
   851b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   851b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   851b8:	f1c3 0301 	rsb	r3, r3, #1
   851bc:	441a      	add	r2, r3
   851be:	4613      	mov	r3, r2
   851c0:	e7c3      	b.n	8514a <_svfprintf_r+0x13ea>
   851c2:	f01b 0301 	ands.w	r3, fp, #1
   851c6:	9312      	str	r3, [sp, #72]	; 0x48
   851c8:	f47f aeb3 	bne.w	84f32 <_svfprintf_r+0x11d2>
   851cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   851ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   851d2:	9308      	str	r3, [sp, #32]
   851d4:	e5cc      	b.n	84d70 <_svfprintf_r+0x1010>
   851d6:	4d1f      	ldr	r5, [pc, #124]	; (85254 <_svfprintf_r+0x14f4>)
   851d8:	e43c      	b.n	84a54 <_svfprintf_r+0xcf4>
   851da:	9b26      	ldr	r3, [sp, #152]	; 0x98
   851dc:	4d1d      	ldr	r5, [pc, #116]	; (85254 <_svfprintf_r+0x14f4>)
   851de:	e491      	b.n	84b04 <_svfprintf_r+0xda4>
   851e0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   851e2:	f89a 3001 	ldrb.w	r3, [sl, #1]
   851e6:	6828      	ldr	r0, [r5, #0]
   851e8:	46a2      	mov	sl, r4
   851ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   851ee:	900a      	str	r0, [sp, #40]	; 0x28
   851f0:	4628      	mov	r0, r5
   851f2:	3004      	adds	r0, #4
   851f4:	900f      	str	r0, [sp, #60]	; 0x3c
   851f6:	f7fe be0d 	b.w	83e14 <_svfprintf_r+0xb4>
   851fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   851fc:	b913      	cbnz	r3, 85204 <_svfprintf_r+0x14a4>
   851fe:	f01b 0f01 	tst.w	fp, #1
   85202:	d002      	beq.n	8520a <_svfprintf_r+0x14aa>
   85204:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85206:	3301      	adds	r3, #1
   85208:	e7cd      	b.n	851a6 <_svfprintf_r+0x1446>
   8520a:	2301      	movs	r3, #1
   8520c:	e71c      	b.n	85048 <_svfprintf_r+0x12e8>
   8520e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85212:	f7ff b980 	b.w	84516 <_svfprintf_r+0x7b6>
   85216:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8521a:	f7ff b93a 	b.w	84492 <_svfprintf_r+0x732>
   8521e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85222:	f7ff b84f 	b.w	842c4 <_svfprintf_r+0x564>
   85226:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   8522a:	e679      	b.n	84f20 <_svfprintf_r+0x11c0>
   8522c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85230:	f7ff b9b2 	b.w	84598 <_svfprintf_r+0x838>
   85234:	f04f 32ff 	mov.w	r2, #4294967295
   85238:	230c      	movs	r3, #12
   8523a:	9209      	str	r2, [sp, #36]	; 0x24
   8523c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8523e:	6013      	str	r3, [r2, #0]
   85240:	f7fe be74 	b.w	83f2c <_svfprintf_r+0x1cc>
   85244:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85248:	f7ff b8c4 	b.w	843d4 <_svfprintf_r+0x674>
   8524c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85250:	f7ff b878 	b.w	84344 <_svfprintf_r+0x5e4>
   85254:	00088320 	.word	0x00088320
   85258:	000882d8 	.word	0x000882d8
   8525c:	000882d4 	.word	0x000882d4

00085260 <register_fini>:
   85260:	4b02      	ldr	r3, [pc, #8]	; (8526c <register_fini+0xc>)
   85262:	b113      	cbz	r3, 8526a <register_fini+0xa>
   85264:	4802      	ldr	r0, [pc, #8]	; (85270 <register_fini+0x10>)
   85266:	f000 b805 	b.w	85274 <atexit>
   8526a:	4770      	bx	lr
   8526c:	00000000 	.word	0x00000000
   85270:	0008644d 	.word	0x0008644d

00085274 <atexit>:
   85274:	2300      	movs	r3, #0
   85276:	4601      	mov	r1, r0
   85278:	461a      	mov	r2, r3
   8527a:	4618      	mov	r0, r3
   8527c:	f002 b9b2 	b.w	875e4 <__register_exitproc>

00085280 <quorem>:
   85280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85284:	6903      	ldr	r3, [r0, #16]
   85286:	690f      	ldr	r7, [r1, #16]
   85288:	b083      	sub	sp, #12
   8528a:	429f      	cmp	r7, r3
   8528c:	f300 8088 	bgt.w	853a0 <quorem+0x120>
   85290:	3f01      	subs	r7, #1
   85292:	f101 0614 	add.w	r6, r1, #20
   85296:	f100 0a14 	add.w	sl, r0, #20
   8529a:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   8529e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   852a2:	3301      	adds	r3, #1
   852a4:	fbb2 f8f3 	udiv	r8, r2, r3
   852a8:	00bb      	lsls	r3, r7, #2
   852aa:	9300      	str	r3, [sp, #0]
   852ac:	eb06 0903 	add.w	r9, r6, r3
   852b0:	4453      	add	r3, sl
   852b2:	9301      	str	r3, [sp, #4]
   852b4:	f1b8 0f00 	cmp.w	r8, #0
   852b8:	d03b      	beq.n	85332 <quorem+0xb2>
   852ba:	2300      	movs	r3, #0
   852bc:	46b4      	mov	ip, r6
   852be:	461c      	mov	r4, r3
   852c0:	46d6      	mov	lr, sl
   852c2:	f85c 2b04 	ldr.w	r2, [ip], #4
   852c6:	f8de 5000 	ldr.w	r5, [lr]
   852ca:	fa1f fb82 	uxth.w	fp, r2
   852ce:	fb08 330b 	mla	r3, r8, fp, r3
   852d2:	0c12      	lsrs	r2, r2, #16
   852d4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   852d8:	fb08 bb02 	mla	fp, r8, r2, fp
   852dc:	b29a      	uxth	r2, r3
   852de:	1aa2      	subs	r2, r4, r2
   852e0:	b2ab      	uxth	r3, r5
   852e2:	fa1f f48b 	uxth.w	r4, fp
   852e6:	441a      	add	r2, r3
   852e8:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   852ec:	eb04 4422 	add.w	r4, r4, r2, asr #16
   852f0:	b292      	uxth	r2, r2
   852f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   852f6:	45e1      	cmp	r9, ip
   852f8:	f84e 2b04 	str.w	r2, [lr], #4
   852fc:	ea4f 4424 	mov.w	r4, r4, asr #16
   85300:	ea4f 431b 	mov.w	r3, fp, lsr #16
   85304:	d2dd      	bcs.n	852c2 <quorem+0x42>
   85306:	9b00      	ldr	r3, [sp, #0]
   85308:	f85a 3003 	ldr.w	r3, [sl, r3]
   8530c:	b98b      	cbnz	r3, 85332 <quorem+0xb2>
   8530e:	9c01      	ldr	r4, [sp, #4]
   85310:	1f23      	subs	r3, r4, #4
   85312:	459a      	cmp	sl, r3
   85314:	d20c      	bcs.n	85330 <quorem+0xb0>
   85316:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8531a:	b94b      	cbnz	r3, 85330 <quorem+0xb0>
   8531c:	f1a4 0308 	sub.w	r3, r4, #8
   85320:	e002      	b.n	85328 <quorem+0xa8>
   85322:	681a      	ldr	r2, [r3, #0]
   85324:	3b04      	subs	r3, #4
   85326:	b91a      	cbnz	r2, 85330 <quorem+0xb0>
   85328:	459a      	cmp	sl, r3
   8532a:	f107 37ff 	add.w	r7, r7, #4294967295
   8532e:	d3f8      	bcc.n	85322 <quorem+0xa2>
   85330:	6107      	str	r7, [r0, #16]
   85332:	4604      	mov	r4, r0
   85334:	f001 ff40 	bl	871b8 <__mcmp>
   85338:	2800      	cmp	r0, #0
   8533a:	db2d      	blt.n	85398 <quorem+0x118>
   8533c:	4655      	mov	r5, sl
   8533e:	2300      	movs	r3, #0
   85340:	f108 0801 	add.w	r8, r8, #1
   85344:	f856 1b04 	ldr.w	r1, [r6], #4
   85348:	6828      	ldr	r0, [r5, #0]
   8534a:	b28a      	uxth	r2, r1
   8534c:	1a9a      	subs	r2, r3, r2
   8534e:	0c0b      	lsrs	r3, r1, #16
   85350:	b281      	uxth	r1, r0
   85352:	440a      	add	r2, r1
   85354:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   85358:	eb03 4322 	add.w	r3, r3, r2, asr #16
   8535c:	b292      	uxth	r2, r2
   8535e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   85362:	45b1      	cmp	r9, r6
   85364:	f845 2b04 	str.w	r2, [r5], #4
   85368:	ea4f 4323 	mov.w	r3, r3, asr #16
   8536c:	d2ea      	bcs.n	85344 <quorem+0xc4>
   8536e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   85372:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   85376:	b97a      	cbnz	r2, 85398 <quorem+0x118>
   85378:	1f1a      	subs	r2, r3, #4
   8537a:	4592      	cmp	sl, r2
   8537c:	d20b      	bcs.n	85396 <quorem+0x116>
   8537e:	f853 2c04 	ldr.w	r2, [r3, #-4]
   85382:	b942      	cbnz	r2, 85396 <quorem+0x116>
   85384:	3b08      	subs	r3, #8
   85386:	e002      	b.n	8538e <quorem+0x10e>
   85388:	681a      	ldr	r2, [r3, #0]
   8538a:	3b04      	subs	r3, #4
   8538c:	b91a      	cbnz	r2, 85396 <quorem+0x116>
   8538e:	459a      	cmp	sl, r3
   85390:	f107 37ff 	add.w	r7, r7, #4294967295
   85394:	d3f8      	bcc.n	85388 <quorem+0x108>
   85396:	6127      	str	r7, [r4, #16]
   85398:	4640      	mov	r0, r8
   8539a:	b003      	add	sp, #12
   8539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   853a0:	2000      	movs	r0, #0
   853a2:	b003      	add	sp, #12
   853a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000853a8 <_dtoa_r>:
   853a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   853ac:	6c05      	ldr	r5, [r0, #64]	; 0x40
   853ae:	b09b      	sub	sp, #108	; 0x6c
   853b0:	4604      	mov	r4, r0
   853b2:	4692      	mov	sl, r2
   853b4:	469b      	mov	fp, r3
   853b6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   853b8:	b14d      	cbz	r5, 853ce <_dtoa_r+0x26>
   853ba:	2301      	movs	r3, #1
   853bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
   853be:	4629      	mov	r1, r5
   853c0:	4093      	lsls	r3, r2
   853c2:	60ab      	str	r3, [r5, #8]
   853c4:	606a      	str	r2, [r5, #4]
   853c6:	f001 fd1f 	bl	86e08 <_Bfree>
   853ca:	2300      	movs	r3, #0
   853cc:	6423      	str	r3, [r4, #64]	; 0x40
   853ce:	f1bb 0f00 	cmp.w	fp, #0
   853d2:	465d      	mov	r5, fp
   853d4:	db35      	blt.n	85442 <_dtoa_r+0x9a>
   853d6:	2300      	movs	r3, #0
   853d8:	6033      	str	r3, [r6, #0]
   853da:	4b9d      	ldr	r3, [pc, #628]	; (85650 <_dtoa_r+0x2a8>)
   853dc:	43ab      	bics	r3, r5
   853de:	d015      	beq.n	8540c <_dtoa_r+0x64>
   853e0:	2200      	movs	r2, #0
   853e2:	2300      	movs	r3, #0
   853e4:	4650      	mov	r0, sl
   853e6:	4659      	mov	r1, fp
   853e8:	f002 fee6 	bl	881b8 <__aeabi_dcmpeq>
   853ec:	4680      	mov	r8, r0
   853ee:	2800      	cmp	r0, #0
   853f0:	d02d      	beq.n	8544e <_dtoa_r+0xa6>
   853f2:	2301      	movs	r3, #1
   853f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   853f6:	6013      	str	r3, [r2, #0]
   853f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   853fa:	2b00      	cmp	r3, #0
   853fc:	f000 80bd 	beq.w	8557a <_dtoa_r+0x1d2>
   85400:	4894      	ldr	r0, [pc, #592]	; (85654 <_dtoa_r+0x2ac>)
   85402:	6018      	str	r0, [r3, #0]
   85404:	3801      	subs	r0, #1
   85406:	b01b      	add	sp, #108	; 0x6c
   85408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8540c:	f242 730f 	movw	r3, #9999	; 0x270f
   85410:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85412:	6013      	str	r3, [r2, #0]
   85414:	f1ba 0f00 	cmp.w	sl, #0
   85418:	d10d      	bne.n	85436 <_dtoa_r+0x8e>
   8541a:	f3c5 0513 	ubfx	r5, r5, #0, #20
   8541e:	b955      	cbnz	r5, 85436 <_dtoa_r+0x8e>
   85420:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85422:	488d      	ldr	r0, [pc, #564]	; (85658 <_dtoa_r+0x2b0>)
   85424:	2b00      	cmp	r3, #0
   85426:	d0ee      	beq.n	85406 <_dtoa_r+0x5e>
   85428:	f100 0308 	add.w	r3, r0, #8
   8542c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8542e:	6013      	str	r3, [r2, #0]
   85430:	b01b      	add	sp, #108	; 0x6c
   85432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85436:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85438:	4888      	ldr	r0, [pc, #544]	; (8565c <_dtoa_r+0x2b4>)
   8543a:	2b00      	cmp	r3, #0
   8543c:	d0e3      	beq.n	85406 <_dtoa_r+0x5e>
   8543e:	1cc3      	adds	r3, r0, #3
   85440:	e7f4      	b.n	8542c <_dtoa_r+0x84>
   85442:	2301      	movs	r3, #1
   85444:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   85448:	6033      	str	r3, [r6, #0]
   8544a:	46ab      	mov	fp, r5
   8544c:	e7c5      	b.n	853da <_dtoa_r+0x32>
   8544e:	aa18      	add	r2, sp, #96	; 0x60
   85450:	ab19      	add	r3, sp, #100	; 0x64
   85452:	9201      	str	r2, [sp, #4]
   85454:	9300      	str	r3, [sp, #0]
   85456:	4652      	mov	r2, sl
   85458:	465b      	mov	r3, fp
   8545a:	4620      	mov	r0, r4
   8545c:	f001 ff56 	bl	8730c <__d2b>
   85460:	0d2b      	lsrs	r3, r5, #20
   85462:	4681      	mov	r9, r0
   85464:	d071      	beq.n	8554a <_dtoa_r+0x1a2>
   85466:	4650      	mov	r0, sl
   85468:	f3cb 0213 	ubfx	r2, fp, #0, #20
   8546c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   85470:	9f18      	ldr	r7, [sp, #96]	; 0x60
   85472:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   85476:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8547a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8547e:	2200      	movs	r2, #0
   85480:	4b77      	ldr	r3, [pc, #476]	; (85660 <_dtoa_r+0x2b8>)
   85482:	f7fd ff4f 	bl	83324 <__aeabi_dsub>
   85486:	a36c      	add	r3, pc, #432	; (adr r3, 85638 <_dtoa_r+0x290>)
   85488:	e9d3 2300 	ldrd	r2, r3, [r3]
   8548c:	f002 fc2c 	bl	87ce8 <__aeabi_dmul>
   85490:	a36b      	add	r3, pc, #428	; (adr r3, 85640 <_dtoa_r+0x298>)
   85492:	e9d3 2300 	ldrd	r2, r3, [r3]
   85496:	f7fd ff47 	bl	83328 <__adddf3>
   8549a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8549e:	4630      	mov	r0, r6
   854a0:	f7fe f88e 	bl	835c0 <__aeabi_i2d>
   854a4:	a368      	add	r3, pc, #416	; (adr r3, 85648 <_dtoa_r+0x2a0>)
   854a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   854aa:	f002 fc1d 	bl	87ce8 <__aeabi_dmul>
   854ae:	4602      	mov	r2, r0
   854b0:	460b      	mov	r3, r1
   854b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   854b6:	f7fd ff37 	bl	83328 <__adddf3>
   854ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
   854be:	f002 fec3 	bl	88248 <__aeabi_d2iz>
   854c2:	2200      	movs	r2, #0
   854c4:	9002      	str	r0, [sp, #8]
   854c6:	2300      	movs	r3, #0
   854c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   854cc:	f002 fe7e 	bl	881cc <__aeabi_dcmplt>
   854d0:	2800      	cmp	r0, #0
   854d2:	f040 816d 	bne.w	857b0 <_dtoa_r+0x408>
   854d6:	9d02      	ldr	r5, [sp, #8]
   854d8:	2d16      	cmp	r5, #22
   854da:	f200 8157 	bhi.w	8578c <_dtoa_r+0x3e4>
   854de:	4961      	ldr	r1, [pc, #388]	; (85664 <_dtoa_r+0x2bc>)
   854e0:	4652      	mov	r2, sl
   854e2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   854e6:	465b      	mov	r3, fp
   854e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   854ec:	f002 fe8c 	bl	88208 <__aeabi_dcmpgt>
   854f0:	2800      	cmp	r0, #0
   854f2:	f000 81be 	beq.w	85872 <_dtoa_r+0x4ca>
   854f6:	1e6b      	subs	r3, r5, #1
   854f8:	9302      	str	r3, [sp, #8]
   854fa:	2300      	movs	r3, #0
   854fc:	930e      	str	r3, [sp, #56]	; 0x38
   854fe:	1bbf      	subs	r7, r7, r6
   85500:	1e7b      	subs	r3, r7, #1
   85502:	9308      	str	r3, [sp, #32]
   85504:	f100 814e 	bmi.w	857a4 <_dtoa_r+0x3fc>
   85508:	2300      	movs	r3, #0
   8550a:	930a      	str	r3, [sp, #40]	; 0x28
   8550c:	9b02      	ldr	r3, [sp, #8]
   8550e:	2b00      	cmp	r3, #0
   85510:	f2c0 813f 	blt.w	85792 <_dtoa_r+0x3ea>
   85514:	9a08      	ldr	r2, [sp, #32]
   85516:	930d      	str	r3, [sp, #52]	; 0x34
   85518:	4611      	mov	r1, r2
   8551a:	4419      	add	r1, r3
   8551c:	2300      	movs	r3, #0
   8551e:	9108      	str	r1, [sp, #32]
   85520:	930c      	str	r3, [sp, #48]	; 0x30
   85522:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85524:	2b09      	cmp	r3, #9
   85526:	d82a      	bhi.n	8557e <_dtoa_r+0x1d6>
   85528:	2b05      	cmp	r3, #5
   8552a:	f340 8658 	ble.w	861de <_dtoa_r+0xe36>
   8552e:	2500      	movs	r5, #0
   85530:	3b04      	subs	r3, #4
   85532:	9324      	str	r3, [sp, #144]	; 0x90
   85534:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85536:	3b02      	subs	r3, #2
   85538:	2b03      	cmp	r3, #3
   8553a:	f200 863f 	bhi.w	861bc <_dtoa_r+0xe14>
   8553e:	e8df f013 	tbh	[pc, r3, lsl #1]
   85542:	03ce      	.short	0x03ce
   85544:	03d902c3 	.word	0x03d902c3
   85548:	045b      	.short	0x045b
   8554a:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8554c:	9e19      	ldr	r6, [sp, #100]	; 0x64
   8554e:	443e      	add	r6, r7
   85550:	f206 4332 	addw	r3, r6, #1074	; 0x432
   85554:	2b20      	cmp	r3, #32
   85556:	f340 8187 	ble.w	85868 <_dtoa_r+0x4c0>
   8555a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   8555e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   85562:	409d      	lsls	r5, r3
   85564:	fa2a f000 	lsr.w	r0, sl, r0
   85568:	4328      	orrs	r0, r5
   8556a:	f7fe f819 	bl	835a0 <__aeabi_ui2d>
   8556e:	2301      	movs	r3, #1
   85570:	3e01      	subs	r6, #1
   85572:	9314      	str	r3, [sp, #80]	; 0x50
   85574:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   85578:	e781      	b.n	8547e <_dtoa_r+0xd6>
   8557a:	483b      	ldr	r0, [pc, #236]	; (85668 <_dtoa_r+0x2c0>)
   8557c:	e743      	b.n	85406 <_dtoa_r+0x5e>
   8557e:	2100      	movs	r1, #0
   85580:	4620      	mov	r0, r4
   85582:	6461      	str	r1, [r4, #68]	; 0x44
   85584:	9125      	str	r1, [sp, #148]	; 0x94
   85586:	f001 fc19 	bl	86dbc <_Balloc>
   8558a:	f04f 33ff 	mov.w	r3, #4294967295
   8558e:	9307      	str	r3, [sp, #28]
   85590:	930f      	str	r3, [sp, #60]	; 0x3c
   85592:	2301      	movs	r3, #1
   85594:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85596:	9004      	str	r0, [sp, #16]
   85598:	6420      	str	r0, [r4, #64]	; 0x40
   8559a:	9224      	str	r2, [sp, #144]	; 0x90
   8559c:	930b      	str	r3, [sp, #44]	; 0x2c
   8559e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   855a0:	2b00      	cmp	r3, #0
   855a2:	f2c0 80d3 	blt.w	8574c <_dtoa_r+0x3a4>
   855a6:	9a02      	ldr	r2, [sp, #8]
   855a8:	2a0e      	cmp	r2, #14
   855aa:	f300 80cf 	bgt.w	8574c <_dtoa_r+0x3a4>
   855ae:	4b2d      	ldr	r3, [pc, #180]	; (85664 <_dtoa_r+0x2bc>)
   855b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   855b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   855b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   855bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   855be:	2b00      	cmp	r3, #0
   855c0:	f2c0 83b4 	blt.w	85d2c <_dtoa_r+0x984>
   855c4:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   855c8:	4650      	mov	r0, sl
   855ca:	462a      	mov	r2, r5
   855cc:	4633      	mov	r3, r6
   855ce:	4659      	mov	r1, fp
   855d0:	f002 fcb4 	bl	87f3c <__aeabi_ddiv>
   855d4:	f002 fe38 	bl	88248 <__aeabi_d2iz>
   855d8:	4680      	mov	r8, r0
   855da:	f7fd fff1 	bl	835c0 <__aeabi_i2d>
   855de:	462a      	mov	r2, r5
   855e0:	4633      	mov	r3, r6
   855e2:	f002 fb81 	bl	87ce8 <__aeabi_dmul>
   855e6:	4602      	mov	r2, r0
   855e8:	460b      	mov	r3, r1
   855ea:	4650      	mov	r0, sl
   855ec:	4659      	mov	r1, fp
   855ee:	f7fd fe99 	bl	83324 <__aeabi_dsub>
   855f2:	9e07      	ldr	r6, [sp, #28]
   855f4:	9f04      	ldr	r7, [sp, #16]
   855f6:	f108 0530 	add.w	r5, r8, #48	; 0x30
   855fa:	2e01      	cmp	r6, #1
   855fc:	703d      	strb	r5, [r7, #0]
   855fe:	4602      	mov	r2, r0
   85600:	460b      	mov	r3, r1
   85602:	f107 0501 	add.w	r5, r7, #1
   85606:	d064      	beq.n	856d2 <_dtoa_r+0x32a>
   85608:	2200      	movs	r2, #0
   8560a:	4b18      	ldr	r3, [pc, #96]	; (8566c <_dtoa_r+0x2c4>)
   8560c:	f002 fb6c 	bl	87ce8 <__aeabi_dmul>
   85610:	2200      	movs	r2, #0
   85612:	2300      	movs	r3, #0
   85614:	4606      	mov	r6, r0
   85616:	460f      	mov	r7, r1
   85618:	f002 fdce 	bl	881b8 <__aeabi_dcmpeq>
   8561c:	2800      	cmp	r0, #0
   8561e:	f040 8082 	bne.w	85726 <_dtoa_r+0x37e>
   85622:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   85626:	f04f 0a00 	mov.w	sl, #0
   8562a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   8562e:	f04f 0b00 	mov.w	fp, #0
   85632:	940b      	str	r4, [sp, #44]	; 0x2c
   85634:	e029      	b.n	8568a <_dtoa_r+0x2e2>
   85636:	bf00      	nop
   85638:	636f4361 	.word	0x636f4361
   8563c:	3fd287a7 	.word	0x3fd287a7
   85640:	8b60c8b3 	.word	0x8b60c8b3
   85644:	3fc68a28 	.word	0x3fc68a28
   85648:	509f79fb 	.word	0x509f79fb
   8564c:	3fd34413 	.word	0x3fd34413
   85650:	7ff00000 	.word	0x7ff00000
   85654:	0008830d 	.word	0x0008830d
   85658:	00088330 	.word	0x00088330
   8565c:	0008833c 	.word	0x0008833c
   85660:	3ff80000 	.word	0x3ff80000
   85664:	00088368 	.word	0x00088368
   85668:	0008830c 	.word	0x0008830c
   8566c:	40240000 	.word	0x40240000
   85670:	2200      	movs	r2, #0
   85672:	4b81      	ldr	r3, [pc, #516]	; (85878 <_dtoa_r+0x4d0>)
   85674:	f002 fb38 	bl	87ce8 <__aeabi_dmul>
   85678:	4652      	mov	r2, sl
   8567a:	465b      	mov	r3, fp
   8567c:	4606      	mov	r6, r0
   8567e:	460f      	mov	r7, r1
   85680:	f002 fd9a 	bl	881b8 <__aeabi_dcmpeq>
   85684:	2800      	cmp	r0, #0
   85686:	f040 83ba 	bne.w	85dfe <_dtoa_r+0xa56>
   8568a:	4642      	mov	r2, r8
   8568c:	464b      	mov	r3, r9
   8568e:	4630      	mov	r0, r6
   85690:	4639      	mov	r1, r7
   85692:	f002 fc53 	bl	87f3c <__aeabi_ddiv>
   85696:	f002 fdd7 	bl	88248 <__aeabi_d2iz>
   8569a:	4604      	mov	r4, r0
   8569c:	f7fd ff90 	bl	835c0 <__aeabi_i2d>
   856a0:	4642      	mov	r2, r8
   856a2:	464b      	mov	r3, r9
   856a4:	f002 fb20 	bl	87ce8 <__aeabi_dmul>
   856a8:	4602      	mov	r2, r0
   856aa:	460b      	mov	r3, r1
   856ac:	4630      	mov	r0, r6
   856ae:	4639      	mov	r1, r7
   856b0:	f7fd fe38 	bl	83324 <__aeabi_dsub>
   856b4:	f104 0630 	add.w	r6, r4, #48	; 0x30
   856b8:	f805 6b01 	strb.w	r6, [r5], #1
   856bc:	9e04      	ldr	r6, [sp, #16]
   856be:	9f07      	ldr	r7, [sp, #28]
   856c0:	1bae      	subs	r6, r5, r6
   856c2:	42be      	cmp	r6, r7
   856c4:	4602      	mov	r2, r0
   856c6:	460b      	mov	r3, r1
   856c8:	d1d2      	bne.n	85670 <_dtoa_r+0x2c8>
   856ca:	46a0      	mov	r8, r4
   856cc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   856d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   856d2:	4610      	mov	r0, r2
   856d4:	4619      	mov	r1, r3
   856d6:	f7fd fe27 	bl	83328 <__adddf3>
   856da:	4606      	mov	r6, r0
   856dc:	460f      	mov	r7, r1
   856de:	4602      	mov	r2, r0
   856e0:	460b      	mov	r3, r1
   856e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   856e6:	f002 fd71 	bl	881cc <__aeabi_dcmplt>
   856ea:	b948      	cbnz	r0, 85700 <_dtoa_r+0x358>
   856ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   856f0:	4632      	mov	r2, r6
   856f2:	463b      	mov	r3, r7
   856f4:	f002 fd60 	bl	881b8 <__aeabi_dcmpeq>
   856f8:	b1a8      	cbz	r0, 85726 <_dtoa_r+0x37e>
   856fa:	f018 0f01 	tst.w	r8, #1
   856fe:	d012      	beq.n	85726 <_dtoa_r+0x37e>
   85700:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85704:	1e6b      	subs	r3, r5, #1
   85706:	9a04      	ldr	r2, [sp, #16]
   85708:	e004      	b.n	85714 <_dtoa_r+0x36c>
   8570a:	429a      	cmp	r2, r3
   8570c:	f000 8402 	beq.w	85f14 <_dtoa_r+0xb6c>
   85710:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   85714:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   85718:	f103 0501 	add.w	r5, r3, #1
   8571c:	d0f5      	beq.n	8570a <_dtoa_r+0x362>
   8571e:	f108 0801 	add.w	r8, r8, #1
   85722:	f883 8000 	strb.w	r8, [r3]
   85726:	4649      	mov	r1, r9
   85728:	4620      	mov	r0, r4
   8572a:	f001 fb6d 	bl	86e08 <_Bfree>
   8572e:	2200      	movs	r2, #0
   85730:	9b02      	ldr	r3, [sp, #8]
   85732:	702a      	strb	r2, [r5, #0]
   85734:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85736:	3301      	adds	r3, #1
   85738:	6013      	str	r3, [r2, #0]
   8573a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8573c:	2b00      	cmp	r3, #0
   8573e:	f000 839f 	beq.w	85e80 <_dtoa_r+0xad8>
   85742:	9804      	ldr	r0, [sp, #16]
   85744:	601d      	str	r5, [r3, #0]
   85746:	b01b      	add	sp, #108	; 0x6c
   85748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8574c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8574e:	2a00      	cmp	r2, #0
   85750:	d03e      	beq.n	857d0 <_dtoa_r+0x428>
   85752:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85754:	2a01      	cmp	r2, #1
   85756:	f340 8311 	ble.w	85d7c <_dtoa_r+0x9d4>
   8575a:	9b07      	ldr	r3, [sp, #28]
   8575c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8575e:	1e5f      	subs	r7, r3, #1
   85760:	42ba      	cmp	r2, r7
   85762:	f2c0 8390 	blt.w	85e86 <_dtoa_r+0xade>
   85766:	1bd7      	subs	r7, r2, r7
   85768:	9b07      	ldr	r3, [sp, #28]
   8576a:	2b00      	cmp	r3, #0
   8576c:	f2c0 848c 	blt.w	86088 <_dtoa_r+0xce0>
   85770:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85772:	9b07      	ldr	r3, [sp, #28]
   85774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85776:	2101      	movs	r1, #1
   85778:	441a      	add	r2, r3
   8577a:	920a      	str	r2, [sp, #40]	; 0x28
   8577c:	9a08      	ldr	r2, [sp, #32]
   8577e:	4620      	mov	r0, r4
   85780:	441a      	add	r2, r3
   85782:	9208      	str	r2, [sp, #32]
   85784:	f001 fbdc 	bl	86f40 <__i2b>
   85788:	4606      	mov	r6, r0
   8578a:	e023      	b.n	857d4 <_dtoa_r+0x42c>
   8578c:	2301      	movs	r3, #1
   8578e:	930e      	str	r3, [sp, #56]	; 0x38
   85790:	e6b5      	b.n	854fe <_dtoa_r+0x156>
   85792:	2300      	movs	r3, #0
   85794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85796:	930d      	str	r3, [sp, #52]	; 0x34
   85798:	9b02      	ldr	r3, [sp, #8]
   8579a:	1ad2      	subs	r2, r2, r3
   8579c:	425b      	negs	r3, r3
   8579e:	920a      	str	r2, [sp, #40]	; 0x28
   857a0:	930c      	str	r3, [sp, #48]	; 0x30
   857a2:	e6be      	b.n	85522 <_dtoa_r+0x17a>
   857a4:	f1c7 0301 	rsb	r3, r7, #1
   857a8:	930a      	str	r3, [sp, #40]	; 0x28
   857aa:	2300      	movs	r3, #0
   857ac:	9308      	str	r3, [sp, #32]
   857ae:	e6ad      	b.n	8550c <_dtoa_r+0x164>
   857b0:	9d02      	ldr	r5, [sp, #8]
   857b2:	4628      	mov	r0, r5
   857b4:	f7fd ff04 	bl	835c0 <__aeabi_i2d>
   857b8:	4602      	mov	r2, r0
   857ba:	460b      	mov	r3, r1
   857bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   857c0:	f002 fcfa 	bl	881b8 <__aeabi_dcmpeq>
   857c4:	2800      	cmp	r0, #0
   857c6:	f47f ae86 	bne.w	854d6 <_dtoa_r+0x12e>
   857ca:	1e6b      	subs	r3, r5, #1
   857cc:	9302      	str	r3, [sp, #8]
   857ce:	e682      	b.n	854d6 <_dtoa_r+0x12e>
   857d0:	ad0a      	add	r5, sp, #40	; 0x28
   857d2:	cde0      	ldmia	r5, {r5, r6, r7}
   857d4:	2d00      	cmp	r5, #0
   857d6:	dd0c      	ble.n	857f2 <_dtoa_r+0x44a>
   857d8:	9908      	ldr	r1, [sp, #32]
   857da:	2900      	cmp	r1, #0
   857dc:	460b      	mov	r3, r1
   857de:	dd08      	ble.n	857f2 <_dtoa_r+0x44a>
   857e0:	42a9      	cmp	r1, r5
   857e2:	bfa8      	it	ge
   857e4:	462b      	movge	r3, r5
   857e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   857e8:	1aed      	subs	r5, r5, r3
   857ea:	1ad2      	subs	r2, r2, r3
   857ec:	1acb      	subs	r3, r1, r3
   857ee:	920a      	str	r2, [sp, #40]	; 0x28
   857f0:	9308      	str	r3, [sp, #32]
   857f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   857f4:	b1d3      	cbz	r3, 8582c <_dtoa_r+0x484>
   857f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   857f8:	2b00      	cmp	r3, #0
   857fa:	f000 82b8 	beq.w	85d6e <_dtoa_r+0x9c6>
   857fe:	2f00      	cmp	r7, #0
   85800:	dd10      	ble.n	85824 <_dtoa_r+0x47c>
   85802:	4631      	mov	r1, r6
   85804:	463a      	mov	r2, r7
   85806:	4620      	mov	r0, r4
   85808:	f001 fc36 	bl	87078 <__pow5mult>
   8580c:	464a      	mov	r2, r9
   8580e:	4601      	mov	r1, r0
   85810:	4606      	mov	r6, r0
   85812:	4620      	mov	r0, r4
   85814:	f001 fb9e 	bl	86f54 <__multiply>
   85818:	4603      	mov	r3, r0
   8581a:	4649      	mov	r1, r9
   8581c:	4620      	mov	r0, r4
   8581e:	4699      	mov	r9, r3
   85820:	f001 faf2 	bl	86e08 <_Bfree>
   85824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85826:	1bda      	subs	r2, r3, r7
   85828:	f040 82a2 	bne.w	85d70 <_dtoa_r+0x9c8>
   8582c:	2101      	movs	r1, #1
   8582e:	4620      	mov	r0, r4
   85830:	f001 fb86 	bl	86f40 <__i2b>
   85834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85836:	4680      	mov	r8, r0
   85838:	2b00      	cmp	r3, #0
   8583a:	dd1f      	ble.n	8587c <_dtoa_r+0x4d4>
   8583c:	4601      	mov	r1, r0
   8583e:	461a      	mov	r2, r3
   85840:	4620      	mov	r0, r4
   85842:	f001 fc19 	bl	87078 <__pow5mult>
   85846:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85848:	4680      	mov	r8, r0
   8584a:	2b01      	cmp	r3, #1
   8584c:	f340 8255 	ble.w	85cfa <_dtoa_r+0x952>
   85850:	2300      	movs	r3, #0
   85852:	930c      	str	r3, [sp, #48]	; 0x30
   85854:	f8d8 3010 	ldr.w	r3, [r8, #16]
   85858:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8585c:	6918      	ldr	r0, [r3, #16]
   8585e:	f001 fb1f 	bl	86ea0 <__hi0bits>
   85862:	f1c0 0020 	rsb	r0, r0, #32
   85866:	e013      	b.n	85890 <_dtoa_r+0x4e8>
   85868:	f1c3 0520 	rsb	r5, r3, #32
   8586c:	fa0a f005 	lsl.w	r0, sl, r5
   85870:	e67b      	b.n	8556a <_dtoa_r+0x1c2>
   85872:	900e      	str	r0, [sp, #56]	; 0x38
   85874:	e643      	b.n	854fe <_dtoa_r+0x156>
   85876:	bf00      	nop
   85878:	40240000 	.word	0x40240000
   8587c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8587e:	2b01      	cmp	r3, #1
   85880:	f340 8285 	ble.w	85d8e <_dtoa_r+0x9e6>
   85884:	2300      	movs	r3, #0
   85886:	930c      	str	r3, [sp, #48]	; 0x30
   85888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8588a:	2001      	movs	r0, #1
   8588c:	2b00      	cmp	r3, #0
   8588e:	d1e1      	bne.n	85854 <_dtoa_r+0x4ac>
   85890:	9a08      	ldr	r2, [sp, #32]
   85892:	4410      	add	r0, r2
   85894:	f010 001f 	ands.w	r0, r0, #31
   85898:	f000 80a1 	beq.w	859de <_dtoa_r+0x636>
   8589c:	f1c0 0320 	rsb	r3, r0, #32
   858a0:	2b04      	cmp	r3, #4
   858a2:	f340 8486 	ble.w	861b2 <_dtoa_r+0xe0a>
   858a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   858a8:	f1c0 001c 	rsb	r0, r0, #28
   858ac:	4403      	add	r3, r0
   858ae:	930a      	str	r3, [sp, #40]	; 0x28
   858b0:	4613      	mov	r3, r2
   858b2:	4403      	add	r3, r0
   858b4:	4405      	add	r5, r0
   858b6:	9308      	str	r3, [sp, #32]
   858b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   858ba:	2b00      	cmp	r3, #0
   858bc:	dd05      	ble.n	858ca <_dtoa_r+0x522>
   858be:	4649      	mov	r1, r9
   858c0:	461a      	mov	r2, r3
   858c2:	4620      	mov	r0, r4
   858c4:	f001 fc28 	bl	87118 <__lshift>
   858c8:	4681      	mov	r9, r0
   858ca:	9b08      	ldr	r3, [sp, #32]
   858cc:	2b00      	cmp	r3, #0
   858ce:	dd05      	ble.n	858dc <_dtoa_r+0x534>
   858d0:	4641      	mov	r1, r8
   858d2:	461a      	mov	r2, r3
   858d4:	4620      	mov	r0, r4
   858d6:	f001 fc1f 	bl	87118 <__lshift>
   858da:	4680      	mov	r8, r0
   858dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   858de:	2b00      	cmp	r3, #0
   858e0:	f040 8086 	bne.w	859f0 <_dtoa_r+0x648>
   858e4:	9b07      	ldr	r3, [sp, #28]
   858e6:	2b00      	cmp	r3, #0
   858e8:	f340 8264 	ble.w	85db4 <_dtoa_r+0xa0c>
   858ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   858ee:	2b00      	cmp	r3, #0
   858f0:	f000 8098 	beq.w	85a24 <_dtoa_r+0x67c>
   858f4:	2d00      	cmp	r5, #0
   858f6:	dd05      	ble.n	85904 <_dtoa_r+0x55c>
   858f8:	4631      	mov	r1, r6
   858fa:	462a      	mov	r2, r5
   858fc:	4620      	mov	r0, r4
   858fe:	f001 fc0b 	bl	87118 <__lshift>
   85902:	4606      	mov	r6, r0
   85904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85906:	2b00      	cmp	r3, #0
   85908:	f040 8336 	bne.w	85f78 <_dtoa_r+0xbd0>
   8590c:	9608      	str	r6, [sp, #32]
   8590e:	9b07      	ldr	r3, [sp, #28]
   85910:	9a04      	ldr	r2, [sp, #16]
   85912:	3b01      	subs	r3, #1
   85914:	18d3      	adds	r3, r2, r3
   85916:	930b      	str	r3, [sp, #44]	; 0x2c
   85918:	4617      	mov	r7, r2
   8591a:	f00a 0301 	and.w	r3, sl, #1
   8591e:	46c2      	mov	sl, r8
   85920:	f8dd b020 	ldr.w	fp, [sp, #32]
   85924:	930c      	str	r3, [sp, #48]	; 0x30
   85926:	4651      	mov	r1, sl
   85928:	4648      	mov	r0, r9
   8592a:	f7ff fca9 	bl	85280 <quorem>
   8592e:	4631      	mov	r1, r6
   85930:	4605      	mov	r5, r0
   85932:	4648      	mov	r0, r9
   85934:	f001 fc40 	bl	871b8 <__mcmp>
   85938:	465a      	mov	r2, fp
   8593a:	9007      	str	r0, [sp, #28]
   8593c:	4651      	mov	r1, sl
   8593e:	4620      	mov	r0, r4
   85940:	f001 fc56 	bl	871f0 <__mdiff>
   85944:	68c2      	ldr	r2, [r0, #12]
   85946:	4680      	mov	r8, r0
   85948:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8594c:	2a00      	cmp	r2, #0
   8594e:	f040 8229 	bne.w	85da4 <_dtoa_r+0x9fc>
   85952:	4601      	mov	r1, r0
   85954:	4648      	mov	r0, r9
   85956:	930a      	str	r3, [sp, #40]	; 0x28
   85958:	f001 fc2e 	bl	871b8 <__mcmp>
   8595c:	4641      	mov	r1, r8
   8595e:	9008      	str	r0, [sp, #32]
   85960:	4620      	mov	r0, r4
   85962:	f001 fa51 	bl	86e08 <_Bfree>
   85966:	9a08      	ldr	r2, [sp, #32]
   85968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8596a:	b932      	cbnz	r2, 8597a <_dtoa_r+0x5d2>
   8596c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8596e:	b921      	cbnz	r1, 8597a <_dtoa_r+0x5d2>
   85970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85972:	2a00      	cmp	r2, #0
   85974:	f000 83ee 	beq.w	86154 <_dtoa_r+0xdac>
   85978:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8597a:	9907      	ldr	r1, [sp, #28]
   8597c:	2900      	cmp	r1, #0
   8597e:	f2c0 829f 	blt.w	85ec0 <_dtoa_r+0xb18>
   85982:	d105      	bne.n	85990 <_dtoa_r+0x5e8>
   85984:	9924      	ldr	r1, [sp, #144]	; 0x90
   85986:	b919      	cbnz	r1, 85990 <_dtoa_r+0x5e8>
   85988:	990c      	ldr	r1, [sp, #48]	; 0x30
   8598a:	2900      	cmp	r1, #0
   8598c:	f000 8298 	beq.w	85ec0 <_dtoa_r+0xb18>
   85990:	2a00      	cmp	r2, #0
   85992:	f300 8305 	bgt.w	85fa0 <_dtoa_r+0xbf8>
   85996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85998:	f107 0801 	add.w	r8, r7, #1
   8599c:	4297      	cmp	r7, r2
   8599e:	703b      	strb	r3, [r7, #0]
   859a0:	4645      	mov	r5, r8
   859a2:	f000 830b 	beq.w	85fbc <_dtoa_r+0xc14>
   859a6:	4649      	mov	r1, r9
   859a8:	2300      	movs	r3, #0
   859aa:	220a      	movs	r2, #10
   859ac:	4620      	mov	r0, r4
   859ae:	f001 fa35 	bl	86e1c <__multadd>
   859b2:	455e      	cmp	r6, fp
   859b4:	4681      	mov	r9, r0
   859b6:	4631      	mov	r1, r6
   859b8:	f04f 0300 	mov.w	r3, #0
   859bc:	f04f 020a 	mov.w	r2, #10
   859c0:	4620      	mov	r0, r4
   859c2:	f000 81e9 	beq.w	85d98 <_dtoa_r+0x9f0>
   859c6:	f001 fa29 	bl	86e1c <__multadd>
   859ca:	4659      	mov	r1, fp
   859cc:	4606      	mov	r6, r0
   859ce:	2300      	movs	r3, #0
   859d0:	220a      	movs	r2, #10
   859d2:	4620      	mov	r0, r4
   859d4:	f001 fa22 	bl	86e1c <__multadd>
   859d8:	4647      	mov	r7, r8
   859da:	4683      	mov	fp, r0
   859dc:	e7a3      	b.n	85926 <_dtoa_r+0x57e>
   859de:	201c      	movs	r0, #28
   859e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   859e2:	4405      	add	r5, r0
   859e4:	4403      	add	r3, r0
   859e6:	930a      	str	r3, [sp, #40]	; 0x28
   859e8:	9b08      	ldr	r3, [sp, #32]
   859ea:	4403      	add	r3, r0
   859ec:	9308      	str	r3, [sp, #32]
   859ee:	e763      	b.n	858b8 <_dtoa_r+0x510>
   859f0:	4641      	mov	r1, r8
   859f2:	4648      	mov	r0, r9
   859f4:	f001 fbe0 	bl	871b8 <__mcmp>
   859f8:	2800      	cmp	r0, #0
   859fa:	f6bf af73 	bge.w	858e4 <_dtoa_r+0x53c>
   859fe:	9f02      	ldr	r7, [sp, #8]
   85a00:	4649      	mov	r1, r9
   85a02:	2300      	movs	r3, #0
   85a04:	220a      	movs	r2, #10
   85a06:	4620      	mov	r0, r4
   85a08:	3f01      	subs	r7, #1
   85a0a:	9702      	str	r7, [sp, #8]
   85a0c:	f001 fa06 	bl	86e1c <__multadd>
   85a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85a12:	4681      	mov	r9, r0
   85a14:	2b00      	cmp	r3, #0
   85a16:	f040 83b5 	bne.w	86184 <_dtoa_r+0xddc>
   85a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85a1c:	2b00      	cmp	r3, #0
   85a1e:	f340 83be 	ble.w	8619e <_dtoa_r+0xdf6>
   85a22:	9307      	str	r3, [sp, #28]
   85a24:	f8dd a010 	ldr.w	sl, [sp, #16]
   85a28:	9f07      	ldr	r7, [sp, #28]
   85a2a:	4655      	mov	r5, sl
   85a2c:	e006      	b.n	85a3c <_dtoa_r+0x694>
   85a2e:	4649      	mov	r1, r9
   85a30:	2300      	movs	r3, #0
   85a32:	220a      	movs	r2, #10
   85a34:	4620      	mov	r0, r4
   85a36:	f001 f9f1 	bl	86e1c <__multadd>
   85a3a:	4681      	mov	r9, r0
   85a3c:	4641      	mov	r1, r8
   85a3e:	4648      	mov	r0, r9
   85a40:	f7ff fc1e 	bl	85280 <quorem>
   85a44:	3030      	adds	r0, #48	; 0x30
   85a46:	f805 0b01 	strb.w	r0, [r5], #1
   85a4a:	eba5 030a 	sub.w	r3, r5, sl
   85a4e:	42bb      	cmp	r3, r7
   85a50:	dbed      	blt.n	85a2e <_dtoa_r+0x686>
   85a52:	9b04      	ldr	r3, [sp, #16]
   85a54:	9a07      	ldr	r2, [sp, #28]
   85a56:	4682      	mov	sl, r0
   85a58:	2a01      	cmp	r2, #1
   85a5a:	bfac      	ite	ge
   85a5c:	189b      	addge	r3, r3, r2
   85a5e:	3301      	addlt	r3, #1
   85a60:	f04f 0b00 	mov.w	fp, #0
   85a64:	461d      	mov	r5, r3
   85a66:	4649      	mov	r1, r9
   85a68:	2201      	movs	r2, #1
   85a6a:	4620      	mov	r0, r4
   85a6c:	f001 fb54 	bl	87118 <__lshift>
   85a70:	4641      	mov	r1, r8
   85a72:	4681      	mov	r9, r0
   85a74:	f001 fba0 	bl	871b8 <__mcmp>
   85a78:	2800      	cmp	r0, #0
   85a7a:	f340 823f 	ble.w	85efc <_dtoa_r+0xb54>
   85a7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   85a82:	1e6b      	subs	r3, r5, #1
   85a84:	9904      	ldr	r1, [sp, #16]
   85a86:	e004      	b.n	85a92 <_dtoa_r+0x6ea>
   85a88:	428b      	cmp	r3, r1
   85a8a:	f000 81ae 	beq.w	85dea <_dtoa_r+0xa42>
   85a8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   85a92:	2a39      	cmp	r2, #57	; 0x39
   85a94:	f103 0501 	add.w	r5, r3, #1
   85a98:	d0f6      	beq.n	85a88 <_dtoa_r+0x6e0>
   85a9a:	3201      	adds	r2, #1
   85a9c:	701a      	strb	r2, [r3, #0]
   85a9e:	4641      	mov	r1, r8
   85aa0:	4620      	mov	r0, r4
   85aa2:	f001 f9b1 	bl	86e08 <_Bfree>
   85aa6:	2e00      	cmp	r6, #0
   85aa8:	f43f ae3d 	beq.w	85726 <_dtoa_r+0x37e>
   85aac:	f1bb 0f00 	cmp.w	fp, #0
   85ab0:	d005      	beq.n	85abe <_dtoa_r+0x716>
   85ab2:	45b3      	cmp	fp, r6
   85ab4:	d003      	beq.n	85abe <_dtoa_r+0x716>
   85ab6:	4659      	mov	r1, fp
   85ab8:	4620      	mov	r0, r4
   85aba:	f001 f9a5 	bl	86e08 <_Bfree>
   85abe:	4631      	mov	r1, r6
   85ac0:	4620      	mov	r0, r4
   85ac2:	f001 f9a1 	bl	86e08 <_Bfree>
   85ac6:	e62e      	b.n	85726 <_dtoa_r+0x37e>
   85ac8:	2300      	movs	r3, #0
   85aca:	930b      	str	r3, [sp, #44]	; 0x2c
   85acc:	9b02      	ldr	r3, [sp, #8]
   85ace:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85ad0:	4413      	add	r3, r2
   85ad2:	930f      	str	r3, [sp, #60]	; 0x3c
   85ad4:	3301      	adds	r3, #1
   85ad6:	2b01      	cmp	r3, #1
   85ad8:	461f      	mov	r7, r3
   85ada:	461e      	mov	r6, r3
   85adc:	bfb8      	it	lt
   85ade:	2701      	movlt	r7, #1
   85ae0:	9307      	str	r3, [sp, #28]
   85ae2:	2100      	movs	r1, #0
   85ae4:	2f17      	cmp	r7, #23
   85ae6:	6461      	str	r1, [r4, #68]	; 0x44
   85ae8:	d90a      	bls.n	85b00 <_dtoa_r+0x758>
   85aea:	2201      	movs	r2, #1
   85aec:	2304      	movs	r3, #4
   85aee:	005b      	lsls	r3, r3, #1
   85af0:	f103 0014 	add.w	r0, r3, #20
   85af4:	4287      	cmp	r7, r0
   85af6:	4611      	mov	r1, r2
   85af8:	f102 0201 	add.w	r2, r2, #1
   85afc:	d2f7      	bcs.n	85aee <_dtoa_r+0x746>
   85afe:	6461      	str	r1, [r4, #68]	; 0x44
   85b00:	4620      	mov	r0, r4
   85b02:	f001 f95b 	bl	86dbc <_Balloc>
   85b06:	2e0e      	cmp	r6, #14
   85b08:	9004      	str	r0, [sp, #16]
   85b0a:	6420      	str	r0, [r4, #64]	; 0x40
   85b0c:	f63f ad47 	bhi.w	8559e <_dtoa_r+0x1f6>
   85b10:	2d00      	cmp	r5, #0
   85b12:	f43f ad44 	beq.w	8559e <_dtoa_r+0x1f6>
   85b16:	9902      	ldr	r1, [sp, #8]
   85b18:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   85b1c:	2900      	cmp	r1, #0
   85b1e:	f340 8203 	ble.w	85f28 <_dtoa_r+0xb80>
   85b22:	4bb9      	ldr	r3, [pc, #740]	; (85e08 <_dtoa_r+0xa60>)
   85b24:	f001 020f 	and.w	r2, r1, #15
   85b28:	110d      	asrs	r5, r1, #4
   85b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85b2e:	06e9      	lsls	r1, r5, #27
   85b30:	e9d3 6700 	ldrd	r6, r7, [r3]
   85b34:	f140 81af 	bpl.w	85e96 <_dtoa_r+0xaee>
   85b38:	4bb4      	ldr	r3, [pc, #720]	; (85e0c <_dtoa_r+0xa64>)
   85b3a:	4650      	mov	r0, sl
   85b3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   85b40:	4659      	mov	r1, fp
   85b42:	f002 f9fb 	bl	87f3c <__aeabi_ddiv>
   85b46:	f04f 0a03 	mov.w	sl, #3
   85b4a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   85b4e:	f005 050f 	and.w	r5, r5, #15
   85b52:	b18d      	cbz	r5, 85b78 <_dtoa_r+0x7d0>
   85b54:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 85e0c <_dtoa_r+0xa64>
   85b58:	07ea      	lsls	r2, r5, #31
   85b5a:	d509      	bpl.n	85b70 <_dtoa_r+0x7c8>
   85b5c:	e9d8 2300 	ldrd	r2, r3, [r8]
   85b60:	4630      	mov	r0, r6
   85b62:	4639      	mov	r1, r7
   85b64:	f002 f8c0 	bl	87ce8 <__aeabi_dmul>
   85b68:	4606      	mov	r6, r0
   85b6a:	460f      	mov	r7, r1
   85b6c:	f10a 0a01 	add.w	sl, sl, #1
   85b70:	106d      	asrs	r5, r5, #1
   85b72:	f108 0808 	add.w	r8, r8, #8
   85b76:	d1ef      	bne.n	85b58 <_dtoa_r+0x7b0>
   85b78:	463b      	mov	r3, r7
   85b7a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   85b7e:	4632      	mov	r2, r6
   85b80:	f002 f9dc 	bl	87f3c <__aeabi_ddiv>
   85b84:	4607      	mov	r7, r0
   85b86:	4688      	mov	r8, r1
   85b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85b8a:	b143      	cbz	r3, 85b9e <_dtoa_r+0x7f6>
   85b8c:	2200      	movs	r2, #0
   85b8e:	4ba0      	ldr	r3, [pc, #640]	; (85e10 <_dtoa_r+0xa68>)
   85b90:	4638      	mov	r0, r7
   85b92:	4641      	mov	r1, r8
   85b94:	f002 fb1a 	bl	881cc <__aeabi_dcmplt>
   85b98:	2800      	cmp	r0, #0
   85b9a:	f040 8287 	bne.w	860ac <_dtoa_r+0xd04>
   85b9e:	4650      	mov	r0, sl
   85ba0:	f7fd fd0e 	bl	835c0 <__aeabi_i2d>
   85ba4:	463a      	mov	r2, r7
   85ba6:	4643      	mov	r3, r8
   85ba8:	f002 f89e 	bl	87ce8 <__aeabi_dmul>
   85bac:	4b99      	ldr	r3, [pc, #612]	; (85e14 <_dtoa_r+0xa6c>)
   85bae:	2200      	movs	r2, #0
   85bb0:	f7fd fbba 	bl	83328 <__adddf3>
   85bb4:	9b07      	ldr	r3, [sp, #28]
   85bb6:	4605      	mov	r5, r0
   85bb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85bbc:	2b00      	cmp	r3, #0
   85bbe:	f000 813f 	beq.w	85e40 <_dtoa_r+0xa98>
   85bc2:	9b02      	ldr	r3, [sp, #8]
   85bc4:	9315      	str	r3, [sp, #84]	; 0x54
   85bc6:	9b07      	ldr	r3, [sp, #28]
   85bc8:	9312      	str	r3, [sp, #72]	; 0x48
   85bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85bcc:	2b00      	cmp	r3, #0
   85bce:	f000 81fb 	beq.w	85fc8 <_dtoa_r+0xc20>
   85bd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85bd4:	4b8c      	ldr	r3, [pc, #560]	; (85e08 <_dtoa_r+0xa60>)
   85bd6:	2000      	movs	r0, #0
   85bd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85bdc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   85be0:	498d      	ldr	r1, [pc, #564]	; (85e18 <_dtoa_r+0xa70>)
   85be2:	f002 f9ab 	bl	87f3c <__aeabi_ddiv>
   85be6:	462a      	mov	r2, r5
   85be8:	4633      	mov	r3, r6
   85bea:	f7fd fb9b 	bl	83324 <__aeabi_dsub>
   85bee:	4682      	mov	sl, r0
   85bf0:	468b      	mov	fp, r1
   85bf2:	4638      	mov	r0, r7
   85bf4:	4641      	mov	r1, r8
   85bf6:	f002 fb27 	bl	88248 <__aeabi_d2iz>
   85bfa:	4605      	mov	r5, r0
   85bfc:	f7fd fce0 	bl	835c0 <__aeabi_i2d>
   85c00:	4602      	mov	r2, r0
   85c02:	460b      	mov	r3, r1
   85c04:	4638      	mov	r0, r7
   85c06:	4641      	mov	r1, r8
   85c08:	f7fd fb8c 	bl	83324 <__aeabi_dsub>
   85c0c:	3530      	adds	r5, #48	; 0x30
   85c0e:	fa5f f885 	uxtb.w	r8, r5
   85c12:	9d04      	ldr	r5, [sp, #16]
   85c14:	4606      	mov	r6, r0
   85c16:	460f      	mov	r7, r1
   85c18:	f885 8000 	strb.w	r8, [r5]
   85c1c:	4602      	mov	r2, r0
   85c1e:	460b      	mov	r3, r1
   85c20:	4650      	mov	r0, sl
   85c22:	4659      	mov	r1, fp
   85c24:	3501      	adds	r5, #1
   85c26:	f002 faef 	bl	88208 <__aeabi_dcmpgt>
   85c2a:	2800      	cmp	r0, #0
   85c2c:	d154      	bne.n	85cd8 <_dtoa_r+0x930>
   85c2e:	4632      	mov	r2, r6
   85c30:	463b      	mov	r3, r7
   85c32:	2000      	movs	r0, #0
   85c34:	4976      	ldr	r1, [pc, #472]	; (85e10 <_dtoa_r+0xa68>)
   85c36:	f7fd fb75 	bl	83324 <__aeabi_dsub>
   85c3a:	4602      	mov	r2, r0
   85c3c:	460b      	mov	r3, r1
   85c3e:	4650      	mov	r0, sl
   85c40:	4659      	mov	r1, fp
   85c42:	f002 fae1 	bl	88208 <__aeabi_dcmpgt>
   85c46:	2800      	cmp	r0, #0
   85c48:	f040 8270 	bne.w	8612c <_dtoa_r+0xd84>
   85c4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85c4e:	2a01      	cmp	r2, #1
   85c50:	f000 8112 	beq.w	85e78 <_dtoa_r+0xad0>
   85c54:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85c56:	9a04      	ldr	r2, [sp, #16]
   85c58:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   85c5c:	4413      	add	r3, r2
   85c5e:	4699      	mov	r9, r3
   85c60:	e00f      	b.n	85c82 <_dtoa_r+0x8da>
   85c62:	4632      	mov	r2, r6
   85c64:	463b      	mov	r3, r7
   85c66:	2000      	movs	r0, #0
   85c68:	4969      	ldr	r1, [pc, #420]	; (85e10 <_dtoa_r+0xa68>)
   85c6a:	f7fd fb5b 	bl	83324 <__aeabi_dsub>
   85c6e:	4652      	mov	r2, sl
   85c70:	465b      	mov	r3, fp
   85c72:	f002 faab 	bl	881cc <__aeabi_dcmplt>
   85c76:	2800      	cmp	r0, #0
   85c78:	f040 8256 	bne.w	86128 <_dtoa_r+0xd80>
   85c7c:	454d      	cmp	r5, r9
   85c7e:	f000 80f9 	beq.w	85e74 <_dtoa_r+0xacc>
   85c82:	4650      	mov	r0, sl
   85c84:	4659      	mov	r1, fp
   85c86:	2200      	movs	r2, #0
   85c88:	4b64      	ldr	r3, [pc, #400]	; (85e1c <_dtoa_r+0xa74>)
   85c8a:	f002 f82d 	bl	87ce8 <__aeabi_dmul>
   85c8e:	2200      	movs	r2, #0
   85c90:	4b62      	ldr	r3, [pc, #392]	; (85e1c <_dtoa_r+0xa74>)
   85c92:	4682      	mov	sl, r0
   85c94:	468b      	mov	fp, r1
   85c96:	4630      	mov	r0, r6
   85c98:	4639      	mov	r1, r7
   85c9a:	f002 f825 	bl	87ce8 <__aeabi_dmul>
   85c9e:	460f      	mov	r7, r1
   85ca0:	4606      	mov	r6, r0
   85ca2:	f002 fad1 	bl	88248 <__aeabi_d2iz>
   85ca6:	4680      	mov	r8, r0
   85ca8:	f7fd fc8a 	bl	835c0 <__aeabi_i2d>
   85cac:	4602      	mov	r2, r0
   85cae:	460b      	mov	r3, r1
   85cb0:	4630      	mov	r0, r6
   85cb2:	4639      	mov	r1, r7
   85cb4:	f7fd fb36 	bl	83324 <__aeabi_dsub>
   85cb8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   85cbc:	fa5f f888 	uxtb.w	r8, r8
   85cc0:	f805 8b01 	strb.w	r8, [r5], #1
   85cc4:	4652      	mov	r2, sl
   85cc6:	465b      	mov	r3, fp
   85cc8:	4606      	mov	r6, r0
   85cca:	460f      	mov	r7, r1
   85ccc:	f002 fa7e 	bl	881cc <__aeabi_dcmplt>
   85cd0:	2800      	cmp	r0, #0
   85cd2:	d0c6      	beq.n	85c62 <_dtoa_r+0x8ba>
   85cd4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85cda:	9302      	str	r3, [sp, #8]
   85cdc:	e523      	b.n	85726 <_dtoa_r+0x37e>
   85cde:	2300      	movs	r3, #0
   85ce0:	930b      	str	r3, [sp, #44]	; 0x2c
   85ce2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85ce4:	2b00      	cmp	r3, #0
   85ce6:	f340 80dd 	ble.w	85ea4 <_dtoa_r+0xafc>
   85cea:	461f      	mov	r7, r3
   85cec:	461e      	mov	r6, r3
   85cee:	930f      	str	r3, [sp, #60]	; 0x3c
   85cf0:	9307      	str	r3, [sp, #28]
   85cf2:	e6f6      	b.n	85ae2 <_dtoa_r+0x73a>
   85cf4:	2301      	movs	r3, #1
   85cf6:	930b      	str	r3, [sp, #44]	; 0x2c
   85cf8:	e7f3      	b.n	85ce2 <_dtoa_r+0x93a>
   85cfa:	f1ba 0f00 	cmp.w	sl, #0
   85cfe:	f47f ada7 	bne.w	85850 <_dtoa_r+0x4a8>
   85d02:	f3cb 0313 	ubfx	r3, fp, #0, #20
   85d06:	2b00      	cmp	r3, #0
   85d08:	f47f adbc 	bne.w	85884 <_dtoa_r+0x4dc>
   85d0c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   85d10:	0d3f      	lsrs	r7, r7, #20
   85d12:	053f      	lsls	r7, r7, #20
   85d14:	2f00      	cmp	r7, #0
   85d16:	f000 820d 	beq.w	86134 <_dtoa_r+0xd8c>
   85d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85d1c:	3301      	adds	r3, #1
   85d1e:	930a      	str	r3, [sp, #40]	; 0x28
   85d20:	9b08      	ldr	r3, [sp, #32]
   85d22:	3301      	adds	r3, #1
   85d24:	9308      	str	r3, [sp, #32]
   85d26:	2301      	movs	r3, #1
   85d28:	930c      	str	r3, [sp, #48]	; 0x30
   85d2a:	e5ad      	b.n	85888 <_dtoa_r+0x4e0>
   85d2c:	9b07      	ldr	r3, [sp, #28]
   85d2e:	2b00      	cmp	r3, #0
   85d30:	f73f ac48 	bgt.w	855c4 <_dtoa_r+0x21c>
   85d34:	f040 8222 	bne.w	8617c <_dtoa_r+0xdd4>
   85d38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85d3c:	2200      	movs	r2, #0
   85d3e:	4b38      	ldr	r3, [pc, #224]	; (85e20 <_dtoa_r+0xa78>)
   85d40:	f001 ffd2 	bl	87ce8 <__aeabi_dmul>
   85d44:	4652      	mov	r2, sl
   85d46:	465b      	mov	r3, fp
   85d48:	f002 fa54 	bl	881f4 <__aeabi_dcmpge>
   85d4c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   85d50:	4646      	mov	r6, r8
   85d52:	2800      	cmp	r0, #0
   85d54:	d041      	beq.n	85dda <_dtoa_r+0xa32>
   85d56:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85d58:	9d04      	ldr	r5, [sp, #16]
   85d5a:	43db      	mvns	r3, r3
   85d5c:	9302      	str	r3, [sp, #8]
   85d5e:	4641      	mov	r1, r8
   85d60:	4620      	mov	r0, r4
   85d62:	f001 f851 	bl	86e08 <_Bfree>
   85d66:	2e00      	cmp	r6, #0
   85d68:	f43f acdd 	beq.w	85726 <_dtoa_r+0x37e>
   85d6c:	e6a7      	b.n	85abe <_dtoa_r+0x716>
   85d6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85d70:	4649      	mov	r1, r9
   85d72:	4620      	mov	r0, r4
   85d74:	f001 f980 	bl	87078 <__pow5mult>
   85d78:	4681      	mov	r9, r0
   85d7a:	e557      	b.n	8582c <_dtoa_r+0x484>
   85d7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   85d7e:	2a00      	cmp	r2, #0
   85d80:	f000 8188 	beq.w	86094 <_dtoa_r+0xcec>
   85d84:	f203 4333 	addw	r3, r3, #1075	; 0x433
   85d88:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85d8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85d8c:	e4f2      	b.n	85774 <_dtoa_r+0x3cc>
   85d8e:	f1ba 0f00 	cmp.w	sl, #0
   85d92:	f47f ad77 	bne.w	85884 <_dtoa_r+0x4dc>
   85d96:	e7b4      	b.n	85d02 <_dtoa_r+0x95a>
   85d98:	f001 f840 	bl	86e1c <__multadd>
   85d9c:	4647      	mov	r7, r8
   85d9e:	4606      	mov	r6, r0
   85da0:	4683      	mov	fp, r0
   85da2:	e5c0      	b.n	85926 <_dtoa_r+0x57e>
   85da4:	4601      	mov	r1, r0
   85da6:	4620      	mov	r0, r4
   85da8:	9308      	str	r3, [sp, #32]
   85daa:	f001 f82d 	bl	86e08 <_Bfree>
   85dae:	2201      	movs	r2, #1
   85db0:	9b08      	ldr	r3, [sp, #32]
   85db2:	e5e2      	b.n	8597a <_dtoa_r+0x5d2>
   85db4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85db6:	2b02      	cmp	r3, #2
   85db8:	f77f ad98 	ble.w	858ec <_dtoa_r+0x544>
   85dbc:	9b07      	ldr	r3, [sp, #28]
   85dbe:	2b00      	cmp	r3, #0
   85dc0:	d1c9      	bne.n	85d56 <_dtoa_r+0x9ae>
   85dc2:	4641      	mov	r1, r8
   85dc4:	2205      	movs	r2, #5
   85dc6:	4620      	mov	r0, r4
   85dc8:	f001 f828 	bl	86e1c <__multadd>
   85dcc:	4601      	mov	r1, r0
   85dce:	4680      	mov	r8, r0
   85dd0:	4648      	mov	r0, r9
   85dd2:	f001 f9f1 	bl	871b8 <__mcmp>
   85dd6:	2800      	cmp	r0, #0
   85dd8:	ddbd      	ble.n	85d56 <_dtoa_r+0x9ae>
   85dda:	2331      	movs	r3, #49	; 0x31
   85ddc:	9a02      	ldr	r2, [sp, #8]
   85dde:	9904      	ldr	r1, [sp, #16]
   85de0:	3201      	adds	r2, #1
   85de2:	9202      	str	r2, [sp, #8]
   85de4:	700b      	strb	r3, [r1, #0]
   85de6:	1c4d      	adds	r5, r1, #1
   85de8:	e7b9      	b.n	85d5e <_dtoa_r+0x9b6>
   85dea:	2331      	movs	r3, #49	; 0x31
   85dec:	9a02      	ldr	r2, [sp, #8]
   85dee:	3201      	adds	r2, #1
   85df0:	9202      	str	r2, [sp, #8]
   85df2:	9a04      	ldr	r2, [sp, #16]
   85df4:	7013      	strb	r3, [r2, #0]
   85df6:	e652      	b.n	85a9e <_dtoa_r+0x6f6>
   85df8:	2301      	movs	r3, #1
   85dfa:	930b      	str	r3, [sp, #44]	; 0x2c
   85dfc:	e666      	b.n	85acc <_dtoa_r+0x724>
   85dfe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85e02:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85e04:	e48f      	b.n	85726 <_dtoa_r+0x37e>
   85e06:	bf00      	nop
   85e08:	00088368 	.word	0x00088368
   85e0c:	00088340 	.word	0x00088340
   85e10:	3ff00000 	.word	0x3ff00000
   85e14:	401c0000 	.word	0x401c0000
   85e18:	3fe00000 	.word	0x3fe00000
   85e1c:	40240000 	.word	0x40240000
   85e20:	40140000 	.word	0x40140000
   85e24:	4650      	mov	r0, sl
   85e26:	f7fd fbcb 	bl	835c0 <__aeabi_i2d>
   85e2a:	463a      	mov	r2, r7
   85e2c:	4643      	mov	r3, r8
   85e2e:	f001 ff5b 	bl	87ce8 <__aeabi_dmul>
   85e32:	2200      	movs	r2, #0
   85e34:	4bc1      	ldr	r3, [pc, #772]	; (8613c <_dtoa_r+0xd94>)
   85e36:	f7fd fa77 	bl	83328 <__adddf3>
   85e3a:	4605      	mov	r5, r0
   85e3c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85e40:	4641      	mov	r1, r8
   85e42:	2200      	movs	r2, #0
   85e44:	4bbe      	ldr	r3, [pc, #760]	; (86140 <_dtoa_r+0xd98>)
   85e46:	4638      	mov	r0, r7
   85e48:	f7fd fa6c 	bl	83324 <__aeabi_dsub>
   85e4c:	462a      	mov	r2, r5
   85e4e:	4633      	mov	r3, r6
   85e50:	4682      	mov	sl, r0
   85e52:	468b      	mov	fp, r1
   85e54:	f002 f9d8 	bl	88208 <__aeabi_dcmpgt>
   85e58:	4680      	mov	r8, r0
   85e5a:	2800      	cmp	r0, #0
   85e5c:	f040 8110 	bne.w	86080 <_dtoa_r+0xcd8>
   85e60:	462a      	mov	r2, r5
   85e62:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   85e66:	4650      	mov	r0, sl
   85e68:	4659      	mov	r1, fp
   85e6a:	f002 f9af 	bl	881cc <__aeabi_dcmplt>
   85e6e:	b118      	cbz	r0, 85e78 <_dtoa_r+0xad0>
   85e70:	4646      	mov	r6, r8
   85e72:	e770      	b.n	85d56 <_dtoa_r+0x9ae>
   85e74:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85e78:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   85e7c:	f7ff bb8f 	b.w	8559e <_dtoa_r+0x1f6>
   85e80:	9804      	ldr	r0, [sp, #16]
   85e82:	f7ff bac0 	b.w	85406 <_dtoa_r+0x5e>
   85e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85e88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85e8a:	1afb      	subs	r3, r7, r3
   85e8c:	441a      	add	r2, r3
   85e8e:	970c      	str	r7, [sp, #48]	; 0x30
   85e90:	920d      	str	r2, [sp, #52]	; 0x34
   85e92:	2700      	movs	r7, #0
   85e94:	e468      	b.n	85768 <_dtoa_r+0x3c0>
   85e96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   85e9a:	f04f 0a02 	mov.w	sl, #2
   85e9e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   85ea2:	e656      	b.n	85b52 <_dtoa_r+0x7aa>
   85ea4:	2100      	movs	r1, #0
   85ea6:	2301      	movs	r3, #1
   85ea8:	4620      	mov	r0, r4
   85eaa:	6461      	str	r1, [r4, #68]	; 0x44
   85eac:	9325      	str	r3, [sp, #148]	; 0x94
   85eae:	f000 ff85 	bl	86dbc <_Balloc>
   85eb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85eb4:	9004      	str	r0, [sp, #16]
   85eb6:	9307      	str	r3, [sp, #28]
   85eb8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85eba:	6420      	str	r0, [r4, #64]	; 0x40
   85ebc:	930f      	str	r3, [sp, #60]	; 0x3c
   85ebe:	e627      	b.n	85b10 <_dtoa_r+0x768>
   85ec0:	2a00      	cmp	r2, #0
   85ec2:	46d0      	mov	r8, sl
   85ec4:	f8cd b020 	str.w	fp, [sp, #32]
   85ec8:	469a      	mov	sl, r3
   85eca:	dd11      	ble.n	85ef0 <_dtoa_r+0xb48>
   85ecc:	4649      	mov	r1, r9
   85ece:	2201      	movs	r2, #1
   85ed0:	4620      	mov	r0, r4
   85ed2:	f001 f921 	bl	87118 <__lshift>
   85ed6:	4641      	mov	r1, r8
   85ed8:	4681      	mov	r9, r0
   85eda:	f001 f96d 	bl	871b8 <__mcmp>
   85ede:	2800      	cmp	r0, #0
   85ee0:	f340 8145 	ble.w	8616e <_dtoa_r+0xdc6>
   85ee4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   85ee8:	f000 8105 	beq.w	860f6 <_dtoa_r+0xd4e>
   85eec:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   85ef0:	46b3      	mov	fp, r6
   85ef2:	f887 a000 	strb.w	sl, [r7]
   85ef6:	1c7d      	adds	r5, r7, #1
   85ef8:	9e08      	ldr	r6, [sp, #32]
   85efa:	e5d0      	b.n	85a9e <_dtoa_r+0x6f6>
   85efc:	d104      	bne.n	85f08 <_dtoa_r+0xb60>
   85efe:	f01a 0f01 	tst.w	sl, #1
   85f02:	d001      	beq.n	85f08 <_dtoa_r+0xb60>
   85f04:	e5bb      	b.n	85a7e <_dtoa_r+0x6d6>
   85f06:	4615      	mov	r5, r2
   85f08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   85f0c:	1e6a      	subs	r2, r5, #1
   85f0e:	2b30      	cmp	r3, #48	; 0x30
   85f10:	d0f9      	beq.n	85f06 <_dtoa_r+0xb5e>
   85f12:	e5c4      	b.n	85a9e <_dtoa_r+0x6f6>
   85f14:	2230      	movs	r2, #48	; 0x30
   85f16:	9904      	ldr	r1, [sp, #16]
   85f18:	700a      	strb	r2, [r1, #0]
   85f1a:	9a02      	ldr	r2, [sp, #8]
   85f1c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85f20:	3201      	adds	r2, #1
   85f22:	9202      	str	r2, [sp, #8]
   85f24:	f7ff bbfb 	b.w	8571e <_dtoa_r+0x376>
   85f28:	f000 80bb 	beq.w	860a2 <_dtoa_r+0xcfa>
   85f2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   85f30:	9b02      	ldr	r3, [sp, #8]
   85f32:	f04f 0a02 	mov.w	sl, #2
   85f36:	425d      	negs	r5, r3
   85f38:	4b82      	ldr	r3, [pc, #520]	; (86144 <_dtoa_r+0xd9c>)
   85f3a:	f005 020f 	and.w	r2, r5, #15
   85f3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85f42:	e9d3 2300 	ldrd	r2, r3, [r3]
   85f46:	f001 fecf 	bl	87ce8 <__aeabi_dmul>
   85f4a:	112d      	asrs	r5, r5, #4
   85f4c:	4607      	mov	r7, r0
   85f4e:	4688      	mov	r8, r1
   85f50:	f43f ae1a 	beq.w	85b88 <_dtoa_r+0x7e0>
   85f54:	4e7c      	ldr	r6, [pc, #496]	; (86148 <_dtoa_r+0xda0>)
   85f56:	07eb      	lsls	r3, r5, #31
   85f58:	d509      	bpl.n	85f6e <_dtoa_r+0xbc6>
   85f5a:	e9d6 2300 	ldrd	r2, r3, [r6]
   85f5e:	4638      	mov	r0, r7
   85f60:	4641      	mov	r1, r8
   85f62:	f001 fec1 	bl	87ce8 <__aeabi_dmul>
   85f66:	4607      	mov	r7, r0
   85f68:	4688      	mov	r8, r1
   85f6a:	f10a 0a01 	add.w	sl, sl, #1
   85f6e:	106d      	asrs	r5, r5, #1
   85f70:	f106 0608 	add.w	r6, r6, #8
   85f74:	d1ef      	bne.n	85f56 <_dtoa_r+0xbae>
   85f76:	e607      	b.n	85b88 <_dtoa_r+0x7e0>
   85f78:	6871      	ldr	r1, [r6, #4]
   85f7a:	4620      	mov	r0, r4
   85f7c:	f000 ff1e 	bl	86dbc <_Balloc>
   85f80:	4605      	mov	r5, r0
   85f82:	6933      	ldr	r3, [r6, #16]
   85f84:	f106 010c 	add.w	r1, r6, #12
   85f88:	3302      	adds	r3, #2
   85f8a:	009a      	lsls	r2, r3, #2
   85f8c:	300c      	adds	r0, #12
   85f8e:	f7fd fd2d 	bl	839ec <memcpy>
   85f92:	4629      	mov	r1, r5
   85f94:	2201      	movs	r2, #1
   85f96:	4620      	mov	r0, r4
   85f98:	f001 f8be 	bl	87118 <__lshift>
   85f9c:	9008      	str	r0, [sp, #32]
   85f9e:	e4b6      	b.n	8590e <_dtoa_r+0x566>
   85fa0:	2b39      	cmp	r3, #57	; 0x39
   85fa2:	f8cd b020 	str.w	fp, [sp, #32]
   85fa6:	46d0      	mov	r8, sl
   85fa8:	f000 80a5 	beq.w	860f6 <_dtoa_r+0xd4e>
   85fac:	f103 0a01 	add.w	sl, r3, #1
   85fb0:	46b3      	mov	fp, r6
   85fb2:	f887 a000 	strb.w	sl, [r7]
   85fb6:	1c7d      	adds	r5, r7, #1
   85fb8:	9e08      	ldr	r6, [sp, #32]
   85fba:	e570      	b.n	85a9e <_dtoa_r+0x6f6>
   85fbc:	465a      	mov	r2, fp
   85fbe:	46d0      	mov	r8, sl
   85fc0:	46b3      	mov	fp, r6
   85fc2:	469a      	mov	sl, r3
   85fc4:	4616      	mov	r6, r2
   85fc6:	e54e      	b.n	85a66 <_dtoa_r+0x6be>
   85fc8:	9812      	ldr	r0, [sp, #72]	; 0x48
   85fca:	495e      	ldr	r1, [pc, #376]	; (86144 <_dtoa_r+0xd9c>)
   85fcc:	462a      	mov	r2, r5
   85fce:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   85fd2:	4633      	mov	r3, r6
   85fd4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   85fd8:	f001 fe86 	bl	87ce8 <__aeabi_dmul>
   85fdc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   85fe0:	4638      	mov	r0, r7
   85fe2:	4641      	mov	r1, r8
   85fe4:	f002 f930 	bl	88248 <__aeabi_d2iz>
   85fe8:	4605      	mov	r5, r0
   85fea:	f7fd fae9 	bl	835c0 <__aeabi_i2d>
   85fee:	4602      	mov	r2, r0
   85ff0:	460b      	mov	r3, r1
   85ff2:	4638      	mov	r0, r7
   85ff4:	4641      	mov	r1, r8
   85ff6:	f7fd f995 	bl	83324 <__aeabi_dsub>
   85ffa:	4606      	mov	r6, r0
   85ffc:	9812      	ldr	r0, [sp, #72]	; 0x48
   85ffe:	9a04      	ldr	r2, [sp, #16]
   86000:	3530      	adds	r5, #48	; 0x30
   86002:	2801      	cmp	r0, #1
   86004:	7015      	strb	r5, [r2, #0]
   86006:	460f      	mov	r7, r1
   86008:	f102 0501 	add.w	r5, r2, #1
   8600c:	d026      	beq.n	8605c <_dtoa_r+0xcb4>
   8600e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86010:	9a04      	ldr	r2, [sp, #16]
   86012:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   86016:	4413      	add	r3, r2
   86018:	f04f 0a00 	mov.w	sl, #0
   8601c:	4699      	mov	r9, r3
   8601e:	f8df b130 	ldr.w	fp, [pc, #304]	; 86150 <_dtoa_r+0xda8>
   86022:	4652      	mov	r2, sl
   86024:	465b      	mov	r3, fp
   86026:	4630      	mov	r0, r6
   86028:	4639      	mov	r1, r7
   8602a:	f001 fe5d 	bl	87ce8 <__aeabi_dmul>
   8602e:	460f      	mov	r7, r1
   86030:	4606      	mov	r6, r0
   86032:	f002 f909 	bl	88248 <__aeabi_d2iz>
   86036:	4680      	mov	r8, r0
   86038:	f7fd fac2 	bl	835c0 <__aeabi_i2d>
   8603c:	4602      	mov	r2, r0
   8603e:	460b      	mov	r3, r1
   86040:	4630      	mov	r0, r6
   86042:	4639      	mov	r1, r7
   86044:	f7fd f96e 	bl	83324 <__aeabi_dsub>
   86048:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8604c:	f805 8b01 	strb.w	r8, [r5], #1
   86050:	454d      	cmp	r5, r9
   86052:	4606      	mov	r6, r0
   86054:	460f      	mov	r7, r1
   86056:	d1e4      	bne.n	86022 <_dtoa_r+0xc7a>
   86058:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8605c:	2200      	movs	r2, #0
   8605e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   86062:	4b3a      	ldr	r3, [pc, #232]	; (8614c <_dtoa_r+0xda4>)
   86064:	f7fd f960 	bl	83328 <__adddf3>
   86068:	4632      	mov	r2, r6
   8606a:	463b      	mov	r3, r7
   8606c:	f002 f8ae 	bl	881cc <__aeabi_dcmplt>
   86070:	2800      	cmp	r0, #0
   86072:	d046      	beq.n	86102 <_dtoa_r+0xd5a>
   86074:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86076:	9302      	str	r3, [sp, #8]
   86078:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8607c:	f7ff bb42 	b.w	85704 <_dtoa_r+0x35c>
   86080:	f04f 0800 	mov.w	r8, #0
   86084:	4646      	mov	r6, r8
   86086:	e6a8      	b.n	85dda <_dtoa_r+0xa32>
   86088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8608a:	9a07      	ldr	r2, [sp, #28]
   8608c:	1a9d      	subs	r5, r3, r2
   8608e:	2300      	movs	r3, #0
   86090:	f7ff bb70 	b.w	85774 <_dtoa_r+0x3cc>
   86094:	9b18      	ldr	r3, [sp, #96]	; 0x60
   86096:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86098:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8609c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8609e:	f7ff bb69 	b.w	85774 <_dtoa_r+0x3cc>
   860a2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   860a6:	f04f 0a02 	mov.w	sl, #2
   860aa:	e56d      	b.n	85b88 <_dtoa_r+0x7e0>
   860ac:	9b07      	ldr	r3, [sp, #28]
   860ae:	2b00      	cmp	r3, #0
   860b0:	f43f aeb8 	beq.w	85e24 <_dtoa_r+0xa7c>
   860b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   860b6:	2b00      	cmp	r3, #0
   860b8:	f77f aede 	ble.w	85e78 <_dtoa_r+0xad0>
   860bc:	2200      	movs	r2, #0
   860be:	4b24      	ldr	r3, [pc, #144]	; (86150 <_dtoa_r+0xda8>)
   860c0:	4638      	mov	r0, r7
   860c2:	4641      	mov	r1, r8
   860c4:	f001 fe10 	bl	87ce8 <__aeabi_dmul>
   860c8:	4607      	mov	r7, r0
   860ca:	4688      	mov	r8, r1
   860cc:	f10a 0001 	add.w	r0, sl, #1
   860d0:	f7fd fa76 	bl	835c0 <__aeabi_i2d>
   860d4:	463a      	mov	r2, r7
   860d6:	4643      	mov	r3, r8
   860d8:	f001 fe06 	bl	87ce8 <__aeabi_dmul>
   860dc:	2200      	movs	r2, #0
   860de:	4b17      	ldr	r3, [pc, #92]	; (8613c <_dtoa_r+0xd94>)
   860e0:	f7fd f922 	bl	83328 <__adddf3>
   860e4:	9a02      	ldr	r2, [sp, #8]
   860e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   860e8:	3a01      	subs	r2, #1
   860ea:	4605      	mov	r5, r0
   860ec:	9215      	str	r2, [sp, #84]	; 0x54
   860ee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   860f2:	9312      	str	r3, [sp, #72]	; 0x48
   860f4:	e569      	b.n	85bca <_dtoa_r+0x822>
   860f6:	2239      	movs	r2, #57	; 0x39
   860f8:	46b3      	mov	fp, r6
   860fa:	703a      	strb	r2, [r7, #0]
   860fc:	9e08      	ldr	r6, [sp, #32]
   860fe:	1c7d      	adds	r5, r7, #1
   86100:	e4bf      	b.n	85a82 <_dtoa_r+0x6da>
   86102:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   86106:	2000      	movs	r0, #0
   86108:	4910      	ldr	r1, [pc, #64]	; (8614c <_dtoa_r+0xda4>)
   8610a:	f7fd f90b 	bl	83324 <__aeabi_dsub>
   8610e:	4632      	mov	r2, r6
   86110:	463b      	mov	r3, r7
   86112:	f002 f879 	bl	88208 <__aeabi_dcmpgt>
   86116:	b908      	cbnz	r0, 8611c <_dtoa_r+0xd74>
   86118:	e6ae      	b.n	85e78 <_dtoa_r+0xad0>
   8611a:	4615      	mov	r5, r2
   8611c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   86120:	1e6a      	subs	r2, r5, #1
   86122:	2b30      	cmp	r3, #48	; 0x30
   86124:	d0f9      	beq.n	8611a <_dtoa_r+0xd72>
   86126:	e5d7      	b.n	85cd8 <_dtoa_r+0x930>
   86128:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8612c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8612e:	9302      	str	r3, [sp, #8]
   86130:	f7ff bae8 	b.w	85704 <_dtoa_r+0x35c>
   86134:	970c      	str	r7, [sp, #48]	; 0x30
   86136:	f7ff bba7 	b.w	85888 <_dtoa_r+0x4e0>
   8613a:	bf00      	nop
   8613c:	401c0000 	.word	0x401c0000
   86140:	40140000 	.word	0x40140000
   86144:	00088368 	.word	0x00088368
   86148:	00088340 	.word	0x00088340
   8614c:	3fe00000 	.word	0x3fe00000
   86150:	40240000 	.word	0x40240000
   86154:	2b39      	cmp	r3, #57	; 0x39
   86156:	f8cd b020 	str.w	fp, [sp, #32]
   8615a:	46d0      	mov	r8, sl
   8615c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86160:	469a      	mov	sl, r3
   86162:	d0c8      	beq.n	860f6 <_dtoa_r+0xd4e>
   86164:	f1bb 0f00 	cmp.w	fp, #0
   86168:	f73f aec0 	bgt.w	85eec <_dtoa_r+0xb44>
   8616c:	e6c0      	b.n	85ef0 <_dtoa_r+0xb48>
   8616e:	f47f aebf 	bne.w	85ef0 <_dtoa_r+0xb48>
   86172:	f01a 0f01 	tst.w	sl, #1
   86176:	f43f aebb 	beq.w	85ef0 <_dtoa_r+0xb48>
   8617a:	e6b3      	b.n	85ee4 <_dtoa_r+0xb3c>
   8617c:	f04f 0800 	mov.w	r8, #0
   86180:	4646      	mov	r6, r8
   86182:	e5e8      	b.n	85d56 <_dtoa_r+0x9ae>
   86184:	4631      	mov	r1, r6
   86186:	2300      	movs	r3, #0
   86188:	220a      	movs	r2, #10
   8618a:	4620      	mov	r0, r4
   8618c:	f000 fe46 	bl	86e1c <__multadd>
   86190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86192:	4606      	mov	r6, r0
   86194:	2b00      	cmp	r3, #0
   86196:	dd07      	ble.n	861a8 <_dtoa_r+0xe00>
   86198:	9307      	str	r3, [sp, #28]
   8619a:	f7ff bbab 	b.w	858f4 <_dtoa_r+0x54c>
   8619e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   861a0:	2b02      	cmp	r3, #2
   861a2:	dc1f      	bgt.n	861e4 <_dtoa_r+0xe3c>
   861a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   861a6:	e43c      	b.n	85a22 <_dtoa_r+0x67a>
   861a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   861aa:	2b02      	cmp	r3, #2
   861ac:	dc1a      	bgt.n	861e4 <_dtoa_r+0xe3c>
   861ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   861b0:	e7f2      	b.n	86198 <_dtoa_r+0xdf0>
   861b2:	f43f ab81 	beq.w	858b8 <_dtoa_r+0x510>
   861b6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   861ba:	e411      	b.n	859e0 <_dtoa_r+0x638>
   861bc:	2500      	movs	r5, #0
   861be:	4620      	mov	r0, r4
   861c0:	6465      	str	r5, [r4, #68]	; 0x44
   861c2:	4629      	mov	r1, r5
   861c4:	f000 fdfa 	bl	86dbc <_Balloc>
   861c8:	f04f 33ff 	mov.w	r3, #4294967295
   861cc:	9307      	str	r3, [sp, #28]
   861ce:	930f      	str	r3, [sp, #60]	; 0x3c
   861d0:	2301      	movs	r3, #1
   861d2:	9004      	str	r0, [sp, #16]
   861d4:	9525      	str	r5, [sp, #148]	; 0x94
   861d6:	6420      	str	r0, [r4, #64]	; 0x40
   861d8:	930b      	str	r3, [sp, #44]	; 0x2c
   861da:	f7ff b9e0 	b.w	8559e <_dtoa_r+0x1f6>
   861de:	2501      	movs	r5, #1
   861e0:	f7ff b9a8 	b.w	85534 <_dtoa_r+0x18c>
   861e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   861e6:	9307      	str	r3, [sp, #28]
   861e8:	e5e8      	b.n	85dbc <_dtoa_r+0xa14>
   861ea:	bf00      	nop

000861ec <__sflush_r>:
   861ec:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   861f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   861f4:	b29a      	uxth	r2, r3
   861f6:	460d      	mov	r5, r1
   861f8:	0711      	lsls	r1, r2, #28
   861fa:	4680      	mov	r8, r0
   861fc:	d43a      	bmi.n	86274 <__sflush_r+0x88>
   861fe:	686a      	ldr	r2, [r5, #4]
   86200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   86204:	2a00      	cmp	r2, #0
   86206:	81ab      	strh	r3, [r5, #12]
   86208:	dd70      	ble.n	862ec <__sflush_r+0x100>
   8620a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8620c:	2c00      	cmp	r4, #0
   8620e:	d04a      	beq.n	862a6 <__sflush_r+0xba>
   86210:	2200      	movs	r2, #0
   86212:	b29b      	uxth	r3, r3
   86214:	f8d8 6000 	ldr.w	r6, [r8]
   86218:	f8c8 2000 	str.w	r2, [r8]
   8621c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   86220:	d068      	beq.n	862f4 <__sflush_r+0x108>
   86222:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   86224:	075f      	lsls	r7, r3, #29
   86226:	d505      	bpl.n	86234 <__sflush_r+0x48>
   86228:	6869      	ldr	r1, [r5, #4]
   8622a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8622c:	1a52      	subs	r2, r2, r1
   8622e:	b10b      	cbz	r3, 86234 <__sflush_r+0x48>
   86230:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   86232:	1ad2      	subs	r2, r2, r3
   86234:	2300      	movs	r3, #0
   86236:	69e9      	ldr	r1, [r5, #28]
   86238:	4640      	mov	r0, r8
   8623a:	47a0      	blx	r4
   8623c:	1c44      	adds	r4, r0, #1
   8623e:	d03d      	beq.n	862bc <__sflush_r+0xd0>
   86240:	2100      	movs	r1, #0
   86242:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   86246:	692a      	ldr	r2, [r5, #16]
   86248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8624c:	81ab      	strh	r3, [r5, #12]
   8624e:	04db      	lsls	r3, r3, #19
   86250:	6069      	str	r1, [r5, #4]
   86252:	602a      	str	r2, [r5, #0]
   86254:	d448      	bmi.n	862e8 <__sflush_r+0xfc>
   86256:	6b29      	ldr	r1, [r5, #48]	; 0x30
   86258:	f8c8 6000 	str.w	r6, [r8]
   8625c:	b319      	cbz	r1, 862a6 <__sflush_r+0xba>
   8625e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   86262:	4299      	cmp	r1, r3
   86264:	d002      	beq.n	8626c <__sflush_r+0x80>
   86266:	4640      	mov	r0, r8
   86268:	f000 f95a 	bl	86520 <_free_r>
   8626c:	2000      	movs	r0, #0
   8626e:	6328      	str	r0, [r5, #48]	; 0x30
   86270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86274:	692e      	ldr	r6, [r5, #16]
   86276:	b1b6      	cbz	r6, 862a6 <__sflush_r+0xba>
   86278:	0791      	lsls	r1, r2, #30
   8627a:	bf18      	it	ne
   8627c:	2300      	movne	r3, #0
   8627e:	682c      	ldr	r4, [r5, #0]
   86280:	bf08      	it	eq
   86282:	696b      	ldreq	r3, [r5, #20]
   86284:	602e      	str	r6, [r5, #0]
   86286:	1ba4      	subs	r4, r4, r6
   86288:	60ab      	str	r3, [r5, #8]
   8628a:	e00a      	b.n	862a2 <__sflush_r+0xb6>
   8628c:	4623      	mov	r3, r4
   8628e:	4632      	mov	r2, r6
   86290:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   86292:	69e9      	ldr	r1, [r5, #28]
   86294:	4640      	mov	r0, r8
   86296:	47b8      	blx	r7
   86298:	2800      	cmp	r0, #0
   8629a:	eba4 0400 	sub.w	r4, r4, r0
   8629e:	4406      	add	r6, r0
   862a0:	dd04      	ble.n	862ac <__sflush_r+0xc0>
   862a2:	2c00      	cmp	r4, #0
   862a4:	dcf2      	bgt.n	8628c <__sflush_r+0xa0>
   862a6:	2000      	movs	r0, #0
   862a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   862ac:	89ab      	ldrh	r3, [r5, #12]
   862ae:	f04f 30ff 	mov.w	r0, #4294967295
   862b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   862b6:	81ab      	strh	r3, [r5, #12]
   862b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   862bc:	f8d8 4000 	ldr.w	r4, [r8]
   862c0:	2c1d      	cmp	r4, #29
   862c2:	d8f3      	bhi.n	862ac <__sflush_r+0xc0>
   862c4:	4b16      	ldr	r3, [pc, #88]	; (86320 <__sflush_r+0x134>)
   862c6:	40e3      	lsrs	r3, r4
   862c8:	43db      	mvns	r3, r3
   862ca:	f013 0301 	ands.w	r3, r3, #1
   862ce:	d1ed      	bne.n	862ac <__sflush_r+0xc0>
   862d0:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   862d4:	6929      	ldr	r1, [r5, #16]
   862d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   862da:	81aa      	strh	r2, [r5, #12]
   862dc:	04d2      	lsls	r2, r2, #19
   862de:	606b      	str	r3, [r5, #4]
   862e0:	6029      	str	r1, [r5, #0]
   862e2:	d5b8      	bpl.n	86256 <__sflush_r+0x6a>
   862e4:	2c00      	cmp	r4, #0
   862e6:	d1b6      	bne.n	86256 <__sflush_r+0x6a>
   862e8:	6528      	str	r0, [r5, #80]	; 0x50
   862ea:	e7b4      	b.n	86256 <__sflush_r+0x6a>
   862ec:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   862ee:	2a00      	cmp	r2, #0
   862f0:	dc8b      	bgt.n	8620a <__sflush_r+0x1e>
   862f2:	e7d8      	b.n	862a6 <__sflush_r+0xba>
   862f4:	2301      	movs	r3, #1
   862f6:	69e9      	ldr	r1, [r5, #28]
   862f8:	4640      	mov	r0, r8
   862fa:	47a0      	blx	r4
   862fc:	1c43      	adds	r3, r0, #1
   862fe:	4602      	mov	r2, r0
   86300:	d002      	beq.n	86308 <__sflush_r+0x11c>
   86302:	89ab      	ldrh	r3, [r5, #12]
   86304:	6aac      	ldr	r4, [r5, #40]	; 0x28
   86306:	e78d      	b.n	86224 <__sflush_r+0x38>
   86308:	f8d8 3000 	ldr.w	r3, [r8]
   8630c:	2b00      	cmp	r3, #0
   8630e:	d0f8      	beq.n	86302 <__sflush_r+0x116>
   86310:	2b1d      	cmp	r3, #29
   86312:	d001      	beq.n	86318 <__sflush_r+0x12c>
   86314:	2b16      	cmp	r3, #22
   86316:	d1c9      	bne.n	862ac <__sflush_r+0xc0>
   86318:	f8c8 6000 	str.w	r6, [r8]
   8631c:	e7c3      	b.n	862a6 <__sflush_r+0xba>
   8631e:	bf00      	nop
   86320:	20400001 	.word	0x20400001

00086324 <_fflush_r>:
   86324:	b538      	push	{r3, r4, r5, lr}
   86326:	460d      	mov	r5, r1
   86328:	4604      	mov	r4, r0
   8632a:	b108      	cbz	r0, 86330 <_fflush_r+0xc>
   8632c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8632e:	b1bb      	cbz	r3, 86360 <_fflush_r+0x3c>
   86330:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   86334:	b188      	cbz	r0, 8635a <_fflush_r+0x36>
   86336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   86338:	07db      	lsls	r3, r3, #31
   8633a:	d401      	bmi.n	86340 <_fflush_r+0x1c>
   8633c:	0581      	lsls	r1, r0, #22
   8633e:	d517      	bpl.n	86370 <_fflush_r+0x4c>
   86340:	4620      	mov	r0, r4
   86342:	4629      	mov	r1, r5
   86344:	f7ff ff52 	bl	861ec <__sflush_r>
   86348:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8634a:	4604      	mov	r4, r0
   8634c:	07da      	lsls	r2, r3, #31
   8634e:	d402      	bmi.n	86356 <_fflush_r+0x32>
   86350:	89ab      	ldrh	r3, [r5, #12]
   86352:	059b      	lsls	r3, r3, #22
   86354:	d507      	bpl.n	86366 <_fflush_r+0x42>
   86356:	4620      	mov	r0, r4
   86358:	bd38      	pop	{r3, r4, r5, pc}
   8635a:	4604      	mov	r4, r0
   8635c:	4620      	mov	r0, r4
   8635e:	bd38      	pop	{r3, r4, r5, pc}
   86360:	f000 f838 	bl	863d4 <__sinit>
   86364:	e7e4      	b.n	86330 <_fflush_r+0xc>
   86366:	6da8      	ldr	r0, [r5, #88]	; 0x58
   86368:	f000 f9fc 	bl	86764 <__retarget_lock_release_recursive>
   8636c:	4620      	mov	r0, r4
   8636e:	bd38      	pop	{r3, r4, r5, pc}
   86370:	6da8      	ldr	r0, [r5, #88]	; 0x58
   86372:	f000 f9f5 	bl	86760 <__retarget_lock_acquire_recursive>
   86376:	e7e3      	b.n	86340 <_fflush_r+0x1c>

00086378 <_cleanup_r>:
   86378:	4901      	ldr	r1, [pc, #4]	; (86380 <_cleanup_r+0x8>)
   8637a:	f000 b9b7 	b.w	866ec <_fwalk_reent>
   8637e:	bf00      	nop
   86380:	0008772d 	.word	0x0008772d

00086384 <std.isra.0>:
   86384:	2300      	movs	r3, #0
   86386:	b510      	push	{r4, lr}
   86388:	4604      	mov	r4, r0
   8638a:	8181      	strh	r1, [r0, #12]
   8638c:	81c2      	strh	r2, [r0, #14]
   8638e:	6003      	str	r3, [r0, #0]
   86390:	6043      	str	r3, [r0, #4]
   86392:	6083      	str	r3, [r0, #8]
   86394:	6643      	str	r3, [r0, #100]	; 0x64
   86396:	6103      	str	r3, [r0, #16]
   86398:	6143      	str	r3, [r0, #20]
   8639a:	6183      	str	r3, [r0, #24]
   8639c:	4619      	mov	r1, r3
   8639e:	2208      	movs	r2, #8
   863a0:	305c      	adds	r0, #92	; 0x5c
   863a2:	f7fd fb99 	bl	83ad8 <memset>
   863a6:	4807      	ldr	r0, [pc, #28]	; (863c4 <std.isra.0+0x40>)
   863a8:	4907      	ldr	r1, [pc, #28]	; (863c8 <std.isra.0+0x44>)
   863aa:	4a08      	ldr	r2, [pc, #32]	; (863cc <std.isra.0+0x48>)
   863ac:	4b08      	ldr	r3, [pc, #32]	; (863d0 <std.isra.0+0x4c>)
   863ae:	6220      	str	r0, [r4, #32]
   863b0:	61e4      	str	r4, [r4, #28]
   863b2:	6261      	str	r1, [r4, #36]	; 0x24
   863b4:	62a2      	str	r2, [r4, #40]	; 0x28
   863b6:	62e3      	str	r3, [r4, #44]	; 0x2c
   863b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   863bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   863c0:	f000 b9ca 	b.w	86758 <__retarget_lock_init_recursive>
   863c4:	000873d9 	.word	0x000873d9
   863c8:	000873fd 	.word	0x000873fd
   863cc:	00087439 	.word	0x00087439
   863d0:	00087459 	.word	0x00087459

000863d4 <__sinit>:
   863d4:	b510      	push	{r4, lr}
   863d6:	4604      	mov	r4, r0
   863d8:	4814      	ldr	r0, [pc, #80]	; (8642c <__sinit+0x58>)
   863da:	f000 f9c1 	bl	86760 <__retarget_lock_acquire_recursive>
   863de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   863e0:	b9fa      	cbnz	r2, 86422 <__sinit+0x4e>
   863e2:	2003      	movs	r0, #3
   863e4:	4912      	ldr	r1, [pc, #72]	; (86430 <__sinit+0x5c>)
   863e6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   863ea:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   863ee:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   863f2:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   863f6:	63e1      	str	r1, [r4, #60]	; 0x3c
   863f8:	6860      	ldr	r0, [r4, #4]
   863fa:	2104      	movs	r1, #4
   863fc:	f7ff ffc2 	bl	86384 <std.isra.0>
   86400:	68a0      	ldr	r0, [r4, #8]
   86402:	2201      	movs	r2, #1
   86404:	2109      	movs	r1, #9
   86406:	f7ff ffbd 	bl	86384 <std.isra.0>
   8640a:	68e0      	ldr	r0, [r4, #12]
   8640c:	2202      	movs	r2, #2
   8640e:	2112      	movs	r1, #18
   86410:	f7ff ffb8 	bl	86384 <std.isra.0>
   86414:	2301      	movs	r3, #1
   86416:	4805      	ldr	r0, [pc, #20]	; (8642c <__sinit+0x58>)
   86418:	63a3      	str	r3, [r4, #56]	; 0x38
   8641a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8641e:	f000 b9a1 	b.w	86764 <__retarget_lock_release_recursive>
   86422:	4802      	ldr	r0, [pc, #8]	; (8642c <__sinit+0x58>)
   86424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   86428:	f000 b99c 	b.w	86764 <__retarget_lock_release_recursive>
   8642c:	20070fd4 	.word	0x20070fd4
   86430:	00086379 	.word	0x00086379

00086434 <__sfp_lock_acquire>:
   86434:	4801      	ldr	r0, [pc, #4]	; (8643c <__sfp_lock_acquire+0x8>)
   86436:	f000 b993 	b.w	86760 <__retarget_lock_acquire_recursive>
   8643a:	bf00      	nop
   8643c:	20070fe8 	.word	0x20070fe8

00086440 <__sfp_lock_release>:
   86440:	4801      	ldr	r0, [pc, #4]	; (86448 <__sfp_lock_release+0x8>)
   86442:	f000 b98f 	b.w	86764 <__retarget_lock_release_recursive>
   86446:	bf00      	nop
   86448:	20070fe8 	.word	0x20070fe8

0008644c <__libc_fini_array>:
   8644c:	b538      	push	{r3, r4, r5, lr}
   8644e:	4c0a      	ldr	r4, [pc, #40]	; (86478 <__libc_fini_array+0x2c>)
   86450:	4d0a      	ldr	r5, [pc, #40]	; (8647c <__libc_fini_array+0x30>)
   86452:	1b64      	subs	r4, r4, r5
   86454:	10a4      	asrs	r4, r4, #2
   86456:	d00a      	beq.n	8646e <__libc_fini_array+0x22>
   86458:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8645c:	3b01      	subs	r3, #1
   8645e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   86462:	3c01      	subs	r4, #1
   86464:	f855 3904 	ldr.w	r3, [r5], #-4
   86468:	4798      	blx	r3
   8646a:	2c00      	cmp	r4, #0
   8646c:	d1f9      	bne.n	86462 <__libc_fini_array+0x16>
   8646e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86472:	f002 b877 	b.w	88564 <_fini>
   86476:	bf00      	nop
   86478:	00088574 	.word	0x00088574
   8647c:	00088570 	.word	0x00088570

00086480 <_malloc_trim_r>:
   86480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86482:	460c      	mov	r4, r1
   86484:	4f23      	ldr	r7, [pc, #140]	; (86514 <_malloc_trim_r+0x94>)
   86486:	4606      	mov	r6, r0
   86488:	f000 fc8c 	bl	86da4 <__malloc_lock>
   8648c:	68bb      	ldr	r3, [r7, #8]
   8648e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   86492:	685d      	ldr	r5, [r3, #4]
   86494:	310f      	adds	r1, #15
   86496:	f025 0503 	bic.w	r5, r5, #3
   8649a:	4429      	add	r1, r5
   8649c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   864a0:	f021 010f 	bic.w	r1, r1, #15
   864a4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   864a8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   864ac:	db07      	blt.n	864be <_malloc_trim_r+0x3e>
   864ae:	2100      	movs	r1, #0
   864b0:	4630      	mov	r0, r6
   864b2:	f000 ff7f 	bl	873b4 <_sbrk_r>
   864b6:	68bb      	ldr	r3, [r7, #8]
   864b8:	442b      	add	r3, r5
   864ba:	4298      	cmp	r0, r3
   864bc:	d004      	beq.n	864c8 <_malloc_trim_r+0x48>
   864be:	4630      	mov	r0, r6
   864c0:	f000 fc76 	bl	86db0 <__malloc_unlock>
   864c4:	2000      	movs	r0, #0
   864c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   864c8:	4261      	negs	r1, r4
   864ca:	4630      	mov	r0, r6
   864cc:	f000 ff72 	bl	873b4 <_sbrk_r>
   864d0:	3001      	adds	r0, #1
   864d2:	d00d      	beq.n	864f0 <_malloc_trim_r+0x70>
   864d4:	4b10      	ldr	r3, [pc, #64]	; (86518 <_malloc_trim_r+0x98>)
   864d6:	68ba      	ldr	r2, [r7, #8]
   864d8:	6819      	ldr	r1, [r3, #0]
   864da:	1b2d      	subs	r5, r5, r4
   864dc:	f045 0501 	orr.w	r5, r5, #1
   864e0:	4630      	mov	r0, r6
   864e2:	1b09      	subs	r1, r1, r4
   864e4:	6055      	str	r5, [r2, #4]
   864e6:	6019      	str	r1, [r3, #0]
   864e8:	f000 fc62 	bl	86db0 <__malloc_unlock>
   864ec:	2001      	movs	r0, #1
   864ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   864f0:	2100      	movs	r1, #0
   864f2:	4630      	mov	r0, r6
   864f4:	f000 ff5e 	bl	873b4 <_sbrk_r>
   864f8:	68ba      	ldr	r2, [r7, #8]
   864fa:	1a83      	subs	r3, r0, r2
   864fc:	2b0f      	cmp	r3, #15
   864fe:	ddde      	ble.n	864be <_malloc_trim_r+0x3e>
   86500:	4c06      	ldr	r4, [pc, #24]	; (8651c <_malloc_trim_r+0x9c>)
   86502:	4905      	ldr	r1, [pc, #20]	; (86518 <_malloc_trim_r+0x98>)
   86504:	6824      	ldr	r4, [r4, #0]
   86506:	f043 0301 	orr.w	r3, r3, #1
   8650a:	1b00      	subs	r0, r0, r4
   8650c:	6053      	str	r3, [r2, #4]
   8650e:	6008      	str	r0, [r1, #0]
   86510:	e7d5      	b.n	864be <_malloc_trim_r+0x3e>
   86512:	bf00      	nop
   86514:	200706ac 	.word	0x200706ac
   86518:	20070f68 	.word	0x20070f68
   8651c:	20070ab4 	.word	0x20070ab4

00086520 <_free_r>:
   86520:	2900      	cmp	r1, #0
   86522:	d044      	beq.n	865ae <_free_r+0x8e>
   86524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86528:	460d      	mov	r5, r1
   8652a:	4680      	mov	r8, r0
   8652c:	f000 fc3a 	bl	86da4 <__malloc_lock>
   86530:	f855 7c04 	ldr.w	r7, [r5, #-4]
   86534:	4969      	ldr	r1, [pc, #420]	; (866dc <_free_r+0x1bc>)
   86536:	f1a5 0408 	sub.w	r4, r5, #8
   8653a:	f027 0301 	bic.w	r3, r7, #1
   8653e:	18e2      	adds	r2, r4, r3
   86540:	688e      	ldr	r6, [r1, #8]
   86542:	6850      	ldr	r0, [r2, #4]
   86544:	42b2      	cmp	r2, r6
   86546:	f020 0003 	bic.w	r0, r0, #3
   8654a:	d05e      	beq.n	8660a <_free_r+0xea>
   8654c:	07fe      	lsls	r6, r7, #31
   8654e:	6050      	str	r0, [r2, #4]
   86550:	d40b      	bmi.n	8656a <_free_r+0x4a>
   86552:	f855 7c08 	ldr.w	r7, [r5, #-8]
   86556:	f101 0e08 	add.w	lr, r1, #8
   8655a:	1be4      	subs	r4, r4, r7
   8655c:	68a5      	ldr	r5, [r4, #8]
   8655e:	443b      	add	r3, r7
   86560:	4575      	cmp	r5, lr
   86562:	d06d      	beq.n	86640 <_free_r+0x120>
   86564:	68e7      	ldr	r7, [r4, #12]
   86566:	60ef      	str	r7, [r5, #12]
   86568:	60bd      	str	r5, [r7, #8]
   8656a:	1815      	adds	r5, r2, r0
   8656c:	686d      	ldr	r5, [r5, #4]
   8656e:	07ed      	lsls	r5, r5, #31
   86570:	d53e      	bpl.n	865f0 <_free_r+0xd0>
   86572:	f043 0201 	orr.w	r2, r3, #1
   86576:	6062      	str	r2, [r4, #4]
   86578:	50e3      	str	r3, [r4, r3]
   8657a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8657e:	d217      	bcs.n	865b0 <_free_r+0x90>
   86580:	2201      	movs	r2, #1
   86582:	08db      	lsrs	r3, r3, #3
   86584:	1098      	asrs	r0, r3, #2
   86586:	684d      	ldr	r5, [r1, #4]
   86588:	4413      	add	r3, r2
   8658a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8658e:	4082      	lsls	r2, r0
   86590:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   86594:	432a      	orrs	r2, r5
   86596:	3808      	subs	r0, #8
   86598:	60e0      	str	r0, [r4, #12]
   8659a:	60a7      	str	r7, [r4, #8]
   8659c:	604a      	str	r2, [r1, #4]
   8659e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   865a2:	60fc      	str	r4, [r7, #12]
   865a4:	4640      	mov	r0, r8
   865a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   865aa:	f000 bc01 	b.w	86db0 <__malloc_unlock>
   865ae:	4770      	bx	lr
   865b0:	0a5a      	lsrs	r2, r3, #9
   865b2:	2a04      	cmp	r2, #4
   865b4:	d852      	bhi.n	8665c <_free_r+0x13c>
   865b6:	099a      	lsrs	r2, r3, #6
   865b8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   865bc:	00ff      	lsls	r7, r7, #3
   865be:	f102 0538 	add.w	r5, r2, #56	; 0x38
   865c2:	19c8      	adds	r0, r1, r7
   865c4:	59ca      	ldr	r2, [r1, r7]
   865c6:	3808      	subs	r0, #8
   865c8:	4290      	cmp	r0, r2
   865ca:	d04f      	beq.n	8666c <_free_r+0x14c>
   865cc:	6851      	ldr	r1, [r2, #4]
   865ce:	f021 0103 	bic.w	r1, r1, #3
   865d2:	428b      	cmp	r3, r1
   865d4:	d232      	bcs.n	8663c <_free_r+0x11c>
   865d6:	6892      	ldr	r2, [r2, #8]
   865d8:	4290      	cmp	r0, r2
   865da:	d1f7      	bne.n	865cc <_free_r+0xac>
   865dc:	68c3      	ldr	r3, [r0, #12]
   865de:	60a0      	str	r0, [r4, #8]
   865e0:	60e3      	str	r3, [r4, #12]
   865e2:	609c      	str	r4, [r3, #8]
   865e4:	60c4      	str	r4, [r0, #12]
   865e6:	4640      	mov	r0, r8
   865e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   865ec:	f000 bbe0 	b.w	86db0 <__malloc_unlock>
   865f0:	6895      	ldr	r5, [r2, #8]
   865f2:	4f3b      	ldr	r7, [pc, #236]	; (866e0 <_free_r+0x1c0>)
   865f4:	4403      	add	r3, r0
   865f6:	42bd      	cmp	r5, r7
   865f8:	d040      	beq.n	8667c <_free_r+0x15c>
   865fa:	68d0      	ldr	r0, [r2, #12]
   865fc:	f043 0201 	orr.w	r2, r3, #1
   86600:	60e8      	str	r0, [r5, #12]
   86602:	6085      	str	r5, [r0, #8]
   86604:	6062      	str	r2, [r4, #4]
   86606:	50e3      	str	r3, [r4, r3]
   86608:	e7b7      	b.n	8657a <_free_r+0x5a>
   8660a:	07ff      	lsls	r7, r7, #31
   8660c:	4403      	add	r3, r0
   8660e:	d407      	bmi.n	86620 <_free_r+0x100>
   86610:	f855 5c08 	ldr.w	r5, [r5, #-8]
   86614:	1b64      	subs	r4, r4, r5
   86616:	68e2      	ldr	r2, [r4, #12]
   86618:	68a0      	ldr	r0, [r4, #8]
   8661a:	442b      	add	r3, r5
   8661c:	60c2      	str	r2, [r0, #12]
   8661e:	6090      	str	r0, [r2, #8]
   86620:	4a30      	ldr	r2, [pc, #192]	; (866e4 <_free_r+0x1c4>)
   86622:	f043 0001 	orr.w	r0, r3, #1
   86626:	6812      	ldr	r2, [r2, #0]
   86628:	6060      	str	r0, [r4, #4]
   8662a:	4293      	cmp	r3, r2
   8662c:	608c      	str	r4, [r1, #8]
   8662e:	d3b9      	bcc.n	865a4 <_free_r+0x84>
   86630:	4b2d      	ldr	r3, [pc, #180]	; (866e8 <_free_r+0x1c8>)
   86632:	4640      	mov	r0, r8
   86634:	6819      	ldr	r1, [r3, #0]
   86636:	f7ff ff23 	bl	86480 <_malloc_trim_r>
   8663a:	e7b3      	b.n	865a4 <_free_r+0x84>
   8663c:	4610      	mov	r0, r2
   8663e:	e7cd      	b.n	865dc <_free_r+0xbc>
   86640:	1811      	adds	r1, r2, r0
   86642:	6849      	ldr	r1, [r1, #4]
   86644:	07c9      	lsls	r1, r1, #31
   86646:	d444      	bmi.n	866d2 <_free_r+0x1b2>
   86648:	6891      	ldr	r1, [r2, #8]
   8664a:	4403      	add	r3, r0
   8664c:	68d2      	ldr	r2, [r2, #12]
   8664e:	f043 0001 	orr.w	r0, r3, #1
   86652:	60ca      	str	r2, [r1, #12]
   86654:	6091      	str	r1, [r2, #8]
   86656:	6060      	str	r0, [r4, #4]
   86658:	50e3      	str	r3, [r4, r3]
   8665a:	e7a3      	b.n	865a4 <_free_r+0x84>
   8665c:	2a14      	cmp	r2, #20
   8665e:	d816      	bhi.n	8668e <_free_r+0x16e>
   86660:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   86664:	00ff      	lsls	r7, r7, #3
   86666:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8666a:	e7aa      	b.n	865c2 <_free_r+0xa2>
   8666c:	2301      	movs	r3, #1
   8666e:	10aa      	asrs	r2, r5, #2
   86670:	684d      	ldr	r5, [r1, #4]
   86672:	4093      	lsls	r3, r2
   86674:	432b      	orrs	r3, r5
   86676:	604b      	str	r3, [r1, #4]
   86678:	4603      	mov	r3, r0
   8667a:	e7b0      	b.n	865de <_free_r+0xbe>
   8667c:	f043 0201 	orr.w	r2, r3, #1
   86680:	614c      	str	r4, [r1, #20]
   86682:	610c      	str	r4, [r1, #16]
   86684:	60e5      	str	r5, [r4, #12]
   86686:	60a5      	str	r5, [r4, #8]
   86688:	6062      	str	r2, [r4, #4]
   8668a:	50e3      	str	r3, [r4, r3]
   8668c:	e78a      	b.n	865a4 <_free_r+0x84>
   8668e:	2a54      	cmp	r2, #84	; 0x54
   86690:	d806      	bhi.n	866a0 <_free_r+0x180>
   86692:	0b1a      	lsrs	r2, r3, #12
   86694:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   86698:	00ff      	lsls	r7, r7, #3
   8669a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8669e:	e790      	b.n	865c2 <_free_r+0xa2>
   866a0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   866a4:	d806      	bhi.n	866b4 <_free_r+0x194>
   866a6:	0bda      	lsrs	r2, r3, #15
   866a8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   866ac:	00ff      	lsls	r7, r7, #3
   866ae:	f102 0577 	add.w	r5, r2, #119	; 0x77
   866b2:	e786      	b.n	865c2 <_free_r+0xa2>
   866b4:	f240 5054 	movw	r0, #1364	; 0x554
   866b8:	4282      	cmp	r2, r0
   866ba:	d806      	bhi.n	866ca <_free_r+0x1aa>
   866bc:	0c9a      	lsrs	r2, r3, #18
   866be:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   866c2:	00ff      	lsls	r7, r7, #3
   866c4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   866c8:	e77b      	b.n	865c2 <_free_r+0xa2>
   866ca:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   866ce:	257e      	movs	r5, #126	; 0x7e
   866d0:	e777      	b.n	865c2 <_free_r+0xa2>
   866d2:	f043 0101 	orr.w	r1, r3, #1
   866d6:	6061      	str	r1, [r4, #4]
   866d8:	6013      	str	r3, [r2, #0]
   866da:	e763      	b.n	865a4 <_free_r+0x84>
   866dc:	200706ac 	.word	0x200706ac
   866e0:	200706b4 	.word	0x200706b4
   866e4:	20070ab8 	.word	0x20070ab8
   866e8:	20070f98 	.word	0x20070f98

000866ec <_fwalk_reent>:
   866ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   866f0:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   866f4:	d01e      	beq.n	86734 <_fwalk_reent+0x48>
   866f6:	4688      	mov	r8, r1
   866f8:	4607      	mov	r7, r0
   866fa:	f04f 0900 	mov.w	r9, #0
   866fe:	6875      	ldr	r5, [r6, #4]
   86700:	68b4      	ldr	r4, [r6, #8]
   86702:	3d01      	subs	r5, #1
   86704:	d410      	bmi.n	86728 <_fwalk_reent+0x3c>
   86706:	89a3      	ldrh	r3, [r4, #12]
   86708:	3d01      	subs	r5, #1
   8670a:	2b01      	cmp	r3, #1
   8670c:	d908      	bls.n	86720 <_fwalk_reent+0x34>
   8670e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   86712:	3301      	adds	r3, #1
   86714:	d004      	beq.n	86720 <_fwalk_reent+0x34>
   86716:	4621      	mov	r1, r4
   86718:	4638      	mov	r0, r7
   8671a:	47c0      	blx	r8
   8671c:	ea49 0900 	orr.w	r9, r9, r0
   86720:	1c6b      	adds	r3, r5, #1
   86722:	f104 0468 	add.w	r4, r4, #104	; 0x68
   86726:	d1ee      	bne.n	86706 <_fwalk_reent+0x1a>
   86728:	6836      	ldr	r6, [r6, #0]
   8672a:	2e00      	cmp	r6, #0
   8672c:	d1e7      	bne.n	866fe <_fwalk_reent+0x12>
   8672e:	4648      	mov	r0, r9
   86730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86734:	46b1      	mov	r9, r6
   86736:	4648      	mov	r0, r9
   86738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008673c <_localeconv_r>:
   8673c:	4a04      	ldr	r2, [pc, #16]	; (86750 <_localeconv_r+0x14>)
   8673e:	4b05      	ldr	r3, [pc, #20]	; (86754 <_localeconv_r+0x18>)
   86740:	6812      	ldr	r2, [r2, #0]
   86742:	6b50      	ldr	r0, [r2, #52]	; 0x34
   86744:	2800      	cmp	r0, #0
   86746:	bf08      	it	eq
   86748:	4618      	moveq	r0, r3
   8674a:	30f0      	adds	r0, #240	; 0xf0
   8674c:	4770      	bx	lr
   8674e:	bf00      	nop
   86750:	20070278 	.word	0x20070278
   86754:	20070abc 	.word	0x20070abc

00086758 <__retarget_lock_init_recursive>:
   86758:	4770      	bx	lr
   8675a:	bf00      	nop

0008675c <__retarget_lock_close_recursive>:
   8675c:	4770      	bx	lr
   8675e:	bf00      	nop

00086760 <__retarget_lock_acquire_recursive>:
   86760:	4770      	bx	lr
   86762:	bf00      	nop

00086764 <__retarget_lock_release_recursive>:
   86764:	4770      	bx	lr
   86766:	bf00      	nop

00086768 <__swhatbuf_r>:
   86768:	b570      	push	{r4, r5, r6, lr}
   8676a:	460c      	mov	r4, r1
   8676c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86770:	b090      	sub	sp, #64	; 0x40
   86772:	2900      	cmp	r1, #0
   86774:	4615      	mov	r5, r2
   86776:	461e      	mov	r6, r3
   86778:	db14      	blt.n	867a4 <__swhatbuf_r+0x3c>
   8677a:	aa01      	add	r2, sp, #4
   8677c:	f001 f838 	bl	877f0 <_fstat_r>
   86780:	2800      	cmp	r0, #0
   86782:	db0f      	blt.n	867a4 <__swhatbuf_r+0x3c>
   86784:	9a02      	ldr	r2, [sp, #8]
   86786:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8678a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8678e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   86792:	fab2 f282 	clz	r2, r2
   86796:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8679a:	0952      	lsrs	r2, r2, #5
   8679c:	6032      	str	r2, [r6, #0]
   8679e:	602b      	str	r3, [r5, #0]
   867a0:	b010      	add	sp, #64	; 0x40
   867a2:	bd70      	pop	{r4, r5, r6, pc}
   867a4:	2300      	movs	r3, #0
   867a6:	89a2      	ldrh	r2, [r4, #12]
   867a8:	6033      	str	r3, [r6, #0]
   867aa:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   867ae:	d004      	beq.n	867ba <__swhatbuf_r+0x52>
   867b0:	2240      	movs	r2, #64	; 0x40
   867b2:	4618      	mov	r0, r3
   867b4:	602a      	str	r2, [r5, #0]
   867b6:	b010      	add	sp, #64	; 0x40
   867b8:	bd70      	pop	{r4, r5, r6, pc}
   867ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   867be:	602b      	str	r3, [r5, #0]
   867c0:	b010      	add	sp, #64	; 0x40
   867c2:	bd70      	pop	{r4, r5, r6, pc}

000867c4 <malloc>:
   867c4:	4b02      	ldr	r3, [pc, #8]	; (867d0 <malloc+0xc>)
   867c6:	4601      	mov	r1, r0
   867c8:	6818      	ldr	r0, [r3, #0]
   867ca:	f000 b803 	b.w	867d4 <_malloc_r>
   867ce:	bf00      	nop
   867d0:	20070278 	.word	0x20070278

000867d4 <_malloc_r>:
   867d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   867d8:	f101 060b 	add.w	r6, r1, #11
   867dc:	2e16      	cmp	r6, #22
   867de:	b083      	sub	sp, #12
   867e0:	4605      	mov	r5, r0
   867e2:	f240 809e 	bls.w	86922 <_malloc_r+0x14e>
   867e6:	f036 0607 	bics.w	r6, r6, #7
   867ea:	f100 80bd 	bmi.w	86968 <_malloc_r+0x194>
   867ee:	42b1      	cmp	r1, r6
   867f0:	f200 80ba 	bhi.w	86968 <_malloc_r+0x194>
   867f4:	f000 fad6 	bl	86da4 <__malloc_lock>
   867f8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   867fc:	f0c0 8285 	bcc.w	86d0a <_malloc_r+0x536>
   86800:	0a73      	lsrs	r3, r6, #9
   86802:	f000 80b8 	beq.w	86976 <_malloc_r+0x1a2>
   86806:	2b04      	cmp	r3, #4
   86808:	f200 816c 	bhi.w	86ae4 <_malloc_r+0x310>
   8680c:	09b3      	lsrs	r3, r6, #6
   8680e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   86812:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   86816:	00c1      	lsls	r1, r0, #3
   86818:	4fb8      	ldr	r7, [pc, #736]	; (86afc <_malloc_r+0x328>)
   8681a:	4439      	add	r1, r7
   8681c:	684c      	ldr	r4, [r1, #4]
   8681e:	3908      	subs	r1, #8
   86820:	42a1      	cmp	r1, r4
   86822:	d106      	bne.n	86832 <_malloc_r+0x5e>
   86824:	e00c      	b.n	86840 <_malloc_r+0x6c>
   86826:	2a00      	cmp	r2, #0
   86828:	f280 80ab 	bge.w	86982 <_malloc_r+0x1ae>
   8682c:	68e4      	ldr	r4, [r4, #12]
   8682e:	42a1      	cmp	r1, r4
   86830:	d006      	beq.n	86840 <_malloc_r+0x6c>
   86832:	6863      	ldr	r3, [r4, #4]
   86834:	f023 0303 	bic.w	r3, r3, #3
   86838:	1b9a      	subs	r2, r3, r6
   8683a:	2a0f      	cmp	r2, #15
   8683c:	ddf3      	ble.n	86826 <_malloc_r+0x52>
   8683e:	4670      	mov	r0, lr
   86840:	693c      	ldr	r4, [r7, #16]
   86842:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 86b10 <_malloc_r+0x33c>
   86846:	4574      	cmp	r4, lr
   86848:	f000 819e 	beq.w	86b88 <_malloc_r+0x3b4>
   8684c:	6863      	ldr	r3, [r4, #4]
   8684e:	f023 0303 	bic.w	r3, r3, #3
   86852:	1b9a      	subs	r2, r3, r6
   86854:	2a0f      	cmp	r2, #15
   86856:	f300 8183 	bgt.w	86b60 <_malloc_r+0x38c>
   8685a:	2a00      	cmp	r2, #0
   8685c:	f8c7 e014 	str.w	lr, [r7, #20]
   86860:	f8c7 e010 	str.w	lr, [r7, #16]
   86864:	f280 8091 	bge.w	8698a <_malloc_r+0x1b6>
   86868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8686c:	f080 8154 	bcs.w	86b18 <_malloc_r+0x344>
   86870:	2201      	movs	r2, #1
   86872:	08db      	lsrs	r3, r3, #3
   86874:	6879      	ldr	r1, [r7, #4]
   86876:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8687a:	4413      	add	r3, r2
   8687c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   86880:	fa02 f20c 	lsl.w	r2, r2, ip
   86884:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   86888:	430a      	orrs	r2, r1
   8688a:	f1ac 0108 	sub.w	r1, ip, #8
   8688e:	60e1      	str	r1, [r4, #12]
   86890:	f8c4 8008 	str.w	r8, [r4, #8]
   86894:	607a      	str	r2, [r7, #4]
   86896:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8689a:	f8c8 400c 	str.w	r4, [r8, #12]
   8689e:	2401      	movs	r4, #1
   868a0:	1083      	asrs	r3, r0, #2
   868a2:	409c      	lsls	r4, r3
   868a4:	4294      	cmp	r4, r2
   868a6:	d87d      	bhi.n	869a4 <_malloc_r+0x1d0>
   868a8:	4214      	tst	r4, r2
   868aa:	d106      	bne.n	868ba <_malloc_r+0xe6>
   868ac:	f020 0003 	bic.w	r0, r0, #3
   868b0:	0064      	lsls	r4, r4, #1
   868b2:	4214      	tst	r4, r2
   868b4:	f100 0004 	add.w	r0, r0, #4
   868b8:	d0fa      	beq.n	868b0 <_malloc_r+0xdc>
   868ba:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   868be:	46cc      	mov	ip, r9
   868c0:	4680      	mov	r8, r0
   868c2:	f8dc 300c 	ldr.w	r3, [ip, #12]
   868c6:	459c      	cmp	ip, r3
   868c8:	d107      	bne.n	868da <_malloc_r+0x106>
   868ca:	e15f      	b.n	86b8c <_malloc_r+0x3b8>
   868cc:	2a00      	cmp	r2, #0
   868ce:	f280 816d 	bge.w	86bac <_malloc_r+0x3d8>
   868d2:	68db      	ldr	r3, [r3, #12]
   868d4:	459c      	cmp	ip, r3
   868d6:	f000 8159 	beq.w	86b8c <_malloc_r+0x3b8>
   868da:	6859      	ldr	r1, [r3, #4]
   868dc:	f021 0103 	bic.w	r1, r1, #3
   868e0:	1b8a      	subs	r2, r1, r6
   868e2:	2a0f      	cmp	r2, #15
   868e4:	ddf2      	ble.n	868cc <_malloc_r+0xf8>
   868e6:	68dc      	ldr	r4, [r3, #12]
   868e8:	f8d3 c008 	ldr.w	ip, [r3, #8]
   868ec:	f046 0801 	orr.w	r8, r6, #1
   868f0:	4628      	mov	r0, r5
   868f2:	441e      	add	r6, r3
   868f4:	f042 0501 	orr.w	r5, r2, #1
   868f8:	f8c3 8004 	str.w	r8, [r3, #4]
   868fc:	f8cc 400c 	str.w	r4, [ip, #12]
   86900:	f8c4 c008 	str.w	ip, [r4, #8]
   86904:	617e      	str	r6, [r7, #20]
   86906:	613e      	str	r6, [r7, #16]
   86908:	f8c6 e00c 	str.w	lr, [r6, #12]
   8690c:	f8c6 e008 	str.w	lr, [r6, #8]
   86910:	6075      	str	r5, [r6, #4]
   86912:	505a      	str	r2, [r3, r1]
   86914:	9300      	str	r3, [sp, #0]
   86916:	f000 fa4b 	bl	86db0 <__malloc_unlock>
   8691a:	9b00      	ldr	r3, [sp, #0]
   8691c:	f103 0408 	add.w	r4, r3, #8
   86920:	e01e      	b.n	86960 <_malloc_r+0x18c>
   86922:	2910      	cmp	r1, #16
   86924:	d820      	bhi.n	86968 <_malloc_r+0x194>
   86926:	f000 fa3d 	bl	86da4 <__malloc_lock>
   8692a:	2610      	movs	r6, #16
   8692c:	2318      	movs	r3, #24
   8692e:	2002      	movs	r0, #2
   86930:	4f72      	ldr	r7, [pc, #456]	; (86afc <_malloc_r+0x328>)
   86932:	443b      	add	r3, r7
   86934:	685c      	ldr	r4, [r3, #4]
   86936:	f1a3 0208 	sub.w	r2, r3, #8
   8693a:	4294      	cmp	r4, r2
   8693c:	f000 812f 	beq.w	86b9e <_malloc_r+0x3ca>
   86940:	6863      	ldr	r3, [r4, #4]
   86942:	68e1      	ldr	r1, [r4, #12]
   86944:	f023 0303 	bic.w	r3, r3, #3
   86948:	4423      	add	r3, r4
   8694a:	685a      	ldr	r2, [r3, #4]
   8694c:	68a6      	ldr	r6, [r4, #8]
   8694e:	f042 0201 	orr.w	r2, r2, #1
   86952:	60f1      	str	r1, [r6, #12]
   86954:	4628      	mov	r0, r5
   86956:	608e      	str	r6, [r1, #8]
   86958:	605a      	str	r2, [r3, #4]
   8695a:	f000 fa29 	bl	86db0 <__malloc_unlock>
   8695e:	3408      	adds	r4, #8
   86960:	4620      	mov	r0, r4
   86962:	b003      	add	sp, #12
   86964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86968:	2400      	movs	r4, #0
   8696a:	230c      	movs	r3, #12
   8696c:	4620      	mov	r0, r4
   8696e:	602b      	str	r3, [r5, #0]
   86970:	b003      	add	sp, #12
   86972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86976:	2040      	movs	r0, #64	; 0x40
   86978:	f44f 7100 	mov.w	r1, #512	; 0x200
   8697c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   86980:	e74a      	b.n	86818 <_malloc_r+0x44>
   86982:	4423      	add	r3, r4
   86984:	685a      	ldr	r2, [r3, #4]
   86986:	68e1      	ldr	r1, [r4, #12]
   86988:	e7e0      	b.n	8694c <_malloc_r+0x178>
   8698a:	4423      	add	r3, r4
   8698c:	685a      	ldr	r2, [r3, #4]
   8698e:	4628      	mov	r0, r5
   86990:	f042 0201 	orr.w	r2, r2, #1
   86994:	605a      	str	r2, [r3, #4]
   86996:	3408      	adds	r4, #8
   86998:	f000 fa0a 	bl	86db0 <__malloc_unlock>
   8699c:	4620      	mov	r0, r4
   8699e:	b003      	add	sp, #12
   869a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   869a4:	68bc      	ldr	r4, [r7, #8]
   869a6:	6863      	ldr	r3, [r4, #4]
   869a8:	f023 0803 	bic.w	r8, r3, #3
   869ac:	45b0      	cmp	r8, r6
   869ae:	d304      	bcc.n	869ba <_malloc_r+0x1e6>
   869b0:	eba8 0306 	sub.w	r3, r8, r6
   869b4:	2b0f      	cmp	r3, #15
   869b6:	f300 8085 	bgt.w	86ac4 <_malloc_r+0x2f0>
   869ba:	f8df 9158 	ldr.w	r9, [pc, #344]	; 86b14 <_malloc_r+0x340>
   869be:	4b50      	ldr	r3, [pc, #320]	; (86b00 <_malloc_r+0x32c>)
   869c0:	f8d9 2000 	ldr.w	r2, [r9]
   869c4:	681b      	ldr	r3, [r3, #0]
   869c6:	3201      	adds	r2, #1
   869c8:	4433      	add	r3, r6
   869ca:	eb04 0a08 	add.w	sl, r4, r8
   869ce:	f000 8154 	beq.w	86c7a <_malloc_r+0x4a6>
   869d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   869d6:	330f      	adds	r3, #15
   869d8:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   869dc:	f02b 0b0f 	bic.w	fp, fp, #15
   869e0:	4659      	mov	r1, fp
   869e2:	4628      	mov	r0, r5
   869e4:	f000 fce6 	bl	873b4 <_sbrk_r>
   869e8:	1c41      	adds	r1, r0, #1
   869ea:	4602      	mov	r2, r0
   869ec:	f000 80fb 	beq.w	86be6 <_malloc_r+0x412>
   869f0:	4582      	cmp	sl, r0
   869f2:	f200 80f6 	bhi.w	86be2 <_malloc_r+0x40e>
   869f6:	4b43      	ldr	r3, [pc, #268]	; (86b04 <_malloc_r+0x330>)
   869f8:	6819      	ldr	r1, [r3, #0]
   869fa:	4459      	add	r1, fp
   869fc:	6019      	str	r1, [r3, #0]
   869fe:	f000 814c 	beq.w	86c9a <_malloc_r+0x4c6>
   86a02:	f8d9 0000 	ldr.w	r0, [r9]
   86a06:	3001      	adds	r0, #1
   86a08:	bf1b      	ittet	ne
   86a0a:	eba2 0a0a 	subne.w	sl, r2, sl
   86a0e:	4451      	addne	r1, sl
   86a10:	f8c9 2000 	streq.w	r2, [r9]
   86a14:	6019      	strne	r1, [r3, #0]
   86a16:	f012 0107 	ands.w	r1, r2, #7
   86a1a:	f000 8114 	beq.w	86c46 <_malloc_r+0x472>
   86a1e:	f1c1 0008 	rsb	r0, r1, #8
   86a22:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   86a26:	4402      	add	r2, r0
   86a28:	3108      	adds	r1, #8
   86a2a:	eb02 090b 	add.w	r9, r2, fp
   86a2e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   86a32:	eba1 0909 	sub.w	r9, r1, r9
   86a36:	4649      	mov	r1, r9
   86a38:	4628      	mov	r0, r5
   86a3a:	9301      	str	r3, [sp, #4]
   86a3c:	9200      	str	r2, [sp, #0]
   86a3e:	f000 fcb9 	bl	873b4 <_sbrk_r>
   86a42:	1c43      	adds	r3, r0, #1
   86a44:	e89d 000c 	ldmia.w	sp, {r2, r3}
   86a48:	f000 8142 	beq.w	86cd0 <_malloc_r+0x4fc>
   86a4c:	1a80      	subs	r0, r0, r2
   86a4e:	4448      	add	r0, r9
   86a50:	f040 0001 	orr.w	r0, r0, #1
   86a54:	6819      	ldr	r1, [r3, #0]
   86a56:	42bc      	cmp	r4, r7
   86a58:	4449      	add	r1, r9
   86a5a:	60ba      	str	r2, [r7, #8]
   86a5c:	6019      	str	r1, [r3, #0]
   86a5e:	6050      	str	r0, [r2, #4]
   86a60:	d017      	beq.n	86a92 <_malloc_r+0x2be>
   86a62:	f1b8 0f0f 	cmp.w	r8, #15
   86a66:	f240 80fa 	bls.w	86c5e <_malloc_r+0x48a>
   86a6a:	f04f 0c05 	mov.w	ip, #5
   86a6e:	6862      	ldr	r2, [r4, #4]
   86a70:	f1a8 000c 	sub.w	r0, r8, #12
   86a74:	f020 0007 	bic.w	r0, r0, #7
   86a78:	f002 0201 	and.w	r2, r2, #1
   86a7c:	eb04 0e00 	add.w	lr, r4, r0
   86a80:	4302      	orrs	r2, r0
   86a82:	280f      	cmp	r0, #15
   86a84:	6062      	str	r2, [r4, #4]
   86a86:	f8ce c004 	str.w	ip, [lr, #4]
   86a8a:	f8ce c008 	str.w	ip, [lr, #8]
   86a8e:	f200 8116 	bhi.w	86cbe <_malloc_r+0x4ea>
   86a92:	4b1d      	ldr	r3, [pc, #116]	; (86b08 <_malloc_r+0x334>)
   86a94:	68bc      	ldr	r4, [r7, #8]
   86a96:	681a      	ldr	r2, [r3, #0]
   86a98:	4291      	cmp	r1, r2
   86a9a:	bf88      	it	hi
   86a9c:	6019      	strhi	r1, [r3, #0]
   86a9e:	4b1b      	ldr	r3, [pc, #108]	; (86b0c <_malloc_r+0x338>)
   86aa0:	681a      	ldr	r2, [r3, #0]
   86aa2:	4291      	cmp	r1, r2
   86aa4:	6862      	ldr	r2, [r4, #4]
   86aa6:	bf88      	it	hi
   86aa8:	6019      	strhi	r1, [r3, #0]
   86aaa:	f022 0203 	bic.w	r2, r2, #3
   86aae:	4296      	cmp	r6, r2
   86ab0:	eba2 0306 	sub.w	r3, r2, r6
   86ab4:	d801      	bhi.n	86aba <_malloc_r+0x2e6>
   86ab6:	2b0f      	cmp	r3, #15
   86ab8:	dc04      	bgt.n	86ac4 <_malloc_r+0x2f0>
   86aba:	4628      	mov	r0, r5
   86abc:	f000 f978 	bl	86db0 <__malloc_unlock>
   86ac0:	2400      	movs	r4, #0
   86ac2:	e74d      	b.n	86960 <_malloc_r+0x18c>
   86ac4:	f046 0201 	orr.w	r2, r6, #1
   86ac8:	f043 0301 	orr.w	r3, r3, #1
   86acc:	4426      	add	r6, r4
   86ace:	6062      	str	r2, [r4, #4]
   86ad0:	4628      	mov	r0, r5
   86ad2:	60be      	str	r6, [r7, #8]
   86ad4:	3408      	adds	r4, #8
   86ad6:	6073      	str	r3, [r6, #4]
   86ad8:	f000 f96a 	bl	86db0 <__malloc_unlock>
   86adc:	4620      	mov	r0, r4
   86ade:	b003      	add	sp, #12
   86ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86ae4:	2b14      	cmp	r3, #20
   86ae6:	d970      	bls.n	86bca <_malloc_r+0x3f6>
   86ae8:	2b54      	cmp	r3, #84	; 0x54
   86aea:	f200 80a2 	bhi.w	86c32 <_malloc_r+0x45e>
   86aee:	0b33      	lsrs	r3, r6, #12
   86af0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   86af4:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   86af8:	00c1      	lsls	r1, r0, #3
   86afa:	e68d      	b.n	86818 <_malloc_r+0x44>
   86afc:	200706ac 	.word	0x200706ac
   86b00:	20070f98 	.word	0x20070f98
   86b04:	20070f68 	.word	0x20070f68
   86b08:	20070f90 	.word	0x20070f90
   86b0c:	20070f94 	.word	0x20070f94
   86b10:	200706b4 	.word	0x200706b4
   86b14:	20070ab4 	.word	0x20070ab4
   86b18:	0a5a      	lsrs	r2, r3, #9
   86b1a:	2a04      	cmp	r2, #4
   86b1c:	d95b      	bls.n	86bd6 <_malloc_r+0x402>
   86b1e:	2a14      	cmp	r2, #20
   86b20:	f200 80ae 	bhi.w	86c80 <_malloc_r+0x4ac>
   86b24:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   86b28:	00c9      	lsls	r1, r1, #3
   86b2a:	325b      	adds	r2, #91	; 0x5b
   86b2c:	eb07 0c01 	add.w	ip, r7, r1
   86b30:	5879      	ldr	r1, [r7, r1]
   86b32:	f1ac 0c08 	sub.w	ip, ip, #8
   86b36:	458c      	cmp	ip, r1
   86b38:	f000 8088 	beq.w	86c4c <_malloc_r+0x478>
   86b3c:	684a      	ldr	r2, [r1, #4]
   86b3e:	f022 0203 	bic.w	r2, r2, #3
   86b42:	4293      	cmp	r3, r2
   86b44:	d273      	bcs.n	86c2e <_malloc_r+0x45a>
   86b46:	6889      	ldr	r1, [r1, #8]
   86b48:	458c      	cmp	ip, r1
   86b4a:	d1f7      	bne.n	86b3c <_malloc_r+0x368>
   86b4c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   86b50:	687a      	ldr	r2, [r7, #4]
   86b52:	60e3      	str	r3, [r4, #12]
   86b54:	f8c4 c008 	str.w	ip, [r4, #8]
   86b58:	609c      	str	r4, [r3, #8]
   86b5a:	f8cc 400c 	str.w	r4, [ip, #12]
   86b5e:	e69e      	b.n	8689e <_malloc_r+0xca>
   86b60:	f046 0c01 	orr.w	ip, r6, #1
   86b64:	f042 0101 	orr.w	r1, r2, #1
   86b68:	4426      	add	r6, r4
   86b6a:	f8c4 c004 	str.w	ip, [r4, #4]
   86b6e:	4628      	mov	r0, r5
   86b70:	617e      	str	r6, [r7, #20]
   86b72:	613e      	str	r6, [r7, #16]
   86b74:	f8c6 e00c 	str.w	lr, [r6, #12]
   86b78:	f8c6 e008 	str.w	lr, [r6, #8]
   86b7c:	6071      	str	r1, [r6, #4]
   86b7e:	50e2      	str	r2, [r4, r3]
   86b80:	f000 f916 	bl	86db0 <__malloc_unlock>
   86b84:	3408      	adds	r4, #8
   86b86:	e6eb      	b.n	86960 <_malloc_r+0x18c>
   86b88:	687a      	ldr	r2, [r7, #4]
   86b8a:	e688      	b.n	8689e <_malloc_r+0xca>
   86b8c:	f108 0801 	add.w	r8, r8, #1
   86b90:	f018 0f03 	tst.w	r8, #3
   86b94:	f10c 0c08 	add.w	ip, ip, #8
   86b98:	f47f ae93 	bne.w	868c2 <_malloc_r+0xee>
   86b9c:	e02d      	b.n	86bfa <_malloc_r+0x426>
   86b9e:	68dc      	ldr	r4, [r3, #12]
   86ba0:	42a3      	cmp	r3, r4
   86ba2:	bf08      	it	eq
   86ba4:	3002      	addeq	r0, #2
   86ba6:	f43f ae4b 	beq.w	86840 <_malloc_r+0x6c>
   86baa:	e6c9      	b.n	86940 <_malloc_r+0x16c>
   86bac:	461c      	mov	r4, r3
   86bae:	4419      	add	r1, r3
   86bb0:	684a      	ldr	r2, [r1, #4]
   86bb2:	68db      	ldr	r3, [r3, #12]
   86bb4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   86bb8:	f042 0201 	orr.w	r2, r2, #1
   86bbc:	604a      	str	r2, [r1, #4]
   86bbe:	4628      	mov	r0, r5
   86bc0:	60f3      	str	r3, [r6, #12]
   86bc2:	609e      	str	r6, [r3, #8]
   86bc4:	f000 f8f4 	bl	86db0 <__malloc_unlock>
   86bc8:	e6ca      	b.n	86960 <_malloc_r+0x18c>
   86bca:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   86bce:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   86bd2:	00c1      	lsls	r1, r0, #3
   86bd4:	e620      	b.n	86818 <_malloc_r+0x44>
   86bd6:	099a      	lsrs	r2, r3, #6
   86bd8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   86bdc:	00c9      	lsls	r1, r1, #3
   86bde:	3238      	adds	r2, #56	; 0x38
   86be0:	e7a4      	b.n	86b2c <_malloc_r+0x358>
   86be2:	42bc      	cmp	r4, r7
   86be4:	d054      	beq.n	86c90 <_malloc_r+0x4bc>
   86be6:	68bc      	ldr	r4, [r7, #8]
   86be8:	6862      	ldr	r2, [r4, #4]
   86bea:	f022 0203 	bic.w	r2, r2, #3
   86bee:	e75e      	b.n	86aae <_malloc_r+0x2da>
   86bf0:	f859 3908 	ldr.w	r3, [r9], #-8
   86bf4:	4599      	cmp	r9, r3
   86bf6:	f040 8086 	bne.w	86d06 <_malloc_r+0x532>
   86bfa:	f010 0f03 	tst.w	r0, #3
   86bfe:	f100 30ff 	add.w	r0, r0, #4294967295
   86c02:	d1f5      	bne.n	86bf0 <_malloc_r+0x41c>
   86c04:	687b      	ldr	r3, [r7, #4]
   86c06:	ea23 0304 	bic.w	r3, r3, r4
   86c0a:	607b      	str	r3, [r7, #4]
   86c0c:	0064      	lsls	r4, r4, #1
   86c0e:	429c      	cmp	r4, r3
   86c10:	f63f aec8 	bhi.w	869a4 <_malloc_r+0x1d0>
   86c14:	2c00      	cmp	r4, #0
   86c16:	f43f aec5 	beq.w	869a4 <_malloc_r+0x1d0>
   86c1a:	421c      	tst	r4, r3
   86c1c:	4640      	mov	r0, r8
   86c1e:	f47f ae4c 	bne.w	868ba <_malloc_r+0xe6>
   86c22:	0064      	lsls	r4, r4, #1
   86c24:	421c      	tst	r4, r3
   86c26:	f100 0004 	add.w	r0, r0, #4
   86c2a:	d0fa      	beq.n	86c22 <_malloc_r+0x44e>
   86c2c:	e645      	b.n	868ba <_malloc_r+0xe6>
   86c2e:	468c      	mov	ip, r1
   86c30:	e78c      	b.n	86b4c <_malloc_r+0x378>
   86c32:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86c36:	d815      	bhi.n	86c64 <_malloc_r+0x490>
   86c38:	0bf3      	lsrs	r3, r6, #15
   86c3a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   86c3e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   86c42:	00c1      	lsls	r1, r0, #3
   86c44:	e5e8      	b.n	86818 <_malloc_r+0x44>
   86c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   86c4a:	e6ee      	b.n	86a2a <_malloc_r+0x256>
   86c4c:	2101      	movs	r1, #1
   86c4e:	687b      	ldr	r3, [r7, #4]
   86c50:	1092      	asrs	r2, r2, #2
   86c52:	fa01 f202 	lsl.w	r2, r1, r2
   86c56:	431a      	orrs	r2, r3
   86c58:	607a      	str	r2, [r7, #4]
   86c5a:	4663      	mov	r3, ip
   86c5c:	e779      	b.n	86b52 <_malloc_r+0x37e>
   86c5e:	2301      	movs	r3, #1
   86c60:	6053      	str	r3, [r2, #4]
   86c62:	e72a      	b.n	86aba <_malloc_r+0x2e6>
   86c64:	f240 5254 	movw	r2, #1364	; 0x554
   86c68:	4293      	cmp	r3, r2
   86c6a:	d822      	bhi.n	86cb2 <_malloc_r+0x4de>
   86c6c:	0cb3      	lsrs	r3, r6, #18
   86c6e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   86c72:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   86c76:	00c1      	lsls	r1, r0, #3
   86c78:	e5ce      	b.n	86818 <_malloc_r+0x44>
   86c7a:	f103 0b10 	add.w	fp, r3, #16
   86c7e:	e6af      	b.n	869e0 <_malloc_r+0x20c>
   86c80:	2a54      	cmp	r2, #84	; 0x54
   86c82:	d829      	bhi.n	86cd8 <_malloc_r+0x504>
   86c84:	0b1a      	lsrs	r2, r3, #12
   86c86:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   86c8a:	00c9      	lsls	r1, r1, #3
   86c8c:	326e      	adds	r2, #110	; 0x6e
   86c8e:	e74d      	b.n	86b2c <_malloc_r+0x358>
   86c90:	4b20      	ldr	r3, [pc, #128]	; (86d14 <_malloc_r+0x540>)
   86c92:	6819      	ldr	r1, [r3, #0]
   86c94:	4459      	add	r1, fp
   86c96:	6019      	str	r1, [r3, #0]
   86c98:	e6b3      	b.n	86a02 <_malloc_r+0x22e>
   86c9a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   86c9e:	2800      	cmp	r0, #0
   86ca0:	f47f aeaf 	bne.w	86a02 <_malloc_r+0x22e>
   86ca4:	eb08 030b 	add.w	r3, r8, fp
   86ca8:	68ba      	ldr	r2, [r7, #8]
   86caa:	f043 0301 	orr.w	r3, r3, #1
   86cae:	6053      	str	r3, [r2, #4]
   86cb0:	e6ef      	b.n	86a92 <_malloc_r+0x2be>
   86cb2:	207f      	movs	r0, #127	; 0x7f
   86cb4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86cb8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   86cbc:	e5ac      	b.n	86818 <_malloc_r+0x44>
   86cbe:	f104 0108 	add.w	r1, r4, #8
   86cc2:	4628      	mov	r0, r5
   86cc4:	9300      	str	r3, [sp, #0]
   86cc6:	f7ff fc2b 	bl	86520 <_free_r>
   86cca:	9b00      	ldr	r3, [sp, #0]
   86ccc:	6819      	ldr	r1, [r3, #0]
   86cce:	e6e0      	b.n	86a92 <_malloc_r+0x2be>
   86cd0:	2001      	movs	r0, #1
   86cd2:	f04f 0900 	mov.w	r9, #0
   86cd6:	e6bd      	b.n	86a54 <_malloc_r+0x280>
   86cd8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86cdc:	d805      	bhi.n	86cea <_malloc_r+0x516>
   86cde:	0bda      	lsrs	r2, r3, #15
   86ce0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   86ce4:	00c9      	lsls	r1, r1, #3
   86ce6:	3277      	adds	r2, #119	; 0x77
   86ce8:	e720      	b.n	86b2c <_malloc_r+0x358>
   86cea:	f240 5154 	movw	r1, #1364	; 0x554
   86cee:	428a      	cmp	r2, r1
   86cf0:	d805      	bhi.n	86cfe <_malloc_r+0x52a>
   86cf2:	0c9a      	lsrs	r2, r3, #18
   86cf4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   86cf8:	00c9      	lsls	r1, r1, #3
   86cfa:	327c      	adds	r2, #124	; 0x7c
   86cfc:	e716      	b.n	86b2c <_malloc_r+0x358>
   86cfe:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86d02:	227e      	movs	r2, #126	; 0x7e
   86d04:	e712      	b.n	86b2c <_malloc_r+0x358>
   86d06:	687b      	ldr	r3, [r7, #4]
   86d08:	e780      	b.n	86c0c <_malloc_r+0x438>
   86d0a:	08f0      	lsrs	r0, r6, #3
   86d0c:	f106 0308 	add.w	r3, r6, #8
   86d10:	e60e      	b.n	86930 <_malloc_r+0x15c>
   86d12:	bf00      	nop
   86d14:	20070f68 	.word	0x20070f68

00086d18 <memchr>:
   86d18:	0783      	lsls	r3, r0, #30
   86d1a:	b470      	push	{r4, r5, r6}
   86d1c:	b2cd      	uxtb	r5, r1
   86d1e:	d03d      	beq.n	86d9c <memchr+0x84>
   86d20:	1e54      	subs	r4, r2, #1
   86d22:	b30a      	cbz	r2, 86d68 <memchr+0x50>
   86d24:	7803      	ldrb	r3, [r0, #0]
   86d26:	42ab      	cmp	r3, r5
   86d28:	d01f      	beq.n	86d6a <memchr+0x52>
   86d2a:	1c43      	adds	r3, r0, #1
   86d2c:	e005      	b.n	86d3a <memchr+0x22>
   86d2e:	f114 34ff 	adds.w	r4, r4, #4294967295
   86d32:	d319      	bcc.n	86d68 <memchr+0x50>
   86d34:	7802      	ldrb	r2, [r0, #0]
   86d36:	42aa      	cmp	r2, r5
   86d38:	d017      	beq.n	86d6a <memchr+0x52>
   86d3a:	f013 0f03 	tst.w	r3, #3
   86d3e:	4618      	mov	r0, r3
   86d40:	f103 0301 	add.w	r3, r3, #1
   86d44:	d1f3      	bne.n	86d2e <memchr+0x16>
   86d46:	2c03      	cmp	r4, #3
   86d48:	d811      	bhi.n	86d6e <memchr+0x56>
   86d4a:	b34c      	cbz	r4, 86da0 <memchr+0x88>
   86d4c:	7803      	ldrb	r3, [r0, #0]
   86d4e:	42ab      	cmp	r3, r5
   86d50:	d00b      	beq.n	86d6a <memchr+0x52>
   86d52:	4404      	add	r4, r0
   86d54:	1c43      	adds	r3, r0, #1
   86d56:	e002      	b.n	86d5e <memchr+0x46>
   86d58:	7802      	ldrb	r2, [r0, #0]
   86d5a:	42aa      	cmp	r2, r5
   86d5c:	d005      	beq.n	86d6a <memchr+0x52>
   86d5e:	429c      	cmp	r4, r3
   86d60:	4618      	mov	r0, r3
   86d62:	f103 0301 	add.w	r3, r3, #1
   86d66:	d1f7      	bne.n	86d58 <memchr+0x40>
   86d68:	2000      	movs	r0, #0
   86d6a:	bc70      	pop	{r4, r5, r6}
   86d6c:	4770      	bx	lr
   86d6e:	0209      	lsls	r1, r1, #8
   86d70:	b289      	uxth	r1, r1
   86d72:	4329      	orrs	r1, r5
   86d74:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   86d78:	6803      	ldr	r3, [r0, #0]
   86d7a:	4606      	mov	r6, r0
   86d7c:	404b      	eors	r3, r1
   86d7e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   86d82:	ea22 0303 	bic.w	r3, r2, r3
   86d86:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   86d8a:	f100 0004 	add.w	r0, r0, #4
   86d8e:	d103      	bne.n	86d98 <memchr+0x80>
   86d90:	3c04      	subs	r4, #4
   86d92:	2c03      	cmp	r4, #3
   86d94:	d8f0      	bhi.n	86d78 <memchr+0x60>
   86d96:	e7d8      	b.n	86d4a <memchr+0x32>
   86d98:	4630      	mov	r0, r6
   86d9a:	e7d7      	b.n	86d4c <memchr+0x34>
   86d9c:	4614      	mov	r4, r2
   86d9e:	e7d2      	b.n	86d46 <memchr+0x2e>
   86da0:	4620      	mov	r0, r4
   86da2:	e7e2      	b.n	86d6a <memchr+0x52>

00086da4 <__malloc_lock>:
   86da4:	4801      	ldr	r0, [pc, #4]	; (86dac <__malloc_lock+0x8>)
   86da6:	f7ff bcdb 	b.w	86760 <__retarget_lock_acquire_recursive>
   86daa:	bf00      	nop
   86dac:	20070fd8 	.word	0x20070fd8

00086db0 <__malloc_unlock>:
   86db0:	4801      	ldr	r0, [pc, #4]	; (86db8 <__malloc_unlock+0x8>)
   86db2:	f7ff bcd7 	b.w	86764 <__retarget_lock_release_recursive>
   86db6:	bf00      	nop
   86db8:	20070fd8 	.word	0x20070fd8

00086dbc <_Balloc>:
   86dbc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86dbe:	b570      	push	{r4, r5, r6, lr}
   86dc0:	4605      	mov	r5, r0
   86dc2:	460c      	mov	r4, r1
   86dc4:	b14b      	cbz	r3, 86dda <_Balloc+0x1e>
   86dc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   86dca:	b180      	cbz	r0, 86dee <_Balloc+0x32>
   86dcc:	6802      	ldr	r2, [r0, #0]
   86dce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   86dd2:	2300      	movs	r3, #0
   86dd4:	6103      	str	r3, [r0, #16]
   86dd6:	60c3      	str	r3, [r0, #12]
   86dd8:	bd70      	pop	{r4, r5, r6, pc}
   86dda:	2221      	movs	r2, #33	; 0x21
   86ddc:	2104      	movs	r1, #4
   86dde:	f000 fc63 	bl	876a8 <_calloc_r>
   86de2:	64e8      	str	r0, [r5, #76]	; 0x4c
   86de4:	4603      	mov	r3, r0
   86de6:	2800      	cmp	r0, #0
   86de8:	d1ed      	bne.n	86dc6 <_Balloc+0xa>
   86dea:	2000      	movs	r0, #0
   86dec:	bd70      	pop	{r4, r5, r6, pc}
   86dee:	2101      	movs	r1, #1
   86df0:	fa01 f604 	lsl.w	r6, r1, r4
   86df4:	1d72      	adds	r2, r6, #5
   86df6:	4628      	mov	r0, r5
   86df8:	0092      	lsls	r2, r2, #2
   86dfa:	f000 fc55 	bl	876a8 <_calloc_r>
   86dfe:	2800      	cmp	r0, #0
   86e00:	d0f3      	beq.n	86dea <_Balloc+0x2e>
   86e02:	6044      	str	r4, [r0, #4]
   86e04:	6086      	str	r6, [r0, #8]
   86e06:	e7e4      	b.n	86dd2 <_Balloc+0x16>

00086e08 <_Bfree>:
   86e08:	b131      	cbz	r1, 86e18 <_Bfree+0x10>
   86e0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86e0c:	684a      	ldr	r2, [r1, #4]
   86e0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86e12:	6008      	str	r0, [r1, #0]
   86e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86e18:	4770      	bx	lr
   86e1a:	bf00      	nop

00086e1c <__multadd>:
   86e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   86e1e:	460c      	mov	r4, r1
   86e20:	4605      	mov	r5, r0
   86e22:	f04f 0e00 	mov.w	lr, #0
   86e26:	690e      	ldr	r6, [r1, #16]
   86e28:	b083      	sub	sp, #12
   86e2a:	f101 0714 	add.w	r7, r1, #20
   86e2e:	6838      	ldr	r0, [r7, #0]
   86e30:	f10e 0e01 	add.w	lr, lr, #1
   86e34:	b281      	uxth	r1, r0
   86e36:	fb02 3301 	mla	r3, r2, r1, r3
   86e3a:	0c01      	lsrs	r1, r0, #16
   86e3c:	0c18      	lsrs	r0, r3, #16
   86e3e:	fb02 0101 	mla	r1, r2, r1, r0
   86e42:	b29b      	uxth	r3, r3
   86e44:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   86e48:	4576      	cmp	r6, lr
   86e4a:	f847 3b04 	str.w	r3, [r7], #4
   86e4e:	ea4f 4311 	mov.w	r3, r1, lsr #16
   86e52:	dcec      	bgt.n	86e2e <__multadd+0x12>
   86e54:	b13b      	cbz	r3, 86e66 <__multadd+0x4a>
   86e56:	68a2      	ldr	r2, [r4, #8]
   86e58:	4296      	cmp	r6, r2
   86e5a:	da07      	bge.n	86e6c <__multadd+0x50>
   86e5c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   86e60:	3601      	adds	r6, #1
   86e62:	6153      	str	r3, [r2, #20]
   86e64:	6126      	str	r6, [r4, #16]
   86e66:	4620      	mov	r0, r4
   86e68:	b003      	add	sp, #12
   86e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86e6c:	6861      	ldr	r1, [r4, #4]
   86e6e:	4628      	mov	r0, r5
   86e70:	3101      	adds	r1, #1
   86e72:	9301      	str	r3, [sp, #4]
   86e74:	f7ff ffa2 	bl	86dbc <_Balloc>
   86e78:	4607      	mov	r7, r0
   86e7a:	6922      	ldr	r2, [r4, #16]
   86e7c:	f104 010c 	add.w	r1, r4, #12
   86e80:	3202      	adds	r2, #2
   86e82:	0092      	lsls	r2, r2, #2
   86e84:	300c      	adds	r0, #12
   86e86:	f7fc fdb1 	bl	839ec <memcpy>
   86e8a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   86e8c:	6861      	ldr	r1, [r4, #4]
   86e8e:	9b01      	ldr	r3, [sp, #4]
   86e90:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   86e94:	6020      	str	r0, [r4, #0]
   86e96:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   86e9a:	463c      	mov	r4, r7
   86e9c:	e7de      	b.n	86e5c <__multadd+0x40>
   86e9e:	bf00      	nop

00086ea0 <__hi0bits>:
   86ea0:	0c02      	lsrs	r2, r0, #16
   86ea2:	0412      	lsls	r2, r2, #16
   86ea4:	4603      	mov	r3, r0
   86ea6:	b9b2      	cbnz	r2, 86ed6 <__hi0bits+0x36>
   86ea8:	0403      	lsls	r3, r0, #16
   86eaa:	2010      	movs	r0, #16
   86eac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   86eb0:	bf04      	itt	eq
   86eb2:	021b      	lsleq	r3, r3, #8
   86eb4:	3008      	addeq	r0, #8
   86eb6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   86eba:	bf04      	itt	eq
   86ebc:	011b      	lsleq	r3, r3, #4
   86ebe:	3004      	addeq	r0, #4
   86ec0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   86ec4:	bf04      	itt	eq
   86ec6:	009b      	lsleq	r3, r3, #2
   86ec8:	3002      	addeq	r0, #2
   86eca:	2b00      	cmp	r3, #0
   86ecc:	db02      	blt.n	86ed4 <__hi0bits+0x34>
   86ece:	005b      	lsls	r3, r3, #1
   86ed0:	d403      	bmi.n	86eda <__hi0bits+0x3a>
   86ed2:	2020      	movs	r0, #32
   86ed4:	4770      	bx	lr
   86ed6:	2000      	movs	r0, #0
   86ed8:	e7e8      	b.n	86eac <__hi0bits+0xc>
   86eda:	3001      	adds	r0, #1
   86edc:	4770      	bx	lr
   86ede:	bf00      	nop

00086ee0 <__lo0bits>:
   86ee0:	6803      	ldr	r3, [r0, #0]
   86ee2:	4601      	mov	r1, r0
   86ee4:	f013 0207 	ands.w	r2, r3, #7
   86ee8:	d007      	beq.n	86efa <__lo0bits+0x1a>
   86eea:	07da      	lsls	r2, r3, #31
   86eec:	d421      	bmi.n	86f32 <__lo0bits+0x52>
   86eee:	0798      	lsls	r0, r3, #30
   86ef0:	d421      	bmi.n	86f36 <__lo0bits+0x56>
   86ef2:	089b      	lsrs	r3, r3, #2
   86ef4:	600b      	str	r3, [r1, #0]
   86ef6:	2002      	movs	r0, #2
   86ef8:	4770      	bx	lr
   86efa:	b298      	uxth	r0, r3
   86efc:	b198      	cbz	r0, 86f26 <__lo0bits+0x46>
   86efe:	4610      	mov	r0, r2
   86f00:	f013 0fff 	tst.w	r3, #255	; 0xff
   86f04:	bf04      	itt	eq
   86f06:	0a1b      	lsreq	r3, r3, #8
   86f08:	3008      	addeq	r0, #8
   86f0a:	071a      	lsls	r2, r3, #28
   86f0c:	bf04      	itt	eq
   86f0e:	091b      	lsreq	r3, r3, #4
   86f10:	3004      	addeq	r0, #4
   86f12:	079a      	lsls	r2, r3, #30
   86f14:	bf04      	itt	eq
   86f16:	089b      	lsreq	r3, r3, #2
   86f18:	3002      	addeq	r0, #2
   86f1a:	07da      	lsls	r2, r3, #31
   86f1c:	d407      	bmi.n	86f2e <__lo0bits+0x4e>
   86f1e:	085b      	lsrs	r3, r3, #1
   86f20:	d104      	bne.n	86f2c <__lo0bits+0x4c>
   86f22:	2020      	movs	r0, #32
   86f24:	4770      	bx	lr
   86f26:	0c1b      	lsrs	r3, r3, #16
   86f28:	2010      	movs	r0, #16
   86f2a:	e7e9      	b.n	86f00 <__lo0bits+0x20>
   86f2c:	3001      	adds	r0, #1
   86f2e:	600b      	str	r3, [r1, #0]
   86f30:	4770      	bx	lr
   86f32:	2000      	movs	r0, #0
   86f34:	4770      	bx	lr
   86f36:	085b      	lsrs	r3, r3, #1
   86f38:	600b      	str	r3, [r1, #0]
   86f3a:	2001      	movs	r0, #1
   86f3c:	4770      	bx	lr
   86f3e:	bf00      	nop

00086f40 <__i2b>:
   86f40:	b510      	push	{r4, lr}
   86f42:	460c      	mov	r4, r1
   86f44:	2101      	movs	r1, #1
   86f46:	f7ff ff39 	bl	86dbc <_Balloc>
   86f4a:	2201      	movs	r2, #1
   86f4c:	6144      	str	r4, [r0, #20]
   86f4e:	6102      	str	r2, [r0, #16]
   86f50:	bd10      	pop	{r4, pc}
   86f52:	bf00      	nop

00086f54 <__multiply>:
   86f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86f58:	690c      	ldr	r4, [r1, #16]
   86f5a:	6915      	ldr	r5, [r2, #16]
   86f5c:	b083      	sub	sp, #12
   86f5e:	42ac      	cmp	r4, r5
   86f60:	468b      	mov	fp, r1
   86f62:	4616      	mov	r6, r2
   86f64:	da04      	bge.n	86f70 <__multiply+0x1c>
   86f66:	4622      	mov	r2, r4
   86f68:	46b3      	mov	fp, r6
   86f6a:	462c      	mov	r4, r5
   86f6c:	460e      	mov	r6, r1
   86f6e:	4615      	mov	r5, r2
   86f70:	f8db 3008 	ldr.w	r3, [fp, #8]
   86f74:	eb04 0805 	add.w	r8, r4, r5
   86f78:	f8db 1004 	ldr.w	r1, [fp, #4]
   86f7c:	4598      	cmp	r8, r3
   86f7e:	bfc8      	it	gt
   86f80:	3101      	addgt	r1, #1
   86f82:	f7ff ff1b 	bl	86dbc <_Balloc>
   86f86:	f100 0914 	add.w	r9, r0, #20
   86f8a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   86f8e:	45d1      	cmp	r9, sl
   86f90:	9000      	str	r0, [sp, #0]
   86f92:	d205      	bcs.n	86fa0 <__multiply+0x4c>
   86f94:	464b      	mov	r3, r9
   86f96:	2100      	movs	r1, #0
   86f98:	f843 1b04 	str.w	r1, [r3], #4
   86f9c:	459a      	cmp	sl, r3
   86f9e:	d8fb      	bhi.n	86f98 <__multiply+0x44>
   86fa0:	f106 0c14 	add.w	ip, r6, #20
   86fa4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   86fa8:	f10b 0b14 	add.w	fp, fp, #20
   86fac:	459c      	cmp	ip, r3
   86fae:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   86fb2:	d24b      	bcs.n	8704c <__multiply+0xf8>
   86fb4:	f8cd a004 	str.w	sl, [sp, #4]
   86fb8:	469a      	mov	sl, r3
   86fba:	f8dc 5000 	ldr.w	r5, [ip]
   86fbe:	b2af      	uxth	r7, r5
   86fc0:	b1e7      	cbz	r7, 86ffc <__multiply+0xa8>
   86fc2:	464d      	mov	r5, r9
   86fc4:	465e      	mov	r6, fp
   86fc6:	2100      	movs	r1, #0
   86fc8:	f856 2b04 	ldr.w	r2, [r6], #4
   86fcc:	6828      	ldr	r0, [r5, #0]
   86fce:	b293      	uxth	r3, r2
   86fd0:	b284      	uxth	r4, r0
   86fd2:	0c12      	lsrs	r2, r2, #16
   86fd4:	fb07 4303 	mla	r3, r7, r3, r4
   86fd8:	0c00      	lsrs	r0, r0, #16
   86fda:	fb07 0202 	mla	r2, r7, r2, r0
   86fde:	440b      	add	r3, r1
   86fe0:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   86fe4:	b29b      	uxth	r3, r3
   86fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   86fea:	45b6      	cmp	lr, r6
   86fec:	f845 3b04 	str.w	r3, [r5], #4
   86ff0:	ea4f 4111 	mov.w	r1, r1, lsr #16
   86ff4:	d8e8      	bhi.n	86fc8 <__multiply+0x74>
   86ff6:	6029      	str	r1, [r5, #0]
   86ff8:	f8dc 5000 	ldr.w	r5, [ip]
   86ffc:	0c2d      	lsrs	r5, r5, #16
   86ffe:	d01d      	beq.n	8703c <__multiply+0xe8>
   87000:	f8d9 3000 	ldr.w	r3, [r9]
   87004:	4648      	mov	r0, r9
   87006:	461c      	mov	r4, r3
   87008:	4659      	mov	r1, fp
   8700a:	2200      	movs	r2, #0
   8700c:	880e      	ldrh	r6, [r1, #0]
   8700e:	0c24      	lsrs	r4, r4, #16
   87010:	fb05 4406 	mla	r4, r5, r6, r4
   87014:	b29b      	uxth	r3, r3
   87016:	4422      	add	r2, r4
   87018:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8701c:	f840 3b04 	str.w	r3, [r0], #4
   87020:	f851 3b04 	ldr.w	r3, [r1], #4
   87024:	6804      	ldr	r4, [r0, #0]
   87026:	0c1b      	lsrs	r3, r3, #16
   87028:	b2a6      	uxth	r6, r4
   8702a:	fb05 6303 	mla	r3, r5, r3, r6
   8702e:	458e      	cmp	lr, r1
   87030:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   87034:	ea4f 4213 	mov.w	r2, r3, lsr #16
   87038:	d8e8      	bhi.n	8700c <__multiply+0xb8>
   8703a:	6003      	str	r3, [r0, #0]
   8703c:	f10c 0c04 	add.w	ip, ip, #4
   87040:	45e2      	cmp	sl, ip
   87042:	f109 0904 	add.w	r9, r9, #4
   87046:	d8b8      	bhi.n	86fba <__multiply+0x66>
   87048:	f8dd a004 	ldr.w	sl, [sp, #4]
   8704c:	f1b8 0f00 	cmp.w	r8, #0
   87050:	dd0b      	ble.n	8706a <__multiply+0x116>
   87052:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   87056:	f1aa 0a04 	sub.w	sl, sl, #4
   8705a:	b11b      	cbz	r3, 87064 <__multiply+0x110>
   8705c:	e005      	b.n	8706a <__multiply+0x116>
   8705e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   87062:	b913      	cbnz	r3, 8706a <__multiply+0x116>
   87064:	f1b8 0801 	subs.w	r8, r8, #1
   87068:	d1f9      	bne.n	8705e <__multiply+0x10a>
   8706a:	9800      	ldr	r0, [sp, #0]
   8706c:	f8c0 8010 	str.w	r8, [r0, #16]
   87070:	b003      	add	sp, #12
   87072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87076:	bf00      	nop

00087078 <__pow5mult>:
   87078:	f012 0303 	ands.w	r3, r2, #3
   8707c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87080:	4614      	mov	r4, r2
   87082:	4607      	mov	r7, r0
   87084:	d12e      	bne.n	870e4 <__pow5mult+0x6c>
   87086:	460d      	mov	r5, r1
   87088:	10a4      	asrs	r4, r4, #2
   8708a:	d01c      	beq.n	870c6 <__pow5mult+0x4e>
   8708c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   8708e:	b396      	cbz	r6, 870f6 <__pow5mult+0x7e>
   87090:	07e3      	lsls	r3, r4, #31
   87092:	f04f 0800 	mov.w	r8, #0
   87096:	d406      	bmi.n	870a6 <__pow5mult+0x2e>
   87098:	1064      	asrs	r4, r4, #1
   8709a:	d014      	beq.n	870c6 <__pow5mult+0x4e>
   8709c:	6830      	ldr	r0, [r6, #0]
   8709e:	b1a8      	cbz	r0, 870cc <__pow5mult+0x54>
   870a0:	4606      	mov	r6, r0
   870a2:	07e3      	lsls	r3, r4, #31
   870a4:	d5f8      	bpl.n	87098 <__pow5mult+0x20>
   870a6:	4632      	mov	r2, r6
   870a8:	4629      	mov	r1, r5
   870aa:	4638      	mov	r0, r7
   870ac:	f7ff ff52 	bl	86f54 <__multiply>
   870b0:	b1b5      	cbz	r5, 870e0 <__pow5mult+0x68>
   870b2:	686a      	ldr	r2, [r5, #4]
   870b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   870b6:	1064      	asrs	r4, r4, #1
   870b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   870bc:	6029      	str	r1, [r5, #0]
   870be:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   870c2:	4605      	mov	r5, r0
   870c4:	d1ea      	bne.n	8709c <__pow5mult+0x24>
   870c6:	4628      	mov	r0, r5
   870c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   870cc:	4632      	mov	r2, r6
   870ce:	4631      	mov	r1, r6
   870d0:	4638      	mov	r0, r7
   870d2:	f7ff ff3f 	bl	86f54 <__multiply>
   870d6:	6030      	str	r0, [r6, #0]
   870d8:	f8c0 8000 	str.w	r8, [r0]
   870dc:	4606      	mov	r6, r0
   870de:	e7e0      	b.n	870a2 <__pow5mult+0x2a>
   870e0:	4605      	mov	r5, r0
   870e2:	e7d9      	b.n	87098 <__pow5mult+0x20>
   870e4:	4a0b      	ldr	r2, [pc, #44]	; (87114 <__pow5mult+0x9c>)
   870e6:	3b01      	subs	r3, #1
   870e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   870ec:	2300      	movs	r3, #0
   870ee:	f7ff fe95 	bl	86e1c <__multadd>
   870f2:	4605      	mov	r5, r0
   870f4:	e7c8      	b.n	87088 <__pow5mult+0x10>
   870f6:	2101      	movs	r1, #1
   870f8:	4638      	mov	r0, r7
   870fa:	f7ff fe5f 	bl	86dbc <_Balloc>
   870fe:	f240 2171 	movw	r1, #625	; 0x271
   87102:	2201      	movs	r2, #1
   87104:	2300      	movs	r3, #0
   87106:	6141      	str	r1, [r0, #20]
   87108:	6102      	str	r2, [r0, #16]
   8710a:	4606      	mov	r6, r0
   8710c:	64b8      	str	r0, [r7, #72]	; 0x48
   8710e:	6003      	str	r3, [r0, #0]
   87110:	e7be      	b.n	87090 <__pow5mult+0x18>
   87112:	bf00      	nop
   87114:	00088430 	.word	0x00088430

00087118 <__lshift>:
   87118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8711c:	690b      	ldr	r3, [r1, #16]
   8711e:	1154      	asrs	r4, r2, #5
   87120:	eb04 0803 	add.w	r8, r4, r3
   87124:	688b      	ldr	r3, [r1, #8]
   87126:	f108 0501 	add.w	r5, r8, #1
   8712a:	429d      	cmp	r5, r3
   8712c:	460e      	mov	r6, r1
   8712e:	4691      	mov	r9, r2
   87130:	4607      	mov	r7, r0
   87132:	6849      	ldr	r1, [r1, #4]
   87134:	dd04      	ble.n	87140 <__lshift+0x28>
   87136:	005b      	lsls	r3, r3, #1
   87138:	429d      	cmp	r5, r3
   8713a:	f101 0101 	add.w	r1, r1, #1
   8713e:	dcfa      	bgt.n	87136 <__lshift+0x1e>
   87140:	4638      	mov	r0, r7
   87142:	f7ff fe3b 	bl	86dbc <_Balloc>
   87146:	2c00      	cmp	r4, #0
   87148:	f100 0314 	add.w	r3, r0, #20
   8714c:	dd06      	ble.n	8715c <__lshift+0x44>
   8714e:	2100      	movs	r1, #0
   87150:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   87154:	f843 1b04 	str.w	r1, [r3], #4
   87158:	429a      	cmp	r2, r3
   8715a:	d1fb      	bne.n	87154 <__lshift+0x3c>
   8715c:	6934      	ldr	r4, [r6, #16]
   8715e:	f106 0114 	add.w	r1, r6, #20
   87162:	f019 091f 	ands.w	r9, r9, #31
   87166:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8716a:	d01d      	beq.n	871a8 <__lshift+0x90>
   8716c:	2200      	movs	r2, #0
   8716e:	f1c9 0c20 	rsb	ip, r9, #32
   87172:	680c      	ldr	r4, [r1, #0]
   87174:	fa04 f409 	lsl.w	r4, r4, r9
   87178:	4314      	orrs	r4, r2
   8717a:	f843 4b04 	str.w	r4, [r3], #4
   8717e:	f851 2b04 	ldr.w	r2, [r1], #4
   87182:	458e      	cmp	lr, r1
   87184:	fa22 f20c 	lsr.w	r2, r2, ip
   87188:	d8f3      	bhi.n	87172 <__lshift+0x5a>
   8718a:	601a      	str	r2, [r3, #0]
   8718c:	b10a      	cbz	r2, 87192 <__lshift+0x7a>
   8718e:	f108 0502 	add.w	r5, r8, #2
   87192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   87194:	6872      	ldr	r2, [r6, #4]
   87196:	3d01      	subs	r5, #1
   87198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8719c:	6105      	str	r5, [r0, #16]
   8719e:	6031      	str	r1, [r6, #0]
   871a0:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   871a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   871a8:	3b04      	subs	r3, #4
   871aa:	f851 2b04 	ldr.w	r2, [r1], #4
   871ae:	458e      	cmp	lr, r1
   871b0:	f843 2f04 	str.w	r2, [r3, #4]!
   871b4:	d8f9      	bhi.n	871aa <__lshift+0x92>
   871b6:	e7ec      	b.n	87192 <__lshift+0x7a>

000871b8 <__mcmp>:
   871b8:	b430      	push	{r4, r5}
   871ba:	690b      	ldr	r3, [r1, #16]
   871bc:	4605      	mov	r5, r0
   871be:	6900      	ldr	r0, [r0, #16]
   871c0:	1ac0      	subs	r0, r0, r3
   871c2:	d10f      	bne.n	871e4 <__mcmp+0x2c>
   871c4:	009b      	lsls	r3, r3, #2
   871c6:	3514      	adds	r5, #20
   871c8:	3114      	adds	r1, #20
   871ca:	4419      	add	r1, r3
   871cc:	442b      	add	r3, r5
   871ce:	e001      	b.n	871d4 <__mcmp+0x1c>
   871d0:	429d      	cmp	r5, r3
   871d2:	d207      	bcs.n	871e4 <__mcmp+0x2c>
   871d4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   871d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   871dc:	4294      	cmp	r4, r2
   871de:	d0f7      	beq.n	871d0 <__mcmp+0x18>
   871e0:	d302      	bcc.n	871e8 <__mcmp+0x30>
   871e2:	2001      	movs	r0, #1
   871e4:	bc30      	pop	{r4, r5}
   871e6:	4770      	bx	lr
   871e8:	f04f 30ff 	mov.w	r0, #4294967295
   871ec:	e7fa      	b.n	871e4 <__mcmp+0x2c>
   871ee:	bf00      	nop

000871f0 <__mdiff>:
   871f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   871f4:	690c      	ldr	r4, [r1, #16]
   871f6:	4689      	mov	r9, r1
   871f8:	6911      	ldr	r1, [r2, #16]
   871fa:	4692      	mov	sl, r2
   871fc:	1a64      	subs	r4, r4, r1
   871fe:	2c00      	cmp	r4, #0
   87200:	d117      	bne.n	87232 <__mdiff+0x42>
   87202:	0089      	lsls	r1, r1, #2
   87204:	f109 0714 	add.w	r7, r9, #20
   87208:	f102 0614 	add.w	r6, r2, #20
   8720c:	187b      	adds	r3, r7, r1
   8720e:	4431      	add	r1, r6
   87210:	e001      	b.n	87216 <__mdiff+0x26>
   87212:	429f      	cmp	r7, r3
   87214:	d265      	bcs.n	872e2 <__mdiff+0xf2>
   87216:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8721a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8721e:	4295      	cmp	r5, r2
   87220:	d0f7      	beq.n	87212 <__mdiff+0x22>
   87222:	d267      	bcs.n	872f4 <__mdiff+0x104>
   87224:	464b      	mov	r3, r9
   87226:	46bb      	mov	fp, r7
   87228:	46d1      	mov	r9, sl
   8722a:	4637      	mov	r7, r6
   8722c:	469a      	mov	sl, r3
   8722e:	2401      	movs	r4, #1
   87230:	e005      	b.n	8723e <__mdiff+0x4e>
   87232:	db61      	blt.n	872f8 <__mdiff+0x108>
   87234:	2400      	movs	r4, #0
   87236:	f109 0714 	add.w	r7, r9, #20
   8723a:	f10a 0b14 	add.w	fp, sl, #20
   8723e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   87242:	f7ff fdbb 	bl	86dbc <_Balloc>
   87246:	465d      	mov	r5, fp
   87248:	f04f 0800 	mov.w	r8, #0
   8724c:	f8d9 e010 	ldr.w	lr, [r9, #16]
   87250:	f8da 3010 	ldr.w	r3, [sl, #16]
   87254:	463e      	mov	r6, r7
   87256:	60c4      	str	r4, [r0, #12]
   87258:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8725c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   87260:	f100 0414 	add.w	r4, r0, #20
   87264:	f856 9b04 	ldr.w	r9, [r6], #4
   87268:	f855 2b04 	ldr.w	r2, [r5], #4
   8726c:	fa1f f389 	uxth.w	r3, r9
   87270:	4443      	add	r3, r8
   87272:	fa1f f882 	uxth.w	r8, r2
   87276:	0c12      	lsrs	r2, r2, #16
   87278:	eba3 0308 	sub.w	r3, r3, r8
   8727c:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   87280:	eb02 4223 	add.w	r2, r2, r3, asr #16
   87284:	b29b      	uxth	r3, r3
   87286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8728a:	45ac      	cmp	ip, r5
   8728c:	f844 3b04 	str.w	r3, [r4], #4
   87290:	ea4f 4822 	mov.w	r8, r2, asr #16
   87294:	d8e6      	bhi.n	87264 <__mdiff+0x74>
   87296:	42b7      	cmp	r7, r6
   87298:	d917      	bls.n	872ca <__mdiff+0xda>
   8729a:	46a4      	mov	ip, r4
   8729c:	4635      	mov	r5, r6
   8729e:	f855 3b04 	ldr.w	r3, [r5], #4
   872a2:	b299      	uxth	r1, r3
   872a4:	4441      	add	r1, r8
   872a6:	140a      	asrs	r2, r1, #16
   872a8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   872ac:	b289      	uxth	r1, r1
   872ae:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   872b2:	42af      	cmp	r7, r5
   872b4:	f84c 3b04 	str.w	r3, [ip], #4
   872b8:	ea4f 4822 	mov.w	r8, r2, asr #16
   872bc:	d8ef      	bhi.n	8729e <__mdiff+0xae>
   872be:	43f6      	mvns	r6, r6
   872c0:	4437      	add	r7, r6
   872c2:	f027 0703 	bic.w	r7, r7, #3
   872c6:	3704      	adds	r7, #4
   872c8:	443c      	add	r4, r7
   872ca:	3c04      	subs	r4, #4
   872cc:	b92b      	cbnz	r3, 872da <__mdiff+0xea>
   872ce:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   872d2:	f10e 3eff 	add.w	lr, lr, #4294967295
   872d6:	2b00      	cmp	r3, #0
   872d8:	d0f9      	beq.n	872ce <__mdiff+0xde>
   872da:	f8c0 e010 	str.w	lr, [r0, #16]
   872de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   872e2:	2100      	movs	r1, #0
   872e4:	f7ff fd6a 	bl	86dbc <_Balloc>
   872e8:	2201      	movs	r2, #1
   872ea:	2300      	movs	r3, #0
   872ec:	6102      	str	r2, [r0, #16]
   872ee:	6143      	str	r3, [r0, #20]
   872f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   872f4:	46b3      	mov	fp, r6
   872f6:	e7a2      	b.n	8723e <__mdiff+0x4e>
   872f8:	464b      	mov	r3, r9
   872fa:	f109 0b14 	add.w	fp, r9, #20
   872fe:	f102 0714 	add.w	r7, r2, #20
   87302:	4691      	mov	r9, r2
   87304:	2401      	movs	r4, #1
   87306:	469a      	mov	sl, r3
   87308:	e799      	b.n	8723e <__mdiff+0x4e>
   8730a:	bf00      	nop

0008730c <__d2b>:
   8730c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8730e:	2101      	movs	r1, #1
   87310:	b083      	sub	sp, #12
   87312:	461c      	mov	r4, r3
   87314:	f3c3 550a 	ubfx	r5, r3, #20, #11
   87318:	4616      	mov	r6, r2
   8731a:	f7ff fd4f 	bl	86dbc <_Balloc>
   8731e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   87322:	4607      	mov	r7, r0
   87324:	b10d      	cbz	r5, 8732a <__d2b+0x1e>
   87326:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8732a:	9401      	str	r4, [sp, #4]
   8732c:	b306      	cbz	r6, 87370 <__d2b+0x64>
   8732e:	a802      	add	r0, sp, #8
   87330:	f840 6d08 	str.w	r6, [r0, #-8]!
   87334:	f7ff fdd4 	bl	86ee0 <__lo0bits>
   87338:	2800      	cmp	r0, #0
   8733a:	d130      	bne.n	8739e <__d2b+0x92>
   8733c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87340:	617a      	str	r2, [r7, #20]
   87342:	2b00      	cmp	r3, #0
   87344:	bf0c      	ite	eq
   87346:	2101      	moveq	r1, #1
   87348:	2102      	movne	r1, #2
   8734a:	61bb      	str	r3, [r7, #24]
   8734c:	6139      	str	r1, [r7, #16]
   8734e:	b9d5      	cbnz	r5, 87386 <__d2b+0x7a>
   87350:	9a08      	ldr	r2, [sp, #32]
   87352:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   87356:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8735a:	6010      	str	r0, [r2, #0]
   8735c:	6918      	ldr	r0, [r3, #16]
   8735e:	f7ff fd9f 	bl	86ea0 <__hi0bits>
   87362:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87364:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   87368:	6018      	str	r0, [r3, #0]
   8736a:	4638      	mov	r0, r7
   8736c:	b003      	add	sp, #12
   8736e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87370:	a801      	add	r0, sp, #4
   87372:	f7ff fdb5 	bl	86ee0 <__lo0bits>
   87376:	2201      	movs	r2, #1
   87378:	9b01      	ldr	r3, [sp, #4]
   8737a:	4611      	mov	r1, r2
   8737c:	3020      	adds	r0, #32
   8737e:	613a      	str	r2, [r7, #16]
   87380:	617b      	str	r3, [r7, #20]
   87382:	2d00      	cmp	r5, #0
   87384:	d0e4      	beq.n	87350 <__d2b+0x44>
   87386:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8738a:	9a08      	ldr	r2, [sp, #32]
   8738c:	4403      	add	r3, r0
   8738e:	6013      	str	r3, [r2, #0]
   87390:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87392:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   87396:	6018      	str	r0, [r3, #0]
   87398:	4638      	mov	r0, r7
   8739a:	b003      	add	sp, #12
   8739c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8739e:	9b01      	ldr	r3, [sp, #4]
   873a0:	f1c0 0220 	rsb	r2, r0, #32
   873a4:	9900      	ldr	r1, [sp, #0]
   873a6:	fa03 f202 	lsl.w	r2, r3, r2
   873aa:	430a      	orrs	r2, r1
   873ac:	40c3      	lsrs	r3, r0
   873ae:	9301      	str	r3, [sp, #4]
   873b0:	617a      	str	r2, [r7, #20]
   873b2:	e7c6      	b.n	87342 <__d2b+0x36>

000873b4 <_sbrk_r>:
   873b4:	b538      	push	{r3, r4, r5, lr}
   873b6:	2300      	movs	r3, #0
   873b8:	4c06      	ldr	r4, [pc, #24]	; (873d4 <_sbrk_r+0x20>)
   873ba:	4605      	mov	r5, r0
   873bc:	4608      	mov	r0, r1
   873be:	6023      	str	r3, [r4, #0]
   873c0:	f7fb fee8 	bl	83194 <_sbrk>
   873c4:	1c43      	adds	r3, r0, #1
   873c6:	d000      	beq.n	873ca <_sbrk_r+0x16>
   873c8:	bd38      	pop	{r3, r4, r5, pc}
   873ca:	6823      	ldr	r3, [r4, #0]
   873cc:	2b00      	cmp	r3, #0
   873ce:	d0fb      	beq.n	873c8 <_sbrk_r+0x14>
   873d0:	602b      	str	r3, [r5, #0]
   873d2:	bd38      	pop	{r3, r4, r5, pc}
   873d4:	20070fec 	.word	0x20070fec

000873d8 <__sread>:
   873d8:	b510      	push	{r4, lr}
   873da:	460c      	mov	r4, r1
   873dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   873e0:	f000 faaa 	bl	87938 <_read_r>
   873e4:	2800      	cmp	r0, #0
   873e6:	db03      	blt.n	873f0 <__sread+0x18>
   873e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   873ea:	4403      	add	r3, r0
   873ec:	6523      	str	r3, [r4, #80]	; 0x50
   873ee:	bd10      	pop	{r4, pc}
   873f0:	89a3      	ldrh	r3, [r4, #12]
   873f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   873f6:	81a3      	strh	r3, [r4, #12]
   873f8:	bd10      	pop	{r4, pc}
   873fa:	bf00      	nop

000873fc <__swrite>:
   873fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87400:	460c      	mov	r4, r1
   87402:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   87406:	461f      	mov	r7, r3
   87408:	05cb      	lsls	r3, r1, #23
   8740a:	4616      	mov	r6, r2
   8740c:	4605      	mov	r5, r0
   8740e:	d507      	bpl.n	87420 <__swrite+0x24>
   87410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   87414:	2302      	movs	r3, #2
   87416:	2200      	movs	r2, #0
   87418:	f000 f9fe 	bl	87818 <_lseek_r>
   8741c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   87420:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   87424:	81a1      	strh	r1, [r4, #12]
   87426:	463b      	mov	r3, r7
   87428:	4632      	mov	r2, r6
   8742a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8742e:	4628      	mov	r0, r5
   87430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87434:	f000 b8c0 	b.w	875b8 <_write_r>

00087438 <__sseek>:
   87438:	b510      	push	{r4, lr}
   8743a:	460c      	mov	r4, r1
   8743c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87440:	f000 f9ea 	bl	87818 <_lseek_r>
   87444:	89a3      	ldrh	r3, [r4, #12]
   87446:	1c42      	adds	r2, r0, #1
   87448:	bf0e      	itee	eq
   8744a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8744e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   87452:	6520      	strne	r0, [r4, #80]	; 0x50
   87454:	81a3      	strh	r3, [r4, #12]
   87456:	bd10      	pop	{r4, pc}

00087458 <__sclose>:
   87458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8745c:	f000 b954 	b.w	87708 <_close_r>

00087460 <strlen>:
   87460:	f020 0103 	bic.w	r1, r0, #3
   87464:	f010 0003 	ands.w	r0, r0, #3
   87468:	f1c0 0000 	rsb	r0, r0, #0
   8746c:	f851 3b04 	ldr.w	r3, [r1], #4
   87470:	f100 0c04 	add.w	ip, r0, #4
   87474:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   87478:	f06f 0200 	mvn.w	r2, #0
   8747c:	bf1c      	itt	ne
   8747e:	fa22 f20c 	lsrne.w	r2, r2, ip
   87482:	4313      	orrne	r3, r2
   87484:	f04f 0c01 	mov.w	ip, #1
   87488:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8748c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   87490:	eba3 020c 	sub.w	r2, r3, ip
   87494:	ea22 0203 	bic.w	r2, r2, r3
   87498:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8749c:	bf04      	itt	eq
   8749e:	f851 3b04 	ldreq.w	r3, [r1], #4
   874a2:	3004      	addeq	r0, #4
   874a4:	d0f4      	beq.n	87490 <strlen+0x30>
   874a6:	f1c2 0100 	rsb	r1, r2, #0
   874aa:	ea02 0201 	and.w	r2, r2, r1
   874ae:	fab2 f282 	clz	r2, r2
   874b2:	f1c2 021f 	rsb	r2, r2, #31
   874b6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   874ba:	4770      	bx	lr

000874bc <__ssprint_r>:
   874bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   874c0:	6893      	ldr	r3, [r2, #8]
   874c2:	b083      	sub	sp, #12
   874c4:	4690      	mov	r8, r2
   874c6:	2b00      	cmp	r3, #0
   874c8:	d070      	beq.n	875ac <__ssprint_r+0xf0>
   874ca:	4682      	mov	sl, r0
   874cc:	460c      	mov	r4, r1
   874ce:	6817      	ldr	r7, [r2, #0]
   874d0:	688d      	ldr	r5, [r1, #8]
   874d2:	6808      	ldr	r0, [r1, #0]
   874d4:	e042      	b.n	8755c <__ssprint_r+0xa0>
   874d6:	89a3      	ldrh	r3, [r4, #12]
   874d8:	f413 6f90 	tst.w	r3, #1152	; 0x480
   874dc:	d02e      	beq.n	8753c <__ssprint_r+0x80>
   874de:	6965      	ldr	r5, [r4, #20]
   874e0:	6921      	ldr	r1, [r4, #16]
   874e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   874e6:	eba0 0b01 	sub.w	fp, r0, r1
   874ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   874ee:	f10b 0001 	add.w	r0, fp, #1
   874f2:	106d      	asrs	r5, r5, #1
   874f4:	4430      	add	r0, r6
   874f6:	42a8      	cmp	r0, r5
   874f8:	462a      	mov	r2, r5
   874fa:	bf84      	itt	hi
   874fc:	4605      	movhi	r5, r0
   874fe:	462a      	movhi	r2, r5
   87500:	055b      	lsls	r3, r3, #21
   87502:	d538      	bpl.n	87576 <__ssprint_r+0xba>
   87504:	4611      	mov	r1, r2
   87506:	4650      	mov	r0, sl
   87508:	f7ff f964 	bl	867d4 <_malloc_r>
   8750c:	2800      	cmp	r0, #0
   8750e:	d03c      	beq.n	8758a <__ssprint_r+0xce>
   87510:	465a      	mov	r2, fp
   87512:	6921      	ldr	r1, [r4, #16]
   87514:	9001      	str	r0, [sp, #4]
   87516:	f7fc fa69 	bl	839ec <memcpy>
   8751a:	89a2      	ldrh	r2, [r4, #12]
   8751c:	9b01      	ldr	r3, [sp, #4]
   8751e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   87522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   87526:	81a2      	strh	r2, [r4, #12]
   87528:	eba5 020b 	sub.w	r2, r5, fp
   8752c:	eb03 000b 	add.w	r0, r3, fp
   87530:	6165      	str	r5, [r4, #20]
   87532:	46b3      	mov	fp, r6
   87534:	4635      	mov	r5, r6
   87536:	6123      	str	r3, [r4, #16]
   87538:	6020      	str	r0, [r4, #0]
   8753a:	60a2      	str	r2, [r4, #8]
   8753c:	465a      	mov	r2, fp
   8753e:	4649      	mov	r1, r9
   87540:	f000 f996 	bl	87870 <memmove>
   87544:	f8d8 3008 	ldr.w	r3, [r8, #8]
   87548:	68a2      	ldr	r2, [r4, #8]
   8754a:	6820      	ldr	r0, [r4, #0]
   8754c:	1b55      	subs	r5, r2, r5
   8754e:	4458      	add	r0, fp
   87550:	1b9e      	subs	r6, r3, r6
   87552:	60a5      	str	r5, [r4, #8]
   87554:	6020      	str	r0, [r4, #0]
   87556:	f8c8 6008 	str.w	r6, [r8, #8]
   8755a:	b33e      	cbz	r6, 875ac <__ssprint_r+0xf0>
   8755c:	687e      	ldr	r6, [r7, #4]
   8755e:	463b      	mov	r3, r7
   87560:	3708      	adds	r7, #8
   87562:	2e00      	cmp	r6, #0
   87564:	d0fa      	beq.n	8755c <__ssprint_r+0xa0>
   87566:	42ae      	cmp	r6, r5
   87568:	f8d3 9000 	ldr.w	r9, [r3]
   8756c:	46ab      	mov	fp, r5
   8756e:	d2b2      	bcs.n	874d6 <__ssprint_r+0x1a>
   87570:	4635      	mov	r5, r6
   87572:	46b3      	mov	fp, r6
   87574:	e7e2      	b.n	8753c <__ssprint_r+0x80>
   87576:	4650      	mov	r0, sl
   87578:	f000 f9f4 	bl	87964 <_realloc_r>
   8757c:	4603      	mov	r3, r0
   8757e:	2800      	cmp	r0, #0
   87580:	d1d2      	bne.n	87528 <__ssprint_r+0x6c>
   87582:	6921      	ldr	r1, [r4, #16]
   87584:	4650      	mov	r0, sl
   87586:	f7fe ffcb 	bl	86520 <_free_r>
   8758a:	230c      	movs	r3, #12
   8758c:	2200      	movs	r2, #0
   8758e:	f04f 30ff 	mov.w	r0, #4294967295
   87592:	f8ca 3000 	str.w	r3, [sl]
   87596:	89a3      	ldrh	r3, [r4, #12]
   87598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8759c:	81a3      	strh	r3, [r4, #12]
   8759e:	f8c8 2008 	str.w	r2, [r8, #8]
   875a2:	f8c8 2004 	str.w	r2, [r8, #4]
   875a6:	b003      	add	sp, #12
   875a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   875ac:	2000      	movs	r0, #0
   875ae:	f8c8 0004 	str.w	r0, [r8, #4]
   875b2:	b003      	add	sp, #12
   875b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000875b8 <_write_r>:
   875b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   875ba:	460e      	mov	r6, r1
   875bc:	2500      	movs	r5, #0
   875be:	4c08      	ldr	r4, [pc, #32]	; (875e0 <_write_r+0x28>)
   875c0:	4611      	mov	r1, r2
   875c2:	4607      	mov	r7, r0
   875c4:	461a      	mov	r2, r3
   875c6:	4630      	mov	r0, r6
   875c8:	6025      	str	r5, [r4, #0]
   875ca:	f7fb f8e5 	bl	82798 <_write>
   875ce:	1c43      	adds	r3, r0, #1
   875d0:	d000      	beq.n	875d4 <_write_r+0x1c>
   875d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   875d4:	6823      	ldr	r3, [r4, #0]
   875d6:	2b00      	cmp	r3, #0
   875d8:	d0fb      	beq.n	875d2 <_write_r+0x1a>
   875da:	603b      	str	r3, [r7, #0]
   875dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   875de:	bf00      	nop
   875e0:	20070fec 	.word	0x20070fec

000875e4 <__register_exitproc>:
   875e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   875e8:	4d2c      	ldr	r5, [pc, #176]	; (8769c <__register_exitproc+0xb8>)
   875ea:	4606      	mov	r6, r0
   875ec:	6828      	ldr	r0, [r5, #0]
   875ee:	4698      	mov	r8, r3
   875f0:	460f      	mov	r7, r1
   875f2:	4691      	mov	r9, r2
   875f4:	f7ff f8b4 	bl	86760 <__retarget_lock_acquire_recursive>
   875f8:	4b29      	ldr	r3, [pc, #164]	; (876a0 <__register_exitproc+0xbc>)
   875fa:	681c      	ldr	r4, [r3, #0]
   875fc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   87600:	2b00      	cmp	r3, #0
   87602:	d03e      	beq.n	87682 <__register_exitproc+0x9e>
   87604:	685a      	ldr	r2, [r3, #4]
   87606:	2a1f      	cmp	r2, #31
   87608:	dc1c      	bgt.n	87644 <__register_exitproc+0x60>
   8760a:	f102 0e01 	add.w	lr, r2, #1
   8760e:	b176      	cbz	r6, 8762e <__register_exitproc+0x4a>
   87610:	2101      	movs	r1, #1
   87612:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   87616:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8761a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8761e:	4091      	lsls	r1, r2
   87620:	4308      	orrs	r0, r1
   87622:	2e02      	cmp	r6, #2
   87624:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   87628:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8762c:	d023      	beq.n	87676 <__register_exitproc+0x92>
   8762e:	3202      	adds	r2, #2
   87630:	f8c3 e004 	str.w	lr, [r3, #4]
   87634:	6828      	ldr	r0, [r5, #0]
   87636:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8763a:	f7ff f893 	bl	86764 <__retarget_lock_release_recursive>
   8763e:	2000      	movs	r0, #0
   87640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   87644:	4b17      	ldr	r3, [pc, #92]	; (876a4 <__register_exitproc+0xc0>)
   87646:	b30b      	cbz	r3, 8768c <__register_exitproc+0xa8>
   87648:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8764c:	f7ff f8ba 	bl	867c4 <malloc>
   87650:	4603      	mov	r3, r0
   87652:	b1d8      	cbz	r0, 8768c <__register_exitproc+0xa8>
   87654:	2000      	movs	r0, #0
   87656:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8765a:	f04f 0e01 	mov.w	lr, #1
   8765e:	6058      	str	r0, [r3, #4]
   87660:	6019      	str	r1, [r3, #0]
   87662:	4602      	mov	r2, r0
   87664:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   87668:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8766c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   87670:	2e00      	cmp	r6, #0
   87672:	d0dc      	beq.n	8762e <__register_exitproc+0x4a>
   87674:	e7cc      	b.n	87610 <__register_exitproc+0x2c>
   87676:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8767a:	4301      	orrs	r1, r0
   8767c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   87680:	e7d5      	b.n	8762e <__register_exitproc+0x4a>
   87682:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   87686:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8768a:	e7bb      	b.n	87604 <__register_exitproc+0x20>
   8768c:	6828      	ldr	r0, [r5, #0]
   8768e:	f7ff f869 	bl	86764 <__retarget_lock_release_recursive>
   87692:	f04f 30ff 	mov.w	r0, #4294967295
   87696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8769a:	bf00      	nop
   8769c:	200706a8 	.word	0x200706a8
   876a0:	000882c8 	.word	0x000882c8
   876a4:	000867c5 	.word	0x000867c5

000876a8 <_calloc_r>:
   876a8:	b510      	push	{r4, lr}
   876aa:	fb02 f101 	mul.w	r1, r2, r1
   876ae:	f7ff f891 	bl	867d4 <_malloc_r>
   876b2:	4604      	mov	r4, r0
   876b4:	b1d8      	cbz	r0, 876ee <_calloc_r+0x46>
   876b6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   876ba:	f022 0203 	bic.w	r2, r2, #3
   876be:	3a04      	subs	r2, #4
   876c0:	2a24      	cmp	r2, #36	; 0x24
   876c2:	d818      	bhi.n	876f6 <_calloc_r+0x4e>
   876c4:	2a13      	cmp	r2, #19
   876c6:	d914      	bls.n	876f2 <_calloc_r+0x4a>
   876c8:	2300      	movs	r3, #0
   876ca:	2a1b      	cmp	r2, #27
   876cc:	6003      	str	r3, [r0, #0]
   876ce:	6043      	str	r3, [r0, #4]
   876d0:	d916      	bls.n	87700 <_calloc_r+0x58>
   876d2:	2a24      	cmp	r2, #36	; 0x24
   876d4:	6083      	str	r3, [r0, #8]
   876d6:	60c3      	str	r3, [r0, #12]
   876d8:	bf11      	iteee	ne
   876da:	f100 0210 	addne.w	r2, r0, #16
   876de:	6103      	streq	r3, [r0, #16]
   876e0:	6143      	streq	r3, [r0, #20]
   876e2:	f100 0218 	addeq.w	r2, r0, #24
   876e6:	2300      	movs	r3, #0
   876e8:	6013      	str	r3, [r2, #0]
   876ea:	6053      	str	r3, [r2, #4]
   876ec:	6093      	str	r3, [r2, #8]
   876ee:	4620      	mov	r0, r4
   876f0:	bd10      	pop	{r4, pc}
   876f2:	4602      	mov	r2, r0
   876f4:	e7f7      	b.n	876e6 <_calloc_r+0x3e>
   876f6:	2100      	movs	r1, #0
   876f8:	f7fc f9ee 	bl	83ad8 <memset>
   876fc:	4620      	mov	r0, r4
   876fe:	bd10      	pop	{r4, pc}
   87700:	f100 0208 	add.w	r2, r0, #8
   87704:	e7ef      	b.n	876e6 <_calloc_r+0x3e>
   87706:	bf00      	nop

00087708 <_close_r>:
   87708:	b538      	push	{r3, r4, r5, lr}
   8770a:	2300      	movs	r3, #0
   8770c:	4c06      	ldr	r4, [pc, #24]	; (87728 <_close_r+0x20>)
   8770e:	4605      	mov	r5, r0
   87710:	4608      	mov	r0, r1
   87712:	6023      	str	r3, [r4, #0]
   87714:	f7fb fd5a 	bl	831cc <_close>
   87718:	1c43      	adds	r3, r0, #1
   8771a:	d000      	beq.n	8771e <_close_r+0x16>
   8771c:	bd38      	pop	{r3, r4, r5, pc}
   8771e:	6823      	ldr	r3, [r4, #0]
   87720:	2b00      	cmp	r3, #0
   87722:	d0fb      	beq.n	8771c <_close_r+0x14>
   87724:	602b      	str	r3, [r5, #0]
   87726:	bd38      	pop	{r3, r4, r5, pc}
   87728:	20070fec 	.word	0x20070fec

0008772c <_fclose_r>:
   8772c:	b570      	push	{r4, r5, r6, lr}
   8772e:	b159      	cbz	r1, 87748 <_fclose_r+0x1c>
   87730:	4605      	mov	r5, r0
   87732:	460c      	mov	r4, r1
   87734:	b110      	cbz	r0, 8773c <_fclose_r+0x10>
   87736:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87738:	2b00      	cmp	r3, #0
   8773a:	d03c      	beq.n	877b6 <_fclose_r+0x8a>
   8773c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8773e:	07d8      	lsls	r0, r3, #31
   87740:	d505      	bpl.n	8774e <_fclose_r+0x22>
   87742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87746:	b92b      	cbnz	r3, 87754 <_fclose_r+0x28>
   87748:	2600      	movs	r6, #0
   8774a:	4630      	mov	r0, r6
   8774c:	bd70      	pop	{r4, r5, r6, pc}
   8774e:	89a3      	ldrh	r3, [r4, #12]
   87750:	0599      	lsls	r1, r3, #22
   87752:	d53c      	bpl.n	877ce <_fclose_r+0xa2>
   87754:	4621      	mov	r1, r4
   87756:	4628      	mov	r0, r5
   87758:	f7fe fd48 	bl	861ec <__sflush_r>
   8775c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8775e:	4606      	mov	r6, r0
   87760:	b133      	cbz	r3, 87770 <_fclose_r+0x44>
   87762:	69e1      	ldr	r1, [r4, #28]
   87764:	4628      	mov	r0, r5
   87766:	4798      	blx	r3
   87768:	2800      	cmp	r0, #0
   8776a:	bfb8      	it	lt
   8776c:	f04f 36ff 	movlt.w	r6, #4294967295
   87770:	89a3      	ldrh	r3, [r4, #12]
   87772:	061a      	lsls	r2, r3, #24
   87774:	d422      	bmi.n	877bc <_fclose_r+0x90>
   87776:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87778:	b141      	cbz	r1, 8778c <_fclose_r+0x60>
   8777a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8777e:	4299      	cmp	r1, r3
   87780:	d002      	beq.n	87788 <_fclose_r+0x5c>
   87782:	4628      	mov	r0, r5
   87784:	f7fe fecc 	bl	86520 <_free_r>
   87788:	2300      	movs	r3, #0
   8778a:	6323      	str	r3, [r4, #48]	; 0x30
   8778c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8778e:	b121      	cbz	r1, 8779a <_fclose_r+0x6e>
   87790:	4628      	mov	r0, r5
   87792:	f7fe fec5 	bl	86520 <_free_r>
   87796:	2300      	movs	r3, #0
   87798:	6463      	str	r3, [r4, #68]	; 0x44
   8779a:	f7fe fe4b 	bl	86434 <__sfp_lock_acquire>
   8779e:	2200      	movs	r2, #0
   877a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   877a2:	81a2      	strh	r2, [r4, #12]
   877a4:	07db      	lsls	r3, r3, #31
   877a6:	d50e      	bpl.n	877c6 <_fclose_r+0x9a>
   877a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   877aa:	f7fe ffd7 	bl	8675c <__retarget_lock_close_recursive>
   877ae:	f7fe fe47 	bl	86440 <__sfp_lock_release>
   877b2:	4630      	mov	r0, r6
   877b4:	bd70      	pop	{r4, r5, r6, pc}
   877b6:	f7fe fe0d 	bl	863d4 <__sinit>
   877ba:	e7bf      	b.n	8773c <_fclose_r+0x10>
   877bc:	6921      	ldr	r1, [r4, #16]
   877be:	4628      	mov	r0, r5
   877c0:	f7fe feae 	bl	86520 <_free_r>
   877c4:	e7d7      	b.n	87776 <_fclose_r+0x4a>
   877c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   877c8:	f7fe ffcc 	bl	86764 <__retarget_lock_release_recursive>
   877cc:	e7ec      	b.n	877a8 <_fclose_r+0x7c>
   877ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
   877d0:	f7fe ffc6 	bl	86760 <__retarget_lock_acquire_recursive>
   877d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   877d8:	2b00      	cmp	r3, #0
   877da:	d1bb      	bne.n	87754 <_fclose_r+0x28>
   877dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
   877de:	f016 0601 	ands.w	r6, r6, #1
   877e2:	d1b1      	bne.n	87748 <_fclose_r+0x1c>
   877e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   877e6:	f7fe ffbd 	bl	86764 <__retarget_lock_release_recursive>
   877ea:	4630      	mov	r0, r6
   877ec:	bd70      	pop	{r4, r5, r6, pc}
   877ee:	bf00      	nop

000877f0 <_fstat_r>:
   877f0:	b570      	push	{r4, r5, r6, lr}
   877f2:	460d      	mov	r5, r1
   877f4:	2300      	movs	r3, #0
   877f6:	4c07      	ldr	r4, [pc, #28]	; (87814 <_fstat_r+0x24>)
   877f8:	4606      	mov	r6, r0
   877fa:	4611      	mov	r1, r2
   877fc:	4628      	mov	r0, r5
   877fe:	6023      	str	r3, [r4, #0]
   87800:	f7fb fce7 	bl	831d2 <_fstat>
   87804:	1c43      	adds	r3, r0, #1
   87806:	d000      	beq.n	8780a <_fstat_r+0x1a>
   87808:	bd70      	pop	{r4, r5, r6, pc}
   8780a:	6823      	ldr	r3, [r4, #0]
   8780c:	2b00      	cmp	r3, #0
   8780e:	d0fb      	beq.n	87808 <_fstat_r+0x18>
   87810:	6033      	str	r3, [r6, #0]
   87812:	bd70      	pop	{r4, r5, r6, pc}
   87814:	20070fec 	.word	0x20070fec

00087818 <_lseek_r>:
   87818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8781a:	460e      	mov	r6, r1
   8781c:	2500      	movs	r5, #0
   8781e:	4c08      	ldr	r4, [pc, #32]	; (87840 <_lseek_r+0x28>)
   87820:	4611      	mov	r1, r2
   87822:	4607      	mov	r7, r0
   87824:	461a      	mov	r2, r3
   87826:	4630      	mov	r0, r6
   87828:	6025      	str	r5, [r4, #0]
   8782a:	f7fb fcd7 	bl	831dc <_lseek>
   8782e:	1c43      	adds	r3, r0, #1
   87830:	d000      	beq.n	87834 <_lseek_r+0x1c>
   87832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87834:	6823      	ldr	r3, [r4, #0]
   87836:	2b00      	cmp	r3, #0
   87838:	d0fb      	beq.n	87832 <_lseek_r+0x1a>
   8783a:	603b      	str	r3, [r7, #0]
   8783c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8783e:	bf00      	nop
   87840:	20070fec 	.word	0x20070fec

00087844 <__ascii_mbtowc>:
   87844:	b082      	sub	sp, #8
   87846:	b149      	cbz	r1, 8785c <__ascii_mbtowc+0x18>
   87848:	b15a      	cbz	r2, 87862 <__ascii_mbtowc+0x1e>
   8784a:	b16b      	cbz	r3, 87868 <__ascii_mbtowc+0x24>
   8784c:	7813      	ldrb	r3, [r2, #0]
   8784e:	600b      	str	r3, [r1, #0]
   87850:	7812      	ldrb	r2, [r2, #0]
   87852:	1c10      	adds	r0, r2, #0
   87854:	bf18      	it	ne
   87856:	2001      	movne	r0, #1
   87858:	b002      	add	sp, #8
   8785a:	4770      	bx	lr
   8785c:	a901      	add	r1, sp, #4
   8785e:	2a00      	cmp	r2, #0
   87860:	d1f3      	bne.n	8784a <__ascii_mbtowc+0x6>
   87862:	4610      	mov	r0, r2
   87864:	b002      	add	sp, #8
   87866:	4770      	bx	lr
   87868:	f06f 0001 	mvn.w	r0, #1
   8786c:	e7f4      	b.n	87858 <__ascii_mbtowc+0x14>
   8786e:	bf00      	nop

00087870 <memmove>:
   87870:	4288      	cmp	r0, r1
   87872:	b5f0      	push	{r4, r5, r6, r7, lr}
   87874:	d90d      	bls.n	87892 <memmove+0x22>
   87876:	188b      	adds	r3, r1, r2
   87878:	4298      	cmp	r0, r3
   8787a:	d20a      	bcs.n	87892 <memmove+0x22>
   8787c:	1884      	adds	r4, r0, r2
   8787e:	2a00      	cmp	r2, #0
   87880:	d051      	beq.n	87926 <memmove+0xb6>
   87882:	4622      	mov	r2, r4
   87884:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   87888:	4299      	cmp	r1, r3
   8788a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8788e:	d1f9      	bne.n	87884 <memmove+0x14>
   87890:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87892:	2a0f      	cmp	r2, #15
   87894:	d948      	bls.n	87928 <memmove+0xb8>
   87896:	ea41 0300 	orr.w	r3, r1, r0
   8789a:	079b      	lsls	r3, r3, #30
   8789c:	d146      	bne.n	8792c <memmove+0xbc>
   8789e:	4615      	mov	r5, r2
   878a0:	f100 0410 	add.w	r4, r0, #16
   878a4:	f101 0310 	add.w	r3, r1, #16
   878a8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   878ac:	3d10      	subs	r5, #16
   878ae:	f844 6c10 	str.w	r6, [r4, #-16]
   878b2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   878b6:	2d0f      	cmp	r5, #15
   878b8:	f844 6c0c 	str.w	r6, [r4, #-12]
   878bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
   878c0:	f104 0410 	add.w	r4, r4, #16
   878c4:	f844 6c18 	str.w	r6, [r4, #-24]
   878c8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   878cc:	f103 0310 	add.w	r3, r3, #16
   878d0:	f844 6c14 	str.w	r6, [r4, #-20]
   878d4:	d8e8      	bhi.n	878a8 <memmove+0x38>
   878d6:	f1a2 0310 	sub.w	r3, r2, #16
   878da:	f023 030f 	bic.w	r3, r3, #15
   878de:	f002 0e0f 	and.w	lr, r2, #15
   878e2:	3310      	adds	r3, #16
   878e4:	f1be 0f03 	cmp.w	lr, #3
   878e8:	4419      	add	r1, r3
   878ea:	4403      	add	r3, r0
   878ec:	d921      	bls.n	87932 <memmove+0xc2>
   878ee:	460e      	mov	r6, r1
   878f0:	4674      	mov	r4, lr
   878f2:	1f1d      	subs	r5, r3, #4
   878f4:	f856 7b04 	ldr.w	r7, [r6], #4
   878f8:	3c04      	subs	r4, #4
   878fa:	2c03      	cmp	r4, #3
   878fc:	f845 7f04 	str.w	r7, [r5, #4]!
   87900:	d8f8      	bhi.n	878f4 <memmove+0x84>
   87902:	f1ae 0404 	sub.w	r4, lr, #4
   87906:	f024 0403 	bic.w	r4, r4, #3
   8790a:	3404      	adds	r4, #4
   8790c:	4421      	add	r1, r4
   8790e:	4423      	add	r3, r4
   87910:	f002 0203 	and.w	r2, r2, #3
   87914:	b162      	cbz	r2, 87930 <memmove+0xc0>
   87916:	3b01      	subs	r3, #1
   87918:	440a      	add	r2, r1
   8791a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8791e:	428a      	cmp	r2, r1
   87920:	f803 4f01 	strb.w	r4, [r3, #1]!
   87924:	d1f9      	bne.n	8791a <memmove+0xaa>
   87926:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87928:	4603      	mov	r3, r0
   8792a:	e7f3      	b.n	87914 <memmove+0xa4>
   8792c:	4603      	mov	r3, r0
   8792e:	e7f2      	b.n	87916 <memmove+0xa6>
   87930:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87932:	4672      	mov	r2, lr
   87934:	e7ee      	b.n	87914 <memmove+0xa4>
   87936:	bf00      	nop

00087938 <_read_r>:
   87938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8793a:	460e      	mov	r6, r1
   8793c:	2500      	movs	r5, #0
   8793e:	4c08      	ldr	r4, [pc, #32]	; (87960 <_read_r+0x28>)
   87940:	4611      	mov	r1, r2
   87942:	4607      	mov	r7, r0
   87944:	461a      	mov	r2, r3
   87946:	4630      	mov	r0, r6
   87948:	6025      	str	r5, [r4, #0]
   8794a:	f7f9 fc49 	bl	811e0 <_read>
   8794e:	1c43      	adds	r3, r0, #1
   87950:	d000      	beq.n	87954 <_read_r+0x1c>
   87952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87954:	6823      	ldr	r3, [r4, #0]
   87956:	2b00      	cmp	r3, #0
   87958:	d0fb      	beq.n	87952 <_read_r+0x1a>
   8795a:	603b      	str	r3, [r7, #0]
   8795c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8795e:	bf00      	nop
   87960:	20070fec 	.word	0x20070fec

00087964 <_realloc_r>:
   87964:	2900      	cmp	r1, #0
   87966:	f000 8094 	beq.w	87a92 <_realloc_r+0x12e>
   8796a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8796e:	460c      	mov	r4, r1
   87970:	4615      	mov	r5, r2
   87972:	b083      	sub	sp, #12
   87974:	4680      	mov	r8, r0
   87976:	f105 060b 	add.w	r6, r5, #11
   8797a:	f7ff fa13 	bl	86da4 <__malloc_lock>
   8797e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   87982:	2e16      	cmp	r6, #22
   87984:	f02e 0703 	bic.w	r7, lr, #3
   87988:	f1a4 0908 	sub.w	r9, r4, #8
   8798c:	d83c      	bhi.n	87a08 <_realloc_r+0xa4>
   8798e:	2210      	movs	r2, #16
   87990:	4616      	mov	r6, r2
   87992:	42b5      	cmp	r5, r6
   87994:	d83d      	bhi.n	87a12 <_realloc_r+0xae>
   87996:	4297      	cmp	r7, r2
   87998:	da43      	bge.n	87a22 <_realloc_r+0xbe>
   8799a:	4bc6      	ldr	r3, [pc, #792]	; (87cb4 <_realloc_r+0x350>)
   8799c:	eb09 0007 	add.w	r0, r9, r7
   879a0:	6899      	ldr	r1, [r3, #8]
   879a2:	4288      	cmp	r0, r1
   879a4:	f000 80c3 	beq.w	87b2e <_realloc_r+0x1ca>
   879a8:	6843      	ldr	r3, [r0, #4]
   879aa:	f023 0101 	bic.w	r1, r3, #1
   879ae:	4401      	add	r1, r0
   879b0:	6849      	ldr	r1, [r1, #4]
   879b2:	07c9      	lsls	r1, r1, #31
   879b4:	d54d      	bpl.n	87a52 <_realloc_r+0xee>
   879b6:	f01e 0f01 	tst.w	lr, #1
   879ba:	f000 809b 	beq.w	87af4 <_realloc_r+0x190>
   879be:	4629      	mov	r1, r5
   879c0:	4640      	mov	r0, r8
   879c2:	f7fe ff07 	bl	867d4 <_malloc_r>
   879c6:	4605      	mov	r5, r0
   879c8:	2800      	cmp	r0, #0
   879ca:	d03b      	beq.n	87a44 <_realloc_r+0xe0>
   879cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   879d0:	f1a0 0208 	sub.w	r2, r0, #8
   879d4:	f023 0301 	bic.w	r3, r3, #1
   879d8:	444b      	add	r3, r9
   879da:	429a      	cmp	r2, r3
   879dc:	f000 812b 	beq.w	87c36 <_realloc_r+0x2d2>
   879e0:	1f3a      	subs	r2, r7, #4
   879e2:	2a24      	cmp	r2, #36	; 0x24
   879e4:	f200 8118 	bhi.w	87c18 <_realloc_r+0x2b4>
   879e8:	2a13      	cmp	r2, #19
   879ea:	f200 80eb 	bhi.w	87bc4 <_realloc_r+0x260>
   879ee:	4603      	mov	r3, r0
   879f0:	4622      	mov	r2, r4
   879f2:	6811      	ldr	r1, [r2, #0]
   879f4:	6019      	str	r1, [r3, #0]
   879f6:	6851      	ldr	r1, [r2, #4]
   879f8:	6059      	str	r1, [r3, #4]
   879fa:	6892      	ldr	r2, [r2, #8]
   879fc:	609a      	str	r2, [r3, #8]
   879fe:	4621      	mov	r1, r4
   87a00:	4640      	mov	r0, r8
   87a02:	f7fe fd8d 	bl	86520 <_free_r>
   87a06:	e01d      	b.n	87a44 <_realloc_r+0xe0>
   87a08:	f026 0607 	bic.w	r6, r6, #7
   87a0c:	2e00      	cmp	r6, #0
   87a0e:	4632      	mov	r2, r6
   87a10:	dabf      	bge.n	87992 <_realloc_r+0x2e>
   87a12:	2500      	movs	r5, #0
   87a14:	230c      	movs	r3, #12
   87a16:	4628      	mov	r0, r5
   87a18:	f8c8 3000 	str.w	r3, [r8]
   87a1c:	b003      	add	sp, #12
   87a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a22:	4625      	mov	r5, r4
   87a24:	1bbb      	subs	r3, r7, r6
   87a26:	2b0f      	cmp	r3, #15
   87a28:	f8d9 2004 	ldr.w	r2, [r9, #4]
   87a2c:	d81d      	bhi.n	87a6a <_realloc_r+0x106>
   87a2e:	f002 0201 	and.w	r2, r2, #1
   87a32:	433a      	orrs	r2, r7
   87a34:	eb09 0107 	add.w	r1, r9, r7
   87a38:	f8c9 2004 	str.w	r2, [r9, #4]
   87a3c:	684b      	ldr	r3, [r1, #4]
   87a3e:	f043 0301 	orr.w	r3, r3, #1
   87a42:	604b      	str	r3, [r1, #4]
   87a44:	4640      	mov	r0, r8
   87a46:	f7ff f9b3 	bl	86db0 <__malloc_unlock>
   87a4a:	4628      	mov	r0, r5
   87a4c:	b003      	add	sp, #12
   87a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a52:	f023 0303 	bic.w	r3, r3, #3
   87a56:	18f9      	adds	r1, r7, r3
   87a58:	4291      	cmp	r1, r2
   87a5a:	db1d      	blt.n	87a98 <_realloc_r+0x134>
   87a5c:	68c3      	ldr	r3, [r0, #12]
   87a5e:	6882      	ldr	r2, [r0, #8]
   87a60:	4625      	mov	r5, r4
   87a62:	60d3      	str	r3, [r2, #12]
   87a64:	460f      	mov	r7, r1
   87a66:	609a      	str	r2, [r3, #8]
   87a68:	e7dc      	b.n	87a24 <_realloc_r+0xc0>
   87a6a:	f002 0201 	and.w	r2, r2, #1
   87a6e:	eb09 0106 	add.w	r1, r9, r6
   87a72:	f043 0301 	orr.w	r3, r3, #1
   87a76:	4332      	orrs	r2, r6
   87a78:	f8c9 2004 	str.w	r2, [r9, #4]
   87a7c:	444f      	add	r7, r9
   87a7e:	604b      	str	r3, [r1, #4]
   87a80:	687b      	ldr	r3, [r7, #4]
   87a82:	3108      	adds	r1, #8
   87a84:	f043 0301 	orr.w	r3, r3, #1
   87a88:	607b      	str	r3, [r7, #4]
   87a8a:	4640      	mov	r0, r8
   87a8c:	f7fe fd48 	bl	86520 <_free_r>
   87a90:	e7d8      	b.n	87a44 <_realloc_r+0xe0>
   87a92:	4611      	mov	r1, r2
   87a94:	f7fe be9e 	b.w	867d4 <_malloc_r>
   87a98:	f01e 0f01 	tst.w	lr, #1
   87a9c:	d18f      	bne.n	879be <_realloc_r+0x5a>
   87a9e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87aa2:	eba9 0a01 	sub.w	sl, r9, r1
   87aa6:	f8da 1004 	ldr.w	r1, [sl, #4]
   87aaa:	f021 0103 	bic.w	r1, r1, #3
   87aae:	440b      	add	r3, r1
   87ab0:	443b      	add	r3, r7
   87ab2:	4293      	cmp	r3, r2
   87ab4:	db26      	blt.n	87b04 <_realloc_r+0x1a0>
   87ab6:	4655      	mov	r5, sl
   87ab8:	68c1      	ldr	r1, [r0, #12]
   87aba:	6880      	ldr	r0, [r0, #8]
   87abc:	1f3a      	subs	r2, r7, #4
   87abe:	60c1      	str	r1, [r0, #12]
   87ac0:	6088      	str	r0, [r1, #8]
   87ac2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87ac6:	f8da 100c 	ldr.w	r1, [sl, #12]
   87aca:	2a24      	cmp	r2, #36	; 0x24
   87acc:	60c1      	str	r1, [r0, #12]
   87ace:	6088      	str	r0, [r1, #8]
   87ad0:	d826      	bhi.n	87b20 <_realloc_r+0x1bc>
   87ad2:	2a13      	cmp	r2, #19
   87ad4:	f240 8081 	bls.w	87bda <_realloc_r+0x276>
   87ad8:	6821      	ldr	r1, [r4, #0]
   87ada:	2a1b      	cmp	r2, #27
   87adc:	f8ca 1008 	str.w	r1, [sl, #8]
   87ae0:	6861      	ldr	r1, [r4, #4]
   87ae2:	f8ca 100c 	str.w	r1, [sl, #12]
   87ae6:	f200 80ad 	bhi.w	87c44 <_realloc_r+0x2e0>
   87aea:	f104 0008 	add.w	r0, r4, #8
   87aee:	f10a 0210 	add.w	r2, sl, #16
   87af2:	e074      	b.n	87bde <_realloc_r+0x27a>
   87af4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   87af8:	eba9 0a03 	sub.w	sl, r9, r3
   87afc:	f8da 1004 	ldr.w	r1, [sl, #4]
   87b00:	f021 0103 	bic.w	r1, r1, #3
   87b04:	187b      	adds	r3, r7, r1
   87b06:	4293      	cmp	r3, r2
   87b08:	f6ff af59 	blt.w	879be <_realloc_r+0x5a>
   87b0c:	4655      	mov	r5, sl
   87b0e:	f8da 100c 	ldr.w	r1, [sl, #12]
   87b12:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87b16:	1f3a      	subs	r2, r7, #4
   87b18:	2a24      	cmp	r2, #36	; 0x24
   87b1a:	60c1      	str	r1, [r0, #12]
   87b1c:	6088      	str	r0, [r1, #8]
   87b1e:	d9d8      	bls.n	87ad2 <_realloc_r+0x16e>
   87b20:	4621      	mov	r1, r4
   87b22:	4628      	mov	r0, r5
   87b24:	461f      	mov	r7, r3
   87b26:	46d1      	mov	r9, sl
   87b28:	f7ff fea2 	bl	87870 <memmove>
   87b2c:	e77a      	b.n	87a24 <_realloc_r+0xc0>
   87b2e:	6841      	ldr	r1, [r0, #4]
   87b30:	f106 0010 	add.w	r0, r6, #16
   87b34:	f021 0b03 	bic.w	fp, r1, #3
   87b38:	44bb      	add	fp, r7
   87b3a:	4583      	cmp	fp, r0
   87b3c:	da58      	bge.n	87bf0 <_realloc_r+0x28c>
   87b3e:	f01e 0f01 	tst.w	lr, #1
   87b42:	f47f af3c 	bne.w	879be <_realloc_r+0x5a>
   87b46:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87b4a:	eba9 0a01 	sub.w	sl, r9, r1
   87b4e:	f8da 1004 	ldr.w	r1, [sl, #4]
   87b52:	f021 0103 	bic.w	r1, r1, #3
   87b56:	448b      	add	fp, r1
   87b58:	4558      	cmp	r0, fp
   87b5a:	dcd3      	bgt.n	87b04 <_realloc_r+0x1a0>
   87b5c:	4655      	mov	r5, sl
   87b5e:	f8da 100c 	ldr.w	r1, [sl, #12]
   87b62:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87b66:	1f3a      	subs	r2, r7, #4
   87b68:	2a24      	cmp	r2, #36	; 0x24
   87b6a:	60c1      	str	r1, [r0, #12]
   87b6c:	6088      	str	r0, [r1, #8]
   87b6e:	f200 808d 	bhi.w	87c8c <_realloc_r+0x328>
   87b72:	2a13      	cmp	r2, #19
   87b74:	f240 8087 	bls.w	87c86 <_realloc_r+0x322>
   87b78:	6821      	ldr	r1, [r4, #0]
   87b7a:	2a1b      	cmp	r2, #27
   87b7c:	f8ca 1008 	str.w	r1, [sl, #8]
   87b80:	6861      	ldr	r1, [r4, #4]
   87b82:	f8ca 100c 	str.w	r1, [sl, #12]
   87b86:	f200 8088 	bhi.w	87c9a <_realloc_r+0x336>
   87b8a:	f104 0108 	add.w	r1, r4, #8
   87b8e:	f10a 0210 	add.w	r2, sl, #16
   87b92:	6808      	ldr	r0, [r1, #0]
   87b94:	6010      	str	r0, [r2, #0]
   87b96:	6848      	ldr	r0, [r1, #4]
   87b98:	6050      	str	r0, [r2, #4]
   87b9a:	6889      	ldr	r1, [r1, #8]
   87b9c:	6091      	str	r1, [r2, #8]
   87b9e:	ebab 0206 	sub.w	r2, fp, r6
   87ba2:	eb0a 0106 	add.w	r1, sl, r6
   87ba6:	f042 0201 	orr.w	r2, r2, #1
   87baa:	6099      	str	r1, [r3, #8]
   87bac:	604a      	str	r2, [r1, #4]
   87bae:	f8da 3004 	ldr.w	r3, [sl, #4]
   87bb2:	4640      	mov	r0, r8
   87bb4:	f003 0301 	and.w	r3, r3, #1
   87bb8:	431e      	orrs	r6, r3
   87bba:	f8ca 6004 	str.w	r6, [sl, #4]
   87bbe:	f7ff f8f7 	bl	86db0 <__malloc_unlock>
   87bc2:	e742      	b.n	87a4a <_realloc_r+0xe6>
   87bc4:	6823      	ldr	r3, [r4, #0]
   87bc6:	2a1b      	cmp	r2, #27
   87bc8:	6003      	str	r3, [r0, #0]
   87bca:	6863      	ldr	r3, [r4, #4]
   87bcc:	6043      	str	r3, [r0, #4]
   87bce:	d827      	bhi.n	87c20 <_realloc_r+0x2bc>
   87bd0:	f100 0308 	add.w	r3, r0, #8
   87bd4:	f104 0208 	add.w	r2, r4, #8
   87bd8:	e70b      	b.n	879f2 <_realloc_r+0x8e>
   87bda:	4620      	mov	r0, r4
   87bdc:	462a      	mov	r2, r5
   87bde:	6801      	ldr	r1, [r0, #0]
   87be0:	461f      	mov	r7, r3
   87be2:	6011      	str	r1, [r2, #0]
   87be4:	6841      	ldr	r1, [r0, #4]
   87be6:	46d1      	mov	r9, sl
   87be8:	6051      	str	r1, [r2, #4]
   87bea:	6883      	ldr	r3, [r0, #8]
   87bec:	6093      	str	r3, [r2, #8]
   87bee:	e719      	b.n	87a24 <_realloc_r+0xc0>
   87bf0:	ebab 0b06 	sub.w	fp, fp, r6
   87bf4:	eb09 0106 	add.w	r1, r9, r6
   87bf8:	f04b 0201 	orr.w	r2, fp, #1
   87bfc:	6099      	str	r1, [r3, #8]
   87bfe:	604a      	str	r2, [r1, #4]
   87c00:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87c04:	4640      	mov	r0, r8
   87c06:	f003 0301 	and.w	r3, r3, #1
   87c0a:	431e      	orrs	r6, r3
   87c0c:	f844 6c04 	str.w	r6, [r4, #-4]
   87c10:	f7ff f8ce 	bl	86db0 <__malloc_unlock>
   87c14:	4625      	mov	r5, r4
   87c16:	e718      	b.n	87a4a <_realloc_r+0xe6>
   87c18:	4621      	mov	r1, r4
   87c1a:	f7ff fe29 	bl	87870 <memmove>
   87c1e:	e6ee      	b.n	879fe <_realloc_r+0x9a>
   87c20:	68a3      	ldr	r3, [r4, #8]
   87c22:	2a24      	cmp	r2, #36	; 0x24
   87c24:	6083      	str	r3, [r0, #8]
   87c26:	68e3      	ldr	r3, [r4, #12]
   87c28:	60c3      	str	r3, [r0, #12]
   87c2a:	d018      	beq.n	87c5e <_realloc_r+0x2fa>
   87c2c:	f100 0310 	add.w	r3, r0, #16
   87c30:	f104 0210 	add.w	r2, r4, #16
   87c34:	e6dd      	b.n	879f2 <_realloc_r+0x8e>
   87c36:	f850 3c04 	ldr.w	r3, [r0, #-4]
   87c3a:	4625      	mov	r5, r4
   87c3c:	f023 0303 	bic.w	r3, r3, #3
   87c40:	441f      	add	r7, r3
   87c42:	e6ef      	b.n	87a24 <_realloc_r+0xc0>
   87c44:	68a1      	ldr	r1, [r4, #8]
   87c46:	2a24      	cmp	r2, #36	; 0x24
   87c48:	f8ca 1010 	str.w	r1, [sl, #16]
   87c4c:	68e1      	ldr	r1, [r4, #12]
   87c4e:	f8ca 1014 	str.w	r1, [sl, #20]
   87c52:	d00d      	beq.n	87c70 <_realloc_r+0x30c>
   87c54:	f104 0010 	add.w	r0, r4, #16
   87c58:	f10a 0218 	add.w	r2, sl, #24
   87c5c:	e7bf      	b.n	87bde <_realloc_r+0x27a>
   87c5e:	6922      	ldr	r2, [r4, #16]
   87c60:	f100 0318 	add.w	r3, r0, #24
   87c64:	6102      	str	r2, [r0, #16]
   87c66:	6961      	ldr	r1, [r4, #20]
   87c68:	f104 0218 	add.w	r2, r4, #24
   87c6c:	6141      	str	r1, [r0, #20]
   87c6e:	e6c0      	b.n	879f2 <_realloc_r+0x8e>
   87c70:	6922      	ldr	r2, [r4, #16]
   87c72:	f104 0018 	add.w	r0, r4, #24
   87c76:	f8ca 2018 	str.w	r2, [sl, #24]
   87c7a:	6961      	ldr	r1, [r4, #20]
   87c7c:	f10a 0220 	add.w	r2, sl, #32
   87c80:	f8ca 101c 	str.w	r1, [sl, #28]
   87c84:	e7ab      	b.n	87bde <_realloc_r+0x27a>
   87c86:	4621      	mov	r1, r4
   87c88:	462a      	mov	r2, r5
   87c8a:	e782      	b.n	87b92 <_realloc_r+0x22e>
   87c8c:	4621      	mov	r1, r4
   87c8e:	4628      	mov	r0, r5
   87c90:	9301      	str	r3, [sp, #4]
   87c92:	f7ff fded 	bl	87870 <memmove>
   87c96:	9b01      	ldr	r3, [sp, #4]
   87c98:	e781      	b.n	87b9e <_realloc_r+0x23a>
   87c9a:	68a1      	ldr	r1, [r4, #8]
   87c9c:	2a24      	cmp	r2, #36	; 0x24
   87c9e:	f8ca 1010 	str.w	r1, [sl, #16]
   87ca2:	68e1      	ldr	r1, [r4, #12]
   87ca4:	f8ca 1014 	str.w	r1, [sl, #20]
   87ca8:	d006      	beq.n	87cb8 <_realloc_r+0x354>
   87caa:	f104 0110 	add.w	r1, r4, #16
   87cae:	f10a 0218 	add.w	r2, sl, #24
   87cb2:	e76e      	b.n	87b92 <_realloc_r+0x22e>
   87cb4:	200706ac 	.word	0x200706ac
   87cb8:	6922      	ldr	r2, [r4, #16]
   87cba:	f104 0118 	add.w	r1, r4, #24
   87cbe:	f8ca 2018 	str.w	r2, [sl, #24]
   87cc2:	6960      	ldr	r0, [r4, #20]
   87cc4:	f10a 0220 	add.w	r2, sl, #32
   87cc8:	f8ca 001c 	str.w	r0, [sl, #28]
   87ccc:	e761      	b.n	87b92 <_realloc_r+0x22e>
   87cce:	bf00      	nop

00087cd0 <__ascii_wctomb>:
   87cd0:	b119      	cbz	r1, 87cda <__ascii_wctomb+0xa>
   87cd2:	2aff      	cmp	r2, #255	; 0xff
   87cd4:	d803      	bhi.n	87cde <__ascii_wctomb+0xe>
   87cd6:	700a      	strb	r2, [r1, #0]
   87cd8:	2101      	movs	r1, #1
   87cda:	4608      	mov	r0, r1
   87cdc:	4770      	bx	lr
   87cde:	238a      	movs	r3, #138	; 0x8a
   87ce0:	f04f 31ff 	mov.w	r1, #4294967295
   87ce4:	6003      	str	r3, [r0, #0]
   87ce6:	e7f8      	b.n	87cda <__ascii_wctomb+0xa>

00087ce8 <__aeabi_dmul>:
   87ce8:	b570      	push	{r4, r5, r6, lr}
   87cea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87cee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87cf2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87cf6:	bf1d      	ittte	ne
   87cf8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87cfc:	ea94 0f0c 	teqne	r4, ip
   87d00:	ea95 0f0c 	teqne	r5, ip
   87d04:	f000 f8de 	bleq	87ec4 <__aeabi_dmul+0x1dc>
   87d08:	442c      	add	r4, r5
   87d0a:	ea81 0603 	eor.w	r6, r1, r3
   87d0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   87d12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   87d16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   87d1a:	bf18      	it	ne
   87d1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   87d20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   87d28:	d038      	beq.n	87d9c <__aeabi_dmul+0xb4>
   87d2a:	fba0 ce02 	umull	ip, lr, r0, r2
   87d2e:	f04f 0500 	mov.w	r5, #0
   87d32:	fbe1 e502 	umlal	lr, r5, r1, r2
   87d36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   87d3a:	fbe0 e503 	umlal	lr, r5, r0, r3
   87d3e:	f04f 0600 	mov.w	r6, #0
   87d42:	fbe1 5603 	umlal	r5, r6, r1, r3
   87d46:	f09c 0f00 	teq	ip, #0
   87d4a:	bf18      	it	ne
   87d4c:	f04e 0e01 	orrne.w	lr, lr, #1
   87d50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   87d54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   87d58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   87d5c:	d204      	bcs.n	87d68 <__aeabi_dmul+0x80>
   87d5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   87d62:	416d      	adcs	r5, r5
   87d64:	eb46 0606 	adc.w	r6, r6, r6
   87d68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   87d6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   87d70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   87d74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   87d78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   87d7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87d80:	bf88      	it	hi
   87d82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87d86:	d81e      	bhi.n	87dc6 <__aeabi_dmul+0xde>
   87d88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   87d8c:	bf08      	it	eq
   87d8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   87d92:	f150 0000 	adcs.w	r0, r0, #0
   87d96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87d9a:	bd70      	pop	{r4, r5, r6, pc}
   87d9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   87da0:	ea46 0101 	orr.w	r1, r6, r1
   87da4:	ea40 0002 	orr.w	r0, r0, r2
   87da8:	ea81 0103 	eor.w	r1, r1, r3
   87dac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   87db0:	bfc2      	ittt	gt
   87db2:	ebd4 050c 	rsbsgt	r5, r4, ip
   87db6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87dba:	bd70      	popgt	{r4, r5, r6, pc}
   87dbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87dc0:	f04f 0e00 	mov.w	lr, #0
   87dc4:	3c01      	subs	r4, #1
   87dc6:	f300 80ab 	bgt.w	87f20 <__aeabi_dmul+0x238>
   87dca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   87dce:	bfde      	ittt	le
   87dd0:	2000      	movle	r0, #0
   87dd2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   87dd6:	bd70      	pople	{r4, r5, r6, pc}
   87dd8:	f1c4 0400 	rsb	r4, r4, #0
   87ddc:	3c20      	subs	r4, #32
   87dde:	da35      	bge.n	87e4c <__aeabi_dmul+0x164>
   87de0:	340c      	adds	r4, #12
   87de2:	dc1b      	bgt.n	87e1c <__aeabi_dmul+0x134>
   87de4:	f104 0414 	add.w	r4, r4, #20
   87de8:	f1c4 0520 	rsb	r5, r4, #32
   87dec:	fa00 f305 	lsl.w	r3, r0, r5
   87df0:	fa20 f004 	lsr.w	r0, r0, r4
   87df4:	fa01 f205 	lsl.w	r2, r1, r5
   87df8:	ea40 0002 	orr.w	r0, r0, r2
   87dfc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   87e00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87e04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87e08:	fa21 f604 	lsr.w	r6, r1, r4
   87e0c:	eb42 0106 	adc.w	r1, r2, r6
   87e10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87e14:	bf08      	it	eq
   87e16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87e1a:	bd70      	pop	{r4, r5, r6, pc}
   87e1c:	f1c4 040c 	rsb	r4, r4, #12
   87e20:	f1c4 0520 	rsb	r5, r4, #32
   87e24:	fa00 f304 	lsl.w	r3, r0, r4
   87e28:	fa20 f005 	lsr.w	r0, r0, r5
   87e2c:	fa01 f204 	lsl.w	r2, r1, r4
   87e30:	ea40 0002 	orr.w	r0, r0, r2
   87e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87e38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87e3c:	f141 0100 	adc.w	r1, r1, #0
   87e40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87e44:	bf08      	it	eq
   87e46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87e4a:	bd70      	pop	{r4, r5, r6, pc}
   87e4c:	f1c4 0520 	rsb	r5, r4, #32
   87e50:	fa00 f205 	lsl.w	r2, r0, r5
   87e54:	ea4e 0e02 	orr.w	lr, lr, r2
   87e58:	fa20 f304 	lsr.w	r3, r0, r4
   87e5c:	fa01 f205 	lsl.w	r2, r1, r5
   87e60:	ea43 0302 	orr.w	r3, r3, r2
   87e64:	fa21 f004 	lsr.w	r0, r1, r4
   87e68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87e6c:	fa21 f204 	lsr.w	r2, r1, r4
   87e70:	ea20 0002 	bic.w	r0, r0, r2
   87e74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   87e78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87e7c:	bf08      	it	eq
   87e7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87e82:	bd70      	pop	{r4, r5, r6, pc}
   87e84:	f094 0f00 	teq	r4, #0
   87e88:	d10f      	bne.n	87eaa <__aeabi_dmul+0x1c2>
   87e8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   87e8e:	0040      	lsls	r0, r0, #1
   87e90:	eb41 0101 	adc.w	r1, r1, r1
   87e94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87e98:	bf08      	it	eq
   87e9a:	3c01      	subeq	r4, #1
   87e9c:	d0f7      	beq.n	87e8e <__aeabi_dmul+0x1a6>
   87e9e:	ea41 0106 	orr.w	r1, r1, r6
   87ea2:	f095 0f00 	teq	r5, #0
   87ea6:	bf18      	it	ne
   87ea8:	4770      	bxne	lr
   87eaa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   87eae:	0052      	lsls	r2, r2, #1
   87eb0:	eb43 0303 	adc.w	r3, r3, r3
   87eb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   87eb8:	bf08      	it	eq
   87eba:	3d01      	subeq	r5, #1
   87ebc:	d0f7      	beq.n	87eae <__aeabi_dmul+0x1c6>
   87ebe:	ea43 0306 	orr.w	r3, r3, r6
   87ec2:	4770      	bx	lr
   87ec4:	ea94 0f0c 	teq	r4, ip
   87ec8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87ecc:	bf18      	it	ne
   87ece:	ea95 0f0c 	teqne	r5, ip
   87ed2:	d00c      	beq.n	87eee <__aeabi_dmul+0x206>
   87ed4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87ed8:	bf18      	it	ne
   87eda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87ede:	d1d1      	bne.n	87e84 <__aeabi_dmul+0x19c>
   87ee0:	ea81 0103 	eor.w	r1, r1, r3
   87ee4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87ee8:	f04f 0000 	mov.w	r0, #0
   87eec:	bd70      	pop	{r4, r5, r6, pc}
   87eee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87ef2:	bf06      	itte	eq
   87ef4:	4610      	moveq	r0, r2
   87ef6:	4619      	moveq	r1, r3
   87ef8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87efc:	d019      	beq.n	87f32 <__aeabi_dmul+0x24a>
   87efe:	ea94 0f0c 	teq	r4, ip
   87f02:	d102      	bne.n	87f0a <__aeabi_dmul+0x222>
   87f04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   87f08:	d113      	bne.n	87f32 <__aeabi_dmul+0x24a>
   87f0a:	ea95 0f0c 	teq	r5, ip
   87f0e:	d105      	bne.n	87f1c <__aeabi_dmul+0x234>
   87f10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   87f14:	bf1c      	itt	ne
   87f16:	4610      	movne	r0, r2
   87f18:	4619      	movne	r1, r3
   87f1a:	d10a      	bne.n	87f32 <__aeabi_dmul+0x24a>
   87f1c:	ea81 0103 	eor.w	r1, r1, r3
   87f20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87f24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   87f28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87f2c:	f04f 0000 	mov.w	r0, #0
   87f30:	bd70      	pop	{r4, r5, r6, pc}
   87f32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   87f36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   87f3a:	bd70      	pop	{r4, r5, r6, pc}

00087f3c <__aeabi_ddiv>:
   87f3c:	b570      	push	{r4, r5, r6, lr}
   87f3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87f42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87f46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87f4a:	bf1d      	ittte	ne
   87f4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87f50:	ea94 0f0c 	teqne	r4, ip
   87f54:	ea95 0f0c 	teqne	r5, ip
   87f58:	f000 f8a7 	bleq	880aa <__aeabi_ddiv+0x16e>
   87f5c:	eba4 0405 	sub.w	r4, r4, r5
   87f60:	ea81 0e03 	eor.w	lr, r1, r3
   87f64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   87f68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87f6c:	f000 8088 	beq.w	88080 <__aeabi_ddiv+0x144>
   87f70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87f74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   87f78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   87f7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   87f80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   87f84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   87f88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   87f8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   87f90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   87f94:	429d      	cmp	r5, r3
   87f96:	bf08      	it	eq
   87f98:	4296      	cmpeq	r6, r2
   87f9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   87f9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   87fa2:	d202      	bcs.n	87faa <__aeabi_ddiv+0x6e>
   87fa4:	085b      	lsrs	r3, r3, #1
   87fa6:	ea4f 0232 	mov.w	r2, r2, rrx
   87faa:	1ab6      	subs	r6, r6, r2
   87fac:	eb65 0503 	sbc.w	r5, r5, r3
   87fb0:	085b      	lsrs	r3, r3, #1
   87fb2:	ea4f 0232 	mov.w	r2, r2, rrx
   87fb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   87fba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   87fbe:	ebb6 0e02 	subs.w	lr, r6, r2
   87fc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   87fc6:	bf22      	ittt	cs
   87fc8:	1ab6      	subcs	r6, r6, r2
   87fca:	4675      	movcs	r5, lr
   87fcc:	ea40 000c 	orrcs.w	r0, r0, ip
   87fd0:	085b      	lsrs	r3, r3, #1
   87fd2:	ea4f 0232 	mov.w	r2, r2, rrx
   87fd6:	ebb6 0e02 	subs.w	lr, r6, r2
   87fda:	eb75 0e03 	sbcs.w	lr, r5, r3
   87fde:	bf22      	ittt	cs
   87fe0:	1ab6      	subcs	r6, r6, r2
   87fe2:	4675      	movcs	r5, lr
   87fe4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   87fe8:	085b      	lsrs	r3, r3, #1
   87fea:	ea4f 0232 	mov.w	r2, r2, rrx
   87fee:	ebb6 0e02 	subs.w	lr, r6, r2
   87ff2:	eb75 0e03 	sbcs.w	lr, r5, r3
   87ff6:	bf22      	ittt	cs
   87ff8:	1ab6      	subcs	r6, r6, r2
   87ffa:	4675      	movcs	r5, lr
   87ffc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   88000:	085b      	lsrs	r3, r3, #1
   88002:	ea4f 0232 	mov.w	r2, r2, rrx
   88006:	ebb6 0e02 	subs.w	lr, r6, r2
   8800a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8800e:	bf22      	ittt	cs
   88010:	1ab6      	subcs	r6, r6, r2
   88012:	4675      	movcs	r5, lr
   88014:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   88018:	ea55 0e06 	orrs.w	lr, r5, r6
   8801c:	d018      	beq.n	88050 <__aeabi_ddiv+0x114>
   8801e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   88022:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   88026:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8802a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8802e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   88032:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   88036:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8803a:	d1c0      	bne.n	87fbe <__aeabi_ddiv+0x82>
   8803c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88040:	d10b      	bne.n	8805a <__aeabi_ddiv+0x11e>
   88042:	ea41 0100 	orr.w	r1, r1, r0
   88046:	f04f 0000 	mov.w	r0, #0
   8804a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8804e:	e7b6      	b.n	87fbe <__aeabi_ddiv+0x82>
   88050:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88054:	bf04      	itt	eq
   88056:	4301      	orreq	r1, r0
   88058:	2000      	moveq	r0, #0
   8805a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8805e:	bf88      	it	hi
   88060:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   88064:	f63f aeaf 	bhi.w	87dc6 <__aeabi_dmul+0xde>
   88068:	ebb5 0c03 	subs.w	ip, r5, r3
   8806c:	bf04      	itt	eq
   8806e:	ebb6 0c02 	subseq.w	ip, r6, r2
   88072:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   88076:	f150 0000 	adcs.w	r0, r0, #0
   8807a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8807e:	bd70      	pop	{r4, r5, r6, pc}
   88080:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   88084:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   88088:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8808c:	bfc2      	ittt	gt
   8808e:	ebd4 050c 	rsbsgt	r5, r4, ip
   88092:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   88096:	bd70      	popgt	{r4, r5, r6, pc}
   88098:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8809c:	f04f 0e00 	mov.w	lr, #0
   880a0:	3c01      	subs	r4, #1
   880a2:	e690      	b.n	87dc6 <__aeabi_dmul+0xde>
   880a4:	ea45 0e06 	orr.w	lr, r5, r6
   880a8:	e68d      	b.n	87dc6 <__aeabi_dmul+0xde>
   880aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   880ae:	ea94 0f0c 	teq	r4, ip
   880b2:	bf08      	it	eq
   880b4:	ea95 0f0c 	teqeq	r5, ip
   880b8:	f43f af3b 	beq.w	87f32 <__aeabi_dmul+0x24a>
   880bc:	ea94 0f0c 	teq	r4, ip
   880c0:	d10a      	bne.n	880d8 <__aeabi_ddiv+0x19c>
   880c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   880c6:	f47f af34 	bne.w	87f32 <__aeabi_dmul+0x24a>
   880ca:	ea95 0f0c 	teq	r5, ip
   880ce:	f47f af25 	bne.w	87f1c <__aeabi_dmul+0x234>
   880d2:	4610      	mov	r0, r2
   880d4:	4619      	mov	r1, r3
   880d6:	e72c      	b.n	87f32 <__aeabi_dmul+0x24a>
   880d8:	ea95 0f0c 	teq	r5, ip
   880dc:	d106      	bne.n	880ec <__aeabi_ddiv+0x1b0>
   880de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   880e2:	f43f aefd 	beq.w	87ee0 <__aeabi_dmul+0x1f8>
   880e6:	4610      	mov	r0, r2
   880e8:	4619      	mov	r1, r3
   880ea:	e722      	b.n	87f32 <__aeabi_dmul+0x24a>
   880ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   880f0:	bf18      	it	ne
   880f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   880f6:	f47f aec5 	bne.w	87e84 <__aeabi_dmul+0x19c>
   880fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   880fe:	f47f af0d 	bne.w	87f1c <__aeabi_dmul+0x234>
   88102:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   88106:	f47f aeeb 	bne.w	87ee0 <__aeabi_dmul+0x1f8>
   8810a:	e712      	b.n	87f32 <__aeabi_dmul+0x24a>

0008810c <__gedf2>:
   8810c:	f04f 3cff 	mov.w	ip, #4294967295
   88110:	e006      	b.n	88120 <__cmpdf2+0x4>
   88112:	bf00      	nop

00088114 <__ledf2>:
   88114:	f04f 0c01 	mov.w	ip, #1
   88118:	e002      	b.n	88120 <__cmpdf2+0x4>
   8811a:	bf00      	nop

0008811c <__cmpdf2>:
   8811c:	f04f 0c01 	mov.w	ip, #1
   88120:	f84d cd04 	str.w	ip, [sp, #-4]!
   88124:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88128:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8812c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88130:	bf18      	it	ne
   88132:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   88136:	d01b      	beq.n	88170 <__cmpdf2+0x54>
   88138:	b001      	add	sp, #4
   8813a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8813e:	bf0c      	ite	eq
   88140:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   88144:	ea91 0f03 	teqne	r1, r3
   88148:	bf02      	ittt	eq
   8814a:	ea90 0f02 	teqeq	r0, r2
   8814e:	2000      	moveq	r0, #0
   88150:	4770      	bxeq	lr
   88152:	f110 0f00 	cmn.w	r0, #0
   88156:	ea91 0f03 	teq	r1, r3
   8815a:	bf58      	it	pl
   8815c:	4299      	cmppl	r1, r3
   8815e:	bf08      	it	eq
   88160:	4290      	cmpeq	r0, r2
   88162:	bf2c      	ite	cs
   88164:	17d8      	asrcs	r0, r3, #31
   88166:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8816a:	f040 0001 	orr.w	r0, r0, #1
   8816e:	4770      	bx	lr
   88170:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88174:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88178:	d102      	bne.n	88180 <__cmpdf2+0x64>
   8817a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8817e:	d107      	bne.n	88190 <__cmpdf2+0x74>
   88180:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88184:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88188:	d1d6      	bne.n	88138 <__cmpdf2+0x1c>
   8818a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8818e:	d0d3      	beq.n	88138 <__cmpdf2+0x1c>
   88190:	f85d 0b04 	ldr.w	r0, [sp], #4
   88194:	4770      	bx	lr
   88196:	bf00      	nop

00088198 <__aeabi_cdrcmple>:
   88198:	4684      	mov	ip, r0
   8819a:	4610      	mov	r0, r2
   8819c:	4662      	mov	r2, ip
   8819e:	468c      	mov	ip, r1
   881a0:	4619      	mov	r1, r3
   881a2:	4663      	mov	r3, ip
   881a4:	e000      	b.n	881a8 <__aeabi_cdcmpeq>
   881a6:	bf00      	nop

000881a8 <__aeabi_cdcmpeq>:
   881a8:	b501      	push	{r0, lr}
   881aa:	f7ff ffb7 	bl	8811c <__cmpdf2>
   881ae:	2800      	cmp	r0, #0
   881b0:	bf48      	it	mi
   881b2:	f110 0f00 	cmnmi.w	r0, #0
   881b6:	bd01      	pop	{r0, pc}

000881b8 <__aeabi_dcmpeq>:
   881b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   881bc:	f7ff fff4 	bl	881a8 <__aeabi_cdcmpeq>
   881c0:	bf0c      	ite	eq
   881c2:	2001      	moveq	r0, #1
   881c4:	2000      	movne	r0, #0
   881c6:	f85d fb08 	ldr.w	pc, [sp], #8
   881ca:	bf00      	nop

000881cc <__aeabi_dcmplt>:
   881cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   881d0:	f7ff ffea 	bl	881a8 <__aeabi_cdcmpeq>
   881d4:	bf34      	ite	cc
   881d6:	2001      	movcc	r0, #1
   881d8:	2000      	movcs	r0, #0
   881da:	f85d fb08 	ldr.w	pc, [sp], #8
   881de:	bf00      	nop

000881e0 <__aeabi_dcmple>:
   881e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   881e4:	f7ff ffe0 	bl	881a8 <__aeabi_cdcmpeq>
   881e8:	bf94      	ite	ls
   881ea:	2001      	movls	r0, #1
   881ec:	2000      	movhi	r0, #0
   881ee:	f85d fb08 	ldr.w	pc, [sp], #8
   881f2:	bf00      	nop

000881f4 <__aeabi_dcmpge>:
   881f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   881f8:	f7ff ffce 	bl	88198 <__aeabi_cdrcmple>
   881fc:	bf94      	ite	ls
   881fe:	2001      	movls	r0, #1
   88200:	2000      	movhi	r0, #0
   88202:	f85d fb08 	ldr.w	pc, [sp], #8
   88206:	bf00      	nop

00088208 <__aeabi_dcmpgt>:
   88208:	f84d ed08 	str.w	lr, [sp, #-8]!
   8820c:	f7ff ffc4 	bl	88198 <__aeabi_cdrcmple>
   88210:	bf34      	ite	cc
   88212:	2001      	movcc	r0, #1
   88214:	2000      	movcs	r0, #0
   88216:	f85d fb08 	ldr.w	pc, [sp], #8
   8821a:	bf00      	nop

0008821c <__aeabi_dcmpun>:
   8821c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88220:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88224:	d102      	bne.n	8822c <__aeabi_dcmpun+0x10>
   88226:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8822a:	d10a      	bne.n	88242 <__aeabi_dcmpun+0x26>
   8822c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88230:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88234:	d102      	bne.n	8823c <__aeabi_dcmpun+0x20>
   88236:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8823a:	d102      	bne.n	88242 <__aeabi_dcmpun+0x26>
   8823c:	f04f 0000 	mov.w	r0, #0
   88240:	4770      	bx	lr
   88242:	f04f 0001 	mov.w	r0, #1
   88246:	4770      	bx	lr

00088248 <__aeabi_d2iz>:
   88248:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8824c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   88250:	d215      	bcs.n	8827e <__aeabi_d2iz+0x36>
   88252:	d511      	bpl.n	88278 <__aeabi_d2iz+0x30>
   88254:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   88258:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8825c:	d912      	bls.n	88284 <__aeabi_d2iz+0x3c>
   8825e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   88262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   88266:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8826a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8826e:	fa23 f002 	lsr.w	r0, r3, r2
   88272:	bf18      	it	ne
   88274:	4240      	negne	r0, r0
   88276:	4770      	bx	lr
   88278:	f04f 0000 	mov.w	r0, #0
   8827c:	4770      	bx	lr
   8827e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   88282:	d105      	bne.n	88290 <__aeabi_d2iz+0x48>
   88284:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   88288:	bf08      	it	eq
   8828a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8828e:	4770      	bx	lr
   88290:	f04f 0000 	mov.w	r0, #0
   88294:	4770      	bx	lr
   88296:	bf00      	nop
   88298:	3dcccccd 	.word	0x3dcccccd
   8829c:	3f8ccccd 	.word	0x3f8ccccd
   882a0:	40466666 	.word	0x40466666
   882a4:	40d33333 	.word	0x40d33333
   882a8:	25206625 	.word	0x25206625
   882ac:	66252066 	.word	0x66252066
   882b0:	0a662520 	.word	0x0a662520
   882b4:	0000000d 	.word	0x0000000d
   882b8:	68253d78 	.word	0x68253d78
   882bc:	79202c75 	.word	0x79202c75
   882c0:	7568253d 	.word	0x7568253d
   882c4:	00000d0a 	.word	0x00000d0a

000882c8 <_global_impure_ptr>:
   882c8:	20070280 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   882d8:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   882e8:	46454443 00000000 33323130 37363534     CDEF....01234567
   882f8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   88308:	0000296c 00000030                       l)..0...

00088310 <blanks.7223>:
   88310:	20202020 20202020 20202020 20202020                     

00088320 <zeroes.7224>:
   88320:	30303030 30303030 30303030 30303030     0000000000000000
   88330:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00088340 <__mprec_bigtens>:
   88340:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   88350:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   88360:	7f73bf3c 75154fdd                       <.s..O.u

00088368 <__mprec_tens>:
   88368:	00000000 3ff00000 00000000 40240000     .......?......$@
   88378:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   88388:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   88398:	00000000 412e8480 00000000 416312d0     .......A......cA
   883a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   883b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   883c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   883d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   883e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   883f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   88408:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   88418:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   88428:	79d99db4 44ea7843                       ...yCx.D

00088430 <p05.6055>:
   88430:	00000005 00000019 0000007d 00000043     ........}...C...
   88440:	49534f50 00000058 0000002e              POSIX.......

0008844c <_ctype_>:
   8844c:	20202000 20202020 28282020 20282828     .         ((((( 
   8845c:	20202020 20202020 20202020 20202020                     
   8846c:	10108820 10101010 10101010 10101010      ...............
   8847c:	04040410 04040404 10040404 10101010     ................
   8848c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8849c:	01010101 01010101 01010101 10101010     ................
   884ac:	42421010 42424242 02020202 02020202     ..BBBBBB........
   884bc:	02020202 02020202 02020202 10101010     ................
   884cc:	00000020 00000000 00000000 00000000      ...............
	...

00088550 <_init>:
   88550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88552:	bf00      	nop
   88554:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88556:	bc08      	pop	{r3}
   88558:	469e      	mov	lr, r3
   8855a:	4770      	bx	lr

0008855c <__init_array_start>:
   8855c:	00085261 	.word	0x00085261

00088560 <__frame_dummy_init_array_entry>:
   88560:	00080119                                ....

00088564 <_fini>:
   88564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88566:	bf00      	nop
   88568:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8856a:	bc08      	pop	{r3}
   8856c:	469e      	mov	lr, r3
   8856e:	4770      	bx	lr

00088570 <__fini_array_start>:
   88570:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2007000c:	b470      	push	{r4, r5, r6}
2007000e:	b083      	sub	sp, #12
20070010:	9e06      	ldr	r6, [sp, #24]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070012:	4d1b      	ldr	r5, [pc, #108]	; (20070080 <efc_perform_read_sequence+0x74>)
20070014:	42a8      	cmp	r0, r5
20070016:	bf0c      	ite	eq
20070018:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
2007001c:	f44f 2540 	movne.w	r5, #786432	; 0xc0000
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070020:	b35b      	cbz	r3, 2007007a <efc_perform_read_sequence+0x6e>
20070022:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070024:	6803      	ldr	r3, [r0, #0]
20070026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2007002a:	6003      	str	r3, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2007002c:	b2c9      	uxtb	r1, r1
2007002e:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070032:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070034:	6883      	ldr	r3, [r0, #8]
20070036:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20070038:	9b01      	ldr	r3, [sp, #4]
2007003a:	f013 0f01 	tst.w	r3, #1
2007003e:	d1f9      	bne.n	20070034 <efc_perform_read_sequence+0x28>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070040:	b14e      	cbz	r6, 20070056 <efc_perform_read_sequence+0x4a>
20070042:	4629      	mov	r1, r5
20070044:	1f23      	subs	r3, r4, #4
20070046:	eb05 0586 	add.w	r5, r5, r6, lsl #2
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007004a:	f851 4b04 	ldr.w	r4, [r1], #4
2007004e:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070052:	42a9      	cmp	r1, r5
20070054:	d1f9      	bne.n	2007004a <efc_perform_read_sequence+0x3e>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20070056:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070058:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2007005c:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2007005e:	6883      	ldr	r3, [r0, #8]
20070060:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070062:	9b01      	ldr	r3, [sp, #4]
20070064:	f013 0f01 	tst.w	r3, #1
20070068:	d0f9      	beq.n	2007005e <efc_perform_read_sequence+0x52>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007006a:	6803      	ldr	r3, [r0, #0]
2007006c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070070:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20070072:	2000      	movs	r0, #0
}
20070074:	b003      	add	sp, #12
20070076:	bc70      	pop	{r4, r5, r6}
20070078:	4770      	bx	lr
		return EFC_RC_INVALID;
2007007a:	2002      	movs	r0, #2
2007007c:	e7fa      	b.n	20070074 <efc_perform_read_sequence+0x68>
2007007e:	bf00      	nop
20070080:	400e0a00 	.word	0x400e0a00

20070084 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070084:	6001      	str	r1, [r0, #0]
20070086:	4770      	bx	lr

20070088 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20070088:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007008a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2007008c:	6883      	ldr	r3, [r0, #8]
2007008e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070090:	9b01      	ldr	r3, [sp, #4]
20070092:	f013 0f01 	tst.w	r3, #1
20070096:	d0f9      	beq.n	2007008c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20070098:	9801      	ldr	r0, [sp, #4]
}
2007009a:	f000 0006 	and.w	r0, r0, #6
2007009e:	b002      	add	sp, #8
200700a0:	4770      	bx	lr
200700a2:	bf00      	nop

200700a4 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
200700a8:	4a20      	ldr	r2, [pc, #128]	; (2007012c <SystemInit+0x88>)
200700aa:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200700ac:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200700b2:	4b1f      	ldr	r3, [pc, #124]	; (20070130 <SystemInit+0x8c>)
200700b4:	6a1b      	ldr	r3, [r3, #32]
200700b6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200700ba:	d107      	bne.n	200700cc <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700bc:	4a1d      	ldr	r2, [pc, #116]	; (20070134 <SystemInit+0x90>)
200700be:	4b1c      	ldr	r3, [pc, #112]	; (20070130 <SystemInit+0x8c>)
200700c0:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200700c2:	461a      	mov	r2, r3
200700c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700c6:	f013 0f01 	tst.w	r3, #1
200700ca:	d0fb      	beq.n	200700c4 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700cc:	4a1a      	ldr	r2, [pc, #104]	; (20070138 <SystemInit+0x94>)
200700ce:	4b18      	ldr	r3, [pc, #96]	; (20070130 <SystemInit+0x8c>)
200700d0:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200700d2:	461a      	mov	r2, r3
200700d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200700da:	d0fb      	beq.n	200700d4 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200700dc:	4a14      	ldr	r2, [pc, #80]	; (20070130 <SystemInit+0x8c>)
200700de:	6b13      	ldr	r3, [r2, #48]	; 0x30
200700e0:	f023 0303 	bic.w	r3, r3, #3
200700e4:	f043 0301 	orr.w	r3, r3, #1
200700e8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ec:	f013 0f08 	tst.w	r3, #8
200700f0:	d0fb      	beq.n	200700ea <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200700f2:	4a12      	ldr	r2, [pc, #72]	; (2007013c <SystemInit+0x98>)
200700f4:	4b0e      	ldr	r3, [pc, #56]	; (20070130 <SystemInit+0x8c>)
200700f6:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200700f8:	461a      	mov	r2, r3
200700fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700fc:	f013 0f02 	tst.w	r3, #2
20070100:	d0fb      	beq.n	200700fa <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070102:	2211      	movs	r2, #17
20070104:	4b0a      	ldr	r3, [pc, #40]	; (20070130 <SystemInit+0x8c>)
20070106:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070108:	461a      	mov	r2, r3
2007010a:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007010c:	f013 0f08 	tst.w	r3, #8
20070110:	d0fb      	beq.n	2007010a <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070112:	2212      	movs	r2, #18
20070114:	4b06      	ldr	r3, [pc, #24]	; (20070130 <SystemInit+0x8c>)
20070116:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070118:	461a      	mov	r2, r3
2007011a:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007011c:	f013 0f08 	tst.w	r3, #8
20070120:	d0fb      	beq.n	2007011a <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070122:	4a07      	ldr	r2, [pc, #28]	; (20070140 <SystemInit+0x9c>)
20070124:	4b07      	ldr	r3, [pc, #28]	; (20070144 <SystemInit+0xa0>)
20070126:	601a      	str	r2, [r3, #0]
20070128:	4770      	bx	lr
2007012a:	bf00      	nop
2007012c:	400e0a00 	.word	0x400e0a00
20070130:	400e0600 	.word	0x400e0600
20070134:	00370809 	.word	0x00370809
20070138:	01370809 	.word	0x01370809
2007013c:	200d3f01 	.word	0x200d3f01
20070140:	0501bd00 	.word	0x0501bd00
20070144:	20070274 	.word	0x20070274

20070148 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20070148:	4b1b      	ldr	r3, [pc, #108]	; (200701b8 <system_init_flash+0x70>)
2007014a:	4298      	cmp	r0, r3
2007014c:	d915      	bls.n	2007017a <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2007014e:	4b1b      	ldr	r3, [pc, #108]	; (200701bc <system_init_flash+0x74>)
20070150:	4298      	cmp	r0, r3
20070152:	d919      	bls.n	20070188 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070154:	4b1a      	ldr	r3, [pc, #104]	; (200701c0 <system_init_flash+0x78>)
20070156:	4298      	cmp	r0, r3
20070158:	d91e      	bls.n	20070198 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2007015a:	4b1a      	ldr	r3, [pc, #104]	; (200701c4 <system_init_flash+0x7c>)
2007015c:	4298      	cmp	r0, r3
2007015e:	d923      	bls.n	200701a8 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070160:	4b19      	ldr	r3, [pc, #100]	; (200701c8 <system_init_flash+0x80>)
20070162:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070164:	bf94      	ite	ls
20070166:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
2007016a:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
2007016e:	4a17      	ldr	r2, [pc, #92]	; (200701cc <system_init_flash+0x84>)
20070170:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070172:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070176:	6013      	str	r3, [r2, #0]
20070178:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2007017a:	2300      	movs	r3, #0
2007017c:	4a13      	ldr	r2, [pc, #76]	; (200701cc <system_init_flash+0x84>)
2007017e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070180:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070184:	6013      	str	r3, [r2, #0]
20070186:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20070188:	f44f 7380 	mov.w	r3, #256	; 0x100
2007018c:	4a0f      	ldr	r2, [pc, #60]	; (200701cc <system_init_flash+0x84>)
2007018e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20070190:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070194:	6013      	str	r3, [r2, #0]
20070196:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070198:	f44f 7300 	mov.w	r3, #512	; 0x200
2007019c:	4a0b      	ldr	r2, [pc, #44]	; (200701cc <system_init_flash+0x84>)
2007019e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200701a0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701a4:	6013      	str	r3, [r2, #0]
200701a6:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200701a8:	f44f 7340 	mov.w	r3, #768	; 0x300
200701ac:	4a07      	ldr	r2, [pc, #28]	; (200701cc <system_init_flash+0x84>)
200701ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200701b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701b4:	6013      	str	r3, [r2, #0]
200701b6:	4770      	bx	lr
200701b8:	0121eabf 	.word	0x0121eabf
200701bc:	02faf07f 	.word	0x02faf07f
200701c0:	03d08fff 	.word	0x03d08fff
200701c4:	04c4b3ff 	.word	0x04c4b3ff
200701c8:	055d4a7f 	.word	0x055d4a7f
200701cc:	400e0a00 	.word	0x400e0a00

200701d0 <udi_api_cdc_comm>:
200701d0:	000804f1 0008053d 00080571 0008056d     ....=...q...m...
200701e0:	00000000                                ....

200701e4 <udi_api_cdc_data>:
200701e4:	000808a9 0008054d 00080569 0008056d     ....M...i...m...
200701f4:	00080779                                y...

200701f8 <udc_string_desc_languageid>:
200701f8:	04090304                                ....

200701fc <udc_config>:
200701fc:	20070254 20070208 00000000              T.. ... ....

20070208 <udc_config_fs>:
20070208:	20070210 20070268                       ... h.. 

20070210 <udc_desc_fs>:
20070210:	00430209 c0000102 00040932 02020100     ..C.....2.......
20070220:	24050001 04011000 05020224 01000624     ...$....$...$...
20070230:	03012405 83050701 10004003 00010409     .$.......@......
20070240:	00000a02 81050700 00004002 02020507     .........@......
20070250:	00000040                                @...

20070254 <udc_device_desc>:
20070254:	02000112 40000002 240403eb 00000100     .......@...$....
20070264:	00000100                                ....

20070268 <udi_apis>:
20070268:	200701d0 200701e4                       ... ... 

20070270 <g_interrupt_enabled>:
20070270:	00000001                                ....

20070274 <SystemCoreClock>:
20070274:	003d0900                                ..=.

20070278 <_impure_ptr>:
20070278:	20070280 00000000                       ... ....

20070280 <impure_data>:
20070280:	00000000 2007056c 200705d4 2007063c     ....l.. ... <.. 
	...
20070328:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070338:	0005deec 0000000b 00000000 00000000     ................
	...

200706a8 <__atexit_recursive_mutex>:
200706a8:	20070fc8                                ... 

200706ac <__malloc_av_>:
	...
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 
20070994:	2007098c 2007098c 20070994 20070994     ... ... ... ... 
200709a4:	2007099c 2007099c 200709a4 200709a4     ... ... ... ... 
200709b4:	200709ac 200709ac 200709b4 200709b4     ... ... ... ... 
200709c4:	200709bc 200709bc 200709c4 200709c4     ... ... ... ... 
200709d4:	200709cc 200709cc 200709d4 200709d4     ... ... ... ... 
200709e4:	200709dc 200709dc 200709e4 200709e4     ... ... ... ... 
200709f4:	200709ec 200709ec 200709f4 200709f4     ... ... ... ... 
20070a04:	200709fc 200709fc 20070a04 20070a04     ... ... ... ... 
20070a14:	20070a0c 20070a0c 20070a14 20070a14     ... ... ... ... 
20070a24:	20070a1c 20070a1c 20070a24 20070a24     ... ... $.. $.. 
20070a34:	20070a2c 20070a2c 20070a34 20070a34     ,.. ,.. 4.. 4.. 
20070a44:	20070a3c 20070a3c 20070a44 20070a44     <.. <.. D.. D.. 
20070a54:	20070a4c 20070a4c 20070a54 20070a54     L.. L.. T.. T.. 
20070a64:	20070a5c 20070a5c 20070a64 20070a64     \.. \.. d.. d.. 
20070a74:	20070a6c 20070a6c 20070a74 20070a74     l.. l.. t.. t.. 
20070a84:	20070a7c 20070a7c 20070a84 20070a84     |.. |.. ... ... 
20070a94:	20070a8c 20070a8c 20070a94 20070a94     ... ... ... ... 
20070aa4:	20070a9c 20070a9c 20070aa4 20070aa4     ... ... ... ... 

20070ab4 <__malloc_sbrk_base>:
20070ab4:	ffffffff                                ....

20070ab8 <__malloc_trim_threshold>:
20070ab8:	00020000                                ....

20070abc <__global_locale>:
20070abc:	00000043 00000000 00000000 00000000     C...............
	...
20070adc:	00000043 00000000 00000000 00000000     C...............
	...
20070afc:	00000043 00000000 00000000 00000000     C...............
	...
20070b1c:	00000043 00000000 00000000 00000000     C...............
	...
20070b3c:	00000043 00000000 00000000 00000000     C...............
	...
20070b5c:	00000043 00000000 00000000 00000000     C...............
	...
20070b7c:	00000043 00000000 00000000 00000000     C...............
	...
20070b9c:	00087cd1 00087845 00000000 0008844c     .|..Ex......L...
20070bac:	00088448 000882ec 000882ec 000882ec     H...............
20070bbc:	000882ec 000882ec 000882ec 000882ec     ................
20070bcc:	000882ec 000882ec ffffffff ffffffff     ................
20070bdc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070c04:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
