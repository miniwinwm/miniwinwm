
MiniWinFile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002cc20  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000acc20  000acc20  0003cc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c20  20070000  000acc28  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000023c0  20070c20  000ad848  00040c20  2**2
                  ALLOC
  4 .stack        00002000  20072fe0  000afc08  00040c20  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00040c20  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00040c49  2**0
                  CONTENTS, READONLY
  7 .debug_info   00071010  00000000  00000000  00040ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000c7ed  00000000  00000000  000b1cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00046eff  00000000  00000000  000be49f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001c70  00000000  00000000  0010539e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000090d8  00000000  00000000  0010700e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002744f  00000000  00000000  001100e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000361bf  00000000  00000000  00137535  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007d751  00000000  00000000  0016d6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000063cc  00000000  00000000  001eae48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e0 4f 07 20 4d f1 09 00 49 f1 09 00 49 f1 09 00     .O. M...I...I...
   80010:	49 f1 09 00 49 f1 09 00 49 f1 09 00 00 00 00 00     I...I...I.......
	...
   8002c:	49 f1 09 00 49 f1 09 00 00 00 00 00 49 f1 09 00     I...I.......I...
   8003c:	49 f1 09 00 49 f1 09 00 49 f1 09 00 49 f1 09 00     I...I...I...I...
   8004c:	49 f1 09 00 49 f1 09 00 49 f1 09 00 49 f1 09 00     I...I...I...I...
   8005c:	49 f1 09 00 49 f1 09 00 49 f1 09 00 00 00 00 00     I...I...I.......
   8006c:	ad b9 09 00 79 ba 09 00 45 bb 09 00 11 bc 09 00     ....y...E.......
	...
   80084:	49 f1 09 00 49 f1 09 00 49 f1 09 00 49 f1 09 00     I...I...I...I...
   80094:	49 f1 09 00 49 f1 09 00 49 f1 09 00 49 f1 09 00     I...I...I...I...
   800a4:	00 00 00 00 49 f1 09 00 8d 78 08 00 49 f1 09 00     ....I....x..I...
   800b4:	49 f1 09 00 49 f1 09 00 49 f1 09 00 49 f1 09 00     I...I...I...I...
   800c4:	49 f1 09 00 49 f1 09 00 49 f1 09 00 49 f1 09 00     I...I...I...I...
   800d4:	49 f1 09 00 49 f1 09 00 49 f1 09 00 3d ca 09 00     I...I...I...=...
   800e4:	49 f1 09 00 49 f1 09 00 49 f1 09 00 49 f1 09 00     I...I...I...I...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070c20 	.word	0x20070c20
   80110:	00000000 	.word	0x00000000
   80114:	000acc28 	.word	0x000acc28

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000acc28 	.word	0x000acc28
   80154:	20070c24 	.word	0x20070c24
   80158:	000acc28 	.word	0x000acc28
   8015c:	00000000 	.word	0x00000000

00080160 <main>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

int main(void)
{
   80160:	b508      	push	{r3, lr}
	/* initialize non-miniwin parts of the application */
	app_init();
   80162:	4b04      	ldr	r3, [pc, #16]	; (80174 <main+0x14>)
   80164:	4798      	blx	r3

	/* initialize miniwin */
	mw_init();
   80166:	4b04      	ldr	r3, [pc, #16]	; (80178 <main+0x18>)
   80168:	4798      	blx	r3
   8016a:	4d04      	ldr	r5, [pc, #16]	; (8017c <main+0x1c>)
   8016c:	4c04      	ldr	r4, [pc, #16]	; (80180 <main+0x20>)

	while (true)
	{
		/* do non-miniwin parts of application main loop processing */
    	app_main_loop_process();
   8016e:	47a8      	blx	r5

    	/* do miniwin message processing */
		(void)mw_process_message();
   80170:	47a0      	blx	r4
   80172:	e7fc      	b.n	8016e <main+0xe>
   80174:	00099955 	.word	0x00099955
   80178:	0008dccd 	.word	0x0008dccd
   8017c:	00099a65 	.word	0x00099a65
   80180:	00091b71 	.word	0x00091b71

00080184 <expand_node_array>:
/**********************
*** LOCAL FUNCTIONS ***
**********************/

static void expand_node_array(struct mw_tree_container_t *tree)
{
   80184:	b570      	push	{r4, r5, r6, lr}
	uint16_t new_node_array_size = mw_tree_container_get_size_node_array(tree) + 5U;
   80186:	4b0b      	ldr	r3, [pc, #44]	; (801b4 <expand_node_array+0x30>)
{
   80188:	4605      	mov	r5, r0
	uint16_t new_node_array_size = mw_tree_container_get_size_node_array(tree) + 5U;
   8018a:	4798      	blx	r3
   8018c:	3005      	adds	r0, #5
   8018e:	b284      	uxth	r4, r0
	void *new_node_array = realloc(mw_tree_container_get_node_array(tree), new_node_array_size * sizeof(mw_tree_container_node_t));
   80190:	4b09      	ldr	r3, [pc, #36]	; (801b8 <expand_node_array+0x34>)
   80192:	4628      	mov	r0, r5
   80194:	4798      	blx	r3
   80196:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   8019a:	00c9      	lsls	r1, r1, #3
   8019c:	4b07      	ldr	r3, [pc, #28]	; (801bc <expand_node_array+0x38>)
   8019e:	4798      	blx	r3

	if (new_node_array == NULL)
   801a0:	b130      	cbz	r0, 801b0 <expand_node_array+0x2c>
		/* realloc failed */
		return;
	}

	/* realloc success so set new array and size, contents copied automatically */
	mw_tree_container_set_new_node_array(tree, (mw_tree_container_node_t *)new_node_array, new_node_array_size);
   801a2:	4622      	mov	r2, r4
   801a4:	4601      	mov	r1, r0
   801a6:	4b06      	ldr	r3, [pc, #24]	; (801c0 <expand_node_array+0x3c>)
   801a8:	4628      	mov	r0, r5
}
   801aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	mw_tree_container_set_new_node_array(tree, (mw_tree_container_node_t *)new_node_array, new_node_array_size);
   801ae:	4718      	bx	r3
   801b0:	bd70      	pop	{r4, r5, r6, pc}
   801b2:	bf00      	nop
   801b4:	0009614d 	.word	0x0009614d
   801b8:	00096171 	.word	0x00096171
   801bc:	000a5ad9 	.word	0x000a5ad9
   801c0:	00096199 	.word	0x00096199

000801c4 <mw_user_root_paint_function>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

void mw_user_root_paint_function(const mw_gl_draw_info_t *draw_info)
{
   801c4:	b530      	push	{r4, r5, lr}
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_PURPLE);
   801c6:	4b0e      	ldr	r3, [pc, #56]	; (80200 <mw_user_root_paint_function+0x3c>)
{
   801c8:	b083      	sub	sp, #12
   801ca:	4604      	mov	r4, r0
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_PURPLE);
   801cc:	f04f 1099 	mov.w	r0, #10027161	; 0x990099
   801d0:	4798      	blx	r3
	mw_gl_clear_pattern();
   801d2:	4b0c      	ldr	r3, [pc, #48]	; (80204 <mw_user_root_paint_function+0x40>)
   801d4:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   801d6:	2000      	movs	r0, #0
   801d8:	4b0b      	ldr	r3, [pc, #44]	; (80208 <mw_user_root_paint_function+0x44>)
   801da:	4798      	blx	r3
	mw_gl_set_fill(MW_GL_FILL);
   801dc:	2001      	movs	r0, #1
   801de:	4b0b      	ldr	r3, [pc, #44]	; (8020c <mw_user_root_paint_function+0x48>)
   801e0:	4798      	blx	r3
	mw_gl_rectangle(draw_info, 0, 0, MW_ROOT_WIDTH, MW_ROOT_HEIGHT);
   801e2:	4b0b      	ldr	r3, [pc, #44]	; (80210 <mw_user_root_paint_function+0x4c>)
   801e4:	4798      	blx	r3
   801e6:	4b0b      	ldr	r3, [pc, #44]	; (80214 <mw_user_root_paint_function+0x50>)
   801e8:	4605      	mov	r5, r0
   801ea:	4798      	blx	r3
   801ec:	2200      	movs	r2, #0
   801ee:	9000      	str	r0, [sp, #0]
   801f0:	462b      	mov	r3, r5
   801f2:	4620      	mov	r0, r4
   801f4:	4611      	mov	r1, r2
   801f6:	4c08      	ldr	r4, [pc, #32]	; (80218 <mw_user_root_paint_function+0x54>)
   801f8:	47a0      	blx	r4
}
   801fa:	b003      	add	sp, #12
   801fc:	bd30      	pop	{r4, r5, pc}
   801fe:	bf00      	nop
   80200:	000846c9 	.word	0x000846c9
   80204:	000846e1 	.word	0x000846e1
   80208:	000846f1 	.word	0x000846f1
   8020c:	000846fd 	.word	0x000846fd
   80210:	00086e2d 	.word	0x00086e2d
   80214:	00086e31 	.word	0x00086e31
   80218:	000850e1 	.word	0x000850e1

0008021c <mw_user_root_message_function>:

void mw_user_root_message_function(const mw_message_t *message)
{
   8021c:	4770      	bx	lr
   8021e:	bf00      	nop

00080220 <mw_user_init>:
	(void)message;
}

void mw_user_init(void)
{
   80220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_util_rect_t r;
	mw_handle_t intermediate_handle;

	mw_util_set_rect(&r, 5, 0, 230, 263);
   80224:	f240 1307 	movw	r3, #263	; 0x107
	window_file_tree_handle = mw_add_window(&r,
   80228:	2400      	movs	r4, #0
   8022a:	270b      	movs	r7, #11
{
   8022c:	b089      	sub	sp, #36	; 0x24
	mw_util_set_rect(&r, 5, 0, 230, 263);
   8022e:	f8df a27c 	ldr.w	sl, [pc, #636]	; 804ac <mw_user_init+0x28c>
   80232:	9300      	str	r3, [sp, #0]
   80234:	a806      	add	r0, sp, #24
   80236:	4622      	mov	r2, r4
   80238:	23e6      	movs	r3, #230	; 0xe6
   8023a:	2105      	movs	r1, #5
   8023c:	47d0      	blx	sl
	window_file_tree_handle = mw_add_window(&r,
   8023e:	f8df 9270 	ldr.w	r9, [pc, #624]	; 804b0 <mw_user_init+0x290>
   80242:	9702      	str	r7, [sp, #8]
   80244:	4a6f      	ldr	r2, [pc, #444]	; (80404 <mw_user_init+0x1e4>)
   80246:	4970      	ldr	r1, [pc, #448]	; (80408 <mw_user_init+0x1e8>)
   80248:	a806      	add	r0, sp, #24
   8024a:	9403      	str	r4, [sp, #12]
   8024c:	9401      	str	r4, [sp, #4]
   8024e:	9400      	str	r4, [sp, #0]
   80250:	4b6e      	ldr	r3, [pc, #440]	; (8040c <mw_user_init+0x1ec>)
   80252:	47c8      	blx	r9
   80254:	f8df 825c 	ldr.w	r8, [pc, #604]	; 804b4 <mw_user_init+0x294>
			NULL,
			0,
			MW_WINDOW_FLAG_HAS_BORDER | MW_WINDOW_FLAG_HAS_TITLE_BAR | MW_WINDOW_FLAG_IS_VISIBLE,
			NULL);

	nodes_array = (mw_tree_container_node_t *)malloc(sizeof(mw_tree_container_node_t) * (size_t)12);
   80258:	4b6d      	ldr	r3, [pc, #436]	; (80410 <mw_user_init+0x1f0>)
	window_file_tree_handle = mw_add_window(&r,
   8025a:	f8c8 0000 	str.w	r0, [r8]
	nodes_array = (mw_tree_container_node_t *)malloc(sizeof(mw_tree_container_node_t) * (size_t)12);
   8025e:	f44f 7090 	mov.w	r0, #288	; 0x120
   80262:	4798      	blx	r3
   80264:	4683      	mov	fp, r0
	tree_data.number_of_lines = 9U;
   80266:	2009      	movs	r0, #9
   80268:	4d6a      	ldr	r5, [pc, #424]	; (80414 <mw_user_init+0x1f4>)
	tree_data.file_icon = mw_bitmaps_file_icon_large;
   8026a:	496b      	ldr	r1, [pc, #428]	; (80418 <mw_user_init+0x1f8>)
	tree_data.folder_icon = mw_bitmaps_folder_icon_large;
   8026c:	4a6b      	ldr	r2, [pc, #428]	; (8041c <mw_user_init+0x1fc>)
	intermediate_handle = mw_tree_container_init(&tree_data.tree_container,
   8026e:	4b6c      	ldr	r3, [pc, #432]	; (80420 <mw_user_init+0x200>)
	tree_data.file_icon = mw_bitmaps_file_icon_large;
   80270:	62a9      	str	r1, [r5, #40]	; 0x28
	tree_data.folder_icon = mw_bitmaps_folder_icon_large;
   80272:	626a      	str	r2, [r5, #36]	; 0x24
	tree_data.number_of_lines = 9U;
   80274:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
	intermediate_handle = mw_tree_container_init(&tree_data.tree_container,
   80278:	262f      	movs	r6, #47	; 0x2f
   8027a:	4798      	blx	r3
   8027c:	4a69      	ldr	r2, [pc, #420]	; (80424 <mw_user_init+0x204>)
   8027e:	4603      	mov	r3, r0
   80280:	4659      	mov	r1, fp
   80282:	9603      	str	r6, [sp, #12]
   80284:	9202      	str	r2, [sp, #8]
   80286:	9401      	str	r4, [sp, #4]
   80288:	9400      	str	r4, [sp, #0]
   8028a:	4628      	mov	r0, r5
   8028c:	220c      	movs	r2, #12
   8028e:	4e66      	ldr	r6, [pc, #408]	; (80428 <mw_user_init+0x208>)
   80290:	47b0      	blx	r6
			0U,
			0U,
			expand_node_array,
			'/');
	tree_data.root_handle = intermediate_handle;
	tree_handle = mw_ui_tree_add_new(5,
   80292:	2105      	movs	r1, #5
   80294:	f8d8 3000 	ldr.w	r3, [r8]
	tree_data.root_handle = intermediate_handle;
   80298:	6228      	str	r0, [r5, #32]
	tree_handle = mw_ui_tree_add_new(5,
   8029a:	22be      	movs	r2, #190	; 0xbe
   8029c:	9501      	str	r5, [sp, #4]
   8029e:	9700      	str	r7, [sp, #0]
   802a0:	4608      	mov	r0, r1
   802a2:	4d62      	ldr	r5, [pc, #392]	; (8042c <mw_user_init+0x20c>)
   802a4:	47a8      	blx	r5
   802a6:	4962      	ldr	r1, [pc, #392]	; (80430 <mw_user_init+0x210>)
			190,
			window_file_tree_handle,
			MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED | MW_CONTROL_FLAG_LARGE_SIZE,
			&tree_data);

	scroll_bar_vert_handle = mw_ui_scroll_bar_vert_add_new(200,
   802a8:	4a62      	ldr	r2, [pc, #392]	; (80434 <mw_user_init+0x214>)
   802aa:	f8d8 3000 	ldr.w	r3, [r8]
   802ae:	4d62      	ldr	r5, [pc, #392]	; (80438 <mw_user_init+0x218>)
   802b0:	9700      	str	r7, [sp, #0]
	tree_handle = mw_ui_tree_add_new(5,
   802b2:	6008      	str	r0, [r1, #0]
	scroll_bar_vert_handle = mw_ui_scroll_bar_vert_add_new(200,
   802b4:	9201      	str	r2, [sp, #4]
   802b6:	2105      	movs	r1, #5
   802b8:	22c6      	movs	r2, #198	; 0xc6
   802ba:	20c8      	movs	r0, #200	; 0xc8
   802bc:	47a8      	blx	r5
			&scroll_bar_vert_data);

	(void)mw_util_safe_strcpy(label_path_data.label,
			MW_UI_LABEL_MAX_CHARS,
			"Not set");
	label_path_handle = mw_ui_label_add_new(5,
   802be:	2503      	movs	r5, #3
	scroll_bar_vert_handle = mw_ui_scroll_bar_vert_add_new(200,
   802c0:	4b5e      	ldr	r3, [pc, #376]	; (8043c <mw_user_init+0x21c>)
	(void)mw_util_safe_strcpy(label_path_data.label,
   802c2:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 804b8 <mw_user_init+0x298>
   802c6:	4e5e      	ldr	r6, [pc, #376]	; (80440 <mw_user_init+0x220>)
	scroll_bar_vert_handle = mw_ui_scroll_bar_vert_add_new(200,
   802c8:	6018      	str	r0, [r3, #0]
	(void)mw_util_safe_strcpy(label_path_data.label,
   802ca:	4a5e      	ldr	r2, [pc, #376]	; (80444 <mw_user_init+0x224>)
   802cc:	4658      	mov	r0, fp
   802ce:	2128      	movs	r1, #40	; 0x28
   802d0:	47b0      	blx	r6
	label_path_handle = mw_ui_label_add_new(5,
   802d2:	f8d8 3000 	ldr.w	r3, [r8]
   802d6:	22dc      	movs	r2, #220	; 0xdc
   802d8:	e88d 0820 	stmia.w	sp, {r5, fp}
   802dc:	21d0      	movs	r1, #208	; 0xd0
   802de:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 804bc <mw_user_init+0x29c>
   802e2:	2005      	movs	r0, #5
   802e4:	47d8      	blx	fp
			220,
			window_file_tree_handle,
			MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED,
			&label_path_data);

	(void)mw_util_safe_strcpy(button_show_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Show");
   802e6:	4b58      	ldr	r3, [pc, #352]	; (80448 <mw_user_init+0x228>)
	label_path_handle = mw_ui_label_add_new(5,
   802e8:	4958      	ldr	r1, [pc, #352]	; (8044c <mw_user_init+0x22c>)
	(void)mw_util_safe_strcpy(button_show_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Show");
   802ea:	4a59      	ldr	r2, [pc, #356]	; (80450 <mw_user_init+0x230>)
	label_path_handle = mw_ui_label_add_new(5,
   802ec:	6008      	str	r0, [r1, #0]
	(void)mw_util_safe_strcpy(button_show_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Show");
   802ee:	210a      	movs	r1, #10
   802f0:	4618      	mov	r0, r3
   802f2:	9305      	str	r3, [sp, #20]
   802f4:	47b0      	blx	r6
	button_open_handle = mw_ui_button_add_new(5,
   802f6:	9b05      	ldr	r3, [sp, #20]
   802f8:	f8d8 2000 	ldr.w	r2, [r8]
   802fc:	21e1      	movs	r1, #225	; 0xe1
   802fe:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 804c0 <mw_user_init+0x2a0>
   80302:	9300      	str	r3, [sp, #0]
   80304:	2005      	movs	r0, #5
   80306:	462b      	mov	r3, r5
   80308:	47c0      	blx	r8
			225,
			window_file_tree_handle,
			MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED,
			&button_show_data);

	mw_util_set_rect(&r, 15, 70, 162, 128);
   8030a:	2380      	movs	r3, #128	; 0x80
   8030c:	9300      	str	r3, [sp, #0]
	button_open_handle = mw_ui_button_add_new(5,
   8030e:	4b51      	ldr	r3, [pc, #324]	; (80454 <mw_user_init+0x234>)
	mw_util_set_rect(&r, 15, 70, 162, 128);
   80310:	2246      	movs	r2, #70	; 0x46
	button_open_handle = mw_ui_button_add_new(5,
   80312:	6018      	str	r0, [r3, #0]
	mw_util_set_rect(&r, 15, 70, 162, 128);
   80314:	210f      	movs	r1, #15
   80316:	a806      	add	r0, sp, #24
   80318:	23a2      	movs	r3, #162	; 0xa2
   8031a:	47d0      	blx	sl
	window_file_handle = mw_add_window(&r,
   8031c:	9702      	str	r7, [sp, #8]
   8031e:	9403      	str	r4, [sp, #12]
   80320:	9401      	str	r4, [sp, #4]
   80322:	9400      	str	r4, [sp, #0]
   80324:	a806      	add	r0, sp, #24
   80326:	4b4c      	ldr	r3, [pc, #304]	; (80458 <mw_user_init+0x238>)
   80328:	4a4c      	ldr	r2, [pc, #304]	; (8045c <mw_user_init+0x23c>)
   8032a:	494d      	ldr	r1, [pc, #308]	; (80460 <mw_user_init+0x240>)
   8032c:	47c8      	blx	r9
   8032e:	4f4d      	ldr	r7, [pc, #308]	; (80464 <mw_user_init+0x244>)
			NULL,
			0,
			MW_WINDOW_FLAG_HAS_BORDER | MW_WINDOW_FLAG_HAS_TITLE_BAR | MW_WINDOW_FLAG_IS_VISIBLE,
			NULL);

	(void)mw_util_safe_strcpy(button_open_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Open");
   80330:	4b4d      	ldr	r3, [pc, #308]	; (80468 <mw_user_init+0x248>)
	window_file_handle = mw_add_window(&r,
   80332:	6038      	str	r0, [r7, #0]
	(void)mw_util_safe_strcpy(button_open_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Open");
   80334:	4a4d      	ldr	r2, [pc, #308]	; (8046c <mw_user_init+0x24c>)
   80336:	4618      	mov	r0, r3
   80338:	210a      	movs	r1, #10
   8033a:	9305      	str	r3, [sp, #20]
   8033c:	47b0      	blx	r6
	button_open_handle = mw_ui_button_add_new(20,
   8033e:	9b05      	ldr	r3, [sp, #20]
   80340:	683a      	ldr	r2, [r7, #0]
   80342:	214b      	movs	r1, #75	; 0x4b
   80344:	9300      	str	r3, [sp, #0]
   80346:	2014      	movs	r0, #20
   80348:	462b      	mov	r3, r5
   8034a:	47c0      	blx	r8
			75,
			window_file_handle,
			MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED,
			&button_open_data);

	(void)mw_util_safe_strcpy(button_set_clock_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Set");
   8034c:	4b48      	ldr	r3, [pc, #288]	; (80470 <mw_user_init+0x250>)
	button_open_handle = mw_ui_button_add_new(20,
   8034e:	4a41      	ldr	r2, [pc, #260]	; (80454 <mw_user_init+0x234>)
	(void)mw_util_safe_strcpy(button_set_clock_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Set");
   80350:	210a      	movs	r1, #10
	button_open_handle = mw_ui_button_add_new(20,
   80352:	6010      	str	r0, [r2, #0]
	(void)mw_util_safe_strcpy(button_set_clock_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Set");
   80354:	4a47      	ldr	r2, [pc, #284]	; (80474 <mw_user_init+0x254>)
   80356:	4618      	mov	r0, r3
   80358:	9305      	str	r3, [sp, #20]
   8035a:	47b0      	blx	r6
	button_set_clock_handle = mw_ui_button_add_new(95,
   8035c:	9b05      	ldr	r3, [sp, #20]
   8035e:	683a      	ldr	r2, [r7, #0]
   80360:	2119      	movs	r1, #25
   80362:	9300      	str	r3, [sp, #0]
   80364:	205f      	movs	r0, #95	; 0x5f
   80366:	462b      	mov	r3, r5
   80368:	47c0      	blx	r8
			25,
			window_file_handle,
			MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED,
			&button_set_clock_data);

	(void)mw_util_safe_strcpy(button_create_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Create");
   8036a:	4b43      	ldr	r3, [pc, #268]	; (80478 <mw_user_init+0x258>)
	button_set_clock_handle = mw_ui_button_add_new(95,
   8036c:	4943      	ldr	r1, [pc, #268]	; (8047c <mw_user_init+0x25c>)
	(void)mw_util_safe_strcpy(button_create_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Create");
   8036e:	4a44      	ldr	r2, [pc, #272]	; (80480 <mw_user_init+0x260>)
	button_set_clock_handle = mw_ui_button_add_new(95,
   80370:	6008      	str	r0, [r1, #0]
	(void)mw_util_safe_strcpy(button_create_data.button_label, MW_UI_BUTTON_LABEL_MAX_CHARS, "Create");
   80372:	210a      	movs	r1, #10
   80374:	4618      	mov	r0, r3
   80376:	9305      	str	r3, [sp, #20]
   80378:	47b0      	blx	r6
	button_create_handle = mw_ui_button_add_new(90,
   8037a:	9b05      	ldr	r3, [sp, #20]
   8037c:	683a      	ldr	r2, [r7, #0]
   8037e:	214b      	movs	r1, #75	; 0x4b
   80380:	9300      	str	r3, [sp, #0]
   80382:	205a      	movs	r0, #90	; 0x5a
   80384:	2301      	movs	r3, #1
   80386:	47c0      	blx	r8
			75,
			window_file_handle,
			MW_CONTROL_FLAG_IS_VISIBLE,
			&button_create_data);

	(void)mw_util_safe_strcpy(label_time_data.label,
   80388:	4b3e      	ldr	r3, [pc, #248]	; (80484 <mw_user_init+0x264>)
   8038a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 804c4 <mw_user_init+0x2a4>
	button_create_handle = mw_ui_button_add_new(90,
   8038e:	4a3e      	ldr	r2, [pc, #248]	; (80488 <mw_user_init+0x268>)
	(void)mw_util_safe_strcpy(label_time_data.label,
   80390:	2128      	movs	r1, #40	; 0x28
	button_create_handle = mw_ui_button_add_new(90,
   80392:	6010      	str	r0, [r2, #0]
	(void)mw_util_safe_strcpy(label_time_data.label,
   80394:	4642      	mov	r2, r8
   80396:	4618      	mov	r0, r3
   80398:	9305      	str	r3, [sp, #20]
   8039a:	47b0      	blx	r6
			MW_UI_LABEL_MAX_CHARS,
			"Waiting...");
	label_time_handle = mw_ui_label_add_new(10,
   8039c:	683a      	ldr	r2, [r7, #0]
   8039e:	9b05      	ldr	r3, [sp, #20]
   803a0:	9500      	str	r5, [sp, #0]
   803a2:	9301      	str	r3, [sp, #4]
   803a4:	2114      	movs	r1, #20
   803a6:	4613      	mov	r3, r2
   803a8:	200a      	movs	r0, #10
   803aa:	2246      	movs	r2, #70	; 0x46
   803ac:	47d8      	blx	fp
			70,
			window_file_handle,
			MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED,
			&label_time_data);

	(void)mw_util_safe_strcpy(label_date_data.label,
   803ae:	4b37      	ldr	r3, [pc, #220]	; (8048c <mw_user_init+0x26c>)
	label_time_handle = mw_ui_label_add_new(10,
   803b0:	4937      	ldr	r1, [pc, #220]	; (80490 <mw_user_init+0x270>)
	(void)mw_util_safe_strcpy(label_date_data.label,
   803b2:	4642      	mov	r2, r8
	label_time_handle = mw_ui_label_add_new(10,
   803b4:	6008      	str	r0, [r1, #0]
	(void)mw_util_safe_strcpy(label_date_data.label,
   803b6:	2128      	movs	r1, #40	; 0x28
   803b8:	4618      	mov	r0, r3
   803ba:	9305      	str	r3, [sp, #20]
   803bc:	47b0      	blx	r6
			MW_UI_LABEL_MAX_CHARS,
			"Waiting...");
	label_date_handle = mw_ui_label_add_new(10,
   803be:	683a      	ldr	r2, [r7, #0]
   803c0:	9b05      	ldr	r3, [sp, #20]
   803c2:	9500      	str	r5, [sp, #0]
   803c4:	9301      	str	r3, [sp, #4]
   803c6:	2123      	movs	r1, #35	; 0x23
   803c8:	4613      	mov	r3, r2
   803ca:	200a      	movs	r0, #10
   803cc:	2246      	movs	r2, #70	; 0x46
   803ce:	47d8      	blx	fp
			70,
			window_file_handle,
			MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED,
			&label_date_data);

	mw_util_set_rect(&r, 50, 50, 180, 205);
   803d0:	2232      	movs	r2, #50	; 0x32
   803d2:	21cd      	movs	r1, #205	; 0xcd
	label_date_handle = mw_ui_label_add_new(10,
   803d4:	4b2f      	ldr	r3, [pc, #188]	; (80494 <mw_user_init+0x274>)
	mw_util_set_rect(&r, 50, 50, 180, 205);
   803d6:	9100      	str	r1, [sp, #0]
	label_date_handle = mw_ui_label_add_new(10,
   803d8:	6018      	str	r0, [r3, #0]
	mw_util_set_rect(&r, 50, 50, 180, 205);
   803da:	4611      	mov	r1, r2
   803dc:	a806      	add	r0, sp, #24
   803de:	23b4      	movs	r3, #180	; 0xb4
   803e0:	47d0      	blx	sl
	window_selection_handle = mw_add_window(&r,
   803e2:	492d      	ldr	r1, [pc, #180]	; (80498 <mw_user_init+0x278>)
   803e4:	9403      	str	r4, [sp, #12]
   803e6:	9502      	str	r5, [sp, #8]
   803e8:	9401      	str	r4, [sp, #4]
   803ea:	9400      	str	r4, [sp, #0]
   803ec:	a806      	add	r0, sp, #24
   803ee:	4b2b      	ldr	r3, [pc, #172]	; (8049c <mw_user_init+0x27c>)
   803f0:	4a2b      	ldr	r2, [pc, #172]	; (804a0 <mw_user_init+0x280>)
   803f2:	47c8      	blx	r9
   803f4:	4a2b      	ldr	r2, [pc, #172]	; (804a4 <mw_user_init+0x284>)
			NULL,
			0,
			MW_WINDOW_FLAG_HAS_BORDER | MW_WINDOW_FLAG_HAS_TITLE_BAR,
			NULL);

	mw_paint_all();
   803f6:	4b2c      	ldr	r3, [pc, #176]	; (804a8 <mw_user_init+0x288>)
	window_selection_handle = mw_add_window(&r,
   803f8:	6010      	str	r0, [r2, #0]
	mw_paint_all();
   803fa:	4798      	blx	r3
}
   803fc:	b009      	add	sp, #36	; 0x24
   803fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80402:	bf00      	nop
   80404:	00080d95 	.word	0x00080d95
   80408:	000a63e0 	.word	0x000a63e0
   8040c:	00080e21 	.word	0x00080e21
   80410:	000a52e1 	.word	0x000a52e1
   80414:	20070cf4 	.word	0x20070cf4
   80418:	000a674c 	.word	0x000a674c
   8041c:	000a679c 	.word	0x000a679c
   80420:	00099bb5 	.word	0x00099bb5
   80424:	00080185 	.word	0x00080185
   80428:	00096055 	.word	0x00096055
   8042c:	000997f5 	.word	0x000997f5
   80430:	20072f74 	.word	0x20072f74
   80434:	20070cf0 	.word	0x20070cf0
   80438:	00098dd9 	.word	0x00098dd9
   8043c:	20072f78 	.word	0x20072f78
   80440:	00096f31 	.word	0x00096f31
   80444:	000a63ec 	.word	0x000a63ec
   80448:	20070c60 	.word	0x20070c60
   8044c:	20072f8c 	.word	0x20072f8c
   80450:	000a63f4 	.word	0x000a63f4
   80454:	20072f70 	.word	0x20072f70
   80458:	000805e1 	.word	0x000805e1
   8045c:	000804c9 	.word	0x000804c9
   80460:	000a63fc 	.word	0x000a63fc
   80464:	20072f90 	.word	0x20072f90
   80468:	20070c48 	.word	0x20070c48
   8046c:	000a6408 	.word	0x000a6408
   80470:	20070c54 	.word	0x20070c54
   80474:	000a6410 	.word	0x000a6410
   80478:	20070c3c 	.word	0x20070c3c
   8047c:	20072f68 	.word	0x20072f68
   80480:	000a6414 	.word	0x000a6414
   80484:	20070cc4 	.word	0x20070cc4
   80488:	20072f84 	.word	0x20072f84
   8048c:	20070c6c 	.word	0x20070c6c
   80490:	20072f7c 	.word	0x20072f7c
   80494:	20072f94 	.word	0x20072f94
   80498:	000a6428 	.word	0x000a6428
   8049c:	000815b5 	.word	0x000815b5
   804a0:	0008148d 	.word	0x0008148d
   804a4:	20072f6c 	.word	0x20072f6c
   804a8:	00095ab1 	.word	0x00095ab1
   804ac:	00096e3d 	.word	0x00096e3d
   804b0:	0008e94d 	.word	0x0008e94d
   804b4:	20072f88 	.word	0x20072f88
   804b8:	20070c98 	.word	0x20070c98
   804bc:	00098371 	.word	0x00098371
   804c0:	00097985 	.word	0x00097985
   804c4:	000a641c 	.word	0x000a641c

000804c8 <window_file_paint_function>:
*** GLOBAL FUNCTIONS ***
***********************/

void window_file_paint_function(mw_handle_t window_handle, const mw_gl_draw_info_t *draw_info)
{
	MW_ASSERT(draw_info != (void*)0, "Null pointer parameter");
   804c8:	1c0b      	adds	r3, r1, #0
   804ca:	bf18      	it	ne
   804cc:	2301      	movne	r3, #1
{
   804ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   804d2:	4681      	mov	r9, r0
   804d4:	b087      	sub	sp, #28
	MW_ASSERT(draw_info != (void*)0, "Null pointer parameter");
   804d6:	f240 1205 	movw	r2, #261	; 0x105
   804da:	460c      	mov	r4, r1
   804dc:	4618      	mov	r0, r3
   804de:	492e      	ldr	r1, [pc, #184]	; (80598 <window_file_paint_function+0xd0>)
   804e0:	4b2e      	ldr	r3, [pc, #184]	; (8059c <window_file_paint_function+0xd4>)
   804e2:	4d2f      	ldr	r5, [pc, #188]	; (805a0 <window_file_paint_function+0xd8>)
   804e4:	47a8      	blx	r5

	mw_gl_set_fill(MW_GL_FILL);
   804e6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 805dc <window_file_paint_function+0x114>
   804ea:	2001      	movs	r0, #1
   804ec:	47c0      	blx	r8
	mw_gl_set_line(MW_GL_SOLID_LINE);
   804ee:	4e2d      	ldr	r6, [pc, #180]	; (805a4 <window_file_paint_function+0xdc>)
   804f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   804f4:	47b0      	blx	r6
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_WHITE);
   804f6:	4b2c      	ldr	r3, [pc, #176]	; (805a8 <window_file_paint_function+0xe0>)
   804f8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   804fc:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   804fe:	4f2b      	ldr	r7, [pc, #172]	; (805ac <window_file_paint_function+0xe4>)
   80500:	2000      	movs	r0, #0
   80502:	47b8      	blx	r7
	mw_gl_clear_pattern();
   80504:	4b2a      	ldr	r3, [pc, #168]	; (805b0 <window_file_paint_function+0xe8>)
   80506:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
			0,
			0,
			mw_get_window_client_rect(window_handle).width,
   80508:	4d2a      	ldr	r5, [pc, #168]	; (805b4 <window_file_paint_function+0xec>)
   8050a:	4649      	mov	r1, r9
   8050c:	a802      	add	r0, sp, #8
   8050e:	47a8      	blx	r5
			mw_get_window_client_rect(window_handle).height);
   80510:	4649      	mov	r1, r9
   80512:	a804      	add	r0, sp, #16
	mw_gl_rectangle(draw_info,
   80514:	f9bd 900c 	ldrsh.w	r9, [sp, #12]
			mw_get_window_client_rect(window_handle).height);
   80518:	47a8      	blx	r5
	mw_gl_rectangle(draw_info,
   8051a:	2200      	movs	r2, #0
   8051c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
   80520:	464b      	mov	r3, r9
   80522:	4611      	mov	r1, r2
   80524:	4620      	mov	r0, r4
   80526:	9500      	str	r5, [sp, #0]
   80528:	4d23      	ldr	r5, [pc, #140]	; (805b8 <window_file_paint_function+0xf0>)
   8052a:	47a8      	blx	r5

	/* Draw rectangles */
	mw_gl_set_fill(MW_GL_NO_FILL);
   8052c:	2000      	movs	r0, #0
   8052e:	47c0      	blx	r8
	mw_gl_set_border(MW_GL_BORDER_ON);
   80530:	2001      	movs	r0, #1
   80532:	47b8      	blx	r7
	mw_gl_set_line(MW_GL_SOLID_LINE);
   80534:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80538:	47b0      	blx	r6
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   8053a:	4e20      	ldr	r6, [pc, #128]	; (805bc <window_file_paint_function+0xf4>)
   8053c:	2000      	movs	r0, #0
   8053e:	47b0      	blx	r6
	mw_gl_rectangle(draw_info, 5, 7, 150, 50);
   80540:	2332      	movs	r3, #50	; 0x32
   80542:	4620      	mov	r0, r4
   80544:	9300      	str	r3, [sp, #0]
   80546:	2207      	movs	r2, #7
   80548:	2396      	movs	r3, #150	; 0x96
   8054a:	2105      	movs	r1, #5
   8054c:	47a8      	blx	r5
	mw_gl_rectangle(draw_info, 5, 62, 150, 40);
   8054e:	2328      	movs	r3, #40	; 0x28
   80550:	223e      	movs	r2, #62	; 0x3e
   80552:	2105      	movs	r1, #5
   80554:	4620      	mov	r0, r4
   80556:	9300      	str	r3, [sp, #0]
   80558:	2396      	movs	r3, #150	; 0x96
   8055a:	47a8      	blx	r5

	/* Draw text on rectangles */
	mw_gl_set_bg_transparency(MW_GL_BG_NOT_TRANSPARENT);
   8055c:	2001      	movs	r0, #1
   8055e:	4b18      	ldr	r3, [pc, #96]	; (805c0 <window_file_paint_function+0xf8>)
   80560:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   80562:	2000      	movs	r0, #0
   80564:	4b17      	ldr	r3, [pc, #92]	; (805c4 <window_file_paint_function+0xfc>)
   80566:	4798      	blx	r3
	mw_gl_set_font(MW_GL_FONT_9);
   80568:	4b17      	ldr	r3, [pc, #92]	; (805c8 <window_file_paint_function+0x100>)
   8056a:	2000      	movs	r0, #0
   8056c:	4798      	blx	r3
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   8056e:	2000      	movs	r0, #0
   80570:	47b0      	blx	r6
	mw_gl_set_bg_colour(MW_HAL_LCD_WHITE);
	mw_gl_string(draw_info, 15, 5, "Time/Date");
   80572:	4d16      	ldr	r5, [pc, #88]	; (805cc <window_file_paint_function+0x104>)
	mw_gl_set_bg_colour(MW_HAL_LCD_WHITE);
   80574:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   80578:	4b15      	ldr	r3, [pc, #84]	; (805d0 <window_file_paint_function+0x108>)
   8057a:	4798      	blx	r3
	mw_gl_string(draw_info, 15, 5, "Time/Date");
   8057c:	4620      	mov	r0, r4
   8057e:	4b15      	ldr	r3, [pc, #84]	; (805d4 <window_file_paint_function+0x10c>)
   80580:	2205      	movs	r2, #5
   80582:	210f      	movs	r1, #15
   80584:	47a8      	blx	r5
	mw_gl_string(draw_info, 15, 60, "File");
   80586:	4620      	mov	r0, r4
   80588:	223c      	movs	r2, #60	; 0x3c
   8058a:	210f      	movs	r1, #15
   8058c:	46ac      	mov	ip, r5
   8058e:	4b12      	ldr	r3, [pc, #72]	; (805d8 <window_file_paint_function+0x110>)
}
   80590:	b007      	add	sp, #28
   80592:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	mw_gl_string(draw_info, 15, 60, "File");
   80596:	4760      	bx	ip
   80598:	000a6458 	.word	0x000a6458
   8059c:	000a656c 	.word	0x000a656c
   805a0:	00095add 	.word	0x00095add
   805a4:	000846d5 	.word	0x000846d5
   805a8:	000846c9 	.word	0x000846c9
   805ac:	000846f1 	.word	0x000846f1
   805b0:	000846e1 	.word	0x000846e1
   805b4:	00090735 	.word	0x00090735
   805b8:	000850e1 	.word	0x000850e1
   805bc:	000846b1 	.word	0x000846b1
   805c0:	00084709 	.word	0x00084709
   805c4:	00084745 	.word	0x00084745
   805c8:	00084715 	.word	0x00084715
   805cc:	00085f1d 	.word	0x00085f1d
   805d0:	000846bd 	.word	0x000846bd
   805d4:	000a6584 	.word	0x000a6584
   805d8:	000a6590 	.word	0x000a6590
   805dc:	000846fd 	.word	0x000846fd

000805e0 <window_file_message_function>:

void window_file_message_function(const mw_message_t *message)
{
   805e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MW_ASSERT(message != (void*)0, "Null pointer parameter");
   805e4:	4604      	mov	r4, r0
   805e6:	3000      	adds	r0, #0
   805e8:	4b63      	ldr	r3, [pc, #396]	; (80778 <window_file_message_function+0x198>)
{
   805ea:	b08b      	sub	sp, #44	; 0x2c
	MW_ASSERT(message != (void*)0, "Null pointer parameter");
   805ec:	bf18      	it	ne
   805ee:	2001      	movne	r0, #1
   805f0:	f44f 7293 	mov.w	r2, #294	; 0x126
   805f4:	4961      	ldr	r1, [pc, #388]	; (8077c <window_file_message_function+0x19c>)
   805f6:	4d62      	ldr	r5, [pc, #392]	; (80780 <window_file_message_function+0x1a0>)
   805f8:	47a8      	blx	r5

	switch (message->message_id)
   805fa:	7a23      	ldrb	r3, [r4, #8]
   805fc:	2b51      	cmp	r3, #81	; 0x51
   805fe:	f200 8096 	bhi.w	8072e <window_file_message_function+0x14e>
   80602:	e8df f013 	tbh	[pc, r3, lsl #1]
   80606:	00a6      	.short	0x00a6
   80608:	00940094 	.word	0x00940094
   8060c:	00940094 	.word	0x00940094
   80610:	00940094 	.word	0x00940094
   80614:	00940094 	.word	0x00940094
   80618:	00940094 	.word	0x00940094
   8061c:	00940094 	.word	0x00940094
   80620:	00940094 	.word	0x00940094
   80624:	00940094 	.word	0x00940094
   80628:	00940094 	.word	0x00940094
   8062c:	00940094 	.word	0x00940094
   80630:	00940094 	.word	0x00940094
   80634:	00940094 	.word	0x00940094
   80638:	017a00e3 	.word	0x017a00e3
   8063c:	00940094 	.word	0x00940094
   80640:	00940094 	.word	0x00940094
   80644:	00940094 	.word	0x00940094
   80648:	00940094 	.word	0x00940094
   8064c:	00940094 	.word	0x00940094
   80650:	00940094 	.word	0x00940094
   80654:	00940094 	.word	0x00940094
   80658:	00940094 	.word	0x00940094
   8065c:	00940094 	.word	0x00940094
   80660:	00940094 	.word	0x00940094
   80664:	00940094 	.word	0x00940094
   80668:	00940094 	.word	0x00940094
   8066c:	00940094 	.word	0x00940094
   80670:	00940094 	.word	0x00940094
   80674:	00940094 	.word	0x00940094
   80678:	00940094 	.word	0x00940094
   8067c:	01990094 	.word	0x01990094
   80680:	009401b1 	.word	0x009401b1
   80684:	009401c9 	.word	0x009401c9
   80688:	01e20052 	.word	0x01e20052
   8068c:	01f20094 	.word	0x01f20094
   80690:	00940094 	.word	0x00940094
   80694:	00940094 	.word	0x00940094
   80698:	00940094 	.word	0x00940094
   8069c:	00940094 	.word	0x00940094
   806a0:	00940094 	.word	0x00940094
   806a4:	02750094 	.word	0x02750094
   806a8:	0097      	.short	0x0097
			bool window_added;
			bool format_supported;
			char *open_path_and_filename;

			/* get the item chosen path and file name from message */
			open_path_and_filename = (char *)message->message_pointer;
   806aa:	6926      	ldr	r6, [r4, #16]

			/* get filename extension */
			extension = mw_util_get_filename_ext(open_path_and_filename);
   806ac:	4b35      	ldr	r3, [pc, #212]	; (80784 <window_file_message_function+0x1a4>)
   806ae:	4630      	mov	r0, r6
   806b0:	4798      	blx	r3

			window_added = false;
			format_supported = false;
			if (mw_util_strcicmp(extension, TEXT_FILE_EXTENSION) == 0)
   806b2:	4f35      	ldr	r7, [pc, #212]	; (80788 <window_file_message_function+0x1a8>)
   806b4:	4935      	ldr	r1, [pc, #212]	; (8078c <window_file_message_function+0x1ac>)
			extension = mw_util_get_filename_ext(open_path_and_filename);
   806b6:	4680      	mov	r8, r0
			if (mw_util_strcicmp(extension, TEXT_FILE_EXTENSION) == 0)
   806b8:	47b8      	blx	r7
   806ba:	2800      	cmp	r0, #0
   806bc:	f000 823e 	beq.w	80b3c <window_file_message_function+0x55c>
			{
				format_supported = true;
				window_added = add_text_window(open_path_and_filename);
			}
			else if (mw_util_strcicmp(extension, IMAGE_FILE_EXTENSION) == 0)
   806c0:	4640      	mov	r0, r8
   806c2:	4933      	ldr	r1, [pc, #204]	; (80790 <window_file_message_function+0x1b0>)
   806c4:	47b8      	blx	r7
   806c6:	2800      	cmp	r0, #0
   806c8:	f040 829c 	bne.w	80c04 <window_file_message_function+0x624>
	if (!path_and_filename)
   806cc:	2e00      	cmp	r6, #0
   806ce:	f000 82d6 	beq.w	80c7e <window_file_message_function+0x69e>
	if (!mw_find_if_any_window_slots_free())
   806d2:	4b30      	ldr	r3, [pc, #192]	; (80794 <window_file_message_function+0x1b4>)
   806d4:	4798      	blx	r3
   806d6:	4607      	mov	r7, r0
   806d8:	b1a0      	cbz	r0, 80704 <window_file_message_function+0x124>
	filename = strrchr(path_and_filename, (long)'/');
   806da:	212f      	movs	r1, #47	; 0x2f
   806dc:	4630      	mov	r0, r6
   806de:	4b2e      	ldr	r3, [pc, #184]	; (80798 <window_file_message_function+0x1b8>)
   806e0:	4798      	blx	r3
	if (filename == NULL)
   806e2:	4681      	mov	r9, r0
   806e4:	2800      	cmp	r0, #0
   806e6:	f000 8310 	beq.w	80d0a <window_file_message_function+0x72a>
		if (window_file_data.image_windows_data[i].image_window_handle == MW_INVALID_HANDLE)
   806ea:	4d2c      	ldr	r5, [pc, #176]	; (8079c <window_file_message_function+0x1bc>)
   806ec:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240
   806f0:	2b00      	cmp	r3, #0
   806f2:	f000 82d7 	beq.w	80ca4 <window_file_message_function+0x6c4>
   806f6:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
   806fa:	f04f 0801 	mov.w	r8, #1
   806fe:	2b00      	cmp	r3, #0
   80700:	f000 82d1 	beq.w	80ca6 <window_file_message_function+0x6c6>
   80704:	4d26      	ldr	r5, [pc, #152]	; (807a0 <window_file_message_function+0x1c0>)
   80706:	4e27      	ldr	r6, [pc, #156]	; (807a4 <window_file_message_function+0x1c4>)
			}

			if (format_supported && !window_added)
			{
				/* format supported but window couldn't be added, show warning */
				(void)mw_create_window_dialog_one_button(20,
   80708:	2000      	movs	r0, #0
   8070a:	6861      	ldr	r1, [r4, #4]
   8070c:	4a26      	ldr	r2, [pc, #152]	; (807a8 <window_file_message_function+0x1c8>)
   8070e:	4b27      	ldr	r3, [pc, #156]	; (807ac <window_file_message_function+0x1cc>)
   80710:	9002      	str	r0, [sp, #8]
   80712:	9103      	str	r1, [sp, #12]
   80714:	9201      	str	r2, [sp, #4]
   80716:	9300      	str	r3, [sp, #0]
   80718:	2296      	movs	r2, #150	; 0x96
   8071a:	4b25      	ldr	r3, [pc, #148]	; (807b0 <window_file_message_function+0x1d0>)
   8071c:	2132      	movs	r1, #50	; 0x32
   8071e:	2014      	movs	r0, #20
   80720:	4f24      	ldr	r7, [pc, #144]	; (807b4 <window_file_message_function+0x1d4>)
   80722:	47b8      	blx	r7
						false,
						message->recipient_handle);
			}

			/* repaint this window too as it's lost focus */
			mw_paint_window_frame(message->recipient_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   80724:	6860      	ldr	r0, [r4, #4]
   80726:	211f      	movs	r1, #31
   80728:	47b0      	blx	r6
			mw_paint_window_client(message->recipient_handle);
   8072a:	6860      	ldr	r0, [r4, #4]
   8072c:	47a8      	blx	r5

	default:
		/* keep MISRA happy */
		break;
	}
}
   8072e:	b00b      	add	sp, #44	; 0x2c
   80730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(void)mw_create_window_dialog_one_button(20,
   80734:	2100      	movs	r1, #0
   80736:	6860      	ldr	r0, [r4, #4]
   80738:	4a1f      	ldr	r2, [pc, #124]	; (807b8 <window_file_message_function+0x1d8>)
   8073a:	4b20      	ldr	r3, [pc, #128]	; (807bc <window_file_message_function+0x1dc>)
   8073c:	9003      	str	r0, [sp, #12]
   8073e:	9102      	str	r1, [sp, #8]
   80740:	9201      	str	r2, [sp, #4]
   80742:	9300      	str	r3, [sp, #0]
   80744:	2296      	movs	r2, #150	; 0x96
   80746:	4b1e      	ldr	r3, [pc, #120]	; (807c0 <window_file_message_function+0x1e0>)
   80748:	2132      	movs	r1, #50	; 0x32
   8074a:	4c1a      	ldr	r4, [pc, #104]	; (807b4 <window_file_message_function+0x1d4>)
   8074c:	2014      	movs	r0, #20
   8074e:	47a0      	blx	r4
		break;
   80750:	e7ed      	b.n	8072e <window_file_message_function+0x14e>
				window_file_data.text_windows_data[i].text_window_handle = MW_INVALID_HANDLE;
   80752:	2200      	movs	r2, #0
			(void)mw_set_timer(mw_tick_counter + 20U, message->recipient_handle, MW_WINDOW_MESSAGE);
   80754:	491b      	ldr	r1, [pc, #108]	; (807c4 <window_file_message_function+0x1e4>)
				window_file_data.text_windows_data[i].text_window_handle = MW_INVALID_HANDLE;
   80756:	4b11      	ldr	r3, [pc, #68]	; (8079c <window_file_message_function+0x1bc>)
			(void)mw_set_timer(mw_tick_counter + 20U, message->recipient_handle, MW_WINDOW_MESSAGE);
   80758:	6808      	ldr	r0, [r1, #0]
				window_file_data.text_windows_data[i].text_window_handle = MW_INVALID_HANDLE;
   8075a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   8075e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   80762:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
				window_file_data.image_windows_data[i].image_window_handle = MW_INVALID_HANDLE;
   80766:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
   8076a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
			(void)mw_set_timer(mw_tick_counter + 20U, message->recipient_handle, MW_WINDOW_MESSAGE);
   8076e:	6861      	ldr	r1, [r4, #4]
   80770:	4b15      	ldr	r3, [pc, #84]	; (807c8 <window_file_message_function+0x1e8>)
   80772:	3014      	adds	r0, #20
   80774:	4798      	blx	r3
		break;
   80776:	e7da      	b.n	8072e <window_file_message_function+0x14e>
   80778:	000a656c 	.word	0x000a656c
   8077c:	000a6474 	.word	0x000a6474
   80780:	00095add 	.word	0x00095add
   80784:	0009713d 	.word	0x0009713d
   80788:	0009717d 	.word	0x0009717d
   8078c:	000a649c 	.word	0x000a649c
   80790:	000a64c4 	.word	0x000a64c4
   80794:	0008df61 	.word	0x0008df61
   80798:	000a5f31 	.word	0x000a5f31
   8079c:	20070d98 	.word	0x20070d98
   807a0:	00090409 	.word	0x00090409
   807a4:	00090281 	.word	0x00090281
   807a8:	200701b8 	.word	0x200701b8
   807ac:	20070224 	.word	0x20070224
   807b0:	200701bc 	.word	0x200701bc
   807b4:	00082edd 	.word	0x00082edd
   807b8:	000a6554 	.word	0x000a6554
   807bc:	000a6558 	.word	0x000a6558
   807c0:	000a654c 	.word	0x000a654c
   807c4:	20072f98 	.word	0x20072f98
   807c8:	000917f9 	.word	0x000917f9
			(void)mw_util_safe_itoa((int32_t)time_now.tm_hour, temp_buffer, (size_t)3, 10, true, 2U, '0');
   807cc:	2501      	movs	r5, #1
   807ce:	f04f 0a30 	mov.w	sl, #48	; 0x30
   807d2:	f04f 0902 	mov.w	r9, #2
			(void)mw_util_safe_strcpy(time_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, temp_buffer);
   807d6:	f8df b30c 	ldr.w	fp, [pc, #780]	; 80ae4 <window_file_message_function+0x504>
			mw_time_t time_now = app_get_time_date();
   807da:	a808      	add	r0, sp, #32
   807dc:	4b9a      	ldr	r3, [pc, #616]	; (80a48 <window_file_message_function+0x468>)
   807de:	4798      	blx	r3
			(void)mw_util_safe_itoa((int32_t)time_now.tm_hour, temp_buffer, (size_t)3, 10, true, 2U, '0');
   807e0:	f8df 8304 	ldr.w	r8, [pc, #772]	; 80ae8 <window_file_message_function+0x508>
   807e4:	e88d 0620 	stmia.w	sp, {r5, r9, sl}
   807e8:	a907      	add	r1, sp, #28
   807ea:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   807ee:	230a      	movs	r3, #10
   807f0:	2203      	movs	r2, #3
   807f2:	47c0      	blx	r8
			(void)mw_util_safe_strcpy(time_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, temp_buffer);
   807f4:	aa07      	add	r2, sp, #28
   807f6:	4b95      	ldr	r3, [pc, #596]	; (80a4c <window_file_message_function+0x46c>)
   807f8:	4658      	mov	r0, fp
   807fa:	2129      	movs	r1, #41	; 0x29
			(void)mw_util_safe_strcat(time_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, ":");
   807fc:	4e94      	ldr	r6, [pc, #592]	; (80a50 <window_file_message_function+0x470>)
			(void)mw_util_safe_strcpy(time_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, temp_buffer);
   807fe:	4798      	blx	r3
			(void)mw_util_safe_strcat(time_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, ":");
   80800:	4658      	mov	r0, fp
   80802:	4a94      	ldr	r2, [pc, #592]	; (80a54 <window_file_message_function+0x474>)
   80804:	2129      	movs	r1, #41	; 0x29
   80806:	47b0      	blx	r6
			(void)mw_util_safe_itoa((int32_t)time_now.tm_min, temp_buffer, (size_t)3, 10, true, 2U, '0');
   80808:	e88d 0620 	stmia.w	sp, {r5, r9, sl}
   8080c:	230a      	movs	r3, #10
   8080e:	a907      	add	r1, sp, #28
   80810:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   80814:	2203      	movs	r2, #3
   80816:	47c0      	blx	r8
			(void)mw_util_safe_strcat(time_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, temp_buffer);
   80818:	aa07      	add	r2, sp, #28
   8081a:	4658      	mov	r0, fp
   8081c:	2129      	movs	r1, #41	; 0x29
   8081e:	47b0      	blx	r6
			(void)mw_util_safe_strcat(time_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, ":");
   80820:	4658      	mov	r0, fp
   80822:	4a8c      	ldr	r2, [pc, #560]	; (80a54 <window_file_message_function+0x474>)
   80824:	2129      	movs	r1, #41	; 0x29
   80826:	47b0      	blx	r6
			(void)mw_util_safe_itoa((int32_t)time_now.tm_sec, temp_buffer, (size_t)3, 10, true, 2U, '0');
   80828:	e88d 0620 	stmia.w	sp, {r5, r9, sl}
   8082c:	a907      	add	r1, sp, #28
   8082e:	230a      	movs	r3, #10
   80830:	f89d 0020 	ldrb.w	r0, [sp, #32]
   80834:	2203      	movs	r2, #3
   80836:	47c0      	blx	r8
			(void)mw_util_safe_strcat(time_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, temp_buffer);
   80838:	aa07      	add	r2, sp, #28
   8083a:	4658      	mov	r0, fp
   8083c:	2129      	movs	r1, #41	; 0x29
   8083e:	47b0      	blx	r6
			mw_post_message(MW_LABEL_SET_LABEL_TEXT_MESSAGE,
   80840:	4b85      	ldr	r3, [pc, #532]	; (80a58 <window_file_message_function+0x478>)
   80842:	6861      	ldr	r1, [r4, #4]
   80844:	681a      	ldr	r2, [r3, #0]
   80846:	202d      	movs	r0, #45	; 0x2d
   80848:	f8cd b000 	str.w	fp, [sp]
   8084c:	9501      	str	r5, [sp, #4]
   8084e:	2300      	movs	r3, #0
   80850:	4f82      	ldr	r7, [pc, #520]	; (80a5c <window_file_message_function+0x47c>)
   80852:	47b8      	blx	r7
			mw_paint_control(label_time_handle);
   80854:	4b80      	ldr	r3, [pc, #512]	; (80a58 <window_file_message_function+0x478>)
			(void)mw_util_safe_strcpy(date_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, temp_buffer);
   80856:	4f82      	ldr	r7, [pc, #520]	; (80a60 <window_file_message_function+0x480>)
			mw_paint_control(label_time_handle);
   80858:	f8df b258 	ldr.w	fp, [pc, #600]	; 80ab4 <window_file_message_function+0x4d4>
   8085c:	6818      	ldr	r0, [r3, #0]
   8085e:	47d8      	blx	fp
			(void)mw_util_safe_itoa((int32_t)time_now.tm_mday, temp_buffer, (size_t)3, 10, true, 2U, '0');
   80860:	e88d 0620 	stmia.w	sp, {r5, r9, sl}
   80864:	a907      	add	r1, sp, #28
   80866:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   8086a:	230a      	movs	r3, #10
   8086c:	2203      	movs	r2, #3
   8086e:	47c0      	blx	r8
			(void)mw_util_safe_strcpy(date_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, temp_buffer);
   80870:	aa07      	add	r2, sp, #28
   80872:	4b76      	ldr	r3, [pc, #472]	; (80a4c <window_file_message_function+0x46c>)
   80874:	4638      	mov	r0, r7
   80876:	2129      	movs	r1, #41	; 0x29
   80878:	4798      	blx	r3
			(void)mw_util_safe_strcat(date_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, "/");
   8087a:	4638      	mov	r0, r7
   8087c:	4a79      	ldr	r2, [pc, #484]	; (80a64 <window_file_message_function+0x484>)
   8087e:	2129      	movs	r1, #41	; 0x29
   80880:	47b0      	blx	r6
			(void)mw_util_safe_itoa((int32_t)time_now.tm_mon, temp_buffer, (size_t)3, 10, true, 2U, '0');
   80882:	e88d 0620 	stmia.w	sp, {r5, r9, sl}
   80886:	230a      	movs	r3, #10
   80888:	a907      	add	r1, sp, #28
   8088a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   8088e:	2203      	movs	r2, #3
   80890:	47c0      	blx	r8
			(void)mw_util_safe_strcat(date_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, temp_buffer);
   80892:	aa07      	add	r2, sp, #28
   80894:	4638      	mov	r0, r7
   80896:	2129      	movs	r1, #41	; 0x29
   80898:	47b0      	blx	r6
			(void)mw_util_safe_strcat(date_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, "/");
   8089a:	2129      	movs	r1, #41	; 0x29
   8089c:	4638      	mov	r0, r7
   8089e:	4a71      	ldr	r2, [pc, #452]	; (80a64 <window_file_message_function+0x484>)
   808a0:	47b0      	blx	r6
			(void)mw_util_safe_itoa((int32_t)time_now.tm_year % (int32_t)100, temp_buffer, (size_t)3, 10, true, 2U, '0');
   808a2:	2264      	movs	r2, #100	; 0x64
   808a4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   808a8:	486f      	ldr	r0, [pc, #444]	; (80a68 <window_file_message_function+0x488>)
   808aa:	e88d 0220 	stmia.w	sp, {r5, r9}
   808ae:	fba0 1003 	umull	r1, r0, r0, r3
   808b2:	0940      	lsrs	r0, r0, #5
   808b4:	fb02 3010 	mls	r0, r2, r0, r3
   808b8:	a907      	add	r1, sp, #28
   808ba:	230a      	movs	r3, #10
			mw_post_message(MW_LABEL_SET_LABEL_TEXT_MESSAGE,
   808bc:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80aec <window_file_message_function+0x50c>
			(void)mw_util_safe_itoa((int32_t)time_now.tm_year % (int32_t)100, temp_buffer, (size_t)3, 10, true, 2U, '0');
   808c0:	f8cd a008 	str.w	sl, [sp, #8]
   808c4:	2203      	movs	r2, #3
   808c6:	b280      	uxth	r0, r0
   808c8:	47c0      	blx	r8
			(void)mw_util_safe_strcat(date_text, (size_t)MW_UI_LABEL_MAX_CHARS + (size_t)1, temp_buffer);
   808ca:	aa07      	add	r2, sp, #28
   808cc:	4638      	mov	r0, r7
   808ce:	2129      	movs	r1, #41	; 0x29
   808d0:	47b0      	blx	r6
			mw_post_message(MW_LABEL_SET_LABEL_TEXT_MESSAGE,
   808d2:	6861      	ldr	r1, [r4, #4]
   808d4:	f8d9 2000 	ldr.w	r2, [r9]
   808d8:	2300      	movs	r3, #0
   808da:	9501      	str	r5, [sp, #4]
   808dc:	9700      	str	r7, [sp, #0]
   808de:	202d      	movs	r0, #45	; 0x2d
   808e0:	4d5e      	ldr	r5, [pc, #376]	; (80a5c <window_file_message_function+0x47c>)
   808e2:	47a8      	blx	r5
			mw_paint_control(label_date_handle);
   808e4:	f8d9 0000 	ldr.w	r0, [r9]
   808e8:	47d8      	blx	fp
			(void)mw_set_timer(mw_tick_counter + 20U, message->recipient_handle, MW_WINDOW_MESSAGE);
   808ea:	4b60      	ldr	r3, [pc, #384]	; (80a6c <window_file_message_function+0x48c>)
   808ec:	6861      	ldr	r1, [r4, #4]
   808ee:	6818      	ldr	r0, [r3, #0]
   808f0:	2200      	movs	r2, #0
   808f2:	4b5f      	ldr	r3, [pc, #380]	; (80a70 <window_file_message_function+0x490>)
   808f4:	3014      	adds	r0, #20
   808f6:	4798      	blx	r3
		break;
   808f8:	e719      	b.n	8072e <window_file_message_function+0x14e>
		if (message->sender_handle == button_open_handle)
   808fa:	4a5e      	ldr	r2, [pc, #376]	; (80a74 <window_file_message_function+0x494>)
   808fc:	6823      	ldr	r3, [r4, #0]
   808fe:	6812      	ldr	r2, [r2, #0]
   80900:	4293      	cmp	r3, r2
   80902:	f000 8199 	beq.w	80c38 <window_file_message_function+0x658>
		else if (message->sender_handle == button_set_clock_handle)
   80906:	4a5c      	ldr	r2, [pc, #368]	; (80a78 <window_file_message_function+0x498>)
   80908:	6812      	ldr	r2, [r2, #0]
   8090a:	4293      	cmp	r3, r2
   8090c:	f000 81a2 	beq.w	80c54 <window_file_message_function+0x674>
		else if (message->sender_handle == button_create_handle)
   80910:	4a5a      	ldr	r2, [pc, #360]	; (80a7c <window_file_message_function+0x49c>)
   80912:	6812      	ldr	r2, [r2, #0]
   80914:	4293      	cmp	r3, r2
   80916:	f47f af0a 	bne.w	8072e <window_file_message_function+0x14e>
			(void)mw_create_window_dialog_file_chooser(70,
   8091a:	4b59      	ldr	r3, [pc, #356]	; (80a80 <window_file_message_function+0x4a0>)
   8091c:	4798      	blx	r3
   8091e:	2100      	movs	r1, #0
   80920:	2201      	movs	r2, #1
   80922:	6864      	ldr	r4, [r4, #4]
   80924:	4603      	mov	r3, r0
   80926:	9402      	str	r4, [sp, #8]
   80928:	9101      	str	r1, [sp, #4]
   8092a:	9200      	str	r2, [sp, #0]
   8092c:	2178      	movs	r1, #120	; 0x78
   8092e:	4a55      	ldr	r2, [pc, #340]	; (80a84 <window_file_message_function+0x4a4>)
   80930:	4c55      	ldr	r4, [pc, #340]	; (80a88 <window_file_message_function+0x4a8>)
   80932:	2046      	movs	r0, #70	; 0x46
   80934:	47a0      	blx	r4
   80936:	e6fa      	b.n	8072e <window_file_message_function+0x14e>
			if (message->message_data == 0U)
   80938:	68e5      	ldr	r5, [r4, #12]
   8093a:	2d00      	cmp	r5, #0
   8093c:	f47f aef7 	bne.w	8072e <window_file_message_function+0x14e>
	if (app_file_create(window_file_data.create_path_and_filename))
   80940:	4852      	ldr	r0, [pc, #328]	; (80a8c <window_file_message_function+0x4ac>)
   80942:	4b53      	ldr	r3, [pc, #332]	; (80a90 <window_file_message_function+0x4b0>)
				create_new_file(message->recipient_handle);
   80944:	6864      	ldr	r4, [r4, #4]
	if (app_file_create(window_file_data.create_path_and_filename))
   80946:	4798      	blx	r3
   80948:	2800      	cmp	r0, #0
   8094a:	f040 8148 	bne.w	80bde <window_file_message_function+0x5fe>
		(void)mw_create_window_dialog_one_button(20,
   8094e:	2114      	movs	r1, #20
   80950:	4a50      	ldr	r2, [pc, #320]	; (80a94 <window_file_message_function+0x4b4>)
   80952:	4b51      	ldr	r3, [pc, #324]	; (80a98 <window_file_message_function+0x4b8>)
   80954:	9403      	str	r4, [sp, #12]
   80956:	9002      	str	r0, [sp, #8]
   80958:	9201      	str	r2, [sp, #4]
   8095a:	9300      	str	r3, [sp, #0]
   8095c:	4608      	mov	r0, r1
   8095e:	4b4f      	ldr	r3, [pc, #316]	; (80a9c <window_file_message_function+0x4bc>)
   80960:	2296      	movs	r2, #150	; 0x96
   80962:	4c4f      	ldr	r4, [pc, #316]	; (80aa0 <window_file_message_function+0x4c0>)
   80964:	47a0      	blx	r4
   80966:	e6e2      	b.n	8072e <window_file_message_function+0x14e>
			window_file_data.set_time.tm_sec = 0U;
   80968:	2600      	movs	r6, #0
			(void)mw_create_window_dialog_date_chooser(70,
   8096a:	f240 77e2 	movw	r7, #2018	; 0x7e2
   8096e:	2301      	movs	r3, #1
			window_file_data.set_time.tm_sec = 0U;
   80970:	484c      	ldr	r0, [pc, #304]	; (80aa4 <window_file_message_function+0x4c4>)
			(void)mw_create_window_dialog_date_chooser(70,
   80972:	461a      	mov	r2, r3
			window_file_data.set_time.tm_sec = 0U;
   80974:	f880 62e4 	strb.w	r6, [r0, #740]	; 0x2e4
			temp_uint32 = message->message_data >> 8;
   80978:	68e5      	ldr	r5, [r4, #12]
			(void)mw_create_window_dialog_date_chooser(70,
   8097a:	2164      	movs	r1, #100	; 0x64
			temp_uint32 = message->message_data >> 8;
   8097c:	0a2d      	lsrs	r5, r5, #8
			window_file_data.set_time.tm_hour = (uint8_t)temp_uint32;
   8097e:	f880 52e6 	strb.w	r5, [r0, #742]	; 0x2e6
			window_file_data.set_time.tm_min = (uint8_t)temp_uint32;
   80982:	68e5      	ldr	r5, [r4, #12]
   80984:	f880 52e5 	strb.w	r5, [r0, #741]	; 0x2e5
			(void)mw_create_window_dialog_date_chooser(70,
   80988:	6864      	ldr	r4, [r4, #4]
   8098a:	2046      	movs	r0, #70	; 0x46
   8098c:	9402      	str	r4, [sp, #8]
   8098e:	9601      	str	r6, [sp, #4]
   80990:	9700      	str	r7, [sp, #0]
   80992:	4c45      	ldr	r4, [pc, #276]	; (80aa8 <window_file_message_function+0x4c8>)
   80994:	47a0      	blx	r4
		break;
   80996:	e6ca      	b.n	8072e <window_file_message_function+0x14e>
			window_file_data.set_time.tm_mday = (uint8_t)temp_uint32;
   80998:	4b42      	ldr	r3, [pc, #264]	; (80aa4 <window_file_message_function+0x4c4>)
   8099a:	68e2      	ldr	r2, [r4, #12]
			app_set_time_date(window_file_data.set_time);
   8099c:	f503 7139 	add.w	r1, r3, #740	; 0x2e4
			window_file_data.set_time.tm_mday = (uint8_t)temp_uint32;
   809a0:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
			temp_uint32 = (message->message_data >> 8) & 0xffU;
   809a4:	68e2      	ldr	r2, [r4, #12]
			mw_set_control_enabled(button_create_handle, true);
   809a6:	4d35      	ldr	r5, [pc, #212]	; (80a7c <window_file_message_function+0x49c>)
			temp_uint32 = (message->message_data >> 8) & 0xffU;
   809a8:	0a12      	lsrs	r2, r2, #8
			window_file_data.set_time.tm_mon = (uint8_t)temp_uint32;
   809aa:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
			temp_uint32 = message->message_data >> 16;
   809ae:	89e0      	ldrh	r0, [r4, #14]
			app_set_time_date(window_file_data.set_time);
   809b0:	4a3e      	ldr	r2, [pc, #248]	; (80aac <window_file_message_function+0x4cc>)
			window_file_data.set_time.tm_year = (uint16_t)temp_uint32;
   809b2:	f8a3 02ea 	strh.w	r0, [r3, #746]	; 0x2ea
			app_set_time_date(window_file_data.set_time);
   809b6:	c903      	ldmia	r1, {r0, r1}
   809b8:	4790      	blx	r2
			mw_set_control_enabled(button_create_handle, true);
   809ba:	6828      	ldr	r0, [r5, #0]
   809bc:	2101      	movs	r1, #1
   809be:	4b3c      	ldr	r3, [pc, #240]	; (80ab0 <window_file_message_function+0x4d0>)
   809c0:	4798      	blx	r3
			mw_paint_control(button_create_handle);
   809c2:	6828      	ldr	r0, [r5, #0]
   809c4:	4b3b      	ldr	r3, [pc, #236]	; (80ab4 <window_file_message_function+0x4d4>)
   809c6:	4798      	blx	r3
		break;
   809c8:	e6b1      	b.n	8072e <window_file_message_function+0x14e>
			(void)mw_util_safe_strcpy(window_file_data.create_path_and_filename,
   809ca:	6922      	ldr	r2, [r4, #16]
   809cc:	2180      	movs	r1, #128	; 0x80
   809ce:	4b1f      	ldr	r3, [pc, #124]	; (80a4c <window_file_message_function+0x46c>)
   809d0:	482e      	ldr	r0, [pc, #184]	; (80a8c <window_file_message_function+0x4ac>)
   809d2:	4798      	blx	r3
			(void)mw_create_window_dialog_text_entry(5, 10, new_file_name_message, empty_message, false, message->recipient_handle);
   809d4:	2200      	movs	r2, #0
   809d6:	6861      	ldr	r1, [r4, #4]
   809d8:	4b37      	ldr	r3, [pc, #220]	; (80ab8 <window_file_message_function+0x4d8>)
   809da:	9101      	str	r1, [sp, #4]
   809dc:	9200      	str	r2, [sp, #0]
   809de:	210a      	movs	r1, #10
   809e0:	4a36      	ldr	r2, [pc, #216]	; (80abc <window_file_message_function+0x4dc>)
   809e2:	4c37      	ldr	r4, [pc, #220]	; (80ac0 <window_file_message_function+0x4e0>)
   809e4:	2005      	movs	r0, #5
   809e6:	47a0      	blx	r4
		break;
   809e8:	e6a1      	b.n	8072e <window_file_message_function+0x14e>
			if (window_file_data.create_path_and_filename[strlen(window_file_data.create_path_and_filename) - (size_t)1] != '/')
   809ea:	4d2e      	ldr	r5, [pc, #184]	; (80aa4 <window_file_message_function+0x4c4>)
   809ec:	4b35      	ldr	r3, [pc, #212]	; (80ac4 <window_file_message_function+0x4e4>)
   809ee:	f505 703b 	add.w	r0, r5, #748	; 0x2ec
   809f2:	4798      	blx	r3
   809f4:	4428      	add	r0, r5
   809f6:	f890 32eb 	ldrb.w	r3, [r0, #747]	; 0x2eb
   809fa:	2b2f      	cmp	r3, #47	; 0x2f
   809fc:	f000 80ed 	beq.w	80bda <window_file_message_function+0x5fa>
				(void)mw_util_safe_strcat(window_file_data.create_path_and_filename,
   80a00:	f505 703b 	add.w	r0, r5, #748	; 0x2ec
   80a04:	4a17      	ldr	r2, [pc, #92]	; (80a64 <window_file_message_function+0x484>)
   80a06:	2180      	movs	r1, #128	; 0x80
   80a08:	4d11      	ldr	r5, [pc, #68]	; (80a50 <window_file_message_function+0x470>)
   80a0a:	47a8      	blx	r5
			(void)mw_util_safe_strcat(window_file_data.create_path_and_filename,
   80a0c:	6922      	ldr	r2, [r4, #16]
   80a0e:	2180      	movs	r1, #128	; 0x80
   80a10:	481e      	ldr	r0, [pc, #120]	; (80a8c <window_file_message_function+0x4ac>)
   80a12:	47a8      	blx	r5
			if (app_file_open(window_file_data.create_path_and_filename))
   80a14:	481d      	ldr	r0, [pc, #116]	; (80a8c <window_file_message_function+0x4ac>)
   80a16:	4b2c      	ldr	r3, [pc, #176]	; (80ac8 <window_file_message_function+0x4e8>)
   80a18:	4798      	blx	r3
   80a1a:	4605      	mov	r5, r0
   80a1c:	2800      	cmp	r0, #0
   80a1e:	d08f      	beq.n	80940 <window_file_message_function+0x360>
				app_file_close();
   80a20:	4b2a      	ldr	r3, [pc, #168]	; (80acc <window_file_message_function+0x4ec>)
   80a22:	4798      	blx	r3
				(void)mw_create_window_dialog_two_button(20,
   80a24:	2000      	movs	r0, #0
   80a26:	2114      	movs	r1, #20
   80a28:	6865      	ldr	r5, [r4, #4]
   80a2a:	4a29      	ldr	r2, [pc, #164]	; (80ad0 <window_file_message_function+0x4f0>)
   80a2c:	4c29      	ldr	r4, [pc, #164]	; (80ad4 <window_file_message_function+0x4f4>)
   80a2e:	4b2a      	ldr	r3, [pc, #168]	; (80ad8 <window_file_message_function+0x4f8>)
   80a30:	9003      	str	r0, [sp, #12]
   80a32:	9402      	str	r4, [sp, #8]
   80a34:	9201      	str	r2, [sp, #4]
   80a36:	9300      	str	r3, [sp, #0]
   80a38:	9504      	str	r5, [sp, #16]
   80a3a:	4608      	mov	r0, r1
   80a3c:	4b27      	ldr	r3, [pc, #156]	; (80adc <window_file_message_function+0x4fc>)
   80a3e:	22d2      	movs	r2, #210	; 0xd2
   80a40:	4c27      	ldr	r4, [pc, #156]	; (80ae0 <window_file_message_function+0x500>)
   80a42:	47a0      	blx	r4
   80a44:	e673      	b.n	8072e <window_file_message_function+0x14e>
   80a46:	bf00      	nop
   80a48:	00099d91 	.word	0x00099d91
   80a4c:	00096f31 	.word	0x00096f31
   80a50:	00096f85 	.word	0x00096f85
   80a54:	000a6494 	.word	0x000a6494
   80a58:	20072f7c 	.word	0x20072f7c
   80a5c:	00091955 	.word	0x00091955
   80a60:	20070d3c 	.word	0x20070d3c
   80a64:	000a6498 	.word	0x000a6498
   80a68:	51eb851f 	.word	0x51eb851f
   80a6c:	20072f98 	.word	0x20072f98
   80a70:	000917f9 	.word	0x000917f9
   80a74:	20072f70 	.word	0x20072f70
   80a78:	20072f68 	.word	0x20072f68
   80a7c:	20072f84 	.word	0x20072f84
   80a80:	00099bb5 	.word	0x00099bb5
   80a84:	200701d4 	.word	0x200701d4
   80a88:	000829e9 	.word	0x000829e9
   80a8c:	20071084 	.word	0x20071084
   80a90:	00099b0d 	.word	0x00099b0d
   80a94:	000a6514 	.word	0x000a6514
   80a98:	000a6534 	.word	0x000a6534
   80a9c:	000a6508 	.word	0x000a6508
   80aa0:	00082edd 	.word	0x00082edd
   80aa4:	20070d98 	.word	0x20070d98
   80aa8:	0008211d 	.word	0x0008211d
   80aac:	00099da5 	.word	0x00099da5
   80ab0:	00090f11 	.word	0x00090f11
   80ab4:	00090f71 	.word	0x00090f71
   80ab8:	20070d68 	.word	0x20070d68
   80abc:	20070214 	.word	0x20070214
   80ac0:	0008352d 	.word	0x0008352d
   80ac4:	000a5e79 	.word	0x000a5e79
   80ac8:	00099af1 	.word	0x00099af1
   80acc:	00099ba5 	.word	0x00099ba5
   80ad0:	200701c4 	.word	0x200701c4
   80ad4:	200701b4 	.word	0x200701b4
   80ad8:	200701f4 	.word	0x200701f4
   80adc:	200701e4 	.word	0x200701e4
   80ae0:	00083de9 	.word	0x00083de9
   80ae4:	20070d6c 	.word	0x20070d6c
   80ae8:	0009723d 	.word	0x0009723d
   80aec:	20072f94 	.word	0x20072f94
				if (message->sender_handle == window_file_data.text_windows_data[i].text_window_handle)
   80af0:	4d89      	ldr	r5, [pc, #548]	; (80d18 <window_file_message_function+0x738>)
   80af2:	6823      	ldr	r3, [r4, #0]
   80af4:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   80af8:	4293      	cmp	r3, r2
   80afa:	f000 80be 	beq.w	80c7a <window_file_message_function+0x69a>
   80afe:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   80b02:	4293      	cmp	r3, r2
   80b04:	f000 808f 	beq.w	80c26 <window_file_message_function+0x646>
   80b08:	f8d5 21ac 	ldr.w	r2, [r5, #428]	; 0x1ac
   80b0c:	4293      	cmp	r3, r2
   80b0e:	bf08      	it	eq
   80b10:	2302      	moveq	r3, #2
   80b12:	f000 8089 	beq.w	80c28 <window_file_message_function+0x648>
				if (message->sender_handle == window_file_data.image_windows_data[i].image_window_handle)
   80b16:	f8d5 2240 	ldr.w	r2, [r5, #576]	; 0x240
   80b1a:	4293      	cmp	r3, r2
   80b1c:	f000 80ab 	beq.w	80c76 <window_file_message_function+0x696>
   80b20:	f8d5 22d4 	ldr.w	r2, [r5, #724]	; 0x2d4
   80b24:	4293      	cmp	r3, r2
   80b26:	bf08      	it	eq
   80b28:	2301      	moveq	r3, #1
   80b2a:	f47f ae00 	bne.w	8072e <window_file_message_function+0x14e>
					window_file_data.image_windows_data[i].image_window_handle = MW_INVALID_HANDLE;
   80b2e:	2194      	movs	r1, #148	; 0x94
   80b30:	2200      	movs	r2, #0
   80b32:	fb01 5503 	mla	r5, r1, r3, r5
   80b36:	f8c5 2240 	str.w	r2, [r5, #576]	; 0x240
}
   80b3a:	e5f8      	b.n	8072e <window_file_message_function+0x14e>
	if (path_and_filename == NULL)
   80b3c:	2e00      	cmp	r6, #0
   80b3e:	f000 8093 	beq.w	80c68 <window_file_message_function+0x688>
	if (!mw_find_if_any_window_slots_free())
   80b42:	4b76      	ldr	r3, [pc, #472]	; (80d1c <window_file_message_function+0x73c>)
   80b44:	4798      	blx	r3
   80b46:	4607      	mov	r7, r0
   80b48:	2800      	cmp	r0, #0
   80b4a:	f43f addb 	beq.w	80704 <window_file_message_function+0x124>
	filename = strrchr(path_and_filename, (long)'/');
   80b4e:	212f      	movs	r1, #47	; 0x2f
   80b50:	4630      	mov	r0, r6
   80b52:	4b73      	ldr	r3, [pc, #460]	; (80d20 <window_file_message_function+0x740>)
   80b54:	4798      	blx	r3
	if (filename == NULL)
   80b56:	4680      	mov	r8, r0
   80b58:	2800      	cmp	r0, #0
   80b5a:	f000 8099 	beq.w	80c90 <window_file_message_function+0x6b0>
		if (window_file_data.text_windows_data[i].text_window_handle == MW_INVALID_HANDLE)
   80b5e:	4d6e      	ldr	r5, [pc, #440]	; (80d18 <window_file_message_function+0x738>)
   80b60:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   80b64:	2b00      	cmp	r3, #0
   80b66:	f000 8091 	beq.w	80c8c <window_file_message_function+0x6ac>
   80b6a:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   80b6e:	2b00      	cmp	r3, #0
   80b70:	f000 8095 	beq.w	80c9e <window_file_message_function+0x6be>
   80b74:	f8d5 31ac 	ldr.w	r3, [r5, #428]	; 0x1ac
   80b78:	f04f 0902 	mov.w	r9, #2
   80b7c:	2b00      	cmp	r3, #0
   80b7e:	f47f adc1 	bne.w	80704 <window_file_message_function+0x124>
			mw_util_set_rect(&r, 10, 10, 100, 100);
   80b82:	2364      	movs	r3, #100	; 0x64
   80b84:	220a      	movs	r2, #10
   80b86:	9300      	str	r3, [sp, #0]
   80b88:	4611      	mov	r1, r2
   80b8a:	a808      	add	r0, sp, #32
   80b8c:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 80d8c <window_file_message_function+0x7ac>
   80b90:	47d0      	blx	sl
				(void *)&window_file_data.text_windows_data[i]);
   80b92:	2194      	movs	r1, #148	; 0x94
			new_window_handle = mw_add_window(&r,
   80b94:	2300      	movs	r3, #0
   80b96:	220f      	movs	r2, #15
				(void *)&window_file_data.text_windows_data[i]);
   80b98:	fb01 5509 	mla	r5, r1, r9, r5
			new_window_handle = mw_add_window(&r,
   80b9c:	9202      	str	r2, [sp, #8]
   80b9e:	f108 0101 	add.w	r1, r8, #1
   80ba2:	9503      	str	r5, [sp, #12]
   80ba4:	9301      	str	r3, [sp, #4]
   80ba6:	9300      	str	r3, [sp, #0]
   80ba8:	4a5e      	ldr	r2, [pc, #376]	; (80d24 <window_file_message_function+0x744>)
   80baa:	4b5f      	ldr	r3, [pc, #380]	; (80d28 <window_file_message_function+0x748>)
   80bac:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80d90 <window_file_message_function+0x7b0>
   80bb0:	a808      	add	r0, sp, #32
   80bb2:	47c0      	blx	r8
   80bb4:	4680      	mov	r8, r0
			(void)mw_util_safe_strcpy(window_file_data.text_windows_data[i].path_and_filename_text,
   80bb6:	4632      	mov	r2, r6
   80bb8:	2180      	movs	r1, #128	; 0x80
   80bba:	4628      	mov	r0, r5
   80bbc:	4b5b      	ldr	r3, [pc, #364]	; (80d2c <window_file_message_function+0x74c>)
			window_file_data.text_windows_data[i].text_window_handle  = new_window_handle;
   80bbe:	f8c5 8084 	str.w	r8, [r5, #132]	; 0x84
			(void)mw_util_safe_strcpy(window_file_data.text_windows_data[i].path_and_filename_text,
   80bc2:	4798      	blx	r3
			mw_paint_window_client(new_window_handle);
   80bc4:	4d5a      	ldr	r5, [pc, #360]	; (80d30 <window_file_message_function+0x750>)
   80bc6:	4640      	mov	r0, r8
   80bc8:	47a8      	blx	r5
			mw_paint_window_frame(new_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   80bca:	4e5a      	ldr	r6, [pc, #360]	; (80d34 <window_file_message_function+0x754>)
   80bcc:	4640      	mov	r0, r8
   80bce:	211f      	movs	r1, #31
   80bd0:	47b0      	blx	r6
			if (format_supported && !window_added)
   80bd2:	2f00      	cmp	r7, #0
   80bd4:	f47f ada6 	bne.w	80724 <window_file_message_function+0x144>
   80bd8:	e596      	b.n	80708 <window_file_message_function+0x128>
   80bda:	4d57      	ldr	r5, [pc, #348]	; (80d38 <window_file_message_function+0x758>)
   80bdc:	e716      	b.n	80a0c <window_file_message_function+0x42c>
		app_file_write((uint8_t *)"Created by MiniWin File example app.\n", 37);
   80bde:	2125      	movs	r1, #37	; 0x25
   80be0:	4856      	ldr	r0, [pc, #344]	; (80d3c <window_file_message_function+0x75c>)
   80be2:	4b57      	ldr	r3, [pc, #348]	; (80d40 <window_file_message_function+0x760>)
   80be4:	4798      	blx	r3
		app_file_close();
   80be6:	4b57      	ldr	r3, [pc, #348]	; (80d44 <window_file_message_function+0x764>)
   80be8:	4798      	blx	r3
		(void)mw_create_window_dialog_one_button(20,
   80bea:	2114      	movs	r1, #20
   80bec:	4a56      	ldr	r2, [pc, #344]	; (80d48 <window_file_message_function+0x768>)
   80bee:	4b57      	ldr	r3, [pc, #348]	; (80d4c <window_file_message_function+0x76c>)
   80bf0:	9403      	str	r4, [sp, #12]
   80bf2:	9201      	str	r2, [sp, #4]
   80bf4:	9300      	str	r3, [sp, #0]
   80bf6:	9502      	str	r5, [sp, #8]
   80bf8:	4608      	mov	r0, r1
   80bfa:	4b55      	ldr	r3, [pc, #340]	; (80d50 <window_file_message_function+0x770>)
   80bfc:	22af      	movs	r2, #175	; 0xaf
   80bfe:	4c55      	ldr	r4, [pc, #340]	; (80d54 <window_file_message_function+0x774>)
   80c00:	47a0      	blx	r4
   80c02:	e594      	b.n	8072e <window_file_message_function+0x14e>
				(void)mw_create_window_dialog_one_button(20,
   80c04:	2000      	movs	r0, #0
   80c06:	6861      	ldr	r1, [r4, #4]
   80c08:	4a53      	ldr	r2, [pc, #332]	; (80d58 <window_file_message_function+0x778>)
   80c0a:	4b54      	ldr	r3, [pc, #336]	; (80d5c <window_file_message_function+0x77c>)
   80c0c:	9002      	str	r0, [sp, #8]
   80c0e:	9103      	str	r1, [sp, #12]
   80c10:	9201      	str	r2, [sp, #4]
   80c12:	9300      	str	r3, [sp, #0]
   80c14:	4d4f      	ldr	r5, [pc, #316]	; (80d54 <window_file_message_function+0x774>)
   80c16:	4b52      	ldr	r3, [pc, #328]	; (80d60 <window_file_message_function+0x780>)
   80c18:	2296      	movs	r2, #150	; 0x96
   80c1a:	2132      	movs	r1, #50	; 0x32
   80c1c:	2014      	movs	r0, #20
   80c1e:	47a8      	blx	r5
   80c20:	4e44      	ldr	r6, [pc, #272]	; (80d34 <window_file_message_function+0x754>)
   80c22:	4d43      	ldr	r5, [pc, #268]	; (80d30 <window_file_message_function+0x750>)
   80c24:	e57e      	b.n	80724 <window_file_message_function+0x144>
				if (message->sender_handle == window_file_data.text_windows_data[i].text_window_handle)
   80c26:	2301      	movs	r3, #1
					window_file_data.text_windows_data[i].text_window_handle = MW_INVALID_HANDLE;
   80c28:	2194      	movs	r1, #148	; 0x94
   80c2a:	2200      	movs	r2, #0
   80c2c:	fb01 5303 	mla	r3, r1, r3, r5
   80c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   80c34:	6823      	ldr	r3, [r4, #0]
					break;
   80c36:	e76e      	b.n	80b16 <window_file_message_function+0x536>
			(void)mw_create_window_dialog_file_chooser(70,
   80c38:	4b4a      	ldr	r3, [pc, #296]	; (80d64 <window_file_message_function+0x784>)
   80c3a:	4798      	blx	r3
   80c3c:	2200      	movs	r2, #0
   80c3e:	6861      	ldr	r1, [r4, #4]
   80c40:	4603      	mov	r3, r0
   80c42:	9102      	str	r1, [sp, #8]
   80c44:	9201      	str	r2, [sp, #4]
   80c46:	9200      	str	r2, [sp, #0]
   80c48:	2164      	movs	r1, #100	; 0x64
   80c4a:	4a47      	ldr	r2, [pc, #284]	; (80d68 <window_file_message_function+0x788>)
   80c4c:	4c47      	ldr	r4, [pc, #284]	; (80d6c <window_file_message_function+0x78c>)
   80c4e:	2046      	movs	r0, #70	; 0x46
   80c50:	47a0      	blx	r4
   80c52:	e56c      	b.n	8072e <window_file_message_function+0x14e>
			(void)mw_create_window_dialog_time_chooser(70,
   80c54:	2300      	movs	r3, #0
   80c56:	6862      	ldr	r2, [r4, #4]
   80c58:	2178      	movs	r1, #120	; 0x78
   80c5a:	9201      	str	r2, [sp, #4]
   80c5c:	9300      	str	r3, [sp, #0]
   80c5e:	461a      	mov	r2, r3
   80c60:	4c43      	ldr	r4, [pc, #268]	; (80d70 <window_file_message_function+0x790>)
   80c62:	2046      	movs	r0, #70	; 0x46
   80c64:	47a0      	blx	r4
   80c66:	e562      	b.n	8072e <window_file_message_function+0x14e>
		MW_ASSERT((bool)false, "Null pointer");
   80c68:	4b42      	ldr	r3, [pc, #264]	; (80d74 <window_file_message_function+0x794>)
   80c6a:	228f      	movs	r2, #143	; 0x8f
   80c6c:	4942      	ldr	r1, [pc, #264]	; (80d78 <window_file_message_function+0x798>)
   80c6e:	47a8      	blx	r5
   80c70:	4e30      	ldr	r6, [pc, #192]	; (80d34 <window_file_message_function+0x754>)
   80c72:	4d2f      	ldr	r5, [pc, #188]	; (80d30 <window_file_message_function+0x750>)
   80c74:	e548      	b.n	80708 <window_file_message_function+0x128>
				if (message->sender_handle == window_file_data.image_windows_data[i].image_window_handle)
   80c76:	2300      	movs	r3, #0
   80c78:	e759      	b.n	80b2e <window_file_message_function+0x54e>
				if (message->sender_handle == window_file_data.text_windows_data[i].text_window_handle)
   80c7a:	2300      	movs	r3, #0
   80c7c:	e7d4      	b.n	80c28 <window_file_message_function+0x648>
		MW_ASSERT((bool)false, "Null pointer");
   80c7e:	4b3d      	ldr	r3, [pc, #244]	; (80d74 <window_file_message_function+0x794>)
   80c80:	22ce      	movs	r2, #206	; 0xce
   80c82:	493e      	ldr	r1, [pc, #248]	; (80d7c <window_file_message_function+0x79c>)
   80c84:	47a8      	blx	r5
   80c86:	4e2b      	ldr	r6, [pc, #172]	; (80d34 <window_file_message_function+0x754>)
   80c88:	4d29      	ldr	r5, [pc, #164]	; (80d30 <window_file_message_function+0x750>)
   80c8a:	e53d      	b.n	80708 <window_file_message_function+0x128>
		if (window_file_data.text_windows_data[i].text_window_handle == MW_INVALID_HANDLE)
   80c8c:	4699      	mov	r9, r3
   80c8e:	e778      	b.n	80b82 <window_file_message_function+0x5a2>
		MW_ASSERT((bool)false, "No filename found");
   80c90:	4b3b      	ldr	r3, [pc, #236]	; (80d80 <window_file_message_function+0x7a0>)
   80c92:	229b      	movs	r2, #155	; 0x9b
   80c94:	4938      	ldr	r1, [pc, #224]	; (80d78 <window_file_message_function+0x798>)
   80c96:	47a8      	blx	r5
   80c98:	4e26      	ldr	r6, [pc, #152]	; (80d34 <window_file_message_function+0x754>)
   80c9a:	4d25      	ldr	r5, [pc, #148]	; (80d30 <window_file_message_function+0x750>)
   80c9c:	e534      	b.n	80708 <window_file_message_function+0x128>
		if (window_file_data.text_windows_data[i].text_window_handle == MW_INVALID_HANDLE)
   80c9e:	f04f 0901 	mov.w	r9, #1
   80ca2:	e76e      	b.n	80b82 <window_file_message_function+0x5a2>
		if (window_file_data.image_windows_data[i].image_window_handle == MW_INVALID_HANDLE)
   80ca4:	4698      	mov	r8, r3
			mw_util_set_rect(&r, 10, 10, 100, 100);
   80ca6:	2364      	movs	r3, #100	; 0x64
   80ca8:	220a      	movs	r2, #10
   80caa:	9300      	str	r3, [sp, #0]
   80cac:	4611      	mov	r1, r2
   80cae:	a808      	add	r0, sp, #32
   80cb0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80d8c <window_file_message_function+0x7ac>
   80cb4:	47d0      	blx	sl
				(void *)&window_file_data.image_windows_data[i]);
   80cb6:	2194      	movs	r1, #148	; 0x94
			new_window_handle = mw_add_window(&r,
   80cb8:	2300      	movs	r3, #0
   80cba:	f240 128f 	movw	r2, #399	; 0x18f
				(void *)&window_file_data.image_windows_data[i]);
   80cbe:	fb01 f808 	mul.w	r8, r1, r8
   80cc2:	f508 7ade 	add.w	sl, r8, #444	; 0x1bc
   80cc6:	44aa      	add	sl, r5
			new_window_handle = mw_add_window(&r,
   80cc8:	f109 0101 	add.w	r1, r9, #1
   80ccc:	9202      	str	r2, [sp, #8]
   80cce:	9301      	str	r3, [sp, #4]
   80cd0:	9300      	str	r3, [sp, #0]
   80cd2:	4a2c      	ldr	r2, [pc, #176]	; (80d84 <window_file_message_function+0x7a4>)
   80cd4:	4b2c      	ldr	r3, [pc, #176]	; (80d88 <window_file_message_function+0x7a8>)
   80cd6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80d90 <window_file_message_function+0x7b0>
   80cda:	a808      	add	r0, sp, #32
   80cdc:	f8cd a00c 	str.w	sl, [sp, #12]
   80ce0:	47c8      	blx	r9
   80ce2:	4681      	mov	r9, r0
			window_file_data.image_windows_data[i].image_window_handle  = new_window_handle;
   80ce4:	44a8      	add	r8, r5
			(void)mw_util_safe_strcpy(window_file_data.image_windows_data[i].path_and_filename_image,
   80ce6:	4632      	mov	r2, r6
   80ce8:	2180      	movs	r1, #128	; 0x80
   80cea:	4b10      	ldr	r3, [pc, #64]	; (80d2c <window_file_message_function+0x74c>)
   80cec:	4650      	mov	r0, sl
			window_file_data.image_windows_data[i].image_window_handle  = new_window_handle;
   80cee:	f8c8 9240 	str.w	r9, [r8, #576]	; 0x240
			(void)mw_util_safe_strcpy(window_file_data.image_windows_data[i].path_and_filename_image,
   80cf2:	4798      	blx	r3
			mw_paint_window_client(new_window_handle);
   80cf4:	4d0e      	ldr	r5, [pc, #56]	; (80d30 <window_file_message_function+0x750>)
   80cf6:	4648      	mov	r0, r9
   80cf8:	47a8      	blx	r5
			mw_paint_window_frame(new_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   80cfa:	4e0e      	ldr	r6, [pc, #56]	; (80d34 <window_file_message_function+0x754>)
   80cfc:	4648      	mov	r0, r9
   80cfe:	211f      	movs	r1, #31
   80d00:	47b0      	blx	r6
			if (format_supported && !window_added)
   80d02:	2f00      	cmp	r7, #0
   80d04:	f47f ad0e 	bne.w	80724 <window_file_message_function+0x144>
   80d08:	e4fe      	b.n	80708 <window_file_message_function+0x128>
		MW_ASSERT((bool)false, "No filename found");
   80d0a:	4b1d      	ldr	r3, [pc, #116]	; (80d80 <window_file_message_function+0x7a0>)
   80d0c:	22da      	movs	r2, #218	; 0xda
   80d0e:	491b      	ldr	r1, [pc, #108]	; (80d7c <window_file_message_function+0x79c>)
   80d10:	47a8      	blx	r5
   80d12:	4e08      	ldr	r6, [pc, #32]	; (80d34 <window_file_message_function+0x754>)
   80d14:	4d06      	ldr	r5, [pc, #24]	; (80d30 <window_file_message_function+0x750>)
   80d16:	e4f7      	b.n	80708 <window_file_message_function+0x128>
   80d18:	20070d98 	.word	0x20070d98
   80d1c:	0008df61 	.word	0x0008df61
   80d20:	000a5f31 	.word	0x000a5f31
   80d24:	0008163d 	.word	0x0008163d
   80d28:	000817ed 	.word	0x000817ed
   80d2c:	00096f31 	.word	0x00096f31
   80d30:	00090409 	.word	0x00090409
   80d34:	00090281 	.word	0x00090281
   80d38:	00096f85 	.word	0x00096f85
   80d3c:	000a64e0 	.word	0x000a64e0
   80d40:	00099b75 	.word	0x00099b75
   80d44:	00099ba5 	.word	0x00099ba5
   80d48:	000a6514 	.word	0x000a6514
   80d4c:	000a6518 	.word	0x000a6518
   80d50:	000a6508 	.word	0x000a6508
   80d54:	00082edd 	.word	0x00082edd
   80d58:	200701b8 	.word	0x200701b8
   80d5c:	000a64c8 	.word	0x000a64c8
   80d60:	200701bc 	.word	0x200701bc
   80d64:	00099bb5 	.word	0x00099bb5
   80d68:	200701c8 	.word	0x200701c8
   80d6c:	000829e9 	.word	0x000829e9
   80d70:	00083a49 	.word	0x00083a49
   80d74:	000a64a0 	.word	0x000a64a0
   80d78:	000a6434 	.word	0x000a6434
   80d7c:	000a6444 	.word	0x000a6444
   80d80:	000a64b0 	.word	0x000a64b0
   80d84:	00080f65 	.word	0x00080f65
   80d88:	000813a5 	.word	0x000813a5
   80d8c:	00096e3d 	.word	0x00096e3d
   80d90:	0008e94d 	.word	0x0008e94d

00080d94 <window_file_tree_paint_function>:
*** GLOBAL FUNCTIONS ***
***********************/

void window_file_tree_paint_function(mw_handle_t window_handle, const mw_gl_draw_info_t *draw_info)
{
	MW_ASSERT(draw_info != (void*)0, "Null pointer parameter");
   80d94:	1c0b      	adds	r3, r1, #0
   80d96:	bf18      	it	ne
   80d98:	2301      	movne	r3, #1
{
   80d9a:	b570      	push	{r4, r5, r6, lr}
   80d9c:	4605      	mov	r5, r0
   80d9e:	b086      	sub	sp, #24
	MW_ASSERT(draw_info != (void*)0, "Null pointer parameter");
   80da0:	2250      	movs	r2, #80	; 0x50
   80da2:	460e      	mov	r6, r1
   80da4:	4618      	mov	r0, r3
   80da6:	4914      	ldr	r1, [pc, #80]	; (80df8 <window_file_tree_paint_function+0x64>)
   80da8:	4b14      	ldr	r3, [pc, #80]	; (80dfc <window_file_tree_paint_function+0x68>)
   80daa:	4c15      	ldr	r4, [pc, #84]	; (80e00 <window_file_tree_paint_function+0x6c>)
   80dac:	47a0      	blx	r4

	mw_gl_set_fill(MW_GL_FILL);
   80dae:	2001      	movs	r0, #1
   80db0:	4b14      	ldr	r3, [pc, #80]	; (80e04 <window_file_tree_paint_function+0x70>)
   80db2:	4798      	blx	r3
	mw_gl_set_line(MW_GL_SOLID_LINE);
   80db4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80db8:	4b13      	ldr	r3, [pc, #76]	; (80e08 <window_file_tree_paint_function+0x74>)
   80dba:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_WHITE);
   80dbc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   80dc0:	4b12      	ldr	r3, [pc, #72]	; (80e0c <window_file_tree_paint_function+0x78>)
   80dc2:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   80dc4:	2000      	movs	r0, #0
   80dc6:	4b12      	ldr	r3, [pc, #72]	; (80e10 <window_file_tree_paint_function+0x7c>)
   80dc8:	4798      	blx	r3
	mw_gl_clear_pattern();
   80dca:	4b12      	ldr	r3, [pc, #72]	; (80e14 <window_file_tree_paint_function+0x80>)
   80dcc:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
			0,
			0,
			mw_get_window_client_rect(window_handle).width,
   80dce:	4c12      	ldr	r4, [pc, #72]	; (80e18 <window_file_tree_paint_function+0x84>)
   80dd0:	4629      	mov	r1, r5
   80dd2:	a802      	add	r0, sp, #8
   80dd4:	47a0      	blx	r4
			mw_get_window_client_rect(window_handle).height);
   80dd6:	4629      	mov	r1, r5
   80dd8:	a804      	add	r0, sp, #16
	mw_gl_rectangle(draw_info,
   80dda:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
			mw_get_window_client_rect(window_handle).height);
   80dde:	47a0      	blx	r4
	mw_gl_rectangle(draw_info,
   80de0:	2200      	movs	r2, #0
   80de2:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
   80de6:	462b      	mov	r3, r5
   80de8:	9400      	str	r4, [sp, #0]
   80dea:	4630      	mov	r0, r6
   80dec:	4611      	mov	r1, r2
   80dee:	4c0b      	ldr	r4, [pc, #44]	; (80e1c <window_file_tree_paint_function+0x88>)
   80df0:	47a0      	blx	r4
}
   80df2:	b006      	add	sp, #24
   80df4:	bd70      	pop	{r4, r5, r6, pc}
   80df6:	bf00      	nop
   80df8:	000a6598 	.word	0x000a6598
   80dfc:	000a656c 	.word	0x000a656c
   80e00:	00095add 	.word	0x00095add
   80e04:	000846fd 	.word	0x000846fd
   80e08:	000846d5 	.word	0x000846d5
   80e0c:	000846c9 	.word	0x000846c9
   80e10:	000846f1 	.word	0x000846f1
   80e14:	000846e1 	.word	0x000846e1
   80e18:	00090735 	.word	0x00090735
   80e1c:	000850e1 	.word	0x000850e1

00080e20 <window_file_tree_message_function>:

void window_file_tree_message_function(const mw_message_t *message)
{
   80e20:	b570      	push	{r4, r5, r6, lr}
	mw_ui_tree_data_t *sender_tree_data;

	(void)window_file_tree_data;

	MW_ASSERT(message != (void*)0, "Null pointer parameter");
   80e22:	4604      	mov	r4, r0
   80e24:	3000      	adds	r0, #0
   80e26:	4b40      	ldr	r3, [pc, #256]	; (80f28 <window_file_tree_message_function+0x108>)
{
   80e28:	b082      	sub	sp, #8
	MW_ASSERT(message != (void*)0, "Null pointer parameter");
   80e2a:	bf18      	it	ne
   80e2c:	2001      	movne	r0, #1
   80e2e:	2264      	movs	r2, #100	; 0x64
   80e30:	493e      	ldr	r1, [pc, #248]	; (80f2c <window_file_tree_message_function+0x10c>)
   80e32:	4d3f      	ldr	r5, [pc, #252]	; (80f30 <window_file_tree_message_function+0x110>)
   80e34:	47a8      	blx	r5

	switch (message->message_id)
   80e36:	7a23      	ldrb	r3, [r4, #8]
   80e38:	3b1a      	subs	r3, #26
   80e3a:	2b16      	cmp	r3, #22
   80e3c:	d81d      	bhi.n	80e7a <window_file_tree_message_function+0x5a>
   80e3e:	e8df f003 	tbb	[pc, r3]
   80e42:	1c2b      	.short	0x1c2b
   80e44:	381c1c1c 	.word	0x381c1c1c
   80e48:	1c1c1c1c 	.word	0x1c1c1c1c
   80e4c:	441c1c1c 	.word	0x441c1c1c
   80e50:	0c5d1e1c 	.word	0x0c5d1e1c
   80e54:	1c1c1c25 	.word	0x1c1c1c25
   80e58:	63          	.byte	0x63
   80e59:	00          	.byte	0x00
				NULL,
				MW_CONTROL_MESSAGE);
		break;

	case MW_TREE_FOLDER_CLOSED_MESSAGE:
		sender_tree_data = (mw_ui_tree_data_t*)mw_get_control_instance_data(message->sender_handle);
   80e5a:	4b36      	ldr	r3, [pc, #216]	; (80f34 <window_file_tree_message_function+0x114>)
   80e5c:	6820      	ldr	r0, [r4, #0]
   80e5e:	4798      	blx	r3
		mw_tree_container_remove_node_children(&sender_tree_data->tree_container, (mw_handle_t)message->message_data);
   80e60:	68e1      	ldr	r1, [r4, #12]
   80e62:	4b35      	ldr	r3, [pc, #212]	; (80f38 <window_file_tree_message_function+0x118>)
   80e64:	4798      	blx	r3

		mw_post_message(MW_TREE_TREE_CONTAINER_DATA_CHANGED,
   80e66:	2001      	movs	r0, #1
   80e68:	2300      	movs	r3, #0
   80e6a:	4a34      	ldr	r2, [pc, #208]	; (80f3c <window_file_tree_message_function+0x11c>)
   80e6c:	6861      	ldr	r1, [r4, #4]
   80e6e:	6812      	ldr	r2, [r2, #0]
   80e70:	4c33      	ldr	r4, [pc, #204]	; (80f40 <window_file_tree_message_function+0x120>)
   80e72:	9001      	str	r0, [sp, #4]
   80e74:	9300      	str	r3, [sp, #0]
   80e76:	203a      	movs	r0, #58	; 0x3a
   80e78:	47a0      	blx	r4

	default:
		/* keep MISRA happy */
		break;
	}
}
   80e7a:	b002      	add	sp, #8
   80e7c:	bd70      	pop	{r4, r5, r6, pc}
		if (message->message_data >> 16 == 0U)
   80e7e:	89e1      	ldrh	r1, [r4, #14]
			mw_set_control_enabled(scroll_bar_vert_handle, false);
   80e80:	4c30      	ldr	r4, [pc, #192]	; (80f44 <window_file_tree_message_function+0x124>)
		if (message->message_data >> 16 == 0U)
   80e82:	b101      	cbz	r1, 80e86 <window_file_tree_message_function+0x66>
			mw_set_control_enabled(scroll_bar_vert_handle, true);
   80e84:	2101      	movs	r1, #1
   80e86:	6820      	ldr	r0, [r4, #0]
   80e88:	4b2f      	ldr	r3, [pc, #188]	; (80f48 <window_file_tree_message_function+0x128>)
   80e8a:	4798      	blx	r3
		mw_paint_control(message->sender_handle);
   80e8c:	6820      	ldr	r0, [r4, #0]
   80e8e:	4b2f      	ldr	r3, [pc, #188]	; (80f4c <window_file_tree_message_function+0x12c>)
}
   80e90:	b002      	add	sp, #8
   80e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		mw_paint_control(message->sender_handle);
   80e96:	4718      	bx	r3
		mw_post_message(MW_USER_1_MESSAGE,
   80e98:	2000      	movs	r0, #0
   80e9a:	4b28      	ldr	r3, [pc, #160]	; (80f3c <window_file_tree_message_function+0x11c>)
   80e9c:	4a2c      	ldr	r2, [pc, #176]	; (80f50 <window_file_tree_message_function+0x130>)
   80e9e:	6861      	ldr	r1, [r4, #4]
   80ea0:	681b      	ldr	r3, [r3, #0]
   80ea2:	6812      	ldr	r2, [r2, #0]
   80ea4:	4c26      	ldr	r4, [pc, #152]	; (80f40 <window_file_tree_message_function+0x120>)
   80ea6:	9001      	str	r0, [sp, #4]
   80ea8:	9000      	str	r0, [sp, #0]
   80eaa:	2051      	movs	r0, #81	; 0x51
   80eac:	47a0      	blx	r4
}
   80eae:	b002      	add	sp, #8
   80eb0:	bd70      	pop	{r4, r5, r6, pc}
		mw_post_message(MW_TREE_SCROLL_BAR_POSITION_MESSAGE,
   80eb2:	2100      	movs	r1, #0
   80eb4:	2001      	movs	r0, #1
   80eb6:	4a21      	ldr	r2, [pc, #132]	; (80f3c <window_file_tree_message_function+0x11c>)
   80eb8:	68e3      	ldr	r3, [r4, #12]
   80eba:	6812      	ldr	r2, [r2, #0]
   80ebc:	4c20      	ldr	r4, [pc, #128]	; (80f40 <window_file_tree_message_function+0x120>)
   80ebe:	9001      	str	r0, [sp, #4]
   80ec0:	9100      	str	r1, [sp, #0]
   80ec2:	2039      	movs	r0, #57	; 0x39
   80ec4:	47a0      	blx	r4
}
   80ec6:	b002      	add	sp, #8
   80ec8:	bd70      	pop	{r4, r5, r6, pc}
		mw_tree_container_get_node_path(&sender_tree_data->tree_container, message->message_data, node_path, 100);
   80eca:	4e22      	ldr	r6, [pc, #136]	; (80f54 <window_file_tree_message_function+0x134>)
		sender_tree_data = (mw_ui_tree_data_t*)mw_get_control_instance_data(message->sender_handle);
   80ecc:	6820      	ldr	r0, [r4, #0]
   80ece:	4b19      	ldr	r3, [pc, #100]	; (80f34 <window_file_tree_message_function+0x114>)
   80ed0:	4798      	blx	r3
		mw_tree_container_get_node_path(&sender_tree_data->tree_container, message->message_data, node_path, 100);
   80ed2:	4d21      	ldr	r5, [pc, #132]	; (80f58 <window_file_tree_message_function+0x138>)
   80ed4:	4632      	mov	r2, r6
   80ed6:	68e1      	ldr	r1, [r4, #12]
   80ed8:	2364      	movs	r3, #100	; 0x64
   80eda:	47a8      	blx	r5
		mw_post_message(MW_LABEL_SET_LABEL_TEXT_MESSAGE,
   80edc:	2301      	movs	r3, #1
   80ede:	4d1f      	ldr	r5, [pc, #124]	; (80f5c <window_file_tree_message_function+0x13c>)
   80ee0:	6861      	ldr	r1, [r4, #4]
   80ee2:	682a      	ldr	r2, [r5, #0]
   80ee4:	202d      	movs	r0, #45	; 0x2d
   80ee6:	9301      	str	r3, [sp, #4]
   80ee8:	9600      	str	r6, [sp, #0]
   80eea:	2300      	movs	r3, #0
   80eec:	4c14      	ldr	r4, [pc, #80]	; (80f40 <window_file_tree_message_function+0x120>)
   80eee:	47a0      	blx	r4
		mw_paint_control(label_path_handle);
   80ef0:	6828      	ldr	r0, [r5, #0]
		mw_paint_control(message->sender_handle);
   80ef2:	4b16      	ldr	r3, [pc, #88]	; (80f4c <window_file_tree_message_function+0x12c>)
}
   80ef4:	b002      	add	sp, #8
   80ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		mw_paint_control(message->sender_handle);
   80efa:	4718      	bx	r3
		sender_tree_data = (mw_ui_tree_data_t*)mw_get_control_instance_data(message->sender_handle);
   80efc:	4b0d      	ldr	r3, [pc, #52]	; (80f34 <window_file_tree_message_function+0x114>)
   80efe:	6820      	ldr	r0, [r4, #0]
   80f00:	4798      	blx	r3
		app_populate_tree_from_file_system(&sender_tree_data->tree_container, (mw_handle_t)message->message_data);
   80f02:	68e1      	ldr	r1, [r4, #12]
   80f04:	4b16      	ldr	r3, [pc, #88]	; (80f60 <window_file_tree_message_function+0x140>)
   80f06:	e7ad      	b.n	80e64 <window_file_tree_message_function+0x44>
		mw_post_message(MW_SCROLL_BAR_SET_SCROLL_MESSAGE,
   80f08:	2100      	movs	r1, #0
   80f0a:	2001      	movs	r0, #1
   80f0c:	4d0d      	ldr	r5, [pc, #52]	; (80f44 <window_file_tree_message_function+0x124>)
   80f0e:	68e3      	ldr	r3, [r4, #12]
   80f10:	682a      	ldr	r2, [r5, #0]
   80f12:	4c0b      	ldr	r4, [pc, #44]	; (80f40 <window_file_tree_message_function+0x120>)
   80f14:	9001      	str	r0, [sp, #4]
   80f16:	9100      	str	r1, [sp, #0]
   80f18:	2030      	movs	r0, #48	; 0x30
   80f1a:	47a0      	blx	r4
		mw_paint_control(scroll_bar_vert_handle);
   80f1c:	6828      	ldr	r0, [r5, #0]
		mw_paint_control(message->sender_handle);
   80f1e:	4b0b      	ldr	r3, [pc, #44]	; (80f4c <window_file_tree_message_function+0x12c>)
}
   80f20:	b002      	add	sp, #8
   80f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		mw_paint_control(message->sender_handle);
   80f26:	4718      	bx	r3
   80f28:	000a656c 	.word	0x000a656c
   80f2c:	000a65b8 	.word	0x000a65b8
   80f30:	00095add 	.word	0x00095add
   80f34:	0009176d 	.word	0x0009176d
   80f38:	00096801 	.word	0x00096801
   80f3c:	20072f74 	.word	0x20072f74
   80f40:	00091955 	.word	0x00091955
   80f44:	20072f78 	.word	0x20072f78
   80f48:	00090f11 	.word	0x00090f11
   80f4c:	00090f71 	.word	0x00090f71
   80f50:	20072f6c 	.word	0x20072f6c
   80f54:	20071108 	.word	0x20071108
   80f58:	00096c2d 	.word	0x00096c2d
   80f5c:	20072f8c 	.word	0x20072f8c
   80f60:	00099bbd 	.word	0x00099bbd

00080f64 <window_image_paint_function>:
	int16_t remaining;
	int16_t x_scroll_pos;
	int16_t y_scroll_pos;
	uint32_t temp_uint32;

	MW_ASSERT(draw_info != (void*)0, "Null pointer parameter");
   80f64:	1c0b      	adds	r3, r1, #0
   80f66:	bf18      	it	ne
   80f68:	2301      	movne	r3, #1
{
   80f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80f6e:	4604      	mov	r4, r0
   80f70:	b0a1      	sub	sp, #132	; 0x84
	MW_ASSERT(draw_info != (void*)0, "Null pointer parameter");
   80f72:	4618      	mov	r0, r3
   80f74:	460f      	mov	r7, r1
   80f76:	4bb9      	ldr	r3, [pc, #740]	; (8125c <window_image_paint_function+0x2f8>)
   80f78:	225d      	movs	r2, #93	; 0x5d
   80f7a:	49b9      	ldr	r1, [pc, #740]	; (81260 <window_image_paint_function+0x2fc>)
   80f7c:	4db9      	ldr	r5, [pc, #740]	; (81264 <window_image_paint_function+0x300>)
   80f7e:	47a8      	blx	r5

	/* get this window instance data pointer and check for not null */
	image_window_data = (image_window_data_t*)mw_get_window_instance_data(window_handle);
   80f80:	4620      	mov	r0, r4
   80f82:	4bb9      	ldr	r3, [pc, #740]	; (81268 <window_image_paint_function+0x304>)
   80f84:	4798      	blx	r3
	if (image_window_data == (void*)0)
   80f86:	2800      	cmp	r0, #0
   80f88:	f000 8198 	beq.w	812bc <window_image_paint_function+0x358>
   80f8c:	4606      	mov	r6, r0
	{
		MW_ASSERT((bool)false, "Couldn't find window instance data");
		return;
	}

	mw_gl_set_fill(MW_GL_FILL);
   80f8e:	4bb7      	ldr	r3, [pc, #732]	; (8126c <window_image_paint_function+0x308>)
   80f90:	2001      	movs	r0, #1
   80f92:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_GREY12);
   80f94:	48b6      	ldr	r0, [pc, #728]	; (81270 <window_image_paint_function+0x30c>)
   80f96:	4bb7      	ldr	r3, [pc, #732]	; (81274 <window_image_paint_function+0x310>)
   80f98:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   80f9a:	2000      	movs	r0, #0
   80f9c:	4bb6      	ldr	r3, [pc, #728]	; (81278 <window_image_paint_function+0x314>)
   80f9e:	4798      	blx	r3
	mw_gl_clear_pattern();
   80fa0:	4bb6      	ldr	r3, [pc, #728]	; (8127c <window_image_paint_function+0x318>)
   80fa2:	4798      	blx	r3

	/* get client dimensions */
	client_width = mw_get_window_client_rect(window_handle).width;
   80fa4:	4db6      	ldr	r5, [pc, #728]	; (81280 <window_image_paint_function+0x31c>)
   80fa6:	4621      	mov	r1, r4
   80fa8:	a80c      	add	r0, sp, #48	; 0x30
   80faa:	47a8      	blx	r5
	client_height = mw_get_window_client_rect(window_handle).height;
   80fac:	a80e      	add	r0, sp, #56	; 0x38
   80fae:	4621      	mov	r1, r4
	client_width = mw_get_window_client_rect(window_handle).width;
   80fb0:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
	client_height = mw_get_window_client_rect(window_handle).height;
   80fb4:	47a8      	blx	r5

	success = false;
	if (app_file_open(image_window_data->path_and_filename_image))
   80fb6:	4630      	mov	r0, r6
   80fb8:	4bb2      	ldr	r3, [pc, #712]	; (81284 <window_image_paint_function+0x320>)
	client_height = mw_get_window_client_rect(window_handle).height;
   80fba:	f9bd 803e 	ldrsh.w	r8, [sp, #62]	; 0x3e
	if (app_file_open(image_window_data->path_and_filename_image))
   80fbe:	4798      	blx	r3
   80fc0:	b9b0      	cbnz	r0, 80ff0 <window_image_paint_function+0x8c>
	}

	if (!success)
	{
		/* get a warning dialog displayed by parent window, paint functions must not create new windows */
		mw_post_message(MW_USER_1_MESSAGE,
   80fc2:	2500      	movs	r5, #0
   80fc4:	4fb0      	ldr	r7, [pc, #704]	; (81288 <window_image_paint_function+0x324>)
   80fc6:	9501      	str	r5, [sp, #4]
   80fc8:	683a      	ldr	r2, [r7, #0]
   80fca:	4621      	mov	r1, r4
   80fcc:	462b      	mov	r3, r5
   80fce:	2051      	movs	r0, #81	; 0x51
   80fd0:	9500      	str	r5, [sp, #0]
   80fd2:	4eae      	ldr	r6, [pc, #696]	; (8128c <window_image_paint_function+0x328>)
   80fd4:	47b0      	blx	r6
				MW_UNUSED_MESSAGE_PARAMETER,
				NULL,
				MW_WINDOW_MESSAGE);

		/* remove this window and let file window know */
		mw_remove_window(window_handle);
   80fd6:	4620      	mov	r0, r4
   80fd8:	4bad      	ldr	r3, [pc, #692]	; (81290 <window_image_paint_function+0x32c>)
   80fda:	4798      	blx	r3
		mw_post_message(MW_WINDOW_EXTERNAL_WINDOW_REMOVED_MESSAGE,
   80fdc:	683a      	ldr	r2, [r7, #0]
   80fde:	462b      	mov	r3, r5
   80fe0:	9501      	str	r5, [sp, #4]
   80fe2:	9500      	str	r5, [sp, #0]
   80fe4:	4621      	mov	r1, r4
   80fe6:	2050      	movs	r0, #80	; 0x50
   80fe8:	47b0      	blx	r6
				window_file_handle,
				MW_UNUSED_MESSAGE_PARAMETER,
				NULL,
				MW_WINDOW_MESSAGE);
	}
}
   80fea:	b021      	add	sp, #132	; 0x84
   80fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		file_size = app_file_size();
   80ff0:	4ba8      	ldr	r3, [pc, #672]	; (81294 <window_image_paint_function+0x330>)
   80ff2:	4798      	blx	r3
		if (file_size >= BASIC_BMP_FILE_HEADER_SIZE)
   80ff4:	2835      	cmp	r0, #53	; 0x35
   80ff6:	d802      	bhi.n	80ffe <window_image_paint_function+0x9a>
		app_file_close();
   80ff8:	4ba7      	ldr	r3, [pc, #668]	; (81298 <window_image_paint_function+0x334>)
   80ffa:	4798      	blx	r3
   80ffc:	e7e1      	b.n	80fc2 <window_image_paint_function+0x5e>
			app_file_read(file_buffer, 2U);
   80ffe:	a80b      	add	r0, sp, #44	; 0x2c
   81000:	2102      	movs	r1, #2
   81002:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 812b8 <window_image_paint_function+0x354>
   81006:	47d0      	blx	sl
			if (file_buffer[0] == (uint8_t)'B' && file_buffer[1] == (uint8_t)'M')
   81008:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   8100c:	2b42      	cmp	r3, #66	; 0x42
   8100e:	d1f3      	bne.n	80ff8 <window_image_paint_function+0x94>
   81010:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   81014:	2b4d      	cmp	r3, #77	; 0x4d
   81016:	d1ef      	bne.n	80ff8 <window_image_paint_function+0x94>
				(void)app_file_seek(10U);
   81018:	4ba0      	ldr	r3, [pc, #640]	; (8129c <window_image_paint_function+0x338>)
   8101a:	200a      	movs	r0, #10
   8101c:	4798      	blx	r3
				app_file_read(file_buffer, 4U);
   8101e:	2104      	movs	r1, #4
   81020:	a80b      	add	r0, sp, #44	; 0x2c
   81022:	47d0      	blx	sl
				file_data_offset = (uint32_t)file_buffer[0] + ((uint32_t)file_buffer[1] << 8U) + ((uint32_t)file_buffer[2] << 16U) + ((uint32_t)file_buffer[3] << 24U);
   81024:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
				app_file_read(file_buffer, 4U);
   81028:	2104      	movs	r1, #4
				file_data_offset = (uint32_t)file_buffer[0] + ((uint32_t)file_buffer[1] << 8U) + ((uint32_t)file_buffer[2] << 16U) + ((uint32_t)file_buffer[3] << 24U);
   8102a:	9303      	str	r3, [sp, #12]
   8102c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
				app_file_read(file_buffer, 4U);
   81030:	a80b      	add	r0, sp, #44	; 0x2c
				file_data_offset = (uint32_t)file_buffer[0] + ((uint32_t)file_buffer[1] << 8U) + ((uint32_t)file_buffer[2] << 16U) + ((uint32_t)file_buffer[3] << 24U);
   81032:	9304      	str	r3, [sp, #16]
   81034:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   81038:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   8103c:	9305      	str	r3, [sp, #20]
				app_file_read(file_buffer, 4U);
   8103e:	47d0      	blx	sl
				if ((uint32_t)file_buffer[0] + ((uint32_t)file_buffer[1] << 8U) + ((uint32_t)file_buffer[2] << 16U) + ((uint32_t)file_buffer[3] << 24) == 40U)
   81040:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   81044:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   81048:	041b      	lsls	r3, r3, #16
   8104a:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
   8104e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   81052:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   81056:	440b      	add	r3, r1
   81058:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   8105c:	2b28      	cmp	r3, #40	; 0x28
   8105e:	d1cb      	bne.n	80ff8 <window_image_paint_function+0x94>
					app_file_read(file_buffer, 4);
   81060:	2104      	movs	r1, #4
   81062:	a80b      	add	r0, sp, #44	; 0x2c
   81064:	47d0      	blx	sl
					temp_uint32 = (uint32_t)file_buffer[0] + ((uint32_t)file_buffer[1] << 8U) + ((uint32_t)file_buffer[2] << 16U) + ((uint32_t)file_buffer[3] << 24U);
   81066:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   8106a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
					app_file_read(file_buffer, 4);
   8106e:	2104      	movs	r1, #4
					temp_uint32 = (uint32_t)file_buffer[0] + ((uint32_t)file_buffer[1] << 8U) + ((uint32_t)file_buffer[2] << 16U) + ((uint32_t)file_buffer[3] << 24U);
   81070:	eb03 2302 	add.w	r3, r3, r2, lsl #8
					image_window_data->image_width = (int16_t)temp_uint32;
   81074:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
					app_file_read(file_buffer, 4);
   81078:	a80b      	add	r0, sp, #44	; 0x2c
   8107a:	47d0      	blx	sl
					temp_uint32 = (uint32_t)file_buffer[0] + ((uint32_t)file_buffer[1] << 8U) + ((uint32_t)file_buffer[2] << 16U) + ((uint32_t)file_buffer[3] << 24U);
   8107c:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   81080:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   81084:	eb03 2302 	add.w	r3, r3, r2, lsl #8
					image_window_data->image_height = (int16_t)temp_uint32;
   81088:	b21b      	sxth	r3, r3
					if (client_height > image_window_data->image_height)
   8108a:	4598      	cmp	r8, r3
					image_window_data->image_height = (int16_t)temp_uint32;
   8108c:	f8a6 308a 	strh.w	r3, [r6, #138]	; 0x8a
					if (client_height > image_window_data->image_height)
   81090:	f300 812b 	bgt.w	812ea <window_image_paint_function+0x386>
						y_scroll_pos = ((int16_t)image_window_data->y_scroll_pos * (image_window_data->image_height - client_height)) / UINT8_MAX;
   81094:	22ff      	movs	r2, #255	; 0xff
   81096:	f896 108d 	ldrb.w	r1, [r6, #141]	; 0x8d
   8109a:	eba3 0308 	sub.w	r3, r3, r8
   8109e:	fb03 f301 	mul.w	r3, r3, r1
   810a2:	fb93 f3f2 	sdiv	r3, r3, r2
   810a6:	9306      	str	r3, [sp, #24]
					if (client_width > image_window_data->image_width)
   810a8:	f9b6 2088 	ldrsh.w	r2, [r6, #136]	; 0x88
   810ac:	4593      	cmp	fp, r2
   810ae:	f300 811a 	bgt.w	812e6 <window_image_paint_function+0x382>
						x_scroll_pos = ((int16_t)image_window_data->x_scroll_pos * (image_window_data->image_width - client_width)) / UINT8_MAX;
   810b2:	21ff      	movs	r1, #255	; 0xff
   810b4:	f896 008c 	ldrb.w	r0, [r6, #140]	; 0x8c
   810b8:	eba2 030b 	sub.w	r3, r2, fp
   810bc:	fb03 f300 	mul.w	r3, r3, r0
   810c0:	fb93 f3f1 	sdiv	r3, r3, r1
					app_file_read(file_buffer, 4U);
   810c4:	2104      	movs	r1, #4
   810c6:	a80b      	add	r0, sp, #44	; 0x2c
   810c8:	9208      	str	r2, [sp, #32]
   810ca:	9307      	str	r3, [sp, #28]
   810cc:	47d0      	blx	sl
					if ((uint32_t)file_buffer[0] + ((uint32_t)file_buffer[1] << 8U) + ((uint32_t)file_buffer[2] << 16U) + ((uint32_t)file_buffer[3] << 24U) == 0x00180001U)
   810ce:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
   810d2:	f89d e02d 	ldrb.w	lr, [sp, #45]	; 0x2d
   810d6:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
   810da:	0409      	lsls	r1, r1, #16
   810dc:	eb01 210e 	add.w	r1, r1, lr, lsl #8
   810e0:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
   810e4:	4401      	add	r1, r0
   810e6:	486e      	ldr	r0, [pc, #440]	; (812a0 <window_image_paint_function+0x33c>)
   810e8:	eb01 610e 	add.w	r1, r1, lr, lsl #24
   810ec:	4281      	cmp	r1, r0
   810ee:	9b07      	ldr	r3, [sp, #28]
   810f0:	9a08      	ldr	r2, [sp, #32]
   810f2:	d181      	bne.n	80ff8 <window_image_paint_function+0x94>
						for (y_pos = 0; y_pos < image_window_data->image_height; y_pos++)
   810f4:	f9b6 c08a 	ldrsh.w	ip, [r6, #138]	; 0x8a
   810f8:	f1bc 0f00 	cmp.w	ip, #0
   810fc:	dd75      	ble.n	811ea <window_image_paint_function+0x286>
							if (y_pos == client_height)
   810fe:	f1b8 0f00 	cmp.w	r8, #0
   81102:	d072      	beq.n	811ea <window_image_paint_function+0x286>
				file_data_offset = (uint32_t)file_buffer[0] + ((uint32_t)file_buffer[1] << 8U) + ((uint32_t)file_buffer[2] << 16U) + ((uint32_t)file_buffer[3] << 24U);
   81104:	9805      	ldr	r0, [sp, #20]
   81106:	ea4f 6109 	mov.w	r1, r9, lsl #24
   8110a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   8110e:	9803      	ldr	r0, [sp, #12]
   81110:	b21b      	sxth	r3, r3
   81112:	4401      	add	r1, r0
   81114:	9804      	ldr	r0, [sp, #16]
					row_size = (((uint32_t)image_window_data->image_width * 3U) + 3U) & 0xfffffffcU;
   81116:	3201      	adds	r2, #1
				file_data_offset = (uint32_t)file_buffer[0] + ((uint32_t)file_buffer[1] << 8U) + ((uint32_t)file_buffer[2] << 16U) + ((uint32_t)file_buffer[3] << 24U);
   81118:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   8111c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   81120:	f9bd e018 	ldrsh.w	lr, [sp, #24]
   81124:	18cb      	adds	r3, r1, r3
					row_size = (((uint32_t)image_window_data->image_width * 3U) + 3U) & 0xfffffffcU;
   81126:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   8112a:	9309      	str	r3, [sp, #36]	; 0x24
   8112c:	f022 0303 	bic.w	r3, r2, #3
   81130:	9307      	str	r3, [sp, #28]
   81132:	ea6f 030e 	mvn.w	r3, lr
   81136:	9308      	str	r3, [sp, #32]
   81138:	2300      	movs	r3, #0
   8113a:	f8cd 8014 	str.w	r8, [sp, #20]
   8113e:	4660      	mov	r0, ip
   81140:	4698      	mov	r8, r3
   81142:	9603      	str	r6, [sp, #12]
   81144:	f8cd b010 	str.w	fp, [sp, #16]
   81148:	9406      	str	r4, [sp, #24]
							row_start_address = file_data_offset + row_size * (((uint32_t)image_window_data->image_height - 1U) - (uint32_t)y_pos - (uint32_t)y_scroll_pos);
   8114a:	9b08      	ldr	r3, [sp, #32]
							(void)app_file_seek(row_start_address);
   8114c:	9a09      	ldr	r2, [sp, #36]	; 0x24
							row_start_address = file_data_offset + row_size * (((uint32_t)image_window_data->image_height - 1U) - (uint32_t)y_pos - (uint32_t)y_scroll_pos);
   8114e:	4418      	add	r0, r3
							(void)app_file_seek(row_start_address);
   81150:	9b07      	ldr	r3, [sp, #28]
							row_start_address = file_data_offset + row_size * (((uint32_t)image_window_data->image_height - 1U) - (uint32_t)y_pos - (uint32_t)y_scroll_pos);
   81152:	eba0 0008 	sub.w	r0, r0, r8
							(void)app_file_seek(row_start_address);
   81156:	fb03 2000 	mla	r0, r3, r0, r2
   8115a:	4b50      	ldr	r3, [pc, #320]	; (8129c <window_image_paint_function+0x338>)
   8115c:	4798      	blx	r3
   8115e:	9b03      	ldr	r3, [sp, #12]
   81160:	f9b3 9088 	ldrsh.w	r9, [r3, #136]	; 0x88
   81164:	9b04      	ldr	r3, [sp, #16]
   81166:	4599      	cmp	r9, r3
   81168:	bfa8      	it	ge
   8116a:	4699      	movge	r9, r3
							for (x_pos = 0; x_pos < x_pixels_to_plot; x_pos += BITMAP_TRASFER_BUFFER_SIZE)
   8116c:	f1b9 0f00 	cmp.w	r9, #0
   81170:	bfc8      	it	gt
   81172:	2600      	movgt	r6, #0
   81174:	dd26      	ble.n	811c4 <window_image_paint_function+0x260>
								if (x_pos + BITMAP_TRASFER_BUFFER_SIZE < x_pixels_to_plot)
   81176:	f106 0b10 	add.w	fp, r6, #16
   8117a:	45cb      	cmp	fp, r9
   8117c:	f2c0 80a5 	blt.w	812ca <window_image_paint_function+0x366>
									for (x = x_pos; x < x_pos + remaining; x++)
   81180:	eba9 0406 	sub.w	r4, r9, r6
   81184:	b224      	sxth	r4, r4
   81186:	4434      	add	r4, r6
   81188:	42a6      	cmp	r6, r4
   8118a:	da17      	bge.n	811bc <window_image_paint_function+0x258>
										app_file_read(file_buffer, 3);
   8118c:	2103      	movs	r1, #3
   8118e:	a80b      	add	r0, sp, #44	; 0x2c
   81190:	47d0      	blx	sl
										pixel = ((uint32_t)file_buffer[0]) | ((uint32_t)file_buffer[1] << 8U) | ((uint32_t)file_buffer[2] << 16U);
   81192:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   81196:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   8119a:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
   8119e:	041b      	lsls	r3, r3, #16
   811a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
										mw_gl_set_fg_colour(pixel);
   811a4:	4318      	orrs	r0, r3
   811a6:	4b3f      	ldr	r3, [pc, #252]	; (812a4 <window_image_paint_function+0x340>)
   811a8:	4798      	blx	r3
										mw_gl_fg_pixel(draw_info, x, y_pos);
   811aa:	4631      	mov	r1, r6
   811ac:	3601      	adds	r6, #1
   811ae:	4642      	mov	r2, r8
   811b0:	4638      	mov	r0, r7
   811b2:	4b3d      	ldr	r3, [pc, #244]	; (812a8 <window_image_paint_function+0x344>)
   811b4:	b236      	sxth	r6, r6
   811b6:	4798      	blx	r3
									for (x = x_pos; x < x_pos + remaining; x++)
   811b8:	42a6      	cmp	r6, r4
   811ba:	dbe7      	blt.n	8118c <window_image_paint_function+0x228>
   811bc:	fa0f f68b 	sxth.w	r6, fp
							for (x_pos = 0; x_pos < x_pixels_to_plot; x_pos += BITMAP_TRASFER_BUFFER_SIZE)
   811c0:	45b1      	cmp	r9, r6
   811c2:	dcd8      	bgt.n	81176 <window_image_paint_function+0x212>
						for (y_pos = 0; y_pos < image_window_data->image_height; y_pos++)
   811c4:	9b03      	ldr	r3, [sp, #12]
   811c6:	f108 0801 	add.w	r8, r8, #1
   811ca:	f9b3 008a 	ldrsh.w	r0, [r3, #138]	; 0x8a
   811ce:	fa0f f888 	sxth.w	r8, r8
   811d2:	4540      	cmp	r0, r8
   811d4:	f340 808c 	ble.w	812f0 <window_image_paint_function+0x38c>
							if (y_pos == client_height)
   811d8:	9b05      	ldr	r3, [sp, #20]
   811da:	4543      	cmp	r3, r8
   811dc:	d1b5      	bne.n	8114a <window_image_paint_function+0x1e6>
   811de:	9e03      	ldr	r6, [sp, #12]
   811e0:	f8dd b010 	ldr.w	fp, [sp, #16]
   811e4:	f8dd 8014 	ldr.w	r8, [sp, #20]
   811e8:	9c06      	ldr	r4, [sp, #24]
						if (image_window_data->image_width < mw_get_window_client_rect(window_handle).width)
   811ea:	4621      	mov	r1, r4
   811ec:	a810      	add	r0, sp, #64	; 0x40
   811ee:	f9b6 9088 	ldrsh.w	r9, [r6, #136]	; 0x88
   811f2:	47a8      	blx	r5
   811f4:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
   811f8:	454b      	cmp	r3, r9
   811fa:	f300 80b7 	bgt.w	8136c <window_image_paint_function+0x408>
						if (image_window_data->image_height < mw_get_window_client_rect(window_handle).height)
   811fe:	4621      	mov	r1, r4
   81200:	a814      	add	r0, sp, #80	; 0x50
   81202:	f9b6 908a 	ldrsh.w	r9, [r6, #138]	; 0x8a
   81206:	47a8      	blx	r5
   81208:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
   8120c:	454b      	cmp	r3, r9
   8120e:	f300 809a 	bgt.w	81346 <window_image_paint_function+0x3e2>
						if (image_window_data->image_height < mw_get_window_client_rect(window_handle).height)
   81212:	4621      	mov	r1, r4
   81214:	a818      	add	r0, sp, #96	; 0x60
   81216:	f9b6 908a 	ldrsh.w	r9, [r6, #138]	; 0x8a
   8121a:	47a8      	blx	r5
   8121c:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   81220:	454b      	cmp	r3, r9
   81222:	dc6c      	bgt.n	812fe <window_image_paint_function+0x39a>
						mw_set_window_horiz_scroll_bar_enabled_state(image_window_data->image_window_handle,
   81224:	f9b6 1088 	ldrsh.w	r1, [r6, #136]	; 0x88
   81228:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
   8122c:	4559      	cmp	r1, fp
   8122e:	bfd4      	ite	le
   81230:	2100      	movle	r1, #0
   81232:	2101      	movgt	r1, #1
   81234:	4b1d      	ldr	r3, [pc, #116]	; (812ac <window_image_paint_function+0x348>)
   81236:	4798      	blx	r3
						mw_set_window_vert_scroll_bar_enabled_state(image_window_data->image_window_handle,
   81238:	f9b6 108a 	ldrsh.w	r1, [r6, #138]	; 0x8a
   8123c:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
   81240:	4541      	cmp	r1, r8
   81242:	bfd4      	ite	le
   81244:	2100      	movle	r1, #0
   81246:	2101      	movgt	r1, #1
   81248:	4b19      	ldr	r3, [pc, #100]	; (812b0 <window_image_paint_function+0x34c>)
   8124a:	4798      	blx	r3
						mw_paint_window_frame(image_window_data->image_window_handle,
   8124c:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
   81250:	2118      	movs	r1, #24
   81252:	4b18      	ldr	r3, [pc, #96]	; (812b4 <window_image_paint_function+0x350>)
   81254:	4798      	blx	r3
		app_file_close();
   81256:	4b10      	ldr	r3, [pc, #64]	; (81298 <window_image_paint_function+0x334>)
   81258:	4798      	blx	r3
   8125a:	e6c6      	b.n	80fea <window_image_paint_function+0x86>
   8125c:	000a656c 	.word	0x000a656c
   81260:	000a65dc 	.word	0x000a65dc
   81264:	00095add 	.word	0x00095add
   81268:	00090885 	.word	0x00090885
   8126c:	000846fd 	.word	0x000846fd
   81270:	00666666 	.word	0x00666666
   81274:	000846c9 	.word	0x000846c9
   81278:	000846f1 	.word	0x000846f1
   8127c:	000846e1 	.word	0x000846e1
   81280:	00090735 	.word	0x00090735
   81284:	00099af1 	.word	0x00099af1
   81288:	20072f90 	.word	0x20072f90
   8128c:	00091955 	.word	0x00091955
   81290:	000911c9 	.word	0x000911c9
   81294:	00099b29 	.word	0x00099b29
   81298:	00099ba5 	.word	0x00099ba5
   8129c:	00099b91 	.word	0x00099b91
   812a0:	00180001 	.word	0x00180001
   812a4:	000846b1 	.word	0x000846b1
   812a8:	00084805 	.word	0x00084805
   812ac:	0008ffa9 	.word	0x0008ffa9
   812b0:	00090115 	.word	0x00090115
   812b4:	00090281 	.word	0x00090281
   812b8:	00099b59 	.word	0x00099b59
		MW_ASSERT((bool)false, "Couldn't find window instance data");
   812bc:	4b34      	ldr	r3, [pc, #208]	; (81390 <window_image_paint_function+0x42c>)
   812be:	2263      	movs	r2, #99	; 0x63
   812c0:	4934      	ldr	r1, [pc, #208]	; (81394 <window_image_paint_function+0x430>)
   812c2:	47a8      	blx	r5
}
   812c4:	b021      	add	sp, #132	; 0x84
   812c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
									app_file_read(bitmap_buffer, 48U);
   812ca:	2130      	movs	r1, #48	; 0x30
   812cc:	4832      	ldr	r0, [pc, #200]	; (81398 <window_image_paint_function+0x434>)
   812ce:	47d0      	blx	sl
									mw_gl_colour_bitmap(draw_info,
   812d0:	2301      	movs	r3, #1
   812d2:	4a31      	ldr	r2, [pc, #196]	; (81398 <window_image_paint_function+0x434>)
   812d4:	9300      	str	r3, [sp, #0]
   812d6:	9201      	str	r2, [sp, #4]
   812d8:	4631      	mov	r1, r6
   812da:	2310      	movs	r3, #16
   812dc:	4642      	mov	r2, r8
   812de:	4638      	mov	r0, r7
   812e0:	4c2e      	ldr	r4, [pc, #184]	; (8139c <window_image_paint_function+0x438>)
   812e2:	47a0      	blx	r4
   812e4:	e76a      	b.n	811bc <window_image_paint_function+0x258>
   812e6:	2300      	movs	r3, #0
   812e8:	e6ec      	b.n	810c4 <window_image_paint_function+0x160>
   812ea:	2300      	movs	r3, #0
   812ec:	9306      	str	r3, [sp, #24]
   812ee:	e6db      	b.n	810a8 <window_image_paint_function+0x144>
   812f0:	461e      	mov	r6, r3
   812f2:	f8dd b010 	ldr.w	fp, [sp, #16]
   812f6:	f8dd 8014 	ldr.w	r8, [sp, #20]
   812fa:	9c06      	ldr	r4, [sp, #24]
   812fc:	e775      	b.n	811ea <window_image_paint_function+0x286>
							if (image_window_data->image_height < mw_get_window_client_rect(window_handle).height)
   812fe:	4621      	mov	r1, r4
   81300:	a81a      	add	r0, sp, #104	; 0x68
   81302:	f9b6 908a 	ldrsh.w	r9, [r6, #138]	; 0x8a
   81306:	47a8      	blx	r5
   81308:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
   8130c:	454b      	cmp	r3, r9
   8130e:	dd89      	ble.n	81224 <window_image_paint_function+0x2c0>
										mw_get_window_client_rect(window_handle).width - image_window_data->image_width,
   81310:	4621      	mov	r1, r4
   81312:	a81c      	add	r0, sp, #112	; 0x70
   81314:	47a8      	blx	r5
										mw_get_window_client_rect(window_handle).height - image_window_data->image_height);
   81316:	4621      	mov	r1, r4
   81318:	a81e      	add	r0, sp, #120	; 0x78
										mw_get_window_client_rect(window_handle).width - image_window_data->image_width,
   8131a:	f9b6 9088 	ldrsh.w	r9, [r6, #136]	; 0x88
   8131e:	f8bd a074 	ldrh.w	sl, [sp, #116]	; 0x74
										mw_get_window_client_rect(window_handle).height - image_window_data->image_height);
   81322:	47a8      	blx	r5
   81324:	f9b6 208a 	ldrsh.w	r2, [r6, #138]	; 0x8a
   81328:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
										mw_get_window_client_rect(window_handle).width - image_window_data->image_width,
   8132c:	ebaa 0a09 	sub.w	sl, sl, r9
										mw_get_window_client_rect(window_handle).height - image_window_data->image_height);
   81330:	1aa4      	subs	r4, r4, r2
								mw_gl_rectangle(draw_info,
   81332:	fa0f fa8a 	sxth.w	sl, sl
   81336:	b224      	sxth	r4, r4
   81338:	9400      	str	r4, [sp, #0]
   8133a:	4653      	mov	r3, sl
   8133c:	4649      	mov	r1, r9
   8133e:	4638      	mov	r0, r7
   81340:	4c17      	ldr	r4, [pc, #92]	; (813a0 <window_image_paint_function+0x43c>)
   81342:	47a0      	blx	r4
   81344:	e76e      	b.n	81224 <window_image_paint_function+0x2c0>
									mw_get_window_client_rect(window_handle).height - image_window_data->image_height);
   81346:	4621      	mov	r1, r4
   81348:	a816      	add	r0, sp, #88	; 0x58
							mw_gl_rectangle(draw_info,
   8134a:	f9b6 9088 	ldrsh.w	r9, [r6, #136]	; 0x88
									mw_get_window_client_rect(window_handle).height - image_window_data->image_height);
   8134e:	47a8      	blx	r5
   81350:	f9b6 208a 	ldrsh.w	r2, [r6, #138]	; 0x8a
   81354:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
							mw_gl_rectangle(draw_info,
   81358:	464b      	mov	r3, r9
									mw_get_window_client_rect(window_handle).height - image_window_data->image_height);
   8135a:	1a89      	subs	r1, r1, r2
							mw_gl_rectangle(draw_info,
   8135c:	b209      	sxth	r1, r1
   8135e:	9100      	str	r1, [sp, #0]
   81360:	4638      	mov	r0, r7
   81362:	2100      	movs	r1, #0
   81364:	f8df 9038 	ldr.w	r9, [pc, #56]	; 813a0 <window_image_paint_function+0x43c>
   81368:	47c8      	blx	r9
   8136a:	e752      	b.n	81212 <window_image_paint_function+0x2ae>
									mw_get_window_client_rect(window_handle).width - image_window_data->image_width,
   8136c:	4621      	mov	r1, r4
   8136e:	a812      	add	r0, sp, #72	; 0x48
   81370:	47a8      	blx	r5
   81372:	f9b6 1088 	ldrsh.w	r1, [r6, #136]	; 0x88
   81376:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
							mw_gl_rectangle(draw_info,
   8137a:	f9b6 208a 	ldrsh.w	r2, [r6, #138]	; 0x8a
									mw_get_window_client_rect(window_handle).width - image_window_data->image_width,
   8137e:	1a5b      	subs	r3, r3, r1
							mw_gl_rectangle(draw_info,
   81380:	9200      	str	r2, [sp, #0]
   81382:	b21b      	sxth	r3, r3
   81384:	2200      	movs	r2, #0
   81386:	4638      	mov	r0, r7
   81388:	f8df 9014 	ldr.w	r9, [pc, #20]	; 813a0 <window_image_paint_function+0x43c>
   8138c:	47c8      	blx	r9
   8138e:	e736      	b.n	811fe <window_image_paint_function+0x29a>
   81390:	000a6630 	.word	0x000a6630
   81394:	000a65dc 	.word	0x000a65dc
   81398:	2007116c 	.word	0x2007116c
   8139c:	00086abd 	.word	0x00086abd
   813a0:	000850e1 	.word	0x000850e1

000813a4 <window_image_message_function>:

void window_image_message_function(const mw_message_t *message)
{
   813a4:	b530      	push	{r4, r5, lr}
	image_window_data_t *image_window_data;

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   813a6:	4604      	mov	r4, r0
   813a8:	3000      	adds	r0, #0
   813aa:	bf18      	it	ne
   813ac:	2001      	movne	r0, #1
{
   813ae:	b083      	sub	sp, #12
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   813b0:	4b20      	ldr	r3, [pc, #128]	; (81434 <window_image_message_function+0x90>)
   813b2:	f44f 7293 	mov.w	r2, #294	; 0x126
   813b6:	4920      	ldr	r1, [pc, #128]	; (81438 <window_image_message_function+0x94>)
   813b8:	4d20      	ldr	r5, [pc, #128]	; (8143c <window_image_message_function+0x98>)
   813ba:	47a8      	blx	r5

	/* get this window instance data pointer and check for not null */
	image_window_data = (image_window_data_t *)mw_get_window_instance_data(message->recipient_handle);
   813bc:	6860      	ldr	r0, [r4, #4]
   813be:	4b20      	ldr	r3, [pc, #128]	; (81440 <window_image_message_function+0x9c>)
   813c0:	4798      	blx	r3
	if (image_window_data == (void*)0)
   813c2:	2800      	cmp	r0, #0
   813c4:	d02d      	beq.n	81422 <window_image_message_function+0x7e>
	{
		MW_ASSERT((bool)false, "Couldn't find window instance data");
		return;
	}

	switch (message->message_id)
   813c6:	7a23      	ldrb	r3, [r4, #8]
   813c8:	2b0c      	cmp	r3, #12
   813ca:	d811      	bhi.n	813f0 <window_image_message_function+0x4c>
   813cc:	e8df f003 	tbb	[pc, r3]
   813d0:	10100717 	.word	0x10100717
   813d4:	10101010 	.word	0x10101010
   813d8:	12231e10 	.word	0x12231e10
   813dc:	23          	.byte	0x23
   813dd:	00          	.byte	0x00
	case MW_WINDOW_VERT_SCROLL_BAR_SCROLL_ENDED_MESSAGE:
		mw_paint_window_client(message->recipient_handle);
		break;

	case MW_WINDOW_REMOVED_MESSAGE:
		mw_post_message(MW_WINDOW_EXTERNAL_WINDOW_REMOVED_MESSAGE,
   813de:	2300      	movs	r3, #0
   813e0:	4a18      	ldr	r2, [pc, #96]	; (81444 <window_image_message_function+0xa0>)
   813e2:	6861      	ldr	r1, [r4, #4]
   813e4:	6812      	ldr	r2, [r2, #0]
   813e6:	2050      	movs	r0, #80	; 0x50
   813e8:	9301      	str	r3, [sp, #4]
   813ea:	9300      	str	r3, [sp, #0]
   813ec:	4c16      	ldr	r4, [pc, #88]	; (81448 <window_image_message_function+0xa4>)
   813ee:	47a0      	blx	r4

	default:
		/* keep MISRA happy */
		break;
	}
}
   813f0:	b003      	add	sp, #12
   813f2:	bd30      	pop	{r4, r5, pc}
		image_window_data->x_scroll_pos = (uint8_t)message->message_data;
   813f4:	68e3      	ldr	r3, [r4, #12]
   813f6:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
}
   813fa:	b003      	add	sp, #12
   813fc:	bd30      	pop	{r4, r5, pc}
		image_window_data->x_scroll_pos = 0U;
   813fe:	2300      	movs	r3, #0
   81400:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
		image_window_data->y_scroll_pos = 0U;
   81404:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
}
   81408:	b003      	add	sp, #12
   8140a:	bd30      	pop	{r4, r5, pc}
		image_window_data->y_scroll_pos = (uint8_t)message->message_data;
   8140c:	68e3      	ldr	r3, [r4, #12]
   8140e:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
}
   81412:	b003      	add	sp, #12
   81414:	bd30      	pop	{r4, r5, pc}
		mw_paint_window_client(message->recipient_handle);
   81416:	6860      	ldr	r0, [r4, #4]
   81418:	4b0c      	ldr	r3, [pc, #48]	; (8144c <window_image_message_function+0xa8>)
}
   8141a:	b003      	add	sp, #12
   8141c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		mw_paint_window_client(message->recipient_handle);
   81420:	4718      	bx	r3
		MW_ASSERT((bool)false, "Couldn't find window instance data");
   81422:	f44f 7296 	mov.w	r2, #300	; 0x12c
   81426:	46ac      	mov	ip, r5
   81428:	4b09      	ldr	r3, [pc, #36]	; (81450 <window_image_message_function+0xac>)
   8142a:	4903      	ldr	r1, [pc, #12]	; (81438 <window_image_message_function+0x94>)
}
   8142c:	b003      	add	sp, #12
   8142e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		MW_ASSERT((bool)false, "Couldn't find window instance data");
   81432:	4760      	bx	ip
   81434:	000a6618 	.word	0x000a6618
   81438:	000a65f8 	.word	0x000a65f8
   8143c:	00095add 	.word	0x00095add
   81440:	00090885 	.word	0x00090885
   81444:	20072f90 	.word	0x20072f90
   81448:	00091955 	.word	0x00091955
   8144c:	00090409 	.word	0x00090409
   81450:	000a6630 	.word	0x000a6630

00081454 <node_callback>:
 * @param node_handle The handle of the next found node
 * @param callback_data Generic pointer to extra data that needs passing to callback function
 * @return Return true to continue searching or false to quit searching
 */
static bool node_callback(struct mw_tree_container_t *tree, mw_handle_t node_handle, void *callback_data)
{
   81454:	b570      	push	{r4, r5, r6, lr}
	mw_gl_draw_info_t *draw_info = (mw_gl_draw_info_t *)callback_data;

	mw_gl_string(draw_info,
			2,
			window_selection_data.next_line * 10,
   81456:	4d0a      	ldr	r5, [pc, #40]	; (81480 <node_callback+0x2c>)
{
   81458:	4616      	mov	r6, r2
			window_selection_data.next_line * 10,
   8145a:	88aa      	ldrh	r2, [r5, #4]
			mw_tree_container_get_node_label(tree, node_handle));
   8145c:	4b09      	ldr	r3, [pc, #36]	; (81484 <node_callback+0x30>)
			window_selection_data.next_line * 10,
   8145e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81462:	0054      	lsls	r4, r2, #1
			mw_tree_container_get_node_label(tree, node_handle));
   81464:	4798      	blx	r3
	mw_gl_string(draw_info,
   81466:	b224      	sxth	r4, r4
   81468:	4603      	mov	r3, r0
   8146a:	4622      	mov	r2, r4
   8146c:	4630      	mov	r0, r6
   8146e:	2102      	movs	r1, #2
   81470:	4c05      	ldr	r4, [pc, #20]	; (81488 <node_callback+0x34>)
   81472:	47a0      	blx	r4

	window_selection_data.next_line++;

	return true;
}
   81474:	2001      	movs	r0, #1
	window_selection_data.next_line++;
   81476:	88ab      	ldrh	r3, [r5, #4]
   81478:	4403      	add	r3, r0
   8147a:	80ab      	strh	r3, [r5, #4]
}
   8147c:	bd70      	pop	{r4, r5, r6, pc}
   8147e:	bf00      	nop
   81480:	2007119c 	.word	0x2007119c
   81484:	00096b99 	.word	0x00096b99
   81488:	00085f1d 	.word	0x00085f1d

0008148c <window_selection_paint_function>:
void window_selection_paint_function(mw_handle_t window_handle, const mw_gl_draw_info_t *draw_info)
{
	mw_ui_tree_data_t *tree_instance_data;
	struct mw_tree_container_t *tree_container;

	MW_ASSERT(draw_info != (void*)0, "Null pointer parameter");
   8148c:	1c0b      	adds	r3, r1, #0
   8148e:	bf18      	it	ne
   81490:	2301      	movne	r3, #1
{
   81492:	b5f0      	push	{r4, r5, r6, r7, lr}
   81494:	4605      	mov	r5, r0
   81496:	b087      	sub	sp, #28
	MW_ASSERT(draw_info != (void*)0, "Null pointer parameter");
   81498:	2265      	movs	r2, #101	; 0x65
   8149a:	4618      	mov	r0, r3
   8149c:	460e      	mov	r6, r1
   8149e:	4b30      	ldr	r3, [pc, #192]	; (81560 <window_selection_paint_function+0xd4>)
   814a0:	4930      	ldr	r1, [pc, #192]	; (81564 <window_selection_paint_function+0xd8>)
   814a2:	4c31      	ldr	r4, [pc, #196]	; (81568 <window_selection_paint_function+0xdc>)
   814a4:	47a0      	blx	r4

	mw_gl_set_fill(MW_GL_FILL);
   814a6:	2001      	movs	r0, #1
   814a8:	4b30      	ldr	r3, [pc, #192]	; (8156c <window_selection_paint_function+0xe0>)
   814aa:	4798      	blx	r3
	mw_gl_set_line(MW_GL_SOLID_LINE);
   814ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
   814b0:	4b2f      	ldr	r3, [pc, #188]	; (81570 <window_selection_paint_function+0xe4>)
   814b2:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_WHITE);
   814b4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   814b8:	4b2e      	ldr	r3, [pc, #184]	; (81574 <window_selection_paint_function+0xe8>)
   814ba:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   814bc:	2000      	movs	r0, #0
   814be:	4b2e      	ldr	r3, [pc, #184]	; (81578 <window_selection_paint_function+0xec>)
   814c0:	4798      	blx	r3
	mw_gl_clear_pattern();
   814c2:	4b2e      	ldr	r3, [pc, #184]	; (8157c <window_selection_paint_function+0xf0>)
   814c4:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
			0,
			0,
			mw_get_window_client_rect(window_handle).width,
   814c6:	4c2e      	ldr	r4, [pc, #184]	; (81580 <window_selection_paint_function+0xf4>)
   814c8:	4629      	mov	r1, r5
   814ca:	a802      	add	r0, sp, #8
   814cc:	47a0      	blx	r4
			mw_get_window_client_rect(window_handle).height);
   814ce:	4629      	mov	r1, r5
   814d0:	a804      	add	r0, sp, #16
	mw_gl_rectangle(draw_info,
   814d2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
			mw_get_window_client_rect(window_handle).height);
   814d6:	47a0      	blx	r4
	mw_gl_rectangle(draw_info,
   814d8:	2200      	movs	r2, #0
   814da:	f9bd 5016 	ldrsh.w	r5, [sp, #22]

	if (window_selection_data.tree_handle != MW_INVALID_HANDLE)
   814de:	4c29      	ldr	r4, [pc, #164]	; (81584 <window_selection_paint_function+0xf8>)
	mw_gl_rectangle(draw_info,
   814e0:	4630      	mov	r0, r6
   814e2:	9500      	str	r5, [sp, #0]
   814e4:	463b      	mov	r3, r7
   814e6:	4611      	mov	r1, r2
   814e8:	4d27      	ldr	r5, [pc, #156]	; (81588 <window_selection_paint_function+0xfc>)
   814ea:	47a8      	blx	r5
	if (window_selection_data.tree_handle != MW_INVALID_HANDLE)
   814ec:	6820      	ldr	r0, [r4, #0]
   814ee:	b908      	cbnz	r0, 814f4 <window_selection_paint_function+0x68>
						node_callback,
						(void *)draw_info);
			}
		}
	}
}
   814f0:	b007      	add	sp, #28
   814f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tree_instance_data = (mw_ui_tree_data_t *)mw_get_control_instance_data(window_selection_data.tree_handle);
   814f4:	4b25      	ldr	r3, [pc, #148]	; (8158c <window_selection_paint_function+0x100>)
   814f6:	4798      	blx	r3
		if (tree_instance_data != NULL)
   814f8:	4605      	mov	r5, r0
   814fa:	2800      	cmp	r0, #0
   814fc:	d0f8      	beq.n	814f0 <window_selection_paint_function+0x64>
				mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   814fe:	2000      	movs	r0, #0
   81500:	4b23      	ldr	r3, [pc, #140]	; (81590 <window_selection_paint_function+0x104>)
   81502:	4798      	blx	r3
				mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   81504:	2000      	movs	r0, #0
   81506:	4b23      	ldr	r3, [pc, #140]	; (81594 <window_selection_paint_function+0x108>)
   81508:	4798      	blx	r3
				mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   8150a:	2000      	movs	r0, #0
   8150c:	4b22      	ldr	r3, [pc, #136]	; (81598 <window_selection_paint_function+0x10c>)
   8150e:	4798      	blx	r3
				mw_gl_set_font(MW_GL_FONT_9);
   81510:	2000      	movs	r0, #0
   81512:	4b22      	ldr	r3, [pc, #136]	; (8159c <window_selection_paint_function+0x110>)
   81514:	4798      	blx	r3
				window_selection_data.next_line = 0;
   81516:	2200      	movs	r2, #0
				if ((mw_tree_container_get_node_flags(tree_container, tree_instance_data->root_handle) & MW_TREE_CONTAINER_NODE_IS_SELECTED) == MW_TREE_CONTAINER_NODE_IS_SELECTED)
   81518:	4b21      	ldr	r3, [pc, #132]	; (815a0 <window_selection_paint_function+0x114>)
   8151a:	6a29      	ldr	r1, [r5, #32]
   8151c:	4628      	mov	r0, r5
				window_selection_data.next_line = 0;
   8151e:	80a2      	strh	r2, [r4, #4]
				if ((mw_tree_container_get_node_flags(tree_container, tree_instance_data->root_handle) & MW_TREE_CONTAINER_NODE_IS_SELECTED) == MW_TREE_CONTAINER_NODE_IS_SELECTED)
   81520:	4798      	blx	r3
   81522:	07c3      	lsls	r3, r0, #31
   81524:	d408      	bmi.n	81538 <window_selection_paint_function+0xac>
				mw_tree_container_get_all_children(tree_container,
   81526:	6a29      	ldr	r1, [r5, #32]
   81528:	4628      	mov	r0, r5
   8152a:	9600      	str	r6, [sp, #0]
   8152c:	4b1d      	ldr	r3, [pc, #116]	; (815a4 <window_selection_paint_function+0x118>)
   8152e:	2201      	movs	r2, #1
   81530:	4c1d      	ldr	r4, [pc, #116]	; (815a8 <window_selection_paint_function+0x11c>)
   81532:	47a0      	blx	r4
}
   81534:	b007      	add	sp, #28
   81536:	bdf0      	pop	{r4, r5, r6, r7, pc}
			window_selection_data.next_line * 10,
   81538:	88a3      	ldrh	r3, [r4, #4]
			mw_tree_container_get_node_label(tree, node_handle));
   8153a:	6a29      	ldr	r1, [r5, #32]
			window_selection_data.next_line * 10,
   8153c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81540:	005f      	lsls	r7, r3, #1
			mw_tree_container_get_node_label(tree, node_handle));
   81542:	4628      	mov	r0, r5
   81544:	4b19      	ldr	r3, [pc, #100]	; (815ac <window_selection_paint_function+0x120>)
   81546:	4798      	blx	r3
	mw_gl_string(draw_info,
   81548:	b23f      	sxth	r7, r7
   8154a:	4603      	mov	r3, r0
   8154c:	463a      	mov	r2, r7
   8154e:	2102      	movs	r1, #2
   81550:	4630      	mov	r0, r6
   81552:	4f17      	ldr	r7, [pc, #92]	; (815b0 <window_selection_paint_function+0x124>)
   81554:	47b8      	blx	r7
	window_selection_data.next_line++;
   81556:	88a3      	ldrh	r3, [r4, #4]
   81558:	3301      	adds	r3, #1
   8155a:	80a3      	strh	r3, [r4, #4]
   8155c:	e7e3      	b.n	81526 <window_selection_paint_function+0x9a>
   8155e:	bf00      	nop
   81560:	000a656c 	.word	0x000a656c
   81564:	000a6654 	.word	0x000a6654
   81568:	00095add 	.word	0x00095add
   8156c:	000846fd 	.word	0x000846fd
   81570:	000846d5 	.word	0x000846d5
   81574:	000846c9 	.word	0x000846c9
   81578:	000846f1 	.word	0x000846f1
   8157c:	000846e1 	.word	0x000846e1
   81580:	00090735 	.word	0x00090735
   81584:	2007119c 	.word	0x2007119c
   81588:	000850e1 	.word	0x000850e1
   8158c:	0009176d 	.word	0x0009176d
   81590:	000846b1 	.word	0x000846b1
   81594:	00084709 	.word	0x00084709
   81598:	00084745 	.word	0x00084745
   8159c:	00084715 	.word	0x00084715
   815a0:	00096a91 	.word	0x00096a91
   815a4:	00081455 	.word	0x00081455
   815a8:	00096379 	.word	0x00096379
   815ac:	00096b99 	.word	0x00096b99
   815b0:	00085f1d 	.word	0x00085f1d

000815b4 <window_selection_message_function>:

void window_selection_message_function(const mw_message_t *message)
{
   815b4:	b570      	push	{r4, r5, r6, lr}
	MW_ASSERT(message != (void*)0, "Null pointer parameter");
   815b6:	4604      	mov	r4, r0
   815b8:	3000      	adds	r0, #0
   815ba:	4b17      	ldr	r3, [pc, #92]	; (81618 <window_selection_message_function+0x64>)
   815bc:	bf18      	it	ne
   815be:	2001      	movne	r0, #1
   815c0:	2293      	movs	r2, #147	; 0x93
   815c2:	4916      	ldr	r1, [pc, #88]	; (8161c <window_selection_message_function+0x68>)
   815c4:	4d16      	ldr	r5, [pc, #88]	; (81620 <window_selection_message_function+0x6c>)
   815c6:	47a8      	blx	r5

	switch (message->message_id)
   815c8:	7a23      	ldrb	r3, [r4, #8]
   815ca:	2b19      	cmp	r3, #25
   815cc:	d01b      	beq.n	81606 <window_selection_message_function+0x52>
   815ce:	2b51      	cmp	r3, #81	; 0x51
   815d0:	d004      	beq.n	815dc <window_selection_message_function+0x28>
   815d2:	b103      	cbz	r3, 815d6 <window_selection_message_function+0x22>
   815d4:	bd70      	pop	{r4, r5, r6, pc}
	{
	case MW_WINDOW_CREATED_MESSAGE:
		window_selection_data.tree_handle = MW_INVALID_HANDLE;
   815d6:	4a13      	ldr	r2, [pc, #76]	; (81624 <window_selection_message_function+0x70>)
   815d8:	6013      	str	r3, [r2, #0]
		break;
   815da:	bd70      	pop	{r4, r5, r6, pc}

	case MW_USER_1_MESSAGE:
		window_selection_data.tree_handle = (mw_handle_t)message->message_data;
   815dc:	4a11      	ldr	r2, [pc, #68]	; (81624 <window_selection_message_function+0x70>)
   815de:	68e5      	ldr	r5, [r4, #12]
		mw_set_window_visible(message->recipient_handle, true);
   815e0:	2101      	movs	r1, #1
   815e2:	6860      	ldr	r0, [r4, #4]
   815e4:	4b10      	ldr	r3, [pc, #64]	; (81628 <window_selection_message_function+0x74>)
		window_selection_data.tree_handle = (mw_handle_t)message->message_data;
   815e6:	6015      	str	r5, [r2, #0]
		mw_set_window_visible(message->recipient_handle, true);
   815e8:	4798      	blx	r3
		mw_bring_window_to_front(message->recipient_handle);
   815ea:	6860      	ldr	r0, [r4, #4]
   815ec:	4b0f      	ldr	r3, [pc, #60]	; (8162c <window_selection_message_function+0x78>)
   815ee:	4798      	blx	r3
		(void)mw_set_timer(mw_tick_counter + 100U, message->recipient_handle, message->message_recipient_type);
   815f0:	4b0f      	ldr	r3, [pc, #60]	; (81630 <window_selection_message_function+0x7c>)
   815f2:	7a62      	ldrb	r2, [r4, #9]
   815f4:	6818      	ldr	r0, [r3, #0]
   815f6:	6861      	ldr	r1, [r4, #4]
   815f8:	4b0e      	ldr	r3, [pc, #56]	; (81634 <window_selection_message_function+0x80>)
   815fa:	3064      	adds	r0, #100	; 0x64
   815fc:	4798      	blx	r3

	default:
		/* keep MISRA happy */
		break;
	}
}
   815fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		mw_paint_all();
   81602:	4b0d      	ldr	r3, [pc, #52]	; (81638 <window_selection_message_function+0x84>)
   81604:	4718      	bx	r3
		mw_set_window_visible(message->recipient_handle, false);
   81606:	6860      	ldr	r0, [r4, #4]
   81608:	4b07      	ldr	r3, [pc, #28]	; (81628 <window_selection_message_function+0x74>)
   8160a:	2100      	movs	r1, #0
   8160c:	4798      	blx	r3
}
   8160e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		mw_paint_all();
   81612:	4b09      	ldr	r3, [pc, #36]	; (81638 <window_selection_message_function+0x84>)
   81614:	4718      	bx	r3
   81616:	bf00      	nop
   81618:	000a656c 	.word	0x000a656c
   8161c:	000a6674 	.word	0x000a6674
   81620:	00095add 	.word	0x00095add
   81624:	2007119c 	.word	0x2007119c
   81628:	0008f005 	.word	0x0008f005
   8162c:	0008e059 	.word	0x0008e059
   81630:	20072f98 	.word	0x20072f98
   81634:	000917f9 	.word	0x000917f9
   81638:	00095ab1 	.word	0x00095ab1

0008163c <window_text_paint_function>:
	int16_t client_height;
	char c;
	uint32_t i;
	text_window_data_t *text_window_data;

	MW_ASSERT(draw_info != (void*)0, "Null pointer parameter");
   8163c:	1c0b      	adds	r3, r1, #0
   8163e:	bf18      	it	ne
   81640:	2301      	movne	r3, #1
{
   81642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81646:	4604      	mov	r4, r0
   81648:	b093      	sub	sp, #76	; 0x4c
	MW_ASSERT(draw_info != (void*)0, "Null pointer parameter");
   8164a:	4618      	mov	r0, r3
   8164c:	9108      	str	r1, [sp, #32]
   8164e:	4b51      	ldr	r3, [pc, #324]	; (81794 <window_text_paint_function+0x158>)
   81650:	228d      	movs	r2, #141	; 0x8d
   81652:	4951      	ldr	r1, [pc, #324]	; (81798 <window_text_paint_function+0x15c>)
   81654:	4d51      	ldr	r5, [pc, #324]	; (8179c <window_text_paint_function+0x160>)
   81656:	47a8      	blx	r5

	/* get this window instance data pointer and check for not null */
	text_window_data = (text_window_data_t *)mw_get_window_instance_data(window_handle);
   81658:	4620      	mov	r0, r4
   8165a:	4b51      	ldr	r3, [pc, #324]	; (817a0 <window_text_paint_function+0x164>)
   8165c:	4798      	blx	r3
	if (text_window_data == (void*)0)
   8165e:	2800      	cmp	r0, #0
   81660:	f000 808f 	beq.w	81782 <window_text_paint_function+0x146>
   81664:	4680      	mov	r8, r0
	{
		MW_ASSERT((bool)false, "Couldn't find window instance data");
		return;
	}

	mw_gl_set_fill(MW_GL_FILL);
   81666:	4b4f      	ldr	r3, [pc, #316]	; (817a4 <window_text_paint_function+0x168>)
   81668:	2001      	movs	r0, #1
   8166a:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_WHITE);
   8166c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   81670:	4b4d      	ldr	r3, [pc, #308]	; (817a8 <window_text_paint_function+0x16c>)
   81672:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   81674:	2000      	movs	r0, #0
   81676:	4b4d      	ldr	r3, [pc, #308]	; (817ac <window_text_paint_function+0x170>)
   81678:	4798      	blx	r3
	mw_gl_clear_pattern();
   8167a:	4b4d      	ldr	r3, [pc, #308]	; (817b0 <window_text_paint_function+0x174>)
   8167c:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
			0,
			0,
			mw_get_window_client_rect(window_handle).width,
   8167e:	4d4d      	ldr	r5, [pc, #308]	; (817b4 <window_text_paint_function+0x178>)
   81680:	4621      	mov	r1, r4
   81682:	a80a      	add	r0, sp, #40	; 0x28
   81684:	47a8      	blx	r5
			mw_get_window_client_rect(window_handle).height);
   81686:	4621      	mov	r1, r4
   81688:	a80c      	add	r0, sp, #48	; 0x30
	mw_gl_rectangle(draw_info,
   8168a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
			mw_get_window_client_rect(window_handle).height);
   8168e:	47a8      	blx	r5
	mw_gl_rectangle(draw_info,
   81690:	2200      	movs	r2, #0
   81692:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
   81696:	4611      	mov	r1, r2
   81698:	4633      	mov	r3, r6
   8169a:	9000      	str	r0, [sp, #0]
   8169c:	4e46      	ldr	r6, [pc, #280]	; (817b8 <window_text_paint_function+0x17c>)
   8169e:	9808      	ldr	r0, [sp, #32]
   816a0:	47b0      	blx	r6

	mw_gl_set_fg_colour(MW_HAL_LCD_BLUE);
   816a2:	20ff      	movs	r0, #255	; 0xff
   816a4:	4b45      	ldr	r3, [pc, #276]	; (817bc <window_text_paint_function+0x180>)
   816a6:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   816a8:	2000      	movs	r0, #0
   816aa:	4b45      	ldr	r3, [pc, #276]	; (817c0 <window_text_paint_function+0x184>)
   816ac:	4798      	blx	r3
	mw_gl_set_font(MW_GL_FONT_9);
   816ae:	4b45      	ldr	r3, [pc, #276]	; (817c4 <window_text_paint_function+0x188>)
   816b0:	2000      	movs	r0, #0
   816b2:	4798      	blx	r3

	/* get client are dimensions from current window size */
	client_width = mw_get_window_client_rect(window_handle).width;
   816b4:	4621      	mov	r1, r4
   816b6:	a80e      	add	r0, sp, #56	; 0x38
   816b8:	47a8      	blx	r5
   816ba:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
	client_height = mw_get_window_client_rect(window_handle).height;
   816be:	a810      	add	r0, sp, #64	; 0x40
   816c0:	4621      	mov	r1, r4
	client_width = mw_get_window_client_rect(window_handle).width;
   816c2:	9305      	str	r3, [sp, #20]
	client_height = mw_get_window_client_rect(window_handle).height;
   816c4:	47a8      	blx	r5
   816c6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
	/* load text from file and render it */
	x_pos = 0;
	y_pos = 0;

	/* call app layer to open file */
	if (app_file_open(text_window_data->path_and_filename_text))
   816ca:	4640      	mov	r0, r8
   816cc:	4b3e      	ldr	r3, [pc, #248]	; (817c8 <window_text_paint_function+0x18c>)
	client_height = mw_get_window_client_rect(window_handle).height;
   816ce:	9209      	str	r2, [sp, #36]	; 0x24
	if (app_file_open(text_window_data->path_and_filename_text))
   816d0:	4798      	blx	r3
   816d2:	b910      	cbnz	r0, 816da <window_text_paint_function+0x9e>
			}
		}

		app_file_close();
	}
}
   816d4:	b013      	add	sp, #76	; 0x4c
   816d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		file_size = app_file_size();
   816da:	4b3c      	ldr	r3, [pc, #240]	; (817cc <window_text_paint_function+0x190>)
   816dc:	4798      	blx	r3
   816de:	4604      	mov	r4, r0
   816e0:	9007      	str	r0, [sp, #28]
		(void)app_file_seek(0UL);
   816e2:	4b3b      	ldr	r3, [pc, #236]	; (817d0 <window_text_paint_function+0x194>)
   816e4:	2000      	movs	r0, #0
   816e6:	4798      	blx	r3
		for (i = 0; i < file_size; i++)
   816e8:	2c00      	cmp	r4, #0
   816ea:	d045      	beq.n	81778 <window_text_paint_function+0x13c>
   816ec:	2600      	movs	r6, #0
   816ee:	4f39      	ldr	r7, [pc, #228]	; (817d4 <window_text_paint_function+0x198>)
   816f0:	9606      	str	r6, [sp, #24]
   816f2:	4634      	mov	r4, r6
   816f4:	e002      	b.n	816fc <window_text_paint_function+0xc0>
   816f6:	9b07      	ldr	r3, [sp, #28]
   816f8:	42b3      	cmp	r3, r6
   816fa:	d03d      	beq.n	81778 <window_text_paint_function+0x13c>
			c = (char)app_file_getc();
   816fc:	4b36      	ldr	r3, [pc, #216]	; (817d8 <window_text_paint_function+0x19c>)
   816fe:	4798      	blx	r3
			char_box_x_start = (int16_t)(x_pos - text_window_data->x_scroll_pos);
   81700:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
   81704:	b2a4      	uxth	r4, r4
   81706:	1ae3      	subs	r3, r4, r3
   81708:	fa1f fa83 	uxth.w	sl, r3
			c = (char)app_file_getc();
   8170c:	4681      	mov	r9, r0
			char_box_x_end = (int16_t)((x_pos - text_window_data->x_scroll_pos) + mw_gl_get_font_width());
   8170e:	47b8      	blx	r7
   81710:	4605      	mov	r5, r0
			char_box_y_start = (int16_t)(y_pos - text_window_data->y_scroll_pos);
   81712:	f9b8 308e 	ldrsh.w	r3, [r8, #142]	; 0x8e
			char_box_x_start = (int16_t)(x_pos - text_window_data->x_scroll_pos);
   81716:	fa0f fb8a 	sxth.w	fp, sl
			char_box_y_start = (int16_t)(y_pos - text_window_data->y_scroll_pos);
   8171a:	9304      	str	r3, [sp, #16]
   8171c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
		for (i = 0; i < file_size; i++)
   81720:	3601      	adds	r6, #1
			char_box_y_start = (int16_t)(y_pos - text_window_data->y_scroll_pos);
   81722:	9303      	str	r3, [sp, #12]
			char_box_y_end = (int16_t)((y_pos - text_window_data->y_scroll_pos) + mw_gl_get_font_width());
   81724:	47b8      	blx	r7
			if (char_box_x_start < client_width && char_box_x_end >= 0 &&
   81726:	9905      	ldr	r1, [sp, #20]
			char_box_x_end = (int16_t)((x_pos - text_window_data->x_scroll_pos) + mw_gl_get_font_width());
   81728:	eb0a 0305 	add.w	r3, sl, r5
			if (char_box_x_start < client_width && char_box_x_end >= 0 &&
   8172c:	4559      	cmp	r1, fp
   8172e:	dd11      	ble.n	81754 <window_text_paint_function+0x118>
			char_box_y_start = (int16_t)(y_pos - text_window_data->y_scroll_pos);
   81730:	9a03      	ldr	r2, [sp, #12]
   81732:	9904      	ldr	r1, [sp, #16]
   81734:	1a55      	subs	r5, r2, r1
   81736:	b2ad      	uxth	r5, r5
			if (char_box_x_start < client_width && char_box_x_end >= 0 &&
   81738:	0419      	lsls	r1, r3, #16
			char_box_y_start = (int16_t)(y_pos - text_window_data->y_scroll_pos);
   8173a:	b22a      	sxth	r2, r5
			if (char_box_x_start < client_width && char_box_x_end >= 0 &&
   8173c:	d40a      	bmi.n	81754 <window_text_paint_function+0x118>
   8173e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			char_box_y_end = (int16_t)((y_pos - text_window_data->y_scroll_pos) + mw_gl_get_font_width());
   81740:	4405      	add	r5, r0
			if (char_box_x_start < client_width && char_box_x_end >= 0 &&
   81742:	4293      	cmp	r3, r2
   81744:	dd06      	ble.n	81754 <window_text_paint_function+0x118>
					char_box_y_start < client_height && char_box_y_end >= 0)
   81746:	042b      	lsls	r3, r5, #16
   81748:	d404      	bmi.n	81754 <window_text_paint_function+0x118>
				mw_gl_character(draw_info, char_box_x_start, char_box_y_start, c);
   8174a:	4659      	mov	r1, fp
   8174c:	464b      	mov	r3, r9
   8174e:	9808      	ldr	r0, [sp, #32]
   81750:	4d22      	ldr	r5, [pc, #136]	; (817dc <window_text_paint_function+0x1a0>)
   81752:	47a8      	blx	r5
			x_pos += mw_gl_get_font_width() + 1;
   81754:	47b8      	blx	r7
   81756:	3001      	adds	r0, #1
   81758:	4404      	add	r4, r0
			if (c == '\n')
   8175a:	f1b9 0f0a 	cmp.w	r9, #10
			x_pos += mw_gl_get_font_width() + 1;
   8175e:	b224      	sxth	r4, r4
			if (c == '\n')
   81760:	d1c9      	bne.n	816f6 <window_text_paint_function+0xba>
				y_pos += mw_gl_get_font_height() + 1;
   81762:	4b1f      	ldr	r3, [pc, #124]	; (817e0 <window_text_paint_function+0x1a4>)
   81764:	4798      	blx	r3
   81766:	9b03      	ldr	r3, [sp, #12]
   81768:	3001      	adds	r0, #1
   8176a:	4403      	add	r3, r0
   8176c:	b21b      	sxth	r3, r3
   8176e:	9306      	str	r3, [sp, #24]
		for (i = 0; i < file_size; i++)
   81770:	9b07      	ldr	r3, [sp, #28]
				x_pos = 0;
   81772:	2400      	movs	r4, #0
		for (i = 0; i < file_size; i++)
   81774:	42b3      	cmp	r3, r6
   81776:	d1c1      	bne.n	816fc <window_text_paint_function+0xc0>
		app_file_close();
   81778:	4b1a      	ldr	r3, [pc, #104]	; (817e4 <window_text_paint_function+0x1a8>)
}
   8177a:	b013      	add	sp, #76	; 0x4c
   8177c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		app_file_close();
   81780:	4718      	bx	r3
		MW_ASSERT((bool)false, "Couldn't find window instance data");
   81782:	2293      	movs	r2, #147	; 0x93
   81784:	46ac      	mov	ip, r5
   81786:	4b18      	ldr	r3, [pc, #96]	; (817e8 <window_text_paint_function+0x1ac>)
   81788:	4903      	ldr	r1, [pc, #12]	; (81798 <window_text_paint_function+0x15c>)
}
   8178a:	b013      	add	sp, #76	; 0x4c
   8178c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MW_ASSERT((bool)false, "Couldn't find window instance data");
   81790:	4760      	bx	ip
   81792:	bf00      	nop
   81794:	000a656c 	.word	0x000a656c
   81798:	000a6698 	.word	0x000a6698
   8179c:	00095add 	.word	0x00095add
   817a0:	00090885 	.word	0x00090885
   817a4:	000846fd 	.word	0x000846fd
   817a8:	000846c9 	.word	0x000846c9
   817ac:	000846f1 	.word	0x000846f1
   817b0:	000846e1 	.word	0x000846e1
   817b4:	00090735 	.word	0x00090735
   817b8:	000850e1 	.word	0x000850e1
   817bc:	000846b1 	.word	0x000846b1
   817c0:	00084709 	.word	0x00084709
   817c4:	00084715 	.word	0x00084715
   817c8:	00099af1 	.word	0x00099af1
   817cc:	00099b29 	.word	0x00099b29
   817d0:	00099b91 	.word	0x00099b91
   817d4:	00084751 	.word	0x00084751
   817d8:	00099b35 	.word	0x00099b35
   817dc:	000855b9 	.word	0x000855b9
   817e0:	000847a9 	.word	0x000847a9
   817e4:	00099ba5 	.word	0x00099ba5
   817e8:	000a6630 	.word	0x000a6630

000817ec <window_text_message_function>:

void window_text_message_function(const mw_message_t *message)
{
   817ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	text_window_data_t *text_window_data;
	uint32_t temp_uint32;

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   817f0:	4605      	mov	r5, r0
   817f2:	3000      	adds	r0, #0
   817f4:	bf18      	it	ne
   817f6:	2001      	movne	r0, #1
{
   817f8:	b08f      	sub	sp, #60	; 0x3c
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   817fa:	4ba3      	ldr	r3, [pc, #652]	; (81a88 <window_text_message_function+0x29c>)
   817fc:	22dd      	movs	r2, #221	; 0xdd
   817fe:	49a3      	ldr	r1, [pc, #652]	; (81a8c <window_text_message_function+0x2a0>)
   81800:	4ea3      	ldr	r6, [pc, #652]	; (81a90 <window_text_message_function+0x2a4>)
   81802:	47b0      	blx	r6

	/* get this window instance data pointer and check for not null */
	text_window_data = (text_window_data_t *)mw_get_window_instance_data(message->recipient_handle);
   81804:	6868      	ldr	r0, [r5, #4]
   81806:	4ba3      	ldr	r3, [pc, #652]	; (81a94 <window_text_message_function+0x2a8>)
   81808:	4798      	blx	r3
	if (text_window_data == (void*)0)
   8180a:	2800      	cmp	r0, #0
   8180c:	f000 810b 	beq.w	81a26 <window_text_message_function+0x23a>
	{
		MW_ASSERT((bool)false, "Couldn't find window instance data");
		return;
	}

	switch (message->message_id)
   81810:	7a2b      	ldrb	r3, [r5, #8]
   81812:	4604      	mov	r4, r0
   81814:	2b17      	cmp	r3, #23
   81816:	d815      	bhi.n	81844 <window_text_message_function+0x58>
   81818:	e8df f003 	tbb	[pc, r3]
   8181c:	1414af7c 	.word	0x1414af7c
   81820:	1414140c 	.word	0x1414140c
   81824:	14141414 	.word	0x14141414
   81828:	14141414 	.word	0x14141414
   8182c:	14141414 	.word	0x14141414
   81830:	171414a6 	.word	0x171414a6
	if (app_file_open(text_window_data->path_and_filename_text))
   81834:	4b98      	ldr	r3, [pc, #608]	; (81a98 <window_text_message_function+0x2ac>)
   81836:	4798      	blx	r3
   81838:	2800      	cmp	r0, #0
   8183a:	f040 80c5 	bne.w	819c8 <window_text_message_function+0x1dc>
		get_file_dimensions(text_window_data);
		break;

	case MW_WINDOW_RESIZED_MESSAGE:
		get_file_dimensions(text_window_data);
		text_window_data->x_scroll_pos = 0;
   8183e:	2300      	movs	r3, #0
   81840:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

	default:
		/* keep MISRA happy */
		break;
	}
}
   81844:	b00f      	add	sp, #60	; 0x3c
   81846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mw_gl_set_font(MW_GL_FONT_9);
   8184a:	4b94      	ldr	r3, [pc, #592]	; (81a9c <window_text_message_function+0x2b0>)
   8184c:	2000      	movs	r0, #0
   8184e:	4798      	blx	r3
			if (mw_get_window_client_rect(message->recipient_handle).width < text_window_data->max_line_width * (mw_gl_get_font_width() + 1))
   81850:	4f93      	ldr	r7, [pc, #588]	; (81aa0 <window_text_message_function+0x2b4>)
   81852:	6869      	ldr	r1, [r5, #4]
   81854:	a802      	add	r0, sp, #8
   81856:	f8df 826c 	ldr.w	r8, [pc, #620]	; 81ac4 <window_text_message_function+0x2d8>
   8185a:	47b8      	blx	r7
   8185c:	f9bd 900c 	ldrsh.w	r9, [sp, #12]
   81860:	f9b4 6088 	ldrsh.w	r6, [r4, #136]	; 0x88
   81864:	47c0      	blx	r8
   81866:	fb00 6606 	mla	r6, r0, r6, r6
   8186a:	45b1      	cmp	r9, r6
   8186c:	f280 8091 	bge.w	81992 <window_text_message_function+0x1a6>
				pixels_to_move = text_window_data->last_drag_x - (int16_t)temp_uint32;
   81870:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
				text_window_data->x_scroll_pos += pixels_to_move;
   81874:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
				temp_uint32 = message->message_data >> 16;
   81878:	89ea      	ldrh	r2, [r5, #14]
				text_window_data->x_scroll_pos += pixels_to_move;
   8187a:	440b      	add	r3, r1
   8187c:	1a9b      	subs	r3, r3, r2
   8187e:	b21b      	sxth	r3, r3
				if (text_window_data->x_scroll_pos < 0)
   81880:	2b00      	cmp	r3, #0
				text_window_data->last_drag_x = (int16_t)temp_uint32;
   81882:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
				if (text_window_data->x_scroll_pos < 0)
   81886:	f2c0 80f4 	blt.w	81a72 <window_text_message_function+0x286>
   8188a:	461e      	mov	r6, r3
				text_window_data->x_scroll_pos += pixels_to_move;
   8188c:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
				if (text_window_data->x_scroll_pos > text_window_data->max_line_width * (mw_gl_get_font_width() + 1) -
   81890:	f9b4 9088 	ldrsh.w	r9, [r4, #136]	; 0x88
   81894:	47c0      	blx	r8
   81896:	fb00 9909 	mla	r9, r0, r9, r9
						mw_get_window_client_rect(message->recipient_handle).width)
   8189a:	6869      	ldr	r1, [r5, #4]
   8189c:	a804      	add	r0, sp, #16
   8189e:	47b8      	blx	r7
   818a0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
				if (text_window_data->x_scroll_pos > text_window_data->max_line_width * (mw_gl_get_font_width() + 1) -
   818a4:	eba9 0903 	sub.w	r9, r9, r3
   818a8:	45b1      	cmp	r9, r6
   818aa:	f2c0 80c4 	blt.w	81a36 <window_text_message_function+0x24a>
			if (mw_get_window_client_rect(message->recipient_handle).height < text_window_data->number_of_lines * (mw_gl_get_font_height() + 1))
   818ae:	6869      	ldr	r1, [r5, #4]
   818b0:	a808      	add	r0, sp, #32
   818b2:	f8df 8214 	ldr.w	r8, [pc, #532]	; 81ac8 <window_text_message_function+0x2dc>
   818b6:	47b8      	blx	r7
   818b8:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
   818bc:	f9b4 608a 	ldrsh.w	r6, [r4, #138]	; 0x8a
   818c0:	47c0      	blx	r8
   818c2:	fb00 6606 	mla	r6, r0, r6, r6
   818c6:	45b1      	cmp	r9, r6
   818c8:	da1e      	bge.n	81908 <window_text_message_function+0x11c>
				pixels_to_move = text_window_data->last_drag_y - (int16_t)temp_uint32;
   818ca:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
				text_window_data->y_scroll_pos += pixels_to_move;
   818ce:	f8b4 108e 	ldrh.w	r1, [r4, #142]	; 0x8e
				temp_uint32 = message->message_data & 0xffffU;
   818d2:	68ea      	ldr	r2, [r5, #12]
				text_window_data->y_scroll_pos += pixels_to_move;
   818d4:	440b      	add	r3, r1
   818d6:	1a9b      	subs	r3, r3, r2
   818d8:	b21b      	sxth	r3, r3
				if (text_window_data->y_scroll_pos < 0)
   818da:	2b00      	cmp	r3, #0
				text_window_data->last_drag_y = (int16_t)temp_uint32;
   818dc:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92
				if (text_window_data->y_scroll_pos < 0)
   818e0:	f2c0 80cc 	blt.w	81a7c <window_text_message_function+0x290>
   818e4:	461e      	mov	r6, r3
				text_window_data->y_scroll_pos += pixels_to_move;
   818e6:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
				if (text_window_data->y_scroll_pos > text_window_data->number_of_lines * (mw_gl_get_font_height() + 1) -
   818ea:	f9b4 908a 	ldrsh.w	r9, [r4, #138]	; 0x8a
   818ee:	47c0      	blx	r8
   818f0:	fb00 9909 	mla	r9, r0, r9, r9
						mw_get_window_client_rect(message->recipient_handle).height)
   818f4:	6869      	ldr	r1, [r5, #4]
   818f6:	a80a      	add	r0, sp, #40	; 0x28
   818f8:	47b8      	blx	r7
   818fa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
				if (text_window_data->y_scroll_pos > text_window_data->number_of_lines * (mw_gl_get_font_height() + 1) -
   818fe:	eba9 0903 	sub.w	r9, r9, r3
   81902:	454e      	cmp	r6, r9
   81904:	f300 80a6 	bgt.w	81a54 <window_text_message_function+0x268>
				mw_paint_window_client(message->recipient_handle);
   81908:	6868      	ldr	r0, [r5, #4]
   8190a:	4b66      	ldr	r3, [pc, #408]	; (81aa4 <window_text_message_function+0x2b8>)
}
   8190c:	b00f      	add	sp, #60	; 0x3c
   8190e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				mw_paint_window_client(message->recipient_handle);
   81912:	4718      	bx	r3
	if (app_file_open(text_window_data->path_and_filename_text))
   81914:	4b60      	ldr	r3, [pc, #384]	; (81a98 <window_text_message_function+0x2ac>)
   81916:	4798      	blx	r3
   81918:	2800      	cmp	r0, #0
   8191a:	d093      	beq.n	81844 <window_text_message_function+0x58>
		file_size = app_file_size();
   8191c:	4b62      	ldr	r3, [pc, #392]	; (81aa8 <window_text_message_function+0x2bc>)
   8191e:	4798      	blx	r3
		(void)app_file_seek(0UL);
   81920:	4b62      	ldr	r3, [pc, #392]	; (81aac <window_text_message_function+0x2c0>)
		file_size = app_file_size();
   81922:	4680      	mov	r8, r0
		(void)app_file_seek(0UL);
   81924:	2000      	movs	r0, #0
   81926:	4798      	blx	r3
		text_window_data->max_line_width = 0;
   81928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   8192c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		for (i = 0; i < file_size; i++)
   81930:	f1b8 0f00 	cmp.w	r8, #0
   81934:	d043      	beq.n	819be <window_text_message_function+0x1d2>
   81936:	2600      	movs	r6, #0
   81938:	4f5d      	ldr	r7, [pc, #372]	; (81ab0 <window_text_message_function+0x2c4>)
   8193a:	4635      	mov	r5, r6
   8193c:	e004      	b.n	81948 <window_text_message_function+0x15c>
				this_line_width++;
   8193e:	3501      	adds	r5, #1
   81940:	b22d      	sxth	r5, r5
		for (i = 0; i < file_size; i++)
   81942:	3601      	adds	r6, #1
   81944:	45b0      	cmp	r8, r6
   81946:	d034      	beq.n	819b2 <window_text_message_function+0x1c6>
			c = app_file_getc();
   81948:	47b8      	blx	r7
			if (c == (uint8_t)'\n')
   8194a:	280a      	cmp	r0, #10
   8194c:	d1f7      	bne.n	8193e <window_text_message_function+0x152>
				if (this_line_width > text_window_data->max_line_width)
   8194e:	f9b4 3088 	ldrsh.w	r3, [r4, #136]	; 0x88
   81952:	42ab      	cmp	r3, r5
				text_window_data->number_of_lines++;
   81954:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
					text_window_data->max_line_width = this_line_width;
   81958:	bfb8      	it	lt
   8195a:	f8a4 5088 	strhlt.w	r5, [r4, #136]	; 0x88
				text_window_data->number_of_lines++;
   8195e:	3301      	adds	r3, #1
				this_line_width = 0;
   81960:	2500      	movs	r5, #0
				text_window_data->number_of_lines++;
   81962:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
   81966:	e7ec      	b.n	81942 <window_text_message_function+0x156>
		temp_uint32 = message->message_data >> 16;
   81968:	89eb      	ldrh	r3, [r5, #14]
		text_window_data->last_drag_x = (int16_t)temp_uint32;
   8196a:	f8a0 3090 	strh.w	r3, [r0, #144]	; 0x90
		text_window_data->last_drag_y = (int16_t)temp_uint32;
   8196e:	68eb      	ldr	r3, [r5, #12]
   81970:	f8a0 3092 	strh.w	r3, [r0, #146]	; 0x92
}
   81974:	b00f      	add	sp, #60	; 0x3c
   81976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		mw_post_message(MW_WINDOW_EXTERNAL_WINDOW_REMOVED_MESSAGE,
   8197a:	2300      	movs	r3, #0
   8197c:	4a4d      	ldr	r2, [pc, #308]	; (81ab4 <window_text_message_function+0x2c8>)
   8197e:	6869      	ldr	r1, [r5, #4]
   81980:	6812      	ldr	r2, [r2, #0]
   81982:	2050      	movs	r0, #80	; 0x50
   81984:	9301      	str	r3, [sp, #4]
   81986:	9300      	str	r3, [sp, #0]
   81988:	4c4b      	ldr	r4, [pc, #300]	; (81ab8 <window_text_message_function+0x2cc>)
   8198a:	47a0      	blx	r4
}
   8198c:	b00f      	add	sp, #60	; 0x3c
   8198e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (mw_get_window_client_rect(message->recipient_handle).height < text_window_data->number_of_lines * (mw_gl_get_font_height() + 1))
   81992:	6869      	ldr	r1, [r5, #4]
   81994:	a808      	add	r0, sp, #32
   81996:	f8df 8130 	ldr.w	r8, [pc, #304]	; 81ac8 <window_text_message_function+0x2dc>
   8199a:	47b8      	blx	r7
   8199c:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
   819a0:	f9b4 608a 	ldrsh.w	r6, [r4, #138]	; 0x8a
   819a4:	47c0      	blx	r8
   819a6:	fb00 6606 	mla	r6, r0, r6, r6
   819aa:	45b1      	cmp	r9, r6
   819ac:	f6bf af4a 	bge.w	81844 <window_text_message_function+0x58>
   819b0:	e78b      	b.n	818ca <window_text_message_function+0xde>
		if (this_line_width > text_window_data->max_line_width)
   819b2:	f9b4 3088 	ldrsh.w	r3, [r4, #136]	; 0x88
   819b6:	42ab      	cmp	r3, r5
			text_window_data->max_line_width = this_line_width;
   819b8:	bfb8      	it	lt
   819ba:	f8a4 5088 	strhlt.w	r5, [r4, #136]	; 0x88
		app_file_close();
   819be:	4b3f      	ldr	r3, [pc, #252]	; (81abc <window_text_message_function+0x2d0>)
}
   819c0:	b00f      	add	sp, #60	; 0x3c
   819c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		app_file_close();
   819c6:	4718      	bx	r3
		file_size = app_file_size();
   819c8:	4b37      	ldr	r3, [pc, #220]	; (81aa8 <window_text_message_function+0x2bc>)
   819ca:	4798      	blx	r3
		(void)app_file_seek(0UL);
   819cc:	4b37      	ldr	r3, [pc, #220]	; (81aac <window_text_message_function+0x2c0>)
		file_size = app_file_size();
   819ce:	4680      	mov	r8, r0
		(void)app_file_seek(0UL);
   819d0:	2000      	movs	r0, #0
   819d2:	4798      	blx	r3
		text_window_data->max_line_width = 0;
   819d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   819d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		for (i = 0; i < file_size; i++)
   819dc:	f1b8 0f00 	cmp.w	r8, #0
   819e0:	d01e      	beq.n	81a20 <window_text_message_function+0x234>
   819e2:	2600      	movs	r6, #0
   819e4:	4f32      	ldr	r7, [pc, #200]	; (81ab0 <window_text_message_function+0x2c4>)
   819e6:	4635      	mov	r5, r6
   819e8:	e004      	b.n	819f4 <window_text_message_function+0x208>
				this_line_width++;
   819ea:	3501      	adds	r5, #1
   819ec:	b22d      	sxth	r5, r5
		for (i = 0; i < file_size; i++)
   819ee:	3601      	adds	r6, #1
   819f0:	45b0      	cmp	r8, r6
   819f2:	d00f      	beq.n	81a14 <window_text_message_function+0x228>
			c = app_file_getc();
   819f4:	47b8      	blx	r7
			if (c == (uint8_t)'\n')
   819f6:	280a      	cmp	r0, #10
   819f8:	d1f7      	bne.n	819ea <window_text_message_function+0x1fe>
				if (this_line_width > text_window_data->max_line_width)
   819fa:	f9b4 3088 	ldrsh.w	r3, [r4, #136]	; 0x88
   819fe:	42ab      	cmp	r3, r5
				text_window_data->number_of_lines++;
   81a00:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
					text_window_data->max_line_width = this_line_width;
   81a04:	bfb8      	it	lt
   81a06:	f8a4 5088 	strhlt.w	r5, [r4, #136]	; 0x88
				text_window_data->number_of_lines++;
   81a0a:	3301      	adds	r3, #1
				this_line_width = 0;
   81a0c:	2500      	movs	r5, #0
				text_window_data->number_of_lines++;
   81a0e:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
   81a12:	e7ec      	b.n	819ee <window_text_message_function+0x202>
		if (this_line_width > text_window_data->max_line_width)
   81a14:	f9b4 3088 	ldrsh.w	r3, [r4, #136]	; 0x88
   81a18:	42ab      	cmp	r3, r5
			text_window_data->max_line_width = this_line_width;
   81a1a:	bfb8      	it	lt
   81a1c:	f8a4 5088 	strhlt.w	r5, [r4, #136]	; 0x88
		app_file_close();
   81a20:	4b26      	ldr	r3, [pc, #152]	; (81abc <window_text_message_function+0x2d0>)
   81a22:	4798      	blx	r3
   81a24:	e70b      	b.n	8183e <window_text_message_function+0x52>
		MW_ASSERT((bool)false, "Couldn't find window instance data");
   81a26:	22e3      	movs	r2, #227	; 0xe3
   81a28:	46b4      	mov	ip, r6
   81a2a:	4b25      	ldr	r3, [pc, #148]	; (81ac0 <window_text_message_function+0x2d4>)
   81a2c:	4917      	ldr	r1, [pc, #92]	; (81a8c <window_text_message_function+0x2a0>)
}
   81a2e:	b00f      	add	sp, #60	; 0x3c
   81a30:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		MW_ASSERT((bool)false, "Couldn't find window instance data");
   81a34:	4760      	bx	ip
					text_window_data->x_scroll_pos = text_window_data->max_line_width * (mw_gl_get_font_width() + 1) -
   81a36:	f8b4 6088 	ldrh.w	r6, [r4, #136]	; 0x88
   81a3a:	47c0      	blx	r8
   81a3c:	fb00 6606 	mla	r6, r0, r6, r6
							mw_get_window_client_rect(message->recipient_handle).width;
   81a40:	6869      	ldr	r1, [r5, #4]
   81a42:	a806      	add	r0, sp, #24
   81a44:	47b8      	blx	r7
					text_window_data->x_scroll_pos = text_window_data->max_line_width * (mw_gl_get_font_width() + 1) -
   81a46:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   81a4a:	b2b6      	uxth	r6, r6
   81a4c:	1af6      	subs	r6, r6, r3
   81a4e:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
   81a52:	e72c      	b.n	818ae <window_text_message_function+0xc2>
					text_window_data->y_scroll_pos = text_window_data->number_of_lines * (mw_gl_get_font_height() + 1) -
   81a54:	f8b4 608a 	ldrh.w	r6, [r4, #138]	; 0x8a
   81a58:	47c0      	blx	r8
   81a5a:	fb00 6606 	mla	r6, r0, r6, r6
							mw_get_window_client_rect(message->recipient_handle).height;
   81a5e:	6869      	ldr	r1, [r5, #4]
   81a60:	a80c      	add	r0, sp, #48	; 0x30
   81a62:	47b8      	blx	r7
					text_window_data->y_scroll_pos = text_window_data->number_of_lines * (mw_gl_get_font_height() + 1) -
   81a64:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   81a68:	b2b6      	uxth	r6, r6
   81a6a:	1af6      	subs	r6, r6, r3
   81a6c:	f8a4 608e 	strh.w	r6, [r4, #142]	; 0x8e
   81a70:	e74a      	b.n	81908 <window_text_message_function+0x11c>
					text_window_data->x_scroll_pos = 0;
   81a72:	2300      	movs	r3, #0
   81a74:	461e      	mov	r6, r3
   81a76:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
   81a7a:	e709      	b.n	81890 <window_text_message_function+0xa4>
					text_window_data->y_scroll_pos = 0;
   81a7c:	2300      	movs	r3, #0
   81a7e:	461e      	mov	r6, r3
   81a80:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
   81a84:	e731      	b.n	818ea <window_text_message_function+0xfe>
   81a86:	bf00      	nop
   81a88:	000a6618 	.word	0x000a6618
   81a8c:	000a66b4 	.word	0x000a66b4
   81a90:	00095add 	.word	0x00095add
   81a94:	00090885 	.word	0x00090885
   81a98:	00099af1 	.word	0x00099af1
   81a9c:	00084715 	.word	0x00084715
   81aa0:	00090735 	.word	0x00090735
   81aa4:	00090409 	.word	0x00090409
   81aa8:	00099b29 	.word	0x00099b29
   81aac:	00099b91 	.word	0x00099b91
   81ab0:	00099b35 	.word	0x00099b35
   81ab4:	20072f90 	.word	0x20072f90
   81ab8:	00091955 	.word	0x00091955
   81abc:	00099ba5 	.word	0x00099ba5
   81ac0:	000a6630 	.word	0x000a6630
   81ac4:	00084751 	.word	0x00084751
   81ac8:	000847a9 	.word	0x000847a9

00081acc <setCalibrationMatrix>:
#include "calibrate.h"

int setCalibrationMatrix( POINT_T * displayPtr,
						  POINT_T * screenPtr,
                          MATRIX_CAL * matrixPtr)
{
   81acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    int  retValue = CALIBRATE_OK ;



    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
   81ad0:	690b      	ldr	r3, [r1, #16]
   81ad2:	694c      	ldr	r4, [r1, #20]
   81ad4:	680f      	ldr	r7, [r1, #0]
   81ad6:	68cd      	ldr	r5, [r1, #12]
   81ad8:	1aff      	subs	r7, r7, r3
   81ada:	1b2d      	subs	r5, r5, r4
   81adc:	fb05 f507 	mul.w	r5, r5, r7
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
   81ae0:	684e      	ldr	r6, [r1, #4]
   81ae2:	688f      	ldr	r7, [r1, #8]
   81ae4:	1b34      	subs	r4, r6, r4
   81ae6:	1afb      	subs	r3, r7, r3
    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
   81ae8:	fb04 5413 	mls	r4, r4, r3, r5
   81aec:	6194      	str	r4, [r2, #24]

    if( matrixPtr->Divider == 0 )
   81aee:	2c00      	cmp	r4, #0
   81af0:	d07b      	beq.n	81bea <setCalibrationMatrix+0x11e>
   81af2:	4603      	mov	r3, r0
    {
        retValue = CALIBRATE_NOT_OK ;
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
   81af4:	694f      	ldr	r7, [r1, #20]
   81af6:	6900      	ldr	r0, [r0, #16]
   81af8:	681e      	ldr	r6, [r3, #0]
   81afa:	68cc      	ldr	r4, [r1, #12]
   81afc:	1a36      	subs	r6, r6, r0
   81afe:	1be4      	subs	r4, r4, r7
   81b00:	fb04 f406 	mul.w	r4, r4, r6
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
   81b04:	684d      	ldr	r5, [r1, #4]
   81b06:	689e      	ldr	r6, [r3, #8]
   81b08:	1bed      	subs	r5, r5, r7
   81b0a:	1a30      	subs	r0, r6, r0
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
   81b0c:	fb05 4010 	mls	r0, r5, r0, r4
   81b10:	6010      	str	r0, [r2, #0]

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
   81b12:	690f      	ldr	r7, [r1, #16]
   81b14:	6918      	ldr	r0, [r3, #16]
   81b16:	689c      	ldr	r4, [r3, #8]
   81b18:	680e      	ldr	r6, [r1, #0]
   81b1a:	1a24      	subs	r4, r4, r0
   81b1c:	1bf6      	subs	r6, r6, r7
   81b1e:	fb04 f406 	mul.w	r4, r4, r6
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
   81b22:	688d      	ldr	r5, [r1, #8]
   81b24:	681e      	ldr	r6, [r3, #0]
   81b26:	1bed      	subs	r5, r5, r7
   81b28:	1a30      	subs	r0, r6, r0
        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
   81b2a:	fb05 4010 	mls	r0, r5, r0, r4
   81b2e:	6050      	str	r0, [r2, #4]

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
   81b30:	691d      	ldr	r5, [r3, #16]
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
   81b32:	f8d1 c000 	ldr.w	ip, [r1]
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
   81b36:	6898      	ldr	r0, [r3, #8]
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
   81b38:	fb0c fe05 	mul.w	lr, ip, r5
   81b3c:	681e      	ldr	r6, [r3, #0]
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
   81b3e:	690f      	ldr	r7, [r1, #16]
   81b40:	688c      	ldr	r4, [r1, #8]
   81b42:	fb00 f807 	mul.w	r8, r0, r7
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
   81b46:	fb06 ee17 	mls	lr, r6, r7, lr
   81b4a:	68cf      	ldr	r7, [r1, #12]
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
   81b4c:	fb05 8514 	mls	r5, r5, r4, r8
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
   81b50:	fb07 f70e 	mul.w	r7, r7, lr
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
   81b54:	fb06 f404 	mul.w	r4, r6, r4
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
   81b58:	684e      	ldr	r6, [r1, #4]
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
   81b5a:	fb0c 4410 	mls	r4, ip, r0, r4
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
   81b5e:	fb06 7505 	mla	r5, r6, r5, r7
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
   81b62:	694e      	ldr	r6, [r1, #20]
    int  retValue = CALIBRATE_OK ;
   81b64:	f04f 0c00 	mov.w	ip, #0
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
   81b68:	fb06 5404 	mla	r4, r6, r4, r5
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
   81b6c:	6094      	str	r4, [r2, #8]

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
   81b6e:	695c      	ldr	r4, [r3, #20]
   81b70:	685f      	ldr	r7, [r3, #4]
   81b72:	694e      	ldr	r6, [r1, #20]
   81b74:	68cd      	ldr	r5, [r1, #12]
   81b76:	1b3f      	subs	r7, r7, r4
   81b78:	1bad      	subs	r5, r5, r6
   81b7a:	fb05 f507 	mul.w	r5, r5, r7
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
   81b7e:	68d8      	ldr	r0, [r3, #12]
   81b80:	684f      	ldr	r7, [r1, #4]
   81b82:	1b04      	subs	r4, r0, r4
   81b84:	1bbe      	subs	r6, r7, r6
        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
   81b86:	fb06 5414 	mls	r4, r6, r4, r5
   81b8a:	60d4      	str	r4, [r2, #12]

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
   81b8c:	690e      	ldr	r6, [r1, #16]
   81b8e:	695c      	ldr	r4, [r3, #20]
   81b90:	68dd      	ldr	r5, [r3, #12]
   81b92:	680f      	ldr	r7, [r1, #0]
   81b94:	1b2d      	subs	r5, r5, r4
   81b96:	1bbf      	subs	r7, r7, r6
   81b98:	fb05 f507 	mul.w	r5, r5, r7
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
   81b9c:	6858      	ldr	r0, [r3, #4]
   81b9e:	688f      	ldr	r7, [r1, #8]
   81ba0:	1b04      	subs	r4, r0, r4
   81ba2:	1bbe      	subs	r6, r7, r6
        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
   81ba4:	fb06 5414 	mls	r4, r6, r4, r5
   81ba8:	6114      	str	r4, [r2, #16]

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
   81baa:	695d      	ldr	r5, [r3, #20]
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
   81bac:	f8d1 e000 	ldr.w	lr, [r1]
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
   81bb0:	690e      	ldr	r6, [r1, #16]
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
   81bb2:	fb0e f705 	mul.w	r7, lr, r5
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
   81bb6:	68dc      	ldr	r4, [r3, #12]
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
   81bb8:	685b      	ldr	r3, [r3, #4]
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
   81bba:	fb04 f806 	mul.w	r8, r4, r6
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
   81bbe:	fb03 7716 	mls	r7, r3, r6, r7
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
   81bc2:	688e      	ldr	r6, [r1, #8]
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
   81bc4:	68c8      	ldr	r0, [r1, #12]
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
   81bc6:	fb03 f306 	mul.w	r3, r3, r6
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
   81bca:	fb05 8516 	mls	r5, r5, r6, r8
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
   81bce:	fb00 f607 	mul.w	r6, r0, r7
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
   81bd2:	fb0e 3414 	mls	r4, lr, r4, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
   81bd6:	684b      	ldr	r3, [r1, #4]
   81bd8:	fb03 6505 	mla	r5, r3, r5, r6
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
   81bdc:	694b      	ldr	r3, [r1, #20]
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
   81bde:	fb03 5404 	mla	r4, r3, r4, r5
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
   81be2:	6154      	str	r4, [r2, #20]
    }

    return( retValue ) ;

} /* end of setCalibrationMatrix() */
   81be4:	4660      	mov	r0, ip
   81be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        retValue = CALIBRATE_NOT_OK ;
   81bea:	f04f 3cff 	mov.w	ip, #4294967295
    return( retValue ) ;
   81bee:	e7f9      	b.n	81be4 <setCalibrationMatrix+0x118>

00081bf0 <getDisplayPoint>:
 *
 */
int getDisplayPoint( POINT_T * displayPtr,
					 POINT_T * screenPtr,
                     MATRIX_CAL * matrixPtr )
{
   81bf0:	b4f0      	push	{r4, r5, r6, r7}
    int retValue = CALIBRATE_OK ;


    if( matrixPtr->Divider != 0 )
   81bf2:	6995      	ldr	r5, [r2, #24]
   81bf4:	b1f5      	cbz	r5, 81c34 <getDisplayPoint+0x44>
        /*  math. Make sure you add all terms together before      */
        /*  dividing, so that the remainder is not rounded off     */
        /*  prematurely.                                           */

        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
                          (matrixPtr->Bn * screenPtr->y) +
   81bf6:	6856      	ldr	r6, [r2, #4]
   81bf8:	684c      	ldr	r4, [r1, #4]
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
   81bfa:	6813      	ldr	r3, [r2, #0]
                          (matrixPtr->Bn * screenPtr->y) +
   81bfc:	fb04 f406 	mul.w	r4, r4, r6
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
   81c00:	680f      	ldr	r7, [r1, #0]
                          (matrixPtr->Bn * screenPtr->y) +
   81c02:	6896      	ldr	r6, [r2, #8]
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
   81c04:	fb07 4303 	mla	r3, r7, r3, r4
                          (matrixPtr->Bn * screenPtr->y) +
   81c08:	4433      	add	r3, r6
                           matrixPtr->Cn
                        ) / matrixPtr->Divider ;
   81c0a:	fb93 f3f5 	sdiv	r3, r3, r5
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
   81c0e:	6003      	str	r3, [r0, #0]

        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
                          (matrixPtr->En * screenPtr->y) +
   81c10:	6914      	ldr	r4, [r2, #16]
   81c12:	684b      	ldr	r3, [r1, #4]
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
   81c14:	680d      	ldr	r5, [r1, #0]
                          (matrixPtr->En * screenPtr->y) +
   81c16:	fb03 f104 	mul.w	r1, r3, r4
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
   81c1a:	68d3      	ldr	r3, [r2, #12]
                          (matrixPtr->En * screenPtr->y) +
   81c1c:	6954      	ldr	r4, [r2, #20]
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
   81c1e:	fb05 1303 	mla	r3, r5, r3, r1
                           matrixPtr->Fn
                        ) / matrixPtr->Divider ;
   81c22:	6992      	ldr	r2, [r2, #24]
                          (matrixPtr->En * screenPtr->y) +
   81c24:	4423      	add	r3, r4
                        ) / matrixPtr->Divider ;
   81c26:	fb93 f3f2 	sdiv	r3, r3, r2
    int retValue = CALIBRATE_OK ;
   81c2a:	2200      	movs	r2, #0
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
   81c2c:	6043      	str	r3, [r0, #4]
        retValue = CALIBRATE_NOT_OK;
    }

    return (retValue);

} /* end of getDisplayPoint() */
   81c2e:	4610      	mov	r0, r2
   81c30:	bcf0      	pop	{r4, r5, r6, r7}
   81c32:	4770      	bx	lr
        retValue = CALIBRATE_NOT_OK;
   81c34:	f04f 32ff 	mov.w	r2, #4294967295
    return (retValue);
   81c38:	e7f9      	b.n	81c2e <getDisplayPoint+0x3e>
   81c3a:	bf00      	nop

00081c3c <mw_dialog_date_chooser_paint_function>:
	char text_year[16];
	char text_month[16];
	char text_date[16];
	char temp_buffer[5];

	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   81c3c:	1c0b      	adds	r3, r1, #0
   81c3e:	bf18      	it	ne
   81c40:	2301      	movne	r3, #1
{
   81c42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81c46:	4606      	mov	r6, r0
   81c48:	b096      	sub	sp, #88	; 0x58
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   81c4a:	22d9      	movs	r2, #217	; 0xd9
   81c4c:	4618      	mov	r0, r3
   81c4e:	460c      	mov	r4, r1
   81c50:	4b4c      	ldr	r3, [pc, #304]	; (81d84 <mw_dialog_date_chooser_paint_function+0x148>)
   81c52:	494d      	ldr	r1, [pc, #308]	; (81d88 <mw_dialog_date_chooser_paint_function+0x14c>)
   81c54:	4d4d      	ldr	r5, [pc, #308]	; (81d8c <mw_dialog_date_chooser_paint_function+0x150>)
   81c56:	47a8      	blx	r5

	mw_gl_set_fill(MW_GL_FILL);
   81c58:	2001      	movs	r0, #1
   81c5a:	4b4d      	ldr	r3, [pc, #308]	; (81d90 <mw_dialog_date_chooser_paint_function+0x154>)
   81c5c:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_WHITE);
   81c5e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   81c62:	4b4c      	ldr	r3, [pc, #304]	; (81d94 <mw_dialog_date_chooser_paint_function+0x158>)
   81c64:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   81c66:	2000      	movs	r0, #0
   81c68:	4b4b      	ldr	r3, [pc, #300]	; (81d98 <mw_dialog_date_chooser_paint_function+0x15c>)
   81c6a:	4798      	blx	r3
	mw_gl_clear_pattern();
   81c6c:	4b4b      	ldr	r3, [pc, #300]	; (81d9c <mw_dialog_date_chooser_paint_function+0x160>)
   81c6e:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
			0,
			0,
			mw_get_window_client_rect(window_handle).width,
   81c70:	4d4b      	ldr	r5, [pc, #300]	; (81da0 <mw_dialog_date_chooser_paint_function+0x164>)
   81c72:	4631      	mov	r1, r6
   81c74:	a806      	add	r0, sp, #24
   81c76:	47a8      	blx	r5
			mw_get_window_client_rect(window_handle).height);
   81c78:	4631      	mov	r1, r6
   81c7a:	a808      	add	r0, sp, #32
	mw_gl_rectangle(draw_info,
   81c7c:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
			mw_get_window_client_rect(window_handle).height);
   81c80:	47a8      	blx	r5
	mw_gl_rectangle(draw_info,
   81c82:	2200      	movs	r2, #0
   81c84:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
   81c88:	4611      	mov	r1, r2
   81c8a:	4633      	mov	r3, r6
   81c8c:	4620      	mov	r0, r4
   81c8e:	9500      	str	r5, [sp, #0]
   81c90:	4d44      	ldr	r5, [pc, #272]	; (81da4 <mw_dialog_date_chooser_paint_function+0x168>)
   81c92:	47a8      	blx	r5

	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   81c94:	2000      	movs	r0, #0
   81c96:	4b44      	ldr	r3, [pc, #272]	; (81da8 <mw_dialog_date_chooser_paint_function+0x16c>)
   81c98:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   81c9a:	2000      	movs	r0, #0
   81c9c:	4b43      	ldr	r3, [pc, #268]	; (81dac <mw_dialog_date_chooser_paint_function+0x170>)
   81c9e:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   81ca0:	2000      	movs	r0, #0
   81ca2:	4b43      	ldr	r3, [pc, #268]	; (81db0 <mw_dialog_date_chooser_paint_function+0x174>)
   81ca4:	4798      	blx	r3

	(void)mw_util_safe_itoa((int32_t)mw_dialog_date_chooser_data.current_date_year, temp_buffer, (size_t)5, 10, true, 4U, '0');
   81ca6:	f04f 0a30 	mov.w	sl, #48	; 0x30
   81caa:	2204      	movs	r2, #4
   81cac:	2301      	movs	r3, #1
	(void)mw_util_safe_strcpy(text_year, 16, "Year: ");
	(void)mw_util_safe_strcat(text_year, 16, temp_buffer);

	(void)mw_util_safe_itoa((int32_t)mw_dialog_date_chooser_data.current_date_month, temp_buffer, (size_t)5, 10, false, 0U, '0');
   81cae:	2600      	movs	r6, #0
	(void)mw_util_safe_itoa((int32_t)mw_dialog_date_chooser_data.current_date_year, temp_buffer, (size_t)5, 10, true, 4U, '0');
   81cb0:	4d40      	ldr	r5, [pc, #256]	; (81db4 <mw_dialog_date_chooser_paint_function+0x178>)
   81cb2:	f8df 911c 	ldr.w	r9, [pc, #284]	; 81dd0 <mw_dialog_date_chooser_paint_function+0x194>
   81cb6:	f8b5 0080 	ldrh.w	r0, [r5, #128]	; 0x80
   81cba:	a904      	add	r1, sp, #16
   81cbc:	9201      	str	r2, [sp, #4]
   81cbe:	9300      	str	r3, [sp, #0]
   81cc0:	2205      	movs	r2, #5
   81cc2:	230a      	movs	r3, #10
   81cc4:	f8cd a008 	str.w	sl, [sp, #8]
   81cc8:	47c8      	blx	r9
	(void)mw_util_safe_strcpy(text_year, 16, "Year: ");
   81cca:	f8df 8108 	ldr.w	r8, [pc, #264]	; 81dd4 <mw_dialog_date_chooser_paint_function+0x198>
   81cce:	4a3a      	ldr	r2, [pc, #232]	; (81db8 <mw_dialog_date_chooser_paint_function+0x17c>)
   81cd0:	2110      	movs	r1, #16
   81cd2:	a80a      	add	r0, sp, #40	; 0x28
   81cd4:	47c0      	blx	r8
	(void)mw_util_safe_strcat(text_year, 16, temp_buffer);
   81cd6:	4f39      	ldr	r7, [pc, #228]	; (81dbc <mw_dialog_date_chooser_paint_function+0x180>)
   81cd8:	aa04      	add	r2, sp, #16
   81cda:	2110      	movs	r1, #16
   81cdc:	a80a      	add	r0, sp, #40	; 0x28
   81cde:	47b8      	blx	r7
	(void)mw_util_safe_itoa((int32_t)mw_dialog_date_chooser_data.current_date_month, temp_buffer, (size_t)5, 10, false, 0U, '0');
   81ce0:	f895 0082 	ldrb.w	r0, [r5, #130]	; 0x82
   81ce4:	230a      	movs	r3, #10
   81ce6:	a904      	add	r1, sp, #16
   81ce8:	2205      	movs	r2, #5
   81cea:	f8cd a008 	str.w	sl, [sp, #8]
   81cee:	9601      	str	r6, [sp, #4]
   81cf0:	9600      	str	r6, [sp, #0]
   81cf2:	47c8      	blx	r9
	(void)mw_util_safe_strcpy(text_month, 16, "Month: ");
   81cf4:	4a32      	ldr	r2, [pc, #200]	; (81dc0 <mw_dialog_date_chooser_paint_function+0x184>)
   81cf6:	2110      	movs	r1, #16
   81cf8:	a80e      	add	r0, sp, #56	; 0x38
   81cfa:	47c0      	blx	r8
	(void)mw_util_safe_strcat(text_month, 16, temp_buffer);
   81cfc:	aa04      	add	r2, sp, #16
   81cfe:	2110      	movs	r1, #16
   81d00:	a80e      	add	r0, sp, #56	; 0x38
   81d02:	47b8      	blx	r7

	(void)mw_util_safe_itoa((int32_t)mw_dialog_date_chooser_data.current_date_date, temp_buffer, (size_t)5, 10, false, 0U, '0');
   81d04:	f895 0083 	ldrb.w	r0, [r5, #131]	; 0x83
   81d08:	230a      	movs	r3, #10
   81d0a:	a904      	add	r1, sp, #16
   81d0c:	2205      	movs	r2, #5
   81d0e:	f8cd a008 	str.w	sl, [sp, #8]
   81d12:	9601      	str	r6, [sp, #4]
   81d14:	9600      	str	r6, [sp, #0]
   81d16:	47c8      	blx	r9
	(void)mw_util_safe_strcpy(text_date, 16, "Date: ");
   81d18:	4a2a      	ldr	r2, [pc, #168]	; (81dc4 <mw_dialog_date_chooser_paint_function+0x188>)
   81d1a:	2110      	movs	r1, #16
   81d1c:	a812      	add	r0, sp, #72	; 0x48
   81d1e:	47c0      	blx	r8
	(void)mw_util_safe_strcat(text_date, 16, temp_buffer);
   81d20:	aa04      	add	r2, sp, #16
   81d22:	a812      	add	r0, sp, #72	; 0x48
   81d24:	2110      	movs	r1, #16
   81d26:	47b8      	blx	r7

	if (mw_dialog_date_chooser_data.large_size)
   81d28:	f895 0084 	ldrb.w	r0, [r5, #132]	; 0x84
   81d2c:	b9a0      	cbnz	r0, 81d58 <mw_dialog_date_chooser_paint_function+0x11c>
		mw_gl_string(draw_info, 91, 120, text_month);
		mw_gl_string(draw_info, 101, 200, text_year);
	}
	else
	{
		mw_gl_set_font(MW_GL_FONT_9);
   81d2e:	4b26      	ldr	r3, [pc, #152]	; (81dc8 <mw_dialog_date_chooser_paint_function+0x18c>)
   81d30:	4798      	blx	r3
		mw_gl_string(draw_info, 18, 20, text_date);
   81d32:	4d26      	ldr	r5, [pc, #152]	; (81dcc <mw_dialog_date_chooser_paint_function+0x190>)
   81d34:	ab12      	add	r3, sp, #72	; 0x48
   81d36:	4620      	mov	r0, r4
   81d38:	2214      	movs	r2, #20
   81d3a:	2112      	movs	r1, #18
   81d3c:	47a8      	blx	r5
		mw_gl_string(draw_info, 12, 60, text_month);
   81d3e:	ab0e      	add	r3, sp, #56	; 0x38
   81d40:	4620      	mov	r0, r4
   81d42:	223c      	movs	r2, #60	; 0x3c
   81d44:	210c      	movs	r1, #12
   81d46:	47a8      	blx	r5
		mw_gl_string(draw_info, 18, 100, text_year);
   81d48:	ab0a      	add	r3, sp, #40	; 0x28
   81d4a:	4620      	mov	r0, r4
   81d4c:	2264      	movs	r2, #100	; 0x64
   81d4e:	2112      	movs	r1, #18
   81d50:	47a8      	blx	r5
	}
}
   81d52:	b016      	add	sp, #88	; 0x58
   81d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		mw_gl_set_font(MW_GL_TITLE_FONT);
   81d58:	2005      	movs	r0, #5
   81d5a:	4b1b      	ldr	r3, [pc, #108]	; (81dc8 <mw_dialog_date_chooser_paint_function+0x18c>)
   81d5c:	4798      	blx	r3
		mw_gl_string(draw_info, 101, 37, text_date);
   81d5e:	4d1b      	ldr	r5, [pc, #108]	; (81dcc <mw_dialog_date_chooser_paint_function+0x190>)
   81d60:	ab12      	add	r3, sp, #72	; 0x48
   81d62:	4620      	mov	r0, r4
   81d64:	2225      	movs	r2, #37	; 0x25
   81d66:	2165      	movs	r1, #101	; 0x65
   81d68:	47a8      	blx	r5
		mw_gl_string(draw_info, 91, 120, text_month);
   81d6a:	ab0e      	add	r3, sp, #56	; 0x38
   81d6c:	4620      	mov	r0, r4
   81d6e:	2278      	movs	r2, #120	; 0x78
   81d70:	215b      	movs	r1, #91	; 0x5b
   81d72:	47a8      	blx	r5
		mw_gl_string(draw_info, 101, 200, text_year);
   81d74:	ab0a      	add	r3, sp, #40	; 0x28
   81d76:	4620      	mov	r0, r4
   81d78:	22c8      	movs	r2, #200	; 0xc8
   81d7a:	2165      	movs	r1, #101	; 0x65
   81d7c:	47a8      	blx	r5
}
   81d7e:	b016      	add	sp, #88	; 0x58
   81d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81d84:	000a6618 	.word	0x000a6618
   81d88:	000a6974 	.word	0x000a6974
   81d8c:	00095add 	.word	0x00095add
   81d90:	000846fd 	.word	0x000846fd
   81d94:	000846c9 	.word	0x000846c9
   81d98:	000846f1 	.word	0x000846f1
   81d9c:	000846e1 	.word	0x000846e1
   81da0:	00090735 	.word	0x00090735
   81da4:	000850e1 	.word	0x000850e1
   81da8:	000846b1 	.word	0x000846b1
   81dac:	00084709 	.word	0x00084709
   81db0:	00084745 	.word	0x00084745
   81db4:	200711a4 	.word	0x200711a4
   81db8:	000a69fc 	.word	0x000a69fc
   81dbc:	00096f85 	.word	0x00096f85
   81dc0:	000a6a04 	.word	0x000a6a04
   81dc4:	000a6a0c 	.word	0x000a6a0c
   81dc8:	00084715 	.word	0x00084715
   81dcc:	00085f1d 	.word	0x00085f1d
   81dd0:	0009723d 	.word	0x0009723d
   81dd4:	00096f31 	.word	0x00096f31

00081dd8 <update_arrow_enable_states>:
{
   81dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (mw_dialog_date_chooser_data.current_date_date >
   81ddc:	4c56      	ldr	r4, [pc, #344]	; (81f38 <update_arrow_enable_states+0x160>)
	days = days_in_months[month];
   81dde:	4e57      	ldr	r6, [pc, #348]	; (81f3c <update_arrow_enable_states+0x164>)
	get_max_date_for_month_and_year(
   81de0:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
	if (mw_dialog_date_chooser_data.current_date_date >
   81de4:	f894 1083 	ldrb.w	r1, [r4, #131]	; 0x83
	if (month == 2U)
   81de8:	2b02      	cmp	r3, #2
	days = days_in_months[month];
   81dea:	5cf2      	ldrb	r2, [r6, r3]
	if (month == 2U)
   81dec:	d03d      	beq.n	81e6a <update_arrow_enable_states+0x92>
	if (mw_dialog_date_chooser_data.current_date_date >
   81dee:	4291      	cmp	r1, r2
   81df0:	d863      	bhi.n	81eba <update_arrow_enable_states+0xe2>
	mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_date_up_handle, true);
   81df2:	2101      	movs	r1, #1
   81df4:	69a0      	ldr	r0, [r4, #24]
   81df6:	4d52      	ldr	r5, [pc, #328]	; (81f40 <update_arrow_enable_states+0x168>)
   81df8:	47a8      	blx	r5
	mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_date_down_handle, true);
   81dfa:	2101      	movs	r1, #1
   81dfc:	69e0      	ldr	r0, [r4, #28]
   81dfe:	47a8      	blx	r5
	if (mw_dialog_date_chooser_data.current_date_date == 1U)
   81e00:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
   81e04:	2b01      	cmp	r3, #1
   81e06:	d07e      	beq.n	81f06 <update_arrow_enable_states+0x12e>
	else if (mw_dialog_date_chooser_data.current_date_date == get_max_date_for_month_and_year(
   81e08:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
   81e0c:	f8b4 0080 	ldrh.w	r0, [r4, #128]	; 0x80
	if (month == 2U)
   81e10:	2a02      	cmp	r2, #2
	days = days_in_months[month];
   81e12:	5cb1      	ldrb	r1, [r6, r2]
	if (month == 2U)
   81e14:	d054      	beq.n	81ec0 <update_arrow_enable_states+0xe8>
	else if (mw_dialog_date_chooser_data.current_date_date == get_max_date_for_month_and_year(
   81e16:	428b      	cmp	r3, r1
   81e18:	d079      	beq.n	81f0e <update_arrow_enable_states+0x136>
	mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_month_up_handle, true);
   81e1a:	2101      	movs	r1, #1
   81e1c:	6920      	ldr	r0, [r4, #16]
   81e1e:	47a8      	blx	r5
	mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_month_down_handle, true);
   81e20:	2101      	movs	r1, #1
   81e22:	6960      	ldr	r0, [r4, #20]
   81e24:	47a8      	blx	r5
	if (mw_dialog_date_chooser_data.current_date_month == 1U)
   81e26:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
   81e2a:	2b01      	cmp	r3, #1
   81e2c:	d067      	beq.n	81efe <update_arrow_enable_states+0x126>
	else if (mw_dialog_date_chooser_data.current_date_month == 12U)
   81e2e:	2b0c      	cmp	r3, #12
   81e30:	d071      	beq.n	81f16 <update_arrow_enable_states+0x13e>
	mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_year_up_handle, true);
   81e32:	2101      	movs	r1, #1
   81e34:	68a0      	ldr	r0, [r4, #8]
   81e36:	47a8      	blx	r5
	mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_year_down_handle, true);
   81e38:	2101      	movs	r1, #1
   81e3a:	68e0      	ldr	r0, [r4, #12]
   81e3c:	47a8      	blx	r5
	if (mw_dialog_date_chooser_data.current_date_year == 0U)
   81e3e:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
   81e42:	2900      	cmp	r1, #0
   81e44:	d054      	beq.n	81ef0 <update_arrow_enable_states+0x118>
	else if (mw_dialog_date_chooser_data.current_date_year == 99U)
   81e46:	2963      	cmp	r1, #99	; 0x63
   81e48:	d055      	beq.n	81ef6 <update_arrow_enable_states+0x11e>
	mw_paint_control(mw_dialog_date_chooser_data.arrow_month_up_handle);
   81e4a:	4d3e      	ldr	r5, [pc, #248]	; (81f44 <update_arrow_enable_states+0x16c>)
   81e4c:	6920      	ldr	r0, [r4, #16]
   81e4e:	47a8      	blx	r5
	mw_paint_control(mw_dialog_date_chooser_data.arrow_month_down_handle);
   81e50:	6960      	ldr	r0, [r4, #20]
   81e52:	47a8      	blx	r5
	mw_paint_control(mw_dialog_date_chooser_data.arrow_year_up_handle);
   81e54:	68a0      	ldr	r0, [r4, #8]
   81e56:	47a8      	blx	r5
	mw_paint_control(mw_dialog_date_chooser_data.arrow_year_down_handle);
   81e58:	68e0      	ldr	r0, [r4, #12]
   81e5a:	47a8      	blx	r5
	mw_paint_control(mw_dialog_date_chooser_data.arrow_date_up_handle);
   81e5c:	69a0      	ldr	r0, [r4, #24]
   81e5e:	47a8      	blx	r5
	mw_paint_control(mw_dialog_date_chooser_data.arrow_date_down_handle);
   81e60:	69e0      	ldr	r0, [r4, #28]
   81e62:	462b      	mov	r3, r5
}
   81e64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	mw_paint_control(mw_dialog_date_chooser_data.arrow_date_down_handle);
   81e68:	4718      	bx	r3
	get_max_date_for_month_and_year(
   81e6a:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
		if (year % 4U == 0U)
   81e6e:	0798      	lsls	r0, r3, #30
   81e70:	d1bd      	bne.n	81dee <update_arrow_enable_states+0x16>
			if (year % 100U == 0U)
   81e72:	f04f 0e64 	mov.w	lr, #100	; 0x64
   81e76:	4834      	ldr	r0, [pc, #208]	; (81f48 <update_arrow_enable_states+0x170>)
			days++;
   81e78:	1c57      	adds	r7, r2, #1
			if (year % 100U == 0U)
   81e7a:	fba0 5003 	umull	r5, r0, r0, r3
   81e7e:	0945      	lsrs	r5, r0, #5
   81e80:	fb0e 3515 	mls	r5, lr, r5, r3
   81e84:	b2ad      	uxth	r5, r5
			days++;
   81e86:	fa5f fe87 	uxtb.w	lr, r7
			if (year % 100U == 0U)
   81e8a:	b945      	cbnz	r5, 81e9e <update_arrow_enable_states+0xc6>
				if (year % 400U == 0U)
   81e8c:	f44f 75c8 	mov.w	r5, #400	; 0x190
   81e90:	09c0      	lsrs	r0, r0, #7
   81e92:	fb05 3010 	mls	r0, r5, r0, r3
   81e96:	b280      	uxth	r0, r0
	days = days_in_months[month];
   81e98:	2800      	cmp	r0, #0
   81e9a:	bf18      	it	ne
   81e9c:	4696      	movne	lr, r2
	if (mw_dialog_date_chooser_data.current_date_date >
   81e9e:	4571      	cmp	r1, lr
   81ea0:	d9a7      	bls.n	81df2 <update_arrow_enable_states+0x1a>
			if (year % 100U == 0U)
   81ea2:	2564      	movs	r5, #100	; 0x64
   81ea4:	4928      	ldr	r1, [pc, #160]	; (81f48 <update_arrow_enable_states+0x170>)
			days++;
   81ea6:	b2ff      	uxtb	r7, r7
			if (year % 100U == 0U)
   81ea8:	fba1 0103 	umull	r0, r1, r1, r3
   81eac:	0948      	lsrs	r0, r1, #5
   81eae:	fb05 3010 	mls	r0, r5, r0, r3
   81eb2:	b280      	uxth	r0, r0
   81eb4:	2800      	cmp	r0, #0
   81eb6:	d034      	beq.n	81f22 <update_arrow_enable_states+0x14a>
			days++;
   81eb8:	463a      	mov	r2, r7
		mw_dialog_date_chooser_data.current_date_date =
   81eba:	f884 2083 	strb.w	r2, [r4, #131]	; 0x83
   81ebe:	e798      	b.n	81df2 <update_arrow_enable_states+0x1a>
		if (year % 4U == 0U)
   81ec0:	0782      	lsls	r2, r0, #30
   81ec2:	d1a8      	bne.n	81e16 <update_arrow_enable_states+0x3e>
			if (year % 100U == 0U)
   81ec4:	f04f 0e64 	mov.w	lr, #100	; 0x64
   81ec8:	4a1f      	ldr	r2, [pc, #124]	; (81f48 <update_arrow_enable_states+0x170>)
			days++;
   81eca:	1c4e      	adds	r6, r1, #1
			if (year % 100U == 0U)
   81ecc:	fba2 7200 	umull	r7, r2, r2, r0
   81ed0:	0957      	lsrs	r7, r2, #5
   81ed2:	fb0e 0717 	mls	r7, lr, r7, r0
   81ed6:	b2bf      	uxth	r7, r7
			days++;
   81ed8:	b2f6      	uxtb	r6, r6
			if (year % 100U == 0U)
   81eda:	bb07      	cbnz	r7, 81f1e <update_arrow_enable_states+0x146>
				if (year % 400U == 0U)
   81edc:	f44f 77c8 	mov.w	r7, #400	; 0x190
   81ee0:	09d2      	lsrs	r2, r2, #7
   81ee2:	fb07 0012 	mls	r0, r7, r2, r0
   81ee6:	b280      	uxth	r0, r0
					days++;
   81ee8:	2800      	cmp	r0, #0
   81eea:	bf08      	it	eq
   81eec:	4631      	moveq	r1, r6
   81eee:	e792      	b.n	81e16 <update_arrow_enable_states+0x3e>
		mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_year_down_handle, false);
   81ef0:	68e0      	ldr	r0, [r4, #12]
   81ef2:	47a8      	blx	r5
   81ef4:	e7a9      	b.n	81e4a <update_arrow_enable_states+0x72>
		mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_year_up_handle, false);
   81ef6:	2100      	movs	r1, #0
   81ef8:	68a0      	ldr	r0, [r4, #8]
   81efa:	47a8      	blx	r5
   81efc:	e7a5      	b.n	81e4a <update_arrow_enable_states+0x72>
		mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_month_down_handle, false);
   81efe:	2100      	movs	r1, #0
   81f00:	6960      	ldr	r0, [r4, #20]
   81f02:	47a8      	blx	r5
   81f04:	e795      	b.n	81e32 <update_arrow_enable_states+0x5a>
		mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_date_down_handle, false);
   81f06:	2100      	movs	r1, #0
   81f08:	69e0      	ldr	r0, [r4, #28]
   81f0a:	47a8      	blx	r5
   81f0c:	e785      	b.n	81e1a <update_arrow_enable_states+0x42>
		mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_date_up_handle, false);
   81f0e:	2100      	movs	r1, #0
   81f10:	69a0      	ldr	r0, [r4, #24]
   81f12:	47a8      	blx	r5
   81f14:	e781      	b.n	81e1a <update_arrow_enable_states+0x42>
		mw_set_control_enabled(mw_dialog_date_chooser_data.arrow_month_up_handle, false);
   81f16:	2100      	movs	r1, #0
   81f18:	6920      	ldr	r0, [r4, #16]
   81f1a:	47a8      	blx	r5
   81f1c:	e789      	b.n	81e32 <update_arrow_enable_states+0x5a>
			days++;
   81f1e:	4631      	mov	r1, r6
   81f20:	e779      	b.n	81e16 <update_arrow_enable_states+0x3e>
				if (year % 400U == 0U)
   81f22:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81f26:	09c9      	lsrs	r1, r1, #7
   81f28:	fb00 3311 	mls	r3, r0, r1, r3
   81f2c:	b29b      	uxth	r3, r3
					days++;
   81f2e:	2b00      	cmp	r3, #0
   81f30:	bf08      	it	eq
   81f32:	463a      	moveq	r2, r7
   81f34:	e7c1      	b.n	81eba <update_arrow_enable_states+0xe2>
   81f36:	bf00      	nop
   81f38:	200711a4 	.word	0x200711a4
   81f3c:	000a69c4 	.word	0x000a69c4
   81f40:	00090f11 	.word	0x00090f11
   81f44:	00090f71 	.word	0x00090f71
   81f48:	51eb851f 	.word	0x51eb851f

00081f4c <mw_dialog_date_chooser_message_function>:
 *
 * @param message The message to be processed
 * @note Do not call this directly from user code
 */
static void mw_dialog_date_chooser_message_function(const mw_message_t *message)
{
   81f4c:	b570      	push	{r4, r5, r6, lr}
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   81f4e:	4604      	mov	r4, r0
   81f50:	3000      	adds	r0, #0
   81f52:	4b64      	ldr	r3, [pc, #400]	; (820e4 <mw_dialog_date_chooser_message_function+0x198>)
   81f54:	bf18      	it	ne
   81f56:	2001      	movne	r0, #1
{
   81f58:	b082      	sub	sp, #8
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   81f5a:	f240 120d 	movw	r2, #269	; 0x10d
   81f5e:	4962      	ldr	r1, [pc, #392]	; (820e8 <mw_dialog_date_chooser_message_function+0x19c>)
   81f60:	4e62      	ldr	r6, [pc, #392]	; (820ec <mw_dialog_date_chooser_message_function+0x1a0>)
   81f62:	47b0      	blx	r6

	switch (message->message_id)
   81f64:	7a23      	ldrb	r3, [r4, #8]
   81f66:	2b1a      	cmp	r3, #26
   81f68:	d03d      	beq.n	81fe6 <mw_dialog_date_chooser_message_function+0x9a>
   81f6a:	2b23      	cmp	r3, #35	; 0x23
   81f6c:	d139      	bne.n	81fe2 <mw_dialog_date_chooser_message_function+0x96>
	{
	case MW_ARROW_PRESSED_MESSAGE:
		if (message->sender_handle == mw_dialog_date_chooser_data.arrow_year_up_handle)
   81f6e:	4d60      	ldr	r5, [pc, #384]	; (820f0 <mw_dialog_date_chooser_message_function+0x1a4>)
   81f70:	6823      	ldr	r3, [r4, #0]
   81f72:	68aa      	ldr	r2, [r5, #8]
   81f74:	4293      	cmp	r3, r2
   81f76:	d05c      	beq.n	82032 <mw_dialog_date_chooser_message_function+0xe6>
			if (mw_dialog_date_chooser_data.current_date_year < 9999U)
			{
				mw_dialog_date_chooser_data.current_date_year++;
			}
		}
		else if (message->sender_handle == mw_dialog_date_chooser_data.arrow_year_down_handle)
   81f78:	68ea      	ldr	r2, [r5, #12]
   81f7a:	4293      	cmp	r3, r2
   81f7c:	d04b      	beq.n	82016 <mw_dialog_date_chooser_message_function+0xca>
			if (mw_dialog_date_chooser_data.current_date_year > 0U)
			{
				mw_dialog_date_chooser_data.current_date_year--;
			}
		}
		else if (message->sender_handle == mw_dialog_date_chooser_data.arrow_month_up_handle)
   81f7e:	692a      	ldr	r2, [r5, #16]
   81f80:	4293      	cmp	r3, r2
   81f82:	d072      	beq.n	8206a <mw_dialog_date_chooser_message_function+0x11e>
			if (mw_dialog_date_chooser_data.current_date_month < 12U)
			{
				mw_dialog_date_chooser_data.current_date_month++;
			}
		}
		else if (message->sender_handle == mw_dialog_date_chooser_data.arrow_month_down_handle)
   81f84:	696a      	ldr	r2, [r5, #20]
   81f86:	4293      	cmp	r3, r2
   81f88:	d077      	beq.n	8207a <mw_dialog_date_chooser_message_function+0x12e>
			if (mw_dialog_date_chooser_data.current_date_month > 1U)
			{
				mw_dialog_date_chooser_data.current_date_month--;
			}
		}
		else if (message->sender_handle == mw_dialog_date_chooser_data.arrow_date_up_handle)
   81f8a:	69aa      	ldr	r2, [r5, #24]
   81f8c:	4293      	cmp	r3, r2
   81f8e:	d07c      	beq.n	8208a <mw_dialog_date_chooser_message_function+0x13e>
							mw_dialog_date_chooser_data.current_date_year))
			{
				mw_dialog_date_chooser_data.current_date_date++;
			}
		}
		else if (message->sender_handle == mw_dialog_date_chooser_data.arrow_date_down_handle)
   81f90:	69ea      	ldr	r2, [r5, #28]
   81f92:	4293      	cmp	r3, r2
   81f94:	d061      	beq.n	8205a <mw_dialog_date_chooser_message_function+0x10e>
				mw_dialog_date_chooser_data.current_date_date--;
			}
		}
		else
		{
			MW_ASSERT((bool)false, "Unknown control id");
   81f96:	4b57      	ldr	r3, [pc, #348]	; (820f4 <mw_dialog_date_chooser_message_function+0x1a8>)
   81f98:	f44f 72a0 	mov.w	r2, #320	; 0x140
   81f9c:	4952      	ldr	r1, [pc, #328]	; (820e8 <mw_dialog_date_chooser_message_function+0x19c>)
   81f9e:	2000      	movs	r0, #0
   81fa0:	47b0      	blx	r6
		}

		/* enable or disable arrow controls as required */
		update_arrow_enable_states();
   81fa2:	4b55      	ldr	r3, [pc, #340]	; (820f8 <mw_dialog_date_chooser_message_function+0x1ac>)
   81fa4:	4798      	blx	r3

		/* just paint the changed text */
		if (mw_dialog_date_chooser_data.large_size)
   81fa6:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
		{
			mw_paint_window_client_rect(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle, &text_rect_large);
   81faa:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
		if (mw_dialog_date_chooser_data.large_size)
   81fae:	2b00      	cmp	r3, #0
   81fb0:	d039      	beq.n	82026 <mw_dialog_date_chooser_message_function+0xda>
			mw_paint_window_client_rect(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle, &text_rect_large);
   81fb2:	4952      	ldr	r1, [pc, #328]	; (820fc <mw_dialog_date_chooser_message_function+0x1b0>)
		}
		else
		{
			mw_paint_window_client_rect(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle, &text_rect_standard);
   81fb4:	4b52      	ldr	r3, [pc, #328]	; (82100 <mw_dialog_date_chooser_message_function+0x1b4>)

	default:
		/* keep MISRA happy */
		break;
	}
}
   81fb6:	b002      	add	sp, #8
   81fb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mw_paint_window_client_rect(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle, &text_rect_standard);
   81fbc:	4718      	bx	r3
			mw_post_message(MW_DIALOG_DATE_CHOOSER_OK_MESSAGE,
   81fbe:	2100      	movs	r1, #0
							(uint32_t)mw_dialog_date_chooser_data.current_date_month << 8U |
   81fc0:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
					(uint32_t)mw_dialog_date_chooser_data.current_date_year << 16U |
   81fc4:	f8b5 4080 	ldrh.w	r4, [r5, #128]	; 0x80
							mw_dialog_date_chooser_data.current_date_date,
   81fc8:	f895 0083 	ldrb.w	r0, [r5, #131]	; 0x83
							(uint32_t)mw_dialog_date_chooser_data.current_date_month << 8U |
   81fcc:	021b      	lsls	r3, r3, #8
					(uint32_t)mw_dialog_date_chooser_data.current_date_year << 16U |
   81fce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			mw_post_message(MW_DIALOG_DATE_CHOOSER_OK_MESSAGE,
   81fd2:	4303      	orrs	r3, r0
   81fd4:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
   81fd8:	9101      	str	r1, [sp, #4]
   81fda:	9100      	str	r1, [sp, #0]
   81fdc:	203f      	movs	r0, #63	; 0x3f
   81fde:	4c49      	ldr	r4, [pc, #292]	; (82104 <mw_dialog_date_chooser_message_function+0x1b8>)
   81fe0:	47a0      	blx	r4
}
   81fe2:	b002      	add	sp, #8
   81fe4:	bd70      	pop	{r4, r5, r6, pc}
		mw_remove_window(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle);
   81fe6:	4d42      	ldr	r5, [pc, #264]	; (820f0 <mw_dialog_date_chooser_message_function+0x1a4>)
   81fe8:	4b47      	ldr	r3, [pc, #284]	; (82108 <mw_dialog_date_chooser_message_function+0x1bc>)
   81fea:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   81fee:	4798      	blx	r3
		mw_paint_all();
   81ff0:	4b46      	ldr	r3, [pc, #280]	; (8210c <mw_dialog_date_chooser_message_function+0x1c0>)
   81ff2:	4798      	blx	r3
		if (message->sender_handle == mw_dialog_date_chooser_data.button_ok_handle)
   81ff4:	6823      	ldr	r3, [r4, #0]
   81ff6:	682a      	ldr	r2, [r5, #0]
   81ff8:	4293      	cmp	r3, r2
   81ffa:	d0e0      	beq.n	81fbe <mw_dialog_date_chooser_message_function+0x72>
		else if (message->sender_handle == mw_dialog_date_chooser_data.button_cancel_handle)
   81ffc:	686a      	ldr	r2, [r5, #4]
   81ffe:	4293      	cmp	r3, r2
   82000:	d021      	beq.n	82046 <mw_dialog_date_chooser_message_function+0xfa>
			MW_ASSERT((bool)false, "Unknown control id");
   82002:	f44f 72b8 	mov.w	r2, #368	; 0x170
   82006:	2000      	movs	r0, #0
   82008:	46b4      	mov	ip, r6
   8200a:	4b3a      	ldr	r3, [pc, #232]	; (820f4 <mw_dialog_date_chooser_message_function+0x1a8>)
   8200c:	4936      	ldr	r1, [pc, #216]	; (820e8 <mw_dialog_date_chooser_message_function+0x19c>)
}
   8200e:	b002      	add	sp, #8
   82010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			MW_ASSERT((bool)false, "Unknown control id");
   82014:	4760      	bx	ip
			if (mw_dialog_date_chooser_data.current_date_year > 0U)
   82016:	f8b5 3080 	ldrh.w	r3, [r5, #128]	; 0x80
   8201a:	2b00      	cmp	r3, #0
   8201c:	d0c1      	beq.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
				mw_dialog_date_chooser_data.current_date_year--;
   8201e:	3b01      	subs	r3, #1
   82020:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
   82024:	e7bd      	b.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
			mw_paint_window_client_rect(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle, &text_rect_standard);
   82026:	493a      	ldr	r1, [pc, #232]	; (82110 <mw_dialog_date_chooser_message_function+0x1c4>)
   82028:	4b35      	ldr	r3, [pc, #212]	; (82100 <mw_dialog_date_chooser_message_function+0x1b4>)
}
   8202a:	b002      	add	sp, #8
   8202c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mw_paint_window_client_rect(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle, &text_rect_standard);
   82030:	4718      	bx	r3
			if (mw_dialog_date_chooser_data.current_date_year < 9999U)
   82032:	f242 720e 	movw	r2, #9998	; 0x270e
   82036:	f8b5 3080 	ldrh.w	r3, [r5, #128]	; 0x80
   8203a:	4293      	cmp	r3, r2
   8203c:	d8b1      	bhi.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
				mw_dialog_date_chooser_data.current_date_year++;
   8203e:	3301      	adds	r3, #1
   82040:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
   82044:	e7ad      	b.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
			mw_post_message(MW_DIALOG_DATE_CHOOSER_CANCEL_MESSAGE,
   82046:	2300      	movs	r3, #0
   82048:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
   8204c:	9301      	str	r3, [sp, #4]
   8204e:	9300      	str	r3, [sp, #0]
   82050:	4619      	mov	r1, r3
   82052:	2040      	movs	r0, #64	; 0x40
   82054:	4c2b      	ldr	r4, [pc, #172]	; (82104 <mw_dialog_date_chooser_message_function+0x1b8>)
   82056:	47a0      	blx	r4
   82058:	e7c3      	b.n	81fe2 <mw_dialog_date_chooser_message_function+0x96>
			if (mw_dialog_date_chooser_data.current_date_date > 1U)
   8205a:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   8205e:	2b01      	cmp	r3, #1
   82060:	d99f      	bls.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
				mw_dialog_date_chooser_data.current_date_date--;
   82062:	3b01      	subs	r3, #1
   82064:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
   82068:	e79b      	b.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
			if (mw_dialog_date_chooser_data.current_date_month < 12U)
   8206a:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   8206e:	2b0b      	cmp	r3, #11
   82070:	d897      	bhi.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
				mw_dialog_date_chooser_data.current_date_month++;
   82072:	3301      	adds	r3, #1
   82074:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
   82078:	e793      	b.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
			if (mw_dialog_date_chooser_data.current_date_month > 1U)
   8207a:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   8207e:	2b01      	cmp	r3, #1
   82080:	d98f      	bls.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
				mw_dialog_date_chooser_data.current_date_month--;
   82082:	3b01      	subs	r3, #1
   82084:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
   82088:	e78b      	b.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
					get_max_date_for_month_and_year(mw_dialog_date_chooser_data.current_date_month,
   8208a:	f895 2082 	ldrb.w	r2, [r5, #130]	; 0x82
	days = days_in_months[month];
   8208e:	4921      	ldr	r1, [pc, #132]	; (82114 <mw_dialog_date_chooser_message_function+0x1c8>)
	if (month == 2U)
   82090:	2a02      	cmp	r2, #2
			if (mw_dialog_date_chooser_data.current_date_date <
   82092:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
	days = days_in_months[month];
   82096:	5c89      	ldrb	r1, [r1, r2]
					get_max_date_for_month_and_year(mw_dialog_date_chooser_data.current_date_month,
   82098:	f8b5 0080 	ldrh.w	r0, [r5, #128]	; 0x80
	if (month == 2U)
   8209c:	d006      	beq.n	820ac <mw_dialog_date_chooser_message_function+0x160>
			if (mw_dialog_date_chooser_data.current_date_date <
   8209e:	428b      	cmp	r3, r1
   820a0:	f4bf af7f 	bcs.w	81fa2 <mw_dialog_date_chooser_message_function+0x56>
				mw_dialog_date_chooser_data.current_date_date++;
   820a4:	3301      	adds	r3, #1
   820a6:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
   820aa:	e77a      	b.n	81fa2 <mw_dialog_date_chooser_message_function+0x56>
		if (year % 4U == 0U)
   820ac:	0782      	lsls	r2, r0, #30
   820ae:	d1f6      	bne.n	8209e <mw_dialog_date_chooser_message_function+0x152>
			if (year % 100U == 0U)
   820b0:	2664      	movs	r6, #100	; 0x64
   820b2:	4a19      	ldr	r2, [pc, #100]	; (82118 <mw_dialog_date_chooser_message_function+0x1cc>)
			days++;
   820b4:	1c4c      	adds	r4, r1, #1
			if (year % 100U == 0U)
   820b6:	fba2 e200 	umull	lr, r2, r2, r0
   820ba:	0952      	lsrs	r2, r2, #5
   820bc:	fb06 0212 	mls	r2, r6, r2, r0
   820c0:	b292      	uxth	r2, r2
			days++;
   820c2:	b2e4      	uxtb	r4, r4
			if (year % 100U == 0U)
   820c4:	b962      	cbnz	r2, 820e0 <mw_dialog_date_chooser_message_function+0x194>
				if (year % 400U == 0U)
   820c6:	f44f 76c8 	mov.w	r6, #400	; 0x190
   820ca:	4a13      	ldr	r2, [pc, #76]	; (82118 <mw_dialog_date_chooser_message_function+0x1cc>)
   820cc:	fba2 e200 	umull	lr, r2, r2, r0
   820d0:	09d2      	lsrs	r2, r2, #7
   820d2:	fb06 0212 	mls	r2, r6, r2, r0
   820d6:	b292      	uxth	r2, r2
					days++;
   820d8:	2a00      	cmp	r2, #0
   820da:	bf08      	it	eq
   820dc:	4621      	moveq	r1, r4
   820de:	e7de      	b.n	8209e <mw_dialog_date_chooser_message_function+0x152>
			days++;
   820e0:	4621      	mov	r1, r4
   820e2:	e7dc      	b.n	8209e <mw_dialog_date_chooser_message_function+0x152>
   820e4:	000a6618 	.word	0x000a6618
   820e8:	000a699c 	.word	0x000a699c
   820ec:	00095add 	.word	0x00095add
   820f0:	200711a4 	.word	0x200711a4
   820f4:	000a69e8 	.word	0x000a69e8
   820f8:	00081dd9 	.word	0x00081dd9
   820fc:	000a6a14 	.word	0x000a6a14
   82100:	00090591 	.word	0x00090591
   82104:	00091955 	.word	0x00091955
   82108:	000911c9 	.word	0x000911c9
   8210c:	00095ab1 	.word	0x00095ab1
   82110:	000a6a1c 	.word	0x000a6a1c
   82114:	000a69c4 	.word	0x000a69c4
   82118:	51eb851f 	.word	0x51eb851f

0008211c <mw_create_window_dialog_date_chooser>:
		uint8_t start_date_date,
		uint8_t start_date_month,
		uint16_t start_date_year,
		bool large_size,
		mw_handle_t owner_window_handle)
{
   8211c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	days = days_in_months[month];
   82120:	4c86      	ldr	r4, [pc, #536]	; (8233c <mw_create_window_dialog_date_chooser+0x220>)
{
   82122:	b086      	sub	sp, #24
	if (month == 2U)
   82124:	2b02      	cmp	r3, #2
	days = days_in_months[month];
   82126:	5ce4      	ldrb	r4, [r4, r3]
{
   82128:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   8212c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
	if (month == 2U)
   82130:	f000 80dd 	beq.w	822ee <mw_create_window_dialog_date_chooser+0x1d2>
	mw_util_rect_t rect;
	mw_handle_t temp_handle;

	/* check the start date */
	if (start_date_date > get_max_date_for_month_and_year(start_date_month, start_date_year) ||
   82134:	42a2      	cmp	r2, r4
   82136:	f200 80d6 	bhi.w	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
   8213a:	f242 740f 	movw	r4, #9999	; 0x270f
   8213e:	42a5      	cmp	r5, r4
   82140:	f200 80d1 	bhi.w	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
			start_date_year > 9999U ||
			start_date_month > 12U || start_date_month == 0U ||
   82144:	1e5c      	subs	r4, r3, #1
   82146:	2c0b      	cmp	r4, #11
   82148:	f200 80cd 	bhi.w	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
   8214c:	2a00      	cmp	r2, #0
   8214e:	f000 80ca 	beq.w	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
			start_date_date == 0U)
	{
		return (MW_INVALID_HANDLE);
	}
	mw_dialog_date_chooser_data.current_date_year = start_date_year;
   82152:	4c7b      	ldr	r4, [pc, #492]	; (82340 <mw_create_window_dialog_date_chooser+0x224>)
   82154:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
	mw_dialog_date_chooser_data.current_date_month = start_date_month;
   82158:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
	mw_dialog_date_chooser_data.current_date_date = start_date_date;
   8215c:	f884 2083 	strb.w	r2, [r4, #131]	; 0x83

	/* check width */
	if (large_size)
   82160:	2e00      	cmp	r6, #0
   82162:	f040 80e5 	bne.w	82330 <mw_create_window_dialog_date_chooser+0x214>
   82166:	2376      	movs	r3, #118	; 0x76
		rect.height = 305;
	}
	else
	{
		rect.width = 118;
		rect.height = 170;
   82168:	f04f 0eaa 	mov.w	lr, #170	; 0xaa
		rect.width = 118;
   8216c:	461d      	mov	r5, r3
	}

	/* check start position */
	if (x + rect.width > MW_ROOT_WIDTH || x < 0)
   8216e:	4a75      	ldr	r2, [pc, #468]	; (82344 <mw_create_window_dialog_date_chooser+0x228>)
   82170:	f8ad 5014 	strh.w	r5, [sp, #20]
   82174:	4688      	mov	r8, r1
   82176:	18c5      	adds	r5, r0, r3
   82178:	4607      	mov	r7, r0
   8217a:	f8ad e016 	strh.w	lr, [sp, #22]
   8217e:	4790      	blx	r2
   82180:	4285      	cmp	r5, r0
   82182:	f300 80b0 	bgt.w	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
   82186:	2f00      	cmp	r7, #0
   82188:	f2c0 80ad 	blt.w	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
	{
		return (MW_INVALID_HANDLE);
	}
	if (y + rect.height > MW_ROOT_HEIGHT || y < 0)
   8218c:	4b6e      	ldr	r3, [pc, #440]	; (82348 <mw_create_window_dialog_date_chooser+0x22c>)
   8218e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
   82192:	4798      	blx	r3
   82194:	4445      	add	r5, r8
   82196:	4285      	cmp	r5, r0
   82198:	f300 80a5 	bgt.w	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
   8219c:	f1b8 0f00 	cmp.w	r8, #0
   821a0:	f2c0 80a1 	blt.w	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
	{
		return (MW_INVALID_HANDLE);
	}

	/* check no modal windows already showing */
	if (mw_is_any_window_modal())
   821a4:	4b69      	ldr	r3, [pc, #420]	; (8234c <mw_create_window_dialog_date_chooser+0x230>)
   821a6:	4798      	blx	r3
   821a8:	4605      	mov	r5, r0
   821aa:	2800      	cmp	r0, #0
   821ac:	f040 809b 	bne.w	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
	{
		return (MW_INVALID_HANDLE);
	}

	/* check response window handle */
	if (!mw_is_window_handle_valid(owner_window_handle))
   821b0:	980e      	ldr	r0, [sp, #56]	; 0x38
   821b2:	4b67      	ldr	r3, [pc, #412]	; (82350 <mw_create_window_dialog_date_chooser+0x234>)
   821b4:	4798      	blx	r3
   821b6:	2800      	cmp	r0, #0
   821b8:	f000 8095 	beq.w	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
	{
		return (MW_INVALID_HANDLE);
	}

	mw_dialog_date_chooser_data.large_size = large_size;
	mw_dialog_date_chooser_data.owner_window_handle = owner_window_handle;
   821bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	mw_dialog_date_chooser_data.large_size = large_size;
   821be:	f884 6084 	strb.w	r6, [r4, #132]	; 0x84
	mw_dialog_date_chooser_data.owner_window_handle = owner_window_handle;
   821c2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rect.x = x;
   821c6:	f8ad 7010 	strh.w	r7, [sp, #16]
	rect.y = y;
   821ca:	f8ad 8012 	strh.w	r8, [sp, #18]

	mw_dialog_date_chooser_data.date_chooser_dialog_window_handle = mw_add_window(&rect,
   821ce:	2e00      	cmp	r6, #0
   821d0:	f000 80d8 	beq.w	82384 <mw_create_window_dialog_date_chooser+0x268>
   821d4:	f248 034b 	movw	r3, #32843	; 0x804b
   821d8:	9503      	str	r5, [sp, #12]
   821da:	9302      	str	r3, [sp, #8]
   821dc:	9501      	str	r5, [sp, #4]
   821de:	9500      	str	r5, [sp, #0]
   821e0:	4b5c      	ldr	r3, [pc, #368]	; (82354 <mw_create_window_dialog_date_chooser+0x238>)
   821e2:	4a5d      	ldr	r2, [pc, #372]	; (82358 <mw_create_window_dialog_date_chooser+0x23c>)
   821e4:	495d      	ldr	r1, [pc, #372]	; (8235c <mw_create_window_dialog_date_chooser+0x240>)
   821e6:	a804      	add	r0, sp, #16
   821e8:	4e5d      	ldr	r6, [pc, #372]	; (82360 <mw_create_window_dialog_date_chooser+0x244>)
   821ea:	47b0      	blx	r6
   821ec:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
			MW_WINDOW_FLAG_HAS_BORDER | MW_WINDOW_FLAG_HAS_TITLE_BAR |
					MW_WINDOW_FLAG_IS_VISIBLE | MW_WINDOW_FLAG_IS_MODAL | (uint32_t)(large_size ? MW_WINDOW_FLAG_LARGE_SIZE : 0U),
			NULL);

	/* check if window could be created */
	if (mw_dialog_date_chooser_data.date_chooser_dialog_window_handle == MW_INVALID_HANDLE)
   821f0:	2800      	cmp	r0, #0
   821f2:	d078      	beq.n	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
		/* it couldn't so exit */
		return (MW_INVALID_HANDLE);
	}

	/* set controls data */
	(void)mw_util_safe_strcpy(mw_dialog_date_chooser_data.button_ok_data.button_label,
   821f4:	4e5b      	ldr	r6, [pc, #364]	; (82364 <mw_create_window_dialog_date_chooser+0x248>)
   821f6:	4f5c      	ldr	r7, [pc, #368]	; (82368 <mw_create_window_dialog_date_chooser+0x24c>)
			MW_UI_BUTTON_LABEL_MAX_CHARS, "OK");
	(void)mw_util_safe_strcpy(mw_dialog_date_chooser_data.button_cancel_data.button_label,
   821f8:	f106 080c 	add.w	r8, r6, #12
	(void)mw_util_safe_strcpy(mw_dialog_date_chooser_data.button_ok_data.button_label,
   821fc:	4a5b      	ldr	r2, [pc, #364]	; (8236c <mw_create_window_dialog_date_chooser+0x250>)
   821fe:	4630      	mov	r0, r6
   82200:	210a      	movs	r1, #10
   82202:	47b8      	blx	r7
	(void)mw_util_safe_strcpy(mw_dialog_date_chooser_data.button_cancel_data.button_label,
   82204:	4a5a      	ldr	r2, [pc, #360]	; (82370 <mw_create_window_dialog_date_chooser+0x254>)
   82206:	210a      	movs	r1, #10
   82208:	4640      	mov	r0, r8
   8220a:	47b8      	blx	r7
			MW_UI_BUTTON_LABEL_MAX_CHARS, "Cancel");
	mw_dialog_date_chooser_data.arrow_year_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
	mw_dialog_date_chooser_data.arrow_year_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   8220c:	27b4      	movs	r7, #180	; 0xb4
	mw_dialog_date_chooser_data.arrow_date_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
	mw_dialog_date_chooser_data.arrow_date_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;

	if (large_size)
	{
		temp_handle = mw_ui_button_add_new(5,
   8220e:	9600      	str	r6, [sp, #0]
   82210:	230b      	movs	r3, #11
   82212:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   82216:	21fa      	movs	r1, #250	; 0xfa
	mw_dialog_date_chooser_data.arrow_year_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   82218:	8725      	strh	r5, [r4, #56]	; 0x38
	mw_dialog_date_chooser_data.arrow_month_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   8221a:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
	mw_dialog_date_chooser_data.arrow_date_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   8221e:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
	mw_dialog_date_chooser_data.arrow_year_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   82222:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
		temp_handle = mw_ui_button_add_new(5,
   82226:	4d53      	ldr	r5, [pc, #332]	; (82374 <mw_create_window_dialog_date_chooser+0x258>)
	mw_dialog_date_chooser_data.arrow_month_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   82228:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
	mw_dialog_date_chooser_data.arrow_date_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   8222c:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
		temp_handle = mw_ui_button_add_new(5,
   82230:	2005      	movs	r0, #5
   82232:	47a8      	blx	r5
				mw_dialog_date_chooser_data.date_chooser_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_date_chooser_data.button_ok_data);
		mw_dialog_date_chooser_data.button_ok_handle = temp_handle;

		temp_handle = mw_ui_button_add_new(120,
   82234:	f8cd 8000 	str.w	r8, [sp]
   82238:	230b      	movs	r3, #11
		mw_dialog_date_chooser_data.button_ok_handle = temp_handle;
   8223a:	6020      	str	r0, [r4, #0]
		temp_handle = mw_ui_button_add_new(120,
   8223c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   82240:	21fa      	movs	r1, #250	; 0xfa
   82242:	2078      	movs	r0, #120	; 0x78
   82244:	47a8      	blx	r5
				mw_dialog_date_chooser_data.date_chooser_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_date_chooser_data.button_cancel_data);
		mw_dialog_date_chooser_data.button_cancel_handle = temp_handle;

		temp_handle = mw_ui_arrow_add_new(186,
   82246:	f106 0348 	add.w	r3, r6, #72	; 0x48
		mw_dialog_date_chooser_data.button_cancel_handle = temp_handle;
   8224a:	6060      	str	r0, [r4, #4]
		temp_handle = mw_ui_arrow_add_new(186,
   8224c:	9300      	str	r3, [sp, #0]
   8224e:	4d4a      	ldr	r5, [pc, #296]	; (82378 <mw_create_window_dialog_date_chooser+0x25c>)
   82250:	2309      	movs	r3, #9
   82252:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   82256:	210a      	movs	r1, #10
   82258:	20ba      	movs	r0, #186	; 0xba
   8225a:	47a8      	blx	r5
				mw_dialog_date_chooser_data.date_chooser_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_date_chooser_data.arrow_date_up_data);
		mw_dialog_date_chooser_data.arrow_date_up_handle = temp_handle;

		temp_handle = mw_ui_arrow_add_new(186,
   8225c:	f106 0354 	add.w	r3, r6, #84	; 0x54
		mw_dialog_date_chooser_data.arrow_date_up_handle = temp_handle;
   82260:	61a0      	str	r0, [r4, #24]
		temp_handle = mw_ui_arrow_add_new(186,
   82262:	9300      	str	r3, [sp, #0]
   82264:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   82268:	2309      	movs	r3, #9
   8226a:	2132      	movs	r1, #50	; 0x32
   8226c:	20ba      	movs	r0, #186	; 0xba
   8226e:	47a8      	blx	r5
				mw_dialog_date_chooser_data.date_chooser_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_date_chooser_data.arrow_date_down_data);
		mw_dialog_date_chooser_data.arrow_date_down_handle = temp_handle;

		temp_handle = mw_ui_arrow_add_new(186,
   82270:	f106 0730 	add.w	r7, r6, #48	; 0x30
		mw_dialog_date_chooser_data.arrow_date_down_handle = temp_handle;
   82274:	61e0      	str	r0, [r4, #28]
		temp_handle = mw_ui_arrow_add_new(186,
   82276:	9700      	str	r7, [sp, #0]
   82278:	2309      	movs	r3, #9
   8227a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   8227e:	215a      	movs	r1, #90	; 0x5a
   82280:	20ba      	movs	r0, #186	; 0xba
   82282:	47a8      	blx	r5
				mw_dialog_date_chooser_data.date_chooser_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_date_chooser_data.arrow_month_up_data);
		mw_dialog_date_chooser_data.arrow_month_up_handle = temp_handle;

		temp_handle = mw_ui_arrow_add_new(186,
   82284:	f106 033c 	add.w	r3, r6, #60	; 0x3c
		mw_dialog_date_chooser_data.arrow_month_up_handle = temp_handle;
   82288:	6120      	str	r0, [r4, #16]
		temp_handle = mw_ui_arrow_add_new(186,
   8228a:	9300      	str	r3, [sp, #0]
   8228c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   82290:	2309      	movs	r3, #9
   82292:	2182      	movs	r1, #130	; 0x82
   82294:	20ba      	movs	r0, #186	; 0xba
   82296:	47a8      	blx	r5
				mw_dialog_date_chooser_data.date_chooser_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_date_chooser_data.arrow_month_down_data);
		mw_dialog_date_chooser_data.arrow_month_down_handle = temp_handle;

		temp_handle = mw_ui_arrow_add_new(186,
   82298:	9700      	str	r7, [sp, #0]
   8229a:	2309      	movs	r3, #9
		mw_dialog_date_chooser_data.arrow_month_down_handle = temp_handle;
   8229c:	6160      	str	r0, [r4, #20]
		temp_handle = mw_ui_arrow_add_new(186,
   8229e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   822a2:	21aa      	movs	r1, #170	; 0xaa
   822a4:	20ba      	movs	r0, #186	; 0xba
   822a6:	47a8      	blx	r5
				mw_dialog_date_chooser_data.date_chooser_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_date_chooser_data.arrow_month_up_data);
		mw_dialog_date_chooser_data.arrow_year_up_handle = temp_handle;

		temp_handle = mw_ui_arrow_add_new(186,
   822a8:	3624      	adds	r6, #36	; 0x24
		mw_dialog_date_chooser_data.arrow_year_up_handle = temp_handle;
   822aa:	60a0      	str	r0, [r4, #8]
		temp_handle = mw_ui_arrow_add_new(186,
   822ac:	9600      	str	r6, [sp, #0]
   822ae:	2309      	movs	r3, #9
   822b0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   822b4:	21d2      	movs	r1, #210	; 0xd2
   822b6:	20ba      	movs	r0, #186	; 0xba
   822b8:	47a8      	blx	r5
				210,
				mw_dialog_date_chooser_data.date_chooser_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_date_chooser_data.arrow_year_down_data);
		mw_dialog_date_chooser_data.arrow_year_down_handle = temp_handle;
   822ba:	60e0      	str	r0, [r4, #12]
				MW_CONTROL_FLAG_IS_VISIBLE,
				&mw_dialog_date_chooser_data.arrow_year_down_data);
		mw_dialog_date_chooser_data.arrow_year_down_handle = temp_handle;
	}

	if (mw_dialog_date_chooser_data.button_ok_handle == MW_INVALID_HANDLE ||
   822bc:	6823      	ldr	r3, [r4, #0]
   822be:	b173      	cbz	r3, 822de <mw_create_window_dialog_date_chooser+0x1c2>
   822c0:	6863      	ldr	r3, [r4, #4]
   822c2:	b163      	cbz	r3, 822de <mw_create_window_dialog_date_chooser+0x1c2>
			mw_dialog_date_chooser_data.button_cancel_handle == MW_INVALID_HANDLE ||
   822c4:	68a3      	ldr	r3, [r4, #8]
   822c6:	b153      	cbz	r3, 822de <mw_create_window_dialog_date_chooser+0x1c2>
			mw_dialog_date_chooser_data.arrow_year_up_handle == MW_INVALID_HANDLE ||
   822c8:	b148      	cbz	r0, 822de <mw_create_window_dialog_date_chooser+0x1c2>
			mw_dialog_date_chooser_data.arrow_year_down_handle == MW_INVALID_HANDLE ||
   822ca:	6923      	ldr	r3, [r4, #16]
   822cc:	b13b      	cbz	r3, 822de <mw_create_window_dialog_date_chooser+0x1c2>
			mw_dialog_date_chooser_data.arrow_month_up_handle == MW_INVALID_HANDLE ||
   822ce:	6963      	ldr	r3, [r4, #20]
   822d0:	b12b      	cbz	r3, 822de <mw_create_window_dialog_date_chooser+0x1c2>
			mw_dialog_date_chooser_data.arrow_month_down_handle == MW_INVALID_HANDLE ||
   822d2:	69a3      	ldr	r3, [r4, #24]
   822d4:	b11b      	cbz	r3, 822de <mw_create_window_dialog_date_chooser+0x1c2>
			mw_dialog_date_chooser_data.arrow_date_up_handle == MW_INVALID_HANDLE ||
   822d6:	69e3      	ldr	r3, [r4, #28]
   822d8:	2b00      	cmp	r3, #0
   822da:	f040 80c9 	bne.w	82470 <mw_create_window_dialog_date_chooser+0x354>
			mw_dialog_date_chooser_data.arrow_date_down_handle == MW_INVALID_HANDLE)
	{
		/* remove all controls and window */
		mw_remove_window(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle);
   822de:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   822e2:	4b26      	ldr	r3, [pc, #152]	; (8237c <mw_create_window_dialog_date_chooser+0x260>)
   822e4:	4798      	blx	r3

		return (MW_INVALID_HANDLE);
   822e6:	2000      	movs	r0, #0
	/* this window needs painting; it is coming up at the front so paint only this one */
	mw_paint_window_frame(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
	mw_paint_window_client(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle);

	return (mw_dialog_date_chooser_data.date_chooser_dialog_window_handle);
}
   822e8:	b006      	add	sp, #24
   822ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (year % 4U == 0U)
   822ee:	07af      	lsls	r7, r5, #30
   822f0:	f47f af20 	bne.w	82134 <mw_create_window_dialog_date_chooser+0x18>
			if (year % 100U == 0U)
   822f4:	f04f 0864 	mov.w	r8, #100	; 0x64
   822f8:	4f21      	ldr	r7, [pc, #132]	; (82380 <mw_create_window_dialog_date_chooser+0x264>)
			days++;
   822fa:	f104 0e01 	add.w	lr, r4, #1
			if (year % 100U == 0U)
   822fe:	fba7 c705 	umull	ip, r7, r7, r5
   82302:	ea4f 1c57 	mov.w	ip, r7, lsr #5
   82306:	fb08 5c1c 	mls	ip, r8, ip, r5
   8230a:	fa1f fc8c 	uxth.w	ip, ip
			days++;
   8230e:	fa5f fe8e 	uxtb.w	lr, lr
			if (year % 100U == 0U)
   82312:	f1bc 0f00 	cmp.w	ip, #0
   82316:	d109      	bne.n	8232c <mw_create_window_dialog_date_chooser+0x210>
				if (year % 400U == 0U)
   82318:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   8231c:	09ff      	lsrs	r7, r7, #7
   8231e:	fb0c 5717 	mls	r7, ip, r7, r5
   82322:	b2bf      	uxth	r7, r7
					days++;
   82324:	2f00      	cmp	r7, #0
   82326:	bf08      	it	eq
   82328:	4674      	moveq	r4, lr
   8232a:	e703      	b.n	82134 <mw_create_window_dialog_date_chooser+0x18>
			days++;
   8232c:	4674      	mov	r4, lr
   8232e:	e701      	b.n	82134 <mw_create_window_dialog_date_chooser+0x18>
   82330:	23e2      	movs	r3, #226	; 0xe2
		rect.height = 305;
   82332:	f240 1e31 	movw	lr, #305	; 0x131
		rect.width = 226;
   82336:	461d      	mov	r5, r3
   82338:	e719      	b.n	8216e <mw_create_window_dialog_date_chooser+0x52>
   8233a:	bf00      	nop
   8233c:	000a69c4 	.word	0x000a69c4
   82340:	200711a4 	.word	0x200711a4
   82344:	00086e2d 	.word	0x00086e2d
   82348:	00086e31 	.word	0x00086e31
   8234c:	0008fefd 	.word	0x0008fefd
   82350:	0008dfd9 	.word	0x0008dfd9
   82354:	00081f4d 	.word	0x00081f4d
   82358:	00081c3d 	.word	0x00081c3d
   8235c:	000a69dc 	.word	0x000a69dc
   82360:	0008e94d 	.word	0x0008e94d
   82364:	200711c4 	.word	0x200711c4
   82368:	00096f31 	.word	0x00096f31
   8236c:	000a6554 	.word	0x000a6554
   82370:	000a69d4 	.word	0x000a69d4
   82374:	00097985 	.word	0x00097985
   82378:	00097679 	.word	0x00097679
   8237c:	000911c9 	.word	0x000911c9
   82380:	51eb851f 	.word	0x51eb851f
	mw_dialog_date_chooser_data.date_chooser_dialog_window_handle = mw_add_window(&rect,
   82384:	234b      	movs	r3, #75	; 0x4b
   82386:	9603      	str	r6, [sp, #12]
   82388:	9302      	str	r3, [sp, #8]
   8238a:	9601      	str	r6, [sp, #4]
   8238c:	9600      	str	r6, [sp, #0]
   8238e:	4b41      	ldr	r3, [pc, #260]	; (82494 <mw_create_window_dialog_date_chooser+0x378>)
   82390:	4a41      	ldr	r2, [pc, #260]	; (82498 <mw_create_window_dialog_date_chooser+0x37c>)
   82392:	4942      	ldr	r1, [pc, #264]	; (8249c <mw_create_window_dialog_date_chooser+0x380>)
   82394:	a804      	add	r0, sp, #16
   82396:	4d42      	ldr	r5, [pc, #264]	; (824a0 <mw_create_window_dialog_date_chooser+0x384>)
   82398:	47a8      	blx	r5
   8239a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
	if (mw_dialog_date_chooser_data.date_chooser_dialog_window_handle == MW_INVALID_HANDLE)
   8239e:	2800      	cmp	r0, #0
   823a0:	d0a1      	beq.n	822e6 <mw_create_window_dialog_date_chooser+0x1ca>
	(void)mw_util_safe_strcpy(mw_dialog_date_chooser_data.button_ok_data.button_label,
   823a2:	4d40      	ldr	r5, [pc, #256]	; (824a4 <mw_create_window_dialog_date_chooser+0x388>)
   823a4:	4f40      	ldr	r7, [pc, #256]	; (824a8 <mw_create_window_dialog_date_chooser+0x38c>)
	(void)mw_util_safe_strcpy(mw_dialog_date_chooser_data.button_cancel_data.button_label,
   823a6:	f105 080c 	add.w	r8, r5, #12
	(void)mw_util_safe_strcpy(mw_dialog_date_chooser_data.button_ok_data.button_label,
   823aa:	4a40      	ldr	r2, [pc, #256]	; (824ac <mw_create_window_dialog_date_chooser+0x390>)
   823ac:	4628      	mov	r0, r5
   823ae:	210a      	movs	r1, #10
   823b0:	47b8      	blx	r7
	(void)mw_util_safe_strcpy(mw_dialog_date_chooser_data.button_cancel_data.button_label,
   823b2:	4a3f      	ldr	r2, [pc, #252]	; (824b0 <mw_create_window_dialog_date_chooser+0x394>)
   823b4:	210a      	movs	r1, #10
   823b6:	4640      	mov	r0, r8
   823b8:	47b8      	blx	r7
	mw_dialog_date_chooser_data.arrow_year_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   823ba:	27b4      	movs	r7, #180	; 0xb4
		temp_handle =  mw_ui_button_add_new(5,
   823bc:	9500      	str	r5, [sp, #0]
   823be:	2303      	movs	r3, #3
   823c0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   823c4:	2182      	movs	r1, #130	; 0x82
	mw_dialog_date_chooser_data.arrow_year_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   823c6:	8726      	strh	r6, [r4, #56]	; 0x38
	mw_dialog_date_chooser_data.arrow_month_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   823c8:	f8a4 6050 	strh.w	r6, [r4, #80]	; 0x50
	mw_dialog_date_chooser_data.arrow_date_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   823cc:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
		temp_handle =  mw_ui_button_add_new(5,
   823d0:	2005      	movs	r0, #5
   823d2:	4e38      	ldr	r6, [pc, #224]	; (824b4 <mw_create_window_dialog_date_chooser+0x398>)
	mw_dialog_date_chooser_data.arrow_year_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   823d4:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
	mw_dialog_date_chooser_data.arrow_month_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   823d8:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
	mw_dialog_date_chooser_data.arrow_date_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   823dc:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
		temp_handle =  mw_ui_button_add_new(5,
   823e0:	47b0      	blx	r6
		temp_handle = mw_ui_button_add_new(60,
   823e2:	f8cd 8000 	str.w	r8, [sp]
   823e6:	2303      	movs	r3, #3
		mw_dialog_date_chooser_data.button_ok_handle = temp_handle;
   823e8:	6020      	str	r0, [r4, #0]
		temp_handle = mw_ui_button_add_new(60,
   823ea:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   823ee:	2182      	movs	r1, #130	; 0x82
   823f0:	203c      	movs	r0, #60	; 0x3c
   823f2:	47b0      	blx	r6
		temp_handle = mw_ui_arrow_add_new(93,
   823f4:	f105 0348 	add.w	r3, r5, #72	; 0x48
		mw_dialog_date_chooser_data.button_cancel_handle = temp_handle;
   823f8:	6060      	str	r0, [r4, #4]
		temp_handle = mw_ui_arrow_add_new(93,
   823fa:	9300      	str	r3, [sp, #0]
   823fc:	4e2e      	ldr	r6, [pc, #184]	; (824b8 <mw_create_window_dialog_date_chooser+0x39c>)
   823fe:	2301      	movs	r3, #1
   82400:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   82404:	2105      	movs	r1, #5
   82406:	205d      	movs	r0, #93	; 0x5d
   82408:	47b0      	blx	r6
		temp_handle = mw_ui_arrow_add_new(93,
   8240a:	f105 0354 	add.w	r3, r5, #84	; 0x54
		mw_dialog_date_chooser_data.arrow_date_up_handle = temp_handle;
   8240e:	61a0      	str	r0, [r4, #24]
		temp_handle = mw_ui_arrow_add_new(93,
   82410:	9300      	str	r3, [sp, #0]
   82412:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   82416:	2301      	movs	r3, #1
   82418:	2119      	movs	r1, #25
   8241a:	205d      	movs	r0, #93	; 0x5d
   8241c:	47b0      	blx	r6
		temp_handle = mw_ui_arrow_add_new(93,
   8241e:	f105 0330 	add.w	r3, r5, #48	; 0x30
		mw_dialog_date_chooser_data.arrow_date_down_handle = temp_handle;
   82422:	61e0      	str	r0, [r4, #28]
		temp_handle = mw_ui_arrow_add_new(93,
   82424:	9300      	str	r3, [sp, #0]
   82426:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   8242a:	2301      	movs	r3, #1
   8242c:	212d      	movs	r1, #45	; 0x2d
   8242e:	205d      	movs	r0, #93	; 0x5d
   82430:	47b0      	blx	r6
		temp_handle = mw_ui_arrow_add_new(93,
   82432:	f105 033c 	add.w	r3, r5, #60	; 0x3c
		mw_dialog_date_chooser_data.arrow_month_up_handle = temp_handle;
   82436:	6120      	str	r0, [r4, #16]
		temp_handle = mw_ui_arrow_add_new(93,
   82438:	9300      	str	r3, [sp, #0]
   8243a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   8243e:	2301      	movs	r3, #1
   82440:	2141      	movs	r1, #65	; 0x41
   82442:	205d      	movs	r0, #93	; 0x5d
   82444:	47b0      	blx	r6
		temp_handle = mw_ui_arrow_add_new(93,
   82446:	f105 0318 	add.w	r3, r5, #24
		mw_dialog_date_chooser_data.arrow_month_down_handle = temp_handle;
   8244a:	6160      	str	r0, [r4, #20]
		temp_handle = mw_ui_arrow_add_new(93,
   8244c:	9300      	str	r3, [sp, #0]
   8244e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   82452:	2301      	movs	r3, #1
   82454:	2155      	movs	r1, #85	; 0x55
   82456:	205d      	movs	r0, #93	; 0x5d
   82458:	47b0      	blx	r6
		temp_handle = mw_ui_arrow_add_new(93,
   8245a:	3524      	adds	r5, #36	; 0x24
		mw_dialog_date_chooser_data.arrow_year_up_handle = temp_handle;
   8245c:	60a0      	str	r0, [r4, #8]
		temp_handle = mw_ui_arrow_add_new(93,
   8245e:	9500      	str	r5, [sp, #0]
   82460:	2301      	movs	r3, #1
   82462:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   82466:	2169      	movs	r1, #105	; 0x69
   82468:	205d      	movs	r0, #93	; 0x5d
   8246a:	47b0      	blx	r6
		mw_dialog_date_chooser_data.arrow_year_down_handle = temp_handle;
   8246c:	60e0      	str	r0, [r4, #12]
   8246e:	e725      	b.n	822bc <mw_create_window_dialog_date_chooser+0x1a0>
	update_arrow_enable_states();
   82470:	4b12      	ldr	r3, [pc, #72]	; (824bc <mw_create_window_dialog_date_chooser+0x3a0>)
   82472:	4798      	blx	r3
	mw_paint_window_frame(owner_window_handle, MW_WINDOW_FRAME_COMPONENT_TITLE_BAR);
   82474:	4d12      	ldr	r5, [pc, #72]	; (824c0 <mw_create_window_dialog_date_chooser+0x3a4>)
   82476:	2101      	movs	r1, #1
   82478:	980e      	ldr	r0, [sp, #56]	; 0x38
   8247a:	47a8      	blx	r5
	mw_paint_window_frame(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   8247c:	211f      	movs	r1, #31
   8247e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   82482:	47a8      	blx	r5
	mw_paint_window_client(mw_dialog_date_chooser_data.date_chooser_dialog_window_handle);
   82484:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   82488:	4b0e      	ldr	r3, [pc, #56]	; (824c4 <mw_create_window_dialog_date_chooser+0x3a8>)
   8248a:	4798      	blx	r3
	return (mw_dialog_date_chooser_data.date_chooser_dialog_window_handle);
   8248c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   82490:	e72a      	b.n	822e8 <mw_create_window_dialog_date_chooser+0x1cc>
   82492:	bf00      	nop
   82494:	00081f4d 	.word	0x00081f4d
   82498:	00081c3d 	.word	0x00081c3d
   8249c:	000a69dc 	.word	0x000a69dc
   824a0:	0008e94d 	.word	0x0008e94d
   824a4:	200711c4 	.word	0x200711c4
   824a8:	00096f31 	.word	0x00096f31
   824ac:	000a6554 	.word	0x000a6554
   824b0:	000a69d4 	.word	0x000a69d4
   824b4:	00097985 	.word	0x00097985
   824b8:	00097679 	.word	0x00097679
   824bc:	00081dd9 	.word	0x00081dd9
   824c0:	00090281 	.word	0x00090281
   824c4:	00090409 	.word	0x00090409

000824c8 <update_folder_entries>:
 * Update the list box with the current folder's entries
 *
 * @param folders_only true if to search for folders only
 */
static void update_folder_entries(bool folders_only)
{
   824c8:	b570      	push	{r4, r5, r6, lr}
	if (mw_dialog_file_chooser_data.large_size)
   824ca:	4c19      	ldr	r4, [pc, #100]	; (82530 <update_folder_entries+0x68>)
{
   824cc:	b082      	sub	sp, #8
	if (mw_dialog_file_chooser_data.large_size)
   824ce:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
{
   824d2:	4602      	mov	r2, r0
	if (mw_dialog_file_chooser_data.large_size)
   824d4:	b34b      	cbz	r3, 8252a <update_folder_entries+0x62>
	{
		mw_dialog_file_chooser_data.list_box_file_data.number_of_items = find_folder_entries(mw_dialog_file_chooser_data.folder_path,
   824d6:	4917      	ldr	r1, [pc, #92]	; (82534 <update_folder_entries+0x6c>)
   824d8:	4b17      	ldr	r3, [pc, #92]	; (82538 <update_folder_entries+0x70>)
				mw_bitmaps_file_icon_large,
				mw_bitmaps_folder_icon_large);
	}
	else
	{
		mw_dialog_file_chooser_data.list_box_file_data.number_of_items = find_folder_entries(mw_dialog_file_chooser_data.folder_path,
   824da:	f104 0528 	add.w	r5, r4, #40	; 0x28
   824de:	9101      	str	r1, [sp, #4]
   824e0:	9300      	str	r3, [sp, #0]
   824e2:	4629      	mov	r1, r5
   824e4:	2310      	movs	r3, #16
   824e6:	4e15      	ldr	r6, [pc, #84]	; (8253c <update_folder_entries+0x74>)
   824e8:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   824ec:	47b0      	blx	r6
				mw_bitmaps_file_icon_small,
				mw_bitmaps_folder_icon_small);
	}

	/* let the list box know of new data */
	mw_post_message(MW_LIST_BOX_SET_ENTRIES_MESSAGE,
   824ee:	2601      	movs	r6, #1
		mw_dialog_file_chooser_data.list_box_file_data.number_of_items = find_folder_entries(mw_dialog_file_chooser_data.folder_path,
   824f0:	4603      	mov	r3, r0
   824f2:	f884 012d 	strb.w	r0, [r4, #301]	; 0x12d
	mw_post_message(MW_LIST_BOX_SET_ENTRIES_MESSAGE,
   824f6:	68a2      	ldr	r2, [r4, #8]
   824f8:	e88d 0060 	stmia.w	sp, {r5, r6}
   824fc:	2100      	movs	r1, #0
   824fe:	2033      	movs	r0, #51	; 0x33
   82500:	4d0f      	ldr	r5, [pc, #60]	; (82540 <update_folder_entries+0x78>)
   82502:	47a8      	blx	r5
			mw_dialog_file_chooser_data.list_box_file_data.number_of_items,
			(void *)mw_dialog_file_chooser_data.file_entries,
			MW_CONTROL_MESSAGE);

	/* up arrow always disabled on new data as scrolling will be at top position */
	mw_set_control_enabled(mw_dialog_file_chooser_data.arrow_file_up_handle, false);
   82504:	2100      	movs	r1, #0
   82506:	4d0f      	ldr	r5, [pc, #60]	; (82544 <update_folder_entries+0x7c>)
   82508:	68e0      	ldr	r0, [r4, #12]
   8250a:	47a8      	blx	r5

	/* update enabled state of back arrow depending on folder depth */
	if (mw_dialog_file_chooser_data.folder_depth == 0U)
   8250c:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   82510:	b101      	cbz	r1, 82514 <update_folder_entries+0x4c>
	{
		mw_set_control_enabled(mw_dialog_file_chooser_data.arrow_file_back_handle, false);
	}
	else
	{
		mw_set_control_enabled(mw_dialog_file_chooser_data.arrow_file_back_handle, true);
   82512:	4631      	mov	r1, r6
   82514:	6960      	ldr	r0, [r4, #20]
   82516:	47a8      	blx	r5
	}

	/* paint arrows updated here */
	mw_paint_control(mw_dialog_file_chooser_data.arrow_file_up_handle);
   82518:	4d0b      	ldr	r5, [pc, #44]	; (82548 <update_folder_entries+0x80>)
   8251a:	68e0      	ldr	r0, [r4, #12]
   8251c:	47a8      	blx	r5
	mw_paint_control(mw_dialog_file_chooser_data.arrow_file_back_handle);
   8251e:	462b      	mov	r3, r5
   82520:	6960      	ldr	r0, [r4, #20]
}
   82522:	b002      	add	sp, #8
   82524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	mw_paint_control(mw_dialog_file_chooser_data.arrow_file_back_handle);
   82528:	4718      	bx	r3
		mw_dialog_file_chooser_data.list_box_file_data.number_of_items = find_folder_entries(mw_dialog_file_chooser_data.folder_path,
   8252a:	4908      	ldr	r1, [pc, #32]	; (8254c <update_folder_entries+0x84>)
   8252c:	4b08      	ldr	r3, [pc, #32]	; (82550 <update_folder_entries+0x88>)
   8252e:	e7d4      	b.n	824da <update_folder_entries+0x12>
   82530:	20071304 	.word	0x20071304
   82534:	000a679c 	.word	0x000a679c
   82538:	000a674c 	.word	0x000a674c
   8253c:	00099c69 	.word	0x00099c69
   82540:	00091955 	.word	0x00091955
   82544:	00090f11 	.word	0x00090f11
   82548:	00090f71 	.word	0x00090f71
   8254c:	000a67bc 	.word	0x000a67bc
   82550:	000a676c 	.word	0x000a676c

00082554 <mw_dialog_file_chooser_paint_function>:
 * @param draw_info Draw info structure describing offset and clip region
 * @note Do not call this directly from user code
 */
static void mw_dialog_file_chooser_paint_function(mw_handle_t window_handle, const mw_gl_draw_info_t *draw_info)
{
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   82554:	1c0b      	adds	r3, r1, #0
   82556:	bf18      	it	ne
   82558:	2301      	movne	r3, #1
{
   8255a:	b570      	push	{r4, r5, r6, lr}
   8255c:	4605      	mov	r5, r0
   8255e:	b086      	sub	sp, #24
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   82560:	22b8      	movs	r2, #184	; 0xb8
   82562:	460e      	mov	r6, r1
   82564:	4618      	mov	r0, r3
   82566:	4912      	ldr	r1, [pc, #72]	; (825b0 <mw_dialog_file_chooser_paint_function+0x5c>)
   82568:	4b12      	ldr	r3, [pc, #72]	; (825b4 <mw_dialog_file_chooser_paint_function+0x60>)
   8256a:	4c13      	ldr	r4, [pc, #76]	; (825b8 <mw_dialog_file_chooser_paint_function+0x64>)
   8256c:	47a0      	blx	r4

	mw_gl_set_fill(MW_GL_FILL);
   8256e:	2001      	movs	r0, #1
   82570:	4b12      	ldr	r3, [pc, #72]	; (825bc <mw_dialog_file_chooser_paint_function+0x68>)
   82572:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_WHITE);
   82574:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   82578:	4b11      	ldr	r3, [pc, #68]	; (825c0 <mw_dialog_file_chooser_paint_function+0x6c>)
   8257a:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   8257c:	2000      	movs	r0, #0
   8257e:	4b11      	ldr	r3, [pc, #68]	; (825c4 <mw_dialog_file_chooser_paint_function+0x70>)
   82580:	4798      	blx	r3
	mw_gl_clear_pattern();
   82582:	4b11      	ldr	r3, [pc, #68]	; (825c8 <mw_dialog_file_chooser_paint_function+0x74>)
   82584:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
			0,
			0,
			mw_get_window_client_rect(window_handle).width,
   82586:	4c11      	ldr	r4, [pc, #68]	; (825cc <mw_dialog_file_chooser_paint_function+0x78>)
   82588:	4629      	mov	r1, r5
   8258a:	a802      	add	r0, sp, #8
   8258c:	47a0      	blx	r4
			mw_get_window_client_rect(window_handle).height);
   8258e:	4629      	mov	r1, r5
   82590:	a804      	add	r0, sp, #16
	mw_gl_rectangle(draw_info,
   82592:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
			mw_get_window_client_rect(window_handle).height);
   82596:	47a0      	blx	r4
	mw_gl_rectangle(draw_info,
   82598:	2200      	movs	r2, #0
   8259a:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
   8259e:	462b      	mov	r3, r5
   825a0:	9400      	str	r4, [sp, #0]
   825a2:	4630      	mov	r0, r6
   825a4:	4611      	mov	r1, r2
   825a6:	4c0a      	ldr	r4, [pc, #40]	; (825d0 <mw_dialog_file_chooser_paint_function+0x7c>)
   825a8:	47a0      	blx	r4
}
   825aa:	b006      	add	sp, #24
   825ac:	bd70      	pop	{r4, r5, r6, pc}
   825ae:	bf00      	nop
   825b0:	000a6a24 	.word	0x000a6a24
   825b4:	000a6618 	.word	0x000a6618
   825b8:	00095add 	.word	0x00095add
   825bc:	000846fd 	.word	0x000846fd
   825c0:	000846c9 	.word	0x000846c9
   825c4:	000846f1 	.word	0x000846f1
   825c8:	000846e1 	.word	0x000846e1
   825cc:	00090735 	.word	0x00090735
   825d0:	000850e1 	.word	0x000850e1

000825d4 <mw_dialog_file_chooser_message_function>:
 *
 * @param message The message to be processed
 * @note Do not call this directly from user code
 */
static void mw_dialog_file_chooser_message_function(const mw_message_t *message)
{
   825d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t temp_uint8;

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   825d8:	4605      	mov	r5, r0
   825da:	3000      	adds	r0, #0
   825dc:	4b97      	ldr	r3, [pc, #604]	; (8283c <mw_dialog_file_chooser_message_function+0x268>)
{
   825de:	b082      	sub	sp, #8
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   825e0:	bf18      	it	ne
   825e2:	2001      	movne	r0, #1
   825e4:	22cf      	movs	r2, #207	; 0xcf
   825e6:	4996      	ldr	r1, [pc, #600]	; (82840 <mw_dialog_file_chooser_message_function+0x26c>)
   825e8:	4c96      	ldr	r4, [pc, #600]	; (82844 <mw_dialog_file_chooser_message_function+0x270>)
   825ea:	47a0      	blx	r4

	switch (message->message_id)
   825ec:	7a2b      	ldrb	r3, [r5, #8]
   825ee:	2b23      	cmp	r3, #35	; 0x23
   825f0:	d83c      	bhi.n	8266c <mw_dialog_file_chooser_message_function+0x98>
   825f2:	e8df f003 	tbb	[pc, r3]
   825f6:	3b5f      	.short	0x3b5f
   825f8:	3b3b3b3b 	.word	0x3b3b3b3b
   825fc:	3b3b3b3b 	.word	0x3b3b3b3b
   82600:	3b3b3b3b 	.word	0x3b3b3b3b
   82604:	3b3b3b3b 	.word	0x3b3b3b3b
   82608:	3b3b3b3b 	.word	0x3b3b3b3b
   8260c:	3b3b3b3b 	.word	0x3b3b3b3b
   82610:	7c3b3b12 	.word	0x7c3b3b12
   82614:	3b3b3bad 	.word	0x3b3b3bad
   82618:	3e3b      	.short	0x3e3b
		break;

	case MW_BUTTON_PRESSED_MESSAGE:
		{
			/* remove all controls and window */
			mw_remove_window(mw_dialog_file_chooser_data.file_chooser_dialog_window_handle);
   8261a:	4c8b      	ldr	r4, [pc, #556]	; (82848 <mw_dialog_file_chooser_message_function+0x274>)
   8261c:	4b8b      	ldr	r3, [pc, #556]	; (8284c <mw_dialog_file_chooser_message_function+0x278>)
   8261e:	6a20      	ldr	r0, [r4, #32]
   82620:	4798      	blx	r3

			/* a window has changed visibility so repaint all */
			mw_paint_all();
   82622:	4b8b      	ldr	r3, [pc, #556]	; (82850 <mw_dialog_file_chooser_message_function+0x27c>)
   82624:	4798      	blx	r3

			if (message->sender_handle == mw_dialog_file_chooser_data.button_cancel_handle)
   82626:	682a      	ldr	r2, [r5, #0]
   82628:	6863      	ldr	r3, [r4, #4]
   8262a:	429a      	cmp	r2, r3
   8262c:	f000 8182 	beq.w	82934 <mw_dialog_file_chooser_message_function+0x360>
						MW_WINDOW_MESSAGE);
			}
			else
			{
				/* post ok response to receiving window */
				if (mw_dialog_file_chooser_data.folders_only)
   82630:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   82634:	2b00      	cmp	r3, #0
   82636:	f040 80f6 	bne.w	82826 <mw_dialog_file_chooser_message_function+0x252>
							MW_WINDOW_MESSAGE);
				}
				else
				{
					/* post file ok response to receiving window */
					if (mw_dialog_file_chooser_data.folder_depth > 0U)
   8263a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
					{
						(void)mw_util_safe_strcat(mw_dialog_file_chooser_data.folder_path,
   8263e:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
					if (mw_dialog_file_chooser_data.folder_depth > 0U)
   82642:	2b00      	cmp	r3, #0
   82644:	f040 80e9 	bne.w	8281a <mw_dialog_file_chooser_message_function+0x246>
   82648:	4e82      	ldr	r6, [pc, #520]	; (82854 <mw_dialog_file_chooser_message_function+0x280>)
					}

					/* add the file name */
					(void)mw_util_safe_strcat(mw_dialog_file_chooser_data.folder_path,
							MAX_FOLDER_AND_FILENAME_LENGTH,
							mw_dialog_file_chooser_data.list_box_file_data.list_box_entries[mw_dialog_file_chooser_data.list_box_file_data.selection].label);
   8264a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   8264e:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
					(void)mw_util_safe_strcat(mw_dialog_file_chooser_data.folder_path,
   82652:	2180      	movs	r1, #128	; 0x80
   82654:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
   82658:	487f      	ldr	r0, [pc, #508]	; (82858 <mw_dialog_file_chooser_message_function+0x284>)
   8265a:	47b0      	blx	r6

					/* post file ok response to receiving window */
					mw_post_message(MW_DIALOG_FILE_CHOOSER_FILE_OK_MESSAGE,
   8265c:	2300      	movs	r3, #0
   8265e:	69e2      	ldr	r2, [r4, #28]
   82660:	4619      	mov	r1, r3
   82662:	9500      	str	r5, [sp, #0]
   82664:	9301      	str	r3, [sp, #4]
   82666:	2041      	movs	r0, #65	; 0x41
   82668:	4c7c      	ldr	r4, [pc, #496]	; (8285c <mw_dialog_file_chooser_message_function+0x288>)
   8266a:	47a0      	blx	r4

	default:
		/* keep MISRA happy */
		break;
	}
}
   8266c:	b002      	add	sp, #8
   8266e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (message->message_data == (uint32_t)MW_UI_ARROW_UP && mw_dialog_file_chooser_data.lines_to_scroll > 0U)
   82672:	68eb      	ldr	r3, [r5, #12]
   82674:	2b00      	cmp	r3, #0
   82676:	d17e      	bne.n	82776 <mw_dialog_file_chooser_message_function+0x1a2>
   82678:	4c73      	ldr	r4, [pc, #460]	; (82848 <mw_dialog_file_chooser_message_function+0x274>)
   8267a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   8267e:	2b00      	cmp	r3, #0
   82680:	d0f4      	beq.n	8266c <mw_dialog_file_chooser_message_function+0x98>
			mw_dialog_file_chooser_data.lines_to_scroll--;
   82682:	3b01      	subs	r3, #1
   82684:	b2d9      	uxtb	r1, r3
   82686:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
			if (mw_dialog_file_chooser_data.lines_to_scroll == 0U)
   8268a:	2900      	cmp	r1, #0
   8268c:	f000 814b 	beq.w	82926 <mw_dialog_file_chooser_message_function+0x352>
   82690:	4d73      	ldr	r5, [pc, #460]	; (82860 <mw_dialog_file_chooser_message_function+0x28c>)
   82692:	4e74      	ldr	r6, [pc, #464]	; (82864 <mw_dialog_file_chooser_message_function+0x290>)
			mw_set_control_enabled(mw_dialog_file_chooser_data.arrow_file_down_handle, true);
   82694:	6920      	ldr	r0, [r4, #16]
   82696:	2101      	movs	r1, #1
   82698:	47a8      	blx	r5
			mw_paint_control(mw_dialog_file_chooser_data.arrow_file_down_handle);
   8269a:	6920      	ldr	r0, [r4, #16]
			mw_paint_control(mw_dialog_file_chooser_data.arrow_file_up_handle);
   8269c:	47b0      	blx	r6
			mw_post_message(MW_LIST_BOX_LINES_TO_SCROLL_MESSAGE,
   8269e:	2001      	movs	r0, #1
   826a0:	2100      	movs	r1, #0
   826a2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   826a6:	68a2      	ldr	r2, [r4, #8]
   826a8:	4d6c      	ldr	r5, [pc, #432]	; (8285c <mw_dialog_file_chooser_message_function+0x288>)
   826aa:	9001      	str	r0, [sp, #4]
   826ac:	9100      	str	r1, [sp, #0]
   826ae:	2031      	movs	r0, #49	; 0x31
   826b0:	47a8      	blx	r5
   826b2:	e099      	b.n	827e8 <mw_dialog_file_chooser_message_function+0x214>
   826b4:	4b6c      	ldr	r3, [pc, #432]	; (82868 <mw_dialog_file_chooser_message_function+0x294>)
   826b6:	4868      	ldr	r0, [pc, #416]	; (82858 <mw_dialog_file_chooser_message_function+0x284>)
   826b8:	4798      	blx	r3
	switch (message->message_id)
   826ba:	2300      	movs	r3, #0
   826bc:	4c62      	ldr	r4, [pc, #392]	; (82848 <mw_dialog_file_chooser_message_function+0x274>)
   826be:	461d      	mov	r5, r3
   826c0:	e006      	b.n	826d0 <mw_dialog_file_chooser_message_function+0xfc>
		if (path[i] == '/')
   826c2:	f891 20a8 	ldrb.w	r2, [r1, #168]	; 0xa8
   826c6:	3301      	adds	r3, #1
   826c8:	2a2f      	cmp	r2, #47	; 0x2f
			depth++;
   826ca:	bf04      	itt	eq
   826cc:	3501      	addeq	r5, #1
   826ce:	b2ed      	uxtbeq	r5, r5
   826d0:	b29a      	uxth	r2, r3
	for (i = 0U; i < strlen(path); i++)
   826d2:	4282      	cmp	r2, r0
		if (path[i] == '/')
   826d4:	eb04 0102 	add.w	r1, r4, r2
	for (i = 0U; i < strlen(path); i++)
   826d8:	d3f3      	bcc.n	826c2 <mw_dialog_file_chooser_message_function+0xee>
		update_folder_entries(mw_dialog_file_chooser_data.folders_only);
   826da:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   826de:	4b63      	ldr	r3, [pc, #396]	; (8286c <mw_dialog_file_chooser_message_function+0x298>)
	depth--;
   826e0:	3d01      	subs	r5, #1
		mw_dialog_file_chooser_data.folder_depth = temp_uint8;
   826e2:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
}
   826e6:	b002      	add	sp, #8
   826e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		update_folder_entries(mw_dialog_file_chooser_data.folders_only);
   826ec:	4718      	bx	r3
			if ((mw_dialog_file_chooser_data.list_box_file_data.list_box_entries[item_chosen].icon ==
   826ee:	4c56      	ldr	r4, [pc, #344]	; (82848 <mw_dialog_file_chooser_message_function+0x274>)
   826f0:	7b2e      	ldrb	r6, [r5, #12]
   826f2:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   826f6:	00f7      	lsls	r7, r6, #3
   826f8:	443a      	add	r2, r7
   826fa:	6853      	ldr	r3, [r2, #4]
   826fc:	495c      	ldr	r1, [pc, #368]	; (82870 <mw_dialog_file_chooser_message_function+0x29c>)
   826fe:	428b      	cmp	r3, r1
   82700:	f000 80c8 	beq.w	82894 <mw_dialog_file_chooser_message_function+0x2c0>
					mw_bitmaps_folder_icon_large && mw_dialog_file_chooser_data.large_size) ||
   82704:	495b      	ldr	r1, [pc, #364]	; (82874 <mw_dialog_file_chooser_message_function+0x2a0>)
   82706:	428b      	cmp	r3, r1
   82708:	f000 80ff 	beq.w	8290a <mw_dialog_file_chooser_message_function+0x336>
			else if ((mw_dialog_file_chooser_data.list_box_file_data.list_box_entries[item_chosen].icon ==
   8270c:	4a5a      	ldr	r2, [pc, #360]	; (82878 <mw_dialog_file_chooser_message_function+0x2a4>)
   8270e:	4293      	cmp	r3, r2
   82710:	f000 8104 	beq.w	8291c <mw_dialog_file_chooser_message_function+0x348>
					mw_bitmaps_file_icon_large && mw_dialog_file_chooser_data.large_size) ||
   82714:	4a59      	ldr	r2, [pc, #356]	; (8287c <mw_dialog_file_chooser_message_function+0x2a8>)
   82716:	4293      	cmp	r3, r2
   82718:	d1a8      	bne.n	8266c <mw_dialog_file_chooser_message_function+0x98>
					mw_bitmaps_file_icon_small && !mw_dialog_file_chooser_data.large_size))
   8271a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   8271e:	2b00      	cmp	r3, #0
   82720:	d1a4      	bne.n	8266c <mw_dialog_file_chooser_message_function+0x98>
				mw_set_control_enabled(mw_dialog_file_chooser_data.button_ok_handle, true);
   82722:	2101      	movs	r1, #1
   82724:	4b4e      	ldr	r3, [pc, #312]	; (82860 <mw_dialog_file_chooser_message_function+0x28c>)
   82726:	6820      	ldr	r0, [r4, #0]
   82728:	4798      	blx	r3
				mw_paint_control(mw_dialog_file_chooser_data.button_ok_handle);
   8272a:	4f4e      	ldr	r7, [pc, #312]	; (82864 <mw_dialog_file_chooser_message_function+0x290>)
   8272c:	6820      	ldr	r0, [r4, #0]
   8272e:	47b8      	blx	r7
				mw_post_message(MW_LABEL_SET_LABEL_TEXT_MESSAGE,
   82730:	2201      	movs	r2, #1
						(void *)mw_dialog_file_chooser_data.list_box_file_data.list_box_entries[item_chosen].label,
   82732:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
				mw_post_message(MW_LABEL_SET_LABEL_TEXT_MESSAGE,
   82736:	6869      	ldr	r1, [r5, #4]
   82738:	9201      	str	r2, [sp, #4]
   8273a:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   8273e:	69a2      	ldr	r2, [r4, #24]
   82740:	202d      	movs	r0, #45	; 0x2d
   82742:	9300      	str	r3, [sp, #0]
   82744:	4d45      	ldr	r5, [pc, #276]	; (8285c <mw_dialog_file_chooser_message_function+0x288>)
   82746:	2300      	movs	r3, #0
   82748:	47a8      	blx	r5
				mw_paint_control(mw_dialog_file_chooser_data.label_choice_handle);
   8274a:	69a0      	ldr	r0, [r4, #24]
   8274c:	463b      	mov	r3, r7
   8274e:	e00e      	b.n	8276e <mw_dialog_file_chooser_message_function+0x19a>
		mw_set_control_enabled(mw_dialog_file_chooser_data.arrow_file_down_handle, message->message_data >> 16U == 1U);
   82750:	89e9      	ldrh	r1, [r5, #14]
   82752:	4c3d      	ldr	r4, [pc, #244]	; (82848 <mw_dialog_file_chooser_message_function+0x274>)
   82754:	f1a1 0101 	sub.w	r1, r1, #1
   82758:	fab1 f181 	clz	r1, r1
   8275c:	6920      	ldr	r0, [r4, #16]
   8275e:	4b40      	ldr	r3, [pc, #256]	; (82860 <mw_dialog_file_chooser_message_function+0x28c>)
   82760:	0949      	lsrs	r1, r1, #5
   82762:	4798      	blx	r3
		mw_dialog_file_chooser_data.max_scroll_lines = (uint16_t)(message->message_data & 0xffffU);
   82764:	68ea      	ldr	r2, [r5, #12]
		mw_paint_control(mw_dialog_file_chooser_data.arrow_file_down_handle);
   82766:	6920      	ldr	r0, [r4, #16]
   82768:	4b3e      	ldr	r3, [pc, #248]	; (82864 <mw_dialog_file_chooser_message_function+0x290>)
		mw_dialog_file_chooser_data.max_scroll_lines = (uint16_t)(message->message_data & 0xffffU);
   8276a:	f8a4 21aa 	strh.w	r2, [r4, #426]	; 0x1aa
}
   8276e:	b002      	add	sp, #8
   82770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				mw_paint_control(mw_dialog_file_chooser_data.label_choice_handle);
   82774:	4718      	bx	r3
		else if (message->message_data == (uint32_t)MW_UI_ARROW_DOWN &&
   82776:	2bb4      	cmp	r3, #180	; 0xb4
   82778:	d039      	beq.n	827ee <mw_dialog_file_chooser_message_function+0x21a>
		else if (message->message_data == (uint32_t)MW_UI_ARROW_LEFT)
   8277a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   8277e:	f47f af75 	bne.w	8266c <mw_dialog_file_chooser_message_function+0x98>
			*strrchr(mw_dialog_file_chooser_data.folder_path, (long)'/') = '\0';
   82782:	4c31      	ldr	r4, [pc, #196]	; (82848 <mw_dialog_file_chooser_message_function+0x274>)
   82784:	212f      	movs	r1, #47	; 0x2f
   82786:	f104 06a8 	add.w	r6, r4, #168	; 0xa8
   8278a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 82890 <mw_dialog_file_chooser_message_function+0x2bc>
   8278e:	4630      	mov	r0, r6
   82790:	47c0      	blx	r8
   82792:	2700      	movs	r7, #0
   82794:	4603      	mov	r3, r0
			*strrchr(mw_dialog_file_chooser_data.folder_path, (long)'/') = '\0';
   82796:	212f      	movs	r1, #47	; 0x2f
			*strrchr(mw_dialog_file_chooser_data.folder_path, (long)'/') = '\0';
   82798:	701f      	strb	r7, [r3, #0]
			*strrchr(mw_dialog_file_chooser_data.folder_path, (long)'/') = '\0';
   8279a:	4630      	mov	r0, r6
   8279c:	47c0      	blx	r8
			(void)strcat((mw_dialog_file_chooser_data.folder_path), ("/"));
   8279e:	4b32      	ldr	r3, [pc, #200]	; (82868 <mw_dialog_file_chooser_message_function+0x294>)
			*strrchr(mw_dialog_file_chooser_data.folder_path, (long)'/') = '\0';
   827a0:	7007      	strb	r7, [r0, #0]
			(void)strcat((mw_dialog_file_chooser_data.folder_path), ("/"));
   827a2:	4630      	mov	r0, r6
   827a4:	4798      	blx	r3
   827a6:	4b36      	ldr	r3, [pc, #216]	; (82880 <mw_dialog_file_chooser_message_function+0x2ac>)
			update_folder_entries(mw_dialog_file_chooser_data.folders_only);
   827a8:	4a30      	ldr	r2, [pc, #192]	; (8286c <mw_dialog_file_chooser_message_function+0x298>)
			(void)strcat((mw_dialog_file_chooser_data.folder_path), ("/"));
   827aa:	881b      	ldrh	r3, [r3, #0]
   827ac:	5233      	strh	r3, [r6, r0]
			mw_dialog_file_chooser_data.folder_depth--;
   827ae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
			update_folder_entries(mw_dialog_file_chooser_data.folders_only);
   827b2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
			mw_dialog_file_chooser_data.folder_depth--;
   827b6:	3b01      	subs	r3, #1
   827b8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
			mw_dialog_file_chooser_data.lines_to_scroll = 0U;
   827bc:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
			update_folder_entries(mw_dialog_file_chooser_data.folders_only);
   827c0:	4790      	blx	r2
			if (mw_dialog_file_chooser_data.folders_only)
   827c2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   827c6:	2b00      	cmp	r3, #0
   827c8:	f040 80d9 	bne.w	8297e <mw_dialog_file_chooser_message_function+0x3aa>
   827cc:	4e25      	ldr	r6, [pc, #148]	; (82864 <mw_dialog_file_chooser_message_function+0x290>)
				mw_set_control_enabled(mw_dialog_file_chooser_data.button_ok_handle, false);
   827ce:	2100      	movs	r1, #0
   827d0:	4b23      	ldr	r3, [pc, #140]	; (82860 <mw_dialog_file_chooser_message_function+0x28c>)
   827d2:	6820      	ldr	r0, [r4, #0]
   827d4:	4798      	blx	r3
				mw_paint_control(mw_dialog_file_chooser_data.button_ok_handle);
   827d6:	6820      	ldr	r0, [r4, #0]
   827d8:	47b0      	blx	r6
				(void)mw_util_safe_strcpy(mw_dialog_file_chooser_data.label_choice_data.label,
   827da:	4a2a      	ldr	r2, [pc, #168]	; (82884 <mw_dialog_file_chooser_message_function+0x2b0>)
   827dc:	2128      	movs	r1, #40	; 0x28
   827de:	482a      	ldr	r0, [pc, #168]	; (82888 <mw_dialog_file_chooser_message_function+0x2b4>)
   827e0:	4b2a      	ldr	r3, [pc, #168]	; (8288c <mw_dialog_file_chooser_message_function+0x2b8>)
   827e2:	4798      	blx	r3
				mw_paint_control(mw_dialog_file_chooser_data.label_choice_handle);
   827e4:	69a0      	ldr	r0, [r4, #24]
   827e6:	47b0      	blx	r6
			mw_paint_control(mw_dialog_file_chooser_data.list_box_file_handle);
   827e8:	68a0      	ldr	r0, [r4, #8]
   827ea:	4633      	mov	r3, r6
   827ec:	e7bf      	b.n	8276e <mw_dialog_file_chooser_message_function+0x19a>
				mw_dialog_file_chooser_data.lines_to_scroll < mw_dialog_file_chooser_data.max_scroll_lines)
   827ee:	4c16      	ldr	r4, [pc, #88]	; (82848 <mw_dialog_file_chooser_message_function+0x274>)
   827f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   827f4:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	; 0x1aa
		else if (message->message_data == (uint32_t)MW_UI_ARROW_DOWN &&
   827f8:	4293      	cmp	r3, r2
   827fa:	f4bf af37 	bcs.w	8266c <mw_dialog_file_chooser_message_function+0x98>
			mw_dialog_file_chooser_data.lines_to_scroll++;
   827fe:	3301      	adds	r3, #1
   82800:	b2db      	uxtb	r3, r3
			if (mw_dialog_file_chooser_data.lines_to_scroll ==
   82802:	429a      	cmp	r2, r3
			mw_dialog_file_chooser_data.lines_to_scroll++;
   82804:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			if (mw_dialog_file_chooser_data.lines_to_scroll ==
   82808:	f000 80cb 	beq.w	829a2 <mw_dialog_file_chooser_message_function+0x3ce>
   8280c:	4d14      	ldr	r5, [pc, #80]	; (82860 <mw_dialog_file_chooser_message_function+0x28c>)
   8280e:	4e15      	ldr	r6, [pc, #84]	; (82864 <mw_dialog_file_chooser_message_function+0x290>)
			mw_set_control_enabled(mw_dialog_file_chooser_data.arrow_file_up_handle, true);
   82810:	68e0      	ldr	r0, [r4, #12]
   82812:	2101      	movs	r1, #1
   82814:	47a8      	blx	r5
			mw_paint_control(mw_dialog_file_chooser_data.arrow_file_up_handle);
   82816:	68e0      	ldr	r0, [r4, #12]
   82818:	e740      	b.n	8269c <mw_dialog_file_chooser_message_function+0xc8>
						(void)mw_util_safe_strcat(mw_dialog_file_chooser_data.folder_path,
   8281a:	4628      	mov	r0, r5
   8281c:	4a18      	ldr	r2, [pc, #96]	; (82880 <mw_dialog_file_chooser_message_function+0x2ac>)
   8281e:	2180      	movs	r1, #128	; 0x80
   82820:	4e0c      	ldr	r6, [pc, #48]	; (82854 <mw_dialog_file_chooser_message_function+0x280>)
   82822:	47b0      	blx	r6
   82824:	e711      	b.n	8264a <mw_dialog_file_chooser_message_function+0x76>
					mw_post_message(MW_DIALOG_FILE_CHOOSER_FOLDER_OK_MESSAGE,
   82826:	2300      	movs	r3, #0
   82828:	69e2      	ldr	r2, [r4, #28]
   8282a:	34a8      	adds	r4, #168	; 0xa8
   8282c:	9400      	str	r4, [sp, #0]
   8282e:	9301      	str	r3, [sp, #4]
   82830:	4619      	mov	r1, r3
   82832:	2042      	movs	r0, #66	; 0x42
   82834:	4c09      	ldr	r4, [pc, #36]	; (8285c <mw_dialog_file_chooser_message_function+0x288>)
   82836:	47a0      	blx	r4
   82838:	e718      	b.n	8266c <mw_dialog_file_chooser_message_function+0x98>
   8283a:	bf00      	nop
   8283c:	000a6618 	.word	0x000a6618
   82840:	000a6a4c 	.word	0x000a6a4c
   82844:	00095add 	.word	0x00095add
   82848:	20071304 	.word	0x20071304
   8284c:	000911c9 	.word	0x000911c9
   82850:	00095ab1 	.word	0x00095ab1
   82854:	00096f85 	.word	0x00096f85
   82858:	200713ac 	.word	0x200713ac
   8285c:	00091955 	.word	0x00091955
   82860:	00090f11 	.word	0x00090f11
   82864:	00090f71 	.word	0x00090f71
   82868:	000a5e79 	.word	0x000a5e79
   8286c:	000824c9 	.word	0x000824c9
   82870:	000a679c 	.word	0x000a679c
   82874:	000a67bc 	.word	0x000a67bc
   82878:	000a674c 	.word	0x000a674c
   8287c:	000a676c 	.word	0x000a676c
   82880:	000a6498 	.word	0x000a6498
   82884:	000a6a9c 	.word	0x000a6a9c
   82888:	20071484 	.word	0x20071484
   8288c:	00096f31 	.word	0x00096f31
   82890:	000a5f31 	.word	0x000a5f31
					mw_bitmaps_folder_icon_large && mw_dialog_file_chooser_data.large_size) ||
   82894:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
   82898:	b959      	cbnz	r1, 828b2 <mw_dialog_file_chooser_message_function+0x2de>
   8289a:	4946      	ldr	r1, [pc, #280]	; (829b4 <mw_dialog_file_chooser_message_function+0x3e0>)
   8289c:	428b      	cmp	r3, r1
   8289e:	d008      	beq.n	828b2 <mw_dialog_file_chooser_message_function+0x2de>
			else if ((mw_dialog_file_chooser_data.list_box_file_data.list_box_entries[item_chosen].icon ==
   828a0:	4a45      	ldr	r2, [pc, #276]	; (829b8 <mw_dialog_file_chooser_message_function+0x3e4>)
   828a2:	4293      	cmp	r3, r2
   828a4:	f47f af36 	bne.w	82714 <mw_dialog_file_chooser_message_function+0x140>
					mw_bitmaps_file_icon_large && mw_dialog_file_chooser_data.large_size) ||
   828a8:	4b44      	ldr	r3, [pc, #272]	; (829bc <mw_dialog_file_chooser_message_function+0x3e8>)
   828aa:	429a      	cmp	r2, r3
   828ac:	f47f aede 	bne.w	8266c <mw_dialog_file_chooser_message_function+0x98>
   828b0:	e737      	b.n	82722 <mw_dialog_file_chooser_message_function+0x14e>
				if (!mw_dialog_file_chooser_data.folders_only)
   828b2:	f894 8026 	ldrb.w	r8, [r4, #38]	; 0x26
   828b6:	f1b8 0f00 	cmp.w	r8, #0
   828ba:	d04e      	beq.n	8295a <mw_dialog_file_chooser_message_function+0x386>
   828bc:	4e40      	ldr	r6, [pc, #256]	; (829c0 <mw_dialog_file_chooser_message_function+0x3ec>)
				(void)mw_util_safe_strcat(mw_dialog_file_chooser_data.folder_path,
   828be:	4f41      	ldr	r7, [pc, #260]	; (829c4 <mw_dialog_file_chooser_message_function+0x3f0>)
   828c0:	6812      	ldr	r2, [r2, #0]
   828c2:	2180      	movs	r1, #128	; 0x80
   828c4:	f8df 811c 	ldr.w	r8, [pc, #284]	; 829e4 <mw_dialog_file_chooser_message_function+0x410>
   828c8:	4638      	mov	r0, r7
   828ca:	47c0      	blx	r8
				(void)mw_util_safe_strcat(mw_dialog_file_chooser_data.folder_path,
   828cc:	4a3e      	ldr	r2, [pc, #248]	; (829c8 <mw_dialog_file_chooser_message_function+0x3f4>)
   828ce:	2180      	movs	r1, #128	; 0x80
   828d0:	4638      	mov	r0, r7
   828d2:	47c0      	blx	r8
				mw_dialog_file_chooser_data.folder_depth++;
   828d4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
				update_folder_entries(mw_dialog_file_chooser_data.folders_only);
   828d8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
				mw_dialog_file_chooser_data.folder_depth++;
   828dc:	3301      	adds	r3, #1
				update_folder_entries(mw_dialog_file_chooser_data.folders_only);
   828de:	4a3b      	ldr	r2, [pc, #236]	; (829cc <mw_dialog_file_chooser_message_function+0x3f8>)
				mw_dialog_file_chooser_data.folder_depth++;
   828e0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
				update_folder_entries(mw_dialog_file_chooser_data.folders_only);
   828e4:	4790      	blx	r2
				if (mw_dialog_file_chooser_data.folders_only)
   828e6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   828ea:	2b00      	cmp	r3, #0
   828ec:	d02b      	beq.n	82946 <mw_dialog_file_chooser_message_function+0x372>
					mw_post_message(MW_LABEL_SET_LABEL_TEXT_MESSAGE,
   828ee:	2301      	movs	r3, #1
   828f0:	6869      	ldr	r1, [r5, #4]
   828f2:	69a2      	ldr	r2, [r4, #24]
   828f4:	202d      	movs	r0, #45	; 0x2d
   828f6:	9301      	str	r3, [sp, #4]
   828f8:	9700      	str	r7, [sp, #0]
   828fa:	2300      	movs	r3, #0
   828fc:	4d34      	ldr	r5, [pc, #208]	; (829d0 <mw_dialog_file_chooser_message_function+0x3fc>)
   828fe:	47a8      	blx	r5
				mw_paint_control(mw_dialog_file_chooser_data.list_box_file_handle);
   82900:	68a0      	ldr	r0, [r4, #8]
   82902:	47b0      	blx	r6
				mw_paint_control(mw_dialog_file_chooser_data.label_choice_handle);
   82904:	69a0      	ldr	r0, [r4, #24]
   82906:	4633      	mov	r3, r6
   82908:	e731      	b.n	8276e <mw_dialog_file_chooser_message_function+0x19a>
					mw_bitmaps_folder_icon_small && !mw_dialog_file_chooser_data.large_size))
   8290a:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
   8290e:	2900      	cmp	r1, #0
   82910:	d0cf      	beq.n	828b2 <mw_dialog_file_chooser_message_function+0x2de>
			else if ((mw_dialog_file_chooser_data.list_box_file_data.list_box_entries[item_chosen].icon ==
   82912:	4a29      	ldr	r2, [pc, #164]	; (829b8 <mw_dialog_file_chooser_message_function+0x3e4>)
   82914:	4293      	cmp	r3, r2
   82916:	f47f aea9 	bne.w	8266c <mw_dialog_file_chooser_message_function+0x98>
   8291a:	e702      	b.n	82722 <mw_dialog_file_chooser_message_function+0x14e>
					mw_bitmaps_file_icon_large && mw_dialog_file_chooser_data.large_size) ||
   8291c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   82920:	2b00      	cmp	r3, #0
   82922:	d0c1      	beq.n	828a8 <mw_dialog_file_chooser_message_function+0x2d4>
   82924:	e6fd      	b.n	82722 <mw_dialog_file_chooser_message_function+0x14e>
				mw_set_control_enabled(mw_dialog_file_chooser_data.arrow_file_up_handle, false);
   82926:	68e0      	ldr	r0, [r4, #12]
   82928:	4d2a      	ldr	r5, [pc, #168]	; (829d4 <mw_dialog_file_chooser_message_function+0x400>)
   8292a:	47a8      	blx	r5
				mw_paint_control(mw_dialog_file_chooser_data.arrow_file_up_handle);
   8292c:	4e24      	ldr	r6, [pc, #144]	; (829c0 <mw_dialog_file_chooser_message_function+0x3ec>)
   8292e:	68e0      	ldr	r0, [r4, #12]
   82930:	47b0      	blx	r6
   82932:	e6af      	b.n	82694 <mw_dialog_file_chooser_message_function+0xc0>
				mw_post_message(MW_DIALOG_FILE_CHOOSER_CANCEL_MESSAGE,
   82934:	2300      	movs	r3, #0
   82936:	69e2      	ldr	r2, [r4, #28]
   82938:	4619      	mov	r1, r3
   8293a:	9301      	str	r3, [sp, #4]
   8293c:	9300      	str	r3, [sp, #0]
   8293e:	2043      	movs	r0, #67	; 0x43
   82940:	4c23      	ldr	r4, [pc, #140]	; (829d0 <mw_dialog_file_chooser_message_function+0x3fc>)
   82942:	47a0      	blx	r4
   82944:	e692      	b.n	8266c <mw_dialog_file_chooser_message_function+0x98>
					mw_post_message(MW_LABEL_SET_LABEL_TEXT_MESSAGE,
   82946:	2701      	movs	r7, #1
   82948:	4823      	ldr	r0, [pc, #140]	; (829d8 <mw_dialog_file_chooser_message_function+0x404>)
   8294a:	6869      	ldr	r1, [r5, #4]
   8294c:	69a2      	ldr	r2, [r4, #24]
   8294e:	4d20      	ldr	r5, [pc, #128]	; (829d0 <mw_dialog_file_chooser_message_function+0x3fc>)
   82950:	e88d 0081 	stmia.w	sp, {r0, r7}
   82954:	202d      	movs	r0, #45	; 0x2d
   82956:	47a8      	blx	r5
   82958:	e7d2      	b.n	82900 <mw_dialog_file_chooser_message_function+0x32c>
					(void)mw_util_safe_strcpy(mw_dialog_file_chooser_data.label_choice_data.label,
   8295a:	4a1f      	ldr	r2, [pc, #124]	; (829d8 <mw_dialog_file_chooser_message_function+0x404>)
   8295c:	2128      	movs	r1, #40	; 0x28
   8295e:	4b1f      	ldr	r3, [pc, #124]	; (829dc <mw_dialog_file_chooser_message_function+0x408>)
   82960:	481f      	ldr	r0, [pc, #124]	; (829e0 <mw_dialog_file_chooser_message_function+0x40c>)
   82962:	4798      	blx	r3
					mw_paint_control(mw_dialog_file_chooser_data.label_choice_handle);
   82964:	4e16      	ldr	r6, [pc, #88]	; (829c0 <mw_dialog_file_chooser_message_function+0x3ec>)
   82966:	69a0      	ldr	r0, [r4, #24]
   82968:	47b0      	blx	r6
					mw_set_control_enabled(mw_dialog_file_chooser_data.button_ok_handle, false);
   8296a:	4641      	mov	r1, r8
   8296c:	6820      	ldr	r0, [r4, #0]
   8296e:	4b19      	ldr	r3, [pc, #100]	; (829d4 <mw_dialog_file_chooser_message_function+0x400>)
   82970:	4798      	blx	r3
					mw_paint_control(mw_dialog_file_chooser_data.button_ok_handle);
   82972:	6820      	ldr	r0, [r4, #0]
   82974:	47b0      	blx	r6
   82976:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   8297a:	443a      	add	r2, r7
   8297c:	e79f      	b.n	828be <mw_dialog_file_chooser_message_function+0x2ea>
				mw_post_message(MW_LABEL_SET_LABEL_TEXT_MESSAGE,
   8297e:	2001      	movs	r0, #1
   82980:	6869      	ldr	r1, [r5, #4]
   82982:	69a2      	ldr	r2, [r4, #24]
   82984:	463b      	mov	r3, r7
   82986:	9600      	str	r6, [sp, #0]
   82988:	9001      	str	r0, [sp, #4]
   8298a:	4d11      	ldr	r5, [pc, #68]	; (829d0 <mw_dialog_file_chooser_message_function+0x3fc>)
   8298c:	202d      	movs	r0, #45	; 0x2d
   8298e:	47a8      	blx	r5
				mw_paint_control(mw_dialog_file_chooser_data.label_choice_handle);
   82990:	4e0b      	ldr	r6, [pc, #44]	; (829c0 <mw_dialog_file_chooser_message_function+0x3ec>)
   82992:	69a0      	ldr	r0, [r4, #24]
   82994:	47b0      	blx	r6
			if (!mw_dialog_file_chooser_data.folders_only)
   82996:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   8299a:	2b00      	cmp	r3, #0
   8299c:	f47f af24 	bne.w	827e8 <mw_dialog_file_chooser_message_function+0x214>
   829a0:	e715      	b.n	827ce <mw_dialog_file_chooser_message_function+0x1fa>
				mw_set_control_enabled(mw_dialog_file_chooser_data.arrow_file_down_handle, false);
   829a2:	6920      	ldr	r0, [r4, #16]
   829a4:	2100      	movs	r1, #0
   829a6:	4d0b      	ldr	r5, [pc, #44]	; (829d4 <mw_dialog_file_chooser_message_function+0x400>)
   829a8:	47a8      	blx	r5
				mw_paint_control(mw_dialog_file_chooser_data.arrow_file_down_handle);
   829aa:	4e05      	ldr	r6, [pc, #20]	; (829c0 <mw_dialog_file_chooser_message_function+0x3ec>)
   829ac:	6920      	ldr	r0, [r4, #16]
   829ae:	47b0      	blx	r6
   829b0:	e72e      	b.n	82810 <mw_dialog_file_chooser_message_function+0x23c>
   829b2:	bf00      	nop
   829b4:	000a67bc 	.word	0x000a67bc
   829b8:	000a674c 	.word	0x000a674c
   829bc:	000a676c 	.word	0x000a676c
   829c0:	00090f71 	.word	0x00090f71
   829c4:	200713ac 	.word	0x200713ac
   829c8:	000a6498 	.word	0x000a6498
   829cc:	000824c9 	.word	0x000824c9
   829d0:	00091955 	.word	0x00091955
   829d4:	00090f11 	.word	0x00090f11
   829d8:	000a6a9c 	.word	0x000a6a9c
   829dc:	00096f31 	.word	0x00096f31
   829e0:	20071484 	.word	0x20071484
   829e4:	00096f85 	.word	0x00096f85

000829e8 <mw_create_window_dialog_file_chooser>:
		char *title,
		char *start_path,
		bool folders_only,
		bool large_size,
		mw_handle_t owner_window_handle)
{
   829e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   829ec:	b087      	sub	sp, #28
   829ee:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
   829f2:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
	mw_util_rect_t rect;
	uint8_t i;
	mw_handle_t temp_handle;

	/* check pointer parameters */
	if (title == NULL)
   829f6:	4617      	mov	r7, r2
   829f8:	2a00      	cmp	r2, #0
   829fa:	f000 80de 	beq.w	82bba <mw_create_window_dialog_file_chooser+0x1d2>
   829fe:	4681      	mov	r9, r0
   82a00:	468a      	mov	sl, r1
   82a02:	461e      	mov	r6, r3
		MW_ASSERT((bool)false, "Null pointer argument");
		return (MW_INVALID_HANDLE);
	}

	/* set width & height */
	if (large_size)
   82a04:	f1b8 0f00 	cmp.w	r8, #0
   82a08:	d144      	bne.n	82a94 <mw_create_window_dialog_file_chooser+0xac>
   82a0a:	2399      	movs	r3, #153	; 0x99
		rect.height = 232;
	}
	else
	{
		rect.width = 153;
		rect.height = 135;
   82a0c:	2187      	movs	r1, #135	; 0x87
		rect.width = 153;
   82a0e:	461a      	mov	r2, r3
	}

	/* check start position */
	if (x + rect.width > MW_ROOT_WIDTH || x < 0)
   82a10:	4897      	ldr	r0, [pc, #604]	; (82c70 <mw_create_window_dialog_file_chooser+0x288>)
   82a12:	eb09 0403 	add.w	r4, r9, r3
   82a16:	f8ad 1016 	strh.w	r1, [sp, #22]
   82a1a:	f8ad 2014 	strh.w	r2, [sp, #20]
   82a1e:	4780      	blx	r0
   82a20:	4284      	cmp	r4, r0
   82a22:	dc33      	bgt.n	82a8c <mw_create_window_dialog_file_chooser+0xa4>
   82a24:	f1b9 0f00 	cmp.w	r9, #0
   82a28:	db30      	blt.n	82a8c <mw_create_window_dialog_file_chooser+0xa4>
	{
		return (MW_INVALID_HANDLE);
	}
	if (y + rect.height > MW_ROOT_HEIGHT || y < 0)
   82a2a:	4b92      	ldr	r3, [pc, #584]	; (82c74 <mw_create_window_dialog_file_chooser+0x28c>)
   82a2c:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
   82a30:	4798      	blx	r3
   82a32:	4454      	add	r4, sl
   82a34:	4284      	cmp	r4, r0
   82a36:	dc29      	bgt.n	82a8c <mw_create_window_dialog_file_chooser+0xa4>
   82a38:	f1ba 0f00 	cmp.w	sl, #0
   82a3c:	db26      	blt.n	82a8c <mw_create_window_dialog_file_chooser+0xa4>
	{
		return (MW_INVALID_HANDLE);
	}

	/* check response window handle */
	if (!mw_is_window_handle_valid(owner_window_handle))
   82a3e:	9812      	ldr	r0, [sp, #72]	; 0x48
   82a40:	4b8d      	ldr	r3, [pc, #564]	; (82c78 <mw_create_window_dialog_file_chooser+0x290>)
   82a42:	4798      	blx	r3
   82a44:	b310      	cbz	r0, 82a8c <mw_create_window_dialog_file_chooser+0xa4>
	rect.y = y;

	/* save folders_only flag */
	mw_dialog_file_chooser_data.folders_only = folders_only;

	mw_dialog_file_chooser_data.file_chooser_dialog_window_handle = mw_add_window(&rect,
   82a46:	f1b8 0f00 	cmp.w	r8, #0
   82a4a:	f248 034b 	movw	r3, #32843	; 0x804b
   82a4e:	f04f 0b00 	mov.w	fp, #0
   82a52:	bf08      	it	eq
   82a54:	234b      	moveq	r3, #75	; 0x4b
	mw_dialog_file_chooser_data.large_size = large_size;
   82a56:	4c89      	ldr	r4, [pc, #548]	; (82c7c <mw_create_window_dialog_file_chooser+0x294>)
	mw_dialog_file_chooser_data.file_chooser_dialog_window_handle = mw_add_window(&rect,
   82a58:	4639      	mov	r1, r7
	mw_dialog_file_chooser_data.owner_window_handle = owner_window_handle;
   82a5a:	9f12      	ldr	r7, [sp, #72]	; 0x48
	mw_dialog_file_chooser_data.file_chooser_dialog_window_handle = mw_add_window(&rect,
   82a5c:	9302      	str	r3, [sp, #8]
   82a5e:	f8cd b00c 	str.w	fp, [sp, #12]
   82a62:	f8cd b004 	str.w	fp, [sp, #4]
   82a66:	f8cd b000 	str.w	fp, [sp]
   82a6a:	4b85      	ldr	r3, [pc, #532]	; (82c80 <mw_create_window_dialog_file_chooser+0x298>)
   82a6c:	4a85      	ldr	r2, [pc, #532]	; (82c84 <mw_create_window_dialog_file_chooser+0x29c>)
   82a6e:	a804      	add	r0, sp, #16
   82a70:	f8df c23c 	ldr.w	ip, [pc, #572]	; 82cb0 <mw_create_window_dialog_file_chooser+0x2c8>
	mw_dialog_file_chooser_data.large_size = large_size;
   82a74:	f884 8027 	strb.w	r8, [r4, #39]	; 0x27
	mw_dialog_file_chooser_data.owner_window_handle = owner_window_handle;
   82a78:	61e7      	str	r7, [r4, #28]
	mw_dialog_file_chooser_data.folders_only = folders_only;
   82a7a:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
	rect.x = x;
   82a7e:	f8ad 9010 	strh.w	r9, [sp, #16]
	rect.y = y;
   82a82:	f8ad a012 	strh.w	sl, [sp, #18]
	mw_dialog_file_chooser_data.file_chooser_dialog_window_handle = mw_add_window(&rect,
   82a86:	47e0      	blx	ip
   82a88:	6220      	str	r0, [r4, #32]
			MW_WINDOW_FLAG_HAS_BORDER | MW_WINDOW_FLAG_HAS_TITLE_BAR |
					MW_WINDOW_FLAG_IS_VISIBLE | MW_WINDOW_FLAG_IS_MODAL | (uint32_t)(large_size ? MW_WINDOW_FLAG_LARGE_SIZE : 0U),
			NULL);

	/* check if window could be created */
	if (mw_dialog_file_chooser_data.file_chooser_dialog_window_handle == MW_INVALID_HANDLE)
   82a8a:	b938      	cbnz	r0, 82a9c <mw_create_window_dialog_file_chooser+0xb4>
			mw_dialog_file_chooser_data.label_choice_handle == MW_INVALID_HANDLE)
	{
		/* remove all controls and window */
		mw_remove_window(mw_dialog_file_chooser_data.file_chooser_dialog_window_handle);

		return (MW_INVALID_HANDLE);
   82a8c:	2000      	movs	r0, #0
	/* this window needs painting; it is coming up at the front so paint only this one */
	mw_paint_window_frame(mw_dialog_file_chooser_data.file_chooser_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
	mw_paint_window_client(mw_dialog_file_chooser_data.file_chooser_dialog_window_handle);

	return (mw_dialog_file_chooser_data.file_chooser_dialog_window_handle);
}
   82a8e:	b007      	add	sp, #28
   82a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a94:	23dc      	movs	r3, #220	; 0xdc
		rect.height = 232;
   82a96:	21e8      	movs	r1, #232	; 0xe8
		rect.width = 220;
   82a98:	461a      	mov	r2, r3
   82a9a:	e7b9      	b.n	82a10 <mw_create_window_dialog_file_chooser+0x28>
	mw_dialog_file_chooser_data.arrow_down_file_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   82a9c:	21b4      	movs	r1, #180	; 0xb4
	mw_dialog_file_chooser_data.arrow_back_file_data.mw_ui_arrow_direction = MW_UI_ARROW_LEFT;
   82a9e:	f44f 7787 	mov.w	r7, #270	; 0x10e
	mw_dialog_file_chooser_data.list_box_file_data.line_enables = MW_ALL_ITEMS_ENABLED;
   82aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	mw_dialog_file_chooser_data.list_box_file_data.number_of_lines = 5U;
   82aa6:	f04f 0e05 	mov.w	lr, #5
	(void)mw_util_safe_strcpy(mw_dialog_file_chooser_data.button_ok_data.button_label,
   82aaa:	f504 7ab4 	add.w	sl, r4, #360	; 0x168
   82aae:	4a76      	ldr	r2, [pc, #472]	; (82c88 <mw_create_window_dialog_file_chooser+0x2a0>)
	mw_dialog_file_chooser_data.arrow_down_file_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   82ab0:	f8a4 1150 	strh.w	r1, [r4, #336]	; 0x150
	mw_dialog_file_chooser_data.arrow_back_file_data.mw_ui_arrow_direction = MW_UI_ARROW_LEFT;
   82ab4:	f8a4 715c 	strh.w	r7, [r4, #348]	; 0x15c
	(void)mw_util_safe_strcpy(mw_dialog_file_chooser_data.button_ok_data.button_label,
   82ab8:	210a      	movs	r1, #10
   82aba:	4f74      	ldr	r7, [pc, #464]	; (82c8c <mw_create_window_dialog_file_chooser+0x2a4>)
   82abc:	4650      	mov	r0, sl
	mw_dialog_file_chooser_data.list_box_file_data.line_enables = MW_ALL_ITEMS_ENABLED;
   82abe:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	mw_dialog_file_chooser_data.list_box_file_data.number_of_lines = 5U;
   82ac2:	f884 e12c 	strb.w	lr, [r4, #300]	; 0x12c
	mw_dialog_file_chooser_data.arrow_up_file_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   82ac6:	f8a4 b144 	strh.w	fp, [r4, #324]	; 0x144
	mw_dialog_file_chooser_data.list_box_file_data.number_of_items = 0U;
   82aca:	f884 b12d 	strb.w	fp, [r4, #301]	; 0x12d
	mw_dialog_file_chooser_data.list_box_file_data.list_box_entries = NULL;
   82ace:	f8c4 b130 	str.w	fp, [r4, #304]	; 0x130
	(void)mw_util_safe_strcpy(mw_dialog_file_chooser_data.button_ok_data.button_label,
   82ad2:	47b8      	blx	r7
	(void)mw_util_safe_strcpy(mw_dialog_file_chooser_data.button_cancel_data.button_label,
   82ad4:	f504 70ba 	add.w	r0, r4, #372	; 0x174
   82ad8:	4a6d      	ldr	r2, [pc, #436]	; (82c90 <mw_create_window_dialog_file_chooser+0x2a8>)
   82ada:	210a      	movs	r1, #10
   82adc:	47b8      	blx	r7
	if (mw_dialog_file_chooser_data.folders_only)
   82ade:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   82ae2:	2b00      	cmp	r3, #0
   82ae4:	f000 80bd 	beq.w	82c62 <mw_create_window_dialog_file_chooser+0x27a>
				app_get_root_folder_path());
   82ae8:	4b6a      	ldr	r3, [pc, #424]	; (82c94 <mw_create_window_dialog_file_chooser+0x2ac>)
   82aea:	4798      	blx	r3
		(void)mw_util_safe_strcpy(mw_dialog_file_chooser_data.label_choice_data.label,
   82aec:	f504 79c0 	add.w	r9, r4, #384	; 0x180
   82af0:	4602      	mov	r2, r0
   82af2:	2128      	movs	r1, #40	; 0x28
   82af4:	4648      	mov	r0, r9
   82af6:	47b8      	blx	r7
		temp_handle = mw_ui_arrow_add_new(182,
   82af8:	6a22      	ldr	r2, [r4, #32]
	if (large_size)
   82afa:	f1b8 0f00 	cmp.w	r8, #0
   82afe:	d065      	beq.n	82bcc <mw_create_window_dialog_file_chooser+0x1e4>
		temp_handle = mw_ui_arrow_add_new(182,
   82b00:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 82cb4 <mw_create_window_dialog_file_chooser+0x2cc>
   82b04:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 82cb8 <mw_create_window_dialog_file_chooser+0x2d0>
   82b08:	f8cd 8000 	str.w	r8, [sp]
   82b0c:	2309      	movs	r3, #9
   82b0e:	2105      	movs	r1, #5
   82b10:	20b6      	movs	r0, #182	; 0xb6
   82b12:	47d8      	blx	fp
		temp_handle = mw_ui_arrow_add_new(182,
   82b14:	f108 030c 	add.w	r3, r8, #12
   82b18:	6a22      	ldr	r2, [r4, #32]
		mw_dialog_file_chooser_data.arrow_file_up_handle = temp_handle;
   82b1a:	60e0      	str	r0, [r4, #12]
		temp_handle = mw_ui_arrow_add_new(182,
   82b1c:	2170      	movs	r1, #112	; 0x70
   82b1e:	9300      	str	r3, [sp, #0]
   82b20:	20b6      	movs	r0, #182	; 0xb6
   82b22:	2309      	movs	r3, #9
   82b24:	47d8      	blx	fp
		temp_handle = mw_ui_arrow_add_new(182,
   82b26:	f108 0318 	add.w	r3, r8, #24
   82b2a:	6a22      	ldr	r2, [r4, #32]
		mw_dialog_file_chooser_data.arrow_file_down_handle = temp_handle;
   82b2c:	6120      	str	r0, [r4, #16]
		temp_handle = mw_ui_arrow_add_new(182,
   82b2e:	213a      	movs	r1, #58	; 0x3a
   82b30:	9300      	str	r3, [sp, #0]
   82b32:	20b6      	movs	r0, #182	; 0xb6
   82b34:	2309      	movs	r3, #9
   82b36:	47d8      	blx	fp
		temp_handle = mw_ui_list_box_add_new(5,
   82b38:	f04f 0b0b 	mov.w	fp, #11
   82b3c:	2105      	movs	r1, #5
   82b3e:	f1a8 0218 	sub.w	r2, r8, #24
   82b42:	6a23      	ldr	r3, [r4, #32]
		mw_dialog_file_chooser_data.arrow_file_back_handle = temp_handle;
   82b44:	6160      	str	r0, [r4, #20]
		temp_handle = mw_ui_list_box_add_new(5,
   82b46:	f8df 8174 	ldr.w	r8, [pc, #372]	; 82cbc <mw_create_window_dialog_file_chooser+0x2d4>
   82b4a:	9201      	str	r2, [sp, #4]
   82b4c:	4608      	mov	r0, r1
   82b4e:	22aa      	movs	r2, #170	; 0xaa
   82b50:	f8cd b000 	str.w	fp, [sp]
   82b54:	47c0      	blx	r8
		temp_handle = mw_ui_button_add_new(5,
   82b56:	6a22      	ldr	r2, [r4, #32]
		mw_dialog_file_chooser_data.list_box_file_handle = temp_handle;
   82b58:	60a0      	str	r0, [r4, #8]
		temp_handle = mw_ui_button_add_new(5,
   82b5a:	f8df 8164 	ldr.w	r8, [pc, #356]	; 82cc0 <mw_create_window_dialog_file_chooser+0x2d8>
   82b5e:	465b      	mov	r3, fp
   82b60:	21af      	movs	r1, #175	; 0xaf
   82b62:	f8cd a000 	str.w	sl, [sp]
   82b66:	2005      	movs	r0, #5
   82b68:	47c0      	blx	r8
		temp_handle = mw_ui_button_add_new(112,
   82b6a:	4b4b      	ldr	r3, [pc, #300]	; (82c98 <mw_create_window_dialog_file_chooser+0x2b0>)
   82b6c:	6a22      	ldr	r2, [r4, #32]
		mw_dialog_file_chooser_data.button_ok_handle = temp_handle;
   82b6e:	6020      	str	r0, [r4, #0]
		temp_handle = mw_ui_button_add_new(112,
   82b70:	21af      	movs	r1, #175	; 0xaf
   82b72:	9300      	str	r3, [sp, #0]
   82b74:	2070      	movs	r0, #112	; 0x70
   82b76:	465b      	mov	r3, fp
   82b78:	47c0      	blx	r8
		temp_handle = mw_ui_label_add_new(5,
   82b7a:	6a23      	ldr	r3, [r4, #32]
		mw_dialog_file_chooser_data.button_cancel_handle = temp_handle;
   82b7c:	6060      	str	r0, [r4, #4]
		temp_handle = mw_ui_label_add_new(5,
   82b7e:	22d1      	movs	r2, #209	; 0xd1
   82b80:	f8cd b000 	str.w	fp, [sp]
   82b84:	f8cd 9004 	str.w	r9, [sp, #4]
   82b88:	2196      	movs	r1, #150	; 0x96
   82b8a:	2005      	movs	r0, #5
   82b8c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 82cc4 <mw_create_window_dialog_file_chooser+0x2dc>
   82b90:	47c0      	blx	r8
		mw_dialog_file_chooser_data.label_choice_handle = temp_handle;
   82b92:	61a0      	str	r0, [r4, #24]
	if (mw_dialog_file_chooser_data.arrow_file_up_handle == MW_INVALID_HANDLE ||
   82b94:	68e3      	ldr	r3, [r4, #12]
   82b96:	b163      	cbz	r3, 82bb2 <mw_create_window_dialog_file_chooser+0x1ca>
   82b98:	6923      	ldr	r3, [r4, #16]
   82b9a:	b153      	cbz	r3, 82bb2 <mw_create_window_dialog_file_chooser+0x1ca>
			mw_dialog_file_chooser_data.arrow_file_down_handle == MW_INVALID_HANDLE ||
   82b9c:	6963      	ldr	r3, [r4, #20]
   82b9e:	b143      	cbz	r3, 82bb2 <mw_create_window_dialog_file_chooser+0x1ca>
			mw_dialog_file_chooser_data.arrow_file_back_handle == MW_INVALID_HANDLE ||
   82ba0:	68a3      	ldr	r3, [r4, #8]
   82ba2:	b133      	cbz	r3, 82bb2 <mw_create_window_dialog_file_chooser+0x1ca>
			mw_dialog_file_chooser_data.list_box_file_handle == MW_INVALID_HANDLE ||
   82ba4:	6823      	ldr	r3, [r4, #0]
   82ba6:	b123      	cbz	r3, 82bb2 <mw_create_window_dialog_file_chooser+0x1ca>
			mw_dialog_file_chooser_data.button_ok_handle == MW_INVALID_HANDLE ||
   82ba8:	6863      	ldr	r3, [r4, #4]
   82baa:	b113      	cbz	r3, 82bb2 <mw_create_window_dialog_file_chooser+0x1ca>
			mw_dialog_file_chooser_data.button_cancel_handle == MW_INVALID_HANDLE ||
   82bac:	2800      	cmp	r0, #0
   82bae:	f040 808b 	bne.w	82cc8 <mw_create_window_dialog_file_chooser+0x2e0>
		mw_remove_window(mw_dialog_file_chooser_data.file_chooser_dialog_window_handle);
   82bb2:	6a20      	ldr	r0, [r4, #32]
   82bb4:	4b39      	ldr	r3, [pc, #228]	; (82c9c <mw_create_window_dialog_file_chooser+0x2b4>)
   82bb6:	4798      	blx	r3
   82bb8:	e768      	b.n	82a8c <mw_create_window_dialog_file_chooser+0xa4>
		MW_ASSERT((bool)false, "Null pointer argument");
   82bba:	4638      	mov	r0, r7
   82bbc:	4b38      	ldr	r3, [pc, #224]	; (82ca0 <mw_create_window_dialog_file_chooser+0x2b8>)
   82bbe:	f240 12df 	movw	r2, #479	; 0x1df
   82bc2:	4938      	ldr	r1, [pc, #224]	; (82ca4 <mw_create_window_dialog_file_chooser+0x2bc>)
   82bc4:	4c38      	ldr	r4, [pc, #224]	; (82ca8 <mw_create_window_dialog_file_chooser+0x2c0>)
   82bc6:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   82bc8:	4638      	mov	r0, r7
   82bca:	e760      	b.n	82a8e <mw_create_window_dialog_file_chooser+0xa6>
		temp_handle = mw_ui_arrow_add_new(130,
   82bcc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 82cb4 <mw_create_window_dialog_file_chooser+0x2cc>
   82bd0:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 82cb8 <mw_create_window_dialog_file_chooser+0x2d0>
   82bd4:	f8cd 8000 	str.w	r8, [sp]
   82bd8:	2301      	movs	r3, #1
   82bda:	2105      	movs	r1, #5
   82bdc:	2082      	movs	r0, #130	; 0x82
   82bde:	47d8      	blx	fp
		temp_handle = mw_ui_arrow_add_new(130,
   82be0:	f108 030c 	add.w	r3, r8, #12
   82be4:	6a22      	ldr	r2, [r4, #32]
		mw_dialog_file_chooser_data.arrow_file_up_handle = temp_handle;
   82be6:	60e0      	str	r0, [r4, #12]
		temp_handle = mw_ui_arrow_add_new(130,
   82be8:	213b      	movs	r1, #59	; 0x3b
   82bea:	9300      	str	r3, [sp, #0]
   82bec:	2082      	movs	r0, #130	; 0x82
   82bee:	2301      	movs	r3, #1
   82bf0:	47d8      	blx	fp
		temp_handle = mw_ui_arrow_add_new(130,
   82bf2:	f108 0318 	add.w	r3, r8, #24
   82bf6:	6a22      	ldr	r2, [r4, #32]
		mw_dialog_file_chooser_data.arrow_file_down_handle = temp_handle;
   82bf8:	6120      	str	r0, [r4, #16]
		temp_handle = mw_ui_arrow_add_new(130,
   82bfa:	211f      	movs	r1, #31
   82bfc:	9300      	str	r3, [sp, #0]
   82bfe:	2082      	movs	r0, #130	; 0x82
   82c00:	2301      	movs	r3, #1
   82c02:	47d8      	blx	fp
		temp_handle = mw_ui_list_box_add_new(5,
   82c04:	f04f 0b03 	mov.w	fp, #3
   82c08:	2105      	movs	r1, #5
   82c0a:	f1a8 0218 	sub.w	r2, r8, #24
   82c0e:	6a23      	ldr	r3, [r4, #32]
		mw_dialog_file_chooser_data.arrow_file_back_handle = temp_handle;
   82c10:	6160      	str	r0, [r4, #20]
		temp_handle = mw_ui_list_box_add_new(5,
   82c12:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 82cbc <mw_create_window_dialog_file_chooser+0x2d4>
   82c16:	9201      	str	r2, [sp, #4]
   82c18:	4608      	mov	r0, r1
   82c1a:	2278      	movs	r2, #120	; 0x78
   82c1c:	f8cd b000 	str.w	fp, [sp]
   82c20:	47c0      	blx	r8
		temp_handle = mw_ui_button_add_new(5,
   82c22:	6a22      	ldr	r2, [r4, #32]
		mw_dialog_file_chooser_data.list_box_file_handle = temp_handle;
   82c24:	60a0      	str	r0, [r4, #8]
		temp_handle = mw_ui_button_add_new(5,
   82c26:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82cc0 <mw_create_window_dialog_file_chooser+0x2d8>
   82c2a:	2301      	movs	r3, #1
   82c2c:	2161      	movs	r1, #97	; 0x61
   82c2e:	f8cd a000 	str.w	sl, [sp]
   82c32:	2005      	movs	r0, #5
   82c34:	47c0      	blx	r8
		temp_handle = mw_ui_button_add_new(95,
   82c36:	4b18      	ldr	r3, [pc, #96]	; (82c98 <mw_create_window_dialog_file_chooser+0x2b0>)
   82c38:	6a22      	ldr	r2, [r4, #32]
		mw_dialog_file_chooser_data.button_ok_handle = temp_handle;
   82c3a:	6020      	str	r0, [r4, #0]
		temp_handle = mw_ui_button_add_new(95,
   82c3c:	2161      	movs	r1, #97	; 0x61
   82c3e:	9300      	str	r3, [sp, #0]
   82c40:	205f      	movs	r0, #95	; 0x5f
   82c42:	465b      	mov	r3, fp
   82c44:	47c0      	blx	r8
		temp_handle = mw_ui_label_add_new(5,
   82c46:	6a23      	ldr	r3, [r4, #32]
		mw_dialog_file_chooser_data.button_cancel_handle = temp_handle;
   82c48:	6060      	str	r0, [r4, #4]
		temp_handle = mw_ui_label_add_new(5,
   82c4a:	228e      	movs	r2, #142	; 0x8e
   82c4c:	f8cd b000 	str.w	fp, [sp]
   82c50:	f8cd 9004 	str.w	r9, [sp, #4]
   82c54:	2150      	movs	r1, #80	; 0x50
   82c56:	2005      	movs	r0, #5
   82c58:	f8df 8068 	ldr.w	r8, [pc, #104]	; 82cc4 <mw_create_window_dialog_file_chooser+0x2dc>
   82c5c:	47c0      	blx	r8
		mw_dialog_file_chooser_data.label_choice_handle = temp_handle;
   82c5e:	61a0      	str	r0, [r4, #24]
   82c60:	e798      	b.n	82b94 <mw_create_window_dialog_file_chooser+0x1ac>
		(void)mw_util_safe_strcpy(mw_dialog_file_chooser_data.label_choice_data.label,
   82c62:	f504 79c0 	add.w	r9, r4, #384	; 0x180
   82c66:	4648      	mov	r0, r9
   82c68:	4a10      	ldr	r2, [pc, #64]	; (82cac <mw_create_window_dialog_file_chooser+0x2c4>)
   82c6a:	2128      	movs	r1, #40	; 0x28
   82c6c:	47b8      	blx	r7
   82c6e:	e743      	b.n	82af8 <mw_create_window_dialog_file_chooser+0x110>
   82c70:	00086e2d 	.word	0x00086e2d
   82c74:	00086e31 	.word	0x00086e31
   82c78:	0008dfd9 	.word	0x0008dfd9
   82c7c:	20071304 	.word	0x20071304
   82c80:	000825d5 	.word	0x000825d5
   82c84:	00082555 	.word	0x00082555
   82c88:	000a6554 	.word	0x000a6554
   82c8c:	00096f31 	.word	0x00096f31
   82c90:	000a69d4 	.word	0x000a69d4
   82c94:	00099bb5 	.word	0x00099bb5
   82c98:	20071478 	.word	0x20071478
   82c9c:	000911c9 	.word	0x000911c9
   82ca0:	000a6618 	.word	0x000a6618
   82ca4:	000a6a74 	.word	0x000a6a74
   82ca8:	00095add 	.word	0x00095add
   82cac:	000a6a9c 	.word	0x000a6a9c
   82cb0:	0008e94d 	.word	0x0008e94d
   82cb4:	20071448 	.word	0x20071448
   82cb8:	00097679 	.word	0x00097679
   82cbc:	00098a61 	.word	0x00098a61
   82cc0:	00097985 	.word	0x00097985
   82cc4:	00098371 	.word	0x00098371
	mw_dialog_file_chooser_data.lines_to_scroll = 0U;
   82cc8:	f04f 0800 	mov.w	r8, #0
	(void)mw_util_safe_strcpy(mw_dialog_file_chooser_data.folder_path,
   82ccc:	4632      	mov	r2, r6
   82cce:	2180      	movs	r1, #128	; 0x80
   82cd0:	4835      	ldr	r0, [pc, #212]	; (82da8 <mw_create_window_dialog_file_chooser+0x3c0>)
	mw_dialog_file_chooser_data.lines_to_scroll = 0U;
   82cd2:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
	(void)mw_util_safe_strcpy(mw_dialog_file_chooser_data.folder_path,
   82cd6:	47b8      	blx	r7
		mw_dialog_file_chooser_data.file_entries[i].label = file_entries_label[i];
   82cd8:	4b34      	ldr	r3, [pc, #208]	; (82dac <mw_create_window_dialog_file_chooser+0x3c4>)
	mw_dialog_file_chooser_data.list_box_file_data.list_box_entries = mw_dialog_file_chooser_data.file_entries;
   82cda:	4a35      	ldr	r2, [pc, #212]	; (82db0 <mw_create_window_dialog_file_chooser+0x3c8>)
		mw_dialog_file_chooser_data.file_entries[i].label = file_entries_label[i];
   82cdc:	f103 000d 	add.w	r0, r3, #13
   82ce0:	f103 011a 	add.w	r1, r3, #26
   82ce4:	f103 0727 	add.w	r7, r3, #39	; 0x27
   82ce8:	f103 0634 	add.w	r6, r3, #52	; 0x34
   82cec:	6320      	str	r0, [r4, #48]	; 0x30
   82cee:	63a1      	str	r1, [r4, #56]	; 0x38
   82cf0:	f103 0041 	add.w	r0, r3, #65	; 0x41
   82cf4:	f103 014e 	add.w	r1, r3, #78	; 0x4e
   82cf8:	6427      	str	r7, [r4, #64]	; 0x40
   82cfa:	64a6      	str	r6, [r4, #72]	; 0x48
   82cfc:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   82d00:	f103 0668 	add.w	r6, r3, #104	; 0x68
   82d04:	6520      	str	r0, [r4, #80]	; 0x50
   82d06:	65a1      	str	r1, [r4, #88]	; 0x58
   82d08:	f103 0075 	add.w	r0, r3, #117	; 0x75
   82d0c:	f103 0182 	add.w	r1, r3, #130	; 0x82
   82d10:	62a3      	str	r3, [r4, #40]	; 0x28
   82d12:	6627      	str	r7, [r4, #96]	; 0x60
   82d14:	66a6      	str	r6, [r4, #104]	; 0x68
   82d16:	f103 078f 	add.w	r7, r3, #143	; 0x8f
   82d1a:	f103 069c 	add.w	r6, r3, #156	; 0x9c
   82d1e:	6720      	str	r0, [r4, #112]	; 0x70
   82d20:	67a1      	str	r1, [r4, #120]	; 0x78
   82d22:	f103 00a9 	add.w	r0, r3, #169	; 0xa9
   82d26:	f103 01b6 	add.w	r1, r3, #182	; 0xb6
   82d2a:	33c3      	adds	r3, #195	; 0xc3
		mw_dialog_file_chooser_data.file_entries[i].icon = NULL;
   82d2c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   82d30:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   82d34:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
   82d38:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
   82d3c:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
   82d40:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
   82d44:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
   82d48:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
   82d4c:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
   82d50:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
   82d54:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
   82d58:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
   82d5c:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   82d60:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   82d64:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   82d68:	f8c4 80a4 	str.w	r8, [r4, #164]	; 0xa4
		mw_dialog_file_chooser_data.file_entries[i].label = file_entries_label[i];
   82d6c:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
   82d70:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   82d74:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   82d78:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
   82d7c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	mw_dialog_file_chooser_data.list_box_file_data.list_box_entries = mw_dialog_file_chooser_data.file_entries;
   82d80:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	if (folders_only)
   82d84:	b11d      	cbz	r5, 82d8e <mw_create_window_dialog_file_chooser+0x3a6>
		mw_set_control_enabled(mw_dialog_file_chooser_data.button_ok_handle, true);
   82d86:	2101      	movs	r1, #1
   82d88:	6820      	ldr	r0, [r4, #0]
   82d8a:	4b0a      	ldr	r3, [pc, #40]	; (82db4 <mw_create_window_dialog_file_chooser+0x3cc>)
   82d8c:	4798      	blx	r3
	mw_paint_window_frame(owner_window_handle, MW_WINDOW_FRAME_COMPONENT_TITLE_BAR);
   82d8e:	2101      	movs	r1, #1
   82d90:	9812      	ldr	r0, [sp, #72]	; 0x48
   82d92:	4d09      	ldr	r5, [pc, #36]	; (82db8 <mw_create_window_dialog_file_chooser+0x3d0>)
   82d94:	47a8      	blx	r5
	mw_paint_window_frame(mw_dialog_file_chooser_data.file_chooser_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   82d96:	211f      	movs	r1, #31
   82d98:	6a20      	ldr	r0, [r4, #32]
   82d9a:	47a8      	blx	r5
	mw_paint_window_client(mw_dialog_file_chooser_data.file_chooser_dialog_window_handle);
   82d9c:	6a20      	ldr	r0, [r4, #32]
   82d9e:	4b07      	ldr	r3, [pc, #28]	; (82dbc <mw_create_window_dialog_file_chooser+0x3d4>)
   82da0:	4798      	blx	r3
	return (mw_dialog_file_chooser_data.file_chooser_dialog_window_handle);
   82da2:	6a20      	ldr	r0, [r4, #32]
   82da4:	e673      	b.n	82a8e <mw_create_window_dialog_file_chooser+0xa6>
   82da6:	bf00      	nop
   82da8:	200713ac 	.word	0x200713ac
   82dac:	20071234 	.word	0x20071234
   82db0:	2007132c 	.word	0x2007132c
   82db4:	00090f11 	.word	0x00090f11
   82db8:	00090281 	.word	0x00090281
   82dbc:	00090409 	.word	0x00090409

00082dc0 <mw_dialog_one_button_paint_function>:
 * @param draw_info Draw info structure describing offset and clip region
 * @note Do not call this directly from user code
 */
static void mw_dialog_one_button_paint_function(mw_handle_t window_handle, const mw_gl_draw_info_t *draw_info)
{
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   82dc0:	1c0b      	adds	r3, r1, #0
   82dc2:	bf18      	it	ne
   82dc4:	2301      	movne	r3, #1
{
   82dc6:	b570      	push	{r4, r5, r6, lr}
   82dc8:	4606      	mov	r6, r0
   82dca:	b086      	sub	sp, #24
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   82dcc:	2255      	movs	r2, #85	; 0x55
   82dce:	4618      	mov	r0, r3
   82dd0:	460c      	mov	r4, r1
   82dd2:	4b1d      	ldr	r3, [pc, #116]	; (82e48 <mw_dialog_one_button_paint_function+0x88>)
   82dd4:	491d      	ldr	r1, [pc, #116]	; (82e4c <mw_dialog_one_button_paint_function+0x8c>)
   82dd6:	4d1e      	ldr	r5, [pc, #120]	; (82e50 <mw_dialog_one_button_paint_function+0x90>)
   82dd8:	47a8      	blx	r5

	mw_gl_set_fill(MW_GL_FILL);
   82dda:	2001      	movs	r0, #1
   82ddc:	4b1d      	ldr	r3, [pc, #116]	; (82e54 <mw_dialog_one_button_paint_function+0x94>)
   82dde:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_WHITE);
   82de0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   82de4:	4b1c      	ldr	r3, [pc, #112]	; (82e58 <mw_dialog_one_button_paint_function+0x98>)
   82de6:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   82de8:	2000      	movs	r0, #0
   82dea:	4b1c      	ldr	r3, [pc, #112]	; (82e5c <mw_dialog_one_button_paint_function+0x9c>)
   82dec:	4798      	blx	r3
	mw_gl_clear_pattern();
   82dee:	4b1c      	ldr	r3, [pc, #112]	; (82e60 <mw_dialog_one_button_paint_function+0xa0>)
   82df0:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
			0,
			0,
			mw_get_window_client_rect(window_handle).width,
   82df2:	4d1c      	ldr	r5, [pc, #112]	; (82e64 <mw_dialog_one_button_paint_function+0xa4>)
   82df4:	4631      	mov	r1, r6
   82df6:	a802      	add	r0, sp, #8
   82df8:	47a8      	blx	r5
			mw_get_window_client_rect(window_handle).height);
   82dfa:	4631      	mov	r1, r6
   82dfc:	a804      	add	r0, sp, #16
	mw_gl_rectangle(draw_info,
   82dfe:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
			mw_get_window_client_rect(window_handle).height);
   82e02:	47a8      	blx	r5
	mw_gl_rectangle(draw_info,
   82e04:	2200      	movs	r2, #0
   82e06:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
   82e0a:	4611      	mov	r1, r2
   82e0c:	4633      	mov	r3, r6
   82e0e:	4620      	mov	r0, r4
   82e10:	9500      	str	r5, [sp, #0]
   82e12:	4d15      	ldr	r5, [pc, #84]	; (82e68 <mw_dialog_one_button_paint_function+0xa8>)
   82e14:	47a8      	blx	r5

	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   82e16:	2000      	movs	r0, #0
   82e18:	4b14      	ldr	r3, [pc, #80]	; (82e6c <mw_dialog_one_button_paint_function+0xac>)
   82e1a:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);

	if (mw_dialog_one_button_data.large_size)
   82e1c:	4d14      	ldr	r5, [pc, #80]	; (82e70 <mw_dialog_one_button_paint_function+0xb0>)
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   82e1e:	2000      	movs	r0, #0
   82e20:	4b14      	ldr	r3, [pc, #80]	; (82e74 <mw_dialog_one_button_paint_function+0xb4>)
   82e22:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   82e24:	2000      	movs	r0, #0
   82e26:	4b14      	ldr	r3, [pc, #80]	; (82e78 <mw_dialog_one_button_paint_function+0xb8>)
   82e28:	4798      	blx	r3
	if (mw_dialog_one_button_data.large_size)
   82e2a:	7f28      	ldrb	r0, [r5, #28]
   82e2c:	b100      	cbz	r0, 82e30 <mw_dialog_one_button_paint_function+0x70>
	{
		mw_gl_set_font(MW_GL_TITLE_FONT);
   82e2e:	2005      	movs	r0, #5
		mw_gl_string(draw_info, 12, 10, mw_dialog_one_button_data.message);
	}
	else
	{
		mw_gl_set_font(MW_GL_FONT_9);
   82e30:	4b12      	ldr	r3, [pc, #72]	; (82e7c <mw_dialog_one_button_paint_function+0xbc>)
   82e32:	4798      	blx	r3
		mw_gl_string(draw_info, 12, 10, mw_dialog_one_button_data.message);
   82e34:	4620      	mov	r0, r4
   82e36:	4c12      	ldr	r4, [pc, #72]	; (82e80 <mw_dialog_one_button_paint_function+0xc0>)
   82e38:	220a      	movs	r2, #10
   82e3a:	210c      	movs	r1, #12
   82e3c:	46a4      	mov	ip, r4
   82e3e:	68eb      	ldr	r3, [r5, #12]
	}
}
   82e40:	b006      	add	sp, #24
   82e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		mw_gl_string(draw_info, 12, 10, mw_dialog_one_button_data.message);
   82e46:	4760      	bx	ip
   82e48:	000a6618 	.word	0x000a6618
   82e4c:	000a6aa4 	.word	0x000a6aa4
   82e50:	00095add 	.word	0x00095add
   82e54:	000846fd 	.word	0x000846fd
   82e58:	000846c9 	.word	0x000846c9
   82e5c:	000846f1 	.word	0x000846f1
   82e60:	000846e1 	.word	0x000846e1
   82e64:	00090735 	.word	0x00090735
   82e68:	000850e1 	.word	0x000850e1
   82e6c:	000846b1 	.word	0x000846b1
   82e70:	200714b0 	.word	0x200714b0
   82e74:	00084709 	.word	0x00084709
   82e78:	00084745 	.word	0x00084745
   82e7c:	00084715 	.word	0x00084715
   82e80:	00085f1d 	.word	0x00085f1d

00082e84 <mw_dialog_one_button_message_function>:
 *
 * @param message The message to be processed
 * @note Do not call this directly from user code
 */
static void mw_dialog_one_button_message_function(const mw_message_t *message)
{
   82e84:	b530      	push	{r4, r5, lr}
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   82e86:	4604      	mov	r4, r0
   82e88:	3000      	adds	r0, #0
   82e8a:	4b0d      	ldr	r3, [pc, #52]	; (82ec0 <mw_dialog_one_button_message_function+0x3c>)
   82e8c:	bf18      	it	ne
   82e8e:	2001      	movne	r0, #1
{
   82e90:	b083      	sub	sp, #12
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   82e92:	2279      	movs	r2, #121	; 0x79
   82e94:	490b      	ldr	r1, [pc, #44]	; (82ec4 <mw_dialog_one_button_message_function+0x40>)
   82e96:	4d0c      	ldr	r5, [pc, #48]	; (82ec8 <mw_dialog_one_button_message_function+0x44>)
   82e98:	47a8      	blx	r5

	switch (message->message_id)
   82e9a:	7a23      	ldrb	r3, [r4, #8]
   82e9c:	2b1a      	cmp	r3, #26
   82e9e:	d10d      	bne.n	82ebc <mw_dialog_one_button_message_function+0x38>
	{
	case MW_BUTTON_PRESSED_MESSAGE:
		/* remove all controls and window */
		mw_remove_window(mw_dialog_one_button_data.one_button_dialog_window_handle);
   82ea0:	4c0a      	ldr	r4, [pc, #40]	; (82ecc <mw_dialog_one_button_message_function+0x48>)
   82ea2:	4b0b      	ldr	r3, [pc, #44]	; (82ed0 <mw_dialog_one_button_message_function+0x4c>)
   82ea4:	68a0      	ldr	r0, [r4, #8]
   82ea6:	4798      	blx	r3

		/* a window has changed visibility so repaint all */
		mw_paint_all();
   82ea8:	4b0a      	ldr	r3, [pc, #40]	; (82ed4 <mw_dialog_one_button_message_function+0x50>)
   82eaa:	4798      	blx	r3

		/* post response to receiving window */
		mw_post_message(MW_DIALOG_ONE_BUTTON_DISMISSED_MESSAGE,
   82eac:	2300      	movs	r3, #0
   82eae:	6862      	ldr	r2, [r4, #4]
   82eb0:	4619      	mov	r1, r3
   82eb2:	9301      	str	r3, [sp, #4]
   82eb4:	9300      	str	r3, [sp, #0]
   82eb6:	203b      	movs	r0, #59	; 0x3b
   82eb8:	4c07      	ldr	r4, [pc, #28]	; (82ed8 <mw_dialog_one_button_message_function+0x54>)
   82eba:	47a0      	blx	r4

	default:
		/* keep MISRA happy */
		break;
	}
}
   82ebc:	b003      	add	sp, #12
   82ebe:	bd30      	pop	{r4, r5, pc}
   82ec0:	000a6618 	.word	0x000a6618
   82ec4:	000a6ac8 	.word	0x000a6ac8
   82ec8:	00095add 	.word	0x00095add
   82ecc:	200714b0 	.word	0x200714b0
   82ed0:	000911c9 	.word	0x000911c9
   82ed4:	00095ab1 	.word	0x00095ab1
   82ed8:	00091955 	.word	0x00091955

00082edc <mw_create_window_dialog_one_button>:
		const char *title,
		const char *message,
		const char *button_label,
		bool large_size,
		mw_handle_t owner_window_handle)
{
   82edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82ee0:	b088      	sub	sp, #32
   82ee2:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
	mw_util_rect_t rect;
	int16_t window_client_width;
	mw_handle_t temp_handle;

	/* check pointer parameters */
	if (title == NULL || message == NULL || button_label == NULL)
   82ee6:	b37b      	cbz	r3, 82f48 <mw_create_window_dialog_one_button+0x6c>
   82ee8:	461d      	mov	r5, r3
   82eea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82eec:	b363      	cbz	r3, 82f48 <mw_create_window_dialog_one_button+0x6c>
   82eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82ef0:	b353      	cbz	r3, 82f48 <mw_create_window_dialog_one_button+0x6c>
   82ef2:	4680      	mov	r8, r0
   82ef4:	4689      	mov	r9, r1
   82ef6:	4614      	mov	r4, r2
		MW_ASSERT((bool)false, "Null pointer argument");
		return (MW_INVALID_HANDLE);
	}

	/* check width */
	if (large_size)
   82ef8:	bb07      	cbnz	r7, 82f3c <mw_create_window_dialog_one_button+0x60>
		}
		rect.height = 95;
	}
	else
	{
		if (width < MW_UI_BUTTON_WIDTH + 2 * MW_BORDER_WIDTH)
   82efa:	2a33      	cmp	r2, #51	; 0x33
   82efc:	dd19      	ble.n	82f32 <mw_create_window_dialog_one_button+0x56>
		{
			return (MW_INVALID_HANDLE);
		}
		rect.height = 75;
   82efe:	234b      	movs	r3, #75	; 0x4b
   82f00:	f8ad 3016 	strh.w	r3, [sp, #22]
	}

	/* check start position */
	if (x + width > MW_ROOT_WIDTH || x < 0)
   82f04:	4b59      	ldr	r3, [pc, #356]	; (8306c <mw_create_window_dialog_one_button+0x190>)
   82f06:	4798      	blx	r3
   82f08:	eb08 0604 	add.w	r6, r8, r4
   82f0c:	4286      	cmp	r6, r0
   82f0e:	dc10      	bgt.n	82f32 <mw_create_window_dialog_one_button+0x56>
   82f10:	f1b8 0f00 	cmp.w	r8, #0
   82f14:	db0d      	blt.n	82f32 <mw_create_window_dialog_one_button+0x56>
	{
		return (MW_INVALID_HANDLE);
	}
	if (y + rect.height > MW_ROOT_HEIGHT || y < 0)
   82f16:	4b56      	ldr	r3, [pc, #344]	; (83070 <mw_create_window_dialog_one_button+0x194>)
   82f18:	f9bd 6016 	ldrsh.w	r6, [sp, #22]
   82f1c:	4798      	blx	r3
   82f1e:	444e      	add	r6, r9
   82f20:	4286      	cmp	r6, r0
   82f22:	dc06      	bgt.n	82f32 <mw_create_window_dialog_one_button+0x56>
   82f24:	f1b9 0f00 	cmp.w	r9, #0
   82f28:	db03      	blt.n	82f32 <mw_create_window_dialog_one_button+0x56>
	{
		return (MW_INVALID_HANDLE);
	}

	/* check no modal windows already showing */
	if (mw_is_any_window_modal())
   82f2a:	4b52      	ldr	r3, [pc, #328]	; (83074 <mw_create_window_dialog_one_button+0x198>)
   82f2c:	4798      	blx	r3
   82f2e:	4606      	mov	r6, r0
   82f30:	b1a8      	cbz	r0, 82f5e <mw_create_window_dialog_one_button+0x82>
			return (MW_INVALID_HANDLE);
   82f32:	2400      	movs	r4, #0
	/* this window needs painting; it is coming up at the front so paint only this one */
	mw_paint_window_frame(mw_dialog_one_button_data.one_button_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
	mw_paint_window_client(mw_dialog_one_button_data.one_button_dialog_window_handle);

	return (mw_dialog_one_button_data.one_button_dialog_window_handle);
}
   82f34:	4620      	mov	r0, r4
   82f36:	b008      	add	sp, #32
   82f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (width < MW_UI_BUTTON_LARGE_WIDTH + 2 * MW_BORDER_WIDTH)
   82f3c:	2a65      	cmp	r2, #101	; 0x65
   82f3e:	ddf8      	ble.n	82f32 <mw_create_window_dialog_one_button+0x56>
		rect.height = 95;
   82f40:	235f      	movs	r3, #95	; 0x5f
   82f42:	f8ad 3016 	strh.w	r3, [sp, #22]
   82f46:	e7dd      	b.n	82f04 <mw_create_window_dialog_one_button+0x28>
		MW_ASSERT((bool)false, "Null pointer argument");
   82f48:	4b4b      	ldr	r3, [pc, #300]	; (83078 <mw_create_window_dialog_one_button+0x19c>)
   82f4a:	22a7      	movs	r2, #167	; 0xa7
   82f4c:	494b      	ldr	r1, [pc, #300]	; (8307c <mw_create_window_dialog_one_button+0x1a0>)
   82f4e:	2000      	movs	r0, #0
   82f50:	4c4b      	ldr	r4, [pc, #300]	; (83080 <mw_create_window_dialog_one_button+0x1a4>)
   82f52:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   82f54:	2400      	movs	r4, #0
}
   82f56:	4620      	mov	r0, r4
   82f58:	b008      	add	sp, #32
   82f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!mw_is_window_handle_valid(owner_window_handle))
   82f5e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   82f60:	4b48      	ldr	r3, [pc, #288]	; (83084 <mw_create_window_dialog_one_button+0x1a8>)
   82f62:	4798      	blx	r3
   82f64:	2800      	cmp	r0, #0
   82f66:	d0e4      	beq.n	82f32 <mw_create_window_dialog_one_button+0x56>
	mw_dialog_one_button_data.large_size = large_size;
   82f68:	f8df a140 	ldr.w	sl, [pc, #320]	; 830ac <mw_create_window_dialog_one_button+0x1d0>
	mw_dialog_one_button_data.message = message;
   82f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	rect.x = x;
   82f6e:	f8ad 8010 	strh.w	r8, [sp, #16]
	mw_dialog_one_button_data.message = message;
   82f72:	f8ca 300c 	str.w	r3, [sl, #12]
	mw_dialog_one_button_data.owner_window_handle = owner_window_handle;
   82f76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	rect.y = y;
   82f78:	f8ad 9012 	strh.w	r9, [sp, #18]
	rect.width = width;
   82f7c:	f8ad 4014 	strh.w	r4, [sp, #20]
	mw_dialog_one_button_data.large_size = large_size;
   82f80:	f88a 701c 	strb.w	r7, [sl, #28]
	mw_dialog_one_button_data.owner_window_handle = owner_window_handle;
   82f84:	f8ca 3004 	str.w	r3, [sl, #4]
	mw_dialog_one_button_data.one_button_dialog_window_handle = mw_add_window(&rect,
   82f88:	2f00      	cmp	r7, #0
   82f8a:	d03d      	beq.n	83008 <mw_create_window_dialog_one_button+0x12c>
   82f8c:	f248 034b 	movw	r3, #32843	; 0x804b
   82f90:	9603      	str	r6, [sp, #12]
   82f92:	9302      	str	r3, [sp, #8]
   82f94:	9601      	str	r6, [sp, #4]
   82f96:	9600      	str	r6, [sp, #0]
   82f98:	4629      	mov	r1, r5
   82f9a:	4b3b      	ldr	r3, [pc, #236]	; (83088 <mw_create_window_dialog_one_button+0x1ac>)
   82f9c:	4a3b      	ldr	r2, [pc, #236]	; (8308c <mw_create_window_dialog_one_button+0x1b0>)
   82f9e:	a804      	add	r0, sp, #16
   82fa0:	4c3b      	ldr	r4, [pc, #236]	; (83090 <mw_create_window_dialog_one_button+0x1b4>)
   82fa2:	47a0      	blx	r4
   82fa4:	f8ca 0008 	str.w	r0, [sl, #8]
	if (mw_dialog_one_button_data.one_button_dialog_window_handle == MW_INVALID_HANDLE)
   82fa8:	2800      	cmp	r0, #0
   82faa:	d0c2      	beq.n	82f32 <mw_create_window_dialog_one_button+0x56>
	window_client_width = mw_get_window_client_rect(mw_dialog_one_button_data.one_button_dialog_window_handle).width;
   82fac:	4601      	mov	r1, r0
   82fae:	4b39      	ldr	r3, [pc, #228]	; (83094 <mw_create_window_dialog_one_button+0x1b8>)
   82fb0:	a806      	add	r0, sp, #24
   82fb2:	4798      	blx	r3
	(void)mw_util_safe_strcpy(mw_dialog_one_button_data.button_data.button_label,
   82fb4:	f10a 0510 	add.w	r5, sl, #16
	window_client_width = mw_get_window_client_rect(mw_dialog_one_button_data.one_button_dialog_window_handle).width;
   82fb8:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
	(void)mw_util_safe_strcpy(mw_dialog_one_button_data.button_data.button_label,
   82fbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82fbe:	210a      	movs	r1, #10
   82fc0:	4b35      	ldr	r3, [pc, #212]	; (83098 <mw_create_window_dialog_one_button+0x1bc>)
   82fc2:	4628      	mov	r0, r5
   82fc4:	4798      	blx	r3
				(window_client_width - MW_UI_BUTTON_LARGE_WIDTH) / 2,
   82fc6:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
   82fca:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
		temp_handle = mw_ui_button_add_new(
   82fce:	4c33      	ldr	r4, [pc, #204]	; (8309c <mw_create_window_dialog_one_button+0x1c0>)
   82fd0:	f8da 2008 	ldr.w	r2, [sl, #8]
   82fd4:	f340 004f 	sbfx	r0, r0, #1, #16
   82fd8:	9500      	str	r5, [sp, #0]
   82fda:	230b      	movs	r3, #11
   82fdc:	2123      	movs	r1, #35	; 0x23
   82fde:	47a0      	blx	r4
   82fe0:	4604      	mov	r4, r0
		mw_dialog_one_button_data.button_handle = temp_handle;
   82fe2:	f8ca 0000 	str.w	r0, [sl]
	if (mw_dialog_one_button_data.button_handle == MW_INVALID_HANDLE)
   82fe6:	2c00      	cmp	r4, #0
   82fe8:	d03b      	beq.n	83062 <mw_create_window_dialog_one_button+0x186>
	mw_paint_window_frame(owner_window_handle, MW_WINDOW_FRAME_COMPONENT_TITLE_BAR);
   82fea:	4c2d      	ldr	r4, [pc, #180]	; (830a0 <mw_create_window_dialog_one_button+0x1c4>)
   82fec:	2101      	movs	r1, #1
   82fee:	9813      	ldr	r0, [sp, #76]	; 0x4c
   82ff0:	47a0      	blx	r4
	mw_paint_window_frame(mw_dialog_one_button_data.one_button_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   82ff2:	211f      	movs	r1, #31
   82ff4:	f8da 0008 	ldr.w	r0, [sl, #8]
   82ff8:	47a0      	blx	r4
	mw_paint_window_client(mw_dialog_one_button_data.one_button_dialog_window_handle);
   82ffa:	f8da 0008 	ldr.w	r0, [sl, #8]
   82ffe:	4b29      	ldr	r3, [pc, #164]	; (830a4 <mw_create_window_dialog_one_button+0x1c8>)
   83000:	4798      	blx	r3
	return (mw_dialog_one_button_data.one_button_dialog_window_handle);
   83002:	f8da 4008 	ldr.w	r4, [sl, #8]
   83006:	e795      	b.n	82f34 <mw_create_window_dialog_one_button+0x58>
	mw_dialog_one_button_data.one_button_dialog_window_handle = mw_add_window(&rect,
   83008:	234b      	movs	r3, #75	; 0x4b
   8300a:	9703      	str	r7, [sp, #12]
   8300c:	9302      	str	r3, [sp, #8]
   8300e:	9701      	str	r7, [sp, #4]
   83010:	9700      	str	r7, [sp, #0]
   83012:	4629      	mov	r1, r5
   83014:	4b1c      	ldr	r3, [pc, #112]	; (83088 <mw_create_window_dialog_one_button+0x1ac>)
   83016:	4a1d      	ldr	r2, [pc, #116]	; (8308c <mw_create_window_dialog_one_button+0x1b0>)
   83018:	a804      	add	r0, sp, #16
   8301a:	4c1d      	ldr	r4, [pc, #116]	; (83090 <mw_create_window_dialog_one_button+0x1b4>)
   8301c:	47a0      	blx	r4
   8301e:	f8ca 0008 	str.w	r0, [sl, #8]
	if (mw_dialog_one_button_data.one_button_dialog_window_handle == MW_INVALID_HANDLE)
   83022:	2800      	cmp	r0, #0
   83024:	d085      	beq.n	82f32 <mw_create_window_dialog_one_button+0x56>
	window_client_width = mw_get_window_client_rect(mw_dialog_one_button_data.one_button_dialog_window_handle).width;
   83026:	4601      	mov	r1, r0
   83028:	4b1a      	ldr	r3, [pc, #104]	; (83094 <mw_create_window_dialog_one_button+0x1b8>)
   8302a:	a806      	add	r0, sp, #24
   8302c:	4798      	blx	r3
	(void)mw_util_safe_strcpy(mw_dialog_one_button_data.button_data.button_label,
   8302e:	f10a 0510 	add.w	r5, sl, #16
	window_client_width = mw_get_window_client_rect(mw_dialog_one_button_data.one_button_dialog_window_handle).width;
   83032:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
	(void)mw_util_safe_strcpy(mw_dialog_one_button_data.button_data.button_label,
   83036:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83038:	210a      	movs	r1, #10
   8303a:	4b17      	ldr	r3, [pc, #92]	; (83098 <mw_create_window_dialog_one_button+0x1bc>)
   8303c:	4628      	mov	r0, r5
   8303e:	4798      	blx	r3
				(window_client_width - MW_UI_BUTTON_WIDTH) / 2,
   83040:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
   83044:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
		temp_handle = mw_ui_button_add_new(
   83048:	4c14      	ldr	r4, [pc, #80]	; (8309c <mw_create_window_dialog_one_button+0x1c0>)
   8304a:	f8da 2008 	ldr.w	r2, [sl, #8]
   8304e:	f340 004f 	sbfx	r0, r0, #1, #16
   83052:	9500      	str	r5, [sp, #0]
   83054:	2303      	movs	r3, #3
   83056:	211e      	movs	r1, #30
   83058:	47a0      	blx	r4
   8305a:	4604      	mov	r4, r0
		mw_dialog_one_button_data.button_handle = temp_handle;
   8305c:	f8ca 0000 	str.w	r0, [sl]
   83060:	e7c1      	b.n	82fe6 <mw_create_window_dialog_one_button+0x10a>
		mw_remove_window(mw_dialog_one_button_data.one_button_dialog_window_handle);
   83062:	f8da 0008 	ldr.w	r0, [sl, #8]
   83066:	4b10      	ldr	r3, [pc, #64]	; (830a8 <mw_create_window_dialog_one_button+0x1cc>)
   83068:	4798      	blx	r3
		return (MW_INVALID_HANDLE);
   8306a:	e763      	b.n	82f34 <mw_create_window_dialog_one_button+0x58>
   8306c:	00086e2d 	.word	0x00086e2d
   83070:	00086e31 	.word	0x00086e31
   83074:	0008fefd 	.word	0x0008fefd
   83078:	000a6618 	.word	0x000a6618
   8307c:	000a6af0 	.word	0x000a6af0
   83080:	00095add 	.word	0x00095add
   83084:	0008dfd9 	.word	0x0008dfd9
   83088:	00082e85 	.word	0x00082e85
   8308c:	00082dc1 	.word	0x00082dc1
   83090:	0008e94d 	.word	0x0008e94d
   83094:	00090735 	.word	0x00090735
   83098:	00096f31 	.word	0x00096f31
   8309c:	00097985 	.word	0x00097985
   830a0:	00090281 	.word	0x00090281
   830a4:	00090409 	.word	0x00090409
   830a8:	000911c9 	.word	0x000911c9
   830ac:	200714b0 	.word	0x200714b0

000830b0 <mw_dialog_text_entry_message_function>:
 *
 * @param message The message to be processed
 * @note Do not call this directly from user code
 */
static void mw_dialog_text_entry_message_function(const mw_message_t *message)
{
   830b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t temp_uint32;

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   830b4:	4605      	mov	r5, r0
   830b6:	3000      	adds	r0, #0
   830b8:	4b8f      	ldr	r3, [pc, #572]	; (832f8 <mw_dialog_text_entry_message_function+0x248>)
{
   830ba:	b082      	sub	sp, #8
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   830bc:	bf18      	it	ne
   830be:	2001      	movne	r0, #1
   830c0:	22c8      	movs	r2, #200	; 0xc8
   830c2:	498e      	ldr	r1, [pc, #568]	; (832fc <mw_dialog_text_entry_message_function+0x24c>)
   830c4:	4c8e      	ldr	r4, [pc, #568]	; (83300 <mw_dialog_text_entry_message_function+0x250>)
   830c6:	47a0      	blx	r4

	switch (message->message_id)
   830c8:	7a2b      	ldrb	r3, [r5, #8]
   830ca:	2b24      	cmp	r3, #36	; 0x24
   830cc:	d83c      	bhi.n	83148 <mw_dialog_text_entry_message_function+0x98>
   830ce:	e8df f003 	tbb	[pc, r3]
   830d2:	3b13      	.short	0x3b13
   830d4:	3b3b3b3b 	.word	0x3b3b3b3b
   830d8:	3b3b3b3b 	.word	0x3b3b3b3b
   830dc:	3b3b3b3b 	.word	0x3b3b3b3b
   830e0:	3b3b3b3b 	.word	0x3b3b3b3b
   830e4:	3ba23b3b 	.word	0x3ba23b3b
   830e8:	753b3b3b 	.word	0x753b3b3b
   830ec:	3b3b3b8b 	.word	0x3b3b3b8b
   830f0:	3b3b3b3b 	.word	0x3b3b3b3b
   830f4:	3b3b      	.short	0x3b3b
   830f6:	3e          	.byte	0x3e
   830f7:	00          	.byte	0x00
	{
	case MW_WINDOW_CREATED_MESSAGE:
		(void)mw_set_timer(mw_tick_counter + MW_CURSOR_PERIOD_TICKS, message->recipient_handle, MW_WINDOW_MESSAGE);
   830f8:	4b82      	ldr	r3, [pc, #520]	; (83304 <mw_dialog_text_entry_message_function+0x254>)
		mw_dialog_text_entry_data.cursor_position = (int16_t)strlen(mw_dialog_text_entry_data.text_buffer);
   830fa:	4c83      	ldr	r4, [pc, #524]	; (83308 <mw_dialog_text_entry_message_function+0x258>)
		(void)mw_set_timer(mw_tick_counter + MW_CURSOR_PERIOD_TICKS, message->recipient_handle, MW_WINDOW_MESSAGE);
   830fc:	6818      	ldr	r0, [r3, #0]
   830fe:	6869      	ldr	r1, [r5, #4]
   83100:	2200      	movs	r2, #0
   83102:	4b82      	ldr	r3, [pc, #520]	; (8330c <mw_dialog_text_entry_message_function+0x25c>)
   83104:	300a      	adds	r0, #10
   83106:	4798      	blx	r3
		mw_dialog_text_entry_data.cursor_position = (int16_t)strlen(mw_dialog_text_entry_data.text_buffer);
   83108:	4b81      	ldr	r3, [pc, #516]	; (83310 <mw_dialog_text_entry_message_function+0x260>)
   8310a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8310e:	4798      	blx	r3

		/* set dialog size specific values */
		if (mw_dialog_text_entry_data.large_size)
   83110:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
		mw_dialog_text_entry_data.cursor_position = (int16_t)strlen(mw_dialog_text_entry_data.text_buffer);
   83114:	b205      	sxth	r5, r0
   83116:	f8a4 5070 	strh.w	r5, [r4, #112]	; 0x70
		if (mw_dialog_text_entry_data.large_size)
   8311a:	2b00      	cmp	r3, #0
   8311c:	f000 80aa 	beq.w	83274 <mw_dialog_text_entry_message_function+0x1c4>
		{
			mw_dialog_text_entry_data.cursor_rect.height = 22;
   83120:	2616      	movs	r6, #22
			mw_dialog_text_entry_data.character_pitch = TITLE_FONT_FIXED_CHARACTER_PITCH;
   83122:	230a      	movs	r3, #10
			(void)memcpy((&mw_dialog_text_entry_data.text_rect), (&text_display_rect_large), (sizeof(text_display_rect_large)));
   83124:	497b      	ldr	r1, [pc, #492]	; (83314 <mw_dialog_text_entry_message_function+0x264>)
   83126:	f104 0214 	add.w	r2, r4, #20
   8312a:	c903      	ldmia	r1, {r0, r1}
   8312c:	e882 0003 	stmia.w	r2, {r0, r1}
			mw_dialog_text_entry_data.cursor_rect.height = 22;
   83130:	8466      	strh	r6, [r4, #34]	; 0x22
			mw_dialog_text_entry_data.character_pitch = TITLE_FONT_FIXED_CHARACTER_PITCH;
   83132:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
			(void)memcpy((&mw_dialog_text_entry_data.text_rect), (&text_display_rect), (sizeof(text_display_rect)));
		}

		/* set cursor rect values */
		mw_dialog_text_entry_data.cursor_rect.x = get_cursor_x_coordinate();
		mw_dialog_text_entry_data.cursor_rect.y = 6;
   83136:	2006      	movs	r0, #6
		mw_dialog_text_entry_data.cursor_rect.width = 1;
   83138:	2101      	movs	r1, #1
	return (mw_dialog_text_entry_data.text_rect.x + 2 + mw_dialog_text_entry_data.cursor_position * mw_dialog_text_entry_data.character_pitch);
   8313a:	8aa2      	ldrh	r2, [r4, #20]
		mw_dialog_text_entry_data.cursor_rect.y = 6;
   8313c:	83e0      	strh	r0, [r4, #30]
	return (mw_dialog_text_entry_data.text_rect.x + 2 + mw_dialog_text_entry_data.cursor_position * mw_dialog_text_entry_data.character_pitch);
   8313e:	3202      	adds	r2, #2
   83140:	fb05 2303 	mla	r3, r5, r3, r2
		mw_dialog_text_entry_data.cursor_rect.width = 1;
   83144:	8421      	strh	r1, [r4, #32]
		mw_dialog_text_entry_data.cursor_rect.x = get_cursor_x_coordinate();
   83146:	83a3      	strh	r3, [r4, #28]

	default:
		/* keep MISRA happy */
		break;
	}
}
   83148:	b002      	add	sp, #8
   8314a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			current_length = (int16_t)strlen(mw_dialog_text_entry_data.text_buffer);
   8314e:	4c6e      	ldr	r4, [pc, #440]	; (83308 <mw_dialog_text_entry_message_function+0x258>)
   83150:	4b6f      	ldr	r3, [pc, #444]	; (83310 <mw_dialog_text_entry_message_function+0x260>)
   83152:	f104 0058 	add.w	r0, r4, #88	; 0x58
   83156:	4798      	blx	r3
			if (message->message_data == (uint32_t)'\b')
   83158:	68e9      	ldr	r1, [r5, #12]
			current_length = (int16_t)strlen(mw_dialog_text_entry_data.text_buffer);
   8315a:	b203      	sxth	r3, r0
			if (message->message_data == (uint32_t)'\b')
   8315c:	2908      	cmp	r1, #8
   8315e:	f000 809d 	beq.w	8329c <mw_dialog_text_entry_message_function+0x1ec>
				if (current_length < MW_DIALOG_MAX_TEXT_LENGTH)
   83162:	2b13      	cmp	r3, #19
   83164:	dc15      	bgt.n	83192 <mw_dialog_text_entry_message_function+0xe2>
					if (current_length == mw_dialog_text_entry_data.cursor_position)
   83166:	f9b4 2070 	ldrsh.w	r2, [r4, #112]	; 0x70
   8316a:	4293      	cmp	r3, r2
   8316c:	d078      	beq.n	83260 <mw_dialog_text_entry_message_function+0x1b0>
						source = &mw_dialog_text_entry_data.text_buffer[mw_dialog_text_entry_data.cursor_position];
   8316e:	f102 0158 	add.w	r1, r2, #88	; 0x58
						destination = &mw_dialog_text_entry_data.text_buffer[mw_dialog_text_entry_data.cursor_position + 1];
   83172:	f102 0059 	add.w	r0, r2, #89	; 0x59
						(void)memmove((destination), (source), ((size_t)current_length - (size_t)mw_dialog_text_entry_data.cursor_position));
   83176:	4421      	add	r1, r4
   83178:	1a9a      	subs	r2, r3, r2
   8317a:	4420      	add	r0, r4
   8317c:	4b66      	ldr	r3, [pc, #408]	; (83318 <mw_dialog_text_entry_message_function+0x268>)
   8317e:	4798      	blx	r3
						mw_dialog_text_entry_data.text_buffer[mw_dialog_text_entry_data.cursor_position] = (char)message->message_data;
   83180:	f9b4 3070 	ldrsh.w	r3, [r4, #112]	; 0x70
   83184:	68e9      	ldr	r1, [r5, #12]
   83186:	18e2      	adds	r2, r4, r3
						mw_dialog_text_entry_data.cursor_position++;
   83188:	3301      	adds	r3, #1
						mw_dialog_text_entry_data.text_buffer[mw_dialog_text_entry_data.cursor_position] = (char)message->message_data;
   8318a:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
						mw_dialog_text_entry_data.cursor_position++;
   8318e:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
			mw_set_control_enabled(mw_dialog_text_entry_data.button_ok_handle, strlen(mw_dialog_text_entry_data.text_buffer) > 0U);
   83192:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   83196:	6860      	ldr	r0, [r4, #4]
   83198:	3100      	adds	r1, #0
   8319a:	bf18      	it	ne
   8319c:	2101      	movne	r1, #1
   8319e:	4b5f      	ldr	r3, [pc, #380]	; (8331c <mw_dialog_text_entry_message_function+0x26c>)
   831a0:	4798      	blx	r3
			mw_paint_control(mw_dialog_text_entry_data.button_ok_handle);
   831a2:	4b5f      	ldr	r3, [pc, #380]	; (83320 <mw_dialog_text_entry_message_function+0x270>)
   831a4:	6860      	ldr	r0, [r4, #4]
   831a6:	4798      	blx	r3
	return (mw_dialog_text_entry_data.text_rect.x + 2 + mw_dialog_text_entry_data.cursor_position * mw_dialog_text_entry_data.character_pitch);
   831a8:	8aa2      	ldrh	r2, [r4, #20]
   831aa:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   831ae:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   831b2:	3202      	adds	r2, #2
   831b4:	fb01 2303 	mla	r3, r1, r3, r2
			mw_dialog_text_entry_data.cursor_rect.x = get_cursor_x_coordinate();
   831b8:	83a3      	strh	r3, [r4, #28]
   831ba:	e04a      	b.n	83252 <mw_dialog_text_entry_message_function+0x1a2>
		mw_dialog_text_entry_data.draw_cursor = !mw_dialog_text_entry_data.draw_cursor;
   831bc:	4b52      	ldr	r3, [pc, #328]	; (83308 <mw_dialog_text_entry_message_function+0x258>)
		mw_paint_window_client_rect(message->recipient_handle, &mw_dialog_text_entry_data.cursor_rect);
   831be:	4c59      	ldr	r4, [pc, #356]	; (83324 <mw_dialog_text_entry_message_function+0x274>)
		mw_dialog_text_entry_data.draw_cursor = !mw_dialog_text_entry_data.draw_cursor;
   831c0:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
		mw_paint_window_client_rect(message->recipient_handle, &mw_dialog_text_entry_data.cursor_rect);
   831c4:	f103 011c 	add.w	r1, r3, #28
		mw_dialog_text_entry_data.draw_cursor = !mw_dialog_text_entry_data.draw_cursor;
   831c8:	f082 0201 	eor.w	r2, r2, #1
   831cc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		mw_paint_window_client_rect(message->recipient_handle, &mw_dialog_text_entry_data.cursor_rect);
   831d0:	6868      	ldr	r0, [r5, #4]
   831d2:	47a0      	blx	r4
		(void)mw_set_timer(mw_tick_counter + MW_CURSOR_PERIOD_TICKS, message->recipient_handle, MW_WINDOW_MESSAGE);
   831d4:	2200      	movs	r2, #0
   831d6:	4b4b      	ldr	r3, [pc, #300]	; (83304 <mw_dialog_text_entry_message_function+0x254>)
   831d8:	6869      	ldr	r1, [r5, #4]
   831da:	6818      	ldr	r0, [r3, #0]
   831dc:	4b4b      	ldr	r3, [pc, #300]	; (8330c <mw_dialog_text_entry_message_function+0x25c>)
   831de:	300a      	adds	r0, #10
}
   831e0:	b002      	add	sp, #8
   831e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		(void)mw_set_timer(mw_tick_counter + MW_CURSOR_PERIOD_TICKS, message->recipient_handle, MW_WINDOW_MESSAGE);
   831e6:	4718      	bx	r3
		mw_remove_window(mw_dialog_text_entry_data.text_entry_dialog_window_handle);
   831e8:	4c47      	ldr	r4, [pc, #284]	; (83308 <mw_dialog_text_entry_message_function+0x258>)
   831ea:	4b4f      	ldr	r3, [pc, #316]	; (83328 <mw_dialog_text_entry_message_function+0x278>)
   831ec:	6920      	ldr	r0, [r4, #16]
   831ee:	4798      	blx	r3
		mw_paint_all();
   831f0:	4b4e      	ldr	r3, [pc, #312]	; (8332c <mw_dialog_text_entry_message_function+0x27c>)
   831f2:	4798      	blx	r3
		if (message->sender_handle == mw_dialog_text_entry_data.button_cancel_handle)
   831f4:	682a      	ldr	r2, [r5, #0]
   831f6:	68a3      	ldr	r3, [r4, #8]
   831f8:	429a      	cmp	r2, r3
			mw_post_message(MW_DIALOG_TEXT_ENTRY_CANCEL_MESSAGE,
   831fa:	f04f 0300 	mov.w	r3, #0
   831fe:	68e2      	ldr	r2, [r4, #12]
		if (message->sender_handle == mw_dialog_text_entry_data.button_cancel_handle)
   83200:	d05e      	beq.n	832c0 <mw_dialog_text_entry_message_function+0x210>
			mw_post_message(MW_DIALOG_TEXT_ENTRY_OK_MESSAGE,
   83202:	3458      	adds	r4, #88	; 0x58
   83204:	9400      	str	r4, [sp, #0]
   83206:	9301      	str	r3, [sp, #4]
   83208:	4619      	mov	r1, r3
   8320a:	2044      	movs	r0, #68	; 0x44
   8320c:	4c48      	ldr	r4, [pc, #288]	; (83330 <mw_dialog_text_entry_message_function+0x280>)
   8320e:	47a0      	blx	r4
}
   83210:	b002      	add	sp, #8
   83212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mw_dialog_text_entry_data.cursor_position = ((int16_t)temp_uint32 - mw_dialog_text_entry_data.text_rect.x) /
   83216:	4c3c      	ldr	r4, [pc, #240]	; (83308 <mw_dialog_text_entry_message_function+0x258>)
   83218:	f9b5 600e 	ldrsh.w	r6, [r5, #14]
   8321c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
				mw_dialog_text_entry_data.character_pitch;
   83220:	f9b4 7072 	ldrsh.w	r7, [r4, #114]	; 0x72
		mw_dialog_text_entry_data.cursor_position = ((int16_t)temp_uint32 - mw_dialog_text_entry_data.text_rect.x) /
   83224:	eba6 0608 	sub.w	r6, r6, r8
   83228:	fb96 f6f7 	sdiv	r6, r6, r7
		if (mw_dialog_text_entry_data.cursor_position > (int16_t)strlen(mw_dialog_text_entry_data.text_buffer))
   8322c:	f104 0058 	add.w	r0, r4, #88	; 0x58
		mw_dialog_text_entry_data.cursor_position = ((int16_t)temp_uint32 - mw_dialog_text_entry_data.text_rect.x) /
   83230:	b236      	sxth	r6, r6
		if (mw_dialog_text_entry_data.cursor_position > (int16_t)strlen(mw_dialog_text_entry_data.text_buffer))
   83232:	4b37      	ldr	r3, [pc, #220]	; (83310 <mw_dialog_text_entry_message_function+0x260>)
		mw_dialog_text_entry_data.cursor_position = ((int16_t)temp_uint32 - mw_dialog_text_entry_data.text_rect.x) /
   83234:	f8a4 6070 	strh.w	r6, [r4, #112]	; 0x70
		if (mw_dialog_text_entry_data.cursor_position > (int16_t)strlen(mw_dialog_text_entry_data.text_buffer))
   83238:	4798      	blx	r3
   8323a:	b200      	sxth	r0, r0
   8323c:	4286      	cmp	r6, r0
			mw_dialog_text_entry_data.cursor_position = (int16_t)strlen(mw_dialog_text_entry_data.text_buffer);
   8323e:	bfc8      	it	gt
   83240:	4606      	movgt	r6, r0
	return (mw_dialog_text_entry_data.text_rect.x + 2 + mw_dialog_text_entry_data.cursor_position * mw_dialog_text_entry_data.character_pitch);
   83242:	f108 0802 	add.w	r8, r8, #2
   83246:	fb06 8607 	mla	r6, r6, r7, r8
			mw_dialog_text_entry_data.cursor_position = (int16_t)strlen(mw_dialog_text_entry_data.text_buffer);
   8324a:	bfc8      	it	gt
   8324c:	f8a4 0070 	strhgt.w	r0, [r4, #112]	; 0x70
		mw_dialog_text_entry_data.cursor_rect.x = get_cursor_x_coordinate();
   83250:	83a6      	strh	r6, [r4, #28]
			mw_paint_window_client_rect(message->recipient_handle, &mw_dialog_text_entry_data.text_rect);
   83252:	6868      	ldr	r0, [r5, #4]
   83254:	4937      	ldr	r1, [pc, #220]	; (83334 <mw_dialog_text_entry_message_function+0x284>)
   83256:	4b33      	ldr	r3, [pc, #204]	; (83324 <mw_dialog_text_entry_message_function+0x274>)
}
   83258:	b002      	add	sp, #8
   8325a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			mw_paint_window_client_rect(message->recipient_handle, &mw_dialog_text_entry_data.text_rect);
   8325e:	4718      	bx	r3
						mw_dialog_text_entry_data.text_buffer[current_length + 1] = '\0';
   83260:	2200      	movs	r2, #0
						mw_dialog_text_entry_data.text_buffer[current_length] = (char)message->message_data;
   83262:	4423      	add	r3, r4
						mw_dialog_text_entry_data.cursor_position++;
   83264:	3001      	adds	r0, #1
						mw_dialog_text_entry_data.text_buffer[current_length] = (char)message->message_data;
   83266:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
						mw_dialog_text_entry_data.cursor_position++;
   8326a:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
						mw_dialog_text_entry_data.text_buffer[current_length + 1] = '\0';
   8326e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
   83272:	e78e      	b.n	83192 <mw_dialog_text_entry_message_function+0xe2>
			mw_dialog_text_entry_data.cursor_rect.height = 13;
   83274:	220d      	movs	r2, #13
			mw_gl_set_font(MW_GL_FONT_9);
   83276:	4618      	mov	r0, r3
   83278:	4b2f      	ldr	r3, [pc, #188]	; (83338 <mw_dialog_text_entry_message_function+0x288>)
			mw_dialog_text_entry_data.cursor_rect.height = 13;
   8327a:	8462      	strh	r2, [r4, #34]	; 0x22
			mw_gl_set_font(MW_GL_FONT_9);
   8327c:	4798      	blx	r3
			mw_dialog_text_entry_data.character_pitch = (int16_t)mw_gl_get_font_width() + 1;
   8327e:	4b2f      	ldr	r3, [pc, #188]	; (8333c <mw_dialog_text_entry_message_function+0x28c>)
   83280:	4798      	blx	r3
			(void)memcpy((&mw_dialog_text_entry_data.text_rect), (&text_display_rect), (sizeof(text_display_rect)));
   83282:	492f      	ldr	r1, [pc, #188]	; (83340 <mw_dialog_text_entry_message_function+0x290>)
			mw_dialog_text_entry_data.character_pitch = (int16_t)mw_gl_get_font_width() + 1;
   83284:	1c43      	adds	r3, r0, #1
			(void)memcpy((&mw_dialog_text_entry_data.text_rect), (&text_display_rect), (sizeof(text_display_rect)));
   83286:	f104 0214 	add.w	r2, r4, #20
			mw_dialog_text_entry_data.character_pitch = (int16_t)mw_gl_get_font_width() + 1;
   8328a:	b29b      	uxth	r3, r3
			(void)memcpy((&mw_dialog_text_entry_data.text_rect), (&text_display_rect), (sizeof(text_display_rect)));
   8328c:	c903      	ldmia	r1, {r0, r1}
   8328e:	f9b4 5070 	ldrsh.w	r5, [r4, #112]	; 0x70
   83292:	e882 0003 	stmia.w	r2, {r0, r1}
			mw_dialog_text_entry_data.character_pitch = (int16_t)mw_gl_get_font_width() + 1;
   83296:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
   8329a:	e74c      	b.n	83136 <mw_dialog_text_entry_message_function+0x86>
				if (current_length > 0 && mw_dialog_text_entry_data.cursor_position > 0)
   8329c:	2b00      	cmp	r3, #0
   8329e:	f77f af78 	ble.w	83192 <mw_dialog_text_entry_message_function+0xe2>
   832a2:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
   832a6:	2e00      	cmp	r6, #0
   832a8:	f77f af73 	ble.w	83192 <mw_dialog_text_entry_message_function+0xe2>
					if (mw_dialog_text_entry_data.cursor_position == current_length)
   832ac:	42b3      	cmp	r3, r6
   832ae:	d10e      	bne.n	832ce <mw_dialog_text_entry_message_function+0x21e>
						mw_dialog_text_entry_data.text_buffer[current_length - 1] = '\0';
   832b0:	2200      	movs	r2, #0
   832b2:	4423      	add	r3, r4
						mw_dialog_text_entry_data.cursor_position--;
   832b4:	3801      	subs	r0, #1
   832b6:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
						mw_dialog_text_entry_data.text_buffer[current_length - 1] = '\0';
   832ba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
   832be:	e768      	b.n	83192 <mw_dialog_text_entry_message_function+0xe2>
			mw_post_message(MW_DIALOG_TEXT_ENTRY_CANCEL_MESSAGE,
   832c0:	9301      	str	r3, [sp, #4]
   832c2:	9300      	str	r3, [sp, #0]
   832c4:	4619      	mov	r1, r3
   832c6:	2045      	movs	r0, #69	; 0x45
   832c8:	4c19      	ldr	r4, [pc, #100]	; (83330 <mw_dialog_text_entry_message_function+0x280>)
   832ca:	47a0      	blx	r4
   832cc:	e73c      	b.n	83148 <mw_dialog_text_entry_message_function+0x98>
						(void)memmove((destination), (source), ((size_t)current_length - (size_t)mw_dialog_text_entry_data.cursor_position + (size_t)1));
   832ce:	f1c6 0201 	rsb	r2, r6, #1
						source = &mw_dialog_text_entry_data.text_buffer[mw_dialog_text_entry_data.cursor_position];
   832d2:	f106 0158 	add.w	r1, r6, #88	; 0x58
						destination = &mw_dialog_text_entry_data.text_buffer[mw_dialog_text_entry_data.cursor_position - 1];
   832d6:	f106 0057 	add.w	r0, r6, #87	; 0x57
						(void)memmove((destination), (source), ((size_t)current_length - (size_t)mw_dialog_text_entry_data.cursor_position + (size_t)1));
   832da:	441a      	add	r2, r3
   832dc:	4421      	add	r1, r4
   832de:	4b0e      	ldr	r3, [pc, #56]	; (83318 <mw_dialog_text_entry_message_function+0x268>)
   832e0:	4420      	add	r0, r4
   832e2:	4798      	blx	r3
						if (mw_dialog_text_entry_data.cursor_position > 0)
   832e4:	f9b4 3070 	ldrsh.w	r3, [r4, #112]	; 0x70
   832e8:	2b00      	cmp	r3, #0
   832ea:	f77f af52 	ble.w	83192 <mw_dialog_text_entry_message_function+0xe2>
							mw_dialog_text_entry_data.cursor_position--;
   832ee:	3b01      	subs	r3, #1
   832f0:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
   832f4:	e74d      	b.n	83192 <mw_dialog_text_entry_message_function+0xe2>
   832f6:	bf00      	nop
   832f8:	000a6618 	.word	0x000a6618
   832fc:	000a6b38 	.word	0x000a6b38
   83300:	00095add 	.word	0x00095add
   83304:	20072f98 	.word	0x20072f98
   83308:	200714d0 	.word	0x200714d0
   8330c:	000917f9 	.word	0x000917f9
   83310:	000a5e79 	.word	0x000a5e79
   83314:	000a6b8c 	.word	0x000a6b8c
   83318:	000a595d 	.word	0x000a595d
   8331c:	00090f11 	.word	0x00090f11
   83320:	00090f71 	.word	0x00090f71
   83324:	00090591 	.word	0x00090591
   83328:	000911c9 	.word	0x000911c9
   8332c:	00095ab1 	.word	0x00095ab1
   83330:	00091955 	.word	0x00091955
   83334:	200714e4 	.word	0x200714e4
   83338:	00084715 	.word	0x00084715
   8333c:	00084751 	.word	0x00084751
   83340:	000a6b84 	.word	0x000a6b84

00083344 <mw_dialog_text_entry_paint_function>:
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   83344:	1c0b      	adds	r3, r1, #0
   83346:	bf18      	it	ne
   83348:	2301      	movne	r3, #1
{
   8334a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char c[2] = {0};
   8334e:	2400      	movs	r4, #0
{
   83350:	4681      	mov	r9, r0
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   83352:	460f      	mov	r7, r1
{
   83354:	b089      	sub	sp, #36	; 0x24
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   83356:	2270      	movs	r2, #112	; 0x70
   83358:	495f      	ldr	r1, [pc, #380]	; (834d8 <mw_dialog_text_entry_paint_function+0x194>)
   8335a:	4618      	mov	r0, r3
   8335c:	4d5f      	ldr	r5, [pc, #380]	; (834dc <mw_dialog_text_entry_paint_function+0x198>)
   8335e:	4b60      	ldr	r3, [pc, #384]	; (834e0 <mw_dialog_text_entry_paint_function+0x19c>)
	char c[2] = {0};
   83360:	f8ad 400c 	strh.w	r4, [sp, #12]
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   83364:	47a8      	blx	r5
	mw_gl_set_fill(MW_GL_FILL);
   83366:	4b5f      	ldr	r3, [pc, #380]	; (834e4 <mw_dialog_text_entry_paint_function+0x1a0>)
   83368:	2001      	movs	r0, #1
   8336a:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_WHITE);
   8336c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8351c <mw_dialog_text_entry_paint_function+0x1d8>
   83370:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   83374:	47c0      	blx	r8
	mw_gl_set_border(MW_GL_BORDER_OFF);
   83376:	4d5c      	ldr	r5, [pc, #368]	; (834e8 <mw_dialog_text_entry_paint_function+0x1a4>)
   83378:	4620      	mov	r0, r4
   8337a:	47a8      	blx	r5
	mw_gl_clear_pattern();
   8337c:	4b5b      	ldr	r3, [pc, #364]	; (834ec <mw_dialog_text_entry_paint_function+0x1a8>)
   8337e:	4798      	blx	r3
			mw_get_window_client_rect(window_handle).width,
   83380:	4e5b      	ldr	r6, [pc, #364]	; (834f0 <mw_dialog_text_entry_paint_function+0x1ac>)
   83382:	4649      	mov	r1, r9
   83384:	a804      	add	r0, sp, #16
   83386:	47b0      	blx	r6
			mw_get_window_client_rect(window_handle).height);
   83388:	4649      	mov	r1, r9
   8338a:	a806      	add	r0, sp, #24
	mw_gl_rectangle(draw_info,
   8338c:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
			mw_get_window_client_rect(window_handle).height);
   83390:	47b0      	blx	r6
	mw_gl_rectangle(draw_info,
   83392:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
   83396:	4622      	mov	r2, r4
   83398:	4621      	mov	r1, r4
   8339a:	464b      	mov	r3, r9
   8339c:	4638      	mov	r0, r7
   8339e:	9600      	str	r6, [sp, #0]
   833a0:	4e54      	ldr	r6, [pc, #336]	; (834f4 <mw_dialog_text_entry_paint_function+0x1b0>)
   833a2:	47b0      	blx	r6
	mw_gl_set_border(MW_GL_BORDER_ON);
   833a4:	2001      	movs	r0, #1
   833a6:	47a8      	blx	r5
	mw_gl_set_line(MW_GL_SOLID_LINE);
   833a8:	4b53      	ldr	r3, [pc, #332]	; (834f8 <mw_dialog_text_entry_paint_function+0x1b4>)
   833aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
	mw_gl_rectangle(draw_info, mw_dialog_text_entry_data.text_rect.x,
   833ae:	4d53      	ldr	r5, [pc, #332]	; (834fc <mw_dialog_text_entry_paint_function+0x1b8>)
	mw_gl_set_line(MW_GL_SOLID_LINE);
   833b0:	4798      	blx	r3
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   833b2:	f8df b16c 	ldr.w	fp, [pc, #364]	; 83520 <mw_dialog_text_entry_paint_function+0x1dc>
   833b6:	4620      	mov	r0, r4
   833b8:	47d8      	blx	fp
	mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   833ba:	4851      	ldr	r0, [pc, #324]	; (83500 <mw_dialog_text_entry_paint_function+0x1bc>)
   833bc:	47c0      	blx	r8
	mw_gl_rectangle(draw_info, mw_dialog_text_entry_data.text_rect.x,
   833be:	f9b5 001a 	ldrsh.w	r0, [r5, #26]
   833c2:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
   833c6:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
   833ca:	f9b5 1014 	ldrsh.w	r1, [r5, #20]
   833ce:	9000      	str	r0, [sp, #0]
   833d0:	4638      	mov	r0, r7
   833d2:	47b0      	blx	r6
	mw_gl_set_fg_colour(MW_HAL_LCD_WHITE);
   833d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   833d8:	47d8      	blx	fp
			mw_dialog_text_entry_data.text_rect.y + 1,
   833da:	8aea      	ldrh	r2, [r5, #22]
			mw_dialog_text_entry_data.text_rect.y + mw_dialog_text_entry_data.text_rect.height - 2);
   833dc:	8b6b      	ldrh	r3, [r5, #26]
			mw_dialog_text_entry_data.text_rect.x + 1,
   833de:	8aa9      	ldrh	r1, [r5, #20]
			mw_dialog_text_entry_data.text_rect.y + mw_dialog_text_entry_data.text_rect.height - 2);
   833e0:	4413      	add	r3, r2
   833e2:	3b02      	subs	r3, #2
			mw_dialog_text_entry_data.text_rect.y + 1,
   833e4:	3201      	adds	r2, #1
			mw_dialog_text_entry_data.text_rect.x + 1,
   833e6:	3101      	adds	r1, #1
	mw_gl_vline(draw_info,
   833e8:	b21b      	sxth	r3, r3
   833ea:	b212      	sxth	r2, r2
   833ec:	b209      	sxth	r1, r1
   833ee:	4638      	mov	r0, r7
   833f0:	4e44      	ldr	r6, [pc, #272]	; (83504 <mw_dialog_text_entry_paint_function+0x1c0>)
   833f2:	47b0      	blx	r6
			mw_dialog_text_entry_data.text_rect.x + 1,
   833f4:	8aa9      	ldrh	r1, [r5, #20]
			mw_dialog_text_entry_data.text_rect.x + mw_dialog_text_entry_data.text_rect.width - 2,
   833f6:	8b2a      	ldrh	r2, [r5, #24]
			mw_dialog_text_entry_data.text_rect.y - 1);
   833f8:	8aeb      	ldrh	r3, [r5, #22]
			mw_dialog_text_entry_data.text_rect.x + mw_dialog_text_entry_data.text_rect.width - 2,
   833fa:	440a      	add	r2, r1
   833fc:	3a02      	subs	r2, #2
			mw_dialog_text_entry_data.text_rect.x + 1,
   833fe:	3101      	adds	r1, #1
			mw_dialog_text_entry_data.text_rect.y - 1);
   83400:	3b01      	subs	r3, #1
	mw_gl_hline(draw_info,
   83402:	b212      	sxth	r2, r2
   83404:	b209      	sxth	r1, r1
   83406:	b21b      	sxth	r3, r3
   83408:	4638      	mov	r0, r7
   8340a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 83524 <mw_dialog_text_entry_paint_function+0x1e0>
   8340e:	47c0      	blx	r8
	mw_gl_set_fg_colour(MW_HAL_LCD_GREY7);
   83410:	483d      	ldr	r0, [pc, #244]	; (83508 <mw_dialog_text_entry_paint_function+0x1c4>)
   83412:	47d8      	blx	fp
			mw_dialog_text_entry_data.text_rect.y + 1,
   83414:	8aea      	ldrh	r2, [r5, #22]
			mw_dialog_text_entry_data.text_rect.x + mw_dialog_text_entry_data.text_rect.width - 2,
   83416:	8b28      	ldrh	r0, [r5, #24]
			mw_dialog_text_entry_data.text_rect.y + mw_dialog_text_entry_data.text_rect.height - 2);
   83418:	8b6b      	ldrh	r3, [r5, #26]
			mw_dialog_text_entry_data.text_rect.x + mw_dialog_text_entry_data.text_rect.width - 2,
   8341a:	8aa9      	ldrh	r1, [r5, #20]
			mw_dialog_text_entry_data.text_rect.y + mw_dialog_text_entry_data.text_rect.height - 2);
   8341c:	4413      	add	r3, r2
			mw_dialog_text_entry_data.text_rect.x + mw_dialog_text_entry_data.text_rect.width - 2,
   8341e:	4401      	add	r1, r0
			mw_dialog_text_entry_data.text_rect.y + mw_dialog_text_entry_data.text_rect.height - 2);
   83420:	3b02      	subs	r3, #2
			mw_dialog_text_entry_data.text_rect.y + 1,
   83422:	3201      	adds	r2, #1
			mw_dialog_text_entry_data.text_rect.x + mw_dialog_text_entry_data.text_rect.width - 2,
   83424:	3902      	subs	r1, #2
	mw_gl_vline(draw_info,
   83426:	b21b      	sxth	r3, r3
   83428:	b212      	sxth	r2, r2
   8342a:	b209      	sxth	r1, r1
   8342c:	4638      	mov	r0, r7
   8342e:	47b0      	blx	r6
			mw_dialog_text_entry_data.text_rect.x + 1,
   83430:	8aa9      	ldrh	r1, [r5, #20]
			mw_dialog_text_entry_data.text_rect.y + mw_dialog_text_entry_data.text_rect.height - 2);
   83432:	8b68      	ldrh	r0, [r5, #26]
			mw_dialog_text_entry_data.text_rect.x + mw_dialog_text_entry_data.text_rect.width - 2,
   83434:	8b2a      	ldrh	r2, [r5, #24]
			mw_dialog_text_entry_data.text_rect.y + mw_dialog_text_entry_data.text_rect.height - 2);
   83436:	8aeb      	ldrh	r3, [r5, #22]
			mw_dialog_text_entry_data.text_rect.x + mw_dialog_text_entry_data.text_rect.width - 2,
   83438:	440a      	add	r2, r1
			mw_dialog_text_entry_data.text_rect.y + mw_dialog_text_entry_data.text_rect.height - 2);
   8343a:	4403      	add	r3, r0
			mw_dialog_text_entry_data.text_rect.x + mw_dialog_text_entry_data.text_rect.width - 2,
   8343c:	3a02      	subs	r2, #2
			mw_dialog_text_entry_data.text_rect.x + 1,
   8343e:	3101      	adds	r1, #1
			mw_dialog_text_entry_data.text_rect.y + mw_dialog_text_entry_data.text_rect.height - 2);
   83440:	3b02      	subs	r3, #2
	mw_gl_hline(draw_info,
   83442:	b212      	sxth	r2, r2
   83444:	b209      	sxth	r1, r1
   83446:	b21b      	sxth	r3, r3
   83448:	4638      	mov	r0, r7
   8344a:	47c0      	blx	r8
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   8344c:	4620      	mov	r0, r4
   8344e:	4b2f      	ldr	r3, [pc, #188]	; (8350c <mw_dialog_text_entry_paint_function+0x1c8>)
   83450:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   83452:	4620      	mov	r0, r4
   83454:	4b2e      	ldr	r3, [pc, #184]	; (83510 <mw_dialog_text_entry_paint_function+0x1cc>)
   83456:	4798      	blx	r3
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   83458:	4620      	mov	r0, r4
   8345a:	47d8      	blx	fp
	if (mw_dialog_text_entry_data.large_size)
   8345c:	f895 006e 	ldrb.w	r0, [r5, #110]	; 0x6e
   83460:	b378      	cbz	r0, 834c2 <mw_dialog_text_entry_paint_function+0x17e>
		mw_gl_set_font(MW_GL_TITLE_FONT);
   83462:	2005      	movs	r0, #5
   83464:	4b2b      	ldr	r3, [pc, #172]	; (83514 <mw_dialog_text_entry_paint_function+0x1d0>)
   83466:	4798      	blx	r3
		for (i = 0; i < (int16_t)strlen(mw_dialog_text_entry_data.text_buffer); i++)
   83468:	267d      	movs	r6, #125	; 0x7d
   8346a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 83528 <mw_dialog_text_entry_paint_function+0x1e4>
   8346e:	f105 0858 	add.w	r8, r5, #88	; 0x58
			mw_gl_string(draw_info, text_display_rect_large.x + 4 + i * TITLE_FONT_FIXED_CHARACTER_PITCH, 10, c);
   83472:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 83518 <mw_dialog_text_entry_paint_function+0x1d4>
		for (i = 0; i < (int16_t)strlen(mw_dialog_text_entry_data.text_buffer); i++)
   83476:	e00d      	b.n	83494 <mw_dialog_text_entry_paint_function+0x150>
			c[0] = mw_dialog_text_entry_data.text_buffer[i];
   83478:	192b      	adds	r3, r5, r4
   8347a:	f893 e058 	ldrb.w	lr, [r3, #88]	; 0x58
			mw_gl_string(draw_info, text_display_rect_large.x + 4 + i * TITLE_FONT_FIXED_CHARACTER_PITCH, 10, c);
   8347e:	b231      	sxth	r1, r6
   83480:	ab03      	add	r3, sp, #12
   83482:	220a      	movs	r2, #10
   83484:	4638      	mov	r0, r7
			c[0] = mw_dialog_text_entry_data.text_buffer[i];
   83486:	f88d e00c 	strb.w	lr, [sp, #12]
			mw_gl_string(draw_info, text_display_rect_large.x + 4 + i * TITLE_FONT_FIXED_CHARACTER_PITCH, 10, c);
   8348a:	47d0      	blx	sl
   8348c:	3401      	adds	r4, #1
   8348e:	360a      	adds	r6, #10
   83490:	b224      	sxth	r4, r4
   83492:	b2b6      	uxth	r6, r6
		for (i = 0; i < (int16_t)strlen(mw_dialog_text_entry_data.text_buffer); i++)
   83494:	4640      	mov	r0, r8
   83496:	47c8      	blx	r9
   83498:	b200      	sxth	r0, r0
   8349a:	4284      	cmp	r4, r0
   8349c:	dbec      	blt.n	83478 <mw_dialog_text_entry_paint_function+0x134>
	if (mw_dialog_text_entry_data.draw_cursor)
   8349e:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
   834a2:	b15b      	cbz	r3, 834bc <mw_dialog_text_entry_paint_function+0x178>
		mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   834a4:	2000      	movs	r0, #0
   834a6:	47d8      	blx	fp
		mw_gl_vline(draw_info,
   834a8:	f9b5 201e 	ldrsh.w	r2, [r5, #30]
				mw_dialog_text_entry_data.cursor_rect.y + mw_dialog_text_entry_data.cursor_rect.height);
   834ac:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
		mw_gl_vline(draw_info,
   834ae:	4638      	mov	r0, r7
				mw_dialog_text_entry_data.cursor_rect.y + mw_dialog_text_entry_data.cursor_rect.height);
   834b0:	4413      	add	r3, r2
		mw_gl_vline(draw_info,
   834b2:	b21b      	sxth	r3, r3
   834b4:	f9b5 101c 	ldrsh.w	r1, [r5, #28]
   834b8:	4c12      	ldr	r4, [pc, #72]	; (83504 <mw_dialog_text_entry_paint_function+0x1c0>)
   834ba:	47a0      	blx	r4
}
   834bc:	b009      	add	sp, #36	; 0x24
   834be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mw_gl_set_font(MW_GL_FONT_9);
   834c2:	4b14      	ldr	r3, [pc, #80]	; (83514 <mw_dialog_text_entry_paint_function+0x1d0>)
   834c4:	4798      	blx	r3
		mw_gl_string(draw_info, text_display_rect.x + 3, 8, mw_dialog_text_entry_data.text_buffer);
   834c6:	4c14      	ldr	r4, [pc, #80]	; (83518 <mw_dialog_text_entry_paint_function+0x1d4>)
   834c8:	f105 0358 	add.w	r3, r5, #88	; 0x58
   834cc:	2208      	movs	r2, #8
   834ce:	2136      	movs	r1, #54	; 0x36
   834d0:	4638      	mov	r0, r7
   834d2:	47a0      	blx	r4
   834d4:	e7e3      	b.n	8349e <mw_dialog_text_entry_paint_function+0x15a>
   834d6:	bf00      	nop
   834d8:	000a6b14 	.word	0x000a6b14
   834dc:	00095add 	.word	0x00095add
   834e0:	000a6618 	.word	0x000a6618
   834e4:	000846fd 	.word	0x000846fd
   834e8:	000846f1 	.word	0x000846f1
   834ec:	000846e1 	.word	0x000846e1
   834f0:	00090735 	.word	0x00090735
   834f4:	000850e1 	.word	0x000850e1
   834f8:	000846d5 	.word	0x000846d5
   834fc:	200714d0 	.word	0x200714d0
   83500:	00e6e6e6 	.word	0x00e6e6e6
   83504:	00084f39 	.word	0x00084f39
   83508:	00a6a6a6 	.word	0x00a6a6a6
   8350c:	00084745 	.word	0x00084745
   83510:	00084709 	.word	0x00084709
   83514:	00084715 	.word	0x00084715
   83518:	00085f1d 	.word	0x00085f1d
   8351c:	000846c9 	.word	0x000846c9
   83520:	000846b1 	.word	0x000846b1
   83524:	00084dd1 	.word	0x00084dd1
   83528:	000a5e79 	.word	0x000a5e79

0008352c <mw_create_window_dialog_text_entry>:
		int16_t y,
		char *title,
		char *initial_text,
		bool large_size,
		mw_handle_t owner_window_handle)
{
   8352c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83530:	b086      	sub	sp, #24
   83532:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	mw_util_rect_t rect;
	mw_handle_t temp_handle;

	/* check pointer parameters */
	if (title == NULL || initial_text == NULL)
   83536:	2a00      	cmp	r2, #0
   83538:	f000 8083 	beq.w	83642 <mw_create_window_dialog_text_entry+0x116>
   8353c:	461f      	mov	r7, r3
   8353e:	2b00      	cmp	r3, #0
   83540:	d07f      	beq.n	83642 <mw_create_window_dialog_text_entry+0x116>
   83542:	4605      	mov	r5, r0
   83544:	4689      	mov	r9, r1
   83546:	4616      	mov	r6, r2
	{
		MW_ASSERT((bool)false, "Null pointer argument");
		return (MW_INVALID_HANDLE);
	}

	if (large_size)
   83548:	f1b8 0f00 	cmp.w	r8, #0
   8354c:	d174      	bne.n	83638 <mw_create_window_dialog_text_entry+0x10c>
   8354e:	23e8      	movs	r3, #232	; 0xe8
		rect.height = 217;
	}
	else
	{
		rect.width = 232;
		rect.height = 130;
   83550:	2182      	movs	r1, #130	; 0x82
		rect.width = 232;
   83552:	461c      	mov	r4, r3
	}
	rect.x = x;
   83554:	2000      	movs	r0, #0
   83556:	4602      	mov	r2, r0
   83558:	f365 000f 	bfi	r0, r5, #0, #16
   8355c:	f364 020f 	bfi	r2, r4, #0, #16
   83560:	f361 421f 	bfi	r2, r1, #16, #16
   83564:	f369 401f 	bfi	r0, r9, #16, #16
	rect.y = y;

	/* check start position */
	if (x + rect.width > MW_ROOT_WIDTH || x < 0)
   83568:	4961      	ldr	r1, [pc, #388]	; (836f0 <mw_create_window_dialog_text_entry+0x1c4>)
	rect.x = x;
   8356a:	9004      	str	r0, [sp, #16]
   8356c:	9205      	str	r2, [sp, #20]
	if (x + rect.width > MW_ROOT_WIDTH || x < 0)
   8356e:	18ec      	adds	r4, r5, r3
   83570:	4788      	blx	r1
   83572:	4284      	cmp	r4, r0
   83574:	dc5c      	bgt.n	83630 <mw_create_window_dialog_text_entry+0x104>
   83576:	2d00      	cmp	r5, #0
   83578:	db5a      	blt.n	83630 <mw_create_window_dialog_text_entry+0x104>
	{
		return (MW_INVALID_HANDLE);
	}
	if (y + rect.height > MW_ROOT_HEIGHT || y < 0)
   8357a:	4b5e      	ldr	r3, [pc, #376]	; (836f4 <mw_create_window_dialog_text_entry+0x1c8>)
   8357c:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
   83580:	4798      	blx	r3
   83582:	444c      	add	r4, r9
   83584:	4284      	cmp	r4, r0
   83586:	dc53      	bgt.n	83630 <mw_create_window_dialog_text_entry+0x104>
   83588:	f1b9 0f00 	cmp.w	r9, #0
   8358c:	db50      	blt.n	83630 <mw_create_window_dialog_text_entry+0x104>
	{
		return (MW_INVALID_HANDLE);
	}

	/* check no modal windows already showing */
	if (mw_is_any_window_modal())
   8358e:	4b5a      	ldr	r3, [pc, #360]	; (836f8 <mw_create_window_dialog_text_entry+0x1cc>)
   83590:	4798      	blx	r3
   83592:	4604      	mov	r4, r0
   83594:	2800      	cmp	r0, #0
   83596:	d14b      	bne.n	83630 <mw_create_window_dialog_text_entry+0x104>
	{
		return (MW_INVALID_HANDLE);
	}

	/* check response window handle */
	if (!mw_is_window_handle_valid(owner_window_handle))
   83598:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8359a:	4b58      	ldr	r3, [pc, #352]	; (836fc <mw_create_window_dialog_text_entry+0x1d0>)
   8359c:	4798      	blx	r3
   8359e:	2800      	cmp	r0, #0
   835a0:	d046      	beq.n	83630 <mw_create_window_dialog_text_entry+0x104>
	{
		return (MW_INVALID_HANDLE);
	}

	mw_dialog_text_entry_data.owner_window_handle = owner_window_handle;
   835a2:	4d57      	ldr	r5, [pc, #348]	; (83700 <mw_create_window_dialog_text_entry+0x1d4>)
   835a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   835a6:	60eb      	str	r3, [r5, #12]

	mw_dialog_text_entry_data.text_entry_dialog_window_handle = mw_add_window(&rect,
   835a8:	f1b8 0f00 	cmp.w	r8, #0
   835ac:	d054      	beq.n	83658 <mw_create_window_dialog_text_entry+0x12c>
   835ae:	f248 034b 	movw	r3, #32843	; 0x804b
   835b2:	9403      	str	r4, [sp, #12]
   835b4:	9401      	str	r4, [sp, #4]
   835b6:	9400      	str	r4, [sp, #0]
   835b8:	9302      	str	r3, [sp, #8]
   835ba:	4631      	mov	r1, r6
   835bc:	4b51      	ldr	r3, [pc, #324]	; (83704 <mw_create_window_dialog_text_entry+0x1d8>)
   835be:	4a52      	ldr	r2, [pc, #328]	; (83708 <mw_create_window_dialog_text_entry+0x1dc>)
   835c0:	a804      	add	r0, sp, #16
   835c2:	4c52      	ldr	r4, [pc, #328]	; (8370c <mw_create_window_dialog_text_entry+0x1e0>)
   835c4:	47a0      	blx	r4
   835c6:	6128      	str	r0, [r5, #16]
			MW_WINDOW_FLAG_HAS_BORDER | MW_WINDOW_FLAG_HAS_TITLE_BAR |
					MW_WINDOW_FLAG_IS_VISIBLE | MW_WINDOW_FLAG_IS_MODAL | (uint32_t)(large_size ? MW_WINDOW_FLAG_LARGE_SIZE : 0U),
			NULL);

	/* check if window could be created */
	if (mw_dialog_text_entry_data.text_entry_dialog_window_handle == MW_INVALID_HANDLE)
   835c8:	2800      	cmp	r0, #0
   835ca:	d031      	beq.n	83630 <mw_create_window_dialog_text_entry+0x104>
		/* it couldn't so exit */
		return (MW_INVALID_HANDLE);
	}

	/* set controls instance data */
	(void)mw_util_safe_strcpy(mw_dialog_text_entry_data.button_ok_data.button_label,
   835cc:	f105 0624 	add.w	r6, r5, #36	; 0x24
   835d0:	4630      	mov	r0, r6
   835d2:	4a4f      	ldr	r2, [pc, #316]	; (83710 <mw_create_window_dialog_text_entry+0x1e4>)
   835d4:	210a      	movs	r1, #10
   835d6:	4c4f      	ldr	r4, [pc, #316]	; (83714 <mw_create_window_dialog_text_entry+0x1e8>)
			MW_UI_BUTTON_LABEL_MAX_CHARS, "OK");
	(void)mw_util_safe_strcpy(mw_dialog_text_entry_data.button_cancel_data.button_label,
   835d8:	f105 0930 	add.w	r9, r5, #48	; 0x30
	(void)mw_util_safe_strcpy(mw_dialog_text_entry_data.button_ok_data.button_label,
   835dc:	47a0      	blx	r4
	(void)mw_util_safe_strcpy(mw_dialog_text_entry_data.button_cancel_data.button_label,
   835de:	4a4e      	ldr	r2, [pc, #312]	; (83718 <mw_create_window_dialog_text_entry+0x1ec>)
   835e0:	210a      	movs	r1, #10
   835e2:	4648      	mov	r0, r9
   835e4:	47a0      	blx	r4
			MW_UI_BUTTON_LABEL_MAX_CHARS, "Cancel");

	/* create controls */
	if (large_size)
	{
		temp_handle = mw_ui_keyboard_add_new(5,
   835e6:	f105 033c 	add.w	r3, r5, #60	; 0x3c
   835ea:	692a      	ldr	r2, [r5, #16]
   835ec:	2122      	movs	r1, #34	; 0x22
   835ee:	9300      	str	r3, [sp, #0]
   835f0:	2005      	movs	r0, #5
   835f2:	230b      	movs	r3, #11
   835f4:	f8df a144 	ldr.w	sl, [pc, #324]	; 8373c <mw_create_window_dialog_text_entry+0x210>
   835f8:	47d0      	blx	sl
				mw_dialog_text_entry_data.text_entry_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_text_entry_data.mw_ui_keyboard_data);
		mw_dialog_text_entry_data.keyboard_handle = temp_handle;

		temp_handle = mw_ui_button_add_new(50,
   835fa:	692a      	ldr	r2, [r5, #16]
   835fc:	2309      	movs	r3, #9
   835fe:	9600      	str	r6, [sp, #0]
   83600:	21a1      	movs	r1, #161	; 0xa1
		mw_dialog_text_entry_data.keyboard_handle = temp_handle;
   83602:	6028      	str	r0, [r5, #0]
		temp_handle = mw_ui_button_add_new(50,
   83604:	4e45      	ldr	r6, [pc, #276]	; (8371c <mw_create_window_dialog_text_entry+0x1f0>)
   83606:	2032      	movs	r0, #50	; 0x32
   83608:	47b0      	blx	r6
				mw_dialog_text_entry_data.text_entry_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_text_entry_data.button_ok_data);
		mw_dialog_text_entry_data.button_ok_handle = temp_handle;

		temp_handle = mw_ui_button_add_new(300,
   8360a:	692a      	ldr	r2, [r5, #16]
		mw_dialog_text_entry_data.button_ok_handle = temp_handle;
   8360c:	6068      	str	r0, [r5, #4]
		temp_handle = mw_ui_button_add_new(300,
   8360e:	230b      	movs	r3, #11
   83610:	f8cd 9000 	str.w	r9, [sp]
   83614:	21a1      	movs	r1, #161	; 0xa1
   83616:	f44f 7096 	mov.w	r0, #300	; 0x12c
   8361a:	47b0      	blx	r6
				161,
				mw_dialog_text_entry_data.text_entry_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_text_entry_data.button_cancel_data);
		mw_dialog_text_entry_data.button_cancel_handle = temp_handle;
   8361c:	60a8      	str	r0, [r5, #8]
				&mw_dialog_text_entry_data.button_cancel_data);
		mw_dialog_text_entry_data.button_cancel_handle = temp_handle;
	}

	/* check if controls could be created */
	if (mw_dialog_text_entry_data.keyboard_handle == MW_INVALID_HANDLE ||
   8361e:	682b      	ldr	r3, [r5, #0]
   83620:	b11b      	cbz	r3, 8362a <mw_create_window_dialog_text_entry+0xfe>
   83622:	686b      	ldr	r3, [r5, #4]
   83624:	b10b      	cbz	r3, 8362a <mw_create_window_dialog_text_entry+0xfe>
			mw_dialog_text_entry_data.button_ok_handle == MW_INVALID_HANDLE ||
   83626:	2800      	cmp	r0, #0
   83628:	d150      	bne.n	836cc <mw_create_window_dialog_text_entry+0x1a0>
			mw_dialog_text_entry_data.button_cancel_handle == MW_INVALID_HANDLE)
	{
		/* remove all controls and window */
		mw_remove_window(mw_dialog_text_entry_data.text_entry_dialog_window_handle);
   8362a:	6928      	ldr	r0, [r5, #16]
   8362c:	4b3c      	ldr	r3, [pc, #240]	; (83720 <mw_create_window_dialog_text_entry+0x1f4>)
   8362e:	4798      	blx	r3

		return (MW_INVALID_HANDLE);
   83630:	2000      	movs	r0, #0
	/* this window needs painting; it is coming up at the front so paint only this one */
	mw_paint_window_frame(mw_dialog_text_entry_data.text_entry_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
	mw_paint_window_client(mw_dialog_text_entry_data.text_entry_dialog_window_handle);

	return (mw_dialog_text_entry_data.text_entry_dialog_window_handle);
}
   83632:	b006      	add	sp, #24
   83634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83638:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
		rect.height = 217;
   8363c:	21d9      	movs	r1, #217	; 0xd9
		rect.width = 452;
   8363e:	461c      	mov	r4, r3
   83640:	e788      	b.n	83554 <mw_create_window_dialog_text_entry+0x28>
		MW_ASSERT((bool)false, "Null pointer argument");
   83642:	4b38      	ldr	r3, [pc, #224]	; (83724 <mw_create_window_dialog_text_entry+0x1f8>)
   83644:	f240 127b 	movw	r2, #379	; 0x17b
   83648:	4937      	ldr	r1, [pc, #220]	; (83728 <mw_create_window_dialog_text_entry+0x1fc>)
   8364a:	2000      	movs	r0, #0
   8364c:	4c37      	ldr	r4, [pc, #220]	; (8372c <mw_create_window_dialog_text_entry+0x200>)
   8364e:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   83650:	2000      	movs	r0, #0
}
   83652:	b006      	add	sp, #24
   83654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mw_dialog_text_entry_data.text_entry_dialog_window_handle = mw_add_window(&rect,
   83658:	234b      	movs	r3, #75	; 0x4b
   8365a:	f8cd 800c 	str.w	r8, [sp, #12]
   8365e:	9302      	str	r3, [sp, #8]
   83660:	f8cd 8004 	str.w	r8, [sp, #4]
   83664:	f8cd 8000 	str.w	r8, [sp]
   83668:	4631      	mov	r1, r6
   8366a:	4b26      	ldr	r3, [pc, #152]	; (83704 <mw_create_window_dialog_text_entry+0x1d8>)
   8366c:	4a26      	ldr	r2, [pc, #152]	; (83708 <mw_create_window_dialog_text_entry+0x1dc>)
   8366e:	a804      	add	r0, sp, #16
   83670:	4c26      	ldr	r4, [pc, #152]	; (8370c <mw_create_window_dialog_text_entry+0x1e0>)
   83672:	47a0      	blx	r4
   83674:	6128      	str	r0, [r5, #16]
	if (mw_dialog_text_entry_data.text_entry_dialog_window_handle == MW_INVALID_HANDLE)
   83676:	2800      	cmp	r0, #0
   83678:	d0da      	beq.n	83630 <mw_create_window_dialog_text_entry+0x104>
	(void)mw_util_safe_strcpy(mw_dialog_text_entry_data.button_ok_data.button_label,
   8367a:	f105 0624 	add.w	r6, r5, #36	; 0x24
   8367e:	4630      	mov	r0, r6
   83680:	4a23      	ldr	r2, [pc, #140]	; (83710 <mw_create_window_dialog_text_entry+0x1e4>)
   83682:	210a      	movs	r1, #10
   83684:	4c23      	ldr	r4, [pc, #140]	; (83714 <mw_create_window_dialog_text_entry+0x1e8>)
	(void)mw_util_safe_strcpy(mw_dialog_text_entry_data.button_cancel_data.button_label,
   83686:	f105 0930 	add.w	r9, r5, #48	; 0x30
	(void)mw_util_safe_strcpy(mw_dialog_text_entry_data.button_ok_data.button_label,
   8368a:	47a0      	blx	r4
	(void)mw_util_safe_strcpy(mw_dialog_text_entry_data.button_cancel_data.button_label,
   8368c:	4a22      	ldr	r2, [pc, #136]	; (83718 <mw_create_window_dialog_text_entry+0x1ec>)
   8368e:	210a      	movs	r1, #10
   83690:	4648      	mov	r0, r9
   83692:	47a0      	blx	r4
		temp_handle = mw_ui_keyboard_add_new(5,
   83694:	f105 033c 	add.w	r3, r5, #60	; 0x3c
   83698:	692a      	ldr	r2, [r5, #16]
   8369a:	2118      	movs	r1, #24
   8369c:	9300      	str	r3, [sp, #0]
   8369e:	2005      	movs	r0, #5
   836a0:	2303      	movs	r3, #3
   836a2:	f8df a098 	ldr.w	sl, [pc, #152]	; 8373c <mw_create_window_dialog_text_entry+0x210>
   836a6:	47d0      	blx	sl
		temp_handle = mw_ui_button_add_new(25,
   836a8:	692a      	ldr	r2, [r5, #16]
   836aa:	2301      	movs	r3, #1
   836ac:	9600      	str	r6, [sp, #0]
   836ae:	215a      	movs	r1, #90	; 0x5a
		mw_dialog_text_entry_data.keyboard_handle = temp_handle;
   836b0:	6028      	str	r0, [r5, #0]
		temp_handle = mw_ui_button_add_new(25,
   836b2:	4e1a      	ldr	r6, [pc, #104]	; (8371c <mw_create_window_dialog_text_entry+0x1f0>)
   836b4:	2019      	movs	r0, #25
   836b6:	47b0      	blx	r6
		temp_handle = mw_ui_button_add_new(156,
   836b8:	692a      	ldr	r2, [r5, #16]
		mw_dialog_text_entry_data.button_ok_handle = temp_handle;
   836ba:	6068      	str	r0, [r5, #4]
		temp_handle = mw_ui_button_add_new(156,
   836bc:	2303      	movs	r3, #3
   836be:	f8cd 9000 	str.w	r9, [sp]
   836c2:	215a      	movs	r1, #90	; 0x5a
   836c4:	209c      	movs	r0, #156	; 0x9c
   836c6:	47b0      	blx	r6
		mw_dialog_text_entry_data.button_cancel_handle = temp_handle;
   836c8:	60a8      	str	r0, [r5, #8]
   836ca:	e7a8      	b.n	8361e <mw_create_window_dialog_text_entry+0xf2>
	(void)mw_util_safe_strcpy(mw_dialog_text_entry_data.text_buffer, MW_DIALOG_MAX_TEXT_LENGTH + 1, initial_text);
   836cc:	463a      	mov	r2, r7
   836ce:	2115      	movs	r1, #21
   836d0:	4817      	ldr	r0, [pc, #92]	; (83730 <mw_create_window_dialog_text_entry+0x204>)
   836d2:	47a0      	blx	r4
	mw_paint_window_frame(owner_window_handle, MW_WINDOW_FRAME_COMPONENT_TITLE_BAR);
   836d4:	4c17      	ldr	r4, [pc, #92]	; (83734 <mw_create_window_dialog_text_entry+0x208>)
   836d6:	2101      	movs	r1, #1
   836d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
	mw_dialog_text_entry_data.large_size = large_size;
   836da:	f885 806e 	strb.w	r8, [r5, #110]	; 0x6e
	mw_paint_window_frame(owner_window_handle, MW_WINDOW_FRAME_COMPONENT_TITLE_BAR);
   836de:	47a0      	blx	r4
	mw_paint_window_frame(mw_dialog_text_entry_data.text_entry_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   836e0:	211f      	movs	r1, #31
   836e2:	6928      	ldr	r0, [r5, #16]
   836e4:	47a0      	blx	r4
	mw_paint_window_client(mw_dialog_text_entry_data.text_entry_dialog_window_handle);
   836e6:	6928      	ldr	r0, [r5, #16]
   836e8:	4b13      	ldr	r3, [pc, #76]	; (83738 <mw_create_window_dialog_text_entry+0x20c>)
   836ea:	4798      	blx	r3
	return (mw_dialog_text_entry_data.text_entry_dialog_window_handle);
   836ec:	6928      	ldr	r0, [r5, #16]
   836ee:	e7a0      	b.n	83632 <mw_create_window_dialog_text_entry+0x106>
   836f0:	00086e2d 	.word	0x00086e2d
   836f4:	00086e31 	.word	0x00086e31
   836f8:	0008fefd 	.word	0x0008fefd
   836fc:	0008dfd9 	.word	0x0008dfd9
   83700:	200714d0 	.word	0x200714d0
   83704:	000830b1 	.word	0x000830b1
   83708:	00083345 	.word	0x00083345
   8370c:	0008e94d 	.word	0x0008e94d
   83710:	000a6554 	.word	0x000a6554
   83714:	00096f31 	.word	0x00096f31
   83718:	000a69d4 	.word	0x000a69d4
   8371c:	00097985 	.word	0x00097985
   83720:	000911c9 	.word	0x000911c9
   83724:	000a6618 	.word	0x000a6618
   83728:	000a6b60 	.word	0x000a6b60
   8372c:	00095add 	.word	0x00095add
   83730:	20071528 	.word	0x20071528
   83734:	00090281 	.word	0x00090281
   83738:	00090409 	.word	0x00090409
   8373c:	000981d1 	.word	0x000981d1

00083740 <mw_dialog_time_chooser_paint_function>:
{
	char text_hour[16];
	char text_min[16];
	char temp_buffer[3];

	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   83740:	1c0b      	adds	r3, r1, #0
   83742:	bf18      	it	ne
   83744:	2301      	movne	r3, #1
{
   83746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8374a:	4606      	mov	r6, r0
   8374c:	b092      	sub	sp, #72	; 0x48
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   8374e:	2293      	movs	r2, #147	; 0x93
   83750:	4618      	mov	r0, r3
   83752:	460d      	mov	r5, r1
   83754:	4b3d      	ldr	r3, [pc, #244]	; (8384c <mw_dialog_time_chooser_paint_function+0x10c>)
   83756:	493e      	ldr	r1, [pc, #248]	; (83850 <mw_dialog_time_chooser_paint_function+0x110>)
   83758:	4c3e      	ldr	r4, [pc, #248]	; (83854 <mw_dialog_time_chooser_paint_function+0x114>)
   8375a:	47a0      	blx	r4

	mw_gl_set_fill(MW_GL_FILL);
   8375c:	2001      	movs	r0, #1
   8375e:	4b3e      	ldr	r3, [pc, #248]	; (83858 <mw_dialog_time_chooser_paint_function+0x118>)
   83760:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_WHITE);
   83762:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   83766:	4b3d      	ldr	r3, [pc, #244]	; (8385c <mw_dialog_time_chooser_paint_function+0x11c>)
   83768:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   8376a:	2000      	movs	r0, #0
   8376c:	4b3c      	ldr	r3, [pc, #240]	; (83860 <mw_dialog_time_chooser_paint_function+0x120>)
   8376e:	4798      	blx	r3
	mw_gl_clear_pattern();
   83770:	4b3c      	ldr	r3, [pc, #240]	; (83864 <mw_dialog_time_chooser_paint_function+0x124>)
   83772:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
			0,
			0,
			mw_get_window_client_rect(window_handle).width,
   83774:	4c3c      	ldr	r4, [pc, #240]	; (83868 <mw_dialog_time_chooser_paint_function+0x128>)
   83776:	4631      	mov	r1, r6
   83778:	a806      	add	r0, sp, #24
   8377a:	47a0      	blx	r4
			mw_get_window_client_rect(window_handle).height);
   8377c:	4631      	mov	r1, r6
   8377e:	a808      	add	r0, sp, #32
	mw_gl_rectangle(draw_info,
   83780:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
			mw_get_window_client_rect(window_handle).height);
   83784:	47a0      	blx	r4
	mw_gl_rectangle(draw_info,
   83786:	2200      	movs	r2, #0

	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);

	(void)mw_util_safe_itoa((int32_t)mw_dialog_time_chooser_data.current_time_hours, temp_buffer, (size_t)3, 10, false, 0U, '0');
   83788:	4614      	mov	r4, r2
   8378a:	f04f 0a30 	mov.w	sl, #48	; 0x30
	mw_gl_rectangle(draw_info,
   8378e:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
   83792:	4611      	mov	r1, r2
   83794:	463b      	mov	r3, r7
   83796:	4628      	mov	r0, r5
   83798:	9600      	str	r6, [sp, #0]
   8379a:	4e34      	ldr	r6, [pc, #208]	; (8386c <mw_dialog_time_chooser_paint_function+0x12c>)
   8379c:	47b0      	blx	r6
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   8379e:	4620      	mov	r0, r4
   837a0:	4b33      	ldr	r3, [pc, #204]	; (83870 <mw_dialog_time_chooser_paint_function+0x130>)
   837a2:	4798      	blx	r3
	(void)mw_util_safe_itoa((int32_t)mw_dialog_time_chooser_data.current_time_hours, temp_buffer, (size_t)3, 10, false, 0U, '0');
   837a4:	4e33      	ldr	r6, [pc, #204]	; (83874 <mw_dialog_time_chooser_paint_function+0x134>)
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   837a6:	4620      	mov	r0, r4
   837a8:	4b33      	ldr	r3, [pc, #204]	; (83878 <mw_dialog_time_chooser_paint_function+0x138>)
   837aa:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   837ac:	4620      	mov	r0, r4
   837ae:	4b33      	ldr	r3, [pc, #204]	; (8387c <mw_dialog_time_chooser_paint_function+0x13c>)
   837b0:	4798      	blx	r3
	(void)mw_util_safe_itoa((int32_t)mw_dialog_time_chooser_data.current_time_hours, temp_buffer, (size_t)3, 10, false, 0U, '0');
   837b2:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 83894 <mw_dialog_time_chooser_paint_function+0x154>
   837b6:	f896 0068 	ldrb.w	r0, [r6, #104]	; 0x68
   837ba:	230a      	movs	r3, #10
   837bc:	a905      	add	r1, sp, #20
   837be:	2203      	movs	r2, #3
   837c0:	f8cd a008 	str.w	sl, [sp, #8]
   837c4:	9401      	str	r4, [sp, #4]
   837c6:	9400      	str	r4, [sp, #0]
   837c8:	47c8      	blx	r9
	(void)mw_util_safe_strcpy(text_hour, 16, "Hour: ");
   837ca:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 83898 <mw_dialog_time_chooser_paint_function+0x158>
   837ce:	4a2c      	ldr	r2, [pc, #176]	; (83880 <mw_dialog_time_chooser_paint_function+0x140>)
   837d0:	2110      	movs	r1, #16
   837d2:	a80a      	add	r0, sp, #40	; 0x28
   837d4:	47c0      	blx	r8
	(void)mw_util_safe_strcat(text_hour, 16, temp_buffer);
   837d6:	4f2b      	ldr	r7, [pc, #172]	; (83884 <mw_dialog_time_chooser_paint_function+0x144>)
   837d8:	aa05      	add	r2, sp, #20
   837da:	2110      	movs	r1, #16
   837dc:	a80a      	add	r0, sp, #40	; 0x28
   837de:	47b8      	blx	r7
	(void)mw_util_safe_itoa((int32_t)mw_dialog_time_chooser_data.current_time_mins, temp_buffer, (size_t)3, 10, false, 0U, '0');
   837e0:	f896 0069 	ldrb.w	r0, [r6, #105]	; 0x69
   837e4:	230a      	movs	r3, #10
   837e6:	a905      	add	r1, sp, #20
   837e8:	2203      	movs	r2, #3
   837ea:	f8cd a008 	str.w	sl, [sp, #8]
   837ee:	9401      	str	r4, [sp, #4]
   837f0:	9400      	str	r4, [sp, #0]
   837f2:	47c8      	blx	r9
	(void)mw_util_safe_strcpy(text_min, 16, "Minute: ");
   837f4:	4a24      	ldr	r2, [pc, #144]	; (83888 <mw_dialog_time_chooser_paint_function+0x148>)
   837f6:	2110      	movs	r1, #16
   837f8:	a80e      	add	r0, sp, #56	; 0x38
   837fa:	47c0      	blx	r8
	(void)mw_util_safe_strcat(text_min, 16, temp_buffer);
   837fc:	aa05      	add	r2, sp, #20
   837fe:	a80e      	add	r0, sp, #56	; 0x38
   83800:	2110      	movs	r1, #16
   83802:	47b8      	blx	r7

	if (mw_dialog_time_chooser_data.large_size)
   83804:	f896 006a 	ldrb.w	r0, [r6, #106]	; 0x6a
   83808:	b978      	cbnz	r0, 8382a <mw_dialog_time_chooser_paint_function+0xea>
		mw_gl_string(draw_info, 101, 40, text_hour);
		mw_gl_string(draw_info, 89, 120, text_min);
	}
	else
	{
		mw_gl_set_font(MW_GL_FONT_9);
   8380a:	4b20      	ldr	r3, [pc, #128]	; (8388c <mw_dialog_time_chooser_paint_function+0x14c>)
   8380c:	4798      	blx	r3
		mw_gl_string(draw_info, 30, 20, text_hour);
   8380e:	4c20      	ldr	r4, [pc, #128]	; (83890 <mw_dialog_time_chooser_paint_function+0x150>)
   83810:	ab0a      	add	r3, sp, #40	; 0x28
   83812:	4628      	mov	r0, r5
   83814:	2214      	movs	r2, #20
   83816:	211e      	movs	r1, #30
   83818:	47a0      	blx	r4
		mw_gl_string(draw_info, 18, 60, text_min);
   8381a:	ab0e      	add	r3, sp, #56	; 0x38
   8381c:	4628      	mov	r0, r5
   8381e:	223c      	movs	r2, #60	; 0x3c
   83820:	2112      	movs	r1, #18
   83822:	47a0      	blx	r4
	}
}
   83824:	b012      	add	sp, #72	; 0x48
   83826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		mw_gl_set_font(MW_GL_TITLE_FONT);
   8382a:	2005      	movs	r0, #5
   8382c:	4b17      	ldr	r3, [pc, #92]	; (8388c <mw_dialog_time_chooser_paint_function+0x14c>)
   8382e:	4798      	blx	r3
		mw_gl_string(draw_info, 101, 40, text_hour);
   83830:	4c17      	ldr	r4, [pc, #92]	; (83890 <mw_dialog_time_chooser_paint_function+0x150>)
   83832:	ab0a      	add	r3, sp, #40	; 0x28
   83834:	4628      	mov	r0, r5
   83836:	2228      	movs	r2, #40	; 0x28
   83838:	2165      	movs	r1, #101	; 0x65
   8383a:	47a0      	blx	r4
		mw_gl_string(draw_info, 89, 120, text_min);
   8383c:	ab0e      	add	r3, sp, #56	; 0x38
   8383e:	4628      	mov	r0, r5
   83840:	2278      	movs	r2, #120	; 0x78
   83842:	2159      	movs	r1, #89	; 0x59
   83844:	47a0      	blx	r4
}
   83846:	b012      	add	sp, #72	; 0x48
   83848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8384c:	000a6618 	.word	0x000a6618
   83850:	000a6b94 	.word	0x000a6b94
   83854:	00095add 	.word	0x00095add
   83858:	000846fd 	.word	0x000846fd
   8385c:	000846c9 	.word	0x000846c9
   83860:	000846f1 	.word	0x000846f1
   83864:	000846e1 	.word	0x000846e1
   83868:	00090735 	.word	0x00090735
   8386c:	000850e1 	.word	0x000850e1
   83870:	000846b1 	.word	0x000846b1
   83874:	20071544 	.word	0x20071544
   83878:	00084709 	.word	0x00084709
   8387c:	00084745 	.word	0x00084745
   83880:	000a6bf0 	.word	0x000a6bf0
   83884:	00096f85 	.word	0x00096f85
   83888:	000a6bf8 	.word	0x000a6bf8
   8388c:	00084715 	.word	0x00084715
   83890:	00085f1d 	.word	0x00085f1d
   83894:	0009723d 	.word	0x0009723d
   83898:	00096f31 	.word	0x00096f31

0008389c <update_arrow_enable_states>:
{
   8389c:	b570      	push	{r4, r5, r6, lr}
	mw_set_control_enabled(mw_dialog_time_chooser_data.arrow_minute_up_handle, true);
   8389e:	4c19      	ldr	r4, [pc, #100]	; (83904 <update_arrow_enable_states+0x68>)
   838a0:	2101      	movs	r1, #1
   838a2:	69e0      	ldr	r0, [r4, #28]
   838a4:	4d18      	ldr	r5, [pc, #96]	; (83908 <update_arrow_enable_states+0x6c>)
   838a6:	47a8      	blx	r5
	mw_set_control_enabled(mw_dialog_time_chooser_data.arrow_minute_down_handle, true);
   838a8:	2101      	movs	r1, #1
   838aa:	6920      	ldr	r0, [r4, #16]
   838ac:	47a8      	blx	r5
	if (mw_dialog_time_chooser_data.current_time_mins == 0U)
   838ae:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
   838b2:	b1c1      	cbz	r1, 838e6 <update_arrow_enable_states+0x4a>
	else if (mw_dialog_time_chooser_data.current_time_mins == 59U)
   838b4:	293b      	cmp	r1, #59	; 0x3b
   838b6:	d020      	beq.n	838fa <update_arrow_enable_states+0x5e>
	mw_set_control_enabled(mw_dialog_time_chooser_data.arrow_hour_up_handle, true);
   838b8:	2101      	movs	r1, #1
   838ba:	68a0      	ldr	r0, [r4, #8]
   838bc:	47a8      	blx	r5
	mw_set_control_enabled(mw_dialog_time_chooser_data.arrow_hour_down_handle, true);
   838be:	2101      	movs	r1, #1
   838c0:	68e0      	ldr	r0, [r4, #12]
   838c2:	47a8      	blx	r5
	if (mw_dialog_time_chooser_data.current_time_hours == 0U)
   838c4:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   838c8:	b181      	cbz	r1, 838ec <update_arrow_enable_states+0x50>
	else if (mw_dialog_time_chooser_data.current_time_hours == 23U)
   838ca:	2917      	cmp	r1, #23
   838cc:	d011      	beq.n	838f2 <update_arrow_enable_states+0x56>
	mw_paint_control(mw_dialog_time_chooser_data.arrow_minute_up_handle);
   838ce:	4d0f      	ldr	r5, [pc, #60]	; (8390c <update_arrow_enable_states+0x70>)
   838d0:	69e0      	ldr	r0, [r4, #28]
   838d2:	47a8      	blx	r5
	mw_paint_control(mw_dialog_time_chooser_data.arrow_minute_down_handle);
   838d4:	6920      	ldr	r0, [r4, #16]
   838d6:	47a8      	blx	r5
	mw_paint_control(mw_dialog_time_chooser_data.arrow_hour_up_handle);
   838d8:	68a0      	ldr	r0, [r4, #8]
   838da:	47a8      	blx	r5
	mw_paint_control(mw_dialog_time_chooser_data.arrow_hour_down_handle);
   838dc:	68e0      	ldr	r0, [r4, #12]
   838de:	462b      	mov	r3, r5
}
   838e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	mw_paint_control(mw_dialog_time_chooser_data.arrow_hour_down_handle);
   838e4:	4718      	bx	r3
		mw_set_control_enabled(mw_dialog_time_chooser_data.arrow_minute_down_handle, false);
   838e6:	6920      	ldr	r0, [r4, #16]
   838e8:	47a8      	blx	r5
   838ea:	e7e5      	b.n	838b8 <update_arrow_enable_states+0x1c>
		mw_set_control_enabled(mw_dialog_time_chooser_data.arrow_hour_down_handle, false);
   838ec:	68e0      	ldr	r0, [r4, #12]
   838ee:	47a8      	blx	r5
   838f0:	e7ed      	b.n	838ce <update_arrow_enable_states+0x32>
		mw_set_control_enabled(mw_dialog_time_chooser_data.arrow_hour_up_handle, false);
   838f2:	2100      	movs	r1, #0
   838f4:	68a0      	ldr	r0, [r4, #8]
   838f6:	47a8      	blx	r5
   838f8:	e7e9      	b.n	838ce <update_arrow_enable_states+0x32>
		mw_set_control_enabled(mw_dialog_time_chooser_data.arrow_minute_up_handle, false);
   838fa:	2100      	movs	r1, #0
   838fc:	69e0      	ldr	r0, [r4, #28]
   838fe:	47a8      	blx	r5
   83900:	e7da      	b.n	838b8 <update_arrow_enable_states+0x1c>
   83902:	bf00      	nop
   83904:	20071544 	.word	0x20071544
   83908:	00090f11 	.word	0x00090f11
   8390c:	00090f71 	.word	0x00090f71

00083910 <mw_dialog_time_chooser_message_function>:
 *
 * @param message The message to be processed
 * @note Do not call this directly from user code
 */
static void mw_dialog_time_chooser_message_function(const mw_message_t *message)
{
   83910:	b570      	push	{r4, r5, r6, lr}
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   83912:	4604      	mov	r4, r0
   83914:	3000      	adds	r0, #0
   83916:	4b40      	ldr	r3, [pc, #256]	; (83a18 <mw_dialog_time_chooser_message_function+0x108>)
   83918:	bf18      	it	ne
   8391a:	2001      	movne	r0, #1
{
   8391c:	b082      	sub	sp, #8
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   8391e:	22c0      	movs	r2, #192	; 0xc0
   83920:	493e      	ldr	r1, [pc, #248]	; (83a1c <mw_dialog_time_chooser_message_function+0x10c>)
   83922:	4d3f      	ldr	r5, [pc, #252]	; (83a20 <mw_dialog_time_chooser_message_function+0x110>)
   83924:	47a8      	blx	r5

	switch (message->message_id)
   83926:	7a23      	ldrb	r3, [r4, #8]
   83928:	2b1a      	cmp	r3, #26
   8392a:	d02d      	beq.n	83988 <mw_dialog_time_chooser_message_function+0x78>
   8392c:	2b23      	cmp	r3, #35	; 0x23
   8392e:	d129      	bne.n	83984 <mw_dialog_time_chooser_message_function+0x74>
	{
	case MW_ARROW_PRESSED_MESSAGE:
		if (message->sender_handle == mw_dialog_time_chooser_data.arrow_hour_up_handle)
   83930:	4e3c      	ldr	r6, [pc, #240]	; (83a24 <mw_dialog_time_chooser_message_function+0x114>)
   83932:	6823      	ldr	r3, [r4, #0]
   83934:	68b2      	ldr	r2, [r6, #8]
   83936:	4293      	cmp	r3, r2
   83938:	d04b      	beq.n	839d2 <mw_dialog_time_chooser_message_function+0xc2>
			if (mw_dialog_time_chooser_data.current_time_hours < 23U)
			{
				mw_dialog_time_chooser_data.current_time_hours++;
			}
		}
		else if (message->sender_handle == mw_dialog_time_chooser_data.arrow_hour_down_handle)
   8393a:	68f2      	ldr	r2, [r6, #12]
   8393c:	4293      	cmp	r3, r2
   8393e:	d03a      	beq.n	839b6 <mw_dialog_time_chooser_message_function+0xa6>
			if (mw_dialog_time_chooser_data.current_time_hours > 0U)
			{
				mw_dialog_time_chooser_data.current_time_hours--;
			}
		}
		else if (message->sender_handle == mw_dialog_time_chooser_data.arrow_minute_up_handle)
   83940:	69f2      	ldr	r2, [r6, #28]
   83942:	4293      	cmp	r3, r2
   83944:	d060      	beq.n	83a08 <mw_dialog_time_chooser_message_function+0xf8>
			if (mw_dialog_time_chooser_data.current_time_mins < 59U)
			{
				mw_dialog_time_chooser_data.current_time_mins++;
			}
		}
		else if (message->sender_handle == mw_dialog_time_chooser_data.arrow_minute_down_handle)
   83946:	6932      	ldr	r2, [r6, #16]
   83948:	4293      	cmp	r3, r2
   8394a:	d14a      	bne.n	839e2 <mw_dialog_time_chooser_message_function+0xd2>
		{
			if (mw_dialog_time_chooser_data.current_time_mins > 0U)
   8394c:	f896 3069 	ldrb.w	r3, [r6, #105]	; 0x69
   83950:	2b00      	cmp	r3, #0
   83952:	d155      	bne.n	83a00 <mw_dialog_time_chooser_message_function+0xf0>
		{
			MW_ASSERT((bool)false, "Unknown control id");
		}

		/* enable or disable arrow controls as required */
		update_arrow_enable_states();
   83954:	4b34      	ldr	r3, [pc, #208]	; (83a28 <mw_dialog_time_chooser_message_function+0x118>)
   83956:	4798      	blx	r3

		/* just paint the changed text */
		if (mw_dialog_time_chooser_data.large_size)
   83958:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
		{
			mw_paint_window_client_rect(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle, &text_rect_large);
   8395c:	69b0      	ldr	r0, [r6, #24]
		if (mw_dialog_time_chooser_data.large_size)
   8395e:	2b00      	cmp	r3, #0
   83960:	d031      	beq.n	839c6 <mw_dialog_time_chooser_message_function+0xb6>
			mw_paint_window_client_rect(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle, &text_rect_large);
   83962:	4932      	ldr	r1, [pc, #200]	; (83a2c <mw_dialog_time_chooser_message_function+0x11c>)
		}
		else
		{
			mw_paint_window_client_rect(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle, &text_rect_standard);
   83964:	4b32      	ldr	r3, [pc, #200]	; (83a30 <mw_dialog_time_chooser_message_function+0x120>)

	default:
		/* keep MISRA happy */
		break;
	}
}
   83966:	b002      	add	sp, #8
   83968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mw_paint_window_client_rect(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle, &text_rect_standard);
   8396c:	4718      	bx	r3
			mw_post_message(MW_DIALOG_TIME_CHOOSER_OK_MESSAGE,
   8396e:	2100      	movs	r1, #0
   83970:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
   83974:	6972      	ldr	r2, [r6, #20]
   83976:	ba5b      	rev16	r3, r3
   83978:	b29b      	uxth	r3, r3
   8397a:	9101      	str	r1, [sp, #4]
   8397c:	9100      	str	r1, [sp, #0]
   8397e:	203d      	movs	r0, #61	; 0x3d
   83980:	4c2c      	ldr	r4, [pc, #176]	; (83a34 <mw_dialog_time_chooser_message_function+0x124>)
   83982:	47a0      	blx	r4
}
   83984:	b002      	add	sp, #8
   83986:	bd70      	pop	{r4, r5, r6, pc}
		mw_remove_window(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle);
   83988:	4e26      	ldr	r6, [pc, #152]	; (83a24 <mw_dialog_time_chooser_message_function+0x114>)
   8398a:	4b2b      	ldr	r3, [pc, #172]	; (83a38 <mw_dialog_time_chooser_message_function+0x128>)
   8398c:	69b0      	ldr	r0, [r6, #24]
   8398e:	4798      	blx	r3
		mw_paint_all();
   83990:	4b2a      	ldr	r3, [pc, #168]	; (83a3c <mw_dialog_time_chooser_message_function+0x12c>)
   83992:	4798      	blx	r3
		if (message->sender_handle == mw_dialog_time_chooser_data.button_ok_handle)
   83994:	6823      	ldr	r3, [r4, #0]
   83996:	6832      	ldr	r2, [r6, #0]
   83998:	4293      	cmp	r3, r2
   8399a:	d0e8      	beq.n	8396e <mw_dialog_time_chooser_message_function+0x5e>
		else if (message->sender_handle == mw_dialog_time_chooser_data.button_cancel_handle)
   8399c:	6872      	ldr	r2, [r6, #4]
   8399e:	4293      	cmp	r3, r2
   839a0:	d025      	beq.n	839ee <mw_dialog_time_chooser_message_function+0xde>
			MW_ASSERT((bool)false, "Unknown control id");
   839a2:	f44f 7289 	mov.w	r2, #274	; 0x112
   839a6:	2000      	movs	r0, #0
   839a8:	46ac      	mov	ip, r5
   839aa:	4b25      	ldr	r3, [pc, #148]	; (83a40 <mw_dialog_time_chooser_message_function+0x130>)
   839ac:	491b      	ldr	r1, [pc, #108]	; (83a1c <mw_dialog_time_chooser_message_function+0x10c>)
}
   839ae:	b002      	add	sp, #8
   839b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			MW_ASSERT((bool)false, "Unknown control id");
   839b4:	4760      	bx	ip
			if (mw_dialog_time_chooser_data.current_time_hours > 0U)
   839b6:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
   839ba:	2b00      	cmp	r3, #0
   839bc:	d0ca      	beq.n	83954 <mw_dialog_time_chooser_message_function+0x44>
				mw_dialog_time_chooser_data.current_time_hours--;
   839be:	3b01      	subs	r3, #1
   839c0:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   839c4:	e7c6      	b.n	83954 <mw_dialog_time_chooser_message_function+0x44>
			mw_paint_window_client_rect(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle, &text_rect_standard);
   839c6:	491f      	ldr	r1, [pc, #124]	; (83a44 <mw_dialog_time_chooser_message_function+0x134>)
   839c8:	4b19      	ldr	r3, [pc, #100]	; (83a30 <mw_dialog_time_chooser_message_function+0x120>)
}
   839ca:	b002      	add	sp, #8
   839cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mw_paint_window_client_rect(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle, &text_rect_standard);
   839d0:	4718      	bx	r3
			if (mw_dialog_time_chooser_data.current_time_hours < 23U)
   839d2:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
   839d6:	2b16      	cmp	r3, #22
   839d8:	d8bc      	bhi.n	83954 <mw_dialog_time_chooser_message_function+0x44>
				mw_dialog_time_chooser_data.current_time_hours++;
   839da:	3301      	adds	r3, #1
   839dc:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   839e0:	e7b8      	b.n	83954 <mw_dialog_time_chooser_message_function+0x44>
			MW_ASSERT((bool)false, "Unknown control id");
   839e2:	4b17      	ldr	r3, [pc, #92]	; (83a40 <mw_dialog_time_chooser_message_function+0x130>)
   839e4:	22e3      	movs	r2, #227	; 0xe3
   839e6:	490d      	ldr	r1, [pc, #52]	; (83a1c <mw_dialog_time_chooser_message_function+0x10c>)
   839e8:	2000      	movs	r0, #0
   839ea:	47a8      	blx	r5
   839ec:	e7b2      	b.n	83954 <mw_dialog_time_chooser_message_function+0x44>
			mw_post_message(MW_DIALOG_TIME_CHOOSER_CANCEL_MESSAGE,
   839ee:	2300      	movs	r3, #0
   839f0:	6972      	ldr	r2, [r6, #20]
   839f2:	9301      	str	r3, [sp, #4]
   839f4:	9300      	str	r3, [sp, #0]
   839f6:	4619      	mov	r1, r3
   839f8:	203e      	movs	r0, #62	; 0x3e
   839fa:	4c0e      	ldr	r4, [pc, #56]	; (83a34 <mw_dialog_time_chooser_message_function+0x124>)
   839fc:	47a0      	blx	r4
   839fe:	e7c1      	b.n	83984 <mw_dialog_time_chooser_message_function+0x74>
				mw_dialog_time_chooser_data.current_time_mins--;
   83a00:	3b01      	subs	r3, #1
   83a02:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
   83a06:	e7a5      	b.n	83954 <mw_dialog_time_chooser_message_function+0x44>
			if (mw_dialog_time_chooser_data.current_time_mins < 59U)
   83a08:	f896 3069 	ldrb.w	r3, [r6, #105]	; 0x69
   83a0c:	2b3a      	cmp	r3, #58	; 0x3a
   83a0e:	d8a1      	bhi.n	83954 <mw_dialog_time_chooser_message_function+0x44>
				mw_dialog_time_chooser_data.current_time_mins++;
   83a10:	3301      	adds	r3, #1
   83a12:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
   83a16:	e79d      	b.n	83954 <mw_dialog_time_chooser_message_function+0x44>
   83a18:	000a6618 	.word	0x000a6618
   83a1c:	000a6bbc 	.word	0x000a6bbc
   83a20:	00095add 	.word	0x00095add
   83a24:	20071544 	.word	0x20071544
   83a28:	0008389d 	.word	0x0008389d
   83a2c:	000a6c04 	.word	0x000a6c04
   83a30:	00090591 	.word	0x00090591
   83a34:	00091955 	.word	0x00091955
   83a38:	000911c9 	.word	0x000911c9
   83a3c:	00095ab1 	.word	0x00095ab1
   83a40:	000a69e8 	.word	0x000a69e8
   83a44:	000a6c0c 	.word	0x000a6c0c

00083a48 <mw_create_window_dialog_time_chooser>:
		int16_t y,
		uint8_t start_time_hour,
		uint8_t start_time_minute,
		bool large_size,
		mw_handle_t owner_window_handle)
{
   83a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mw_util_rect_t rect;
	mw_handle_t temp_handle;

	/* check the start time */
	if (start_time_hour > 23U || start_time_minute > 59U)
   83a4c:	2a17      	cmp	r2, #23
{
   83a4e:	b086      	sub	sp, #24
   83a50:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (start_time_hour > 23U || start_time_minute > 59U)
   83a54:	d826      	bhi.n	83aa4 <mw_create_window_dialog_time_chooser+0x5c>
   83a56:	2b3b      	cmp	r3, #59	; 0x3b
   83a58:	d824      	bhi.n	83aa4 <mw_create_window_dialog_time_chooser+0x5c>
	{
		return (MW_INVALID_HANDLE);
	}
	mw_dialog_time_chooser_data.current_time_hours = start_time_hour;
   83a5a:	4f86      	ldr	r7, [pc, #536]	; (83c74 <mw_create_window_dialog_time_chooser+0x22c>)
   83a5c:	f887 2068 	strb.w	r2, [r7, #104]	; 0x68
	mw_dialog_time_chooser_data.current_time_mins = start_time_minute;
   83a60:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

	/* check width */
	if (large_size)
   83a64:	bb16      	cbnz	r6, 83aac <mw_create_window_dialog_time_chooser+0x64>
   83a66:	2376      	movs	r3, #118	; 0x76
		rect.height = 225;
	}
	else
	{
		rect.width = 118;
		rect.height = 130;
   83a68:	f04f 0e82 	mov.w	lr, #130	; 0x82
		rect.width = 118;
   83a6c:	461c      	mov	r4, r3
	}

	/* check start position */
	if (x + rect.width > MW_ROOT_WIDTH || x < 0)
   83a6e:	4a82      	ldr	r2, [pc, #520]	; (83c78 <mw_create_window_dialog_time_chooser+0x230>)
   83a70:	f8ad 4014 	strh.w	r4, [sp, #20]
   83a74:	4688      	mov	r8, r1
   83a76:	18c4      	adds	r4, r0, r3
   83a78:	4605      	mov	r5, r0
   83a7a:	f8ad e016 	strh.w	lr, [sp, #22]
   83a7e:	4790      	blx	r2
   83a80:	4284      	cmp	r4, r0
   83a82:	dc0f      	bgt.n	83aa4 <mw_create_window_dialog_time_chooser+0x5c>
   83a84:	2d00      	cmp	r5, #0
   83a86:	db0d      	blt.n	83aa4 <mw_create_window_dialog_time_chooser+0x5c>
	{
		return (MW_INVALID_HANDLE);
	}
	if (y + rect.height > MW_ROOT_HEIGHT || y < 0)
   83a88:	4b7c      	ldr	r3, [pc, #496]	; (83c7c <mw_create_window_dialog_time_chooser+0x234>)
   83a8a:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
   83a8e:	4798      	blx	r3
   83a90:	4444      	add	r4, r8
   83a92:	4284      	cmp	r4, r0
   83a94:	dc06      	bgt.n	83aa4 <mw_create_window_dialog_time_chooser+0x5c>
   83a96:	f1b8 0f00 	cmp.w	r8, #0
   83a9a:	db03      	blt.n	83aa4 <mw_create_window_dialog_time_chooser+0x5c>
	{
		return (MW_INVALID_HANDLE);
	}

	/* check no modal windows already showing */
	if (mw_is_any_window_modal())
   83a9c:	4b78      	ldr	r3, [pc, #480]	; (83c80 <mw_create_window_dialog_time_chooser+0x238>)
   83a9e:	4798      	blx	r3
   83aa0:	4604      	mov	r4, r0
   83aa2:	b140      	cbz	r0, 83ab6 <mw_create_window_dialog_time_chooser+0x6e>
			mw_dialog_time_chooser_data.arrow_minute_down_handle == MW_INVALID_HANDLE)
	{
		/* remove all controls and window */
		mw_remove_window(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle);

		return (MW_INVALID_HANDLE);
   83aa4:	2000      	movs	r0, #0
	/* this window needs painting; it is coming up at the front so paint only this one */
	mw_paint_window_frame(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
	mw_paint_window_client(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle);

	return (mw_dialog_time_chooser_data.time_chooser_dialog_window_handle);
}
   83aa6:	b006      	add	sp, #24
   83aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83aac:	23e2      	movs	r3, #226	; 0xe2
		rect.height = 225;
   83aae:	f04f 0ee1 	mov.w	lr, #225	; 0xe1
		rect.width = 226;
   83ab2:	461c      	mov	r4, r3
   83ab4:	e7db      	b.n	83a6e <mw_create_window_dialog_time_chooser+0x26>
	if (!mw_is_window_handle_valid(owner_window_handle))
   83ab6:	980d      	ldr	r0, [sp, #52]	; 0x34
   83ab8:	4b72      	ldr	r3, [pc, #456]	; (83c84 <mw_create_window_dialog_time_chooser+0x23c>)
   83aba:	4798      	blx	r3
   83abc:	2800      	cmp	r0, #0
   83abe:	d0f1      	beq.n	83aa4 <mw_create_window_dialog_time_chooser+0x5c>
	mw_dialog_time_chooser_data.owner_window_handle = owner_window_handle;
   83ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	mw_dialog_time_chooser_data.large_size = large_size;
   83ac2:	f887 606a 	strb.w	r6, [r7, #106]	; 0x6a
	mw_dialog_time_chooser_data.owner_window_handle = owner_window_handle;
   83ac6:	617b      	str	r3, [r7, #20]
	rect.x = x;
   83ac8:	f8ad 5010 	strh.w	r5, [sp, #16]
	rect.y = y;
   83acc:	f8ad 8012 	strh.w	r8, [sp, #18]
	mw_dialog_time_chooser_data.time_chooser_dialog_window_handle = mw_add_window(&rect,
   83ad0:	2e00      	cmp	r6, #0
   83ad2:	d067      	beq.n	83ba4 <mw_create_window_dialog_time_chooser+0x15c>
   83ad4:	f248 034b 	movw	r3, #32843	; 0x804b
   83ad8:	9403      	str	r4, [sp, #12]
   83ada:	9302      	str	r3, [sp, #8]
   83adc:	9401      	str	r4, [sp, #4]
   83ade:	9400      	str	r4, [sp, #0]
   83ae0:	4b69      	ldr	r3, [pc, #420]	; (83c88 <mw_create_window_dialog_time_chooser+0x240>)
   83ae2:	4a6a      	ldr	r2, [pc, #424]	; (83c8c <mw_create_window_dialog_time_chooser+0x244>)
   83ae4:	496a      	ldr	r1, [pc, #424]	; (83c90 <mw_create_window_dialog_time_chooser+0x248>)
   83ae6:	a804      	add	r0, sp, #16
   83ae8:	4d6a      	ldr	r5, [pc, #424]	; (83c94 <mw_create_window_dialog_time_chooser+0x24c>)
   83aea:	47a8      	blx	r5
   83aec:	61b8      	str	r0, [r7, #24]
	if (mw_dialog_time_chooser_data.time_chooser_dialog_window_handle == MW_INVALID_HANDLE)
   83aee:	2800      	cmp	r0, #0
   83af0:	d0d8      	beq.n	83aa4 <mw_create_window_dialog_time_chooser+0x5c>
	(void)mw_util_safe_strcpy(mw_dialog_time_chooser_data.button_ok_data.button_label,
   83af2:	4d69      	ldr	r5, [pc, #420]	; (83c98 <mw_create_window_dialog_time_chooser+0x250>)
   83af4:	4a69      	ldr	r2, [pc, #420]	; (83c9c <mw_create_window_dialog_time_chooser+0x254>)
	(void)mw_util_safe_strcpy(mw_dialog_time_chooser_data.button_cancel_data.button_label,
   83af6:	f105 060c 	add.w	r6, r5, #12
	(void)mw_util_safe_strcpy(mw_dialog_time_chooser_data.button_ok_data.button_label,
   83afa:	4628      	mov	r0, r5
   83afc:	210a      	movs	r1, #10
   83afe:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 83cb0 <mw_create_window_dialog_time_chooser+0x268>
   83b02:	47c0      	blx	r8
	(void)mw_util_safe_strcpy(mw_dialog_time_chooser_data.button_cancel_data.button_label,
   83b04:	4a66      	ldr	r2, [pc, #408]	; (83ca0 <mw_create_window_dialog_time_chooser+0x258>)
   83b06:	210a      	movs	r1, #10
   83b08:	4630      	mov	r0, r6
   83b0a:	47c0      	blx	r8
	mw_dialog_time_chooser_data.arrow_hour_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   83b0c:	f04f 0eb4 	mov.w	lr, #180	; 0xb4
		temp_handle = mw_ui_button_add_new(5,
   83b10:	69ba      	ldr	r2, [r7, #24]
   83b12:	230b      	movs	r3, #11
   83b14:	9500      	str	r5, [sp, #0]
   83b16:	21aa      	movs	r1, #170	; 0xaa
	mw_dialog_time_chooser_data.arrow_hour_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   83b18:	f8a7 e044 	strh.w	lr, [r7, #68]	; 0x44
	mw_dialog_time_chooser_data.arrow_minute_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   83b1c:	f8a7 e05c 	strh.w	lr, [r7, #92]	; 0x5c
	mw_dialog_time_chooser_data.arrow_hour_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   83b20:	873c      	strh	r4, [r7, #56]	; 0x38
	mw_dialog_time_chooser_data.arrow_minute_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   83b22:	f8a7 4050 	strh.w	r4, [r7, #80]	; 0x50
		temp_handle = mw_ui_button_add_new(5,
   83b26:	2005      	movs	r0, #5
   83b28:	4c5e      	ldr	r4, [pc, #376]	; (83ca4 <mw_create_window_dialog_time_chooser+0x25c>)
   83b2a:	47a0      	blx	r4
		temp_handle = mw_ui_button_add_new(120,
   83b2c:	69ba      	ldr	r2, [r7, #24]
		mw_dialog_time_chooser_data.button_ok_handle = temp_handle;
   83b2e:	6038      	str	r0, [r7, #0]
		temp_handle = mw_ui_button_add_new(120,
   83b30:	230b      	movs	r3, #11
   83b32:	21aa      	movs	r1, #170	; 0xaa
   83b34:	9600      	str	r6, [sp, #0]
   83b36:	2078      	movs	r0, #120	; 0x78
   83b38:	47a0      	blx	r4
		temp_handle = mw_ui_arrow_add_new(186,
   83b3a:	f105 0318 	add.w	r3, r5, #24
   83b3e:	4c5a      	ldr	r4, [pc, #360]	; (83ca8 <mw_create_window_dialog_time_chooser+0x260>)
   83b40:	69ba      	ldr	r2, [r7, #24]
		mw_dialog_time_chooser_data.button_cancel_handle = temp_handle;
   83b42:	6078      	str	r0, [r7, #4]
		temp_handle = mw_ui_arrow_add_new(186,
   83b44:	210a      	movs	r1, #10
   83b46:	9300      	str	r3, [sp, #0]
   83b48:	20ba      	movs	r0, #186	; 0xba
   83b4a:	2309      	movs	r3, #9
   83b4c:	47a0      	blx	r4
		temp_handle = mw_ui_arrow_add_new(186,
   83b4e:	f105 0324 	add.w	r3, r5, #36	; 0x24
   83b52:	69ba      	ldr	r2, [r7, #24]
		mw_dialog_time_chooser_data.arrow_hour_up_handle = temp_handle;
   83b54:	60b8      	str	r0, [r7, #8]
		temp_handle = mw_ui_arrow_add_new(186,
   83b56:	2132      	movs	r1, #50	; 0x32
   83b58:	9300      	str	r3, [sp, #0]
   83b5a:	20ba      	movs	r0, #186	; 0xba
   83b5c:	2309      	movs	r3, #9
   83b5e:	47a0      	blx	r4
		temp_handle = mw_ui_arrow_add_new(186,
   83b60:	f105 0330 	add.w	r3, r5, #48	; 0x30
   83b64:	69ba      	ldr	r2, [r7, #24]
		mw_dialog_time_chooser_data.arrow_hour_down_handle = temp_handle;
   83b66:	60f8      	str	r0, [r7, #12]
		temp_handle = mw_ui_arrow_add_new(186,
   83b68:	215a      	movs	r1, #90	; 0x5a
   83b6a:	9300      	str	r3, [sp, #0]
   83b6c:	20ba      	movs	r0, #186	; 0xba
   83b6e:	2309      	movs	r3, #9
   83b70:	47a0      	blx	r4
		temp_handle = mw_ui_arrow_add_new(186,
   83b72:	353c      	adds	r5, #60	; 0x3c
		mw_dialog_time_chooser_data.arrow_minute_up_handle = temp_handle;
   83b74:	61f8      	str	r0, [r7, #28]
		temp_handle = mw_ui_arrow_add_new(186,
   83b76:	69ba      	ldr	r2, [r7, #24]
   83b78:	2309      	movs	r3, #9
   83b7a:	9500      	str	r5, [sp, #0]
   83b7c:	2182      	movs	r1, #130	; 0x82
   83b7e:	20ba      	movs	r0, #186	; 0xba
   83b80:	47a0      	blx	r4
		mw_dialog_time_chooser_data.arrow_minute_down_handle = temp_handle;
   83b82:	6138      	str	r0, [r7, #16]
	if (mw_dialog_time_chooser_data.button_ok_handle == MW_INVALID_HANDLE ||
   83b84:	683b      	ldr	r3, [r7, #0]
   83b86:	b14b      	cbz	r3, 83b9c <mw_create_window_dialog_time_chooser+0x154>
   83b88:	687b      	ldr	r3, [r7, #4]
   83b8a:	b13b      	cbz	r3, 83b9c <mw_create_window_dialog_time_chooser+0x154>
			mw_dialog_time_chooser_data.button_cancel_handle == MW_INVALID_HANDLE ||
   83b8c:	68bb      	ldr	r3, [r7, #8]
   83b8e:	b12b      	cbz	r3, 83b9c <mw_create_window_dialog_time_chooser+0x154>
			mw_dialog_time_chooser_data.arrow_hour_up_handle == MW_INVALID_HANDLE ||
   83b90:	68fb      	ldr	r3, [r7, #12]
   83b92:	b11b      	cbz	r3, 83b9c <mw_create_window_dialog_time_chooser+0x154>
			mw_dialog_time_chooser_data.arrow_hour_down_handle == MW_INVALID_HANDLE ||
   83b94:	69fb      	ldr	r3, [r7, #28]
   83b96:	b10b      	cbz	r3, 83b9c <mw_create_window_dialog_time_chooser+0x154>
			mw_dialog_time_chooser_data.arrow_minute_up_handle == MW_INVALID_HANDLE ||
   83b98:	2800      	cmp	r0, #0
   83b9a:	d15c      	bne.n	83c56 <mw_create_window_dialog_time_chooser+0x20e>
		mw_remove_window(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle);
   83b9c:	69b8      	ldr	r0, [r7, #24]
   83b9e:	4b43      	ldr	r3, [pc, #268]	; (83cac <mw_create_window_dialog_time_chooser+0x264>)
   83ba0:	4798      	blx	r3
   83ba2:	e77f      	b.n	83aa4 <mw_create_window_dialog_time_chooser+0x5c>
	mw_dialog_time_chooser_data.time_chooser_dialog_window_handle = mw_add_window(&rect,
   83ba4:	234b      	movs	r3, #75	; 0x4b
   83ba6:	9603      	str	r6, [sp, #12]
   83ba8:	9302      	str	r3, [sp, #8]
   83baa:	9601      	str	r6, [sp, #4]
   83bac:	9600      	str	r6, [sp, #0]
   83bae:	4b36      	ldr	r3, [pc, #216]	; (83c88 <mw_create_window_dialog_time_chooser+0x240>)
   83bb0:	4a36      	ldr	r2, [pc, #216]	; (83c8c <mw_create_window_dialog_time_chooser+0x244>)
   83bb2:	4937      	ldr	r1, [pc, #220]	; (83c90 <mw_create_window_dialog_time_chooser+0x248>)
   83bb4:	a804      	add	r0, sp, #16
   83bb6:	4c37      	ldr	r4, [pc, #220]	; (83c94 <mw_create_window_dialog_time_chooser+0x24c>)
   83bb8:	47a0      	blx	r4
   83bba:	61b8      	str	r0, [r7, #24]
	if (mw_dialog_time_chooser_data.time_chooser_dialog_window_handle == MW_INVALID_HANDLE)
   83bbc:	2800      	cmp	r0, #0
   83bbe:	f43f af71 	beq.w	83aa4 <mw_create_window_dialog_time_chooser+0x5c>
	(void)mw_util_safe_strcpy(mw_dialog_time_chooser_data.button_ok_data.button_label,
   83bc2:	4c35      	ldr	r4, [pc, #212]	; (83c98 <mw_create_window_dialog_time_chooser+0x250>)
   83bc4:	4d3a      	ldr	r5, [pc, #232]	; (83cb0 <mw_create_window_dialog_time_chooser+0x268>)
	(void)mw_util_safe_strcpy(mw_dialog_time_chooser_data.button_cancel_data.button_label,
   83bc6:	f104 080c 	add.w	r8, r4, #12
	(void)mw_util_safe_strcpy(mw_dialog_time_chooser_data.button_ok_data.button_label,
   83bca:	4a34      	ldr	r2, [pc, #208]	; (83c9c <mw_create_window_dialog_time_chooser+0x254>)
   83bcc:	4620      	mov	r0, r4
   83bce:	210a      	movs	r1, #10
   83bd0:	47a8      	blx	r5
	(void)mw_util_safe_strcpy(mw_dialog_time_chooser_data.button_cancel_data.button_label,
   83bd2:	4a33      	ldr	r2, [pc, #204]	; (83ca0 <mw_create_window_dialog_time_chooser+0x258>)
   83bd4:	210a      	movs	r1, #10
   83bd6:	4640      	mov	r0, r8
   83bd8:	47a8      	blx	r5
	mw_dialog_time_chooser_data.arrow_hour_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   83bda:	f04f 0eb4 	mov.w	lr, #180	; 0xb4
		temp_handle = mw_ui_button_add_new(5,
   83bde:	69ba      	ldr	r2, [r7, #24]
   83be0:	4d30      	ldr	r5, [pc, #192]	; (83ca4 <mw_create_window_dialog_time_chooser+0x25c>)
   83be2:	9400      	str	r4, [sp, #0]
   83be4:	2303      	movs	r3, #3
	mw_dialog_time_chooser_data.arrow_hour_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   83be6:	f8a7 e044 	strh.w	lr, [r7, #68]	; 0x44
	mw_dialog_time_chooser_data.arrow_minute_down_data.mw_ui_arrow_direction = MW_UI_ARROW_DOWN;
   83bea:	f8a7 e05c 	strh.w	lr, [r7, #92]	; 0x5c
		temp_handle = mw_ui_button_add_new(5,
   83bee:	215a      	movs	r1, #90	; 0x5a
   83bf0:	2005      	movs	r0, #5
	mw_dialog_time_chooser_data.arrow_hour_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   83bf2:	873e      	strh	r6, [r7, #56]	; 0x38
	mw_dialog_time_chooser_data.arrow_minute_up_data.mw_ui_arrow_direction = MW_UI_ARROW_UP;
   83bf4:	f8a7 6050 	strh.w	r6, [r7, #80]	; 0x50
		temp_handle = mw_ui_button_add_new(5,
   83bf8:	47a8      	blx	r5
		temp_handle = mw_ui_button_add_new(60,
   83bfa:	69ba      	ldr	r2, [r7, #24]
		mw_dialog_time_chooser_data.button_ok_handle = temp_handle;
   83bfc:	6038      	str	r0, [r7, #0]
		temp_handle = mw_ui_button_add_new(60,
   83bfe:	2303      	movs	r3, #3
   83c00:	215a      	movs	r1, #90	; 0x5a
   83c02:	f8cd 8000 	str.w	r8, [sp]
   83c06:	203c      	movs	r0, #60	; 0x3c
   83c08:	47a8      	blx	r5
		temp_handle = mw_ui_arrow_add_new(93,
   83c0a:	f104 0318 	add.w	r3, r4, #24
   83c0e:	4d26      	ldr	r5, [pc, #152]	; (83ca8 <mw_create_window_dialog_time_chooser+0x260>)
   83c10:	69ba      	ldr	r2, [r7, #24]
		mw_dialog_time_chooser_data.button_cancel_handle = temp_handle;
   83c12:	6078      	str	r0, [r7, #4]
		temp_handle = mw_ui_arrow_add_new(93,
   83c14:	2105      	movs	r1, #5
   83c16:	9300      	str	r3, [sp, #0]
   83c18:	205d      	movs	r0, #93	; 0x5d
   83c1a:	2301      	movs	r3, #1
   83c1c:	47a8      	blx	r5
		temp_handle = mw_ui_arrow_add_new(93,
   83c1e:	f104 0324 	add.w	r3, r4, #36	; 0x24
   83c22:	69ba      	ldr	r2, [r7, #24]
		mw_dialog_time_chooser_data.arrow_hour_up_handle = temp_handle;
   83c24:	60b8      	str	r0, [r7, #8]
		temp_handle = mw_ui_arrow_add_new(93,
   83c26:	2119      	movs	r1, #25
   83c28:	9300      	str	r3, [sp, #0]
   83c2a:	205d      	movs	r0, #93	; 0x5d
   83c2c:	2301      	movs	r3, #1
   83c2e:	47a8      	blx	r5
		temp_handle = mw_ui_arrow_add_new(93,
   83c30:	f104 0330 	add.w	r3, r4, #48	; 0x30
   83c34:	69ba      	ldr	r2, [r7, #24]
		mw_dialog_time_chooser_data.arrow_hour_down_handle = temp_handle;
   83c36:	60f8      	str	r0, [r7, #12]
		temp_handle = mw_ui_arrow_add_new(93,
   83c38:	212d      	movs	r1, #45	; 0x2d
   83c3a:	9300      	str	r3, [sp, #0]
   83c3c:	205d      	movs	r0, #93	; 0x5d
   83c3e:	2301      	movs	r3, #1
   83c40:	47a8      	blx	r5
		temp_handle = mw_ui_arrow_add_new(93,
   83c42:	343c      	adds	r4, #60	; 0x3c
		mw_dialog_time_chooser_data.arrow_minute_up_handle = temp_handle;
   83c44:	61f8      	str	r0, [r7, #28]
		temp_handle = mw_ui_arrow_add_new(93,
   83c46:	69ba      	ldr	r2, [r7, #24]
   83c48:	2301      	movs	r3, #1
   83c4a:	9400      	str	r4, [sp, #0]
   83c4c:	2141      	movs	r1, #65	; 0x41
   83c4e:	205d      	movs	r0, #93	; 0x5d
   83c50:	47a8      	blx	r5
		mw_dialog_time_chooser_data.arrow_minute_down_handle = temp_handle;
   83c52:	6138      	str	r0, [r7, #16]
   83c54:	e796      	b.n	83b84 <mw_create_window_dialog_time_chooser+0x13c>
	update_arrow_enable_states();
   83c56:	4b17      	ldr	r3, [pc, #92]	; (83cb4 <mw_create_window_dialog_time_chooser+0x26c>)
   83c58:	4798      	blx	r3
	mw_paint_window_frame(owner_window_handle, MW_WINDOW_FRAME_COMPONENT_TITLE_BAR);
   83c5a:	4c17      	ldr	r4, [pc, #92]	; (83cb8 <mw_create_window_dialog_time_chooser+0x270>)
   83c5c:	2101      	movs	r1, #1
   83c5e:	980d      	ldr	r0, [sp, #52]	; 0x34
   83c60:	47a0      	blx	r4
	mw_paint_window_frame(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   83c62:	211f      	movs	r1, #31
   83c64:	69b8      	ldr	r0, [r7, #24]
   83c66:	47a0      	blx	r4
	mw_paint_window_client(mw_dialog_time_chooser_data.time_chooser_dialog_window_handle);
   83c68:	69b8      	ldr	r0, [r7, #24]
   83c6a:	4b14      	ldr	r3, [pc, #80]	; (83cbc <mw_create_window_dialog_time_chooser+0x274>)
   83c6c:	4798      	blx	r3
	return (mw_dialog_time_chooser_data.time_chooser_dialog_window_handle);
   83c6e:	69b8      	ldr	r0, [r7, #24]
   83c70:	e719      	b.n	83aa6 <mw_create_window_dialog_time_chooser+0x5e>
   83c72:	bf00      	nop
   83c74:	20071544 	.word	0x20071544
   83c78:	00086e2d 	.word	0x00086e2d
   83c7c:	00086e31 	.word	0x00086e31
   83c80:	0008fefd 	.word	0x0008fefd
   83c84:	0008dfd9 	.word	0x0008dfd9
   83c88:	00083911 	.word	0x00083911
   83c8c:	00083741 	.word	0x00083741
   83c90:	000a6be4 	.word	0x000a6be4
   83c94:	0008e94d 	.word	0x0008e94d
   83c98:	20071564 	.word	0x20071564
   83c9c:	000a6554 	.word	0x000a6554
   83ca0:	000a69d4 	.word	0x000a69d4
   83ca4:	00097985 	.word	0x00097985
   83ca8:	00097679 	.word	0x00097679
   83cac:	000911c9 	.word	0x000911c9
   83cb0:	00096f31 	.word	0x00096f31
   83cb4:	0008389d 	.word	0x0008389d
   83cb8:	00090281 	.word	0x00090281
   83cbc:	00090409 	.word	0x00090409

00083cc0 <mw_dialog_two_button_paint_function>:
 * @param draw_info Draw info structure describing offset and clip region
 * @note Do not call this directly from user code
 */
static void mw_dialog_two_button_paint_function(mw_handle_t window_handle, const mw_gl_draw_info_t *draw_info)
{
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   83cc0:	1c0b      	adds	r3, r1, #0
   83cc2:	bf18      	it	ne
   83cc4:	2301      	movne	r3, #1
{
   83cc6:	b570      	push	{r4, r5, r6, lr}
   83cc8:	4606      	mov	r6, r0
   83cca:	b086      	sub	sp, #24
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   83ccc:	225a      	movs	r2, #90	; 0x5a
   83cce:	4618      	mov	r0, r3
   83cd0:	460c      	mov	r4, r1
   83cd2:	4b1e      	ldr	r3, [pc, #120]	; (83d4c <mw_dialog_two_button_paint_function+0x8c>)
   83cd4:	491e      	ldr	r1, [pc, #120]	; (83d50 <mw_dialog_two_button_paint_function+0x90>)
   83cd6:	4d1f      	ldr	r5, [pc, #124]	; (83d54 <mw_dialog_two_button_paint_function+0x94>)
   83cd8:	47a8      	blx	r5

	mw_gl_set_fill(MW_GL_FILL);
   83cda:	2001      	movs	r0, #1
   83cdc:	4b1e      	ldr	r3, [pc, #120]	; (83d58 <mw_dialog_two_button_paint_function+0x98>)
   83cde:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_HAL_LCD_WHITE);
   83ce0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   83ce4:	4b1d      	ldr	r3, [pc, #116]	; (83d5c <mw_dialog_two_button_paint_function+0x9c>)
   83ce6:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   83ce8:	2000      	movs	r0, #0
   83cea:	4b1d      	ldr	r3, [pc, #116]	; (83d60 <mw_dialog_two_button_paint_function+0xa0>)
   83cec:	4798      	blx	r3
	mw_gl_clear_pattern();
   83cee:	4b1d      	ldr	r3, [pc, #116]	; (83d64 <mw_dialog_two_button_paint_function+0xa4>)
   83cf0:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
			0,
			0,
			mw_get_window_client_rect(window_handle).width,
   83cf2:	4d1d      	ldr	r5, [pc, #116]	; (83d68 <mw_dialog_two_button_paint_function+0xa8>)
   83cf4:	4631      	mov	r1, r6
   83cf6:	a802      	add	r0, sp, #8
   83cf8:	47a8      	blx	r5
			mw_get_window_client_rect(window_handle).height);
   83cfa:	4631      	mov	r1, r6
   83cfc:	a804      	add	r0, sp, #16
	mw_gl_rectangle(draw_info,
   83cfe:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
			mw_get_window_client_rect(window_handle).height);
   83d02:	47a8      	blx	r5
	mw_gl_rectangle(draw_info,
   83d04:	2200      	movs	r2, #0
   83d06:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
   83d0a:	4611      	mov	r1, r2
   83d0c:	4633      	mov	r3, r6
   83d0e:	4620      	mov	r0, r4
   83d10:	9500      	str	r5, [sp, #0]
   83d12:	4d16      	ldr	r5, [pc, #88]	; (83d6c <mw_dialog_two_button_paint_function+0xac>)
   83d14:	47a8      	blx	r5

	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   83d16:	2000      	movs	r0, #0
   83d18:	4b15      	ldr	r3, [pc, #84]	; (83d70 <mw_dialog_two_button_paint_function+0xb0>)
   83d1a:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);

	if (mw_dialog_two_button_data.large_size)
   83d1c:	4d15      	ldr	r5, [pc, #84]	; (83d74 <mw_dialog_two_button_paint_function+0xb4>)
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   83d1e:	2000      	movs	r0, #0
   83d20:	4b15      	ldr	r3, [pc, #84]	; (83d78 <mw_dialog_two_button_paint_function+0xb8>)
   83d22:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   83d24:	2000      	movs	r0, #0
   83d26:	4b15      	ldr	r3, [pc, #84]	; (83d7c <mw_dialog_two_button_paint_function+0xbc>)
   83d28:	4798      	blx	r3
	if (mw_dialog_two_button_data.large_size)
   83d2a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
   83d2e:	b100      	cbz	r0, 83d32 <mw_dialog_two_button_paint_function+0x72>
	{
		mw_gl_set_font(MW_GL_TITLE_FONT);
   83d30:	2005      	movs	r0, #5
		mw_gl_string(draw_info, 12, 10, mw_dialog_two_button_data.message);
	}
	else
	{
		mw_gl_set_font(MW_GL_FONT_9);
   83d32:	4b13      	ldr	r3, [pc, #76]	; (83d80 <mw_dialog_two_button_paint_function+0xc0>)
   83d34:	4798      	blx	r3
		mw_gl_string(draw_info, 12, 10, mw_dialog_two_button_data.message);
   83d36:	4620      	mov	r0, r4
   83d38:	4c12      	ldr	r4, [pc, #72]	; (83d84 <mw_dialog_two_button_paint_function+0xc4>)
   83d3a:	220a      	movs	r2, #10
   83d3c:	210c      	movs	r1, #12
   83d3e:	46a4      	mov	ip, r4
   83d40:	6aab      	ldr	r3, [r5, #40]	; 0x28
	}
}
   83d42:	b006      	add	sp, #24
   83d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		mw_gl_string(draw_info, 12, 10, mw_dialog_two_button_data.message);
   83d48:	4760      	bx	ip
   83d4a:	bf00      	nop
   83d4c:	000a6618 	.word	0x000a6618
   83d50:	000a6c14 	.word	0x000a6c14
   83d54:	00095add 	.word	0x00095add
   83d58:	000846fd 	.word	0x000846fd
   83d5c:	000846c9 	.word	0x000846c9
   83d60:	000846f1 	.word	0x000846f1
   83d64:	000846e1 	.word	0x000846e1
   83d68:	00090735 	.word	0x00090735
   83d6c:	000850e1 	.word	0x000850e1
   83d70:	000846b1 	.word	0x000846b1
   83d74:	200715b0 	.word	0x200715b0
   83d78:	00084709 	.word	0x00084709
   83d7c:	00084745 	.word	0x00084745
   83d80:	00084715 	.word	0x00084715
   83d84:	00085f1d 	.word	0x00085f1d

00083d88 <mw_dialog_two_button_message_function>:
 *
 * @param message The message to be processed
 * @note Do not call this directly from user code
 */
static void mw_dialog_two_button_message_function(const mw_message_t *message)
{
   83d88:	b530      	push	{r4, r5, lr}
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   83d8a:	4604      	mov	r4, r0
   83d8c:	3000      	adds	r0, #0
   83d8e:	4b0f      	ldr	r3, [pc, #60]	; (83dcc <mw_dialog_two_button_message_function+0x44>)
   83d90:	bf18      	it	ne
   83d92:	2001      	movne	r0, #1
{
   83d94:	b083      	sub	sp, #12
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   83d96:	227e      	movs	r2, #126	; 0x7e
   83d98:	490d      	ldr	r1, [pc, #52]	; (83dd0 <mw_dialog_two_button_message_function+0x48>)
   83d9a:	4d0e      	ldr	r5, [pc, #56]	; (83dd4 <mw_dialog_two_button_message_function+0x4c>)
   83d9c:	47a8      	blx	r5

	switch (message->message_id)
   83d9e:	7a23      	ldrb	r3, [r4, #8]
   83da0:	2b1a      	cmp	r3, #26
   83da2:	d111      	bne.n	83dc8 <mw_dialog_two_button_message_function+0x40>
	case MW_BUTTON_PRESSED_MESSAGE:
		{
			uint32_t button_pressed;

			/* remove all controls and window */
			mw_remove_window(mw_dialog_two_button_data.two_button_dialog_window_handle);
   83da4:	4d0c      	ldr	r5, [pc, #48]	; (83dd8 <mw_dialog_two_button_message_function+0x50>)
   83da6:	4b0d      	ldr	r3, [pc, #52]	; (83ddc <mw_dialog_two_button_message_function+0x54>)
   83da8:	68e8      	ldr	r0, [r5, #12]
   83daa:	4798      	blx	r3

			/* a window has changed visibility so repaint all */
			mw_paint_all();
   83dac:	4b0c      	ldr	r3, [pc, #48]	; (83de0 <mw_dialog_two_button_message_function+0x58>)
   83dae:	4798      	blx	r3
			{
				button_pressed = 1U;
			}

			/* post response to receiving window */
			mw_post_message(MW_DIALOG_TWO_BUTTONS_DISMISSED_MESSAGE,
   83db0:	2100      	movs	r1, #0
			if (message->sender_handle == mw_dialog_two_button_data.button_1_handle)
   83db2:	6820      	ldr	r0, [r4, #0]
   83db4:	682b      	ldr	r3, [r5, #0]
			mw_post_message(MW_DIALOG_TWO_BUTTONS_DISMISSED_MESSAGE,
   83db6:	68aa      	ldr	r2, [r5, #8]
   83db8:	1ac3      	subs	r3, r0, r3
   83dba:	bf18      	it	ne
   83dbc:	2301      	movne	r3, #1
   83dbe:	9101      	str	r1, [sp, #4]
   83dc0:	9100      	str	r1, [sp, #0]
   83dc2:	203c      	movs	r0, #60	; 0x3c
   83dc4:	4c07      	ldr	r4, [pc, #28]	; (83de4 <mw_dialog_two_button_message_function+0x5c>)
   83dc6:	47a0      	blx	r4

	default:
		/* keep MISRA happy */
		break;
	}
}
   83dc8:	b003      	add	sp, #12
   83dca:	bd30      	pop	{r4, r5, pc}
   83dcc:	000a6618 	.word	0x000a6618
   83dd0:	000a6c38 	.word	0x000a6c38
   83dd4:	00095add 	.word	0x00095add
   83dd8:	200715b0 	.word	0x200715b0
   83ddc:	000911c9 	.word	0x000911c9
   83de0:	00095ab1 	.word	0x00095ab1
   83de4:	00091955 	.word	0x00091955

00083de8 <mw_create_window_dialog_two_button>:
		char *message,
		char *button_1_label,
		char *button_2_label,
		bool large_size,
		mw_handle_t owner_window_handle)
{
   83de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83dec:	b089      	sub	sp, #36	; 0x24
   83dee:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
	mw_util_rect_t rect;
	int16_t window_client_width;
	mw_handle_t temp_handle;

	/* check pointer parameters */
	if (title == NULL || message == NULL || button_1_label == NULL || button_2_label == NULL)
   83df2:	2b00      	cmp	r3, #0
   83df4:	f000 8094 	beq.w	83f20 <mw_create_window_dialog_two_button+0x138>
   83df8:	461d      	mov	r5, r3
   83dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83dfc:	2b00      	cmp	r3, #0
   83dfe:	f000 808f 	beq.w	83f20 <mw_create_window_dialog_two_button+0x138>
   83e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83e04:	2b00      	cmp	r3, #0
   83e06:	f000 808b 	beq.w	83f20 <mw_create_window_dialog_two_button+0x138>
   83e0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83e0c:	2b00      	cmp	r3, #0
   83e0e:	f000 8087 	beq.w	83f20 <mw_create_window_dialog_two_button+0x138>
   83e12:	4607      	mov	r7, r0
   83e14:	4689      	mov	r9, r1
   83e16:	4614      	mov	r4, r2
		MW_ASSERT((bool)false, "Null pointer argument");
		return (MW_INVALID_HANDLE);
	}

	/* check width */
	if (large_size)
   83e18:	2e00      	cmp	r6, #0
   83e1a:	d17b      	bne.n	83f14 <mw_create_window_dialog_two_button+0x12c>
		}
		rect.height = 95;
	}
	else
	{
		if (width < 2 * MW_UI_BUTTON_WIDTH + 2 * MW_BORDER_WIDTH + BUTTON_GAP)
   83e1c:	2a6f      	cmp	r2, #111	; 0x6f
   83e1e:	dd75      	ble.n	83f0c <mw_create_window_dialog_two_button+0x124>
		{
			return (MW_INVALID_HANDLE);
		}
		rect.height = 75;
   83e20:	234b      	movs	r3, #75	; 0x4b
   83e22:	f8ad 3016 	strh.w	r3, [sp, #22]
	}

	/* check start position */
	if (x + width > MW_ROOT_WIDTH || x < 0)
   83e26:	4b6b      	ldr	r3, [pc, #428]	; (83fd4 <mw_create_window_dialog_two_button+0x1ec>)
   83e28:	4798      	blx	r3
   83e2a:	eb07 0804 	add.w	r8, r7, r4
   83e2e:	4580      	cmp	r8, r0
   83e30:	dc6c      	bgt.n	83f0c <mw_create_window_dialog_two_button+0x124>
   83e32:	2f00      	cmp	r7, #0
   83e34:	db6a      	blt.n	83f0c <mw_create_window_dialog_two_button+0x124>
	{
		return (MW_INVALID_HANDLE);
	}
	if (y + rect.height > MW_ROOT_HEIGHT || y < 0)
   83e36:	4b68      	ldr	r3, [pc, #416]	; (83fd8 <mw_create_window_dialog_two_button+0x1f0>)
   83e38:	f9bd 8016 	ldrsh.w	r8, [sp, #22]
   83e3c:	4798      	blx	r3
   83e3e:	44c8      	add	r8, r9
   83e40:	4580      	cmp	r8, r0
   83e42:	dc63      	bgt.n	83f0c <mw_create_window_dialog_two_button+0x124>
   83e44:	f1b9 0f00 	cmp.w	r9, #0
   83e48:	db60      	blt.n	83f0c <mw_create_window_dialog_two_button+0x124>
	{
		return (MW_INVALID_HANDLE);
	}

	/* check response window handle */
	if (!mw_is_window_handle_valid(owner_window_handle))
   83e4a:	9814      	ldr	r0, [sp, #80]	; 0x50
   83e4c:	4b63      	ldr	r3, [pc, #396]	; (83fdc <mw_create_window_dialog_two_button+0x1f4>)
   83e4e:	4798      	blx	r3
   83e50:	2800      	cmp	r0, #0
   83e52:	d05b      	beq.n	83f0c <mw_create_window_dialog_two_button+0x124>
	{
		return (MW_INVALID_HANDLE);
	}

	mw_dialog_two_button_data.large_size = large_size;
   83e54:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 84010 <mw_create_window_dialog_two_button+0x228>
	mw_dialog_two_button_data.message = message;
   83e58:	9b10      	ldr	r3, [sp, #64]	; 0x40
	mw_dialog_two_button_data.owner_window_handle = owner_window_handle;
	rect.x = x;
   83e5a:	f8ad 7010 	strh.w	r7, [sp, #16]
	mw_dialog_two_button_data.message = message;
   83e5e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	mw_dialog_two_button_data.owner_window_handle = owner_window_handle;
   83e62:	9b14      	ldr	r3, [sp, #80]	; 0x50
	rect.y = y;
   83e64:	f8ad 9012 	strh.w	r9, [sp, #18]
	rect.width = width;
   83e68:	f8ad 4014 	strh.w	r4, [sp, #20]
	mw_dialog_two_button_data.large_size = large_size;
   83e6c:	f888 602c 	strb.w	r6, [r8, #44]	; 0x2c
	mw_dialog_two_button_data.owner_window_handle = owner_window_handle;
   83e70:	f8c8 3008 	str.w	r3, [r8, #8]

	mw_dialog_two_button_data.two_button_dialog_window_handle = mw_add_window(&rect,
   83e74:	2e00      	cmp	r6, #0
   83e76:	d05d      	beq.n	83f34 <mw_create_window_dialog_two_button+0x14c>
   83e78:	2300      	movs	r3, #0
   83e7a:	f248 024b 	movw	r2, #32843	; 0x804b
   83e7e:	9303      	str	r3, [sp, #12]
   83e80:	9301      	str	r3, [sp, #4]
   83e82:	9300      	str	r3, [sp, #0]
   83e84:	9202      	str	r2, [sp, #8]
   83e86:	4629      	mov	r1, r5
   83e88:	4b55      	ldr	r3, [pc, #340]	; (83fe0 <mw_create_window_dialog_two_button+0x1f8>)
   83e8a:	4a56      	ldr	r2, [pc, #344]	; (83fe4 <mw_create_window_dialog_two_button+0x1fc>)
   83e8c:	a804      	add	r0, sp, #16
   83e8e:	4c56      	ldr	r4, [pc, #344]	; (83fe8 <mw_create_window_dialog_two_button+0x200>)
   83e90:	47a0      	blx	r4
   83e92:	f8c8 000c 	str.w	r0, [r8, #12]
			MW_WINDOW_FLAG_HAS_BORDER | MW_WINDOW_FLAG_HAS_TITLE_BAR |
					MW_WINDOW_FLAG_IS_VISIBLE | MW_WINDOW_FLAG_IS_MODAL | (uint32_t)(large_size ? MW_WINDOW_FLAG_LARGE_SIZE : 0U),
			NULL);

	/* check if window could be created */
	if (mw_dialog_two_button_data.two_button_dialog_window_handle == MW_INVALID_HANDLE)
   83e96:	2800      	cmp	r0, #0
   83e98:	d038      	beq.n	83f0c <mw_create_window_dialog_two_button+0x124>
		/* it couldn't so exit */
		return (MW_INVALID_HANDLE);
	}

	/* get window client rect width */
	window_client_width = mw_get_window_client_rect(mw_dialog_two_button_data.two_button_dialog_window_handle).width;
   83e9a:	4b54      	ldr	r3, [pc, #336]	; (83fec <mw_create_window_dialog_two_button+0x204>)
   83e9c:	4601      	mov	r1, r0

	/* set controls data */
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_1_data.button_label,
   83e9e:	f108 0610 	add.w	r6, r8, #16
	window_client_width = mw_get_window_client_rect(mw_dialog_two_button_data.two_button_dialog_window_handle).width;
   83ea2:	a806      	add	r0, sp, #24
   83ea4:	4798      	blx	r3
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_1_data.button_label,
   83ea6:	4f52      	ldr	r7, [pc, #328]	; (83ff0 <mw_create_window_dialog_two_button+0x208>)
	window_client_width = mw_get_window_client_rect(mw_dialog_two_button_data.two_button_dialog_window_handle).width;
   83ea8:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_1_data.button_label,
   83eac:	4630      	mov	r0, r6
   83eae:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83eb0:	210a      	movs	r1, #10
			MW_UI_BUTTON_LABEL_MAX_CHARS, button_1_label);
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_2_data.button_label,
   83eb2:	f108 051c 	add.w	r5, r8, #28
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_1_data.button_label,
   83eb6:	47b8      	blx	r7
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_2_data.button_label,
   83eb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   83eba:	210a      	movs	r1, #10
   83ebc:	4628      	mov	r0, r5
   83ebe:	47b8      	blx	r7
			MW_UI_BUTTON_LABEL_MAX_CHARS, button_2_label);

	if (large_size)
	{
		temp_handle = mw_ui_button_add_new(
				(window_client_width - BUTTON_LARGE_GAP) / 2 - MW_UI_BUTTON_LARGE_WIDTH,
   83ec0:	f1a4 030a 	sub.w	r3, r4, #10
   83ec4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   83ec8:	1058      	asrs	r0, r3, #1
   83eca:	3864      	subs	r0, #100	; 0x64
		temp_handle = mw_ui_button_add_new(
   83ecc:	f8d8 200c 	ldr.w	r2, [r8, #12]
   83ed0:	230b      	movs	r3, #11
   83ed2:	9600      	str	r6, [sp, #0]
   83ed4:	2123      	movs	r1, #35	; 0x23
   83ed6:	4e47      	ldr	r6, [pc, #284]	; (83ff4 <mw_create_window_dialog_two_button+0x20c>)
   83ed8:	b200      	sxth	r0, r0
   83eda:	47b0      	blx	r6
				&mw_dialog_two_button_data.button_1_data);

		mw_dialog_two_button_data.button_1_handle = temp_handle;

		temp_handle = mw_ui_button_add_new(
				(window_client_width / 2) + BUTTON_LARGE_GAP / 2,
   83edc:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
   83ee0:	105b      	asrs	r3, r3, #1
   83ee2:	3305      	adds	r3, #5
		mw_dialog_two_button_data.button_1_handle = temp_handle;
   83ee4:	f8c8 0000 	str.w	r0, [r8]
		temp_handle = mw_ui_button_add_new(
   83ee8:	f8d8 200c 	ldr.w	r2, [r8, #12]
   83eec:	b218      	sxth	r0, r3
   83eee:	9500      	str	r5, [sp, #0]
   83ef0:	230b      	movs	r3, #11
   83ef2:	2123      	movs	r1, #35	; 0x23
   83ef4:	47b0      	blx	r6
				35,
				mw_dialog_two_button_data.two_button_dialog_window_handle,
				MW_CONTROL_FLAG_IS_VISIBLE | MW_CONTROL_FLAG_IS_ENABLED | MW_CONTROL_FLAG_LARGE_SIZE,
				&mw_dialog_two_button_data.button_2_data);
		mw_dialog_two_button_data.button_2_handle = temp_handle;
   83ef6:	f8c8 0004 	str.w	r0, [r8, #4]
				&mw_dialog_two_button_data.button_2_data);
		mw_dialog_two_button_data.button_2_handle = temp_handle;
	}

	/* check if controls could be created */
	if (mw_dialog_two_button_data.button_1_handle == MW_INVALID_HANDLE ||
   83efa:	f8d8 3000 	ldr.w	r3, [r8]
   83efe:	b10b      	cbz	r3, 83f04 <mw_create_window_dialog_two_button+0x11c>
   83f00:	2800      	cmp	r0, #0
   83f02:	d157      	bne.n	83fb4 <mw_create_window_dialog_two_button+0x1cc>
			mw_dialog_two_button_data.button_2_handle == MW_INVALID_HANDLE)
	{
		/* remove all controls and window */
		mw_remove_window(mw_dialog_two_button_data.two_button_dialog_window_handle);
   83f04:	f8d8 000c 	ldr.w	r0, [r8, #12]
   83f08:	4b3b      	ldr	r3, [pc, #236]	; (83ff8 <mw_create_window_dialog_two_button+0x210>)
   83f0a:	4798      	blx	r3

		return (MW_INVALID_HANDLE);
   83f0c:	2000      	movs	r0, #0
	/* this window needs painting; it is coming up at the front so paint only this one */
	mw_paint_window_frame(mw_dialog_two_button_data.two_button_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
	mw_paint_window_client(mw_dialog_two_button_data.two_button_dialog_window_handle);

	return (mw_dialog_two_button_data.two_button_dialog_window_handle);
}
   83f0e:	b009      	add	sp, #36	; 0x24
   83f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (width < 2 * MW_UI_BUTTON_LARGE_WIDTH + 2 * MW_BORDER_WIDTH + BUTTON_LARGE_GAP)
   83f14:	2ad3      	cmp	r2, #211	; 0xd3
   83f16:	ddf9      	ble.n	83f0c <mw_create_window_dialog_two_button+0x124>
		rect.height = 95;
   83f18:	235f      	movs	r3, #95	; 0x5f
   83f1a:	f8ad 3016 	strh.w	r3, [sp, #22]
   83f1e:	e782      	b.n	83e26 <mw_create_window_dialog_two_button+0x3e>
		MW_ASSERT((bool)false, "Null pointer argument");
   83f20:	4b36      	ldr	r3, [pc, #216]	; (83ffc <mw_create_window_dialog_two_button+0x214>)
   83f22:	22bb      	movs	r2, #187	; 0xbb
   83f24:	4936      	ldr	r1, [pc, #216]	; (84000 <mw_create_window_dialog_two_button+0x218>)
   83f26:	2000      	movs	r0, #0
   83f28:	4c36      	ldr	r4, [pc, #216]	; (84004 <mw_create_window_dialog_two_button+0x21c>)
   83f2a:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   83f2c:	2000      	movs	r0, #0
}
   83f2e:	b009      	add	sp, #36	; 0x24
   83f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mw_dialog_two_button_data.two_button_dialog_window_handle = mw_add_window(&rect,
   83f34:	234b      	movs	r3, #75	; 0x4b
   83f36:	9603      	str	r6, [sp, #12]
   83f38:	9302      	str	r3, [sp, #8]
   83f3a:	9601      	str	r6, [sp, #4]
   83f3c:	9600      	str	r6, [sp, #0]
   83f3e:	4629      	mov	r1, r5
   83f40:	4b27      	ldr	r3, [pc, #156]	; (83fe0 <mw_create_window_dialog_two_button+0x1f8>)
   83f42:	4a28      	ldr	r2, [pc, #160]	; (83fe4 <mw_create_window_dialog_two_button+0x1fc>)
   83f44:	a804      	add	r0, sp, #16
   83f46:	4c28      	ldr	r4, [pc, #160]	; (83fe8 <mw_create_window_dialog_two_button+0x200>)
   83f48:	47a0      	blx	r4
   83f4a:	f8c8 000c 	str.w	r0, [r8, #12]
	if (mw_dialog_two_button_data.two_button_dialog_window_handle == MW_INVALID_HANDLE)
   83f4e:	2800      	cmp	r0, #0
   83f50:	d0dc      	beq.n	83f0c <mw_create_window_dialog_two_button+0x124>
	window_client_width = mw_get_window_client_rect(mw_dialog_two_button_data.two_button_dialog_window_handle).width;
   83f52:	4b26      	ldr	r3, [pc, #152]	; (83fec <mw_create_window_dialog_two_button+0x204>)
   83f54:	4601      	mov	r1, r0
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_1_data.button_label,
   83f56:	f108 0610 	add.w	r6, r8, #16
	window_client_width = mw_get_window_client_rect(mw_dialog_two_button_data.two_button_dialog_window_handle).width;
   83f5a:	a806      	add	r0, sp, #24
   83f5c:	4798      	blx	r3
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_1_data.button_label,
   83f5e:	4f24      	ldr	r7, [pc, #144]	; (83ff0 <mw_create_window_dialog_two_button+0x208>)
	window_client_width = mw_get_window_client_rect(mw_dialog_two_button_data.two_button_dialog_window_handle).width;
   83f60:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_1_data.button_label,
   83f64:	4630      	mov	r0, r6
   83f66:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83f68:	210a      	movs	r1, #10
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_2_data.button_label,
   83f6a:	f108 051c 	add.w	r5, r8, #28
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_1_data.button_label,
   83f6e:	47b8      	blx	r7
	(void)mw_util_safe_strcpy(mw_dialog_two_button_data.button_2_data.button_label,
   83f70:	9a12      	ldr	r2, [sp, #72]	; 0x48
   83f72:	210a      	movs	r1, #10
   83f74:	4628      	mov	r0, r5
   83f76:	47b8      	blx	r7
				(window_client_width - BUTTON_GAP) / 2 - MW_UI_BUTTON_WIDTH,
   83f78:	f1a4 030a 	sub.w	r3, r4, #10
   83f7c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   83f80:	1058      	asrs	r0, r3, #1
   83f82:	3832      	subs	r0, #50	; 0x32
		temp_handle = mw_ui_button_add_new(
   83f84:	f8d8 200c 	ldr.w	r2, [r8, #12]
   83f88:	2303      	movs	r3, #3
   83f8a:	9600      	str	r6, [sp, #0]
   83f8c:	211e      	movs	r1, #30
   83f8e:	4e19      	ldr	r6, [pc, #100]	; (83ff4 <mw_create_window_dialog_two_button+0x20c>)
   83f90:	b200      	sxth	r0, r0
   83f92:	47b0      	blx	r6
				(window_client_width / 2) + BUTTON_GAP / 2,
   83f94:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
   83f98:	105b      	asrs	r3, r3, #1
   83f9a:	3305      	adds	r3, #5
		mw_dialog_two_button_data.button_1_handle = temp_handle;
   83f9c:	f8c8 0000 	str.w	r0, [r8]
		temp_handle = mw_ui_button_add_new(
   83fa0:	f8d8 200c 	ldr.w	r2, [r8, #12]
   83fa4:	b218      	sxth	r0, r3
   83fa6:	9500      	str	r5, [sp, #0]
   83fa8:	2303      	movs	r3, #3
   83faa:	211e      	movs	r1, #30
   83fac:	47b0      	blx	r6
		mw_dialog_two_button_data.button_2_handle = temp_handle;
   83fae:	f8c8 0004 	str.w	r0, [r8, #4]
   83fb2:	e7a2      	b.n	83efa <mw_create_window_dialog_two_button+0x112>
	mw_paint_window_frame(owner_window_handle, MW_WINDOW_FRAME_COMPONENT_TITLE_BAR);
   83fb4:	2101      	movs	r1, #1
   83fb6:	9814      	ldr	r0, [sp, #80]	; 0x50
   83fb8:	4c13      	ldr	r4, [pc, #76]	; (84008 <mw_create_window_dialog_two_button+0x220>)
   83fba:	47a0      	blx	r4
	mw_paint_window_frame(mw_dialog_two_button_data.two_button_dialog_window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   83fbc:	211f      	movs	r1, #31
   83fbe:	f8d8 000c 	ldr.w	r0, [r8, #12]
   83fc2:	47a0      	blx	r4
	mw_paint_window_client(mw_dialog_two_button_data.two_button_dialog_window_handle);
   83fc4:	f8d8 000c 	ldr.w	r0, [r8, #12]
   83fc8:	4b10      	ldr	r3, [pc, #64]	; (8400c <mw_create_window_dialog_two_button+0x224>)
   83fca:	4798      	blx	r3
	return (mw_dialog_two_button_data.two_button_dialog_window_handle);
   83fcc:	f8d8 000c 	ldr.w	r0, [r8, #12]
   83fd0:	e79d      	b.n	83f0e <mw_create_window_dialog_two_button+0x126>
   83fd2:	bf00      	nop
   83fd4:	00086e2d 	.word	0x00086e2d
   83fd8:	00086e31 	.word	0x00086e31
   83fdc:	0008dfd9 	.word	0x0008dfd9
   83fe0:	00083d89 	.word	0x00083d89
   83fe4:	00083cc1 	.word	0x00083cc1
   83fe8:	0008e94d 	.word	0x0008e94d
   83fec:	00090735 	.word	0x00090735
   83ff0:	00096f31 	.word	0x00096f31
   83ff4:	00097985 	.word	0x00097985
   83ff8:	000911c9 	.word	0x000911c9
   83ffc:	000a6618 	.word	0x000a6618
   84000:	000a6c60 	.word	0x000a6c60
   84004:	00095add 	.word	0x00095add
   84008:	00090281 	.word	0x00090281
   8400c:	00090409 	.word	0x00090409
   84010:	200715b0 	.word	0x200715b0

00084014 <filled_rectangle>:
 * @param width Width of rectangle to draw
 * @param height Height of rectangle to draw
 * @param colour Solid fill colour
 */
static void filled_rectangle(const mw_gl_draw_info_t *draw_info, int16_t client_x, int16_t client_y, int16_t width, int16_t height, mw_hal_lcd_colour_t colour)
{
   84014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84018:	b083      	sub	sp, #12
   8401a:	461d      	mov	r5, r3
   8401c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8401e:	4604      	mov	r4, r0
	int16_t overlap;
	int16_t gl_max_x = MW_GL_MAX_X;
   84020:	4849      	ldr	r0, [pc, #292]	; (84148 <filled_rectangle+0x134>)
{
   84022:	460e      	mov	r6, r1
   84024:	4617      	mov	r7, r2
   84026:	9301      	str	r3, [sp, #4]
   84028:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
	int16_t gl_max_x = MW_GL_MAX_X;
   8402c:	4780      	blx	r0
	int16_t gl_max_y = MW_GL_MAX_Y;
   8402e:	4b47      	ldr	r3, [pc, #284]	; (8414c <filled_rectangle+0x138>)
	int16_t gl_max_x = MW_GL_MAX_X;
   84030:	4682      	mov	sl, r0
	int16_t gl_max_y = MW_GL_MAX_Y;
   84032:	4798      	blx	r3
   84034:	4683      	mov	fp, r0

	MW_ASSERT(draw_info, "Null pointer argument");
   84036:	1c20      	adds	r0, r4, #0
   84038:	4b45      	ldr	r3, [pc, #276]	; (84150 <filled_rectangle+0x13c>)
   8403a:	bf18      	it	ne
   8403c:	2001      	movne	r0, #1
   8403e:	22b4      	movs	r2, #180	; 0xb4
   84040:	4944      	ldr	r1, [pc, #272]	; (84154 <filled_rectangle+0x140>)
   84042:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8415c <filled_rectangle+0x148>
   84046:	47c8      	blx	r9

	if (draw_info->clip_rect.width == 0 || draw_info->clip_rect.height == 0)
   84048:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   8404c:	2b00      	cmp	r3, #0
   8404e:	d066      	beq.n	8411e <filled_rectangle+0x10a>
   84050:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   84054:	2800      	cmp	r0, #0
   84056:	d062      	beq.n	8411e <filled_rectangle+0x10a>
	{
		return;
	}

	if (client_x < draw_info->clip_rect.x)
   84058:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   8405c:	42b2      	cmp	r2, r6
   8405e:	dd03      	ble.n	84068 <filled_rectangle+0x54>
	{
		overlap = draw_info->clip_rect.x - client_x;
   84060:	1b91      	subs	r1, r2, r6
		width -= overlap;
   84062:	4616      	mov	r6, r2
   84064:	1a6d      	subs	r5, r5, r1
   84066:	b22d      	sxth	r5, r5
		client_x = draw_info->clip_rect.x;
	}

	if (client_y < draw_info->clip_rect.y)
   84068:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   8406c:	42b9      	cmp	r1, r7
   8406e:	dc59      	bgt.n	84124 <filled_rectangle+0x110>
		overlap = draw_info->clip_rect.y - client_y;
		height -= overlap;
		client_y = draw_info->clip_rect.y;
	}

	if (client_x + width > draw_info->clip_rect.x + draw_info->clip_rect.width)
   84070:	eb05 0e06 	add.w	lr, r5, r6
   84074:	eb02 0c03 	add.w	ip, r2, r3
   84078:	45e6      	cmp	lr, ip
	{
		overlap = client_x + width - (draw_info->clip_rect.x + draw_info->clip_rect.width);
		width -= overlap;
   8407a:	bfc8      	it	gt
   8407c:	ebac 0506 	subgt.w	r5, ip, r6
	}

	if (client_y + height > draw_info->clip_rect.y + draw_info->clip_rect.height)
   84080:	eb08 0e07 	add.w	lr, r8, r7
   84084:	eb01 0c00 	add.w	ip, r1, r0
		width -= overlap;
   84088:	bfc8      	it	gt
   8408a:	b22d      	sxthgt	r5, r5
	if (client_y + height > draw_info->clip_rect.y + draw_info->clip_rect.height)
   8408c:	45e6      	cmp	lr, ip
	{
		overlap = client_y + height - (draw_info->clip_rect.y + draw_info->clip_rect.height);
		height -= overlap;
   8408e:	bfc4      	itt	gt
   84090:	ebac 0807 	subgt.w	r8, ip, r7
   84094:	fa0f f888 	sxthgt.w	r8, r8
	}

	if (width <= 0 || height <= 0)
   84098:	2d00      	cmp	r5, #0
   8409a:	dd40      	ble.n	8411e <filled_rectangle+0x10a>
   8409c:	f1b8 0f00 	cmp.w	r8, #0
   840a0:	dd3d      	ble.n	8411e <filled_rectangle+0x10a>
	{
		return;
	}

	if (draw_info->origin_x + draw_info->clip_rect.x + draw_info->clip_rect.width < 0 ||
   840a2:	f9b4 e000 	ldrsh.w	lr, [r4]
   840a6:	4472      	add	r2, lr
   840a8:	42d3      	cmn	r3, r2
   840aa:	d438      	bmi.n	8411e <filled_rectangle+0x10a>
			draw_info->origin_y + draw_info->clip_rect.y + draw_info->clip_rect.height < 0)
   840ac:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   840b0:	4419      	add	r1, r3
	if (draw_info->origin_x + draw_info->clip_rect.x + draw_info->clip_rect.width < 0 ||
   840b2:	42c8      	cmn	r0, r1
   840b4:	d433      	bmi.n	8411e <filled_rectangle+0x10a>
	{
		return;
	}

	if (draw_info->origin_x + client_x + width < 0 || draw_info->origin_y + client_y + height < 0)
   840b6:	eb06 000e 	add.w	r0, r6, lr
   840ba:	42c5      	cmn	r5, r0
   840bc:	d42f      	bmi.n	8411e <filled_rectangle+0x10a>
   840be:	18fc      	adds	r4, r7, r3
   840c0:	eb18 0f04 	cmn.w	r8, r4
   840c4:	d42b      	bmi.n	8411e <filled_rectangle+0x10a>
	int16_t gl_max_x = MW_GL_MAX_X;
   840c6:	f10a 3aff 	add.w	sl, sl, #4294967295
	{
		return;
	}

	if (draw_info->origin_x + draw_info->clip_rect.x > gl_max_x ||
   840ca:	fa0f fa8a 	sxth.w	sl, sl
   840ce:	4552      	cmp	r2, sl
   840d0:	dc25      	bgt.n	8411e <filled_rectangle+0x10a>
	int16_t gl_max_y = MW_GL_MAX_Y;
   840d2:	f10b 3bff 	add.w	fp, fp, #4294967295
			draw_info->origin_y + draw_info->clip_rect.y > gl_max_y)
   840d6:	fa0f fb8b 	sxth.w	fp, fp
	if (draw_info->origin_x + draw_info->clip_rect.x > gl_max_x ||
   840da:	4559      	cmp	r1, fp
   840dc:	dc1f      	bgt.n	8411e <filled_rectangle+0x10a>
	{
		return;
	}

	if (draw_info->origin_x + client_x > gl_max_x || draw_info->origin_y + client_y > gl_max_y)
   840de:	4550      	cmp	r0, sl
   840e0:	dc1d      	bgt.n	8411e <filled_rectangle+0x10a>
   840e2:	455c      	cmp	r4, fp
   840e4:	dc1b      	bgt.n	8411e <filled_rectangle+0x10a>
	{
		return;
	}

	if (draw_info->origin_x + client_x < 0)
   840e6:	2800      	cmp	r0, #0
   840e8:	db24      	blt.n	84134 <filled_rectangle+0x120>
		{
			return;
		}
	}

	if (draw_info->origin_y + client_y < 0)
   840ea:	2c00      	cmp	r4, #0
	{
		height += draw_info->origin_y;
   840ec:	b29b      	uxth	r3, r3
	if (draw_info->origin_y + client_y < 0)
   840ee:	db0e      	blt.n	8410e <filled_rectangle+0xfa>
			return;
		}
	}

	mw_hal_lcd_filled_rectangle(client_x + draw_info->origin_x,
			client_y + draw_info->origin_y,
   840f0:	443b      	add	r3, r7
	mw_hal_lcd_filled_rectangle(client_x + draw_info->origin_x,
   840f2:	b219      	sxth	r1, r3
   840f4:	4c18      	ldr	r4, [pc, #96]	; (84158 <filled_rectangle+0x144>)
   840f6:	9b01      	ldr	r3, [sp, #4]
   840f8:	462a      	mov	r2, r5
   840fa:	930c      	str	r3, [sp, #48]	; 0x30
   840fc:	46a4      	mov	ip, r4
   840fe:	4643      	mov	r3, r8
   84100:	eb0e 0006 	add.w	r0, lr, r6
   84104:	b200      	sxth	r0, r0
			width,
			height,
			colour);
}
   84106:	b003      	add	sp, #12
   84108:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_hal_lcd_filled_rectangle(client_x + draw_info->origin_x,
   8410c:	4760      	bx	ip
		height += draw_info->origin_y;
   8410e:	4498      	add	r8, r3
   84110:	fa0f f888 	sxth.w	r8, r8
		client_y -= draw_info->origin_y;
   84114:	1aff      	subs	r7, r7, r3
		if (height <= 0)
   84116:	f1b8 0f00 	cmp.w	r8, #0
		client_y -= draw_info->origin_y;
   8411a:	b23f      	sxth	r7, r7
		if (height <= 0)
   8411c:	dce8      	bgt.n	840f0 <filled_rectangle+0xdc>
}
   8411e:	b003      	add	sp, #12
   84120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		overlap = draw_info->clip_rect.y - client_y;
   84124:	eba1 0e07 	sub.w	lr, r1, r7
		height -= overlap;
   84128:	eba8 080e 	sub.w	r8, r8, lr
   8412c:	460f      	mov	r7, r1
   8412e:	fa0f f888 	sxth.w	r8, r8
   84132:	e79d      	b.n	84070 <filled_rectangle+0x5c>
		width += draw_info->origin_x;
   84134:	fa1f f28e 	uxth.w	r2, lr
   84138:	4415      	add	r5, r2
   8413a:	b22d      	sxth	r5, r5
		client_x -= draw_info->origin_x;
   8413c:	1ab6      	subs	r6, r6, r2
		if (width <= 0)
   8413e:	2d00      	cmp	r5, #0
		client_x -= draw_info->origin_x;
   84140:	b236      	sxth	r6, r6
		if (width <= 0)
   84142:	dcd2      	bgt.n	840ea <filled_rectangle+0xd6>
   84144:	e7eb      	b.n	8411e <filled_rectangle+0x10a>
   84146:	bf00      	nop
   84148:	00086e2d 	.word	0x00086e2d
   8414c:	00086e31 	.word	0x00086e31
   84150:	000a6618 	.word	0x000a6618
   84154:	000ab020 	.word	0x000ab020
   84158:	00086f31 	.word	0x00086f31
   8415c:	00095add 	.word	0x00095add

00084160 <title_font_string>:
 * @param x Coordinate of the left edge of the rectangle containing the first character
 * @param y Coordinate of the top edge of the rectangle containing the first character
 * @param s Pointer to the null terminated string containing characters
 */
static void title_font_string(const mw_gl_draw_info_t *draw_info, int16_t x, int16_t y, const char *s)
{
   84160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84164:	461c      	mov	r4, r3
   84166:	b095      	sub	sp, #84	; 0x54
   84168:	9313      	str	r3, [sp, #76]	; 0x4c
   8416a:	4681      	mov	r9, r0
	size_t length = strlen(s);
   8416c:	4baa      	ldr	r3, [pc, #680]	; (84418 <title_font_string+0x2b8>)
   8416e:	4620      	mov	r0, r4
{
   84170:	9105      	str	r1, [sp, #20]
   84172:	9209      	str	r2, [sp, #36]	; 0x24
	size_t length = strlen(s);
   84174:	4798      	blx	r3
   84176:	9011      	str	r0, [sp, #68]	; 0x44
	int16_t next_char_start_position_along_string = 0;
	int16_t position_across_character;
	int16_t string_width_pixels;
	uint16_t temp_uint16;

	if (draw_info == NULL || s == NULL)
   84178:	f1b9 0f00 	cmp.w	r9, #0
   8417c:	d011      	beq.n	841a2 <title_font_string+0x42>
	{
		MW_ASSERT((bool)false, "Null pointer argument");
		return (0);
	}

	if (gc.font == MW_GL_TITLE_FONT)
   8417e:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 84434 <title_font_string+0x2d4>
   84182:	f89b 3032 	ldrb.w	r3, [fp, #50]	; 0x32
   84186:	2b05      	cmp	r3, #5
   84188:	d016      	beq.n	841b8 <title_font_string+0x58>
			width += (int16_t)mw_title_font_positions[s[i] - ' ' + 1] - (int16_t)mw_title_font_positions[s[i] - ' '];
		}
	}
	else
	{
		width = (int16_t)strlen(s) * (mw_gl_get_font_width() + 1);
   8418a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
	switch (gc.font)
   8418e:	2b04      	cmp	r3, #4
   84190:	f200 8258 	bhi.w	84644 <title_font_string+0x4e4>
   84194:	e8df f013 	tbh	[pc, r3, lsl #1]
   84198:	023e0235 	.word	0x023e0235
   8419c:	024a0244 	.word	0x024a0244
   841a0:	0250      	.short	0x0250
		MW_ASSERT((bool)false, "Null pointer argument");
   841a2:	4c9e      	ldr	r4, [pc, #632]	; (8441c <title_font_string+0x2bc>)
   841a4:	4648      	mov	r0, r9
   841a6:	f240 32e5 	movw	r2, #997	; 0x3e5
   841aa:	46a4      	mov	ip, r4
   841ac:	4b9c      	ldr	r3, [pc, #624]	; (84420 <title_font_string+0x2c0>)
   841ae:	499d      	ldr	r1, [pc, #628]	; (84424 <title_font_string+0x2c4>)
}
   841b0:	b015      	add	sp, #84	; 0x54
   841b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MW_ASSERT((bool)false, "Null pointer argument");
   841b6:	4760      	bx	ip
   841b8:	4604      	mov	r4, r0
		for (i = 0U; i < strlen(s); i++)
   841ba:	2800      	cmp	r0, #0
   841bc:	f000 8244 	beq.w	84648 <title_font_string+0x4e8>
   841c0:	2100      	movs	r1, #0
   841c2:	460b      	mov	r3, r1
   841c4:	460a      	mov	r2, r1
   841c6:	4898      	ldr	r0, [pc, #608]	; (84428 <title_font_string+0x2c8>)
   841c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
			width += (int16_t)mw_title_font_positions[s[i] - ' ' + 1] - (int16_t)mw_title_font_positions[s[i] - ' '];
   841ca:	5caa      	ldrb	r2, [r5, r2]
		for (i = 0U; i < strlen(s); i++)
   841cc:	3101      	adds	r1, #1
			width += (int16_t)mw_title_font_positions[s[i] - ' ' + 1] - (int16_t)mw_title_font_positions[s[i] - ' '];
   841ce:	f1a2 061f 	sub.w	r6, r2, #31
   841d2:	f830 6016 	ldrh.w	r6, [r0, r6, lsl #1]
   841d6:	3a20      	subs	r2, #32
   841d8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
		for (i = 0U; i < strlen(s); i++)
   841dc:	b2c9      	uxtb	r1, r1
			width += (int16_t)mw_title_font_positions[s[i] - ' ' + 1] - (int16_t)mw_title_font_positions[s[i] - ' '];
   841de:	4433      	add	r3, r6
   841e0:	1a9b      	subs	r3, r3, r2
		for (i = 0U; i < strlen(s); i++)
   841e2:	428c      	cmp	r4, r1
			width += (int16_t)mw_title_font_positions[s[i] - ' ' + 1] - (int16_t)mw_title_font_positions[s[i] - ' '];
   841e4:	b21b      	sxth	r3, r3
		for (i = 0U; i < strlen(s); i++)
   841e6:	460a      	mov	r2, r1
   841e8:	d8ef      	bhi.n	841ca <title_font_string+0x6a>
	switch (gc.text_rotation)
   841ea:	f89b 2033 	ldrb.w	r2, [fp, #51]	; 0x33
   841ee:	2a03      	cmp	r2, #3
   841f0:	f200 80be 	bhi.w	84370 <title_font_string+0x210>
   841f4:	e8df f002 	tbb	[pc, r2]
   841f8:	02305a80 	.word	0x02305a80
		if (x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   841fc:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
   84200:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
   84204:	9c05      	ldr	r4, [sp, #20]
   84206:	440a      	add	r2, r1
   84208:	4294      	cmp	r4, r2
   8420a:	f280 80ae 	bge.w	8436a <title_font_string+0x20a>
				y <= draw_info->clip_rect.y ||
   8420e:	f9b9 0006 	ldrsh.w	r0, [r9, #6]
		if (x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   84212:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84214:	4285      	cmp	r5, r0
   84216:	f340 80a8 	ble.w	8436a <title_font_string+0x20a>
				x + MW_GL_TITLE_FONT_HEIGHT <= draw_info->clip_rect.x ||
   8421a:	4622      	mov	r2, r4
   8421c:	320f      	adds	r2, #15
				y <= draw_info->clip_rect.y ||
   8421e:	4291      	cmp	r1, r2
   84220:	f300 80a3 	bgt.w	8436a <title_font_string+0x20a>
				y - string_width_pixels >= draw_info->clip_rect.y +  draw_info->clip_rect.height)
   84224:	f9b9 200a 	ldrsh.w	r2, [r9, #10]
   84228:	1ae9      	subs	r1, r5, r3
   8422a:	4402      	add	r2, r0
				x + MW_GL_TITLE_FONT_HEIGHT <= draw_info->clip_rect.x ||
   8422c:	4291      	cmp	r1, r2
   8422e:	f280 809c 	bge.w	8436a <title_font_string+0x20a>
		if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   84232:	f89b 2031 	ldrb.w	r2, [fp, #49]	; 0x31
   84236:	2a01      	cmp	r2, #1
   84238:	f040 80a1 	bne.w	8437e <title_font_string+0x21e>
					y - string_width_pixels + 1,
   8423c:	462a      	mov	r2, r5
			filled_rectangle(draw_info,
   8423e:	f8db 1004 	ldr.w	r1, [fp, #4]
					y - string_width_pixels + 1,
   84242:	3201      	adds	r2, #1
   84244:	1ad2      	subs	r2, r2, r3
			filled_rectangle(draw_info,
   84246:	9300      	str	r3, [sp, #0]
   84248:	9101      	str	r1, [sp, #4]
   8424a:	b212      	sxth	r2, r2
   8424c:	4621      	mov	r1, r4
   8424e:	2310      	movs	r3, #16
   84250:	4648      	mov	r0, r9
   84252:	4c76      	ldr	r4, [pc, #472]	; (8442c <title_font_string+0x2cc>)
   84254:	47a0      	blx	r4
   84256:	e092      	b.n	8437e <title_font_string+0x21e>
		if (x <= draw_info->clip_rect.x ||
   84258:	f9b9 4004 	ldrsh.w	r4, [r9, #4]
   8425c:	9905      	ldr	r1, [sp, #20]
   8425e:	42a1      	cmp	r1, r4
   84260:	f340 8083 	ble.w	8436a <title_font_string+0x20a>
				y <= draw_info->clip_rect.y ||
   84264:	f9b9 0006 	ldrsh.w	r0, [r9, #6]
		if (x <= draw_info->clip_rect.x ||
   84268:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8426a:	4285      	cmp	r5, r0
   8426c:	dd7d      	ble.n	8436a <title_font_string+0x20a>
				x - string_width_pixels >= draw_info->clip_rect.x  + draw_info->clip_rect.width ||
   8426e:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
   84272:	1ac9      	subs	r1, r1, r3
   84274:	4422      	add	r2, r4
				y <= draw_info->clip_rect.y ||
   84276:	4291      	cmp	r1, r2
   84278:	da77      	bge.n	8436a <title_font_string+0x20a>
				y - MW_GL_TITLE_FONT_HEIGHT >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   8427a:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
   8427e:	f1a5 020f 	sub.w	r2, r5, #15
   84282:	4401      	add	r1, r0
				x - string_width_pixels >= draw_info->clip_rect.x  + draw_info->clip_rect.width ||
   84284:	428a      	cmp	r2, r1
   84286:	dc70      	bgt.n	8436a <title_font_string+0x20a>
		if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   84288:	f89b 1031 	ldrb.w	r1, [fp, #49]	; 0x31
   8428c:	2901      	cmp	r1, #1
   8428e:	d176      	bne.n	8437e <title_font_string+0x21e>
			filled_rectangle(draw_info,
   84290:	2410      	movs	r4, #16
					x - string_width_pixels + 1,
   84292:	9905      	ldr	r1, [sp, #20]
			filled_rectangle(draw_info,
   84294:	f8db 0004 	ldr.w	r0, [fp, #4]
					x - string_width_pixels + 1,
   84298:	3101      	adds	r1, #1
   8429a:	1ac9      	subs	r1, r1, r3
			filled_rectangle(draw_info,
   8429c:	9400      	str	r4, [sp, #0]
   8429e:	9001      	str	r0, [sp, #4]
   842a0:	b212      	sxth	r2, r2
   842a2:	b209      	sxth	r1, r1
   842a4:	4648      	mov	r0, r9
   842a6:	4c61      	ldr	r4, [pc, #388]	; (8442c <title_font_string+0x2cc>)
   842a8:	47a0      	blx	r4
   842aa:	e068      	b.n	8437e <title_font_string+0x21e>
		if (x - MW_GL_TITLE_FONT_HEIGHT >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   842ac:	f9b9 4004 	ldrsh.w	r4, [r9, #4]
   842b0:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
   842b4:	9d05      	ldr	r5, [sp, #20]
   842b6:	4422      	add	r2, r4
   842b8:	f1a5 010f 	sub.w	r1, r5, #15
   842bc:	4291      	cmp	r1, r2
   842be:	dc54      	bgt.n	8436a <title_font_string+0x20a>
				y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   842c0:	f9b9 0006 	ldrsh.w	r0, [r9, #6]
   842c4:	f9b9 200a 	ldrsh.w	r2, [r9, #10]
		if (x - MW_GL_TITLE_FONT_HEIGHT >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   842c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
				y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   842ca:	4402      	add	r2, r0
		if (x - MW_GL_TITLE_FONT_HEIGHT >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   842cc:	4297      	cmp	r7, r2
   842ce:	da4c      	bge.n	8436a <title_font_string+0x20a>
				y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   842d0:	42a5      	cmp	r5, r4
   842d2:	dd4a      	ble.n	8436a <title_font_string+0x20a>
				y + string_width_pixels <= draw_info->clip_rect.y)
   842d4:	19da      	adds	r2, r3, r7
				x <= draw_info->clip_rect.x ||
   842d6:	4290      	cmp	r0, r2
   842d8:	da47      	bge.n	8436a <title_font_string+0x20a>
		if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   842da:	f89b 2031 	ldrb.w	r2, [fp, #49]	; 0x31
   842de:	2a01      	cmp	r2, #1
   842e0:	d14d      	bne.n	8437e <title_font_string+0x21e>
			filled_rectangle(draw_info,
   842e2:	f8db 2004 	ldr.w	r2, [fp, #4]
   842e6:	9300      	str	r3, [sp, #0]
   842e8:	9201      	str	r2, [sp, #4]
   842ea:	b209      	sxth	r1, r1
   842ec:	2310      	movs	r3, #16
   842ee:	463a      	mov	r2, r7
   842f0:	4648      	mov	r0, r9
   842f2:	4c4e      	ldr	r4, [pc, #312]	; (8442c <title_font_string+0x2cc>)
   842f4:	47a0      	blx	r4
   842f6:	e042      	b.n	8437e <title_font_string+0x21e>
		if (x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   842f8:	f9b9 0004 	ldrsh.w	r0, [r9, #4]
   842fc:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
   84300:	9c05      	ldr	r4, [sp, #20]
   84302:	4402      	add	r2, r0
   84304:	4294      	cmp	r4, r2
   84306:	da30      	bge.n	8436a <title_font_string+0x20a>
				y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   84308:	f9b9 1006 	ldrsh.w	r1, [r9, #6]
   8430c:	f9b9 200a 	ldrsh.w	r2, [r9, #10]
		if (x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   84310:	9e09      	ldr	r6, [sp, #36]	; 0x24
				y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   84312:	440a      	add	r2, r1
		if (x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   84314:	4296      	cmp	r6, r2
   84316:	da28      	bge.n	8436a <title_font_string+0x20a>
				x + string_width_pixels <= draw_info->clip_rect.x ||
   84318:	191a      	adds	r2, r3, r4
				y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   8431a:	4290      	cmp	r0, r2
   8431c:	da25      	bge.n	8436a <title_font_string+0x20a>
				y + MW_GL_TITLE_FONT_HEIGHT <= draw_info->clip_rect.y)
   8431e:	f106 020f 	add.w	r2, r6, #15
				x + string_width_pixels <= draw_info->clip_rect.x ||
   84322:	4291      	cmp	r1, r2
   84324:	dc21      	bgt.n	8436a <title_font_string+0x20a>
		if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   84326:	f89b 2031 	ldrb.w	r2, [fp, #49]	; 0x31
   8432a:	2a01      	cmp	r2, #1
   8432c:	d127      	bne.n	8437e <title_font_string+0x21e>
			filled_rectangle(draw_info,
   8432e:	2110      	movs	r1, #16
   84330:	f8db 2004 	ldr.w	r2, [fp, #4]
   84334:	4648      	mov	r0, r9
   84336:	e88d 0006 	stmia.w	sp, {r1, r2}
   8433a:	4621      	mov	r1, r4
   8433c:	4632      	mov	r2, r6
   8433e:	4c3b      	ldr	r4, [pc, #236]	; (8442c <title_font_string+0x2cc>)
   84340:	47a0      	blx	r4
   84342:	e01c      	b.n	8437e <title_font_string+0x21e>
			position_across_character = 0;
   84344:	2500      	movs	r5, #0
   84346:	9b08      	ldr	r3, [sp, #32]
   84348:	3301      	adds	r3, #1
		for (bitmap_y = 0; bitmap_y < MW_GL_TITLE_FONT_HEIGHT; bitmap_y++)
   8434a:	2b10      	cmp	r3, #16
   8434c:	9308      	str	r3, [sp, #32]
   8434e:	d128      	bne.n	843a2 <title_font_string+0x242>
	for (i = 0U; i < length; i++)
   84350:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84352:	9911      	ldr	r1, [sp, #68]	; 0x44
   84354:	3301      	adds	r3, #1
   84356:	b2db      	uxtb	r3, r3
   84358:	4618      	mov	r0, r3
   8435a:	9312      	str	r3, [sp, #72]	; 0x48
		next_char_start_position_along_string += position_across_character;
   8435c:	9b06      	ldr	r3, [sp, #24]
	for (i = 0U; i < length; i++)
   8435e:	4281      	cmp	r1, r0
		next_char_start_position_along_string += position_across_character;
   84360:	442b      	add	r3, r5
   84362:	46c1      	mov	r9, r8
   84364:	b21b      	sxth	r3, r3
	for (i = 0U; i < length; i++)
   84366:	4602      	mov	r2, r0
   84368:	d813      	bhi.n	84392 <title_font_string+0x232>
}
   8436a:	b015      	add	sp, #84	; 0x54
   8436c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		MW_ASSERT((bool)false, "Unknown text rotation");
   84370:	4b2f      	ldr	r3, [pc, #188]	; (84430 <title_font_string+0x2d0>)
   84372:	f240 4242 	movw	r2, #1090	; 0x442
   84376:	492b      	ldr	r1, [pc, #172]	; (84424 <title_font_string+0x2c4>)
   84378:	2000      	movs	r0, #0
   8437a:	4c28      	ldr	r4, [pc, #160]	; (8441c <title_font_string+0x2bc>)
   8437c:	47a0      	blx	r4
	for (i = 0U; i < length; i++)
   8437e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84380:	2b00      	cmp	r3, #0
   84382:	d0f2      	beq.n	8436a <title_font_string+0x20a>
   84384:	2200      	movs	r2, #0
   84386:	4613      	mov	r3, r2
   84388:	4927      	ldr	r1, [pc, #156]	; (84428 <title_font_string+0x2c8>)
   8438a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 84438 <title_font_string+0x2d8>
   8438e:	9212      	str	r2, [sp, #72]	; 0x48
   84390:	9110      	str	r1, [sp, #64]	; 0x40
   84392:	2100      	movs	r1, #0
   84394:	46c8      	mov	r8, r9
   84396:	9108      	str	r1, [sp, #32]
   84398:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8439a:	b29b      	uxth	r3, r3
   8439c:	188a      	adds	r2, r1, r2
   8439e:	920c      	str	r2, [sp, #48]	; 0x30
   843a0:	9306      	str	r3, [sp, #24]
			if (c < ' ' || c > '~')
   843a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			mask >>= (uint8_t)temp_uint16;
   843a4:	2280      	movs	r2, #128	; 0x80
			if (c < ' ' || c > '~')
   843a6:	781b      	ldrb	r3, [r3, #0]
			start_pos_in_bitmap = (int16_t)mw_title_font_positions[(uint8_t)c];
   843a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
			if (c < ' ' || c > '~')
   843aa:	3b20      	subs	r3, #32
   843ac:	b2db      	uxtb	r3, r3
   843ae:	2b5e      	cmp	r3, #94	; 0x5e
   843b0:	bf86      	itte	hi
   843b2:	230a      	movhi	r3, #10
   843b4:	210b      	movhi	r1, #11
   843b6:	1c59      	addls	r1, r3, #1
			start_pos_in_bitmap = (int16_t)mw_title_font_positions[(uint8_t)c];
   843b8:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
			end_pos_in_bitmap = (int16_t)mw_title_font_positions[(uint8_t)c + 1U];
   843bc:	f935 7011 	ldrsh.w	r7, [r5, r1, lsl #1]
			mask >>= (uint8_t)temp_uint16;
   843c0:	f004 0307 	and.w	r3, r4, #7
			start_pos_in_bitmap = (int16_t)mw_title_font_positions[(uint8_t)c];
   843c4:	b224      	sxth	r4, r4
			mask >>= (uint8_t)temp_uint16;
   843c6:	fa42 f303 	asr.w	r3, r2, r3
			for (bitmap_x = start_pos_in_bitmap; bitmap_x < end_pos_in_bitmap; bitmap_x++)
   843ca:	42bc      	cmp	r4, r7
			mask >>= (uint8_t)temp_uint16;
   843cc:	fa5f f983 	uxtb.w	r9, r3
			for (bitmap_x = start_pos_in_bitmap; bitmap_x < end_pos_in_bitmap; bitmap_x++)
   843d0:	dab8      	bge.n	84344 <title_font_string+0x1e4>
   843d2:	2357      	movs	r3, #87	; 0x57
   843d4:	2500      	movs	r5, #0
   843d6:	9908      	ldr	r1, [sp, #32]
   843d8:	9704      	str	r7, [sp, #16]
   843da:	fb03 f301 	mul.w	r3, r3, r1
   843de:	9303      	str	r3, [sp, #12]
   843e0:	9b05      	ldr	r3, [sp, #20]
   843e2:	b28a      	uxth	r2, r1
   843e4:	18d3      	adds	r3, r2, r3
   843e6:	b29b      	uxth	r3, r3
   843e8:	930f      	str	r3, [sp, #60]	; 0x3c
   843ea:	b21b      	sxth	r3, r3
   843ec:	9207      	str	r2, [sp, #28]
   843ee:	930a      	str	r3, [sp, #40]	; 0x28
				byte_from_bitmap = mw_title_font_bitmap[((uint16_t)bitmap_x >> 3U) + (uint16_t)bitmap_y * 87U];
   843f0:	b2a4      	uxth	r4, r4
				if ((byte_from_bitmap & mask) == 0U)
   843f2:	9a03      	ldr	r2, [sp, #12]
				byte_from_bitmap = mw_title_font_bitmap[((uint16_t)bitmap_x >> 3U) + (uint16_t)bitmap_y * 87U];
   843f4:	eb0a 03d4 	add.w	r3, sl, r4, lsr #3
				if ((byte_from_bitmap & mask) == 0U)
   843f8:	5c9b      	ldrb	r3, [r3, r2]
   843fa:	ea19 0f03 	tst.w	r9, r3
   843fe:	f040 80fe 	bne.w	845fe <title_font_string+0x49e>
					switch (gc.text_rotation)
   84402:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
   84406:	2b03      	cmp	r3, #3
   84408:	f200 80f9 	bhi.w	845fe <title_font_string+0x49e>
   8440c:	e8df f013 	tbh	[pc, r3, lsl #1]
   84410:	00a600d5 	.word	0x00a600d5
   84414:	00160063 	.word	0x00160063
   84418:	000a5e79 	.word	0x000a5e79
   8441c:	00095add 	.word	0x00095add
   84420:	000a6618 	.word	0x000a6618
   84424:	000ab040 	.word	0x000ab040
   84428:	000aaf58 	.word	0x000aaf58
   8442c:	00084015 	.word	0x00084015
   84430:	000ab198 	.word	0x000ab198
   84434:	200715e0 	.word	0x200715e0
   84438:	000aa9e8 	.word	0x000aa9e8
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   8443c:	f8db 3000 	ldr.w	r3, [fp]
	MW_ASSERT(draw_info, "Null pointer argument");
   84440:	4e82      	ldr	r6, [pc, #520]	; (8464c <title_font_string+0x4ec>)
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   84442:	930d      	str	r3, [sp, #52]	; 0x34
	int16_t root_width = MW_ROOT_WIDTH;
   84444:	4b82      	ldr	r3, [pc, #520]	; (84650 <title_font_string+0x4f0>)
   84446:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   84448:	4b82      	ldr	r3, [pc, #520]	; (84654 <title_font_string+0x4f4>)
	int16_t root_width = MW_ROOT_WIDTH;
   8444a:	4607      	mov	r7, r0
	int16_t root_height = MW_ROOT_HEIGHT;
   8444c:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   8444e:	4b82      	ldr	r3, [pc, #520]	; (84658 <title_font_string+0x4f8>)
	int16_t root_height = MW_ROOT_HEIGHT;
   84450:	900b      	str	r0, [sp, #44]	; 0x2c
	MW_ASSERT(draw_info, "Null pointer argument");
   84452:	2285      	movs	r2, #133	; 0x85
   84454:	4981      	ldr	r1, [pc, #516]	; (8465c <title_font_string+0x4fc>)
   84456:	2001      	movs	r0, #1
   84458:	47b0      	blx	r6
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   8445a:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
   8445e:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
   84462:	990a      	ldr	r1, [sp, #40]	; 0x28
   84464:	4413      	add	r3, r2
   84466:	4299      	cmp	r1, r3
								y - next_char_start_position_along_string - position_across_character);
   84468:	b2ad      	uxth	r5, r5
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   8446a:	da26      	bge.n	844ba <title_font_string+0x35a>
								y - next_char_start_position_along_string - position_across_character);
   8446c:	9e06      	ldr	r6, [sp, #24]
   8446e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84470:	f9b8 0006 	ldrsh.w	r0, [r8, #6]
								y - next_char_start_position_along_string - position_across_character);
   84474:	1b9b      	subs	r3, r3, r6
   84476:	1b5b      	subs	r3, r3, r5
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84478:	f9b8 100a 	ldrsh.w	r1, [r8, #10]
								y - next_char_start_position_along_string - position_across_character);
   8447c:	b29b      	uxth	r3, r3
						mw_gl_fg_pixel(draw_info,
   8447e:	b21e      	sxth	r6, r3
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84480:	4401      	add	r1, r0
   84482:	428e      	cmp	r6, r1
   84484:	da19      	bge.n	844ba <title_font_string+0x35a>
	if (client_x < draw_info->clip_rect.x)
   84486:	990a      	ldr	r1, [sp, #40]	; 0x28
   84488:	428a      	cmp	r2, r1
   8448a:	dc16      	bgt.n	844ba <title_font_string+0x35a>
	if (client_y < draw_info->clip_rect.y)
   8448c:	4286      	cmp	r6, r0
   8448e:	db14      	blt.n	844ba <title_font_string+0x35a>
	display_x = client_x + draw_info->origin_x;
   84490:	f8b8 0000 	ldrh.w	r0, [r8]
   84494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84496:	4410      	add	r0, r2
   84498:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   8449a:	2800      	cmp	r0, #0
   8449c:	db0d      	blt.n	844ba <title_font_string+0x35a>
   8449e:	4287      	cmp	r7, r0
   844a0:	dd0b      	ble.n	844ba <title_font_string+0x35a>
	display_y = client_y + draw_info->origin_y;
   844a2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
   844a6:	440b      	add	r3, r1
   844a8:	b219      	sxth	r1, r3
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   844aa:	2900      	cmp	r1, #0
   844ac:	db05      	blt.n	844ba <title_font_string+0x35a>
   844ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   844b0:	428b      	cmp	r3, r1
   844b2:	dd02      	ble.n	844ba <title_font_string+0x35a>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   844b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   844b6:	4b6a      	ldr	r3, [pc, #424]	; (84660 <title_font_string+0x500>)
   844b8:	4798      	blx	r3
   844ba:	3401      	adds	r4, #1
			for (bitmap_x = start_pos_in_bitmap; bitmap_x < end_pos_in_bitmap; bitmap_x++)
   844bc:	9b04      	ldr	r3, [sp, #16]
					mask = 0x80U;
   844be:	ea5f 0959 	movs.w	r9, r9, lsr #1
   844c2:	b224      	sxth	r4, r4
				position_across_character++;
   844c4:	f105 0501 	add.w	r5, r5, #1
					mask = 0x80U;
   844c8:	bf08      	it	eq
   844ca:	f04f 0980 	moveq.w	r9, #128	; 0x80
			for (bitmap_x = start_pos_in_bitmap; bitmap_x < end_pos_in_bitmap; bitmap_x++)
   844ce:	42a3      	cmp	r3, r4
				position_across_character++;
   844d0:	b22d      	sxth	r5, r5
			for (bitmap_x = start_pos_in_bitmap; bitmap_x < end_pos_in_bitmap; bitmap_x++)
   844d2:	d18d      	bne.n	843f0 <title_font_string+0x290>
   844d4:	e737      	b.n	84346 <title_font_string+0x1e6>
								x - next_char_start_position_along_string - position_across_character,
   844d6:	9a06      	ldr	r2, [sp, #24]
   844d8:	9b05      	ldr	r3, [sp, #20]
   844da:	b2ad      	uxth	r5, r5
   844dc:	1a9e      	subs	r6, r3, r2
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   844de:	f8db 3000 	ldr.w	r3, [fp]
	MW_ASSERT(draw_info, "Null pointer argument");
   844e2:	4f5a      	ldr	r7, [pc, #360]	; (8464c <title_font_string+0x4ec>)
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   844e4:	930e      	str	r3, [sp, #56]	; 0x38
	int16_t root_width = MW_ROOT_WIDTH;
   844e6:	4b5a      	ldr	r3, [pc, #360]	; (84650 <title_font_string+0x4f0>)
   844e8:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   844ea:	4b5a      	ldr	r3, [pc, #360]	; (84654 <title_font_string+0x4f4>)
	int16_t root_width = MW_ROOT_WIDTH;
   844ec:	900b      	str	r0, [sp, #44]	; 0x2c
	int16_t root_height = MW_ROOT_HEIGHT;
   844ee:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   844f0:	4b59      	ldr	r3, [pc, #356]	; (84658 <title_font_string+0x4f8>)
	int16_t root_height = MW_ROOT_HEIGHT;
   844f2:	900d      	str	r0, [sp, #52]	; 0x34
	MW_ASSERT(draw_info, "Null pointer argument");
   844f4:	2285      	movs	r2, #133	; 0x85
   844f6:	4959      	ldr	r1, [pc, #356]	; (8465c <title_font_string+0x4fc>)
   844f8:	2001      	movs	r0, #1
   844fa:	47b8      	blx	r7
								x - next_char_start_position_along_string - position_across_character,
   844fc:	1b76      	subs	r6, r6, r5
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   844fe:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
   84502:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
								x - next_char_start_position_along_string - position_across_character,
   84506:	b2b6      	uxth	r6, r6
						mw_gl_fg_pixel(draw_info,
   84508:	b231      	sxth	r1, r6
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   8450a:	4413      	add	r3, r2
   8450c:	4299      	cmp	r1, r3
   8450e:	dad4      	bge.n	844ba <title_font_string+0x35a>
   84510:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84512:	9f07      	ldr	r7, [sp, #28]
   84514:	1bdb      	subs	r3, r3, r7
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84516:	f9b8 e006 	ldrsh.w	lr, [r8, #6]
   8451a:	f9b8 000a 	ldrsh.w	r0, [r8, #10]
   8451e:	b29b      	uxth	r3, r3
   84520:	b21f      	sxth	r7, r3
   84522:	4470      	add	r0, lr
   84524:	4287      	cmp	r7, r0
   84526:	dac8      	bge.n	844ba <title_font_string+0x35a>
	if (client_x < draw_info->clip_rect.x)
   84528:	4291      	cmp	r1, r2
   8452a:	dbc6      	blt.n	844ba <title_font_string+0x35a>
	if (client_y < draw_info->clip_rect.y)
   8452c:	45be      	cmp	lr, r7
   8452e:	dcc4      	bgt.n	844ba <title_font_string+0x35a>
	display_x = client_x + draw_info->origin_x;
   84530:	f8b8 0000 	ldrh.w	r0, [r8]
   84534:	4430      	add	r0, r6
   84536:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84538:	2800      	cmp	r0, #0
   8453a:	dbbe      	blt.n	844ba <title_font_string+0x35a>
   8453c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8453e:	4282      	cmp	r2, r0
   84540:	ddbb      	ble.n	844ba <title_font_string+0x35a>
	display_y = client_y + draw_info->origin_y;
   84542:	f8b8 1002 	ldrh.w	r1, [r8, #2]
   84546:	440b      	add	r3, r1
   84548:	b219      	sxth	r1, r3
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   8454a:	2900      	cmp	r1, #0
   8454c:	dbb5      	blt.n	844ba <title_font_string+0x35a>
   8454e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84550:	428b      	cmp	r3, r1
   84552:	ddb2      	ble.n	844ba <title_font_string+0x35a>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   84554:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   84556:	4b42      	ldr	r3, [pc, #264]	; (84660 <title_font_string+0x500>)
   84558:	4798      	blx	r3
   8455a:	e7ae      	b.n	844ba <title_font_string+0x35a>
   8455c:	9a07      	ldr	r2, [sp, #28]
   8455e:	9b05      	ldr	r3, [sp, #20]
	MW_ASSERT(draw_info, "Null pointer argument");
   84560:	4f3a      	ldr	r7, [pc, #232]	; (8464c <title_font_string+0x4ec>)
   84562:	1a9e      	subs	r6, r3, r2
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   84564:	f8db 3000 	ldr.w	r3, [fp]
   84568:	b2b6      	uxth	r6, r6
   8456a:	930e      	str	r3, [sp, #56]	; 0x38
	int16_t root_width = MW_ROOT_WIDTH;
   8456c:	4b38      	ldr	r3, [pc, #224]	; (84650 <title_font_string+0x4f0>)
   8456e:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   84570:	4b38      	ldr	r3, [pc, #224]	; (84654 <title_font_string+0x4f4>)
	int16_t root_width = MW_ROOT_WIDTH;
   84572:	900b      	str	r0, [sp, #44]	; 0x2c
	int16_t root_height = MW_ROOT_HEIGHT;
   84574:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   84576:	4b38      	ldr	r3, [pc, #224]	; (84658 <title_font_string+0x4f8>)
	int16_t root_height = MW_ROOT_HEIGHT;
   84578:	900d      	str	r0, [sp, #52]	; 0x34
	MW_ASSERT(draw_info, "Null pointer argument");
   8457a:	2285      	movs	r2, #133	; 0x85
   8457c:	4937      	ldr	r1, [pc, #220]	; (8465c <title_font_string+0x4fc>)
   8457e:	2001      	movs	r0, #1
   84580:	47b8      	blx	r7
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   84582:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
   84586:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
   8458a:	b232      	sxth	r2, r6
   8458c:	440b      	add	r3, r1
   8458e:	429a      	cmp	r2, r3
								y + next_char_start_position_along_string + position_across_character);
   84590:	b2ad      	uxth	r5, r5
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   84592:	da92      	bge.n	844ba <title_font_string+0x35a>
								y + next_char_start_position_along_string + position_across_character);
   84594:	9f09      	ldr	r7, [sp, #36]	; 0x24
   84596:	9b06      	ldr	r3, [sp, #24]
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84598:	f9b8 000a 	ldrsh.w	r0, [r8, #10]
								y + next_char_start_position_along_string + position_across_character);
   8459c:	443b      	add	r3, r7
   8459e:	442b      	add	r3, r5
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   845a0:	f9b8 7006 	ldrsh.w	r7, [r8, #6]
								y + next_char_start_position_along_string + position_across_character);
   845a4:	b29b      	uxth	r3, r3
						mw_gl_fg_pixel(draw_info,
   845a6:	fa0f fe83 	sxth.w	lr, r3
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   845aa:	4438      	add	r0, r7
   845ac:	4586      	cmp	lr, r0
   845ae:	da84      	bge.n	844ba <title_font_string+0x35a>
	if (client_x < draw_info->clip_rect.x)
   845b0:	4291      	cmp	r1, r2
   845b2:	dc82      	bgt.n	844ba <title_font_string+0x35a>
	if (client_y < draw_info->clip_rect.y)
   845b4:	45be      	cmp	lr, r7
   845b6:	dabb      	bge.n	84530 <title_font_string+0x3d0>
   845b8:	e77f      	b.n	844ba <title_font_string+0x35a>
								x + next_char_start_position_along_string + position_across_character ,
   845ba:	9a05      	ldr	r2, [sp, #20]
   845bc:	9b06      	ldr	r3, [sp, #24]
   845be:	b2ad      	uxth	r5, r5
   845c0:	189e      	adds	r6, r3, r2
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   845c2:	f8db 3000 	ldr.w	r3, [fp]
	MW_ASSERT(draw_info, "Null pointer argument");
   845c6:	4f21      	ldr	r7, [pc, #132]	; (8464c <title_font_string+0x4ec>)
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   845c8:	930e      	str	r3, [sp, #56]	; 0x38
	int16_t root_width = MW_ROOT_WIDTH;
   845ca:	4b21      	ldr	r3, [pc, #132]	; (84650 <title_font_string+0x4f0>)
   845cc:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   845ce:	4b21      	ldr	r3, [pc, #132]	; (84654 <title_font_string+0x4f4>)
	int16_t root_width = MW_ROOT_WIDTH;
   845d0:	900b      	str	r0, [sp, #44]	; 0x2c
	int16_t root_height = MW_ROOT_HEIGHT;
   845d2:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   845d4:	4b20      	ldr	r3, [pc, #128]	; (84658 <title_font_string+0x4f8>)
	int16_t root_height = MW_ROOT_HEIGHT;
   845d6:	900d      	str	r0, [sp, #52]	; 0x34
	MW_ASSERT(draw_info, "Null pointer argument");
   845d8:	2285      	movs	r2, #133	; 0x85
   845da:	4920      	ldr	r1, [pc, #128]	; (8465c <title_font_string+0x4fc>)
   845dc:	2001      	movs	r0, #1
   845de:	47b8      	blx	r7
								x + next_char_start_position_along_string + position_across_character ,
   845e0:	442e      	add	r6, r5
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   845e2:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
   845e6:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
								x + next_char_start_position_along_string + position_across_character ,
   845ea:	b2b6      	uxth	r6, r6
						mw_gl_fg_pixel(draw_info,
   845ec:	b231      	sxth	r1, r6
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   845ee:	4413      	add	r3, r2
   845f0:	4299      	cmp	r1, r3
   845f2:	f6bf af62 	bge.w	844ba <title_font_string+0x35a>
   845f6:	9b07      	ldr	r3, [sp, #28]
   845f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   845fa:	443b      	add	r3, r7
   845fc:	e78b      	b.n	84516 <title_font_string+0x3b6>
   845fe:	b2ad      	uxth	r5, r5
   84600:	e75b      	b.n	844ba <title_font_string+0x35a>
		return ((int16_t)Font9.Width);
   84602:	4b18      	ldr	r3, [pc, #96]	; (84664 <title_font_string+0x504>)
   84604:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   84608:	3301      	adds	r3, #1
   8460a:	b29b      	uxth	r3, r3
		width = (int16_t)strlen(s) * (mw_gl_get_font_width() + 1);
   8460c:	fb03 f302 	mul.w	r3, r3, r2
   84610:	b21b      	sxth	r3, r3
   84612:	e5ea      	b.n	841ea <title_font_string+0x8a>
		return ((int16_t)Font12.Width);
   84614:	4b14      	ldr	r3, [pc, #80]	; (84668 <title_font_string+0x508>)
   84616:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   8461a:	3301      	adds	r3, #1
   8461c:	b29b      	uxth	r3, r3
   8461e:	e7f5      	b.n	8460c <title_font_string+0x4ac>
		return ((int16_t)Font16.Width);
   84620:	4b12      	ldr	r3, [pc, #72]	; (8466c <title_font_string+0x50c>)
   84622:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   84626:	3301      	adds	r3, #1
   84628:	b29b      	uxth	r3, r3
   8462a:	e7ef      	b.n	8460c <title_font_string+0x4ac>
		return ((int16_t)Font20.Width);
   8462c:	4b10      	ldr	r3, [pc, #64]	; (84670 <title_font_string+0x510>)
   8462e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   84632:	3301      	adds	r3, #1
   84634:	b29b      	uxth	r3, r3
   84636:	e7e9      	b.n	8460c <title_font_string+0x4ac>
		return ((int16_t)Font24.Width);
   84638:	4b0e      	ldr	r3, [pc, #56]	; (84674 <title_font_string+0x514>)
   8463a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   8463e:	3301      	adds	r3, #1
   84640:	b29b      	uxth	r3, r3
   84642:	e7e3      	b.n	8460c <title_font_string+0x4ac>
	switch (gc.font)
   84644:	2301      	movs	r3, #1
   84646:	e7e1      	b.n	8460c <title_font_string+0x4ac>
   84648:	4603      	mov	r3, r0
   8464a:	e5ce      	b.n	841ea <title_font_string+0x8a>
   8464c:	00095add 	.word	0x00095add
   84650:	00086e2d 	.word	0x00086e2d
   84654:	00086e31 	.word	0x00086e31
   84658:	000a6618 	.word	0x000a6618
   8465c:	000ab018 	.word	0x000ab018
   84660:	00086e39 	.word	0x00086e39
   84664:	000aa688 	.word	0x000aa688
   84668:	000a6c84 	.word	0x000a6c84
   8466c:	000a7100 	.word	0x000a7100
   84670:	000a7ce8 	.word	0x000a7ce8
   84674:	000a8bc8 	.word	0x000a8bc8

00084678 <mw_gl_init>:
{
   84678:	b410      	push	{r4}
	gc.bg_colour = MW_HAL_LCD_BLACK;
   8467a:	2200      	movs	r2, #0
	gc.fg_colour = MW_HAL_LCD_WHITE;
   8467c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	gc.line = MW_GL_SOLID_LINE;
   84680:	f64f 74ff 	movw	r4, #65535	; 0xffff
	gc.border = MW_GL_BORDER_ON;
   84684:	2101      	movs	r1, #1
	gc.fg_colour = MW_HAL_LCD_WHITE;
   84686:	4b09      	ldr	r3, [pc, #36]	; (846ac <mw_gl_init+0x34>)
   84688:	6018      	str	r0, [r3, #0]
	gc.solid_fill_colour = MW_HAL_LCD_WHITE;
   8468a:	6098      	str	r0, [r3, #8]
	gc.line = MW_GL_SOLID_LINE;
   8468c:	819c      	strh	r4, [r3, #12]
	gc.bg_colour = MW_HAL_LCD_BLACK;
   8468e:	605a      	str	r2, [r3, #4]
	gc.fill = MW_GL_NO_FILL;
   84690:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	gc.pattern_set = false;
   84694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gc.font = MW_GL_FONT_9;
   84698:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	gc.text_rotation = MW_GL_TEXT_ROTATION_0;
   8469c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	gc.border = MW_GL_BORDER_ON;
   846a0:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
	gc.bg_transparent = MW_GL_BG_NOT_TRANSPARENT;
   846a4:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
}
   846a8:	bc10      	pop	{r4}
   846aa:	4770      	bx	lr
   846ac:	200715e0 	.word	0x200715e0

000846b0 <mw_gl_set_fg_colour>:
	gc.fg_colour = colour;
   846b0:	4b01      	ldr	r3, [pc, #4]	; (846b8 <mw_gl_set_fg_colour+0x8>)
   846b2:	6018      	str	r0, [r3, #0]
   846b4:	4770      	bx	lr
   846b6:	bf00      	nop
   846b8:	200715e0 	.word	0x200715e0

000846bc <mw_gl_set_bg_colour>:
	gc.bg_colour = colour;
   846bc:	4b01      	ldr	r3, [pc, #4]	; (846c4 <mw_gl_set_bg_colour+0x8>)
   846be:	6058      	str	r0, [r3, #4]
   846c0:	4770      	bx	lr
   846c2:	bf00      	nop
   846c4:	200715e0 	.word	0x200715e0

000846c8 <mw_gl_set_solid_fill_colour>:
	gc.solid_fill_colour = colour;
   846c8:	4b01      	ldr	r3, [pc, #4]	; (846d0 <mw_gl_set_solid_fill_colour+0x8>)
   846ca:	6098      	str	r0, [r3, #8]
   846cc:	4770      	bx	lr
   846ce:	bf00      	nop
   846d0:	200715e0 	.word	0x200715e0

000846d4 <mw_gl_set_line>:
	gc.line = line;
   846d4:	4b01      	ldr	r3, [pc, #4]	; (846dc <mw_gl_set_line+0x8>)
   846d6:	8198      	strh	r0, [r3, #12]
   846d8:	4770      	bx	lr
   846da:	bf00      	nop
   846dc:	200715e0 	.word	0x200715e0

000846e0 <mw_gl_clear_pattern>:
	gc.pattern_set = false;
   846e0:	2200      	movs	r2, #0
   846e2:	4b02      	ldr	r3, [pc, #8]	; (846ec <mw_gl_clear_pattern+0xc>)
   846e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   846e8:	4770      	bx	lr
   846ea:	bf00      	nop
   846ec:	200715e0 	.word	0x200715e0

000846f0 <mw_gl_set_border>:
	gc.border = border;
   846f0:	4b01      	ldr	r3, [pc, #4]	; (846f8 <mw_gl_set_border+0x8>)
   846f2:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
   846f6:	4770      	bx	lr
   846f8:	200715e0 	.word	0x200715e0

000846fc <mw_gl_set_fill>:
	gc.fill = fill;
   846fc:	4b01      	ldr	r3, [pc, #4]	; (84704 <mw_gl_set_fill+0x8>)
   846fe:	f883 002f 	strb.w	r0, [r3, #47]	; 0x2f
   84702:	4770      	bx	lr
   84704:	200715e0 	.word	0x200715e0

00084708 <mw_gl_set_bg_transparency>:
	gc.bg_transparent = bg_transparent;
   84708:	4b01      	ldr	r3, [pc, #4]	; (84710 <mw_gl_set_bg_transparency+0x8>)
   8470a:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
   8470e:	4770      	bx	lr
   84710:	200715e0 	.word	0x200715e0

00084714 <mw_gl_set_font>:
{
   84714:	b538      	push	{r3, r4, r5, lr}
   84716:	4604      	mov	r4, r0
	MW_ASSERT(font == MW_GL_FONT_9 ||
   84718:	2805      	cmp	r0, #5
   8471a:	4b06      	ldr	r3, [pc, #24]	; (84734 <mw_gl_set_font+0x20>)
   8471c:	bf8c      	ite	hi
   8471e:	2000      	movhi	r0, #0
   84720:	2001      	movls	r0, #1
   84722:	f240 52f2 	movw	r2, #1522	; 0x5f2
   84726:	4904      	ldr	r1, [pc, #16]	; (84738 <mw_gl_set_font+0x24>)
   84728:	4d04      	ldr	r5, [pc, #16]	; (8473c <mw_gl_set_font+0x28>)
   8472a:	47a8      	blx	r5
	gc.font = font;
   8472c:	4b04      	ldr	r3, [pc, #16]	; (84740 <mw_gl_set_font+0x2c>)
   8472e:	f883 4032 	strb.w	r4, [r3, #50]	; 0x32
   84732:	bd38      	pop	{r3, r4, r5, pc}
   84734:	000ab188 	.word	0x000ab188
   84738:	000ab054 	.word	0x000ab054
   8473c:	00095add 	.word	0x00095add
   84740:	200715e0 	.word	0x200715e0

00084744 <mw_gl_set_text_rotation>:
	gc.text_rotation = text_rotation;
   84744:	4b01      	ldr	r3, [pc, #4]	; (8474c <mw_gl_set_text_rotation+0x8>)
   84746:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33
   8474a:	4770      	bx	lr
   8474c:	200715e0 	.word	0x200715e0

00084750 <mw_gl_get_font_width>:
	switch (gc.font)
   84750:	4b0f      	ldr	r3, [pc, #60]	; (84790 <mw_gl_get_font_width+0x40>)
   84752:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   84756:	2b04      	cmp	r3, #4
   84758:	d818      	bhi.n	8478c <mw_gl_get_font_width+0x3c>
   8475a:	e8df f003 	tbb	[pc, r3]
   8475e:	0b07      	.short	0x0b07
   84760:	130f      	.short	0x130f
   84762:	03          	.byte	0x03
   84763:	00          	.byte	0x00
		return ((int16_t)Font24.Width);
   84764:	4b0b      	ldr	r3, [pc, #44]	; (84794 <mw_gl_get_font_width+0x44>)
   84766:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
   8476a:	4770      	bx	lr
		return ((int16_t)Font9.Width);
   8476c:	4b0a      	ldr	r3, [pc, #40]	; (84798 <mw_gl_get_font_width+0x48>)
   8476e:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
   84772:	4770      	bx	lr
		return ((int16_t)Font12.Width);
   84774:	4b09      	ldr	r3, [pc, #36]	; (8479c <mw_gl_get_font_width+0x4c>)
   84776:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
   8477a:	4770      	bx	lr
		return ((int16_t)Font16.Width);
   8477c:	4b08      	ldr	r3, [pc, #32]	; (847a0 <mw_gl_get_font_width+0x50>)
   8477e:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
   84782:	4770      	bx	lr
		return ((int16_t)Font20.Width);
   84784:	4b07      	ldr	r3, [pc, #28]	; (847a4 <mw_gl_get_font_width+0x54>)
   84786:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
   8478a:	4770      	bx	lr
		return (0);
   8478c:	2000      	movs	r0, #0
}
   8478e:	4770      	bx	lr
   84790:	200715e0 	.word	0x200715e0
   84794:	000a8bc8 	.word	0x000a8bc8
   84798:	000aa688 	.word	0x000aa688
   8479c:	000a6c84 	.word	0x000a6c84
   847a0:	000a7100 	.word	0x000a7100
   847a4:	000a7ce8 	.word	0x000a7ce8

000847a8 <mw_gl_get_font_height>:
	switch (gc.font)
   847a8:	4b10      	ldr	r3, [pc, #64]	; (847ec <mw_gl_get_font_height+0x44>)
   847aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   847ae:	2b05      	cmp	r3, #5
   847b0:	d81a      	bhi.n	847e8 <mw_gl_get_font_height+0x40>
   847b2:	e8df f003 	tbb	[pc, r3]
   847b6:	0905      	.short	0x0905
   847b8:	0315110d 	.word	0x0315110d
		return (MW_GL_TITLE_FONT_HEIGHT);
   847bc:	2010      	movs	r0, #16
}
   847be:	4770      	bx	lr
		return ((int16_t)Font9.Height);
   847c0:	4b0b      	ldr	r3, [pc, #44]	; (847f0 <mw_gl_get_font_height+0x48>)
   847c2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
   847c6:	4770      	bx	lr
		return ((int16_t)Font12.Height);
   847c8:	4b0a      	ldr	r3, [pc, #40]	; (847f4 <mw_gl_get_font_height+0x4c>)
   847ca:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
   847ce:	4770      	bx	lr
		return ((int16_t)Font16.Height);
   847d0:	4b09      	ldr	r3, [pc, #36]	; (847f8 <mw_gl_get_font_height+0x50>)
   847d2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
   847d6:	4770      	bx	lr
		return ((int16_t)Font20.Height);
   847d8:	4b08      	ldr	r3, [pc, #32]	; (847fc <mw_gl_get_font_height+0x54>)
   847da:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
   847de:	4770      	bx	lr
		return ((int16_t)Font24.Height);
   847e0:	4b07      	ldr	r3, [pc, #28]	; (84800 <mw_gl_get_font_height+0x58>)
   847e2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
   847e6:	4770      	bx	lr
		return (0);
   847e8:	2000      	movs	r0, #0
   847ea:	4770      	bx	lr
   847ec:	200715e0 	.word	0x200715e0
   847f0:	000aa688 	.word	0x000aa688
   847f4:	000a6c84 	.word	0x000a6c84
   847f8:	000a7100 	.word	0x000a7100
   847fc:	000a7ce8 	.word	0x000a7ce8
   84800:	000a8bc8 	.word	0x000a8bc8

00084804 <mw_gl_fg_pixel>:
{
   84804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (draw_info == NULL)
   84808:	2800      	cmp	r0, #0
   8480a:	d039      	beq.n	84880 <mw_gl_fg_pixel+0x7c>
   8480c:	4616      	mov	r6, r2
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   8480e:	4a21      	ldr	r2, [pc, #132]	; (84894 <mw_gl_fg_pixel+0x90>)
	int16_t root_width = MW_ROOT_WIDTH;
   84810:	4b21      	ldr	r3, [pc, #132]	; (84898 <mw_gl_fg_pixel+0x94>)
   84812:	460d      	mov	r5, r1
   84814:	4604      	mov	r4, r0
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   84816:	f8d2 9000 	ldr.w	r9, [r2]
	int16_t root_width = MW_ROOT_WIDTH;
   8481a:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   8481c:	4b1f      	ldr	r3, [pc, #124]	; (8489c <mw_gl_fg_pixel+0x98>)
	int16_t root_width = MW_ROOT_WIDTH;
   8481e:	4607      	mov	r7, r0
	int16_t root_height = MW_ROOT_HEIGHT;
   84820:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   84822:	f8df a088 	ldr.w	sl, [pc, #136]	; 848ac <mw_gl_fg_pixel+0xa8>
   84826:	4b1e      	ldr	r3, [pc, #120]	; (848a0 <mw_gl_fg_pixel+0x9c>)
   84828:	2285      	movs	r2, #133	; 0x85
	int16_t root_height = MW_ROOT_HEIGHT;
   8482a:	4680      	mov	r8, r0
	MW_ASSERT(draw_info, "Null pointer argument");
   8482c:	491d      	ldr	r1, [pc, #116]	; (848a4 <mw_gl_fg_pixel+0xa0>)
   8482e:	2001      	movs	r0, #1
   84830:	47d0      	blx	sl
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   84832:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   84836:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   8483a:	4413      	add	r3, r2
   8483c:	429d      	cmp	r5, r3
   8483e:	da1d      	bge.n	8487c <mw_gl_fg_pixel+0x78>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84840:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   84844:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   84848:	440b      	add	r3, r1
   8484a:	429e      	cmp	r6, r3
   8484c:	da16      	bge.n	8487c <mw_gl_fg_pixel+0x78>
	if (client_x < draw_info->clip_rect.x)
   8484e:	4295      	cmp	r5, r2
   84850:	db14      	blt.n	8487c <mw_gl_fg_pixel+0x78>
	if (client_y < draw_info->clip_rect.y)
   84852:	428e      	cmp	r6, r1
   84854:	db12      	blt.n	8487c <mw_gl_fg_pixel+0x78>
	display_x = client_x + draw_info->origin_x;
   84856:	8820      	ldrh	r0, [r4, #0]
   84858:	4428      	add	r0, r5
   8485a:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   8485c:	2800      	cmp	r0, #0
   8485e:	db0d      	blt.n	8487c <mw_gl_fg_pixel+0x78>
   84860:	4287      	cmp	r7, r0
   84862:	dd0b      	ble.n	8487c <mw_gl_fg_pixel+0x78>
	display_y = client_y + draw_info->origin_y;
   84864:	8861      	ldrh	r1, [r4, #2]
   84866:	4431      	add	r1, r6
   84868:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   8486a:	2900      	cmp	r1, #0
   8486c:	db06      	blt.n	8487c <mw_gl_fg_pixel+0x78>
   8486e:	4588      	cmp	r8, r1
   84870:	dd04      	ble.n	8487c <mw_gl_fg_pixel+0x78>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   84872:	464a      	mov	r2, r9
}
   84874:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		mw_hal_lcd_pixel(display_x, display_y, colour);
   84878:	4b0b      	ldr	r3, [pc, #44]	; (848a8 <mw_gl_fg_pixel+0xa4>)
   8487a:	4718      	bx	r3
   8487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		MW_ASSERT((bool)false, "Null pointer argument");
   84880:	4c0a      	ldr	r4, [pc, #40]	; (848ac <mw_gl_fg_pixel+0xa8>)
   84882:	4b07      	ldr	r3, [pc, #28]	; (848a0 <mw_gl_fg_pixel+0x9c>)
   84884:	46a4      	mov	ip, r4
}
   84886:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		MW_ASSERT((bool)false, "Null pointer argument");
   8488a:	f240 6274 	movw	r2, #1652	; 0x674
   8488e:	4908      	ldr	r1, [pc, #32]	; (848b0 <mw_gl_fg_pixel+0xac>)
   84890:	4760      	bx	ip
   84892:	bf00      	nop
   84894:	200715e0 	.word	0x200715e0
   84898:	00086e2d 	.word	0x00086e2d
   8489c:	00086e31 	.word	0x00086e31
   848a0:	000a6618 	.word	0x000a6618
   848a4:	000ab018 	.word	0x000ab018
   848a8:	00086e39 	.word	0x00086e39
   848ac:	00095add 	.word	0x00095add
   848b0:	000ab064 	.word	0x000ab064

000848b4 <mw_gl_line.part.3>:
void mw_gl_line(const mw_gl_draw_info_t *draw_info, int16_t p1x, int16_t p1y, int16_t p2x, int16_t p2y)
   848b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (p1x > p2x)
   848b8:	4299      	cmp	r1, r3
void mw_gl_line(const mw_gl_draw_info_t *draw_info, int16_t p1x, int16_t p1y, int16_t p2x, int16_t p2y)
   848ba:	b087      	sub	sp, #28
   848bc:	4688      	mov	r8, r1
   848be:	461c      	mov	r4, r3
   848c0:	4681      	mov	r9, r0
   848c2:	4693      	mov	fp, r2
   848c4:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
	if (p1x > p2x)
   848c8:	dc04      	bgt.n	848d4 <mw_gl_line.part.3+0x20>
   848ca:	462a      	mov	r2, r5
   848cc:	460c      	mov	r4, r1
   848ce:	465d      	mov	r5, fp
   848d0:	4698      	mov	r8, r3
   848d2:	4693      	mov	fp, r2
	dy = p2y - p1y;
   848d4:	ebab 0305 	sub.w	r3, fp, r5
	dx = p2x - p1x;
   848d8:	eba8 0604 	sub.w	r6, r8, r4
	dy = p2y - p1y;
   848dc:	b29b      	uxth	r3, r3
	dx = p2x - p1x;
   848de:	b2b6      	uxth	r6, r6
	dy2 = dy * 2;
   848e0:	0058      	lsls	r0, r3, #1
	dx2 = dx * 2;
   848e2:	0071      	lsls	r1, r6, #1
	dy = p2y - p1y;
   848e4:	b21a      	sxth	r2, r3
	dx2 = dx * 2;
   848e6:	b289      	uxth	r1, r1
	dy2 = dy * 2;
   848e8:	b280      	uxth	r0, r0
	if (dy >= 0)
   848ea:	2a00      	cmp	r2, #0
	dx2 = dx * 2;
   848ec:	460f      	mov	r7, r1
   848ee:	9102      	str	r1, [sp, #8]
	dy2 = dy * 2;
   848f0:	9003      	str	r0, [sp, #12]
	dx = p2x - p1x;
   848f2:	b231      	sxth	r1, r6
	if (dy >= 0)
   848f4:	f2c0 810d 	blt.w	84b12 <mw_gl_line.part.3+0x25e>
	dy2_minus_dx2 = dy2 - dx2;
   848f8:	1bc0      	subs	r0, r0, r7
   848fa:	b280      	uxth	r0, r0
		if (dy <= dx)
   848fc:	428a      	cmp	r2, r1
	dy2_minus_dx2 = dy2 - dx2;
   848fe:	9001      	str	r0, [sp, #4]
		if (dy <= dx)
   84900:	dc2d      	bgt.n	8495e <mw_gl_line.part.3+0xaa>
			F = dy2 - dx;
   84902:	4406      	add	r6, r0
			while (x <= p2x)
   84904:	45a0      	cmp	r8, r4
			F = dy2 - dx;
   84906:	b236      	sxth	r6, r6
			while (x <= p2x)
   84908:	db26      	blt.n	84958 <mw_gl_line.part.3+0xa4>
   8490a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   8490e:	f8df a35c 	ldr.w	sl, [pc, #860]	; 84c6c <mw_gl_line.part.3+0x3b8>
				if (gc.line == MW_GL_SOLID_LINE)
   84912:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84916:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   8491a:	4293      	cmp	r3, r2
   8491c:	d06a      	beq.n	849f4 <mw_gl_line.part.3+0x140>
					if (((uint16_t)gc.line & mask) == mask)
   8491e:	ea37 0303 	bics.w	r3, r7, r3
   84922:	d06e      	beq.n	84a02 <mw_gl_line.part.3+0x14e>
	if (draw_info == NULL)
   84924:	f1b9 0f00 	cmp.w	r9, #0
   84928:	f000 821d 	beq.w	84d66 <mw_gl_line.part.3+0x4b2>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   8492c:	f89a b031 	ldrb.w	fp, [sl, #49]	; 0x31
   84930:	f1bb 0f01 	cmp.w	fp, #1
   84934:	f000 80ac 	beq.w	84a90 <mw_gl_line.part.3+0x1dc>
   84938:	b2a4      	uxth	r4, r4
						mask = 0x8000U;
   8493a:	087f      	lsrs	r7, r7, #1
   8493c:	bf08      	it	eq
   8493e:	f44f 4700 	moveq.w	r7, #32768	; 0x8000
				x++;
   84942:	3401      	adds	r4, #1
				if (F <= 0)
   84944:	2e00      	cmp	r6, #0
				x++;
   84946:	b224      	sxth	r4, r4
				if (F <= 0)
   84948:	dd49      	ble.n	849de <mw_gl_line.part.3+0x12a>
					F += dy2_minus_dx2;
   8494a:	9b01      	ldr	r3, [sp, #4]
					y++;
   8494c:	3501      	adds	r5, #1
					F += dy2_minus_dx2;
   8494e:	441e      	add	r6, r3
			while (x <= p2x)
   84950:	45a0      	cmp	r8, r4
					y++;
   84952:	b22d      	sxth	r5, r5
					F += dy2_minus_dx2;
   84954:	b236      	sxth	r6, r6
			while (x <= p2x)
   84956:	dadc      	bge.n	84912 <mw_gl_line.part.3+0x5e>
}
   84958:	b007      	add	sp, #28
   8495a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			F = dx2 - dy;
   8495e:	1afe      	subs	r6, r7, r3
			while (y <= p2y)
   84960:	45ab      	cmp	fp, r5
			F = dx2 - dy;
   84962:	b236      	sxth	r6, r6
			while (y <= p2y)
   84964:	dbf8      	blt.n	84958 <mw_gl_line.part.3+0xa4>
   84966:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   8496a:	f8df a300 	ldr.w	sl, [pc, #768]	; 84c6c <mw_gl_line.part.3+0x3b8>
				if (gc.line == MW_GL_SOLID_LINE)
   8496e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84972:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   84976:	4293      	cmp	r3, r2
   84978:	d021      	beq.n	849be <mw_gl_line.part.3+0x10a>
					if (((uint16_t)gc.line & mask) == mask)
   8497a:	ea37 0303 	bics.w	r3, r7, r3
   8497e:	d047      	beq.n	84a10 <mw_gl_line.part.3+0x15c>
	if (draw_info == NULL)
   84980:	f1b9 0f00 	cmp.w	r9, #0
   84984:	f000 81f9 	beq.w	84d7a <mw_gl_line.part.3+0x4c6>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   84988:	f89a 8031 	ldrb.w	r8, [sl, #49]	; 0x31
   8498c:	f1b8 0f01 	cmp.w	r8, #1
   84990:	d045      	beq.n	84a1e <mw_gl_line.part.3+0x16a>
   84992:	b2ad      	uxth	r5, r5
						mask = 0x8000U;
   84994:	087f      	lsrs	r7, r7, #1
   84996:	bf08      	it	eq
   84998:	f44f 4700 	moveq.w	r7, #32768	; 0x8000
			y++;
   8499c:	3501      	adds	r5, #1
				if (F <= 0)
   8499e:	2e00      	cmp	r6, #0
			y++;
   849a0:	b22d      	sxth	r5, r5
				if (F <= 0)
   849a2:	dd16      	ble.n	849d2 <mw_gl_line.part.3+0x11e>
					F -= dy2_minus_dx2;
   849a4:	9b01      	ldr	r3, [sp, #4]
					x++;
   849a6:	3401      	adds	r4, #1
					F -= dy2_minus_dx2;
   849a8:	1af6      	subs	r6, r6, r3
			while (y <= p2y)
   849aa:	45ab      	cmp	fp, r5
					x++;
   849ac:	b224      	sxth	r4, r4
					F -= dy2_minus_dx2;
   849ae:	b236      	sxth	r6, r6
			while (y <= p2y)
   849b0:	dbd2      	blt.n	84958 <mw_gl_line.part.3+0xa4>
				if (gc.line == MW_GL_SOLID_LINE)
   849b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   849b6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   849ba:	4293      	cmp	r3, r2
   849bc:	d1dd      	bne.n	8497a <mw_gl_line.part.3+0xc6>
					mw_gl_fg_pixel(draw_info, x, y);
   849be:	462a      	mov	r2, r5
   849c0:	4621      	mov	r1, r4
   849c2:	4648      	mov	r0, r9
   849c4:	4ba3      	ldr	r3, [pc, #652]	; (84c54 <mw_gl_line.part.3+0x3a0>)
   849c6:	b2ad      	uxth	r5, r5
   849c8:	4798      	blx	r3
			y++;
   849ca:	3501      	adds	r5, #1
				if (F <= 0)
   849cc:	2e00      	cmp	r6, #0
			y++;
   849ce:	b22d      	sxth	r5, r5
				if (F <= 0)
   849d0:	dce8      	bgt.n	849a4 <mw_gl_line.part.3+0xf0>
					F += dx2;
   849d2:	9b02      	ldr	r3, [sp, #8]
			while (y <= p2y)
   849d4:	45ab      	cmp	fp, r5
					F += dx2;
   849d6:	441e      	add	r6, r3
   849d8:	b236      	sxth	r6, r6
			while (y <= p2y)
   849da:	dac8      	bge.n	8496e <mw_gl_line.part.3+0xba>
   849dc:	e7bc      	b.n	84958 <mw_gl_line.part.3+0xa4>
					F += dy2;
   849de:	9b03      	ldr	r3, [sp, #12]
			while (x <= p2x)
   849e0:	45a0      	cmp	r8, r4
					F += dy2;
   849e2:	441e      	add	r6, r3
   849e4:	b236      	sxth	r6, r6
			while (x <= p2x)
   849e6:	dbb7      	blt.n	84958 <mw_gl_line.part.3+0xa4>
				if (gc.line == MW_GL_SOLID_LINE)
   849e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   849ec:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   849f0:	4293      	cmp	r3, r2
   849f2:	d194      	bne.n	8491e <mw_gl_line.part.3+0x6a>
					mw_gl_fg_pixel(draw_info, x, y);
   849f4:	4621      	mov	r1, r4
   849f6:	462a      	mov	r2, r5
   849f8:	4648      	mov	r0, r9
   849fa:	4b96      	ldr	r3, [pc, #600]	; (84c54 <mw_gl_line.part.3+0x3a0>)
   849fc:	b2a4      	uxth	r4, r4
   849fe:	4798      	blx	r3
   84a00:	e79f      	b.n	84942 <mw_gl_line.part.3+0x8e>
						mw_gl_fg_pixel(draw_info, x, y);
   84a02:	4621      	mov	r1, r4
   84a04:	462a      	mov	r2, r5
   84a06:	4648      	mov	r0, r9
   84a08:	4b92      	ldr	r3, [pc, #584]	; (84c54 <mw_gl_line.part.3+0x3a0>)
   84a0a:	b2a4      	uxth	r4, r4
   84a0c:	4798      	blx	r3
   84a0e:	e794      	b.n	8493a <mw_gl_line.part.3+0x86>
						mw_gl_fg_pixel(draw_info, x, y);
   84a10:	462a      	mov	r2, r5
   84a12:	4621      	mov	r1, r4
   84a14:	4648      	mov	r0, r9
   84a16:	4b8f      	ldr	r3, [pc, #572]	; (84c54 <mw_gl_line.part.3+0x3a0>)
   84a18:	b2ad      	uxth	r5, r5
   84a1a:	4798      	blx	r3
   84a1c:	e7ba      	b.n	84994 <mw_gl_line.part.3+0xe0>
		pixel(draw_info, client_x, client_y, gc.bg_colour);
   84a1e:	f8da 3004 	ldr.w	r3, [sl, #4]
   84a22:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   84a24:	4b8c      	ldr	r3, [pc, #560]	; (84c58 <mw_gl_line.part.3+0x3a4>)
   84a26:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   84a28:	4b8c      	ldr	r3, [pc, #560]	; (84c5c <mw_gl_line.part.3+0x3a8>)
	int16_t root_width = MW_ROOT_WIDTH;
   84a2a:	9003      	str	r0, [sp, #12]
	int16_t root_height = MW_ROOT_HEIGHT;
   84a2c:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   84a2e:	4b8c      	ldr	r3, [pc, #560]	; (84c60 <mw_gl_line.part.3+0x3ac>)
	int16_t root_height = MW_ROOT_HEIGHT;
   84a30:	9004      	str	r0, [sp, #16]
	MW_ASSERT(draw_info, "Null pointer argument");
   84a32:	2285      	movs	r2, #133	; 0x85
   84a34:	4640      	mov	r0, r8
   84a36:	498b      	ldr	r1, [pc, #556]	; (84c64 <mw_gl_line.part.3+0x3b0>)
   84a38:	f8df 8234 	ldr.w	r8, [pc, #564]	; 84c70 <mw_gl_line.part.3+0x3bc>
   84a3c:	47c0      	blx	r8
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   84a3e:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
   84a42:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
   84a46:	4413      	add	r3, r2
   84a48:	429c      	cmp	r4, r3
   84a4a:	daa2      	bge.n	84992 <mw_gl_line.part.3+0xde>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84a4c:	f9b9 1006 	ldrsh.w	r1, [r9, #6]
   84a50:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
   84a54:	440b      	add	r3, r1
   84a56:	429d      	cmp	r5, r3
   84a58:	da9b      	bge.n	84992 <mw_gl_line.part.3+0xde>
	if (client_x < draw_info->clip_rect.x)
   84a5a:	42a2      	cmp	r2, r4
   84a5c:	dc99      	bgt.n	84992 <mw_gl_line.part.3+0xde>
	if (client_y < draw_info->clip_rect.y)
   84a5e:	42a9      	cmp	r1, r5
   84a60:	dc97      	bgt.n	84992 <mw_gl_line.part.3+0xde>
	display_x = client_x + draw_info->origin_x;
   84a62:	f8b9 0000 	ldrh.w	r0, [r9]
	display_y = client_y + draw_info->origin_y;
   84a66:	b2ad      	uxth	r5, r5
	display_x = client_x + draw_info->origin_x;
   84a68:	4420      	add	r0, r4
   84a6a:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84a6c:	2800      	cmp	r0, #0
   84a6e:	db91      	blt.n	84994 <mw_gl_line.part.3+0xe0>
   84a70:	9b03      	ldr	r3, [sp, #12]
   84a72:	4283      	cmp	r3, r0
   84a74:	dd8e      	ble.n	84994 <mw_gl_line.part.3+0xe0>
	display_y = client_y + draw_info->origin_y;
   84a76:	f8b9 1002 	ldrh.w	r1, [r9, #2]
   84a7a:	4429      	add	r1, r5
   84a7c:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84a7e:	2900      	cmp	r1, #0
   84a80:	db88      	blt.n	84994 <mw_gl_line.part.3+0xe0>
   84a82:	9b04      	ldr	r3, [sp, #16]
   84a84:	428b      	cmp	r3, r1
   84a86:	dd85      	ble.n	84994 <mw_gl_line.part.3+0xe0>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   84a88:	9a05      	ldr	r2, [sp, #20]
   84a8a:	4b77      	ldr	r3, [pc, #476]	; (84c68 <mw_gl_line.part.3+0x3b4>)
   84a8c:	4798      	blx	r3
   84a8e:	e781      	b.n	84994 <mw_gl_line.part.3+0xe0>
		pixel(draw_info, client_x, client_y, gc.bg_colour);
   84a90:	f8da 3004 	ldr.w	r3, [sl, #4]
   84a94:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   84a96:	4b70      	ldr	r3, [pc, #448]	; (84c58 <mw_gl_line.part.3+0x3a4>)
   84a98:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   84a9a:	4b70      	ldr	r3, [pc, #448]	; (84c5c <mw_gl_line.part.3+0x3a8>)
	int16_t root_width = MW_ROOT_WIDTH;
   84a9c:	9002      	str	r0, [sp, #8]
	int16_t root_height = MW_ROOT_HEIGHT;
   84a9e:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   84aa0:	4b6f      	ldr	r3, [pc, #444]	; (84c60 <mw_gl_line.part.3+0x3ac>)
	int16_t root_height = MW_ROOT_HEIGHT;
   84aa2:	9004      	str	r0, [sp, #16]
	MW_ASSERT(draw_info, "Null pointer argument");
   84aa4:	2285      	movs	r2, #133	; 0x85
   84aa6:	4658      	mov	r0, fp
   84aa8:	496e      	ldr	r1, [pc, #440]	; (84c64 <mw_gl_line.part.3+0x3b0>)
   84aaa:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 84c70 <mw_gl_line.part.3+0x3bc>
   84aae:	47d8      	blx	fp
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   84ab0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
   84ab4:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
   84ab8:	4413      	add	r3, r2
   84aba:	429c      	cmp	r4, r3
   84abc:	f6bf af3c 	bge.w	84938 <mw_gl_line.part.3+0x84>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84ac0:	f9b9 1006 	ldrsh.w	r1, [r9, #6]
   84ac4:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
   84ac8:	440b      	add	r3, r1
   84aca:	429d      	cmp	r5, r3
   84acc:	f6bf af34 	bge.w	84938 <mw_gl_line.part.3+0x84>
	if (client_x < draw_info->clip_rect.x)
   84ad0:	42a2      	cmp	r2, r4
   84ad2:	f73f af31 	bgt.w	84938 <mw_gl_line.part.3+0x84>
	if (client_y < draw_info->clip_rect.y)
   84ad6:	42a9      	cmp	r1, r5
   84ad8:	f73f af2e 	bgt.w	84938 <mw_gl_line.part.3+0x84>
	display_x = client_x + draw_info->origin_x;
   84adc:	f8b9 0000 	ldrh.w	r0, [r9]
   84ae0:	b2a4      	uxth	r4, r4
   84ae2:	4420      	add	r0, r4
   84ae4:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84ae6:	2800      	cmp	r0, #0
   84ae8:	f6ff af27 	blt.w	8493a <mw_gl_line.part.3+0x86>
   84aec:	9b02      	ldr	r3, [sp, #8]
   84aee:	4283      	cmp	r3, r0
   84af0:	f77f af23 	ble.w	8493a <mw_gl_line.part.3+0x86>
	display_y = client_y + draw_info->origin_y;
   84af4:	f8b9 1002 	ldrh.w	r1, [r9, #2]
   84af8:	4429      	add	r1, r5
   84afa:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84afc:	2900      	cmp	r1, #0
   84afe:	f6ff af1c 	blt.w	8493a <mw_gl_line.part.3+0x86>
   84b02:	9b04      	ldr	r3, [sp, #16]
   84b04:	428b      	cmp	r3, r1
   84b06:	f77f af18 	ble.w	8493a <mw_gl_line.part.3+0x86>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   84b0a:	9a05      	ldr	r2, [sp, #20]
   84b0c:	4b56      	ldr	r3, [pc, #344]	; (84c68 <mw_gl_line.part.3+0x3b4>)
   84b0e:	4798      	blx	r3
   84b10:	e713      	b.n	8493a <mw_gl_line.part.3+0x86>
		if (dx >= -dy)
   84b12:	4252      	negs	r2, r2
	dy2_plus_dx2 = dy2 + dx2;
   84b14:	4438      	add	r0, r7
   84b16:	b280      	uxth	r0, r0
		if (dx >= -dy)
   84b18:	4291      	cmp	r1, r2
	dy2_plus_dx2 = dy2 + dx2;
   84b1a:	9001      	str	r0, [sp, #4]
		if (dx >= -dy)
   84b1c:	db48      	blt.n	84bb0 <mw_gl_line.part.3+0x2fc>
			F = -dy2 - dx;
   84b1e:	1a36      	subs	r6, r6, r0
			while (x <= p2x)
   84b20:	45a0      	cmp	r8, r4
			F = -dy2 - dx;
   84b22:	fa0f fb86 	sxth.w	fp, r6
			while (x <= p2x)
   84b26:	f6ff af17 	blt.w	84958 <mw_gl_line.part.3+0xa4>
   84b2a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   84b2e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 84c6c <mw_gl_line.part.3+0x3b8>
				if (gc.line == MW_GL_SOLID_LINE)
   84b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84b36:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   84b3a:	4293      	cmp	r3, r2
   84b3c:	d025      	beq.n	84b8a <mw_gl_line.part.3+0x2d6>
					if (((uint16_t)gc.line & mask) == mask)
   84b3e:	ea36 0303 	bics.w	r3, r6, r3
   84b42:	d078      	beq.n	84c36 <mw_gl_line.part.3+0x382>
	if (draw_info == NULL)
   84b44:	f1b9 0f00 	cmp.w	r9, #0
   84b48:	f000 8121 	beq.w	84d8e <mw_gl_line.part.3+0x4da>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   84b4c:	f89a 7031 	ldrb.w	r7, [sl, #49]	; 0x31
   84b50:	2f01      	cmp	r7, #1
   84b52:	f000 80c8 	beq.w	84ce6 <mw_gl_line.part.3+0x432>
   84b56:	b2a4      	uxth	r4, r4
						mask = 0x8000U;
   84b58:	0876      	lsrs	r6, r6, #1
   84b5a:	bf08      	it	eq
   84b5c:	f44f 4600 	moveq.w	r6, #32768	; 0x8000
				x++;
   84b60:	3401      	adds	r4, #1
				if (F <= 0)
   84b62:	f1bb 0f00 	cmp.w	fp, #0
				x++;
   84b66:	b224      	sxth	r4, r4
				if (F <= 0)
   84b68:	dd1a      	ble.n	84ba0 <mw_gl_line.part.3+0x2ec>
					F -= dy2_plus_dx2;
   84b6a:	9b01      	ldr	r3, [sp, #4]
					y--;
   84b6c:	3d01      	subs	r5, #1
					F -= dy2_plus_dx2;
   84b6e:	ebab 0b03 	sub.w	fp, fp, r3
			while (x <= p2x)
   84b72:	45a0      	cmp	r8, r4
					y--;
   84b74:	b22d      	sxth	r5, r5
					F -= dy2_plus_dx2;
   84b76:	fa0f fb8b 	sxth.w	fp, fp
			while (x <= p2x)
   84b7a:	f6ff aeed 	blt.w	84958 <mw_gl_line.part.3+0xa4>
				if (gc.line == MW_GL_SOLID_LINE)
   84b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84b82:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   84b86:	4293      	cmp	r3, r2
   84b88:	d1d9      	bne.n	84b3e <mw_gl_line.part.3+0x28a>
					mw_gl_fg_pixel(draw_info, x, y);
   84b8a:	4621      	mov	r1, r4
   84b8c:	462a      	mov	r2, r5
   84b8e:	4648      	mov	r0, r9
   84b90:	4b30      	ldr	r3, [pc, #192]	; (84c54 <mw_gl_line.part.3+0x3a0>)
   84b92:	b2a4      	uxth	r4, r4
   84b94:	4798      	blx	r3
				x++;
   84b96:	3401      	adds	r4, #1
				if (F <= 0)
   84b98:	f1bb 0f00 	cmp.w	fp, #0
				x++;
   84b9c:	b224      	sxth	r4, r4
				if (F <= 0)
   84b9e:	dce4      	bgt.n	84b6a <mw_gl_line.part.3+0x2b6>
					F -= dy2;
   84ba0:	9b03      	ldr	r3, [sp, #12]
			while (x <= p2x)
   84ba2:	45a0      	cmp	r8, r4
					F -= dy2;
   84ba4:	ebab 0b03 	sub.w	fp, fp, r3
   84ba8:	fa0f fb8b 	sxth.w	fp, fp
			while (x <= p2x)
   84bac:	dac1      	bge.n	84b32 <mw_gl_line.part.3+0x27e>
   84bae:	e6d3      	b.n	84958 <mw_gl_line.part.3+0xa4>
			F = dx2 + dy;
   84bb0:	1ac3      	subs	r3, r0, r3
			while (y >= p2y)
   84bb2:	45ab      	cmp	fp, r5
			F = dx2 + dy;
   84bb4:	b21b      	sxth	r3, r3
			while (y >= p2y)
   84bb6:	f73f aecf 	bgt.w	84958 <mw_gl_line.part.3+0xa4>
   84bba:	f44f 4600 	mov.w	r6, #32768	; 0x8000
	MW_ASSERT(draw_info, "Null pointer argument");
   84bbe:	461f      	mov	r7, r3
   84bc0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 84c6c <mw_gl_line.part.3+0x3b8>
				if (gc.line == MW_GL_SOLID_LINE)
   84bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84bc8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   84bcc:	4293      	cmp	r3, r2
   84bce:	d022      	beq.n	84c16 <mw_gl_line.part.3+0x362>
					if (((uint16_t)gc.line & mask) == mask)
   84bd0:	ea36 0303 	bics.w	r3, r6, r3
   84bd4:	d036      	beq.n	84c44 <mw_gl_line.part.3+0x390>
	if (draw_info == NULL)
   84bd6:	f1b9 0f00 	cmp.w	r9, #0
   84bda:	f000 80e1 	beq.w	84da0 <mw_gl_line.part.3+0x4ec>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   84bde:	f89a 8031 	ldrb.w	r8, [sl, #49]	; 0x31
   84be2:	f1b8 0f01 	cmp.w	r8, #1
   84be6:	d045      	beq.n	84c74 <mw_gl_line.part.3+0x3c0>
   84be8:	b2ad      	uxth	r5, r5
						mask = 0x8000U;
   84bea:	0876      	lsrs	r6, r6, #1
   84bec:	bf08      	it	eq
   84bee:	f44f 4600 	moveq.w	r6, #32768	; 0x8000
				y--;
   84bf2:	3d01      	subs	r5, #1
				if (F <= 0)
   84bf4:	2f00      	cmp	r7, #0
				y--;
   84bf6:	b22d      	sxth	r5, r5
				if (F <= 0)
   84bf8:	dd17      	ble.n	84c2a <mw_gl_line.part.3+0x376>
					F += dy2_plus_dx2;
   84bfa:	9b01      	ldr	r3, [sp, #4]
					x++;
   84bfc:	3401      	adds	r4, #1
					F += dy2_plus_dx2;
   84bfe:	441f      	add	r7, r3
			while (y >= p2y)
   84c00:	45ab      	cmp	fp, r5
					x++;
   84c02:	b224      	sxth	r4, r4
					F += dy2_plus_dx2;
   84c04:	b23f      	sxth	r7, r7
			while (y >= p2y)
   84c06:	f73f aea7 	bgt.w	84958 <mw_gl_line.part.3+0xa4>
				if (gc.line == MW_GL_SOLID_LINE)
   84c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84c0e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   84c12:	4293      	cmp	r3, r2
   84c14:	d1dc      	bne.n	84bd0 <mw_gl_line.part.3+0x31c>
					mw_gl_fg_pixel(draw_info, x, y);
   84c16:	462a      	mov	r2, r5
   84c18:	4621      	mov	r1, r4
   84c1a:	4648      	mov	r0, r9
   84c1c:	4b0d      	ldr	r3, [pc, #52]	; (84c54 <mw_gl_line.part.3+0x3a0>)
   84c1e:	b2ad      	uxth	r5, r5
   84c20:	4798      	blx	r3
				y--;
   84c22:	3d01      	subs	r5, #1
				if (F <= 0)
   84c24:	2f00      	cmp	r7, #0
				y--;
   84c26:	b22d      	sxth	r5, r5
				if (F <= 0)
   84c28:	dce7      	bgt.n	84bfa <mw_gl_line.part.3+0x346>
					F += dx2;
   84c2a:	9b02      	ldr	r3, [sp, #8]
			while (y >= p2y)
   84c2c:	45ab      	cmp	fp, r5
					F += dx2;
   84c2e:	441f      	add	r7, r3
   84c30:	b23f      	sxth	r7, r7
			while (y >= p2y)
   84c32:	ddc7      	ble.n	84bc4 <mw_gl_line.part.3+0x310>
   84c34:	e690      	b.n	84958 <mw_gl_line.part.3+0xa4>
						mw_gl_fg_pixel(draw_info, x, y);
   84c36:	4621      	mov	r1, r4
   84c38:	462a      	mov	r2, r5
   84c3a:	4648      	mov	r0, r9
   84c3c:	4b05      	ldr	r3, [pc, #20]	; (84c54 <mw_gl_line.part.3+0x3a0>)
   84c3e:	b2a4      	uxth	r4, r4
   84c40:	4798      	blx	r3
   84c42:	e789      	b.n	84b58 <mw_gl_line.part.3+0x2a4>
						mw_gl_fg_pixel(draw_info, x, y);
   84c44:	462a      	mov	r2, r5
   84c46:	4621      	mov	r1, r4
   84c48:	4648      	mov	r0, r9
   84c4a:	4b02      	ldr	r3, [pc, #8]	; (84c54 <mw_gl_line.part.3+0x3a0>)
   84c4c:	b2ad      	uxth	r5, r5
   84c4e:	4798      	blx	r3
   84c50:	e7cb      	b.n	84bea <mw_gl_line.part.3+0x336>
   84c52:	bf00      	nop
   84c54:	00084805 	.word	0x00084805
   84c58:	00086e2d 	.word	0x00086e2d
   84c5c:	00086e31 	.word	0x00086e31
   84c60:	000a6618 	.word	0x000a6618
   84c64:	000ab018 	.word	0x000ab018
   84c68:	00086e39 	.word	0x00086e39
   84c6c:	200715e0 	.word	0x200715e0
   84c70:	00095add 	.word	0x00095add
		pixel(draw_info, client_x, client_y, gc.bg_colour);
   84c74:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c78:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   84c7a:	4b4e      	ldr	r3, [pc, #312]	; (84db4 <mw_gl_line.part.3+0x500>)
   84c7c:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   84c7e:	4b4e      	ldr	r3, [pc, #312]	; (84db8 <mw_gl_line.part.3+0x504>)
	int16_t root_width = MW_ROOT_WIDTH;
   84c80:	9003      	str	r0, [sp, #12]
	int16_t root_height = MW_ROOT_HEIGHT;
   84c82:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   84c84:	4b4d      	ldr	r3, [pc, #308]	; (84dbc <mw_gl_line.part.3+0x508>)
	int16_t root_height = MW_ROOT_HEIGHT;
   84c86:	9004      	str	r0, [sp, #16]
	MW_ASSERT(draw_info, "Null pointer argument");
   84c88:	2285      	movs	r2, #133	; 0x85
   84c8a:	4640      	mov	r0, r8
   84c8c:	494c      	ldr	r1, [pc, #304]	; (84dc0 <mw_gl_line.part.3+0x50c>)
   84c8e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 84dc8 <mw_gl_line.part.3+0x514>
   84c92:	47c0      	blx	r8
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   84c94:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
   84c98:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
   84c9c:	4413      	add	r3, r2
   84c9e:	429c      	cmp	r4, r3
   84ca0:	daa2      	bge.n	84be8 <mw_gl_line.part.3+0x334>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84ca2:	f9b9 1006 	ldrsh.w	r1, [r9, #6]
   84ca6:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
   84caa:	440b      	add	r3, r1
   84cac:	429d      	cmp	r5, r3
   84cae:	da9b      	bge.n	84be8 <mw_gl_line.part.3+0x334>
	if (client_x < draw_info->clip_rect.x)
   84cb0:	42a2      	cmp	r2, r4
   84cb2:	dc99      	bgt.n	84be8 <mw_gl_line.part.3+0x334>
	if (client_y < draw_info->clip_rect.y)
   84cb4:	42a9      	cmp	r1, r5
   84cb6:	dc97      	bgt.n	84be8 <mw_gl_line.part.3+0x334>
	display_x = client_x + draw_info->origin_x;
   84cb8:	f8b9 0000 	ldrh.w	r0, [r9]
	display_y = client_y + draw_info->origin_y;
   84cbc:	b2ad      	uxth	r5, r5
	display_x = client_x + draw_info->origin_x;
   84cbe:	4420      	add	r0, r4
   84cc0:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84cc2:	2800      	cmp	r0, #0
   84cc4:	db91      	blt.n	84bea <mw_gl_line.part.3+0x336>
   84cc6:	9b03      	ldr	r3, [sp, #12]
   84cc8:	4283      	cmp	r3, r0
   84cca:	dd8e      	ble.n	84bea <mw_gl_line.part.3+0x336>
	display_y = client_y + draw_info->origin_y;
   84ccc:	f8b9 1002 	ldrh.w	r1, [r9, #2]
   84cd0:	4429      	add	r1, r5
   84cd2:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84cd4:	2900      	cmp	r1, #0
   84cd6:	db88      	blt.n	84bea <mw_gl_line.part.3+0x336>
   84cd8:	9b04      	ldr	r3, [sp, #16]
   84cda:	428b      	cmp	r3, r1
   84cdc:	dd85      	ble.n	84bea <mw_gl_line.part.3+0x336>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   84cde:	9a05      	ldr	r2, [sp, #20]
   84ce0:	4b38      	ldr	r3, [pc, #224]	; (84dc4 <mw_gl_line.part.3+0x510>)
   84ce2:	4798      	blx	r3
   84ce4:	e781      	b.n	84bea <mw_gl_line.part.3+0x336>
		pixel(draw_info, client_x, client_y, gc.bg_colour);
   84ce6:	f8da 3004 	ldr.w	r3, [sl, #4]
   84cea:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   84cec:	4b31      	ldr	r3, [pc, #196]	; (84db4 <mw_gl_line.part.3+0x500>)
   84cee:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   84cf0:	4b31      	ldr	r3, [pc, #196]	; (84db8 <mw_gl_line.part.3+0x504>)
	int16_t root_width = MW_ROOT_WIDTH;
   84cf2:	9002      	str	r0, [sp, #8]
	int16_t root_height = MW_ROOT_HEIGHT;
   84cf4:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   84cf6:	4b31      	ldr	r3, [pc, #196]	; (84dbc <mw_gl_line.part.3+0x508>)
	int16_t root_height = MW_ROOT_HEIGHT;
   84cf8:	9004      	str	r0, [sp, #16]
	MW_ASSERT(draw_info, "Null pointer argument");
   84cfa:	2285      	movs	r2, #133	; 0x85
   84cfc:	4638      	mov	r0, r7
   84cfe:	4930      	ldr	r1, [pc, #192]	; (84dc0 <mw_gl_line.part.3+0x50c>)
   84d00:	4f31      	ldr	r7, [pc, #196]	; (84dc8 <mw_gl_line.part.3+0x514>)
   84d02:	47b8      	blx	r7
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   84d04:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
   84d08:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
   84d0c:	4413      	add	r3, r2
   84d0e:	429c      	cmp	r4, r3
   84d10:	f6bf af21 	bge.w	84b56 <mw_gl_line.part.3+0x2a2>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84d14:	f9b9 1006 	ldrsh.w	r1, [r9, #6]
   84d18:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
   84d1c:	440b      	add	r3, r1
   84d1e:	429d      	cmp	r5, r3
   84d20:	f6bf af19 	bge.w	84b56 <mw_gl_line.part.3+0x2a2>
	if (client_x < draw_info->clip_rect.x)
   84d24:	42a2      	cmp	r2, r4
   84d26:	f73f af16 	bgt.w	84b56 <mw_gl_line.part.3+0x2a2>
	if (client_y < draw_info->clip_rect.y)
   84d2a:	42a9      	cmp	r1, r5
   84d2c:	f73f af13 	bgt.w	84b56 <mw_gl_line.part.3+0x2a2>
	display_x = client_x + draw_info->origin_x;
   84d30:	f8b9 0000 	ldrh.w	r0, [r9]
   84d34:	b2a4      	uxth	r4, r4
   84d36:	4420      	add	r0, r4
   84d38:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84d3a:	2800      	cmp	r0, #0
   84d3c:	f6ff af0c 	blt.w	84b58 <mw_gl_line.part.3+0x2a4>
   84d40:	9b02      	ldr	r3, [sp, #8]
   84d42:	4283      	cmp	r3, r0
   84d44:	f77f af08 	ble.w	84b58 <mw_gl_line.part.3+0x2a4>
	display_y = client_y + draw_info->origin_y;
   84d48:	f8b9 1002 	ldrh.w	r1, [r9, #2]
   84d4c:	4429      	add	r1, r5
   84d4e:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84d50:	2900      	cmp	r1, #0
   84d52:	f6ff af01 	blt.w	84b58 <mw_gl_line.part.3+0x2a4>
   84d56:	9b04      	ldr	r3, [sp, #16]
   84d58:	428b      	cmp	r3, r1
   84d5a:	f77f aefd 	ble.w	84b58 <mw_gl_line.part.3+0x2a4>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   84d5e:	9a05      	ldr	r2, [sp, #20]
   84d60:	4b18      	ldr	r3, [pc, #96]	; (84dc4 <mw_gl_line.part.3+0x510>)
   84d62:	4798      	blx	r3
   84d64:	e6f8      	b.n	84b58 <mw_gl_line.part.3+0x2a4>
		MW_ASSERT((bool)false, "Null pointer argument");
   84d66:	4b15      	ldr	r3, [pc, #84]	; (84dbc <mw_gl_line.part.3+0x508>)
   84d68:	f240 627f 	movw	r2, #1663	; 0x67f
   84d6c:	4917      	ldr	r1, [pc, #92]	; (84dcc <mw_gl_line.part.3+0x518>)
   84d6e:	4648      	mov	r0, r9
   84d70:	f8df b054 	ldr.w	fp, [pc, #84]	; 84dc8 <mw_gl_line.part.3+0x514>
   84d74:	b2a4      	uxth	r4, r4
   84d76:	47d8      	blx	fp
   84d78:	e5df      	b.n	8493a <mw_gl_line.part.3+0x86>
   84d7a:	4b10      	ldr	r3, [pc, #64]	; (84dbc <mw_gl_line.part.3+0x508>)
   84d7c:	f240 627f 	movw	r2, #1663	; 0x67f
   84d80:	4912      	ldr	r1, [pc, #72]	; (84dcc <mw_gl_line.part.3+0x518>)
   84d82:	4648      	mov	r0, r9
   84d84:	f8df 8040 	ldr.w	r8, [pc, #64]	; 84dc8 <mw_gl_line.part.3+0x514>
   84d88:	b2ad      	uxth	r5, r5
   84d8a:	47c0      	blx	r8
   84d8c:	e602      	b.n	84994 <mw_gl_line.part.3+0xe0>
   84d8e:	4b0b      	ldr	r3, [pc, #44]	; (84dbc <mw_gl_line.part.3+0x508>)
   84d90:	f240 627f 	movw	r2, #1663	; 0x67f
   84d94:	490d      	ldr	r1, [pc, #52]	; (84dcc <mw_gl_line.part.3+0x518>)
   84d96:	4648      	mov	r0, r9
   84d98:	4f0b      	ldr	r7, [pc, #44]	; (84dc8 <mw_gl_line.part.3+0x514>)
   84d9a:	b2a4      	uxth	r4, r4
   84d9c:	47b8      	blx	r7
   84d9e:	e6db      	b.n	84b58 <mw_gl_line.part.3+0x2a4>
   84da0:	4b06      	ldr	r3, [pc, #24]	; (84dbc <mw_gl_line.part.3+0x508>)
   84da2:	f240 627f 	movw	r2, #1663	; 0x67f
   84da6:	4909      	ldr	r1, [pc, #36]	; (84dcc <mw_gl_line.part.3+0x518>)
   84da8:	4648      	mov	r0, r9
   84daa:	f8df 801c 	ldr.w	r8, [pc, #28]	; 84dc8 <mw_gl_line.part.3+0x514>
   84dae:	b2ad      	uxth	r5, r5
   84db0:	47c0      	blx	r8
   84db2:	e71a      	b.n	84bea <mw_gl_line.part.3+0x336>
   84db4:	00086e2d 	.word	0x00086e2d
   84db8:	00086e31 	.word	0x00086e31
   84dbc:	000a6618 	.word	0x000a6618
   84dc0:	000ab018 	.word	0x000ab018
   84dc4:	00086e39 	.word	0x00086e39
   84dc8:	00095add 	.word	0x00095add
   84dcc:	000ab074 	.word	0x000ab074

00084dd0 <mw_gl_hline>:
{
   84dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84dd4:	b087      	sub	sp, #28
	if (draw_info == NULL)
   84dd6:	2800      	cmp	r0, #0
   84dd8:	f000 8092 	beq.w	84f00 <mw_gl_hline+0x130>
	if (x_start > x_end)
   84ddc:	4291      	cmp	r1, r2
   84dde:	460e      	mov	r6, r1
   84de0:	4614      	mov	r4, r2
   84de2:	469b      	mov	fp, r3
   84de4:	4607      	mov	r7, r0
   84de6:	dd7a      	ble.n	84ede <mw_gl_hline+0x10e>
	if (x_start >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   84de8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
   84dec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
   84df0:	4413      	add	r3, r2
   84df2:	429c      	cmp	r4, r3
   84df4:	da70      	bge.n	84ed8 <mw_gl_hline+0x108>
   84df6:	4296      	cmp	r6, r2
   84df8:	db6e      	blt.n	84ed8 <mw_gl_hline+0x108>
			y < draw_info->clip_rect.y || y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
			x_end < draw_info->clip_rect.x ||
   84dfe:	455b      	cmp	r3, fp
   84e00:	dc6a      	bgt.n	84ed8 <mw_gl_hline+0x108>
			y < draw_info->clip_rect.y || y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84e02:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   84e06:	4413      	add	r3, r2
   84e08:	459b      	cmp	fp, r3
   84e0a:	da65      	bge.n	84ed8 <mw_gl_hline+0x108>
	if (gc.line == MW_GL_SOLID_LINE)
   84e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84e10:	f8df a120 	ldr.w	sl, [pc, #288]	; 84f34 <mw_gl_hline+0x164>
   84e14:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   84e18:	4293      	cmp	r3, r2
   84e1a:	d050      	beq.n	84ebe <mw_gl_hline+0xee>
		for (x = x_start; x <= x_end; x++)
   84e1c:	42b4      	cmp	r4, r6
   84e1e:	dc5b      	bgt.n	84ed8 <mw_gl_hline+0x108>
   84e20:	f44f 4500 	mov.w	r5, #32768	; 0x8000
	MW_ASSERT(draw_info, "Null pointer argument");
   84e24:	f8df 9104 	ldr.w	r9, [pc, #260]	; 84f2c <mw_gl_hline+0x15c>
   84e28:	e00f      	b.n	84e4a <mw_gl_hline+0x7a>
				if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   84e2a:	f89a 8031 	ldrb.w	r8, [sl, #49]	; 0x31
   84e2e:	f1b8 0f01 	cmp.w	r8, #1
   84e32:	d057      	beq.n	84ee4 <mw_gl_hline+0x114>
   84e34:	b2a4      	uxth	r4, r4
		for (x = x_start; x <= x_end; x++)
   84e36:	3401      	adds	r4, #1
				mask = 0x8000U;
   84e38:	086d      	lsrs	r5, r5, #1
		for (x = x_start; x <= x_end; x++)
   84e3a:	b224      	sxth	r4, r4
				mask = 0x8000U;
   84e3c:	bf08      	it	eq
   84e3e:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
		for (x = x_start; x <= x_end; x++)
   84e42:	42a6      	cmp	r6, r4
   84e44:	db48      	blt.n	84ed8 <mw_gl_hline+0x108>
   84e46:	f8ba 300c 	ldrh.w	r3, [sl, #12]
			if (((uint16_t)gc.line & mask) == mask)
   84e4a:	ea35 0303 	bics.w	r3, r5, r3
   84e4e:	d1ec      	bne.n	84e2a <mw_gl_hline+0x5a>
				pixel(draw_info, x, y, gc.fg_colour);
   84e50:	f8da 3000 	ldr.w	r3, [sl]
   84e54:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   84e56:	4b2f      	ldr	r3, [pc, #188]	; (84f14 <mw_gl_hline+0x144>)
   84e58:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   84e5a:	4b2f      	ldr	r3, [pc, #188]	; (84f18 <mw_gl_hline+0x148>)
	int16_t root_width = MW_ROOT_WIDTH;
   84e5c:	9003      	str	r0, [sp, #12]
	int16_t root_height = MW_ROOT_HEIGHT;
   84e5e:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   84e60:	464b      	mov	r3, r9
	int16_t root_height = MW_ROOT_HEIGHT;
   84e62:	9004      	str	r0, [sp, #16]
	MW_ASSERT(draw_info, "Null pointer argument");
   84e64:	2285      	movs	r2, #133	; 0x85
   84e66:	2001      	movs	r0, #1
   84e68:	492c      	ldr	r1, [pc, #176]	; (84f1c <mw_gl_hline+0x14c>)
   84e6a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 84f28 <mw_gl_hline+0x158>
   84e6e:	47c0      	blx	r8
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   84e70:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
   84e74:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
   84e78:	4413      	add	r3, r2
   84e7a:	429c      	cmp	r4, r3
   84e7c:	dada      	bge.n	84e34 <mw_gl_hline+0x64>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84e7e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84e82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   84e86:	440b      	add	r3, r1
   84e88:	459b      	cmp	fp, r3
   84e8a:	dad3      	bge.n	84e34 <mw_gl_hline+0x64>
	if (client_x < draw_info->clip_rect.x)
   84e8c:	42a2      	cmp	r2, r4
   84e8e:	dcd1      	bgt.n	84e34 <mw_gl_hline+0x64>
	if (client_y < draw_info->clip_rect.y)
   84e90:	458b      	cmp	fp, r1
   84e92:	dbcf      	blt.n	84e34 <mw_gl_hline+0x64>
	display_x = client_x + draw_info->origin_x;
   84e94:	8838      	ldrh	r0, [r7, #0]
   84e96:	b2a4      	uxth	r4, r4
   84e98:	4420      	add	r0, r4
   84e9a:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84e9c:	2800      	cmp	r0, #0
   84e9e:	dbca      	blt.n	84e36 <mw_gl_hline+0x66>
   84ea0:	9b03      	ldr	r3, [sp, #12]
   84ea2:	4283      	cmp	r3, r0
   84ea4:	ddc7      	ble.n	84e36 <mw_gl_hline+0x66>
	display_y = client_y + draw_info->origin_y;
   84ea6:	8879      	ldrh	r1, [r7, #2]
   84ea8:	4459      	add	r1, fp
   84eaa:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   84eac:	2900      	cmp	r1, #0
   84eae:	dbc2      	blt.n	84e36 <mw_gl_hline+0x66>
   84eb0:	9b04      	ldr	r3, [sp, #16]
   84eb2:	428b      	cmp	r3, r1
   84eb4:	ddbf      	ble.n	84e36 <mw_gl_hline+0x66>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   84eb6:	9a05      	ldr	r2, [sp, #20]
   84eb8:	4b19      	ldr	r3, [pc, #100]	; (84f20 <mw_gl_hline+0x150>)
   84eba:	4798      	blx	r3
   84ebc:	e7bb      	b.n	84e36 <mw_gl_hline+0x66>
		filled_rectangle(draw_info, x_start, y, (x_end - x_start) + 1, 1, gc.fg_colour);
   84ebe:	2501      	movs	r5, #1
   84ec0:	f8da 2000 	ldr.w	r2, [sl]
   84ec4:	1973      	adds	r3, r6, r5
   84ec6:	1b1b      	subs	r3, r3, r4
   84ec8:	9201      	str	r2, [sp, #4]
   84eca:	4621      	mov	r1, r4
   84ecc:	b21b      	sxth	r3, r3
   84ece:	465a      	mov	r2, fp
   84ed0:	4638      	mov	r0, r7
   84ed2:	9500      	str	r5, [sp, #0]
   84ed4:	4c13      	ldr	r4, [pc, #76]	; (84f24 <mw_gl_hline+0x154>)
   84ed6:	47a0      	blx	r4
}
   84ed8:	b007      	add	sp, #28
   84eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (x_start > x_end)
   84ede:	460c      	mov	r4, r1
   84ee0:	4616      	mov	r6, r2
   84ee2:	e781      	b.n	84de8 <mw_gl_hline+0x18>
					pixel(draw_info, x, y, gc.bg_colour);
   84ee4:	f8da 3004 	ldr.w	r3, [sl, #4]
   84ee8:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   84eea:	4b0a      	ldr	r3, [pc, #40]	; (84f14 <mw_gl_hline+0x144>)
   84eec:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   84eee:	4b0a      	ldr	r3, [pc, #40]	; (84f18 <mw_gl_hline+0x148>)
	int16_t root_width = MW_ROOT_WIDTH;
   84ef0:	9003      	str	r0, [sp, #12]
	int16_t root_height = MW_ROOT_HEIGHT;
   84ef2:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   84ef4:	464b      	mov	r3, r9
	int16_t root_height = MW_ROOT_HEIGHT;
   84ef6:	9004      	str	r0, [sp, #16]
	MW_ASSERT(draw_info, "Null pointer argument");
   84ef8:	2285      	movs	r2, #133	; 0x85
   84efa:	4640      	mov	r0, r8
   84efc:	4907      	ldr	r1, [pc, #28]	; (84f1c <mw_gl_hline+0x14c>)
   84efe:	e7b4      	b.n	84e6a <mw_gl_hline+0x9a>
		MW_ASSERT((bool)false, "Null pointer argument");
   84f00:	4c09      	ldr	r4, [pc, #36]	; (84f28 <mw_gl_hline+0x158>)
   84f02:	f240 6291 	movw	r2, #1681	; 0x691
   84f06:	46a4      	mov	ip, r4
   84f08:	4b08      	ldr	r3, [pc, #32]	; (84f2c <mw_gl_hline+0x15c>)
   84f0a:	4909      	ldr	r1, [pc, #36]	; (84f30 <mw_gl_hline+0x160>)
}
   84f0c:	b007      	add	sp, #28
   84f0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MW_ASSERT((bool)false, "Null pointer argument");
   84f12:	4760      	bx	ip
   84f14:	00086e2d 	.word	0x00086e2d
   84f18:	00086e31 	.word	0x00086e31
   84f1c:	000ab018 	.word	0x000ab018
   84f20:	00086e39 	.word	0x00086e39
   84f24:	00084015 	.word	0x00084015
   84f28:	00095add 	.word	0x00095add
   84f2c:	000a6618 	.word	0x000a6618
   84f30:	000ab084 	.word	0x000ab084
   84f34:	200715e0 	.word	0x200715e0

00084f38 <mw_gl_vline>:
{
   84f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84f3c:	b087      	sub	sp, #28
	if (draw_info == NULL)
   84f3e:	2800      	cmp	r0, #0
   84f40:	f000 8092 	beq.w	85068 <mw_gl_vline+0x130>
	if (y_start > y_end)
   84f44:	429a      	cmp	r2, r3
   84f46:	468b      	mov	fp, r1
   84f48:	4616      	mov	r6, r2
   84f4a:	461c      	mov	r4, r3
   84f4c:	4607      	mov	r7, r0
   84f4e:	dd7a      	ble.n	85046 <mw_gl_vline+0x10e>
	if (x < draw_info->clip_rect.x || x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   84f50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   84f54:	455b      	cmp	r3, fp
   84f56:	dc73      	bgt.n	85040 <mw_gl_vline+0x108>
   84f58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
   84f5c:	4413      	add	r3, r2
   84f5e:	459b      	cmp	fp, r3
   84f60:	da6e      	bge.n	85040 <mw_gl_vline+0x108>
			y_start >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   84f62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   84f6a:	4413      	add	r3, r2
	if (x < draw_info->clip_rect.x || x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   84f6c:	429c      	cmp	r4, r3
   84f6e:	da67      	bge.n	85040 <mw_gl_vline+0x108>
			y_start >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   84f70:	4296      	cmp	r6, r2
   84f72:	db65      	blt.n	85040 <mw_gl_vline+0x108>
	if (gc.line == MW_GL_SOLID_LINE)
   84f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84f78:	f8df a120 	ldr.w	sl, [pc, #288]	; 8509c <mw_gl_vline+0x164>
   84f7c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   84f80:	4293      	cmp	r3, r2
   84f82:	d050      	beq.n	85026 <mw_gl_vline+0xee>
		for (y = y_start; y <= y_end; y++)
   84f84:	42b4      	cmp	r4, r6
   84f86:	dc5b      	bgt.n	85040 <mw_gl_vline+0x108>
   84f88:	f44f 4500 	mov.w	r5, #32768	; 0x8000
	MW_ASSERT(draw_info, "Null pointer argument");
   84f8c:	f8df 9104 	ldr.w	r9, [pc, #260]	; 85094 <mw_gl_vline+0x15c>
   84f90:	e00f      	b.n	84fb2 <mw_gl_vline+0x7a>
				if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   84f92:	f89a 8031 	ldrb.w	r8, [sl, #49]	; 0x31
   84f96:	f1b8 0f01 	cmp.w	r8, #1
   84f9a:	d057      	beq.n	8504c <mw_gl_vline+0x114>
   84f9c:	b2a4      	uxth	r4, r4
		for (y = y_start; y <= y_end; y++)
   84f9e:	3401      	adds	r4, #1
				mask = 0x8000U;
   84fa0:	086d      	lsrs	r5, r5, #1
		for (y = y_start; y <= y_end; y++)
   84fa2:	b224      	sxth	r4, r4
				mask = 0x8000U;
   84fa4:	bf08      	it	eq
   84fa6:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
		for (y = y_start; y <= y_end; y++)
   84faa:	42a6      	cmp	r6, r4
   84fac:	db48      	blt.n	85040 <mw_gl_vline+0x108>
   84fae:	f8ba 300c 	ldrh.w	r3, [sl, #12]
			if (((uint16_t)gc.line & mask) == mask)
   84fb2:	ea35 0303 	bics.w	r3, r5, r3
   84fb6:	d1ec      	bne.n	84f92 <mw_gl_vline+0x5a>
				pixel(draw_info, x, y, gc.fg_colour);
   84fb8:	f8da 3000 	ldr.w	r3, [sl]
   84fbc:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   84fbe:	4b2f      	ldr	r3, [pc, #188]	; (8507c <mw_gl_vline+0x144>)
   84fc0:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   84fc2:	4b2f      	ldr	r3, [pc, #188]	; (85080 <mw_gl_vline+0x148>)
	int16_t root_width = MW_ROOT_WIDTH;
   84fc4:	9003      	str	r0, [sp, #12]
	int16_t root_height = MW_ROOT_HEIGHT;
   84fc6:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   84fc8:	464b      	mov	r3, r9
	int16_t root_height = MW_ROOT_HEIGHT;
   84fca:	9004      	str	r0, [sp, #16]
	MW_ASSERT(draw_info, "Null pointer argument");
   84fcc:	2285      	movs	r2, #133	; 0x85
   84fce:	2001      	movs	r0, #1
   84fd0:	492c      	ldr	r1, [pc, #176]	; (85084 <mw_gl_vline+0x14c>)
   84fd2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 85090 <mw_gl_vline+0x158>
   84fd6:	47c0      	blx	r8
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   84fd8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
   84fdc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
   84fe0:	4413      	add	r3, r2
   84fe2:	459b      	cmp	fp, r3
   84fe4:	dada      	bge.n	84f9c <mw_gl_vline+0x64>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   84fe6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84fea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   84fee:	440b      	add	r3, r1
   84ff0:	429c      	cmp	r4, r3
   84ff2:	dad3      	bge.n	84f9c <mw_gl_vline+0x64>
	if (client_x < draw_info->clip_rect.x)
   84ff4:	4593      	cmp	fp, r2
   84ff6:	dbd1      	blt.n	84f9c <mw_gl_vline+0x64>
	if (client_y < draw_info->clip_rect.y)
   84ff8:	42a1      	cmp	r1, r4
   84ffa:	dccf      	bgt.n	84f9c <mw_gl_vline+0x64>
	display_x = client_x + draw_info->origin_x;
   84ffc:	8838      	ldrh	r0, [r7, #0]
	display_y = client_y + draw_info->origin_y;
   84ffe:	b2a4      	uxth	r4, r4
	display_x = client_x + draw_info->origin_x;
   85000:	4458      	add	r0, fp
   85002:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   85004:	2800      	cmp	r0, #0
   85006:	dbca      	blt.n	84f9e <mw_gl_vline+0x66>
   85008:	9b03      	ldr	r3, [sp, #12]
   8500a:	4283      	cmp	r3, r0
   8500c:	ddc7      	ble.n	84f9e <mw_gl_vline+0x66>
	display_y = client_y + draw_info->origin_y;
   8500e:	8879      	ldrh	r1, [r7, #2]
   85010:	4421      	add	r1, r4
   85012:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   85014:	2900      	cmp	r1, #0
   85016:	dbc2      	blt.n	84f9e <mw_gl_vline+0x66>
   85018:	9b04      	ldr	r3, [sp, #16]
   8501a:	428b      	cmp	r3, r1
   8501c:	ddbf      	ble.n	84f9e <mw_gl_vline+0x66>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   8501e:	9a05      	ldr	r2, [sp, #20]
   85020:	4b19      	ldr	r3, [pc, #100]	; (85088 <mw_gl_vline+0x150>)
   85022:	4798      	blx	r3
   85024:	e7bb      	b.n	84f9e <mw_gl_vline+0x66>
		filled_rectangle(draw_info, x, y_start, 1, (y_end - y_start) + 1, gc.fg_colour);
   85026:	1c73      	adds	r3, r6, #1
   85028:	1b1b      	subs	r3, r3, r4
   8502a:	f8da 2000 	ldr.w	r2, [sl]
   8502e:	b21b      	sxth	r3, r3
   85030:	9300      	str	r3, [sp, #0]
   85032:	9201      	str	r2, [sp, #4]
   85034:	4659      	mov	r1, fp
   85036:	4622      	mov	r2, r4
   85038:	4638      	mov	r0, r7
   8503a:	2301      	movs	r3, #1
   8503c:	4c13      	ldr	r4, [pc, #76]	; (8508c <mw_gl_vline+0x154>)
   8503e:	47a0      	blx	r4
}
   85040:	b007      	add	sp, #28
   85042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (y_start > y_end)
   85046:	4614      	mov	r4, r2
   85048:	461e      	mov	r6, r3
   8504a:	e781      	b.n	84f50 <mw_gl_vline+0x18>
					pixel(draw_info, x, y, gc.bg_colour);
   8504c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85050:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   85052:	4b0a      	ldr	r3, [pc, #40]	; (8507c <mw_gl_vline+0x144>)
   85054:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   85056:	4b0a      	ldr	r3, [pc, #40]	; (85080 <mw_gl_vline+0x148>)
	int16_t root_width = MW_ROOT_WIDTH;
   85058:	9003      	str	r0, [sp, #12]
	int16_t root_height = MW_ROOT_HEIGHT;
   8505a:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   8505c:	464b      	mov	r3, r9
	int16_t root_height = MW_ROOT_HEIGHT;
   8505e:	9004      	str	r0, [sp, #16]
	MW_ASSERT(draw_info, "Null pointer argument");
   85060:	2285      	movs	r2, #133	; 0x85
   85062:	4640      	mov	r0, r8
   85064:	4907      	ldr	r1, [pc, #28]	; (85084 <mw_gl_vline+0x14c>)
   85066:	e7b4      	b.n	84fd2 <mw_gl_vline+0x9a>
		MW_ASSERT((bool)false, "Null pointer argument");
   85068:	4c09      	ldr	r4, [pc, #36]	; (85090 <mw_gl_vline+0x158>)
   8506a:	f240 62c7 	movw	r2, #1735	; 0x6c7
   8506e:	46a4      	mov	ip, r4
   85070:	4b08      	ldr	r3, [pc, #32]	; (85094 <mw_gl_vline+0x15c>)
   85072:	4909      	ldr	r1, [pc, #36]	; (85098 <mw_gl_vline+0x160>)
}
   85074:	b007      	add	sp, #28
   85076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MW_ASSERT((bool)false, "Null pointer argument");
   8507a:	4760      	bx	ip
   8507c:	00086e2d 	.word	0x00086e2d
   85080:	00086e31 	.word	0x00086e31
   85084:	000ab018 	.word	0x000ab018
   85088:	00086e39 	.word	0x00086e39
   8508c:	00084015 	.word	0x00084015
   85090:	00095add 	.word	0x00095add
   85094:	000a6618 	.word	0x000a6618
   85098:	000ab090 	.word	0x000ab090
   8509c:	200715e0 	.word	0x200715e0

000850a0 <mw_gl_line>:
{
   850a0:	b430      	push	{r4, r5}
   850a2:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
	if (draw_info == NULL)
   850a6:	b148      	cbz	r0, 850bc <mw_gl_line+0x1c>
	if (gc.line == MW_GL_LINE_NONE)
   850a8:	4c08      	ldr	r4, [pc, #32]	; (850cc <mw_gl_line+0x2c>)
   850aa:	89a4      	ldrh	r4, [r4, #12]
   850ac:	b124      	cbz	r4, 850b8 <mw_gl_line+0x18>
   850ae:	4c08      	ldr	r4, [pc, #32]	; (850d0 <mw_gl_line+0x30>)
   850b0:	9502      	str	r5, [sp, #8]
   850b2:	46a4      	mov	ip, r4
}
   850b4:	bc30      	pop	{r4, r5}
   850b6:	4760      	bx	ip
   850b8:	bc30      	pop	{r4, r5}
   850ba:	4770      	bx	lr
		MW_ASSERT((bool)false, "Null pointer argument");
   850bc:	4c05      	ldr	r4, [pc, #20]	; (850d4 <mw_gl_line+0x34>)
   850be:	4b06      	ldr	r3, [pc, #24]	; (850d8 <mw_gl_line+0x38>)
   850c0:	46a4      	mov	ip, r4
}
   850c2:	bc30      	pop	{r4, r5}
		MW_ASSERT((bool)false, "Null pointer argument");
   850c4:	f240 7204 	movw	r2, #1796	; 0x704
   850c8:	4904      	ldr	r1, [pc, #16]	; (850dc <mw_gl_line+0x3c>)
   850ca:	4760      	bx	ip
   850cc:	200715e0 	.word	0x200715e0
   850d0:	000848b5 	.word	0x000848b5
   850d4:	00095add 	.word	0x00095add
   850d8:	000a6618 	.word	0x000a6618
   850dc:	000ab09c 	.word	0x000ab09c

000850e0 <mw_gl_rectangle>:
{
   850e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   850e4:	b08b      	sub	sp, #44	; 0x2c
   850e6:	9208      	str	r2, [sp, #32]
   850e8:	f9bd 4050 	ldrsh.w	r4, [sp, #80]	; 0x50
	if (draw_info == NULL)
   850ec:	2800      	cmp	r0, #0
   850ee:	f000 8235 	beq.w	8555c <mw_gl_rectangle+0x47c>
	if (gc.fill == MW_GL_NO_FILL)
   850f2:	f8df b36c 	ldr.w	fp, [pc, #876]	; 85460 <mw_gl_rectangle+0x380>
   850f6:	468a      	mov	sl, r1
   850f8:	f89b 602f 	ldrb.w	r6, [fp, #47]	; 0x2f
   850fc:	461d      	mov	r5, r3
   850fe:	4680      	mov	r8, r0
   85100:	2e00      	cmp	r6, #0
   85102:	f000 80c9 	beq.w	85298 <mw_gl_rectangle+0x1b8>
		if (gc.border == MW_GL_BORDER_ON)
   85106:	f89b 602e 	ldrb.w	r6, [fp, #46]	; 0x2e
   8510a:	2e01      	cmp	r6, #1
   8510c:	f000 80ec 	beq.w	852e8 <mw_gl_rectangle+0x208>
			if (!gc.pattern_set)
   85110:	f89b 6030 	ldrb.w	r6, [fp, #48]	; 0x30
   85114:	2e00      	cmp	r6, #0
   85116:	f000 80de 	beq.w	852d6 <mw_gl_rectangle+0x1f6>
				for (x = x_start; x < x_start + width; x++)
   8511a:	440b      	add	r3, r1
   8511c:	428b      	cmp	r3, r1
   8511e:	9309      	str	r3, [sp, #36]	; 0x24
   85120:	dd6d      	ble.n	851fe <mw_gl_rectangle+0x11e>
   85122:	18a3      	adds	r3, r4, r2
   85124:	4293      	cmp	r3, r2
   85126:	dd6a      	ble.n	851fe <mw_gl_rectangle+0x11e>
	MW_ASSERT(draw_info, "Null pointer argument");
   85128:	46d0      	mov	r8, sl
   8512a:	4681      	mov	r9, r0
   8512c:	469a      	mov	sl, r3
		mask = 0x8000U >> ((uint16_t)x & 0x0FU);
   8512e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85132:	fa1f f288 	uxth.w	r2, r8
   85136:	9206      	str	r2, [sp, #24]
   85138:	f002 020f 	and.w	r2, r2, #15
   8513c:	40d3      	lsrs	r3, r2
   8513e:	9c08      	ldr	r4, [sp, #32]
   85140:	b29b      	uxth	r3, r3
   85142:	9303      	str	r3, [sp, #12]
   85144:	4626      	mov	r6, r4
   85146:	e013      	b.n	85170 <mw_gl_rectangle+0x90>
		pattern_y = (uint16_t)y & 0x0FU;
   85148:	b2a5      	uxth	r5, r4
		if ((gc.pattern[pattern_y] & mask) == mask)
   8514a:	f005 030f 	and.w	r3, r5, #15
   8514e:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
   85152:	89db      	ldrh	r3, [r3, #14]
   85154:	9a03      	ldr	r2, [sp, #12]
   85156:	ea32 0303 	bics.w	r3, r2, r3
   8515a:	d055      	beq.n	85208 <mw_gl_rectangle+0x128>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   8515c:	f89b 7031 	ldrb.w	r7, [fp, #49]	; 0x31
   85160:	2f01      	cmp	r7, #1
   85162:	f000 808b 	beq.w	8527c <mw_gl_rectangle+0x19c>
					for (y = y_start; y < y_start + height; y++)
   85166:	1c6c      	adds	r4, r5, #1
   85168:	b224      	sxth	r4, r4
   8516a:	4554      	cmp	r4, sl
   8516c:	4626      	mov	r6, r4
   8516e:	da3f      	bge.n	851f0 <mw_gl_rectangle+0x110>
	if (gc.pattern_set)
   85170:	f89b 3030 	ldrb.w	r3, [fp, #48]	; 0x30
   85174:	2b00      	cmp	r3, #0
   85176:	d1e7      	bne.n	85148 <mw_gl_rectangle+0x68>
		pixel(draw_info, x, y, gc.solid_fill_colour);
   85178:	f8db 3008 	ldr.w	r3, [fp, #8]
	MW_ASSERT(draw_info, "Null pointer argument");
   8517c:	4daf      	ldr	r5, [pc, #700]	; (8543c <mw_gl_rectangle+0x35c>)
		pixel(draw_info, x, y, gc.solid_fill_colour);
   8517e:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   85180:	4baf      	ldr	r3, [pc, #700]	; (85440 <mw_gl_rectangle+0x360>)
   85182:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   85184:	4baf      	ldr	r3, [pc, #700]	; (85444 <mw_gl_rectangle+0x364>)
	int16_t root_width = MW_ROOT_WIDTH;
   85186:	4607      	mov	r7, r0
	int16_t root_height = MW_ROOT_HEIGHT;
   85188:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   8518a:	4baf      	ldr	r3, [pc, #700]	; (85448 <mw_gl_rectangle+0x368>)
	int16_t root_height = MW_ROOT_HEIGHT;
   8518c:	9004      	str	r0, [sp, #16]
	MW_ASSERT(draw_info, "Null pointer argument");
   8518e:	2285      	movs	r2, #133	; 0x85
   85190:	49ae      	ldr	r1, [pc, #696]	; (8544c <mw_gl_rectangle+0x36c>)
   85192:	2001      	movs	r0, #1
   85194:	47a8      	blx	r5
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   85196:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
   8519a:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
   8519e:	4413      	add	r3, r2
   851a0:	4598      	cmp	r8, r3
   851a2:	da2f      	bge.n	85204 <mw_gl_rectangle+0x124>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   851a4:	f9b9 1006 	ldrsh.w	r1, [r9, #6]
   851a8:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
   851ac:	440b      	add	r3, r1
   851ae:	429e      	cmp	r6, r3
   851b0:	da28      	bge.n	85204 <mw_gl_rectangle+0x124>
	if (client_x < draw_info->clip_rect.x)
   851b2:	4542      	cmp	r2, r8
   851b4:	dc26      	bgt.n	85204 <mw_gl_rectangle+0x124>
	if (client_y < draw_info->clip_rect.y)
   851b6:	428c      	cmp	r4, r1
   851b8:	db24      	blt.n	85204 <mw_gl_rectangle+0x124>
	display_x = client_x + draw_info->origin_x;
   851ba:	f8b9 0000 	ldrh.w	r0, [r9]
   851be:	9b06      	ldr	r3, [sp, #24]
	display_y = client_y + draw_info->origin_y;
   851c0:	b2a5      	uxth	r5, r4
	display_x = client_x + draw_info->origin_x;
   851c2:	4418      	add	r0, r3
   851c4:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   851c6:	2800      	cmp	r0, #0
   851c8:	dbcd      	blt.n	85166 <mw_gl_rectangle+0x86>
   851ca:	4287      	cmp	r7, r0
   851cc:	ddcb      	ble.n	85166 <mw_gl_rectangle+0x86>
	display_y = client_y + draw_info->origin_y;
   851ce:	f8b9 1002 	ldrh.w	r1, [r9, #2]
   851d2:	4429      	add	r1, r5
   851d4:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   851d6:	2900      	cmp	r1, #0
   851d8:	dbc5      	blt.n	85166 <mw_gl_rectangle+0x86>
   851da:	9b04      	ldr	r3, [sp, #16]
   851dc:	428b      	cmp	r3, r1
   851de:	ddc2      	ble.n	85166 <mw_gl_rectangle+0x86>
					for (y = y_start; y < y_start + height; y++)
   851e0:	1c6c      	adds	r4, r5, #1
   851e2:	b224      	sxth	r4, r4
		mw_hal_lcd_pixel(display_x, display_y, colour);
   851e4:	9a05      	ldr	r2, [sp, #20]
   851e6:	4b9a      	ldr	r3, [pc, #616]	; (85450 <mw_gl_rectangle+0x370>)
   851e8:	4798      	blx	r3
					for (y = y_start; y < y_start + height; y++)
   851ea:	4554      	cmp	r4, sl
   851ec:	4626      	mov	r6, r4
   851ee:	dbbf      	blt.n	85170 <mw_gl_rectangle+0x90>
   851f0:	9b06      	ldr	r3, [sp, #24]
   851f2:	3301      	adds	r3, #1
   851f4:	fa0f f883 	sxth.w	r8, r3
				for (x = x_start; x < x_start + width; x++)
   851f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   851fa:	4598      	cmp	r8, r3
   851fc:	db97      	blt.n	8512e <mw_gl_rectangle+0x4e>
}
   851fe:	b00b      	add	sp, #44	; 0x2c
   85200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85204:	b2a5      	uxth	r5, r4
   85206:	e7ae      	b.n	85166 <mw_gl_rectangle+0x86>
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   85208:	f8db 3000 	ldr.w	r3, [fp]
   8520c:	9307      	str	r3, [sp, #28]
	int16_t root_width = MW_ROOT_WIDTH;
   8520e:	4b8c      	ldr	r3, [pc, #560]	; (85440 <mw_gl_rectangle+0x360>)
   85210:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   85212:	4b8c      	ldr	r3, [pc, #560]	; (85444 <mw_gl_rectangle+0x364>)
	int16_t root_width = MW_ROOT_WIDTH;
   85214:	9004      	str	r0, [sp, #16]
	int16_t root_height = MW_ROOT_HEIGHT;
   85216:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   85218:	2285      	movs	r2, #133	; 0x85
	int16_t root_height = MW_ROOT_HEIGHT;
   8521a:	9005      	str	r0, [sp, #20]
	MW_ASSERT(draw_info, "Null pointer argument");
   8521c:	2001      	movs	r0, #1
   8521e:	4b8a      	ldr	r3, [pc, #552]	; (85448 <mw_gl_rectangle+0x368>)
   85220:	498a      	ldr	r1, [pc, #552]	; (8544c <mw_gl_rectangle+0x36c>)
   85222:	4f86      	ldr	r7, [pc, #536]	; (8543c <mw_gl_rectangle+0x35c>)
   85224:	47b8      	blx	r7
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   85226:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
   8522a:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
   8522e:	4413      	add	r3, r2
   85230:	4598      	cmp	r8, r3
   85232:	da98      	bge.n	85166 <mw_gl_rectangle+0x86>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   85234:	f9b9 1006 	ldrsh.w	r1, [r9, #6]
   85238:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
   8523c:	440b      	add	r3, r1
   8523e:	429e      	cmp	r6, r3
   85240:	da91      	bge.n	85166 <mw_gl_rectangle+0x86>
	if (client_x < draw_info->clip_rect.x)
   85242:	4542      	cmp	r2, r8
   85244:	dc8f      	bgt.n	85166 <mw_gl_rectangle+0x86>
	if (client_y < draw_info->clip_rect.y)
   85246:	428c      	cmp	r4, r1
   85248:	db8d      	blt.n	85166 <mw_gl_rectangle+0x86>
	display_x = client_x + draw_info->origin_x;
   8524a:	f8b9 0000 	ldrh.w	r0, [r9]
   8524e:	9b06      	ldr	r3, [sp, #24]
   85250:	4418      	add	r0, r3
   85252:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   85254:	2800      	cmp	r0, #0
   85256:	db86      	blt.n	85166 <mw_gl_rectangle+0x86>
   85258:	9b04      	ldr	r3, [sp, #16]
   8525a:	4283      	cmp	r3, r0
   8525c:	dd83      	ble.n	85166 <mw_gl_rectangle+0x86>
	display_y = client_y + draw_info->origin_y;
   8525e:	f8b9 1002 	ldrh.w	r1, [r9, #2]
   85262:	4429      	add	r1, r5
   85264:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   85266:	2900      	cmp	r1, #0
   85268:	f6ff af7d 	blt.w	85166 <mw_gl_rectangle+0x86>
   8526c:	9b05      	ldr	r3, [sp, #20]
   8526e:	428b      	cmp	r3, r1
   85270:	f77f af79 	ble.w	85166 <mw_gl_rectangle+0x86>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   85274:	9a07      	ldr	r2, [sp, #28]
   85276:	4b76      	ldr	r3, [pc, #472]	; (85450 <mw_gl_rectangle+0x370>)
   85278:	4798      	blx	r3
   8527a:	e774      	b.n	85166 <mw_gl_rectangle+0x86>
		pixel(draw_info, client_x, client_y, gc.bg_colour);
   8527c:	f8db 3004 	ldr.w	r3, [fp, #4]
   85280:	9307      	str	r3, [sp, #28]
	int16_t root_width = MW_ROOT_WIDTH;
   85282:	4b6f      	ldr	r3, [pc, #444]	; (85440 <mw_gl_rectangle+0x360>)
   85284:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   85286:	4b6f      	ldr	r3, [pc, #444]	; (85444 <mw_gl_rectangle+0x364>)
	int16_t root_width = MW_ROOT_WIDTH;
   85288:	9004      	str	r0, [sp, #16]
	int16_t root_height = MW_ROOT_HEIGHT;
   8528a:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   8528c:	4b6e      	ldr	r3, [pc, #440]	; (85448 <mw_gl_rectangle+0x368>)
	int16_t root_height = MW_ROOT_HEIGHT;
   8528e:	9005      	str	r0, [sp, #20]
	MW_ASSERT(draw_info, "Null pointer argument");
   85290:	2285      	movs	r2, #133	; 0x85
   85292:	4638      	mov	r0, r7
   85294:	496d      	ldr	r1, [pc, #436]	; (8544c <mw_gl_rectangle+0x36c>)
   85296:	e7c4      	b.n	85222 <mw_gl_rectangle+0x142>
   85298:	4617      	mov	r7, r2
		mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start);
   8529a:	1e5d      	subs	r5, r3, #1
   8529c:	440d      	add	r5, r1
		mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start + height - 1);
   8529e:	3c01      	subs	r4, #1
		mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start);
   852a0:	b22d      	sxth	r5, r5
		mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start + height - 1);
   852a2:	443c      	add	r4, r7
   852a4:	b224      	sxth	r4, r4
		mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start);
   852a6:	462a      	mov	r2, r5
   852a8:	463b      	mov	r3, r7
   852aa:	4e6a      	ldr	r6, [pc, #424]	; (85454 <mw_gl_rectangle+0x374>)
   852ac:	47b0      	blx	r6
		mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start + height - 1);
   852ae:	4623      	mov	r3, r4
   852b0:	462a      	mov	r2, r5
   852b2:	4651      	mov	r1, sl
   852b4:	4640      	mov	r0, r8
   852b6:	47b0      	blx	r6
		mw_gl_vline(draw_info, x_start, y_start, y_start + height - 1);
   852b8:	4e67      	ldr	r6, [pc, #412]	; (85458 <mw_gl_rectangle+0x378>)
   852ba:	4623      	mov	r3, r4
   852bc:	463a      	mov	r2, r7
   852be:	4651      	mov	r1, sl
   852c0:	4640      	mov	r0, r8
   852c2:	47b0      	blx	r6
		mw_gl_vline(draw_info, x_start + width - 1, y_start, y_start + height - 1);
   852c4:	4623      	mov	r3, r4
   852c6:	463a      	mov	r2, r7
   852c8:	4629      	mov	r1, r5
   852ca:	4640      	mov	r0, r8
   852cc:	46b4      	mov	ip, r6
}
   852ce:	b00b      	add	sp, #44	; 0x2c
   852d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mw_gl_vline(draw_info, x_start + width - 1, y_start, y_start + height - 1);
   852d4:	4760      	bx	ip
				filled_rectangle(draw_info, x_start, y_start, width, height, gc.solid_fill_colour);
   852d6:	f8db 5008 	ldr.w	r5, [fp, #8]
   852da:	e88d 0030 	stmia.w	sp, {r4, r5}
   852de:	4c5f      	ldr	r4, [pc, #380]	; (8545c <mw_gl_rectangle+0x37c>)
   852e0:	47a0      	blx	r4
}
   852e2:	b00b      	add	sp, #44	; 0x2c
   852e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start);
   852e8:	b29b      	uxth	r3, r3
   852ea:	fa1f f981 	uxth.w	r9, r1
   852ee:	9305      	str	r3, [sp, #20]
   852f0:	3b01      	subs	r3, #1
   852f2:	444b      	add	r3, r9
   852f4:	b21b      	sxth	r3, r3
   852f6:	461a      	mov	r2, r3
   852f8:	4f56      	ldr	r7, [pc, #344]	; (85454 <mw_gl_rectangle+0x374>)
   852fa:	9303      	str	r3, [sp, #12]
			mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start + height - 1);
   852fc:	b2a6      	uxth	r6, r4
			mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start);
   852fe:	9b08      	ldr	r3, [sp, #32]
			mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start + height - 1);
   85300:	9606      	str	r6, [sp, #24]
			mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start);
   85302:	47b8      	blx	r7
			mw_gl_hline(draw_info, x_start, x_start + width - 1, y_start + height - 1);
   85304:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   85308:	3e01      	subs	r6, #1
   8530a:	4416      	add	r6, r2
   8530c:	b236      	sxth	r6, r6
   8530e:	9204      	str	r2, [sp, #16]
   85310:	4633      	mov	r3, r6
   85312:	9a03      	ldr	r2, [sp, #12]
   85314:	4651      	mov	r1, sl
   85316:	4640      	mov	r0, r8
   85318:	47b8      	blx	r7
			mw_gl_vline(draw_info, x_start, y_start, y_start + height - 1);
   8531a:	4633      	mov	r3, r6
   8531c:	9a08      	ldr	r2, [sp, #32]
   8531e:	4651      	mov	r1, sl
   85320:	4640      	mov	r0, r8
   85322:	4f4d      	ldr	r7, [pc, #308]	; (85458 <mw_gl_rectangle+0x378>)
   85324:	47b8      	blx	r7
			mw_gl_vline(draw_info, x_start + width - 1, y_start, y_start + height - 1);
   85326:	4633      	mov	r3, r6
   85328:	9a08      	ldr	r2, [sp, #32]
   8532a:	9903      	ldr	r1, [sp, #12]
   8532c:	4640      	mov	r0, r8
   8532e:	47b8      	blx	r7
			if (!gc.pattern_set)
   85330:	f89b 3030 	ldrb.w	r3, [fp, #48]	; 0x30
   85334:	2b00      	cmp	r3, #0
   85336:	f000 811b 	beq.w	85570 <mw_gl_rectangle+0x490>
				for (x = x_start + 1; x < x_start + width - 1; x++)
   8533a:	4455      	add	r5, sl
   8533c:	f109 0901 	add.w	r9, r9, #1
   85340:	1e6b      	subs	r3, r5, #1
   85342:	fa0f fa89 	sxth.w	sl, r9
   85346:	4553      	cmp	r3, sl
   85348:	9309      	str	r3, [sp, #36]	; 0x24
   8534a:	f77f af58 	ble.w	851fe <mw_gl_rectangle+0x11e>
   8534e:	9a08      	ldr	r2, [sp, #32]
   85350:	9b04      	ldr	r3, [sp, #16]
   85352:	4422      	add	r2, r4
   85354:	3301      	adds	r3, #1
   85356:	b21b      	sxth	r3, r3
   85358:	3a01      	subs	r2, #1
   8535a:	4293      	cmp	r3, r2
   8535c:	9308      	str	r3, [sp, #32]
   8535e:	f6bf af4e 	bge.w	851fe <mw_gl_rectangle+0x11e>
	MW_ASSERT(draw_info, "Null pointer argument");
   85362:	4691      	mov	r9, r2
		mask = 0x8000U >> ((uint16_t)x & 0x0FU);
   85364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85368:	fa1f f28a 	uxth.w	r2, sl
   8536c:	9206      	str	r2, [sp, #24]
   8536e:	f002 020f 	and.w	r2, r2, #15
   85372:	9c08      	ldr	r4, [sp, #32]
   85374:	40d3      	lsrs	r3, r2
   85376:	b29b      	uxth	r3, r3
   85378:	4626      	mov	r6, r4
   8537a:	9303      	str	r3, [sp, #12]
   8537c:	e013      	b.n	853a6 <mw_gl_rectangle+0x2c6>
		pattern_y = (uint16_t)y & 0x0FU;
   8537e:	b2a5      	uxth	r5, r4
		if ((gc.pattern[pattern_y] & mask) == mask)
   85380:	f005 030f 	and.w	r3, r5, #15
   85384:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
   85388:	89db      	ldrh	r3, [r3, #14]
   8538a:	9a03      	ldr	r2, [sp, #12]
   8538c:	ea32 0303 	bics.w	r3, r2, r3
   85390:	d068      	beq.n	85464 <mw_gl_rectangle+0x384>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   85392:	f89b 7031 	ldrb.w	r7, [fp, #49]	; 0x31
   85396:	2f01      	cmp	r7, #1
   85398:	f000 80a0 	beq.w	854dc <mw_gl_rectangle+0x3fc>
					for (y = y_start + 1; y < y_start + height - 1; y++)
   8539c:	1c6c      	adds	r4, r5, #1
   8539e:	b224      	sxth	r4, r4
   853a0:	454c      	cmp	r4, r9
   853a2:	4626      	mov	r6, r4
   853a4:	da41      	bge.n	8542a <mw_gl_rectangle+0x34a>
	if (gc.pattern_set)
   853a6:	f89b 3030 	ldrb.w	r3, [fp, #48]	; 0x30
   853aa:	2b00      	cmp	r3, #0
   853ac:	d1e7      	bne.n	8537e <mw_gl_rectangle+0x29e>
		pixel(draw_info, x, y, gc.solid_fill_colour);
   853ae:	f8db 3008 	ldr.w	r3, [fp, #8]
	MW_ASSERT(draw_info, "Null pointer argument");
   853b2:	4d22      	ldr	r5, [pc, #136]	; (8543c <mw_gl_rectangle+0x35c>)
		pixel(draw_info, x, y, gc.solid_fill_colour);
   853b4:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   853b6:	4b22      	ldr	r3, [pc, #136]	; (85440 <mw_gl_rectangle+0x360>)
   853b8:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   853ba:	4b22      	ldr	r3, [pc, #136]	; (85444 <mw_gl_rectangle+0x364>)
	int16_t root_width = MW_ROOT_WIDTH;
   853bc:	4607      	mov	r7, r0
	int16_t root_height = MW_ROOT_HEIGHT;
   853be:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   853c0:	4b21      	ldr	r3, [pc, #132]	; (85448 <mw_gl_rectangle+0x368>)
	int16_t root_height = MW_ROOT_HEIGHT;
   853c2:	9004      	str	r0, [sp, #16]
	MW_ASSERT(draw_info, "Null pointer argument");
   853c4:	2285      	movs	r2, #133	; 0x85
   853c6:	4921      	ldr	r1, [pc, #132]	; (8544c <mw_gl_rectangle+0x36c>)
   853c8:	2001      	movs	r0, #1
   853ca:	47a8      	blx	r5
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   853cc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
   853d0:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
   853d4:	4413      	add	r3, r2
   853d6:	4553      	cmp	r3, sl
   853d8:	dd21      	ble.n	8541e <mw_gl_rectangle+0x33e>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   853da:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
   853de:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
   853e2:	440b      	add	r3, r1
   853e4:	429e      	cmp	r6, r3
   853e6:	da1a      	bge.n	8541e <mw_gl_rectangle+0x33e>
	if (client_x < draw_info->clip_rect.x)
   853e8:	4552      	cmp	r2, sl
   853ea:	dc18      	bgt.n	8541e <mw_gl_rectangle+0x33e>
	if (client_y < draw_info->clip_rect.y)
   853ec:	428c      	cmp	r4, r1
   853ee:	db16      	blt.n	8541e <mw_gl_rectangle+0x33e>
	display_x = client_x + draw_info->origin_x;
   853f0:	f8b8 0000 	ldrh.w	r0, [r8]
   853f4:	9b06      	ldr	r3, [sp, #24]
	display_y = client_y + draw_info->origin_y;
   853f6:	b2a5      	uxth	r5, r4
	display_x = client_x + draw_info->origin_x;
   853f8:	4418      	add	r0, r3
   853fa:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   853fc:	2800      	cmp	r0, #0
   853fe:	dbcd      	blt.n	8539c <mw_gl_rectangle+0x2bc>
   85400:	4287      	cmp	r7, r0
   85402:	ddcb      	ble.n	8539c <mw_gl_rectangle+0x2bc>
	display_y = client_y + draw_info->origin_y;
   85404:	f8b8 1002 	ldrh.w	r1, [r8, #2]
   85408:	4429      	add	r1, r5
   8540a:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   8540c:	2900      	cmp	r1, #0
   8540e:	dbc5      	blt.n	8539c <mw_gl_rectangle+0x2bc>
   85410:	9b04      	ldr	r3, [sp, #16]
   85412:	428b      	cmp	r3, r1
   85414:	ddc2      	ble.n	8539c <mw_gl_rectangle+0x2bc>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   85416:	9a05      	ldr	r2, [sp, #20]
   85418:	4b0d      	ldr	r3, [pc, #52]	; (85450 <mw_gl_rectangle+0x370>)
   8541a:	4798      	blx	r3
   8541c:	e7be      	b.n	8539c <mw_gl_rectangle+0x2bc>
   8541e:	b2a5      	uxth	r5, r4
					for (y = y_start + 1; y < y_start + height - 1; y++)
   85420:	1c6c      	adds	r4, r5, #1
   85422:	b224      	sxth	r4, r4
   85424:	454c      	cmp	r4, r9
   85426:	4626      	mov	r6, r4
   85428:	dbbd      	blt.n	853a6 <mw_gl_rectangle+0x2c6>
   8542a:	9b06      	ldr	r3, [sp, #24]
   8542c:	3301      	adds	r3, #1
   8542e:	fa0f fa83 	sxth.w	sl, r3
				for (x = x_start + 1; x < x_start + width - 1; x++)
   85432:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85434:	459a      	cmp	sl, r3
   85436:	db95      	blt.n	85364 <mw_gl_rectangle+0x284>
   85438:	e6e1      	b.n	851fe <mw_gl_rectangle+0x11e>
   8543a:	bf00      	nop
   8543c:	00095add 	.word	0x00095add
   85440:	00086e2d 	.word	0x00086e2d
   85444:	00086e31 	.word	0x00086e31
   85448:	000a6618 	.word	0x000a6618
   8544c:	000ab018 	.word	0x000ab018
   85450:	00086e39 	.word	0x00086e39
   85454:	00084dd1 	.word	0x00084dd1
   85458:	00084f39 	.word	0x00084f39
   8545c:	00084015 	.word	0x00084015
   85460:	200715e0 	.word	0x200715e0
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   85464:	f8db 3000 	ldr.w	r3, [fp]
	MW_ASSERT(draw_info, "Null pointer argument");
   85468:	4f4b      	ldr	r7, [pc, #300]	; (85598 <mw_gl_rectangle+0x4b8>)
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   8546a:	9305      	str	r3, [sp, #20]
	int16_t root_width = MW_ROOT_WIDTH;
   8546c:	4b4b      	ldr	r3, [pc, #300]	; (8559c <mw_gl_rectangle+0x4bc>)
   8546e:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   85470:	4b4b      	ldr	r3, [pc, #300]	; (855a0 <mw_gl_rectangle+0x4c0>)
	int16_t root_width = MW_ROOT_WIDTH;
   85472:	9004      	str	r0, [sp, #16]
	int16_t root_height = MW_ROOT_HEIGHT;
   85474:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   85476:	4b4b      	ldr	r3, [pc, #300]	; (855a4 <mw_gl_rectangle+0x4c4>)
	int16_t root_height = MW_ROOT_HEIGHT;
   85478:	9007      	str	r0, [sp, #28]
	MW_ASSERT(draw_info, "Null pointer argument");
   8547a:	2285      	movs	r2, #133	; 0x85
   8547c:	494a      	ldr	r1, [pc, #296]	; (855a8 <mw_gl_rectangle+0x4c8>)
   8547e:	2001      	movs	r0, #1
   85480:	47b8      	blx	r7
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   85482:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
   85486:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
   8548a:	4413      	add	r3, r2
   8548c:	4553      	cmp	r3, sl
   8548e:	dd85      	ble.n	8539c <mw_gl_rectangle+0x2bc>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   85490:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
   85494:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
   85498:	440b      	add	r3, r1
   8549a:	429e      	cmp	r6, r3
   8549c:	f6bf af7e 	bge.w	8539c <mw_gl_rectangle+0x2bc>
	if (client_x < draw_info->clip_rect.x)
   854a0:	4552      	cmp	r2, sl
   854a2:	f73f af7b 	bgt.w	8539c <mw_gl_rectangle+0x2bc>
	if (client_y < draw_info->clip_rect.y)
   854a6:	42a1      	cmp	r1, r4
   854a8:	f73f af78 	bgt.w	8539c <mw_gl_rectangle+0x2bc>
	display_x = client_x + draw_info->origin_x;
   854ac:	f8b8 0000 	ldrh.w	r0, [r8]
   854b0:	9b06      	ldr	r3, [sp, #24]
   854b2:	4418      	add	r0, r3
   854b4:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   854b6:	2800      	cmp	r0, #0
   854b8:	f6ff af70 	blt.w	8539c <mw_gl_rectangle+0x2bc>
   854bc:	9b04      	ldr	r3, [sp, #16]
   854be:	4283      	cmp	r3, r0
   854c0:	f77f af6c 	ble.w	8539c <mw_gl_rectangle+0x2bc>
	display_y = client_y + draw_info->origin_y;
   854c4:	f8b8 1002 	ldrh.w	r1, [r8, #2]
   854c8:	4429      	add	r1, r5
   854ca:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   854cc:	2900      	cmp	r1, #0
   854ce:	f6ff af65 	blt.w	8539c <mw_gl_rectangle+0x2bc>
   854d2:	9b07      	ldr	r3, [sp, #28]
   854d4:	428b      	cmp	r3, r1
   854d6:	f77f af61 	ble.w	8539c <mw_gl_rectangle+0x2bc>
   854da:	e79c      	b.n	85416 <mw_gl_rectangle+0x336>
		pixel(draw_info, client_x, client_y, gc.bg_colour);
   854dc:	f8db 3004 	ldr.w	r3, [fp, #4]
   854e0:	9304      	str	r3, [sp, #16]
	int16_t root_width = MW_ROOT_WIDTH;
   854e2:	4b2e      	ldr	r3, [pc, #184]	; (8559c <mw_gl_rectangle+0x4bc>)
   854e4:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   854e6:	4b2e      	ldr	r3, [pc, #184]	; (855a0 <mw_gl_rectangle+0x4c0>)
	int16_t root_width = MW_ROOT_WIDTH;
   854e8:	9007      	str	r0, [sp, #28]
	int16_t root_height = MW_ROOT_HEIGHT;
   854ea:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   854ec:	4b2d      	ldr	r3, [pc, #180]	; (855a4 <mw_gl_rectangle+0x4c4>)
	int16_t root_height = MW_ROOT_HEIGHT;
   854ee:	9005      	str	r0, [sp, #20]
	MW_ASSERT(draw_info, "Null pointer argument");
   854f0:	2285      	movs	r2, #133	; 0x85
   854f2:	4638      	mov	r0, r7
   854f4:	492c      	ldr	r1, [pc, #176]	; (855a8 <mw_gl_rectangle+0x4c8>)
   854f6:	4f28      	ldr	r7, [pc, #160]	; (85598 <mw_gl_rectangle+0x4b8>)
   854f8:	47b8      	blx	r7
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   854fa:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
   854fe:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
   85502:	4413      	add	r3, r2
   85504:	4553      	cmp	r3, sl
   85506:	f77f af49 	ble.w	8539c <mw_gl_rectangle+0x2bc>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   8550a:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
   8550e:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
   85512:	440b      	add	r3, r1
   85514:	429e      	cmp	r6, r3
   85516:	f6bf af41 	bge.w	8539c <mw_gl_rectangle+0x2bc>
	if (client_x < draw_info->clip_rect.x)
   8551a:	4552      	cmp	r2, sl
   8551c:	f73f af3e 	bgt.w	8539c <mw_gl_rectangle+0x2bc>
	if (client_y < draw_info->clip_rect.y)
   85520:	428c      	cmp	r4, r1
   85522:	f6ff af3b 	blt.w	8539c <mw_gl_rectangle+0x2bc>
	display_x = client_x + draw_info->origin_x;
   85526:	f8b8 0000 	ldrh.w	r0, [r8]
   8552a:	9b06      	ldr	r3, [sp, #24]
   8552c:	4418      	add	r0, r3
   8552e:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   85530:	2800      	cmp	r0, #0
   85532:	f6ff af33 	blt.w	8539c <mw_gl_rectangle+0x2bc>
   85536:	9b07      	ldr	r3, [sp, #28]
   85538:	4283      	cmp	r3, r0
   8553a:	f77f af2f 	ble.w	8539c <mw_gl_rectangle+0x2bc>
	display_y = client_y + draw_info->origin_y;
   8553e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
   85542:	4429      	add	r1, r5
   85544:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   85546:	2900      	cmp	r1, #0
   85548:	f6ff af28 	blt.w	8539c <mw_gl_rectangle+0x2bc>
   8554c:	9b05      	ldr	r3, [sp, #20]
   8554e:	428b      	cmp	r3, r1
   85550:	f77f af24 	ble.w	8539c <mw_gl_rectangle+0x2bc>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   85554:	9a04      	ldr	r2, [sp, #16]
   85556:	4b15      	ldr	r3, [pc, #84]	; (855ac <mw_gl_rectangle+0x4cc>)
   85558:	4798      	blx	r3
   8555a:	e71f      	b.n	8539c <mw_gl_rectangle+0x2bc>
		MW_ASSERT((bool)false, "Null pointer argument");
   8555c:	4c0e      	ldr	r4, [pc, #56]	; (85598 <mw_gl_rectangle+0x4b8>)
   8555e:	f240 72ca 	movw	r2, #1994	; 0x7ca
   85562:	46a4      	mov	ip, r4
   85564:	4b0f      	ldr	r3, [pc, #60]	; (855a4 <mw_gl_rectangle+0x4c4>)
   85566:	4912      	ldr	r1, [pc, #72]	; (855b0 <mw_gl_rectangle+0x4d0>)
}
   85568:	b00b      	add	sp, #44	; 0x2c
   8556a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MW_ASSERT((bool)false, "Null pointer argument");
   8556e:	4760      	bx	ip
				filled_rectangle(draw_info, x_start + 1, y_start + 1, width - 2, height - 2, gc.solid_fill_colour);
   85570:	9b06      	ldr	r3, [sp, #24]
   85572:	9a04      	ldr	r2, [sp, #16]
   85574:	1e98      	subs	r0, r3, #2
   85576:	9b05      	ldr	r3, [sp, #20]
   85578:	f8db 4008 	ldr.w	r4, [fp, #8]
   8557c:	b200      	sxth	r0, r0
   8557e:	f109 0101 	add.w	r1, r9, #1
   85582:	3b02      	subs	r3, #2
   85584:	3201      	adds	r2, #1
   85586:	e88d 0011 	stmia.w	sp, {r0, r4}
   8558a:	b21b      	sxth	r3, r3
   8558c:	b212      	sxth	r2, r2
   8558e:	b209      	sxth	r1, r1
   85590:	4640      	mov	r0, r8
   85592:	4c08      	ldr	r4, [pc, #32]	; (855b4 <mw_gl_rectangle+0x4d4>)
   85594:	47a0      	blx	r4
   85596:	e632      	b.n	851fe <mw_gl_rectangle+0x11e>
   85598:	00095add 	.word	0x00095add
   8559c:	00086e2d 	.word	0x00086e2d
   855a0:	00086e31 	.word	0x00086e31
   855a4:	000a6618 	.word	0x000a6618
   855a8:	000ab018 	.word	0x000ab018
   855ac:	00086e39 	.word	0x00086e39
   855b0:	000ab0a8 	.word	0x000ab0a8
   855b4:	00084015 	.word	0x00084015

000855b8 <mw_gl_character>:
{
   855b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   855bc:	b08b      	sub	sp, #44	; 0x2c
   855be:	9202      	str	r2, [sp, #8]
	if (draw_info == NULL)
   855c0:	2800      	cmp	r0, #0
   855c2:	d047      	beq.n	85654 <mw_gl_character+0x9c>
	if (c < ' ')
   855c4:	2b1f      	cmp	r3, #31
   855c6:	461c      	mov	r4, r3
   855c8:	d919      	bls.n	855fe <mw_gl_character+0x46>
		c = '*';
   855ca:	2b7f      	cmp	r3, #127	; 0x7f
	if (gc.font == MW_GL_TITLE_FONT)
   855cc:	4b8e      	ldr	r3, [pc, #568]	; (85808 <mw_gl_character+0x250>)
		c = '*';
   855ce:	bf28      	it	cs
   855d0:	242a      	movcs	r4, #42	; 0x2a
	if (gc.font == MW_GL_TITLE_FONT)
   855d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   855d6:	2b05      	cmp	r3, #5
   855d8:	d043      	beq.n	85662 <mw_gl_character+0xaa>
	switch(gc.text_rotation)
   855da:	4a8b      	ldr	r2, [pc, #556]	; (85808 <mw_gl_character+0x250>)
   855dc:	4689      	mov	r9, r1
   855de:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
   855e2:	4680      	mov	r8, r0
   855e4:	2a03      	cmp	r2, #3
   855e6:	d803      	bhi.n	855f0 <mw_gl_character+0x38>
   855e8:	e8df f002 	tbb	[pc, r2]
   855ec:	0c16202a 	.word	0x0c16202a
		MW_ASSERT((bool)false, "Unknown text rotation");
   855f0:	4b86      	ldr	r3, [pc, #536]	; (8580c <mw_gl_character+0x254>)
   855f2:	f640 023a 	movw	r2, #2106	; 0x83a
   855f6:	4986      	ldr	r1, [pc, #536]	; (85810 <mw_gl_character+0x258>)
   855f8:	2000      	movs	r0, #0
   855fa:	4c86      	ldr	r4, [pc, #536]	; (85814 <mw_gl_character+0x25c>)
   855fc:	47a0      	blx	r4
}
   855fe:	b00b      	add	sp, #44	; 0x2c
   85600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (gc.font)
   85604:	2b04      	cmp	r3, #4
   85606:	f200 83b6 	bhi.w	85d76 <mw_gl_character+0x7be>
   8560a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8560e:	0361      	.short	0x0361
   85610:	0359035d 	.word	0x0359035d
   85614:	02970355 	.word	0x02970355
   85618:	2b04      	cmp	r3, #4
   8561a:	f200 83a0 	bhi.w	85d5e <mw_gl_character+0x7a6>
   8561e:	e8df f013 	tbh	[pc, r3, lsl #1]
   85622:	027d      	.short	0x027d
   85624:	02750279 	.word	0x02750279
   85628:	01c50271 	.word	0x01c50271
   8562c:	2b04      	cmp	r3, #4
   8562e:	f200 83b5 	bhi.w	85d9c <mw_gl_character+0x7e4>
   85632:	e8df f013 	tbh	[pc, r3, lsl #1]
   85636:	01b7      	.short	0x01b7
   85638:	01af01b3 	.word	0x01af01b3
   8563c:	00ff01ab 	.word	0x00ff01ab
   85640:	2b04      	cmp	r3, #4
   85642:	f200 83a3 	bhi.w	85d8c <mw_gl_character+0x7d4>
   85646:	e8df f013 	tbh	[pc, r3, lsl #1]
   8564a:	00db      	.short	0x00db
   8564c:	00d300d7 	.word	0x00d300d7
   85650:	001500cf 	.word	0x001500cf
		MW_ASSERT((bool)false, "Null pointer argument");
   85654:	4b70      	ldr	r3, [pc, #448]	; (85818 <mw_gl_character+0x260>)
   85656:	f640 020e 	movw	r2, #2062	; 0x80e
   8565a:	496d      	ldr	r1, [pc, #436]	; (85810 <mw_gl_character+0x258>)
   8565c:	4c6d      	ldr	r4, [pc, #436]	; (85814 <mw_gl_character+0x25c>)
   8565e:	47a0      	blx	r4
		return;
   85660:	e7cd      	b.n	855fe <mw_gl_character+0x46>
		character_buffer[1] = '\0';
   85662:	2600      	movs	r6, #0
		title_font_string(draw_info, x, y, character_buffer);
   85664:	ab09      	add	r3, sp, #36	; 0x24
   85666:	4d6d      	ldr	r5, [pc, #436]	; (8581c <mw_gl_character+0x264>)
		character_buffer[0] = c;
   85668:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
		character_buffer[1] = '\0';
   8566c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
		title_font_string(draw_info, x, y, character_buffer);
   85670:	47a8      	blx	r5
		return;
   85672:	e7c4      	b.n	855fe <mw_gl_character+0x46>
		return ((int16_t)Font24.Width);
   85674:	4a6a      	ldr	r2, [pc, #424]	; (85820 <mw_gl_character+0x268>)
   85676:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
		return ((int16_t)Font24.Height);
   8567a:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
	if (x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   8567e:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
   85682:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
   85686:	440a      	add	r2, r1
   85688:	4591      	cmp	r9, r2
   8568a:	dab8      	bge.n	855fe <mw_gl_character+0x46>
			y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   8568c:	f9b8 0006 	ldrsh.w	r0, [r8, #6]
   85690:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
	if (x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   85694:	9e02      	ldr	r6, [sp, #8]
			y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   85696:	4402      	add	r2, r0
	if (x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   85698:	4296      	cmp	r6, r2
   8569a:	dab0      	bge.n	855fe <mw_gl_character+0x46>
			x + font_width + 1 <= draw_info->clip_rect.x ||
   8569c:	eb07 0209 	add.w	r2, r7, r9
			y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   856a0:	4291      	cmp	r1, r2
   856a2:	dcac      	bgt.n	855fe <mw_gl_character+0x46>
			y + font_height + 1 <= draw_info->clip_rect.y)
   856a4:	19aa      	adds	r2, r5, r6
			x + font_width + 1 <= draw_info->clip_rect.x ||
   856a6:	4290      	cmp	r0, r2
   856a8:	dca9      	bgt.n	855fe <mw_gl_character+0x46>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   856aa:	4a57      	ldr	r2, [pc, #348]	; (85808 <mw_gl_character+0x250>)
				font_height + 1,
   856ac:	b2ad      	uxth	r5, r5
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   856ae:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
   856b2:	2a01      	cmp	r2, #1
   856b4:	f000 83cb 	beq.w	85e4e <mw_gl_character+0x896>
	character_byte_width = font_width / 8 + (int16_t)(font_width % 8 > 0 ? 1 : 0);
   856b8:	4279      	negs	r1, r7
   856ba:	f001 0107 	and.w	r1, r1, #7
   856be:	f007 0207 	and.w	r2, r7, #7
   856c2:	bf58      	it	pl
   856c4:	424a      	negpl	r2, r1
   856c6:	2a00      	cmp	r2, #0
   856c8:	4639      	mov	r1, r7
   856ca:	bfd4      	ite	le
   856cc:	2200      	movle	r2, #0
   856ce:	2201      	movgt	r2, #1
   856d0:	2f00      	cmp	r7, #0
   856d2:	bfb8      	it	lt
   856d4:	1df9      	addlt	r1, r7, #7
   856d6:	eb02 02e1 	add.w	r2, r2, r1, asr #3
   856da:	b292      	uxth	r2, r2
	byte_pos = ((int16_t)c - (int16_t)' ') * font_height * character_byte_width;
   856dc:	3c20      	subs	r4, #32
   856de:	fb04 f402 	mul.w	r4, r4, r2
	character_byte_width = font_width / 8 + (int16_t)(font_width % 8 > 0 ? 1 : 0);
   856e2:	9206      	str	r2, [sp, #24]
   856e4:	b212      	sxth	r2, r2
   856e6:	9205      	str	r2, [sp, #20]
		for (i = 0; i < 4 - character_byte_width; i++)
   856e8:	f1c2 0a04 	rsb	sl, r2, #4
   856ec:	2200      	movs	r2, #0
   856ee:	4611      	mov	r1, r2
   856f0:	f8cd 9010 	str.w	r9, [sp, #16]
   856f4:	461a      	mov	r2, r3
   856f6:	4689      	mov	r9, r1
	byte_pos = ((int16_t)c - (int16_t)' ') * font_height * character_byte_width;
   856f8:	fb04 f405 	mul.w	r4, r4, r5
   856fc:	f8cd 800c 	str.w	r8, [sp, #12]
   85700:	b224      	sxth	r4, r4
   85702:	fa0f f089 	sxth.w	r0, r9
	switch (gc.font)
   85706:	2a05      	cmp	r2, #5
   85708:	f200 8327 	bhi.w	85d5a <mw_gl_character+0x7a2>
   8570c:	e8df f002 	tbb	[pc, r2]
   85710:	5c606468 	.word	0x5c606468
   85714:	0358      	.short	0x0358
		return (MW_GL_TITLE_FONT_HEIGHT);
   85716:	2110      	movs	r1, #16
	for (char_y = 0; char_y < mw_gl_get_font_height(); char_y++)
   85718:	4288      	cmp	r0, r1
   8571a:	f6bf af70 	bge.w	855fe <mw_gl_character+0x46>
		for (byte = 0; byte < character_byte_width; byte++)
   8571e:	9b05      	ldr	r3, [sp, #20]
		return (Font9.table);
   85720:	2500      	movs	r5, #0
		for (byte = 0; byte < character_byte_width; byte++)
   85722:	2b00      	cmp	r3, #0
   85724:	dd20      	ble.n	85768 <mw_gl_character+0x1b0>
		return (Font20.table);
   85726:	4b3f      	ldr	r3, [pc, #252]	; (85824 <mw_gl_character+0x26c>)
		return (Font12.table);
   85728:	483f      	ldr	r0, [pc, #252]	; (85828 <mw_gl_character+0x270>)
		return (Font20.table);
   8572a:	f8d3 b000 	ldr.w	fp, [r3]
   8572e:	9b06      	ldr	r3, [sp, #24]
		return (Font16.table);
   85730:	4e3e      	ldr	r6, [pc, #248]	; (8582c <mw_gl_character+0x274>)
		return (Font9.table);
   85732:	493f      	ldr	r1, [pc, #252]	; (85830 <mw_gl_character+0x278>)
		return (Font12.table);
   85734:	f8d0 c000 	ldr.w	ip, [r0]
   85738:	1918      	adds	r0, r3, r4
		return (Font24.table);
   8573a:	4b39      	ldr	r3, [pc, #228]	; (85820 <mw_gl_character+0x268>)
		return (Font16.table);
   8573c:	f8d6 8000 	ldr.w	r8, [r6]
		return (Font24.table);
   85740:	681b      	ldr	r3, [r3, #0]
		return (Font9.table);
   85742:	680e      	ldr	r6, [r1, #0]
   85744:	b200      	sxth	r0, r0
			word <<= 8U;
   85746:	022d      	lsls	r5, r5, #8
	switch (gc.font)
   85748:	2a04      	cmp	r2, #4
   8574a:	f200 82c7 	bhi.w	85cdc <mw_gl_character+0x724>
   8574e:	e8df f002 	tbb	[pc, r2]
   85752:	3303      	.short	0x3303
   85754:	3531      	.short	0x3531
   85756:	2f          	.byte	0x2f
   85757:	00          	.byte	0x00
		return (Font9.table);
   85758:	4631      	mov	r1, r6
			word |= (uint32_t)get_font_data()[byte_pos];
   8575a:	5d09      	ldrb	r1, [r1, r4]
   8575c:	3401      	adds	r4, #1
   8575e:	b224      	sxth	r4, r4
		for (byte = 0; byte < character_byte_width; byte++)
   85760:	4284      	cmp	r4, r0
			word |= (uint32_t)get_font_data()[byte_pos];
   85762:	ea45 0501 	orr.w	r5, r5, r1
		for (byte = 0; byte < character_byte_width; byte++)
   85766:	d1ee      	bne.n	85746 <mw_gl_character+0x18e>
		for (i = 0; i < 4 - character_byte_width; i++)
   85768:	f1ba 0f00 	cmp.w	sl, #0
   8576c:	dd06      	ble.n	8577c <mw_gl_character+0x1c4>
   8576e:	2100      	movs	r1, #0
   85770:	3101      	adds	r1, #1
   85772:	b209      	sxth	r1, r1
   85774:	4551      	cmp	r1, sl
			word <<= 8;
   85776:	ea4f 2505 	mov.w	r5, r5, lsl #8
		for (i = 0; i < 4 - character_byte_width; i++)
   8577a:	dbf9      	blt.n	85770 <mw_gl_character+0x1b8>
		for (char_x = 0; char_x < font_width; char_x++)
   8577c:	2f00      	cmp	r7, #0
   8577e:	dd14      	ble.n	857aa <mw_gl_character+0x1f2>
   85780:	2600      	movs	r6, #0
   85782:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
				mw_gl_fg_pixel(draw_info, x + char_x, y + char_y);
   85786:	9b02      	ldr	r3, [sp, #8]
   85788:	eb09 0b03 	add.w	fp, r9, r3
   8578c:	fa0f fb8b 	sxth.w	fp, fp
			if ((word & mask) == mask)
   85790:	ea38 0305 	bics.w	r3, r8, r5
   85794:	f000 82b2 	beq.w	85cfc <mw_gl_character+0x744>
   85798:	3601      	adds	r6, #1
		for (char_x = 0; char_x < font_width; char_x++)
   8579a:	b233      	sxth	r3, r6
   8579c:	429f      	cmp	r7, r3
			mask >>= 1U;
   8579e:	ea4f 0858 	mov.w	r8, r8, lsr #1
		for (char_x = 0; char_x < font_width; char_x++)
   857a2:	dcf5      	bgt.n	85790 <mw_gl_character+0x1d8>
   857a4:	4b18      	ldr	r3, [pc, #96]	; (85808 <mw_gl_character+0x250>)
   857a6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
   857aa:	f109 0901 	add.w	r9, r9, #1
   857ae:	e7a8      	b.n	85702 <mw_gl_character+0x14a>
		return (Font24.table);
   857b0:	4619      	mov	r1, r3
   857b2:	e7d2      	b.n	8575a <mw_gl_character+0x1a2>
		return (Font16.table);
   857b4:	4641      	mov	r1, r8
   857b6:	e7d0      	b.n	8575a <mw_gl_character+0x1a2>
		return (Font12.table);
   857b8:	4661      	mov	r1, ip
   857ba:	e7ce      	b.n	8575a <mw_gl_character+0x1a2>
		return (Font20.table);
   857bc:	4659      	mov	r1, fp
   857be:	e7cc      	b.n	8575a <mw_gl_character+0x1a2>
		return ((int16_t)Font24.Height);
   857c0:	4b17      	ldr	r3, [pc, #92]	; (85820 <mw_gl_character+0x268>)
   857c2:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
   857c6:	e7a7      	b.n	85718 <mw_gl_character+0x160>
		return ((int16_t)Font20.Height);
   857c8:	4916      	ldr	r1, [pc, #88]	; (85824 <mw_gl_character+0x26c>)
   857ca:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   857ce:	e7a3      	b.n	85718 <mw_gl_character+0x160>
		return ((int16_t)Font16.Height);
   857d0:	4916      	ldr	r1, [pc, #88]	; (8582c <mw_gl_character+0x274>)
   857d2:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   857d6:	e79f      	b.n	85718 <mw_gl_character+0x160>
		return ((int16_t)Font12.Height);
   857d8:	4913      	ldr	r1, [pc, #76]	; (85828 <mw_gl_character+0x270>)
   857da:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   857de:	e79b      	b.n	85718 <mw_gl_character+0x160>
		return ((int16_t)Font9.Height);
   857e0:	4913      	ldr	r1, [pc, #76]	; (85830 <mw_gl_character+0x278>)
   857e2:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   857e6:	e797      	b.n	85718 <mw_gl_character+0x160>
		return ((int16_t)Font20.Width);
   857e8:	4a0e      	ldr	r2, [pc, #56]	; (85824 <mw_gl_character+0x26c>)
   857ea:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
   857ee:	e744      	b.n	8567a <mw_gl_character+0xc2>
		return ((int16_t)Font16.Width);
   857f0:	4a0e      	ldr	r2, [pc, #56]	; (8582c <mw_gl_character+0x274>)
   857f2:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
   857f6:	e740      	b.n	8567a <mw_gl_character+0xc2>
		return ((int16_t)Font12.Width);
   857f8:	4a0b      	ldr	r2, [pc, #44]	; (85828 <mw_gl_character+0x270>)
   857fa:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
   857fe:	e73c      	b.n	8567a <mw_gl_character+0xc2>
		return ((int16_t)Font9.Width);
   85800:	4a0b      	ldr	r2, [pc, #44]	; (85830 <mw_gl_character+0x278>)
   85802:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
   85806:	e738      	b.n	8567a <mw_gl_character+0xc2>
   85808:	200715e0 	.word	0x200715e0
   8580c:	000ab198 	.word	0x000ab198
   85810:	000ab0b8 	.word	0x000ab0b8
   85814:	00095add 	.word	0x00095add
   85818:	000a6618 	.word	0x000a6618
   8581c:	00084161 	.word	0x00084161
   85820:	000a8bc8 	.word	0x000a8bc8
   85824:	000a7ce8 	.word	0x000a7ce8
   85828:	000a6c84 	.word	0x000a6c84
   8582c:	000a7100 	.word	0x000a7100
   85830:	000aa688 	.word	0x000aa688
		return ((int16_t)Font24.Width);
   85834:	4abb      	ldr	r2, [pc, #748]	; (85b24 <mw_gl_character+0x56c>)
   85836:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
		return ((int16_t)Font24.Height);
   8583a:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   8583e:	461a      	mov	r2, r3
   85840:	9303      	str	r3, [sp, #12]
	if (x - font_height >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   85842:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
   85846:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
   8584a:	eba9 0202 	sub.w	r2, r9, r2
   8584e:	440b      	add	r3, r1
   85850:	429a      	cmp	r2, r3
   85852:	f6bf aed4 	bge.w	855fe <mw_gl_character+0x46>
			y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   85856:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   8585a:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
	if (x - font_height >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   8585e:	9d02      	ldr	r5, [sp, #8]
			y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   85860:	4413      	add	r3, r2
	if (x - font_height >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   85862:	429d      	cmp	r5, r3
   85864:	f6bf aecb 	bge.w	855fe <mw_gl_character+0x46>
			y >= draw_info->clip_rect.y + draw_info->clip_rect.height ||
   85868:	4589      	cmp	r9, r1
   8586a:	f77f aec8 	ble.w	855fe <mw_gl_character+0x46>
			y + font_width <= draw_info->clip_rect.y)
   8586e:	eb0a 0305 	add.w	r3, sl, r5
			x <= draw_info->clip_rect.x ||
   85872:	429a      	cmp	r2, r3
   85874:	f6bf aec3 	bge.w	855fe <mw_gl_character+0x46>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   85878:	4bab      	ldr	r3, [pc, #684]	; (85b28 <mw_gl_character+0x570>)
				x - font_height,
   8587a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   8587e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   85882:	2b01      	cmp	r3, #1
   85884:	f000 8296 	beq.w	85db4 <mw_gl_character+0x7fc>
	character_byte_width = font_width / 8 + (int16_t)(font_width % 8 > 0 ? 1 : 0);
   85888:	f1da 0200 	rsbs	r2, sl, #0
   8588c:	f002 0207 	and.w	r2, r2, #7
   85890:	f00a 0307 	and.w	r3, sl, #7
   85894:	bf58      	it	pl
   85896:	4253      	negpl	r3, r2
   85898:	2b00      	cmp	r3, #0
   8589a:	4652      	mov	r2, sl
   8589c:	bfd4      	ite	le
   8589e:	2300      	movle	r3, #0
   858a0:	2301      	movgt	r3, #1
   858a2:	f1ba 0f00 	cmp.w	sl, #0
   858a6:	bfb8      	it	lt
   858a8:	f10a 0207 	addlt.w	r2, sl, #7
   858ac:	eb03 03e2 	add.w	r3, r3, r2, asr #3
   858b0:	b29b      	uxth	r3, r3
	byte_pos = ((int16_t)c - (int16_t)' ') * font_height * character_byte_width;
   858b2:	3c20      	subs	r4, #32
   858b4:	fb04 f403 	mul.w	r4, r4, r3
   858b8:	fb04 f405 	mul.w	r4, r4, r5
	for (char_y = 0; char_y < font_height; char_y++)
   858bc:	9a03      	ldr	r2, [sp, #12]
	character_byte_width = font_width / 8 + (int16_t)(font_width % 8 > 0 ? 1 : 0);
   858be:	9306      	str	r3, [sp, #24]
	for (char_y = 0; char_y < font_height; char_y++)
   858c0:	2a00      	cmp	r2, #0
	character_byte_width = font_width / 8 + (int16_t)(font_width % 8 > 0 ? 1 : 0);
   858c2:	b21b      	sxth	r3, r3
   858c4:	9305      	str	r3, [sp, #20]
	byte_pos = ((int16_t)c - (int16_t)' ') * font_height * character_byte_width;
   858c6:	b224      	sxth	r4, r4
	for (char_y = 0; char_y < font_height; char_y++)
   858c8:	f77f ae99 	ble.w	855fe <mw_gl_character+0x46>
   858cc:	2200      	movs	r2, #0
   858ce:	f1c3 0304 	rsb	r3, r3, #4
   858d2:	f8cd 8010 	str.w	r8, [sp, #16]
   858d6:	f8cd 901c 	str.w	r9, [sp, #28]
   858da:	4690      	mov	r8, r2
   858dc:	4699      	mov	r9, r3
		for (byte = 0; byte < character_byte_width; byte++)
   858de:	9b05      	ldr	r3, [sp, #20]
   858e0:	2b00      	cmp	r3, #0
   858e2:	f340 8263 	ble.w	85dac <mw_gl_character+0x7f4>
		return (Font16.table);
   858e6:	4d91      	ldr	r5, [pc, #580]	; (85b2c <mw_gl_character+0x574>)
		return (Font12.table);
   858e8:	4991      	ldr	r1, [pc, #580]	; (85b30 <mw_gl_character+0x578>)
		return (Font16.table);
   858ea:	f8d5 c000 	ldr.w	ip, [r5]
		return (Font9.table);
   858ee:	2500      	movs	r5, #0
   858f0:	4a90      	ldr	r2, [pc, #576]	; (85b34 <mw_gl_character+0x57c>)
   858f2:	9b06      	ldr	r3, [sp, #24]
		return (Font20.table);
   858f4:	4e90      	ldr	r6, [pc, #576]	; (85b38 <mw_gl_character+0x580>)
   858f6:	1918      	adds	r0, r3, r4
		return (Font9.table);
   858f8:	6817      	ldr	r7, [r2, #0]
		return (Font12.table);
   858fa:	680b      	ldr	r3, [r1, #0]
   858fc:	4a8a      	ldr	r2, [pc, #552]	; (85b28 <mw_gl_character+0x570>)
		return (Font24.table);
   858fe:	4989      	ldr	r1, [pc, #548]	; (85b24 <mw_gl_character+0x56c>)
		return (Font20.table);
   85900:	f8d6 b000 	ldr.w	fp, [r6]
   85904:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
		return (Font24.table);
   85908:	680e      	ldr	r6, [r1, #0]
   8590a:	b200      	sxth	r0, r0
			word <<= 8U;
   8590c:	022d      	lsls	r5, r5, #8
	switch (gc.font)
   8590e:	2a04      	cmp	r2, #4
   85910:	f200 82cc 	bhi.w	85eac <mw_gl_character+0x8f4>
   85914:	e8df f002 	tbb	[pc, r2]
   85918:	32343638 	.word	0x32343638
   8591c:	03          	.byte	0x03
   8591d:	00          	.byte	0x00
		return (Font24.table);
   8591e:	4631      	mov	r1, r6
			word |= (uint32_t)get_font_data()[byte_pos];
   85920:	5d09      	ldrb	r1, [r1, r4]
   85922:	3401      	adds	r4, #1
   85924:	b224      	sxth	r4, r4
		for (byte = 0; byte < character_byte_width; byte++)
   85926:	4284      	cmp	r4, r0
			word |= (uint32_t)get_font_data()[byte_pos];
   85928:	ea45 0501 	orr.w	r5, r5, r1
		for (byte = 0; byte < character_byte_width; byte++)
   8592c:	d1ee      	bne.n	8590c <mw_gl_character+0x354>
		for (i = 0; i < 4 - character_byte_width; i++)
   8592e:	f1b9 0f00 	cmp.w	r9, #0
   85932:	dd06      	ble.n	85942 <mw_gl_character+0x38a>
   85934:	2200      	movs	r2, #0
   85936:	3201      	adds	r2, #1
   85938:	b212      	sxth	r2, r2
   8593a:	454a      	cmp	r2, r9
			word <<= 8;
   8593c:	ea4f 2505 	mov.w	r5, r5, lsl #8
		for (i = 0; i < 4 - character_byte_width; i++)
   85940:	dbf9      	blt.n	85936 <mw_gl_character+0x37e>
		for (char_x = 0; char_x < font_width; char_x++)
   85942:	f1ba 0f00 	cmp.w	sl, #0
   85946:	dd11      	ble.n	8596c <mw_gl_character+0x3b4>
   85948:	2600      	movs	r6, #0
   8594a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	   			mw_gl_fg_pixel(draw_info, x - char_y, y + char_x);
   8594e:	9b07      	ldr	r3, [sp, #28]
   85950:	eba3 0b08 	sub.w	fp, r3, r8
   85954:	fa0f fb8b 	sxth.w	fp, fp
			if ((word & mask) == mask)
   85958:	ea37 0305 	bics.w	r3, r7, r5
   8595c:	f000 81dd 	beq.w	85d1a <mw_gl_character+0x762>
   85960:	3601      	adds	r6, #1
		for (char_x = 0; char_x < font_width; char_x++)
   85962:	b233      	sxth	r3, r6
   85964:	459a      	cmp	sl, r3
			mask >>= 1U;
   85966:	ea4f 0757 	mov.w	r7, r7, lsr #1
		for (char_x = 0; char_x < font_width; char_x++)
   8596a:	dcf5      	bgt.n	85958 <mw_gl_character+0x3a0>
   8596c:	f108 0801 	add.w	r8, r8, #1
	for (char_y = 0; char_y < font_height; char_y++)
   85970:	9b03      	ldr	r3, [sp, #12]
   85972:	fa0f f288 	sxth.w	r2, r8
   85976:	4293      	cmp	r3, r2
   85978:	dcb1      	bgt.n	858de <mw_gl_character+0x326>
   8597a:	e640      	b.n	855fe <mw_gl_character+0x46>
		return (Font20.table);
   8597c:	4659      	mov	r1, fp
   8597e:	e7cf      	b.n	85920 <mw_gl_character+0x368>
		return (Font16.table);
   85980:	4661      	mov	r1, ip
   85982:	e7cd      	b.n	85920 <mw_gl_character+0x368>
		return (Font12.table);
   85984:	4619      	mov	r1, r3
   85986:	e7cb      	b.n	85920 <mw_gl_character+0x368>
		return (Font9.table);
   85988:	4639      	mov	r1, r7
   8598a:	e7c9      	b.n	85920 <mw_gl_character+0x368>
		return ((int16_t)Font20.Width);
   8598c:	4a6a      	ldr	r2, [pc, #424]	; (85b38 <mw_gl_character+0x580>)
   8598e:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
   85992:	e752      	b.n	8583a <mw_gl_character+0x282>
		return ((int16_t)Font16.Width);
   85994:	4a65      	ldr	r2, [pc, #404]	; (85b2c <mw_gl_character+0x574>)
   85996:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
   8599a:	e74e      	b.n	8583a <mw_gl_character+0x282>
		return ((int16_t)Font12.Width);
   8599c:	4a64      	ldr	r2, [pc, #400]	; (85b30 <mw_gl_character+0x578>)
   8599e:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
   859a2:	e74a      	b.n	8583a <mw_gl_character+0x282>
		return ((int16_t)Font9.Width);
   859a4:	4a63      	ldr	r2, [pc, #396]	; (85b34 <mw_gl_character+0x57c>)
   859a6:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
   859aa:	e746      	b.n	8583a <mw_gl_character+0x282>
		return ((int16_t)Font24.Width);
   859ac:	4a5d      	ldr	r2, [pc, #372]	; (85b24 <mw_gl_character+0x56c>)
   859ae:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
		return ((int16_t)Font24.Height);
   859b2:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   859b6:	9303      	str	r3, [sp, #12]
	if (x <= draw_info->clip_rect.x ||
   859b8:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
   859bc:	4599      	cmp	r9, r3
   859be:	f77f ae1e 	ble.w	855fe <mw_gl_character+0x46>
			y <= draw_info->clip_rect.y ||
   859c2:	f9b8 0006 	ldrsh.w	r0, [r8, #6]
	if (x <= draw_info->clip_rect.x ||
   859c6:	9d02      	ldr	r5, [sp, #8]
   859c8:	4285      	cmp	r5, r0
   859ca:	f77f ae18 	ble.w	855fe <mw_gl_character+0x46>
			x - font_width + 1 >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   859ce:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
   859d2:	eba9 020a 	sub.w	r2, r9, sl
   859d6:	440b      	add	r3, r1
   859d8:	3201      	adds	r2, #1
			y <= draw_info->clip_rect.y ||
   859da:	429a      	cmp	r2, r3
   859dc:	f6bf ae0f 	bge.w	855fe <mw_gl_character+0x46>
			y - font_height + 1 >= draw_info->clip_rect.y +  draw_info->clip_rect.height)
   859e0:	9903      	ldr	r1, [sp, #12]
   859e2:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
   859e6:	1a6b      	subs	r3, r5, r1
   859e8:	4410      	add	r0, r2
   859ea:	3301      	adds	r3, #1
			x - font_width + 1 >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   859ec:	4283      	cmp	r3, r0
   859ee:	f6bf ae06 	bge.w	855fe <mw_gl_character+0x46>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   859f2:	4b4d      	ldr	r3, [pc, #308]	; (85b28 <mw_gl_character+0x570>)
   859f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   859f8:	2b01      	cmp	r3, #1
   859fa:	f000 81fd 	beq.w	85df8 <mw_gl_character+0x840>
   859fe:	b28d      	uxth	r5, r1
	character_byte_width = font_width / 8 + (int16_t)(font_width % 8 > 0 ? 1 : 0);
   85a00:	f1da 0200 	rsbs	r2, sl, #0
   85a04:	f002 0207 	and.w	r2, r2, #7
   85a08:	f00a 0307 	and.w	r3, sl, #7
   85a0c:	bf58      	it	pl
   85a0e:	4253      	negpl	r3, r2
   85a10:	2b00      	cmp	r3, #0
   85a12:	4652      	mov	r2, sl
   85a14:	bfd4      	ite	le
   85a16:	2300      	movle	r3, #0
   85a18:	2301      	movgt	r3, #1
   85a1a:	f1ba 0f00 	cmp.w	sl, #0
   85a1e:	bfb8      	it	lt
   85a20:	f10a 0207 	addlt.w	r2, sl, #7
   85a24:	eb03 03e2 	add.w	r3, r3, r2, asr #3
   85a28:	b29b      	uxth	r3, r3
	byte_pos = ((int16_t)c - (int16_t)' ') * font_height * character_byte_width;
   85a2a:	3c20      	subs	r4, #32
   85a2c:	fb04 f403 	mul.w	r4, r4, r3
   85a30:	fb04 f405 	mul.w	r4, r4, r5
	for (char_y = 0; char_y < font_height; char_y++)
   85a34:	9a03      	ldr	r2, [sp, #12]
	character_byte_width = font_width / 8 + (int16_t)(font_width % 8 > 0 ? 1 : 0);
   85a36:	9307      	str	r3, [sp, #28]
	for (char_y = 0; char_y < font_height; char_y++)
   85a38:	2a00      	cmp	r2, #0
	character_byte_width = font_width / 8 + (int16_t)(font_width % 8 > 0 ? 1 : 0);
   85a3a:	b21b      	sxth	r3, r3
   85a3c:	9306      	str	r3, [sp, #24]
	byte_pos = ((int16_t)c - (int16_t)' ') * font_height * character_byte_width;
   85a3e:	b224      	sxth	r4, r4
	for (char_y = 0; char_y < font_height; char_y++)
   85a40:	f77f addd 	ble.w	855fe <mw_gl_character+0x46>
   85a44:	2200      	movs	r2, #0
   85a46:	f1c3 0304 	rsb	r3, r3, #4
   85a4a:	f8cd 8010 	str.w	r8, [sp, #16]
   85a4e:	f8cd 9014 	str.w	r9, [sp, #20]
   85a52:	4698      	mov	r8, r3
   85a54:	4691      	mov	r9, r2
		for (byte = 0; byte < character_byte_width; byte++)
   85a56:	9b06      	ldr	r3, [sp, #24]
   85a58:	2b00      	cmp	r3, #0
   85a5a:	f340 81a9 	ble.w	85db0 <mw_gl_character+0x7f8>
		return (Font16.table);
   85a5e:	4d33      	ldr	r5, [pc, #204]	; (85b2c <mw_gl_character+0x574>)
		return (Font12.table);
   85a60:	4933      	ldr	r1, [pc, #204]	; (85b30 <mw_gl_character+0x578>)
		return (Font16.table);
   85a62:	f8d5 b000 	ldr.w	fp, [r5]
		return (Font9.table);
   85a66:	2500      	movs	r5, #0
   85a68:	4a32      	ldr	r2, [pc, #200]	; (85b34 <mw_gl_character+0x57c>)
   85a6a:	9b07      	ldr	r3, [sp, #28]
		return (Font20.table);
   85a6c:	4e32      	ldr	r6, [pc, #200]	; (85b38 <mw_gl_character+0x580>)
   85a6e:	1918      	adds	r0, r3, r4
		return (Font9.table);
   85a70:	6817      	ldr	r7, [r2, #0]
		return (Font12.table);
   85a72:	680b      	ldr	r3, [r1, #0]
   85a74:	4a2c      	ldr	r2, [pc, #176]	; (85b28 <mw_gl_character+0x570>)
		return (Font24.table);
   85a76:	492b      	ldr	r1, [pc, #172]	; (85b24 <mw_gl_character+0x56c>)
		return (Font20.table);
   85a78:	f8d6 c000 	ldr.w	ip, [r6]
   85a7c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
		return (Font24.table);
   85a80:	680e      	ldr	r6, [r1, #0]
   85a82:	b200      	sxth	r0, r0
			word <<= 8U;
   85a84:	022d      	lsls	r5, r5, #8
	switch (gc.font)
   85a86:	2a04      	cmp	r2, #4
   85a88:	f200 820e 	bhi.w	85ea8 <mw_gl_character+0x8f0>
   85a8c:	e8df f002 	tbb	[pc, r2]
   85a90:	32383436 	.word	0x32383436
   85a94:	03          	.byte	0x03
   85a95:	00          	.byte	0x00
		return (Font24.table);
   85a96:	4631      	mov	r1, r6
			word |= (uint32_t)get_font_data()[byte_pos];
   85a98:	5d09      	ldrb	r1, [r1, r4]
   85a9a:	3401      	adds	r4, #1
   85a9c:	b224      	sxth	r4, r4
		for (byte = 0; byte < character_byte_width; byte++)
   85a9e:	4284      	cmp	r4, r0
			word |= (uint32_t)get_font_data()[byte_pos];
   85aa0:	ea45 0501 	orr.w	r5, r5, r1
		for (byte = 0; byte < character_byte_width; byte++)
   85aa4:	d1ee      	bne.n	85a84 <mw_gl_character+0x4cc>
		for (i = 0; i < 4 - character_byte_width; i++)
   85aa6:	f1b8 0f00 	cmp.w	r8, #0
   85aaa:	dd06      	ble.n	85aba <mw_gl_character+0x502>
   85aac:	2200      	movs	r2, #0
   85aae:	3201      	adds	r2, #1
   85ab0:	b212      	sxth	r2, r2
   85ab2:	4542      	cmp	r2, r8
			word <<= 8;
   85ab4:	ea4f 2505 	mov.w	r5, r5, lsl #8
		for (i = 0; i < 4 - character_byte_width; i++)
   85ab8:	dbf9      	blt.n	85aae <mw_gl_character+0x4f6>
		for (char_x = 0; char_x < font_width; char_x++)
   85aba:	f1ba 0f00 	cmp.w	sl, #0
   85abe:	dd11      	ble.n	85ae4 <mw_gl_character+0x52c>
   85ac0:	2600      	movs	r6, #0
   85ac2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
				mw_gl_fg_pixel(draw_info, x - char_x, y - char_y);
   85ac6:	9b02      	ldr	r3, [sp, #8]
   85ac8:	eba3 0b09 	sub.w	fp, r3, r9
   85acc:	fa0f fb8b 	sxth.w	fp, fp
			if ((word & mask) == mask)
   85ad0:	ea37 0305 	bics.w	r3, r7, r5
   85ad4:	f000 8130 	beq.w	85d38 <mw_gl_character+0x780>
   85ad8:	3601      	adds	r6, #1
		for (char_x = 0; char_x < font_width; char_x++)
   85ada:	b233      	sxth	r3, r6
   85adc:	4553      	cmp	r3, sl
			mask >>= 1U;
   85ade:	ea4f 0757 	mov.w	r7, r7, lsr #1
		for (char_x = 0; char_x < font_width; char_x++)
   85ae2:	dbf5      	blt.n	85ad0 <mw_gl_character+0x518>
   85ae4:	f109 0901 	add.w	r9, r9, #1
	for (char_y = 0; char_y < font_height; char_y++)
   85ae8:	9b03      	ldr	r3, [sp, #12]
   85aea:	fa0f f289 	sxth.w	r2, r9
   85aee:	4293      	cmp	r3, r2
   85af0:	dcb1      	bgt.n	85a56 <mw_gl_character+0x49e>
   85af2:	e584      	b.n	855fe <mw_gl_character+0x46>
		return (Font20.table);
   85af4:	4661      	mov	r1, ip
   85af6:	e7cf      	b.n	85a98 <mw_gl_character+0x4e0>
		return (Font12.table);
   85af8:	4619      	mov	r1, r3
   85afa:	e7cd      	b.n	85a98 <mw_gl_character+0x4e0>
		return (Font9.table);
   85afc:	4639      	mov	r1, r7
   85afe:	e7cb      	b.n	85a98 <mw_gl_character+0x4e0>
		return (Font16.table);
   85b00:	4659      	mov	r1, fp
   85b02:	e7c9      	b.n	85a98 <mw_gl_character+0x4e0>
		return ((int16_t)Font20.Width);
   85b04:	4a0c      	ldr	r2, [pc, #48]	; (85b38 <mw_gl_character+0x580>)
   85b06:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
   85b0a:	e752      	b.n	859b2 <mw_gl_character+0x3fa>
		return ((int16_t)Font16.Width);
   85b0c:	4a07      	ldr	r2, [pc, #28]	; (85b2c <mw_gl_character+0x574>)
   85b0e:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
   85b12:	e74e      	b.n	859b2 <mw_gl_character+0x3fa>
		return ((int16_t)Font12.Width);
   85b14:	4a06      	ldr	r2, [pc, #24]	; (85b30 <mw_gl_character+0x578>)
   85b16:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
   85b1a:	e74a      	b.n	859b2 <mw_gl_character+0x3fa>
		return ((int16_t)Font9.Width);
   85b1c:	4a05      	ldr	r2, [pc, #20]	; (85b34 <mw_gl_character+0x57c>)
   85b1e:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
   85b22:	e746      	b.n	859b2 <mw_gl_character+0x3fa>
   85b24:	000a8bc8 	.word	0x000a8bc8
   85b28:	200715e0 	.word	0x200715e0
   85b2c:	000a7100 	.word	0x000a7100
   85b30:	000a6c84 	.word	0x000a6c84
   85b34:	000aa688 	.word	0x000aa688
   85b38:	000a7ce8 	.word	0x000a7ce8
		return ((int16_t)Font24.Width);
   85b3c:	4aa6      	ldr	r2, [pc, #664]	; (85dd8 <mw_gl_character+0x820>)
   85b3e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
		return ((int16_t)Font24.Height);
   85b42:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
	if (x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   85b46:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
   85b4a:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
   85b4e:	440a      	add	r2, r1
   85b50:	4591      	cmp	r9, r2
   85b52:	f6bf ad54 	bge.w	855fe <mw_gl_character+0x46>
			y <= draw_info->clip_rect.y ||
   85b56:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
	if (x >= draw_info->clip_rect.x + draw_info->clip_rect.width ||
   85b5a:	9e02      	ldr	r6, [sp, #8]
   85b5c:	4296      	cmp	r6, r2
   85b5e:	f77f ad4e 	ble.w	855fe <mw_gl_character+0x46>
			x + font_height + 1 <= draw_info->clip_rect.x ||
   85b62:	eb05 0009 	add.w	r0, r5, r9
			y <= draw_info->clip_rect.y ||
   85b66:	4281      	cmp	r1, r0
   85b68:	f73f ad49 	bgt.w	855fe <mw_gl_character+0x46>
			y - font_width + 1 >= draw_info->clip_rect.y +  draw_info->clip_rect.height)
   85b6c:	f9b8 000a 	ldrsh.w	r0, [r8, #10]
   85b70:	1bf1      	subs	r1, r6, r7
   85b72:	4410      	add	r0, r2
   85b74:	460a      	mov	r2, r1
   85b76:	3201      	adds	r2, #1
			x + font_height + 1 <= draw_info->clip_rect.x ||
   85b78:	4282      	cmp	r2, r0
   85b7a:	f6bf ad40 	bge.w	855fe <mw_gl_character+0x46>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   85b7e:	4a97      	ldr	r2, [pc, #604]	; (85ddc <mw_gl_character+0x824>)
   85b80:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
   85b84:	2a01      	cmp	r2, #1
   85b86:	f000 814d 	beq.w	85e24 <mw_gl_character+0x86c>
   85b8a:	b2ad      	uxth	r5, r5
	character_byte_width = font_width / 8 + (int16_t)(font_width % 8 > 0 ? 1 : 0);
   85b8c:	4279      	negs	r1, r7
   85b8e:	f001 0107 	and.w	r1, r1, #7
   85b92:	f007 0207 	and.w	r2, r7, #7
   85b96:	bf58      	it	pl
   85b98:	424a      	negpl	r2, r1
   85b9a:	2a00      	cmp	r2, #0
   85b9c:	4639      	mov	r1, r7
   85b9e:	bfd4      	ite	le
   85ba0:	2200      	movle	r2, #0
   85ba2:	2201      	movgt	r2, #1
   85ba4:	2f00      	cmp	r7, #0
   85ba6:	bfb8      	it	lt
   85ba8:	1df9      	addlt	r1, r7, #7
   85baa:	eb02 02e1 	add.w	r2, r2, r1, asr #3
   85bae:	b292      	uxth	r2, r2
	byte_pos = ((int16_t)c - (int16_t)' ') * font_height * character_byte_width;
   85bb0:	3c20      	subs	r4, #32
   85bb2:	fb04 f402 	mul.w	r4, r4, r2
	character_byte_width = font_width / 8 + (int16_t)(font_width % 8 > 0 ? 1 : 0);
   85bb6:	9205      	str	r2, [sp, #20]
   85bb8:	b212      	sxth	r2, r2
   85bba:	9204      	str	r2, [sp, #16]
		for (i = 0; i < 4 - character_byte_width; i++)
   85bbc:	f1c2 0a04 	rsb	sl, r2, #4
   85bc0:	2200      	movs	r2, #0
   85bc2:	4611      	mov	r1, r2
   85bc4:	f8cd 800c 	str.w	r8, [sp, #12]
   85bc8:	461a      	mov	r2, r3
   85bca:	4688      	mov	r8, r1
	byte_pos = ((int16_t)c - (int16_t)' ') * font_height * character_byte_width;
   85bcc:	fb04 f405 	mul.w	r4, r4, r5
   85bd0:	f8cd 9018 	str.w	r9, [sp, #24]
   85bd4:	b224      	sxth	r4, r4
   85bd6:	fa0f f088 	sxth.w	r0, r8
	switch (gc.font)
   85bda:	2a05      	cmp	r2, #5
   85bdc:	f200 80bb 	bhi.w	85d56 <mw_gl_character+0x79e>
   85be0:	e8df f002 	tbb	[pc, r2]
   85be4:	5a5e6266 	.word	0x5a5e6266
   85be8:	0356      	.short	0x0356
		return (MW_GL_TITLE_FONT_HEIGHT);
   85bea:	2110      	movs	r1, #16
	for (char_y = 0; char_y < mw_gl_get_font_height(); char_y++)
   85bec:	4288      	cmp	r0, r1
   85bee:	f6bf ad06 	bge.w	855fe <mw_gl_character+0x46>
		for (byte = 0; byte < character_byte_width; byte++)
   85bf2:	9b04      	ldr	r3, [sp, #16]
		return (Font9.table);
   85bf4:	2500      	movs	r5, #0
		for (byte = 0; byte < character_byte_width; byte++)
   85bf6:	2b00      	cmp	r3, #0
   85bf8:	dd1f      	ble.n	85c3a <mw_gl_character+0x682>
		return (Font20.table);
   85bfa:	4b79      	ldr	r3, [pc, #484]	; (85de0 <mw_gl_character+0x828>)
		return (Font12.table);
   85bfc:	4879      	ldr	r0, [pc, #484]	; (85de4 <mw_gl_character+0x82c>)
		return (Font20.table);
   85bfe:	f8d3 b000 	ldr.w	fp, [r3]
   85c02:	9b05      	ldr	r3, [sp, #20]
		return (Font16.table);
   85c04:	4e78      	ldr	r6, [pc, #480]	; (85de8 <mw_gl_character+0x830>)
		return (Font9.table);
   85c06:	4979      	ldr	r1, [pc, #484]	; (85dec <mw_gl_character+0x834>)
		return (Font12.table);
   85c08:	f8d0 c000 	ldr.w	ip, [r0]
   85c0c:	1918      	adds	r0, r3, r4
		return (Font24.table);
   85c0e:	4b72      	ldr	r3, [pc, #456]	; (85dd8 <mw_gl_character+0x820>)
		return (Font16.table);
   85c10:	f8d6 9000 	ldr.w	r9, [r6]
		return (Font24.table);
   85c14:	681b      	ldr	r3, [r3, #0]
		return (Font9.table);
   85c16:	680e      	ldr	r6, [r1, #0]
   85c18:	b200      	sxth	r0, r0
			word <<= 8U;
   85c1a:	022d      	lsls	r5, r5, #8
	switch (gc.font)
   85c1c:	2a04      	cmp	r2, #4
   85c1e:	d85b      	bhi.n	85cd8 <mw_gl_character+0x720>
   85c20:	e8df f002 	tbb	[pc, r2]
   85c24:	34303203 	.word	0x34303203
   85c28:	2e          	.byte	0x2e
   85c29:	00          	.byte	0x00
		return (Font9.table);
   85c2a:	4631      	mov	r1, r6
			word |= (uint32_t)get_font_data()[byte_pos];
   85c2c:	5d09      	ldrb	r1, [r1, r4]
   85c2e:	3401      	adds	r4, #1
   85c30:	b224      	sxth	r4, r4
		for (byte = 0; byte < character_byte_width; byte++)
   85c32:	4284      	cmp	r4, r0
			word |= (uint32_t)get_font_data()[byte_pos];
   85c34:	ea45 0501 	orr.w	r5, r5, r1
		for (byte = 0; byte < character_byte_width; byte++)
   85c38:	d1ef      	bne.n	85c1a <mw_gl_character+0x662>
		for (i = 0; i < 4 - character_byte_width; i++)
   85c3a:	f1ba 0f00 	cmp.w	sl, #0
   85c3e:	dd06      	ble.n	85c4e <mw_gl_character+0x696>
   85c40:	2100      	movs	r1, #0
   85c42:	3101      	adds	r1, #1
   85c44:	b209      	sxth	r1, r1
   85c46:	4551      	cmp	r1, sl
			word <<= 8;
   85c48:	ea4f 2505 	mov.w	r5, r5, lsl #8
		for (i = 0; i < 4 - character_byte_width; i++)
   85c4c:	dbf9      	blt.n	85c42 <mw_gl_character+0x68a>
		for (char_x = 0; char_x < font_width; char_x++)
   85c4e:	2f00      	cmp	r7, #0
   85c50:	dd13      	ble.n	85c7a <mw_gl_character+0x6c2>
   85c52:	2600      	movs	r6, #0
   85c54:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
	   			mw_gl_fg_pixel(draw_info, x + char_y, y - char_x);
   85c58:	9b06      	ldr	r3, [sp, #24]
   85c5a:	eb08 0b03 	add.w	fp, r8, r3
   85c5e:	fa0f fb8b 	sxth.w	fp, fp
			if ((word & mask) == mask)
   85c62:	ea39 0305 	bics.w	r3, r9, r5
   85c66:	d03b      	beq.n	85ce0 <mw_gl_character+0x728>
   85c68:	3601      	adds	r6, #1
		for (char_x = 0; char_x < font_width; char_x++)
   85c6a:	b233      	sxth	r3, r6
   85c6c:	42bb      	cmp	r3, r7
			mask >>= 1U;
   85c6e:	ea4f 0959 	mov.w	r9, r9, lsr #1
		for (char_x = 0; char_x < font_width; char_x++)
   85c72:	dbf6      	blt.n	85c62 <mw_gl_character+0x6aa>
   85c74:	4b59      	ldr	r3, [pc, #356]	; (85ddc <mw_gl_character+0x824>)
   85c76:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
   85c7a:	f108 0801 	add.w	r8, r8, #1
   85c7e:	e7aa      	b.n	85bd6 <mw_gl_character+0x61e>
		return (Font24.table);
   85c80:	4619      	mov	r1, r3
   85c82:	e7d3      	b.n	85c2c <mw_gl_character+0x674>
		return (Font16.table);
   85c84:	4649      	mov	r1, r9
   85c86:	e7d1      	b.n	85c2c <mw_gl_character+0x674>
		return (Font12.table);
   85c88:	4661      	mov	r1, ip
   85c8a:	e7cf      	b.n	85c2c <mw_gl_character+0x674>
		return (Font20.table);
   85c8c:	4659      	mov	r1, fp
   85c8e:	e7cd      	b.n	85c2c <mw_gl_character+0x674>
		return ((int16_t)Font24.Height);
   85c90:	4b51      	ldr	r3, [pc, #324]	; (85dd8 <mw_gl_character+0x820>)
   85c92:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
   85c96:	e7a9      	b.n	85bec <mw_gl_character+0x634>
		return ((int16_t)Font20.Height);
   85c98:	4951      	ldr	r1, [pc, #324]	; (85de0 <mw_gl_character+0x828>)
   85c9a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   85c9e:	e7a5      	b.n	85bec <mw_gl_character+0x634>
		return ((int16_t)Font16.Height);
   85ca0:	4951      	ldr	r1, [pc, #324]	; (85de8 <mw_gl_character+0x830>)
   85ca2:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   85ca6:	e7a1      	b.n	85bec <mw_gl_character+0x634>
		return ((int16_t)Font12.Height);
   85ca8:	494e      	ldr	r1, [pc, #312]	; (85de4 <mw_gl_character+0x82c>)
   85caa:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   85cae:	e79d      	b.n	85bec <mw_gl_character+0x634>
		return ((int16_t)Font9.Height);
   85cb0:	494e      	ldr	r1, [pc, #312]	; (85dec <mw_gl_character+0x834>)
   85cb2:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   85cb6:	e799      	b.n	85bec <mw_gl_character+0x634>
		return ((int16_t)Font20.Width);
   85cb8:	4a49      	ldr	r2, [pc, #292]	; (85de0 <mw_gl_character+0x828>)
   85cba:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
   85cbe:	e740      	b.n	85b42 <mw_gl_character+0x58a>
		return ((int16_t)Font16.Width);
   85cc0:	4a49      	ldr	r2, [pc, #292]	; (85de8 <mw_gl_character+0x830>)
   85cc2:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
   85cc6:	e73c      	b.n	85b42 <mw_gl_character+0x58a>
		return ((int16_t)Font12.Width);
   85cc8:	4a46      	ldr	r2, [pc, #280]	; (85de4 <mw_gl_character+0x82c>)
   85cca:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
   85cce:	e738      	b.n	85b42 <mw_gl_character+0x58a>
		return ((int16_t)Font9.Width);
   85cd0:	4a46      	ldr	r2, [pc, #280]	; (85dec <mw_gl_character+0x834>)
   85cd2:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
   85cd6:	e734      	b.n	85b42 <mw_gl_character+0x58a>
		return (NULL);
   85cd8:	2100      	movs	r1, #0
   85cda:	e7a7      	b.n	85c2c <mw_gl_character+0x674>
   85cdc:	2100      	movs	r1, #0
   85cde:	e53c      	b.n	8575a <mw_gl_character+0x1a2>
	   			mw_gl_fg_pixel(draw_info, x + char_y, y - char_x);
   85ce0:	9b02      	ldr	r3, [sp, #8]
   85ce2:	4659      	mov	r1, fp
   85ce4:	1b9a      	subs	r2, r3, r6
   85ce6:	b212      	sxth	r2, r2
   85ce8:	4b41      	ldr	r3, [pc, #260]	; (85df0 <mw_gl_character+0x838>)
   85cea:	3601      	adds	r6, #1
   85cec:	9803      	ldr	r0, [sp, #12]
   85cee:	4798      	blx	r3
		for (char_x = 0; char_x < font_width; char_x++)
   85cf0:	b233      	sxth	r3, r6
   85cf2:	429f      	cmp	r7, r3
			mask >>= 1U;
   85cf4:	ea4f 0959 	mov.w	r9, r9, lsr #1
		for (char_x = 0; char_x < font_width; char_x++)
   85cf8:	dcb3      	bgt.n	85c62 <mw_gl_character+0x6aa>
   85cfa:	e7bb      	b.n	85c74 <mw_gl_character+0x6bc>
				mw_gl_fg_pixel(draw_info, x + char_x, y + char_y);
   85cfc:	9b04      	ldr	r3, [sp, #16]
   85cfe:	465a      	mov	r2, fp
   85d00:	1999      	adds	r1, r3, r6
   85d02:	b209      	sxth	r1, r1
   85d04:	4b3a      	ldr	r3, [pc, #232]	; (85df0 <mw_gl_character+0x838>)
   85d06:	3601      	adds	r6, #1
   85d08:	9803      	ldr	r0, [sp, #12]
   85d0a:	4798      	blx	r3
		for (char_x = 0; char_x < font_width; char_x++)
   85d0c:	b233      	sxth	r3, r6
   85d0e:	429f      	cmp	r7, r3
			mask >>= 1U;
   85d10:	ea4f 0858 	mov.w	r8, r8, lsr #1
		for (char_x = 0; char_x < font_width; char_x++)
   85d14:	f73f ad3c 	bgt.w	85790 <mw_gl_character+0x1d8>
   85d18:	e544      	b.n	857a4 <mw_gl_character+0x1ec>
	   			mw_gl_fg_pixel(draw_info, x - char_y, y + char_x);
   85d1a:	9b02      	ldr	r3, [sp, #8]
   85d1c:	4659      	mov	r1, fp
   85d1e:	199a      	adds	r2, r3, r6
   85d20:	b212      	sxth	r2, r2
   85d22:	4b33      	ldr	r3, [pc, #204]	; (85df0 <mw_gl_character+0x838>)
   85d24:	3601      	adds	r6, #1
   85d26:	9804      	ldr	r0, [sp, #16]
   85d28:	4798      	blx	r3
		for (char_x = 0; char_x < font_width; char_x++)
   85d2a:	b233      	sxth	r3, r6
   85d2c:	459a      	cmp	sl, r3
			mask >>= 1U;
   85d2e:	ea4f 0757 	mov.w	r7, r7, lsr #1
		for (char_x = 0; char_x < font_width; char_x++)
   85d32:	f73f ae11 	bgt.w	85958 <mw_gl_character+0x3a0>
   85d36:	e619      	b.n	8596c <mw_gl_character+0x3b4>
				mw_gl_fg_pixel(draw_info, x - char_x, y - char_y);
   85d38:	9b05      	ldr	r3, [sp, #20]
   85d3a:	465a      	mov	r2, fp
   85d3c:	1b99      	subs	r1, r3, r6
   85d3e:	b209      	sxth	r1, r1
   85d40:	4b2b      	ldr	r3, [pc, #172]	; (85df0 <mw_gl_character+0x838>)
   85d42:	3601      	adds	r6, #1
   85d44:	9804      	ldr	r0, [sp, #16]
   85d46:	4798      	blx	r3
		for (char_x = 0; char_x < font_width; char_x++)
   85d48:	b233      	sxth	r3, r6
   85d4a:	459a      	cmp	sl, r3
			mask >>= 1U;
   85d4c:	ea4f 0757 	mov.w	r7, r7, lsr #1
		for (char_x = 0; char_x < font_width; char_x++)
   85d50:	f73f aebe 	bgt.w	85ad0 <mw_gl_character+0x518>
   85d54:	e6c6      	b.n	85ae4 <mw_gl_character+0x52c>
		return (0);
   85d56:	2100      	movs	r1, #0
   85d58:	e748      	b.n	85bec <mw_gl_character+0x634>
   85d5a:	2100      	movs	r1, #0
   85d5c:	e4dc      	b.n	85718 <mw_gl_character+0x160>
		return (0);
   85d5e:	f04f 0a00 	mov.w	sl, #0
	switch (gc.font)
   85d62:	2b04      	cmp	r3, #4
   85d64:	f200 80bc 	bhi.w	85ee0 <mw_gl_character+0x928>
   85d68:	e8df f013 	tbh	[pc, r3, lsl #1]
   85d6c:	009c00b8 	.word	0x009c00b8
   85d70:	0098009a 	.word	0x0098009a
   85d74:	0096      	.short	0x0096
		return (0);
   85d76:	2700      	movs	r7, #0
	switch (gc.font)
   85d78:	2b04      	cmp	r3, #4
   85d7a:	f200 80be 	bhi.w	85efa <mw_gl_character+0x942>
   85d7e:	e8df f013 	tbh	[pc, r3, lsl #1]
   85d82:	00ba      	.short	0x00ba
   85d84:	00b600b8 	.word	0x00b600b8
   85d88:	00b200b4 	.word	0x00b200b4
		return (0);
   85d8c:	2700      	movs	r7, #0
	switch (gc.font)
   85d8e:	2b04      	cmp	r3, #4
   85d90:	d87f      	bhi.n	85e92 <mw_gl_character+0x8da>
   85d92:	e8df f003 	tbb	[pc, r3]
   85d96:	787b      	.short	0x787b
   85d98:	9075      	.short	0x9075
   85d9a:	8d          	.byte	0x8d
   85d9b:	00          	.byte	0x00
   85d9c:	2b04      	cmp	r3, #4
   85d9e:	f200 8099 	bhi.w	85ed4 <mw_gl_character+0x91c>
   85da2:	e8df f003 	tbb	[pc, r3]
   85da6:	8f93      	.short	0x8f93
   85da8:	698b      	.short	0x698b
   85daa:	65          	.byte	0x65
   85dab:	00          	.byte	0x00
		for (byte = 0; byte < character_byte_width; byte++)
   85dac:	2500      	movs	r5, #0
   85dae:	e5be      	b.n	8592e <mw_gl_character+0x376>
		for (byte = 0; byte < character_byte_width; byte++)
   85db0:	2500      	movs	r5, #0
   85db2:	e678      	b.n	85aa6 <mw_gl_character+0x4ee>
		filled_rectangle(draw_info,
   85db4:	4b09      	ldr	r3, [pc, #36]	; (85ddc <mw_gl_character+0x824>)
				font_width + 1,
   85db6:	f10a 0201 	add.w	r2, sl, #1
		filled_rectangle(draw_info,
   85dba:	6858      	ldr	r0, [r3, #4]
				x - font_height,
   85dbc:	eba9 0105 	sub.w	r1, r9, r5
				font_height + 1,
   85dc0:	1c6b      	adds	r3, r5, #1
		filled_rectangle(draw_info,
   85dc2:	b212      	sxth	r2, r2
   85dc4:	9200      	str	r2, [sp, #0]
   85dc6:	9001      	str	r0, [sp, #4]
   85dc8:	b21b      	sxth	r3, r3
   85dca:	b209      	sxth	r1, r1
   85dcc:	9a02      	ldr	r2, [sp, #8]
   85dce:	4640      	mov	r0, r8
   85dd0:	4e08      	ldr	r6, [pc, #32]	; (85df4 <mw_gl_character+0x83c>)
   85dd2:	47b0      	blx	r6
   85dd4:	e558      	b.n	85888 <mw_gl_character+0x2d0>
   85dd6:	bf00      	nop
   85dd8:	000a8bc8 	.word	0x000a8bc8
   85ddc:	200715e0 	.word	0x200715e0
   85de0:	000a7ce8 	.word	0x000a7ce8
   85de4:	000a6c84 	.word	0x000a6c84
   85de8:	000a7100 	.word	0x000a7100
   85dec:	000aa688 	.word	0x000aa688
   85df0:	00084805 	.word	0x00084805
   85df4:	00084015 	.word	0x00084015
		filled_rectangle(draw_info,
   85df8:	4b41      	ldr	r3, [pc, #260]	; (85f00 <mw_gl_character+0x948>)
				y - font_height,
   85dfa:	f8bd 500c 	ldrh.w	r5, [sp, #12]
		filled_rectangle(draw_info,
   85dfe:	6858      	ldr	r0, [r3, #4]
				y - font_height,
   85e00:	9b02      	ldr	r3, [sp, #8]
				x - font_width,
   85e02:	fa1f f18a 	uxth.w	r1, sl
				mw_gl_get_font_height() + 1,
   85e06:	1c6e      	adds	r6, r5, #1
				y - font_height,
   85e08:	1b5a      	subs	r2, r3, r5
		filled_rectangle(draw_info,
   85e0a:	b236      	sxth	r6, r6
				font_width + 1,
   85e0c:	1c4b      	adds	r3, r1, #1
				x - font_width,
   85e0e:	eba9 0101 	sub.w	r1, r9, r1
		filled_rectangle(draw_info,
   85e12:	9600      	str	r6, [sp, #0]
   85e14:	9001      	str	r0, [sp, #4]
   85e16:	b212      	sxth	r2, r2
   85e18:	b21b      	sxth	r3, r3
   85e1a:	b209      	sxth	r1, r1
   85e1c:	4640      	mov	r0, r8
   85e1e:	4e39      	ldr	r6, [pc, #228]	; (85f04 <mw_gl_character+0x94c>)
   85e20:	47b0      	blx	r6
   85e22:	e5ed      	b.n	85a00 <mw_gl_character+0x448>
		filled_rectangle(draw_info,
   85e24:	4a36      	ldr	r2, [pc, #216]	; (85f00 <mw_gl_character+0x948>)
				y - font_width,
   85e26:	b2bb      	uxth	r3, r7
		filled_rectangle(draw_info,
   85e28:	6851      	ldr	r1, [r2, #4]
				y - font_width,
   85e2a:	9a02      	ldr	r2, [sp, #8]
				font_width + 1,
   85e2c:	1c58      	adds	r0, r3, #1
				font_height + 1,
   85e2e:	b2ad      	uxth	r5, r5
		filled_rectangle(draw_info,
   85e30:	b200      	sxth	r0, r0
				y - font_width,
   85e32:	1ad2      	subs	r2, r2, r3
				font_height + 1,
   85e34:	1c6b      	adds	r3, r5, #1
		filled_rectangle(draw_info,
   85e36:	9000      	str	r0, [sp, #0]
   85e38:	b21b      	sxth	r3, r3
   85e3a:	9101      	str	r1, [sp, #4]
   85e3c:	b212      	sxth	r2, r2
   85e3e:	4649      	mov	r1, r9
   85e40:	4640      	mov	r0, r8
   85e42:	4e30      	ldr	r6, [pc, #192]	; (85f04 <mw_gl_character+0x94c>)
   85e44:	47b0      	blx	r6
   85e46:	4b2e      	ldr	r3, [pc, #184]	; (85f00 <mw_gl_character+0x948>)
   85e48:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   85e4c:	e69e      	b.n	85b8c <mw_gl_character+0x5d4>
		filled_rectangle(draw_info,
   85e4e:	4b2c      	ldr	r3, [pc, #176]	; (85f00 <mw_gl_character+0x948>)
				font_height + 1,
   85e50:	1c6a      	adds	r2, r5, #1
		filled_rectangle(draw_info,
   85e52:	6859      	ldr	r1, [r3, #4]
   85e54:	b212      	sxth	r2, r2
				font_width + 1,
   85e56:	1c7b      	adds	r3, r7, #1
		filled_rectangle(draw_info,
   85e58:	9200      	str	r2, [sp, #0]
   85e5a:	9101      	str	r1, [sp, #4]
   85e5c:	b21b      	sxth	r3, r3
   85e5e:	9a02      	ldr	r2, [sp, #8]
   85e60:	4649      	mov	r1, r9
   85e62:	4640      	mov	r0, r8
   85e64:	4e27      	ldr	r6, [pc, #156]	; (85f04 <mw_gl_character+0x94c>)
   85e66:	47b0      	blx	r6
   85e68:	4b25      	ldr	r3, [pc, #148]	; (85f00 <mw_gl_character+0x948>)
   85e6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   85e6e:	e423      	b.n	856b8 <mw_gl_character+0x100>
		return (0);
   85e70:	f04f 0a00 	mov.w	sl, #0
   85e74:	4a24      	ldr	r2, [pc, #144]	; (85f08 <mw_gl_character+0x950>)
   85e76:	e4e0      	b.n	8583a <mw_gl_character+0x282>
   85e78:	f04f 0a00 	mov.w	sl, #0
   85e7c:	4a23      	ldr	r2, [pc, #140]	; (85f0c <mw_gl_character+0x954>)
   85e7e:	e4dc      	b.n	8583a <mw_gl_character+0x282>
   85e80:	4a23      	ldr	r2, [pc, #140]	; (85f10 <mw_gl_character+0x958>)
   85e82:	f7ff bbfa 	b.w	8567a <mw_gl_character+0xc2>
   85e86:	4a23      	ldr	r2, [pc, #140]	; (85f14 <mw_gl_character+0x95c>)
   85e88:	f7ff bbf7 	b.w	8567a <mw_gl_character+0xc2>
   85e8c:	4a22      	ldr	r2, [pc, #136]	; (85f18 <mw_gl_character+0x960>)
   85e8e:	f7ff bbf4 	b.w	8567a <mw_gl_character+0xc2>
		return (0);
   85e92:	463d      	mov	r5, r7
   85e94:	f7ff bbf3 	b.w	8567e <mw_gl_character+0xc6>
   85e98:	4a1b      	ldr	r2, [pc, #108]	; (85f08 <mw_gl_character+0x950>)
   85e9a:	e58a      	b.n	859b2 <mw_gl_character+0x3fa>
   85e9c:	4a1b      	ldr	r2, [pc, #108]	; (85f0c <mw_gl_character+0x954>)
   85e9e:	e588      	b.n	859b2 <mw_gl_character+0x3fa>
   85ea0:	4a1b      	ldr	r2, [pc, #108]	; (85f10 <mw_gl_character+0x958>)
   85ea2:	e586      	b.n	859b2 <mw_gl_character+0x3fa>
   85ea4:	4a1b      	ldr	r2, [pc, #108]	; (85f14 <mw_gl_character+0x95c>)
   85ea6:	e584      	b.n	859b2 <mw_gl_character+0x3fa>
		return (NULL);
   85ea8:	2100      	movs	r1, #0
   85eaa:	e5f5      	b.n	85a98 <mw_gl_character+0x4e0>
   85eac:	2100      	movs	r1, #0
   85eae:	e537      	b.n	85920 <mw_gl_character+0x368>
   85eb0:	4a15      	ldr	r2, [pc, #84]	; (85f08 <mw_gl_character+0x950>)
   85eb2:	f7ff bbe2 	b.w	8567a <mw_gl_character+0xc2>
   85eb6:	4a15      	ldr	r2, [pc, #84]	; (85f0c <mw_gl_character+0x954>)
   85eb8:	f7ff bbdf 	b.w	8567a <mw_gl_character+0xc2>
		return (0);
   85ebc:	f04f 0a00 	mov.w	sl, #0
   85ec0:	4a13      	ldr	r2, [pc, #76]	; (85f10 <mw_gl_character+0x958>)
   85ec2:	e4ba      	b.n	8583a <mw_gl_character+0x282>
   85ec4:	f04f 0a00 	mov.w	sl, #0
   85ec8:	4a12      	ldr	r2, [pc, #72]	; (85f14 <mw_gl_character+0x95c>)
   85eca:	e4b6      	b.n	8583a <mw_gl_character+0x282>
   85ecc:	f04f 0a00 	mov.w	sl, #0
   85ed0:	4a11      	ldr	r2, [pc, #68]	; (85f18 <mw_gl_character+0x960>)
   85ed2:	e4b2      	b.n	8583a <mw_gl_character+0x282>
	switch (gc.font)
   85ed4:	2200      	movs	r2, #0
		return (0);
   85ed6:	4692      	mov	sl, r2
		return (0);
   85ed8:	9203      	str	r2, [sp, #12]
   85eda:	e4b2      	b.n	85842 <mw_gl_character+0x28a>
   85edc:	4a0e      	ldr	r2, [pc, #56]	; (85f18 <mw_gl_character+0x960>)
   85ede:	e568      	b.n	859b2 <mw_gl_character+0x3fa>
   85ee0:	f8cd a00c 	str.w	sl, [sp, #12]
   85ee4:	e568      	b.n	859b8 <mw_gl_character+0x400>
   85ee6:	4a08      	ldr	r2, [pc, #32]	; (85f08 <mw_gl_character+0x950>)
   85ee8:	e62b      	b.n	85b42 <mw_gl_character+0x58a>
   85eea:	4a08      	ldr	r2, [pc, #32]	; (85f0c <mw_gl_character+0x954>)
   85eec:	e629      	b.n	85b42 <mw_gl_character+0x58a>
   85eee:	4a08      	ldr	r2, [pc, #32]	; (85f10 <mw_gl_character+0x958>)
   85ef0:	e627      	b.n	85b42 <mw_gl_character+0x58a>
   85ef2:	4a08      	ldr	r2, [pc, #32]	; (85f14 <mw_gl_character+0x95c>)
   85ef4:	e625      	b.n	85b42 <mw_gl_character+0x58a>
   85ef6:	4a08      	ldr	r2, [pc, #32]	; (85f18 <mw_gl_character+0x960>)
   85ef8:	e623      	b.n	85b42 <mw_gl_character+0x58a>
   85efa:	463d      	mov	r5, r7
   85efc:	e623      	b.n	85b46 <mw_gl_character+0x58e>
   85efe:	bf00      	nop
   85f00:	200715e0 	.word	0x200715e0
   85f04:	00084015 	.word	0x00084015
   85f08:	000a8bc8 	.word	0x000a8bc8
   85f0c:	000a7ce8 	.word	0x000a7ce8
   85f10:	000a7100 	.word	0x000a7100
   85f14:	000a6c84 	.word	0x000a6c84
   85f18:	000aa688 	.word	0x000aa688

00085f1c <mw_gl_string>:
{
   85f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85f20:	b083      	sub	sp, #12
	if (draw_info == NULL || s == NULL)
   85f22:	2800      	cmp	r0, #0
   85f24:	f000 80ea 	beq.w	860fc <mw_gl_string+0x1e0>
   85f28:	461d      	mov	r5, r3
   85f2a:	2b00      	cmp	r3, #0
   85f2c:	f000 80e6 	beq.w	860fc <mw_gl_string+0x1e0>
	if (gc.font == MW_GL_TITLE_FONT)
   85f30:	4e7f      	ldr	r6, [pc, #508]	; (86130 <mw_gl_string+0x214>)
   85f32:	f896 4032 	ldrb.w	r4, [r6, #50]	; 0x32
   85f36:	2c05      	cmp	r4, #5
   85f38:	f000 80eb 	beq.w	86112 <mw_gl_string+0x1f6>
   85f3c:	4682      	mov	sl, r0
	length = strlen(s);
   85f3e:	4618      	mov	r0, r3
   85f40:	4b7c      	ldr	r3, [pc, #496]	; (86134 <mw_gl_string+0x218>)
   85f42:	4688      	mov	r8, r1
   85f44:	4691      	mov	r9, r2
   85f46:	4798      	blx	r3
	for (c = (size_t)0; c < length; c++)
   85f48:	2800      	cmp	r0, #0
   85f4a:	d046      	beq.n	85fda <mw_gl_string+0xbe>
   85f4c:	2400      	movs	r4, #0
			MW_ASSERT((bool)false, "Unknown text rotation");
   85f4e:	9001      	str	r0, [sp, #4]
		switch (gc.text_rotation)
   85f50:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   85f54:	2b03      	cmp	r3, #3
   85f56:	d833      	bhi.n	85fc0 <mw_gl_string+0xa4>
   85f58:	e8df f003 	tbb	[pc, r3]
   85f5c:	020f1c27 	.word	0x020f1c27
	switch (gc.font)
   85f60:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
			mw_gl_character(draw_info, x, y - (int16_t)c * (mw_gl_get_font_width() + 1), s[c]);
   85f64:	fa1f f089 	uxth.w	r0, r9
   85f68:	b2a1      	uxth	r1, r4
	switch (gc.font)
   85f6a:	2b04      	cmp	r3, #4
   85f6c:	f200 80d7 	bhi.w	8611e <mw_gl_string+0x202>
   85f70:	e8df f003 	tbb	[pc, r3]
   85f74:	acb2b8be 	.word	0xacb2b8be
   85f78:	a4          	.byte	0xa4
   85f79:	00          	.byte	0x00
   85f7a:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
			mw_gl_character(draw_info, x - (int16_t)c * (mw_gl_get_font_width() + 1), y, s[c]);
   85f7e:	fa1f f088 	uxth.w	r0, r8
   85f82:	b2a2      	uxth	r2, r4
	switch (gc.font)
   85f84:	2b04      	cmp	r3, #4
   85f86:	f200 80ce 	bhi.w	86126 <mw_gl_string+0x20a>
   85f8a:	e8df f003 	tbb	[pc, r3]
   85f8e:	8b91      	.short	0x8b91
   85f90:	7f85      	.short	0x7f85
   85f92:	77          	.byte	0x77
   85f93:	00          	.byte	0x00
   85f94:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
			mw_gl_character(draw_info, x, y + (int16_t)c * (mw_gl_get_font_width() + 1), s[c]);
   85f98:	b2a1      	uxth	r1, r4
	switch (gc.font)
   85f9a:	2b04      	cmp	r3, #4
   85f9c:	f200 80c1 	bhi.w	86122 <mw_gl_string+0x206>
   85fa0:	e8df f003 	tbb	[pc, r3]
   85fa4:	545a6066 	.word	0x545a6066
   85fa8:	45          	.byte	0x45
   85fa9:	00          	.byte	0x00
   85faa:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
			mw_gl_character(draw_info, x + (int16_t)c * (mw_gl_get_font_width() + 1), y, s[c]);
   85fae:	b2a2      	uxth	r2, r4
	switch (gc.font)
   85fb0:	2b04      	cmp	r3, #4
   85fb2:	f200 80ba 	bhi.w	8612a <mw_gl_string+0x20e>
   85fb6:	e8df f003 	tbb	[pc, r3]
   85fba:	2e34      	.short	0x2e34
   85fbc:	2228      	.short	0x2228
   85fbe:	13          	.byte	0x13
   85fbf:	00          	.byte	0x00
			MW_ASSERT((bool)false, "Unknown text rotation");
   85fc0:	4b5d      	ldr	r3, [pc, #372]	; (86138 <mw_gl_string+0x21c>)
   85fc2:	f640 0267 	movw	r2, #2151	; 0x867
   85fc6:	495d      	ldr	r1, [pc, #372]	; (8613c <mw_gl_string+0x220>)
   85fc8:	2000      	movs	r0, #0
   85fca:	4f5d      	ldr	r7, [pc, #372]	; (86140 <mw_gl_string+0x224>)
   85fcc:	47b8      	blx	r7
	for (c = (size_t)0; c < length; c++)
   85fce:	9b01      	ldr	r3, [sp, #4]
   85fd0:	3401      	adds	r4, #1
   85fd2:	42a3      	cmp	r3, r4
   85fd4:	f105 0501 	add.w	r5, r5, #1
   85fd8:	d1ba      	bne.n	85f50 <mw_gl_string+0x34>
}
   85fda:	b003      	add	sp, #12
   85fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ((int16_t)Font24.Width);
   85fe0:	4b58      	ldr	r3, [pc, #352]	; (86144 <mw_gl_string+0x228>)
   85fe2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   85fe6:	3301      	adds	r3, #1
   85fe8:	b299      	uxth	r1, r3
			mw_gl_character(draw_info, x + (int16_t)c * (mw_gl_get_font_width() + 1), y, s[c]);
   85fea:	fb01 8102 	mla	r1, r1, r2, r8
			mw_gl_character(draw_info, x - (int16_t)c * (mw_gl_get_font_width() + 1), y, s[c]);
   85fee:	782b      	ldrb	r3, [r5, #0]
   85ff0:	b209      	sxth	r1, r1
   85ff2:	464a      	mov	r2, r9
   85ff4:	4650      	mov	r0, sl
   85ff6:	f8df b168 	ldr.w	fp, [pc, #360]	; 86160 <mw_gl_string+0x244>
   85ffa:	47d8      	blx	fp
			break;
   85ffc:	e7e7      	b.n	85fce <mw_gl_string+0xb2>
		return ((int16_t)Font20.Width);
   85ffe:	4b52      	ldr	r3, [pc, #328]	; (86148 <mw_gl_string+0x22c>)
   86000:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   86004:	3301      	adds	r3, #1
   86006:	b299      	uxth	r1, r3
   86008:	e7ef      	b.n	85fea <mw_gl_string+0xce>
		return ((int16_t)Font16.Width);
   8600a:	4b50      	ldr	r3, [pc, #320]	; (8614c <mw_gl_string+0x230>)
   8600c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   86010:	1c4b      	adds	r3, r1, #1
   86012:	b299      	uxth	r1, r3
   86014:	e7e9      	b.n	85fea <mw_gl_string+0xce>
		return ((int16_t)Font12.Width);
   86016:	4b4e      	ldr	r3, [pc, #312]	; (86150 <mw_gl_string+0x234>)
   86018:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   8601c:	3101      	adds	r1, #1
   8601e:	b289      	uxth	r1, r1
   86020:	e7e3      	b.n	85fea <mw_gl_string+0xce>
		return ((int16_t)Font9.Width);
   86022:	4b4c      	ldr	r3, [pc, #304]	; (86154 <mw_gl_string+0x238>)
   86024:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   86028:	3101      	adds	r1, #1
   8602a:	b289      	uxth	r1, r1
   8602c:	e7dd      	b.n	85fea <mw_gl_string+0xce>
		return ((int16_t)Font24.Width);
   8602e:	4b45      	ldr	r3, [pc, #276]	; (86144 <mw_gl_string+0x228>)
   86030:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   86034:	3301      	adds	r3, #1
   86036:	b29a      	uxth	r2, r3
			mw_gl_character(draw_info, x, y + (int16_t)c * (mw_gl_get_font_width() + 1), s[c]);
   86038:	fb02 9201 	mla	r2, r2, r1, r9
			mw_gl_character(draw_info, x, y - (int16_t)c * (mw_gl_get_font_width() + 1), s[c]);
   8603c:	782b      	ldrb	r3, [r5, #0]
   8603e:	b212      	sxth	r2, r2
   86040:	4641      	mov	r1, r8
   86042:	4650      	mov	r0, sl
   86044:	f8df b118 	ldr.w	fp, [pc, #280]	; 86160 <mw_gl_string+0x244>
   86048:	47d8      	blx	fp
			break;
   8604a:	e7c0      	b.n	85fce <mw_gl_string+0xb2>
		return ((int16_t)Font20.Width);
   8604c:	4b3e      	ldr	r3, [pc, #248]	; (86148 <mw_gl_string+0x22c>)
   8604e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   86052:	3301      	adds	r3, #1
   86054:	b29a      	uxth	r2, r3
   86056:	e7ef      	b.n	86038 <mw_gl_string+0x11c>
		return ((int16_t)Font16.Width);
   86058:	4b3c      	ldr	r3, [pc, #240]	; (8614c <mw_gl_string+0x230>)
   8605a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   8605e:	1c53      	adds	r3, r2, #1
   86060:	b29a      	uxth	r2, r3
   86062:	e7e9      	b.n	86038 <mw_gl_string+0x11c>
		return ((int16_t)Font12.Width);
   86064:	4b3a      	ldr	r3, [pc, #232]	; (86150 <mw_gl_string+0x234>)
   86066:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   8606a:	3201      	adds	r2, #1
   8606c:	b292      	uxth	r2, r2
   8606e:	e7e3      	b.n	86038 <mw_gl_string+0x11c>
		return ((int16_t)Font9.Width);
   86070:	4b38      	ldr	r3, [pc, #224]	; (86154 <mw_gl_string+0x238>)
   86072:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   86076:	3201      	adds	r2, #1
   86078:	b292      	uxth	r2, r2
   8607a:	e7dd      	b.n	86038 <mw_gl_string+0x11c>
		return ((int16_t)Font24.Width);
   8607c:	4b31      	ldr	r3, [pc, #196]	; (86144 <mw_gl_string+0x228>)
   8607e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   86082:	3301      	adds	r3, #1
   86084:	b299      	uxth	r1, r3
			mw_gl_character(draw_info, x - (int16_t)c * (mw_gl_get_font_width() + 1), y, s[c]);
   86086:	fb01 0112 	mls	r1, r1, r2, r0
   8608a:	e7b0      	b.n	85fee <mw_gl_string+0xd2>
		return ((int16_t)Font20.Width);
   8608c:	4b2e      	ldr	r3, [pc, #184]	; (86148 <mw_gl_string+0x22c>)
   8608e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   86092:	3301      	adds	r3, #1
   86094:	b299      	uxth	r1, r3
   86096:	e7f6      	b.n	86086 <mw_gl_string+0x16a>
		return ((int16_t)Font16.Width);
   86098:	4b2c      	ldr	r3, [pc, #176]	; (8614c <mw_gl_string+0x230>)
   8609a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   8609e:	3101      	adds	r1, #1
   860a0:	b289      	uxth	r1, r1
   860a2:	e7f0      	b.n	86086 <mw_gl_string+0x16a>
		return ((int16_t)Font12.Width);
   860a4:	4b2a      	ldr	r3, [pc, #168]	; (86150 <mw_gl_string+0x234>)
   860a6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   860aa:	3101      	adds	r1, #1
   860ac:	b289      	uxth	r1, r1
   860ae:	e7ea      	b.n	86086 <mw_gl_string+0x16a>
		return ((int16_t)Font9.Width);
   860b0:	4b28      	ldr	r3, [pc, #160]	; (86154 <mw_gl_string+0x238>)
   860b2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   860b6:	3101      	adds	r1, #1
   860b8:	b289      	uxth	r1, r1
   860ba:	e7e4      	b.n	86086 <mw_gl_string+0x16a>
		return ((int16_t)Font24.Width);
   860bc:	4b21      	ldr	r3, [pc, #132]	; (86144 <mw_gl_string+0x228>)
   860be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   860c2:	3301      	adds	r3, #1
   860c4:	b29a      	uxth	r2, r3
			mw_gl_character(draw_info, x, y - (int16_t)c * (mw_gl_get_font_width() + 1), s[c]);
   860c6:	fb02 0211 	mls	r2, r2, r1, r0
   860ca:	e7b7      	b.n	8603c <mw_gl_string+0x120>
		return ((int16_t)Font20.Width);
   860cc:	4b1e      	ldr	r3, [pc, #120]	; (86148 <mw_gl_string+0x22c>)
   860ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   860d2:	3301      	adds	r3, #1
   860d4:	b29a      	uxth	r2, r3
   860d6:	e7f6      	b.n	860c6 <mw_gl_string+0x1aa>
		return ((int16_t)Font16.Width);
   860d8:	4b1c      	ldr	r3, [pc, #112]	; (8614c <mw_gl_string+0x230>)
   860da:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   860de:	3201      	adds	r2, #1
   860e0:	b292      	uxth	r2, r2
   860e2:	e7f0      	b.n	860c6 <mw_gl_string+0x1aa>
		return ((int16_t)Font12.Width);
   860e4:	4b1a      	ldr	r3, [pc, #104]	; (86150 <mw_gl_string+0x234>)
   860e6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   860ea:	3201      	adds	r2, #1
   860ec:	b292      	uxth	r2, r2
   860ee:	e7ea      	b.n	860c6 <mw_gl_string+0x1aa>
		return ((int16_t)Font9.Width);
   860f0:	4b18      	ldr	r3, [pc, #96]	; (86154 <mw_gl_string+0x238>)
   860f2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   860f6:	3201      	adds	r2, #1
   860f8:	b292      	uxth	r2, r2
   860fa:	e7e4      	b.n	860c6 <mw_gl_string+0x1aa>
		MW_ASSERT((bool)false, "Null pointer argument");
   860fc:	4c10      	ldr	r4, [pc, #64]	; (86140 <mw_gl_string+0x224>)
   860fe:	f640 0246 	movw	r2, #2118	; 0x846
   86102:	2000      	movs	r0, #0
   86104:	46a4      	mov	ip, r4
   86106:	4b14      	ldr	r3, [pc, #80]	; (86158 <mw_gl_string+0x23c>)
   86108:	490c      	ldr	r1, [pc, #48]	; (8613c <mw_gl_string+0x220>)
}
   8610a:	b003      	add	sp, #12
   8610c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MW_ASSERT((bool)false, "Null pointer argument");
   86110:	4760      	bx	ip
		title_font_string(draw_info, x, y, s);
   86112:	4c12      	ldr	r4, [pc, #72]	; (8615c <mw_gl_string+0x240>)
   86114:	46a4      	mov	ip, r4
}
   86116:	b003      	add	sp, #12
   86118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		title_font_string(draw_info, x, y, s);
   8611c:	4760      	bx	ip
	switch (gc.font)
   8611e:	2201      	movs	r2, #1
   86120:	e7d1      	b.n	860c6 <mw_gl_string+0x1aa>
   86122:	2201      	movs	r2, #1
   86124:	e788      	b.n	86038 <mw_gl_string+0x11c>
   86126:	2101      	movs	r1, #1
   86128:	e7ad      	b.n	86086 <mw_gl_string+0x16a>
   8612a:	2101      	movs	r1, #1
   8612c:	e75d      	b.n	85fea <mw_gl_string+0xce>
   8612e:	bf00      	nop
   86130:	200715e0 	.word	0x200715e0
   86134:	000a5e79 	.word	0x000a5e79
   86138:	000ab198 	.word	0x000ab198
   8613c:	000ab0c8 	.word	0x000ab0c8
   86140:	00095add 	.word	0x00095add
   86144:	000a8bc8 	.word	0x000a8bc8
   86148:	000a7ce8 	.word	0x000a7ce8
   8614c:	000a7100 	.word	0x000a7100
   86150:	000a6c84 	.word	0x000a6c84
   86154:	000aa688 	.word	0x000aa688
   86158:	000a6618 	.word	0x000a6618
   8615c:	00084161 	.word	0x00084161
   86160:	000855b9 	.word	0x000855b9

00086164 <mw_gl_get_string_width_pixels>:
{
   86164:	b570      	push	{r4, r5, r6, lr}
	if (s == NULL)
   86166:	4604      	mov	r4, r0
   86168:	2800      	cmp	r0, #0
   8616a:	d052      	beq.n	86212 <mw_gl_get_string_width_pixels+0xae>
	if (gc.font == MW_GL_TITLE_FONT)
   8616c:	4b2e      	ldr	r3, [pc, #184]	; (86228 <mw_gl_get_string_width_pixels+0xc4>)
   8616e:	f893 5032 	ldrb.w	r5, [r3, #50]	; 0x32
   86172:	4b2e      	ldr	r3, [pc, #184]	; (8622c <mw_gl_get_string_width_pixels+0xc8>)
   86174:	2d05      	cmp	r5, #5
   86176:	d008      	beq.n	8618a <mw_gl_get_string_width_pixels+0x26>
		width = (int16_t)strlen(s) * (mw_gl_get_font_width() + 1);
   86178:	4798      	blx	r3
   8617a:	b282      	uxth	r2, r0
	switch (gc.font)
   8617c:	2d04      	cmp	r5, #4
   8617e:	d850      	bhi.n	86222 <mw_gl_get_string_width_pixels+0xbe>
   86180:	e8df f005 	tbb	[pc, r5]
   86184:	3e352c23 	.word	0x3e352c23
   86188:	1a          	.byte	0x1a
   86189:	00          	.byte	0x00
   8618a:	4798      	blx	r3
	if (gc.font == MW_GL_TITLE_FONT)
   8618c:	2200      	movs	r2, #0
   8618e:	4606      	mov	r6, r0
			width += (int16_t)mw_title_font_positions[s[i] - ' ' + 1] - (int16_t)mw_title_font_positions[s[i] - ' '];
   86190:	4927      	ldr	r1, [pc, #156]	; (86230 <mw_gl_get_string_width_pixels+0xcc>)
	if (gc.font == MW_GL_TITLE_FONT)
   86192:	4610      	mov	r0, r2
   86194:	e00a      	b.n	861ac <mw_gl_get_string_width_pixels+0x48>
			width += (int16_t)mw_title_font_positions[s[i] - ' ' + 1] - (int16_t)mw_title_font_positions[s[i] - ' '];
   86196:	5ce3      	ldrb	r3, [r4, r3]
   86198:	f1a3 051f 	sub.w	r5, r3, #31
   8619c:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   861a0:	3b20      	subs	r3, #32
   861a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   861a6:	4428      	add	r0, r5
   861a8:	1ac0      	subs	r0, r0, r3
   861aa:	b200      	sxth	r0, r0
   861ac:	b2d3      	uxtb	r3, r2
		for (i = 0U; i < strlen(s); i++)
   861ae:	42b3      	cmp	r3, r6
   861b0:	f102 0201 	add.w	r2, r2, #1
   861b4:	d3ef      	bcc.n	86196 <mw_gl_get_string_width_pixels+0x32>
   861b6:	bd70      	pop	{r4, r5, r6, pc}
		return ((int16_t)Font24.Width);
   861b8:	4b1e      	ldr	r3, [pc, #120]	; (86234 <mw_gl_get_string_width_pixels+0xd0>)
   861ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   861be:	3301      	adds	r3, #1
   861c0:	b298      	uxth	r0, r3
		width = (int16_t)strlen(s) * (mw_gl_get_font_width() + 1);
   861c2:	fb00 f002 	mul.w	r0, r0, r2
   861c6:	b200      	sxth	r0, r0
	}

	return (width);
}
   861c8:	bd70      	pop	{r4, r5, r6, pc}
		return ((int16_t)Font9.Width);
   861ca:	4b1b      	ldr	r3, [pc, #108]	; (86238 <mw_gl_get_string_width_pixels+0xd4>)
   861cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   861d0:	3301      	adds	r3, #1
   861d2:	b298      	uxth	r0, r3
		width = (int16_t)strlen(s) * (mw_gl_get_font_width() + 1);
   861d4:	fb00 f002 	mul.w	r0, r0, r2
   861d8:	b200      	sxth	r0, r0
}
   861da:	bd70      	pop	{r4, r5, r6, pc}
		return ((int16_t)Font12.Width);
   861dc:	4b17      	ldr	r3, [pc, #92]	; (8623c <mw_gl_get_string_width_pixels+0xd8>)
   861de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   861e2:	3301      	adds	r3, #1
   861e4:	b298      	uxth	r0, r3
		width = (int16_t)strlen(s) * (mw_gl_get_font_width() + 1);
   861e6:	fb00 f002 	mul.w	r0, r0, r2
   861ea:	b200      	sxth	r0, r0
}
   861ec:	bd70      	pop	{r4, r5, r6, pc}
		return ((int16_t)Font16.Width);
   861ee:	4b14      	ldr	r3, [pc, #80]	; (86240 <mw_gl_get_string_width_pixels+0xdc>)
   861f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   861f4:	3301      	adds	r3, #1
   861f6:	b298      	uxth	r0, r3
		width = (int16_t)strlen(s) * (mw_gl_get_font_width() + 1);
   861f8:	fb00 f002 	mul.w	r0, r0, r2
   861fc:	b200      	sxth	r0, r0
}
   861fe:	bd70      	pop	{r4, r5, r6, pc}
		return ((int16_t)Font20.Width);
   86200:	4b10      	ldr	r3, [pc, #64]	; (86244 <mw_gl_get_string_width_pixels+0xe0>)
   86202:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   86206:	3301      	adds	r3, #1
   86208:	b298      	uxth	r0, r3
		width = (int16_t)strlen(s) * (mw_gl_get_font_width() + 1);
   8620a:	fb00 f002 	mul.w	r0, r0, r2
   8620e:	b200      	sxth	r0, r0
}
   86210:	bd70      	pop	{r4, r5, r6, pc}
		MW_ASSERT((bool)false, "Null pointer argument");
   86212:	4b0d      	ldr	r3, [pc, #52]	; (86248 <mw_gl_get_string_width_pixels+0xe4>)
   86214:	f640 0274 	movw	r2, #2164	; 0x874
   86218:	490c      	ldr	r1, [pc, #48]	; (8624c <mw_gl_get_string_width_pixels+0xe8>)
   8621a:	4d0d      	ldr	r5, [pc, #52]	; (86250 <mw_gl_get_string_width_pixels+0xec>)
   8621c:	47a8      	blx	r5
   8621e:	4620      	mov	r0, r4
   86220:	bd70      	pop	{r4, r5, r6, pc}
	switch (gc.font)
   86222:	2001      	movs	r0, #1
   86224:	e7cd      	b.n	861c2 <mw_gl_get_string_width_pixels+0x5e>
   86226:	bf00      	nop
   86228:	200715e0 	.word	0x200715e0
   8622c:	000a5e79 	.word	0x000a5e79
   86230:	000aaf58 	.word	0x000aaf58
   86234:	000a8bc8 	.word	0x000a8bc8
   86238:	000aa688 	.word	0x000aa688
   8623c:	000a6c84 	.word	0x000a6c84
   86240:	000a7100 	.word	0x000a7100
   86244:	000a7ce8 	.word	0x000a7ce8
   86248:	000a6618 	.word	0x000a6618
   8624c:	000ab0d8 	.word	0x000ab0d8
   86250:	00095add 	.word	0x00095add

00086254 <mw_gl_poly>:
		}
	}
}

void mw_gl_poly(const mw_gl_draw_info_t *draw_info, uint8_t poly_corners, const int16_t *poly_x, const int16_t *poly_y, int16_t x_offset, int16_t y_offset)
{
   86254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86258:	b099      	sub	sp, #100	; 0x64
   8625a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
   8625e:	940e      	str	r4, [sp, #56]	; 0x38
   86260:	f9bd 408c 	ldrsh.w	r4, [sp, #140]	; 0x8c
   86264:	940d      	str	r4, [sp, #52]	; 0x34
	uint8_t i;
	bool draw_outline = true;

	if (draw_info == NULL || poly_x == NULL || poly_y == NULL)
   86266:	2800      	cmp	r0, #0
   86268:	d069      	beq.n	8633e <mw_gl_poly+0xea>
   8626a:	2a00      	cmp	r2, #0
   8626c:	d067      	beq.n	8633e <mw_gl_poly+0xea>
   8626e:	2b00      	cmp	r3, #0
   86270:	d065      	beq.n	8633e <mw_gl_poly+0xea>
	{
		MW_ASSERT((bool)false, "Null pointer argument");
		return;
	}

	if (gc.fill == MW_GL_FILL && poly_corners > 2U)
   86272:	f8df a344 	ldr.w	sl, [pc, #836]	; 865b8 <mw_gl_poly+0x364>
   86276:	4681      	mov	r9, r0
   86278:	f89a 402f 	ldrb.w	r4, [sl, #47]	; 0x2f
   8627c:	9311      	str	r3, [sp, #68]	; 0x44
   8627e:	2c01      	cmp	r4, #1
   86280:	920b      	str	r2, [sp, #44]	; 0x2c
   86282:	9110      	str	r1, [sp, #64]	; 0x40
   86284:	d066      	beq.n	86354 <mw_gl_poly+0x100>
		}
	}

	if (draw_outline)
	{
		for (i = 0U; i < poly_corners - 1U; i++)
   86286:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86288:	1e5f      	subs	r7, r3, #1
   8628a:	f000 8268 	beq.w	8675e <mw_gl_poly+0x50a>
   8628e:	2100      	movs	r1, #0
   86290:	460c      	mov	r4, r1
   86292:	f8cd 9008 	str.w	r9, [sp, #8]
   86296:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   8629a:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8657c <mw_gl_poly+0x328>
   8629e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
   862a2:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
   862a6:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   862aa:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
	if (gc.line == MW_GL_LINE_NONE)
   862ae:	2b00      	cmp	r3, #0
   862b0:	d035      	beq.n	8631e <mw_gl_poly+0xca>
		{
			mw_gl_line(draw_info, poly_x[i] + x_offset, poly_y[i] + y_offset, poly_x[i + 1U] + x_offset, poly_y[i + 1U] + y_offset);
   862b2:	004b      	lsls	r3, r1, #1
   862b4:	3302      	adds	r3, #2
   862b6:	f83b 0003 	ldrh.w	r0, [fp, r3]
   862ba:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
   862be:	f839 3003 	ldrh.w	r3, [r9, r3]
   862c2:	f839 1011 	ldrh.w	r1, [r9, r1, lsl #1]
   862c6:	4428      	add	r0, r5
   862c8:	b200      	sxth	r0, r0
   862ca:	4433      	add	r3, r6
   862cc:	442a      	add	r2, r5
   862ce:	4431      	add	r1, r6
   862d0:	9000      	str	r0, [sp, #0]
   862d2:	b21b      	sxth	r3, r3
   862d4:	b212      	sxth	r2, r2
   862d6:	b209      	sxth	r1, r1
   862d8:	9802      	ldr	r0, [sp, #8]
   862da:	47c0      	blx	r8
   862dc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
		for (i = 0U; i < poly_corners - 1U; i++)
   862e0:	3401      	adds	r4, #1
   862e2:	b2e4      	uxtb	r4, r4
   862e4:	42bc      	cmp	r4, r7
   862e6:	4621      	mov	r1, r4
   862e8:	d3e1      	bcc.n	862ae <mw_gl_poly+0x5a>
   862ea:	f8dd 9008 	ldr.w	r9, [sp, #8]
   862ee:	0067      	lsls	r7, r4, #1
	if (gc.line == MW_GL_LINE_NONE)
   862f0:	b313      	cbz	r3, 86338 <mw_gl_poly+0xe4>
		}
		mw_gl_line(draw_info, poly_x[i] + x_offset, poly_y[i] + y_offset, poly_x[0] + x_offset, poly_y[0] + y_offset);
   862f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   862f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   862f6:	8814      	ldrh	r4, [r2, #0]
   862f8:	5bc1      	ldrh	r1, [r0, r7]
   862fa:	442c      	add	r4, r5
   862fc:	b224      	sxth	r4, r4
   862fe:	8803      	ldrh	r3, [r0, #0]
   86300:	5bd2      	ldrh	r2, [r2, r7]
   86302:	9422      	str	r4, [sp, #136]	; 0x88
   86304:	4c9d      	ldr	r4, [pc, #628]	; (8657c <mw_gl_poly+0x328>)
   86306:	4648      	mov	r0, r9
   86308:	46a4      	mov	ip, r4
   8630a:	442a      	add	r2, r5
   8630c:	4431      	add	r1, r6
   8630e:	4433      	add	r3, r6
   86310:	b212      	sxth	r2, r2
   86312:	b209      	sxth	r1, r1
   86314:	b21b      	sxth	r3, r3
	}
}
   86316:	b019      	add	sp, #100	; 0x64
   86318:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8631c:	4760      	bx	ip
		for (i = 0U; i < poly_corners - 1U; i++)
   8631e:	3401      	adds	r4, #1
   86320:	b2e4      	uxtb	r4, r4
   86322:	42a7      	cmp	r7, r4
   86324:	d8dc      	bhi.n	862e0 <mw_gl_poly+0x8c>
   86326:	f8dd 9008 	ldr.w	r9, [sp, #8]
   8632a:	0067      	lsls	r7, r4, #1
   8632c:	e7e0      	b.n	862f0 <mw_gl_poly+0x9c>
   8632e:	46d9      	mov	r9, fp
		if (gc.border == MW_GL_BORDER_OFF)
   86330:	f89a 302e 	ldrb.w	r3, [sl, #46]	; 0x2e
   86334:	2b00      	cmp	r3, #0
   86336:	d1a6      	bne.n	86286 <mw_gl_poly+0x32>
}
   86338:	b019      	add	sp, #100	; 0x64
   8633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		MW_ASSERT((bool)false, "Null pointer argument");
   8633e:	4c90      	ldr	r4, [pc, #576]	; (86580 <mw_gl_poly+0x32c>)
   86340:	f640 02c6 	movw	r2, #2246	; 0x8c6
   86344:	2000      	movs	r0, #0
   86346:	46a4      	mov	ip, r4
   86348:	4b8e      	ldr	r3, [pc, #568]	; (86584 <mw_gl_poly+0x330>)
   8634a:	498f      	ldr	r1, [pc, #572]	; (86588 <mw_gl_poly+0x334>)
}
   8634c:	b019      	add	sp, #100	; 0x64
   8634e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MW_ASSERT((bool)false, "Null pointer argument");
   86352:	4760      	bx	ip
	if (gc.fill == MW_GL_FILL && poly_corners > 2U)
   86354:	2902      	cmp	r1, #2
   86356:	d996      	bls.n	86286 <mw_gl_poly+0x32>
	MW_ASSERT(draw_info, "Null pointer argument");
   86358:	4620      	mov	r0, r4
   8635a:	4d89      	ldr	r5, [pc, #548]	; (86580 <mw_gl_poly+0x32c>)
   8635c:	4b89      	ldr	r3, [pc, #548]	; (86584 <mw_gl_poly+0x330>)
   8635e:	f240 1223 	movw	r2, #291	; 0x123
   86362:	498a      	ldr	r1, [pc, #552]	; (8658c <mw_gl_poly+0x338>)
   86364:	47a8      	blx	r5
	MW_ASSERT(poly_x, "Null pointer argument");
   86366:	4620      	mov	r0, r4
   86368:	4b86      	ldr	r3, [pc, #536]	; (86584 <mw_gl_poly+0x330>)
   8636a:	f44f 7292 	mov.w	r2, #292	; 0x124
   8636e:	4987      	ldr	r1, [pc, #540]	; (8658c <mw_gl_poly+0x338>)
   86370:	47a8      	blx	r5
		filled_poly(draw_info, poly_corners, poly_x, poly_y, x_offset, y_offset);
   86372:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	MW_ASSERT(poly_y, "Null pointer argument");
   86376:	4620      	mov	r0, r4
		filled_poly(draw_info, poly_corners, poly_x, poly_y, x_offset, y_offset);
   86378:	461d      	mov	r5, r3
	MW_ASSERT(poly_y, "Null pointer argument");
   8637a:	4e81      	ldr	r6, [pc, #516]	; (86580 <mw_gl_poly+0x32c>)
		filled_poly(draw_info, poly_corners, poly_x, poly_y, x_offset, y_offset);
   8637c:	930a      	str	r3, [sp, #40]	; 0x28
	MW_ASSERT(poly_y, "Null pointer argument");
   8637e:	f240 1225 	movw	r2, #293	; 0x125
   86382:	4b80      	ldr	r3, [pc, #512]	; (86584 <mw_gl_poly+0x330>)
   86384:	4981      	ldr	r1, [pc, #516]	; (8658c <mw_gl_poly+0x338>)
   86386:	47b0      	blx	r6
	MW_ASSERT(poly_corners <= MW_GL_MAX_POLY_CORNERS, "Too many points in polygon shape");
   86388:	2d05      	cmp	r5, #5
   8638a:	bf8c      	ite	hi
   8638c:	2000      	movhi	r0, #0
   8638e:	2001      	movls	r0, #1
   86390:	4b7f      	ldr	r3, [pc, #508]	; (86590 <mw_gl_poly+0x33c>)
   86392:	f44f 7293 	mov.w	r2, #294	; 0x126
   86396:	497d      	ldr	r1, [pc, #500]	; (8658c <mw_gl_poly+0x338>)
   86398:	47b0      	blx	r6
   8639a:	9f11      	ldr	r7, [sp, #68]	; 0x44
	MW_ASSERT(poly_corners >= 3U, "Too few points in polygon shape");
   8639c:	4620      	mov	r0, r4
   8639e:	1ebb      	subs	r3, r7, #2
   863a0:	461e      	mov	r6, r3
   863a2:	9315      	str	r3, [sp, #84]	; 0x54
   863a4:	f240 1227 	movw	r2, #295	; 0x127
   863a8:	4b7a      	ldr	r3, [pc, #488]	; (86594 <mw_gl_poly+0x340>)
   863aa:	4978      	ldr	r1, [pc, #480]	; (8658c <mw_gl_poly+0x338>)
   863ac:	4c74      	ldr	r4, [pc, #464]	; (86580 <mw_gl_poly+0x32c>)
   863ae:	47a0      	blx	r4
   863b0:	1e6a      	subs	r2, r5, #1
   863b2:	b292      	uxth	r2, r2
   863b4:	4614      	mov	r4, r2
	int16_t y_min = INT16_MAX;
   863b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
   863ba:	9214      	str	r2, [sp, #80]	; 0x50
	int16_t y_max = INT16_MIN;
   863bc:	4a76      	ldr	r2, [pc, #472]	; (86598 <mw_gl_poly+0x344>)
	int16_t y_min = INT16_MAX;
   863be:	4619      	mov	r1, r3
	int16_t y_max = INT16_MIN;
   863c0:	4610      	mov	r0, r2
   863c2:	eb07 0244 	add.w	r2, r7, r4, lsl #1
	MW_ASSERT(poly_corners >= 3U, "Too few points in polygon shape");
   863c6:	4633      	mov	r3, r6
   863c8:	4614      	mov	r4, r2
   863ca:	9213      	str	r2, [sp, #76]	; 0x4c
		if (poly_y[i]<y_min)
   863cc:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
   863d0:	4291      	cmp	r1, r2
   863d2:	bfa8      	it	ge
   863d4:	4611      	movge	r1, r2
   863d6:	4290      	cmp	r0, r2
   863d8:	bfb8      	it	lt
   863da:	4610      	movlt	r0, r2
	for (i = 0; i < poly_corners; i++)
   863dc:	429c      	cmp	r4, r3
   863de:	d1f5      	bne.n	863cc <mw_gl_poly+0x178>
   863e0:	460a      	mov	r2, r1
	for (y = y_min; y <= y_max; y++)
   863e2:	4282      	cmp	r2, r0
   863e4:	910f      	str	r1, [sp, #60]	; 0x3c
   863e6:	9012      	str	r0, [sp, #72]	; 0x48
   863e8:	460b      	mov	r3, r1
   863ea:	dca1      	bgt.n	86330 <mw_gl_poly+0xdc>
   863ec:	46cb      	mov	fp, r9
   863ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   863f0:	189c      	adds	r4, r3, r2
   863f2:	b2a3      	uxth	r3, r4
   863f4:	9308      	str	r3, [sp, #32]
		if (y + y_offset > MW_GL_MAX_Y)
   863f6:	4b69      	ldr	r3, [pc, #420]	; (8659c <mw_gl_poly+0x348>)
   863f8:	4798      	blx	r3
   863fa:	42a0      	cmp	r0, r4
   863fc:	dd97      	ble.n	8632e <mw_gl_poly+0xda>
   863fe:	2400      	movs	r4, #0
   86400:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86402:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
		line_node_count = 0;
   86406:	9404      	str	r4, [sp, #16]
   86408:	4626      	mov	r6, r4
		j = poly_corners - 1U;
   8640a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8640c:	f9b2 7000 	ldrsh.w	r7, [r2]
				node_x[line_node_count++] = poly_x[i] + (int16_t)temp_float;
   86410:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   86414:	f8cd b018 	str.w	fp, [sp, #24]
   86418:	e044      	b.n	864a4 <mw_gl_poly+0x250>
			if ((poly_y[i] < y && poly_y[j] >= y) || (poly_y[j] < y && poly_y[i] >= y))
   8641a:	45b9      	cmp	r9, r7
   8641c:	dc3b      	bgt.n	86496 <mw_gl_poly+0x242>
   8641e:	9205      	str	r2, [sp, #20]
				temp_float = ((float)y - (float)poly_y[i]) / ((float)poly_y[j] - (float)poly_y[i]);
   86420:	4b5f      	ldr	r3, [pc, #380]	; (865a0 <mw_gl_poly+0x34c>)
   86422:	4628      	mov	r0, r5
   86424:	4798      	blx	r3
   86426:	4683      	mov	fp, r0
   86428:	4b5d      	ldr	r3, [pc, #372]	; (865a0 <mw_gl_poly+0x34c>)
   8642a:	4648      	mov	r0, r9
   8642c:	4798      	blx	r3
   8642e:	4659      	mov	r1, fp
   86430:	4b5c      	ldr	r3, [pc, #368]	; (865a4 <mw_gl_poly+0x350>)
   86432:	4798      	blx	r3
   86434:	4b5a      	ldr	r3, [pc, #360]	; (865a0 <mw_gl_poly+0x34c>)
   86436:	9002      	str	r0, [sp, #8]
   86438:	4638      	mov	r0, r7
   8643a:	4798      	blx	r3
   8643c:	4659      	mov	r1, fp
   8643e:	4b59      	ldr	r3, [pc, #356]	; (865a4 <mw_gl_poly+0x350>)
   86440:	4798      	blx	r3
   86442:	9b02      	ldr	r3, [sp, #8]
   86444:	4601      	mov	r1, r0
   86446:	4618      	mov	r0, r3
   86448:	4b57      	ldr	r3, [pc, #348]	; (865a8 <mw_gl_poly+0x354>)
   8644a:	4798      	blx	r3
				temp_float *= ((float)poly_x[j] - (float)poly_x[i]);
   8644c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8644e:	9a05      	ldr	r2, [sp, #20]
				node_x[line_node_count++] = poly_x[i] + (int16_t)temp_float;
   86450:	9b04      	ldr	r3, [sp, #16]
				temp_float = ((float)y - (float)poly_y[i]) / ((float)poly_y[j] - (float)poly_y[i]);
   86452:	9003      	str	r0, [sp, #12]
				temp_float *= ((float)poly_x[j] - (float)poly_x[i]);
   86454:	5e88      	ldrsh	r0, [r1, r2]
   86456:	4a52      	ldr	r2, [pc, #328]	; (865a0 <mw_gl_poly+0x34c>)
				node_x[line_node_count++] = poly_x[i] + (int16_t)temp_float;
   86458:	f103 0b01 	add.w	fp, r3, #1
				temp_float *= ((float)poly_x[j] - (float)poly_x[i]);
   8645c:	f931 7014 	ldrsh.w	r7, [r1, r4, lsl #1]
   86460:	4790      	blx	r2
   86462:	4a4f      	ldr	r2, [pc, #316]	; (865a0 <mw_gl_poly+0x34c>)
   86464:	9002      	str	r0, [sp, #8]
   86466:	4638      	mov	r0, r7
   86468:	4790      	blx	r2
   8646a:	9a02      	ldr	r2, [sp, #8]
   8646c:	4601      	mov	r1, r0
   8646e:	4610      	mov	r0, r2
   86470:	4a4c      	ldr	r2, [pc, #304]	; (865a4 <mw_gl_poly+0x350>)
   86472:	4790      	blx	r2
   86474:	9b03      	ldr	r3, [sp, #12]
   86476:	4a4d      	ldr	r2, [pc, #308]	; (865ac <mw_gl_poly+0x358>)
   86478:	4619      	mov	r1, r3
   8647a:	4790      	blx	r2
				node_x[line_node_count++] = poly_x[i] + (int16_t)temp_float;
   8647c:	4a4c      	ldr	r2, [pc, #304]	; (865b0 <mw_gl_poly+0x35c>)
   8647e:	4790      	blx	r2
   86480:	9b04      	ldr	r3, [sp, #16]
   86482:	aa18      	add	r2, sp, #96	; 0x60
   86484:	fa1f fb8b 	uxth.w	fp, fp
   86488:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   8648c:	4438      	add	r0, r7
   8648e:	f8cd b010 	str.w	fp, [sp, #16]
   86492:	f823 0c08 	strh.w	r0, [r3, #-8]
   86496:	3401      	adds	r4, #1
		for (i = 0U; i  <poly_corners; i++)
   86498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8649a:	4633      	mov	r3, r6
   8649c:	b2a6      	uxth	r6, r4
   8649e:	42b2      	cmp	r2, r6
			if ((poly_y[i] < y && poly_y[j] >= y) || (poly_y[j] < y && poly_y[i] >= y))
   864a0:	462f      	mov	r7, r5
		for (i = 0U; i  <poly_corners; i++)
   864a2:	d909      	bls.n	864b8 <mw_gl_poly+0x264>
			if ((poly_y[i] < y && poly_y[j] >= y) || (poly_y[j] < y && poly_y[i] >= y))
   864a4:	f938 5f02 	ldrsh.w	r5, [r8, #2]!
   864a8:	005a      	lsls	r2, r3, #1
   864aa:	454d      	cmp	r5, r9
   864ac:	dbb5      	blt.n	8641a <mw_gl_poly+0x1c6>
   864ae:	45b9      	cmp	r9, r7
   864b0:	ea4f 0243 	mov.w	r2, r3, lsl #1
   864b4:	ddef      	ble.n	86496 <mw_gl_poly+0x242>
   864b6:	e7b2      	b.n	8641e <mw_gl_poly+0x1ca>
		if (line_node_count > 1U)
   864b8:	9b04      	ldr	r3, [sp, #16]
   864ba:	f8dd b018 	ldr.w	fp, [sp, #24]
   864be:	2b01      	cmp	r3, #1
   864c0:	d918      	bls.n	864f4 <mw_gl_poly+0x2a0>
   864c2:	1e5e      	subs	r6, r3, #1
   864c4:	2300      	movs	r3, #0
				if (node_x[i] > node_x[i + 1U])
   864c6:	a918      	add	r1, sp, #96	; 0x60
   864c8:	1c5a      	adds	r2, r3, #1
			while (i < line_node_count - 1U)
   864ca:	42b3      	cmp	r3, r6
				if (node_x[i] > node_x[i + 1U])
   864cc:	eb01 0043 	add.w	r0, r1, r3, lsl #1
   864d0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
			while (i < line_node_count - 1U)
   864d4:	d211      	bcs.n	864fa <mw_gl_poly+0x2a6>
				if (node_x[i] > node_x[i + 1U])
   864d6:	f930 4c08 	ldrsh.w	r4, [r0, #-8]
   864da:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
   864de:	42ac      	cmp	r4, r5
   864e0:	dd06      	ble.n	864f0 <mw_gl_poly+0x29c>
					node_x[i] = node_x[i + 1U];
   864e2:	f820 5c08 	strh.w	r5, [r0, #-8]
						i--;
   864e6:	1e5a      	subs	r2, r3, #1
					node_x[i + 1U] = swap;
   864e8:	f821 4c08 	strh.w	r4, [r1, #-8]
					if (i > 0U)
   864ec:	2b00      	cmp	r3, #0
   864ee:	d0ea      	beq.n	864c6 <mw_gl_poly+0x272>
					i++;
   864f0:	b293      	uxth	r3, r2
   864f2:	e7e8      	b.n	864c6 <mw_gl_poly+0x272>
		for (i = 0; i < line_node_count; i += 2U)
   864f4:	2b00      	cmp	r3, #0
   864f6:	f000 80cb 	beq.w	86690 <mw_gl_poly+0x43c>
		if (line_node_count > 1U)
   864fa:	2300      	movs	r3, #0
   864fc:	9303      	str	r3, [sp, #12]
		if ((gc.pattern[pattern_y] & mask) == mask)
   864fe:	9b08      	ldr	r3, [sp, #32]
   86500:	f003 030f 	and.w	r3, r3, #15
   86504:	3304      	adds	r3, #4
   86506:	9302      	str	r3, [sp, #8]
   86508:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   8650c:	9309      	str	r3, [sp, #36]	; 0x24
			node_x[i] += x_offset;
   8650e:	9a03      	ldr	r2, [sp, #12]
   86510:	ab18      	add	r3, sp, #96	; 0x60
   86512:	0057      	lsls	r7, r2, #1
   86514:	eb03 0807 	add.w	r8, r3, r7
   86518:	f838 3c08 	ldrh.w	r3, [r8, #-8]
   8651c:	9909      	ldr	r1, [sp, #36]	; 0x24
			node_x[i + 1U] += x_offset;
   8651e:	1c56      	adds	r6, r2, #1
			node_x[i] += x_offset;
   86520:	440b      	add	r3, r1
   86522:	f828 3c08 	strh.w	r3, [r8, #-8]
			node_x[i + 1U] += x_offset;
   86526:	0076      	lsls	r6, r6, #1
   86528:	ab18      	add	r3, sp, #96	; 0x60
   8652a:	eb03 0906 	add.w	r9, r3, r6
   8652e:	f839 5c08 	ldrh.w	r5, [r9, #-8]
			if (node_x[i] > MW_GL_MAX_X)
   86532:	4b20      	ldr	r3, [pc, #128]	; (865b4 <mw_gl_poly+0x360>)
			node_x[i + 1U] += x_offset;
   86534:	440d      	add	r5, r1
   86536:	b22d      	sxth	r5, r5
   86538:	f829 5c08 	strh.w	r5, [r9, #-8]
			if (node_x[i] > MW_GL_MAX_X)
   8653c:	4798      	blx	r3
   8653e:	f938 4c08 	ldrsh.w	r4, [r8, #-8]
   86542:	42a0      	cmp	r0, r4
   86544:	f340 80a4 	ble.w	86690 <mw_gl_poly+0x43c>
			if (node_x[i + 1U] > 0)
   86548:	2d00      	cmp	r5, #0
   8654a:	f340 8099 	ble.w	86680 <mw_gl_poly+0x42c>
				if (node_x[i] < 0)
   8654e:	2c00      	cmp	r4, #0
   86550:	f2c0 80fe 	blt.w	86750 <mw_gl_poly+0x4fc>
				if (node_x[i + 1U] > MW_GL_MAX_X)
   86554:	4b17      	ldr	r3, [pc, #92]	; (865b4 <mw_gl_poly+0x360>)
   86556:	4798      	blx	r3
   86558:	42a8      	cmp	r0, r5
   8655a:	f340 80ed 	ble.w	86738 <mw_gl_poly+0x4e4>
				if (gc.pattern_set)
   8655e:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
   86562:	2b00      	cmp	r3, #0
   86564:	d07e      	beq.n	86664 <mw_gl_poly+0x410>
					for (x = 0; x <= node_x[i + 1U] - node_x[i] + 1; x++)
   86566:	1b2d      	subs	r5, r5, r4
   86568:	f115 0901 	adds.w	r9, r5, #1
   8656c:	f100 8088 	bmi.w	86680 <mw_gl_poly+0x42c>
   86570:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
   86574:	2500      	movs	r5, #0
   86576:	b2a4      	uxth	r4, r4
   86578:	9205      	str	r2, [sp, #20]
   8657a:	e038      	b.n	865ee <mw_gl_poly+0x39a>
   8657c:	000848b5 	.word	0x000848b5
   86580:	00095add 	.word	0x00095add
   86584:	000a6618 	.word	0x000a6618
   86588:	000ab0f8 	.word	0x000ab0f8
   8658c:	000ab034 	.word	0x000ab034
   86590:	000ab144 	.word	0x000ab144
   86594:	000ab168 	.word	0x000ab168
   86598:	ffff8000 	.word	0xffff8000
   8659c:	00086e31 	.word	0x00086e31
   865a0:	000a4ae5 	.word	0x000a4ae5
   865a4:	000a4979 	.word	0x000a4979
   865a8:	000a4cf5 	.word	0x000a4cf5
   865ac:	000a4b8d 	.word	0x000a4b8d
   865b0:	000a4f19 	.word	0x000a4f19
   865b4:	00086e2d 	.word	0x00086e2d
   865b8:	200715e0 	.word	0x200715e0
		mask = 0x8000U >> ((uint16_t)x & 0x0FU);
   865bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		if ((gc.pattern[pattern_y] & mask) == mask)
   865c0:	9a02      	ldr	r2, [sp, #8]
		mask = 0x8000U >> ((uint16_t)x & 0x0FU);
   865c2:	f004 010f 	and.w	r1, r4, #15
		if ((gc.pattern[pattern_y] & mask) == mask)
   865c6:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
		mask = 0x8000U >> ((uint16_t)x & 0x0FU);
   865ca:	40cb      	lsrs	r3, r1
		if ((gc.pattern[pattern_y] & mask) == mask)
   865cc:	88d2      	ldrh	r2, [r2, #6]
		mask = 0x8000U >> ((uint16_t)x & 0x0FU);
   865ce:	b29b      	uxth	r3, r3
		if ((gc.pattern[pattern_y] & mask) == mask)
   865d0:	4393      	bics	r3, r2
   865d2:	d06d      	beq.n	866b0 <mw_gl_poly+0x45c>
	if (gc.bg_transparent == MW_GL_BG_NOT_TRANSPARENT)
   865d4:	f89a 8031 	ldrb.w	r8, [sl, #49]	; 0x31
   865d8:	f1b8 0f01 	cmp.w	r8, #1
   865dc:	d06b      	beq.n	866b6 <mw_gl_poly+0x462>
   865de:	3501      	adds	r5, #1
   865e0:	b22d      	sxth	r5, r5
   865e2:	3401      	adds	r4, #1
					for (x = 0; x <= node_x[i + 1U] - node_x[i] + 1; x++)
   865e4:	454d      	cmp	r5, r9
   865e6:	b2a4      	uxth	r4, r4
   865e8:	dc4a      	bgt.n	86680 <mw_gl_poly+0x42c>
   865ea:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
						mw_gl_solid_fill_pixel(draw_info, x + node_x[i], y + y_offset);
   865ee:	b226      	sxth	r6, r4
	if (gc.pattern_set)
   865f0:	2b00      	cmp	r3, #0
   865f2:	d1e3      	bne.n	865bc <mw_gl_poly+0x368>
		pixel(draw_info, x, y, gc.solid_fill_colour);
   865f4:	f8da 3008 	ldr.w	r3, [sl, #8]
   865f8:	9307      	str	r3, [sp, #28]
	int16_t root_width = MW_ROOT_WIDTH;
   865fa:	4b5c      	ldr	r3, [pc, #368]	; (8676c <mw_gl_poly+0x518>)
   865fc:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   865fe:	4b5c      	ldr	r3, [pc, #368]	; (86770 <mw_gl_poly+0x51c>)
	int16_t root_width = MW_ROOT_WIDTH;
   86600:	9006      	str	r0, [sp, #24]
	int16_t root_height = MW_ROOT_HEIGHT;
   86602:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   86604:	4f5b      	ldr	r7, [pc, #364]	; (86774 <mw_gl_poly+0x520>)
   86606:	4b5c      	ldr	r3, [pc, #368]	; (86778 <mw_gl_poly+0x524>)
   86608:	2285      	movs	r2, #133	; 0x85
	int16_t root_height = MW_ROOT_HEIGHT;
   8660a:	4680      	mov	r8, r0
	MW_ASSERT(draw_info, "Null pointer argument");
   8660c:	495b      	ldr	r1, [pc, #364]	; (8677c <mw_gl_poly+0x528>)
   8660e:	2001      	movs	r0, #1
   86610:	47b8      	blx	r7
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   86612:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
   86616:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
   8661a:	4413      	add	r3, r2
   8661c:	429e      	cmp	r6, r3
   8661e:	dade      	bge.n	865de <mw_gl_poly+0x38a>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   86620:	f9bb 1006 	ldrsh.w	r1, [fp, #6]
   86624:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
   86628:	9f05      	ldr	r7, [sp, #20]
   8662a:	440b      	add	r3, r1
   8662c:	429f      	cmp	r7, r3
   8662e:	dad6      	bge.n	865de <mw_gl_poly+0x38a>
	if (client_x < draw_info->clip_rect.x)
   86630:	4296      	cmp	r6, r2
   86632:	dbd4      	blt.n	865de <mw_gl_poly+0x38a>
	if (client_y < draw_info->clip_rect.y)
   86634:	42b9      	cmp	r1, r7
   86636:	dcd2      	bgt.n	865de <mw_gl_poly+0x38a>
	display_x = client_x + draw_info->origin_x;
   86638:	f8bb 0000 	ldrh.w	r0, [fp]
   8663c:	4420      	add	r0, r4
   8663e:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   86640:	2800      	cmp	r0, #0
   86642:	dbcc      	blt.n	865de <mw_gl_poly+0x38a>
   86644:	9b06      	ldr	r3, [sp, #24]
   86646:	4283      	cmp	r3, r0
   86648:	ddc9      	ble.n	865de <mw_gl_poly+0x38a>
	display_y = client_y + draw_info->origin_y;
   8664a:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   8664e:	9b08      	ldr	r3, [sp, #32]
   86650:	4419      	add	r1, r3
   86652:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   86654:	2900      	cmp	r1, #0
   86656:	dbc2      	blt.n	865de <mw_gl_poly+0x38a>
   86658:	4588      	cmp	r8, r1
   8665a:	ddc0      	ble.n	865de <mw_gl_poly+0x38a>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   8665c:	9a07      	ldr	r2, [sp, #28]
   8665e:	4b48      	ldr	r3, [pc, #288]	; (86780 <mw_gl_poly+0x52c>)
   86660:	4798      	blx	r3
   86662:	e7bc      	b.n	865de <mw_gl_poly+0x38a>
					filled_rectangle(draw_info, node_x[i], y + y_offset, node_x[i + 1U] - node_x[i] + 1, 1 , gc.solid_fill_colour);
   86664:	2601      	movs	r6, #1
   86666:	f8da 2008 	ldr.w	r2, [sl, #8]
   8666a:	19ab      	adds	r3, r5, r6
   8666c:	1b1b      	subs	r3, r3, r4
   8666e:	4621      	mov	r1, r4
   86670:	9201      	str	r2, [sp, #4]
   86672:	b21b      	sxth	r3, r3
   86674:	9600      	str	r6, [sp, #0]
   86676:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
   8667a:	4658      	mov	r0, fp
   8667c:	4c41      	ldr	r4, [pc, #260]	; (86784 <mw_gl_poly+0x530>)
   8667e:	47a0      	blx	r4
		for (i = 0; i < line_node_count; i += 2U)
   86680:	9b03      	ldr	r3, [sp, #12]
   86682:	9a04      	ldr	r2, [sp, #16]
   86684:	3302      	adds	r3, #2
   86686:	b29b      	uxth	r3, r3
   86688:	4293      	cmp	r3, r2
   8668a:	9303      	str	r3, [sp, #12]
   8668c:	f4ff af3f 	bcc.w	8650e <mw_gl_poly+0x2ba>
   86690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86692:	3301      	adds	r3, #1
   86694:	b21b      	sxth	r3, r3
   86696:	461a      	mov	r2, r3
   86698:	930f      	str	r3, [sp, #60]	; 0x3c
   8669a:	9b08      	ldr	r3, [sp, #32]
   8669c:	3301      	adds	r3, #1
   8669e:	b29b      	uxth	r3, r3
   866a0:	9308      	str	r3, [sp, #32]
	for (y = y_min; y <= y_max; y++)
   866a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   866a4:	4293      	cmp	r3, r2
   866a6:	f6ff ae42 	blt.w	8632e <mw_gl_poly+0xda>
   866aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   866ac:	18d4      	adds	r4, r2, r3
   866ae:	e6a2      	b.n	863f6 <mw_gl_poly+0x1a2>
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   866b0:	f8da 3000 	ldr.w	r3, [sl]
   866b4:	e7a0      	b.n	865f8 <mw_gl_poly+0x3a4>
		pixel(draw_info, client_x, client_y, gc.bg_colour);
   866b6:	f8da 3004 	ldr.w	r3, [sl, #4]
	MW_ASSERT(draw_info, "Null pointer argument");
   866ba:	4f2e      	ldr	r7, [pc, #184]	; (86774 <mw_gl_poly+0x520>)
		pixel(draw_info, client_x, client_y, gc.bg_colour);
   866bc:	930c      	str	r3, [sp, #48]	; 0x30
	int16_t root_width = MW_ROOT_WIDTH;
   866be:	4b2b      	ldr	r3, [pc, #172]	; (8676c <mw_gl_poly+0x518>)
   866c0:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   866c2:	4b2b      	ldr	r3, [pc, #172]	; (86770 <mw_gl_poly+0x51c>)
	int16_t root_width = MW_ROOT_WIDTH;
   866c4:	9006      	str	r0, [sp, #24]
	int16_t root_height = MW_ROOT_HEIGHT;
   866c6:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   866c8:	4b2b      	ldr	r3, [pc, #172]	; (86778 <mw_gl_poly+0x524>)
	int16_t root_height = MW_ROOT_HEIGHT;
   866ca:	9007      	str	r0, [sp, #28]
	MW_ASSERT(draw_info, "Null pointer argument");
   866cc:	2285      	movs	r2, #133	; 0x85
   866ce:	4640      	mov	r0, r8
   866d0:	492a      	ldr	r1, [pc, #168]	; (8677c <mw_gl_poly+0x528>)
   866d2:	47b8      	blx	r7
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   866d4:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
   866d8:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
   866dc:	4413      	add	r3, r2
   866de:	429e      	cmp	r6, r3
   866e0:	f6bf af7d 	bge.w	865de <mw_gl_poly+0x38a>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   866e4:	f9bb 1006 	ldrsh.w	r1, [fp, #6]
   866e8:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
   866ec:	9805      	ldr	r0, [sp, #20]
   866ee:	440b      	add	r3, r1
   866f0:	4298      	cmp	r0, r3
   866f2:	f6bf af74 	bge.w	865de <mw_gl_poly+0x38a>
	if (client_x < draw_info->clip_rect.x)
   866f6:	4296      	cmp	r6, r2
   866f8:	f6ff af71 	blt.w	865de <mw_gl_poly+0x38a>
	if (client_y < draw_info->clip_rect.y)
   866fc:	4281      	cmp	r1, r0
   866fe:	f73f af6e 	bgt.w	865de <mw_gl_poly+0x38a>
	display_x = client_x + draw_info->origin_x;
   86702:	f8bb 0000 	ldrh.w	r0, [fp]
   86706:	4420      	add	r0, r4
   86708:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   8670a:	2800      	cmp	r0, #0
   8670c:	f6ff af67 	blt.w	865de <mw_gl_poly+0x38a>
   86710:	9b06      	ldr	r3, [sp, #24]
   86712:	4283      	cmp	r3, r0
   86714:	f77f af63 	ble.w	865de <mw_gl_poly+0x38a>
	display_y = client_y + draw_info->origin_y;
   86718:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   8671c:	9b08      	ldr	r3, [sp, #32]
   8671e:	4419      	add	r1, r3
   86720:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   86722:	2900      	cmp	r1, #0
   86724:	f6ff af5b 	blt.w	865de <mw_gl_poly+0x38a>
   86728:	9b07      	ldr	r3, [sp, #28]
   8672a:	428b      	cmp	r3, r1
   8672c:	f77f af57 	ble.w	865de <mw_gl_poly+0x38a>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   86730:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86732:	4b13      	ldr	r3, [pc, #76]	; (86780 <mw_gl_poly+0x52c>)
   86734:	4798      	blx	r3
   86736:	e752      	b.n	865de <mw_gl_poly+0x38a>
					node_x[i + 1U] = MW_GL_MAX_Y;
   86738:	4b0d      	ldr	r3, [pc, #52]	; (86770 <mw_gl_poly+0x51c>)
   8673a:	4798      	blx	r3
   8673c:	ab18      	add	r3, sp, #96	; 0x60
   8673e:	3801      	subs	r0, #1
   86740:	b205      	sxth	r5, r0
   86742:	441e      	add	r6, r3
   86744:	f826 5c08 	strh.w	r5, [r6, #-8]
   86748:	441f      	add	r7, r3
   8674a:	f937 4c08 	ldrsh.w	r4, [r7, #-8]
   8674e:	e706      	b.n	8655e <mw_gl_poly+0x30a>
					node_x[i] = 0;
   86750:	2300      	movs	r3, #0
   86752:	f828 3c08 	strh.w	r3, [r8, #-8]
   86756:	461c      	mov	r4, r3
   86758:	f939 5c08 	ldrsh.w	r5, [r9, #-8]
   8675c:	e6fa      	b.n	86554 <mw_gl_poly+0x300>
   8675e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
   86762:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
   86766:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   8676a:	e5c1      	b.n	862f0 <mw_gl_poly+0x9c>
   8676c:	00086e2d 	.word	0x00086e2d
   86770:	00086e31 	.word	0x00086e31
   86774:	00095add 	.word	0x00095add
   86778:	000a6618 	.word	0x000a6618
   8677c:	000ab018 	.word	0x000ab018
   86780:	00086e39 	.word	0x00086e39
   86784:	00084015 	.word	0x00084015

00086788 <mw_gl_rotate_shape>:

void mw_gl_rotate_shape(uint8_t poly_corners, int16_t *poly_x, int16_t *poly_y, int16_t angle_degrees)
{
   86788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8678c:	b083      	sub	sp, #12
	uint8_t i;
	int16_t x;
	float angle_rads;

	if (poly_x == NULL || poly_y == NULL)
   8678e:	2900      	cmp	r1, #0
   86790:	d061      	beq.n	86856 <mw_gl_rotate_shape+0xce>
   86792:	2a00      	cmp	r2, #0
   86794:	d05f      	beq.n	86856 <mw_gl_rotate_shape+0xce>
   86796:	4604      	mov	r4, r0
	{
		MW_ASSERT((bool)false, "Null pointer argument");
		return;
	}

	angle_rads = (float)angle_degrees / DEGREES_IN_RAD;
   86798:	4618      	mov	r0, r3
   8679a:	4b37      	ldr	r3, [pc, #220]	; (86878 <mw_gl_rotate_shape+0xf0>)
   8679c:	4615      	mov	r5, r2
   8679e:	468a      	mov	sl, r1
   867a0:	4798      	blx	r3
   867a2:	4b36      	ldr	r3, [pc, #216]	; (8687c <mw_gl_rotate_shape+0xf4>)
   867a4:	4798      	blx	r3
   867a6:	a332      	add	r3, pc, #200	; (adr r3, 86870 <mw_gl_rotate_shape+0xe8>)
   867a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   867ac:	4f34      	ldr	r7, [pc, #208]	; (86880 <mw_gl_rotate_shape+0xf8>)
   867ae:	47b8      	blx	r7
   867b0:	4b34      	ldr	r3, [pc, #208]	; (86884 <mw_gl_rotate_shape+0xfc>)
   867b2:	4798      	blx	r3
   867b4:	4607      	mov	r7, r0
	for (i = 0U; i < poly_corners; i++)
   867b6:	2c00      	cmp	r4, #0
   867b8:	d04a      	beq.n	86850 <mw_gl_rotate_shape+0xc8>
   867ba:	4b33      	ldr	r3, [pc, #204]	; (86888 <mw_gl_rotate_shape+0x100>)
   867bc:	4798      	blx	r3
   867be:	4b33      	ldr	r3, [pc, #204]	; (8688c <mw_gl_rotate_shape+0x104>)
   867c0:	4681      	mov	r9, r0
   867c2:	4638      	mov	r0, r7
   867c4:	4798      	blx	r3
   867c6:	4683      	mov	fp, r0
   867c8:	1e60      	subs	r0, r4, #1
   867ca:	b2c0      	uxtb	r0, r0
   867cc:	eb0a 0340 	add.w	r3, sl, r0, lsl #1
   867d0:	f1aa 0a02 	sub.w	sl, sl, #2
   867d4:	9301      	str	r3, [sp, #4]
   867d6:	4653      	mov	r3, sl
   867d8:	46ca      	mov	sl, r9
   867da:	4c2d      	ldr	r4, [pc, #180]	; (86890 <mw_gl_rotate_shape+0x108>)
   867dc:	3d02      	subs	r5, #2
	{
		x = (int16_t)floor(((float)poly_x[i] * cosf(angle_rads) - (float)poly_y[i] * sinf(angle_rads)));
   867de:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
   867e2:	9300      	str	r3, [sp, #0]
   867e4:	4b24      	ldr	r3, [pc, #144]	; (86878 <mw_gl_rotate_shape+0xf0>)
   867e6:	4798      	blx	r3
   867e8:	4b23      	ldr	r3, [pc, #140]	; (86878 <mw_gl_rotate_shape+0xf0>)
   867ea:	4607      	mov	r7, r0
   867ec:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
   867f0:	4798      	blx	r3
   867f2:	4651      	mov	r1, sl
   867f4:	4606      	mov	r6, r0
   867f6:	4638      	mov	r0, r7
   867f8:	47a0      	blx	r4
   867fa:	4659      	mov	r1, fp
   867fc:	4680      	mov	r8, r0
   867fe:	4630      	mov	r0, r6
   86800:	47a0      	blx	r4
   86802:	4b24      	ldr	r3, [pc, #144]	; (86894 <mw_gl_rotate_shape+0x10c>)
   86804:	4601      	mov	r1, r0
   86806:	4640      	mov	r0, r8
   86808:	4798      	blx	r3
   8680a:	4b1c      	ldr	r3, [pc, #112]	; (8687c <mw_gl_rotate_shape+0xf4>)
   8680c:	4798      	blx	r3
   8680e:	4b22      	ldr	r3, [pc, #136]	; (86898 <mw_gl_rotate_shape+0x110>)
   86810:	4798      	blx	r3
   86812:	4680      	mov	r8, r0
   86814:	4689      	mov	r9, r1
		poly_y[i] = (int16_t)floor(((float)poly_x[i] * sinf(angle_rads) + (float)poly_y[i] * cosf(angle_rads)));
   86816:	4638      	mov	r0, r7
   86818:	4659      	mov	r1, fp
   8681a:	47a0      	blx	r4
   8681c:	4651      	mov	r1, sl
   8681e:	4607      	mov	r7, r0
   86820:	4630      	mov	r0, r6
   86822:	47a0      	blx	r4
   86824:	4b1d      	ldr	r3, [pc, #116]	; (8689c <mw_gl_rotate_shape+0x114>)
   86826:	4601      	mov	r1, r0
   86828:	4638      	mov	r0, r7
   8682a:	4798      	blx	r3
   8682c:	4b13      	ldr	r3, [pc, #76]	; (8687c <mw_gl_rotate_shape+0xf4>)
   8682e:	4798      	blx	r3
   86830:	4b19      	ldr	r3, [pc, #100]	; (86898 <mw_gl_rotate_shape+0x110>)
   86832:	4798      	blx	r3
   86834:	4b1a      	ldr	r3, [pc, #104]	; (868a0 <mw_gl_rotate_shape+0x118>)
   86836:	4798      	blx	r3
		x = (int16_t)floor(((float)poly_x[i] * cosf(angle_rads) - (float)poly_y[i] * sinf(angle_rads)));
   86838:	4b19      	ldr	r3, [pc, #100]	; (868a0 <mw_gl_rotate_shape+0x118>)
		poly_y[i] = (int16_t)floor(((float)poly_x[i] * sinf(angle_rads) + (float)poly_y[i] * cosf(angle_rads)));
   8683a:	f825 0f02 	strh.w	r0, [r5, #2]!
		x = (int16_t)floor(((float)poly_x[i] * cosf(angle_rads) - (float)poly_y[i] * sinf(angle_rads)));
   8683e:	4649      	mov	r1, r9
   86840:	4640      	mov	r0, r8
   86842:	4798      	blx	r3
   86844:	9b00      	ldr	r3, [sp, #0]
	for (i = 0U; i < poly_corners; i++)
   86846:	9a01      	ldr	r2, [sp, #4]
		x = (int16_t)floor(((float)poly_x[i] * cosf(angle_rads) - (float)poly_y[i] * sinf(angle_rads)));
   86848:	f823 0f02 	strh.w	r0, [r3, #2]!
	for (i = 0U; i < poly_corners; i++)
   8684c:	429a      	cmp	r2, r3
   8684e:	d1c6      	bne.n	867de <mw_gl_rotate_shape+0x56>
		poly_x[i] = x;
	}
}
   86850:	b003      	add	sp, #12
   86852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		MW_ASSERT((bool)false, "Null pointer argument");
   86856:	4c13      	ldr	r4, [pc, #76]	; (868a4 <mw_gl_rotate_shape+0x11c>)
   86858:	f640 02e5 	movw	r2, #2277	; 0x8e5
   8685c:	2000      	movs	r0, #0
   8685e:	46a4      	mov	ip, r4
   86860:	4b11      	ldr	r3, [pc, #68]	; (868a8 <mw_gl_rotate_shape+0x120>)
   86862:	4912      	ldr	r1, [pc, #72]	; (868ac <mw_gl_rotate_shape+0x124>)
}
   86864:	b003      	add	sp, #12
   86866:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MW_ASSERT((bool)false, "Null pointer argument");
   8686a:	4760      	bx	ip
   8686c:	f3af 8000 	nop.w
   86870:	1a63c1f8 	.word	0x1a63c1f8
   86874:	404ca5dc 	.word	0x404ca5dc
   86878:	000a4ae5 	.word	0x000a4ae5
   8687c:	000a42a5 	.word	0x000a42a5
   86880:	000a45a1 	.word	0x000a45a1
   86884:	000a48d1 	.word	0x000a48d1
   86888:	000a3141 	.word	0x000a3141
   8688c:	000a31b9 	.word	0x000a31b9
   86890:	000a4b8d 	.word	0x000a4b8d
   86894:	000a4979 	.word	0x000a4979
   86898:	000a3029 	.word	0x000a3029
   8689c:	000a497d 	.word	0x000a497d
   868a0:	000a4881 	.word	0x000a4881
   868a4:	00095add 	.word	0x00095add
   868a8:	000a6618 	.word	0x000a6618
   868ac:	000ab104 	.word	0x000ab104

000868b0 <mw_gl_monochrome_bitmap>:
		int16_t start_x,
		int16_t start_y,
		uint16_t image_data_width_pixels,
		uint16_t image_data_height_pixels,
		const uint8_t *image_data)
{
   868b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   868b4:	b097      	sub	sp, #92	; 0x5c
   868b6:	9c21      	ldr	r4, [sp, #132]	; 0x84
   868b8:	f8bd e080 	ldrh.w	lr, [sp, #128]	; 0x80
   868bc:	940d      	str	r4, [sp, #52]	; 0x34
	bool colour;
	uint8_t image_byte;
	uint8_t mask;
	uint16_t array_width;

	if (draw_info == NULL || image_data == NULL)
   868be:	2800      	cmp	r0, #0
   868c0:	f000 80b6 	beq.w	86a30 <mw_gl_monochrome_bitmap+0x180>
   868c4:	2c00      	cmp	r4, #0
   868c6:	f000 80b3 	beq.w	86a30 <mw_gl_monochrome_bitmap+0x180>
		MW_ASSERT((bool)false, "Null pointer argument");
		return;
	}

	/* check for off window starting point */
	if (start_x > draw_info->clip_rect.x + draw_info->clip_rect.width ||
   868ca:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
   868ce:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   868d2:	192e      	adds	r6, r5, r4
   868d4:	42b1      	cmp	r1, r6
   868d6:	f300 80a8 	bgt.w	86a2a <mw_gl_monochrome_bitmap+0x17a>
			start_y > draw_info->clip_rect.y + draw_info->clip_rect.height)
   868da:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
   868de:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
   868e2:	eb06 070c 	add.w	r7, r6, ip
	if (start_x > draw_info->clip_rect.x + draw_info->clip_rect.width ||
   868e6:	42ba      	cmp	r2, r7
   868e8:	f300 809f 	bgt.w	86a2a <mw_gl_monochrome_bitmap+0x17a>
	{
		return;
	}

	/* check for being completely off window */
	if (start_x + (int16_t)image_data_width_pixels <= draw_info->clip_rect.x ||
   868ec:	b21f      	sxth	r7, r3
   868ee:	9710      	str	r7, [sp, #64]	; 0x40
   868f0:	440f      	add	r7, r1
   868f2:	42bc      	cmp	r4, r7
   868f4:	f280 8099 	bge.w	86a2a <mw_gl_monochrome_bitmap+0x17a>
			start_y + (int16_t)image_data_height_pixels <= draw_info->clip_rect.y)
   868f8:	fa0f f78e 	sxth.w	r7, lr
   868fc:	9714      	str	r7, [sp, #80]	; 0x50
   868fe:	4417      	add	r7, r2
	if (start_x + (int16_t)image_data_width_pixels <= draw_info->clip_rect.x ||
   86900:	45bc      	cmp	ip, r7
   86902:	f280 8092 	bge.w	86a2a <mw_gl_monochrome_bitmap+0x17a>
   86906:	461f      	mov	r7, r3
	{
		return;
	}

	if (gc.bg_transparent == MW_GL_BG_TRANSPARENT)
   86908:	4b63      	ldr	r3, [pc, #396]	; (86a98 <mw_gl_monochrome_bitmap+0x1e8>)
   8690a:	4683      	mov	fp, r0
   8690c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   86910:	9215      	str	r2, [sp, #84]	; 0x54
   86912:	9111      	str	r1, [sp, #68]	; 0x44
   86914:	2b00      	cmp	r3, #0
   86916:	f040 809e 	bne.w	86a56 <mw_gl_monochrome_bitmap+0x1a6>
	{
		array_width = image_data_width_pixels / 8U;
   8691a:	08fb      	lsrs	r3, r7, #3
		if (image_data_width_pixels % 8U > 0U)
   8691c:	077a      	lsls	r2, r7, #29
		array_width = image_data_width_pixels / 8U;
   8691e:	930e      	str	r3, [sp, #56]	; 0x38
		if (image_data_width_pixels % 8U > 0U)
   86920:	f000 8091 	beq.w	86a46 <mw_gl_monochrome_bitmap+0x196>
		{
			array_width++;
		}

		for (y = 0; y < (int16_t)image_data_height_pixels; y++)
   86924:	9f14      	ldr	r7, [sp, #80]	; 0x50
			array_width++;
   86926:	3301      	adds	r3, #1
		for (y = 0; y < (int16_t)image_data_height_pixels; y++)
   86928:	2f00      	cmp	r7, #0
			array_width++;
   8692a:	930e      	str	r3, [sp, #56]	; 0x38
		for (y = 0; y < (int16_t)image_data_height_pixels; y++)
   8692c:	dd7d      	ble.n	86a2a <mw_gl_monochrome_bitmap+0x17a>
		{
			for (a = 0; a < array_width; a++)
			{
				image_byte = image_data[y * (int16_t)array_width + (int16_t)a];
				mask = 0x80U;
   8692e:	2300      	movs	r3, #0
						break;
					}
					colour = (image_byte & mask) == 0U;
					if (colour == true)
					{
						mw_gl_fg_pixel(draw_info, (int16_t)a * 8 + x + start_x, y + start_y);
   86930:	9915      	ldr	r1, [sp, #84]	; 0x54
   86932:	b29a      	uxth	r2, r3
   86934:	9213      	str	r2, [sp, #76]	; 0x4c
   86936:	440a      	add	r2, r1
   86938:	990e      	ldr	r1, [sp, #56]	; 0x38
   8693a:	b292      	uxth	r2, r2
   8693c:	fb01 f303 	mul.w	r3, r1, r3
   86940:	930f      	str	r3, [sp, #60]	; 0x3c
   86942:	b213      	sxth	r3, r2
{
   86944:	2700      	movs	r7, #0
						mw_gl_fg_pixel(draw_info, (int16_t)a * 8 + x + start_x, y + start_y);
   86946:	930c      	str	r3, [sp, #48]	; 0x30
   86948:	465b      	mov	r3, fp
   8694a:	46bb      	mov	fp, r7
   8694c:	469a      	mov	sl, r3
   8694e:	9212      	str	r2, [sp, #72]	; 0x48
   86950:	9a11      	ldr	r2, [sp, #68]	; 0x44
				image_byte = image_data[y * (int16_t)array_width + (int16_t)a];
   86952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86954:	eb02 07c7 	add.w	r7, r2, r7, lsl #3
   86958:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8695a:	445b      	add	r3, fp
   8695c:	f813 9002 	ldrb.w	r9, [r3, r2]
   86960:	b2bb      	uxth	r3, r7
   86962:	9308      	str	r3, [sp, #32]
   86964:	9b10      	ldr	r3, [sp, #64]	; 0x40
						mw_gl_fg_pixel(draw_info, (int16_t)a * 8 + x + start_x, y + start_y);
   86966:	2400      	movs	r4, #0
				mask = 0x80U;
   86968:	2580      	movs	r5, #128	; 0x80
   8696a:	eba3 07cb 	sub.w	r7, r3, fp, lsl #3
   8696e:	e004      	b.n	8697a <mw_gl_monochrome_bitmap+0xca>
   86970:	3401      	adds	r4, #1
				for (x = 0; x < 8; x++)
   86972:	2c08      	cmp	r4, #8
					}
					mask >>= 1U;
   86974:	ea4f 0555 	mov.w	r5, r5, lsr #1
				for (x = 0; x < 8; x++)
   86978:	d047      	beq.n	86a0a <mw_gl_monochrome_bitmap+0x15a>
					if ((int16_t)a * 8 + x == (int16_t)image_data_width_pixels)
   8697a:	42a7      	cmp	r7, r4
   8697c:	d045      	beq.n	86a0a <mw_gl_monochrome_bitmap+0x15a>
					if (colour == true)
   8697e:	ea19 0f05 	tst.w	r9, r5
   86982:	d1f5      	bne.n	86970 <mw_gl_monochrome_bitmap+0xc0>
   86984:	9b08      	ldr	r3, [sp, #32]
	MW_ASSERT(draw_info, "Null pointer argument");
   86986:	f8df 8128 	ldr.w	r8, [pc, #296]	; 86ab0 <mw_gl_monochrome_bitmap+0x200>
   8698a:	191e      	adds	r6, r3, r4
	pixel(draw_info, client_x, client_y, gc.fg_colour);
   8698c:	4b42      	ldr	r3, [pc, #264]	; (86a98 <mw_gl_monochrome_bitmap+0x1e8>)
   8698e:	b2b6      	uxth	r6, r6
   86990:	681b      	ldr	r3, [r3, #0]
   86992:	930b      	str	r3, [sp, #44]	; 0x2c
	int16_t root_width = MW_ROOT_WIDTH;
   86994:	4b41      	ldr	r3, [pc, #260]	; (86a9c <mw_gl_monochrome_bitmap+0x1ec>)
   86996:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   86998:	4b41      	ldr	r3, [pc, #260]	; (86aa0 <mw_gl_monochrome_bitmap+0x1f0>)
	int16_t root_width = MW_ROOT_WIDTH;
   8699a:	9009      	str	r0, [sp, #36]	; 0x24
	int16_t root_height = MW_ROOT_HEIGHT;
   8699c:	4798      	blx	r3
	MW_ASSERT(draw_info, "Null pointer argument");
   8699e:	4b41      	ldr	r3, [pc, #260]	; (86aa4 <mw_gl_monochrome_bitmap+0x1f4>)
	int16_t root_height = MW_ROOT_HEIGHT;
   869a0:	900a      	str	r0, [sp, #40]	; 0x28
	MW_ASSERT(draw_info, "Null pointer argument");
   869a2:	2285      	movs	r2, #133	; 0x85
   869a4:	4940      	ldr	r1, [pc, #256]	; (86aa8 <mw_gl_monochrome_bitmap+0x1f8>)
   869a6:	2001      	movs	r0, #1
   869a8:	47c0      	blx	r8
	if (client_x >= draw_info->clip_rect.x + draw_info->clip_rect.width)
   869aa:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
   869ae:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
   869b2:	b232      	sxth	r2, r6
   869b4:	440b      	add	r3, r1
   869b6:	429a      	cmp	r2, r3
   869b8:	dada      	bge.n	86970 <mw_gl_monochrome_bitmap+0xc0>
	if (client_y >= draw_info->clip_rect.y + draw_info->clip_rect.height)
   869ba:	f9ba 300a 	ldrsh.w	r3, [sl, #10]
   869be:	f9ba 0006 	ldrsh.w	r0, [sl, #6]
   869c2:	eb03 0e00 	add.w	lr, r3, r0
   869c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   869c8:	4573      	cmp	r3, lr
   869ca:	dad1      	bge.n	86970 <mw_gl_monochrome_bitmap+0xc0>
	if (client_x < draw_info->clip_rect.x)
   869cc:	4291      	cmp	r1, r2
   869ce:	dccf      	bgt.n	86970 <mw_gl_monochrome_bitmap+0xc0>
	if (client_y < draw_info->clip_rect.y)
   869d0:	4283      	cmp	r3, r0
   869d2:	dbcd      	blt.n	86970 <mw_gl_monochrome_bitmap+0xc0>
	display_x = client_x + draw_info->origin_x;
   869d4:	f8ba 0000 	ldrh.w	r0, [sl]
   869d8:	4430      	add	r0, r6
   869da:	b200      	sxth	r0, r0
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   869dc:	2800      	cmp	r0, #0
   869de:	dbc7      	blt.n	86970 <mw_gl_monochrome_bitmap+0xc0>
   869e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   869e2:	4283      	cmp	r3, r0
   869e4:	ddc4      	ble.n	86970 <mw_gl_monochrome_bitmap+0xc0>
	display_y = client_y + draw_info->origin_y;
   869e6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
   869ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   869ec:	4419      	add	r1, r3
   869ee:	b209      	sxth	r1, r1
	if (display_x >= 0 && display_x < root_width && display_y >= 0 && display_y < root_height)
   869f0:	2900      	cmp	r1, #0
   869f2:	dbbd      	blt.n	86970 <mw_gl_monochrome_bitmap+0xc0>
   869f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   869f6:	428b      	cmp	r3, r1
   869f8:	ddba      	ble.n	86970 <mw_gl_monochrome_bitmap+0xc0>
		mw_hal_lcd_pixel(display_x, display_y, colour);
   869fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   869fc:	4b2b      	ldr	r3, [pc, #172]	; (86aac <mw_gl_monochrome_bitmap+0x1fc>)
   869fe:	3401      	adds	r4, #1
   86a00:	4798      	blx	r3
				for (x = 0; x < 8; x++)
   86a02:	2c08      	cmp	r4, #8
					mask >>= 1U;
   86a04:	ea4f 0555 	mov.w	r5, r5, lsr #1
				for (x = 0; x < 8; x++)
   86a08:	d1b7      	bne.n	8697a <mw_gl_monochrome_bitmap+0xca>
			for (a = 0; a < array_width; a++)
   86a0a:	f10b 0301 	add.w	r3, fp, #1
   86a0e:	fa5f fb83 	uxtb.w	fp, r3
   86a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a14:	fa1f f78b 	uxth.w	r7, fp
   86a18:	429f      	cmp	r7, r3
   86a1a:	d399      	bcc.n	86950 <mw_gl_monochrome_bitmap+0xa0>
		for (y = 0; y < (int16_t)image_data_height_pixels; y++)
   86a1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86a1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   86a20:	3301      	adds	r3, #1
   86a22:	b21b      	sxth	r3, r3
   86a24:	429a      	cmp	r2, r3
   86a26:	46d3      	mov	fp, sl
   86a28:	dc82      	bgt.n	86930 <mw_gl_monochrome_bitmap+0x80>
				draw_info->clip_rect.height,
				gc.fg_colour,
				gc.bg_colour,
				image_data);
	}
}
   86a2a:	b017      	add	sp, #92	; 0x5c
   86a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		MW_ASSERT((bool)false, "Null pointer argument");
   86a30:	4c1f      	ldr	r4, [pc, #124]	; (86ab0 <mw_gl_monochrome_bitmap+0x200>)
   86a32:	f640 12ae 	movw	r2, #2478	; 0x9ae
   86a36:	2000      	movs	r0, #0
   86a38:	46a4      	mov	ip, r4
   86a3a:	4b1a      	ldr	r3, [pc, #104]	; (86aa4 <mw_gl_monochrome_bitmap+0x1f4>)
   86a3c:	491d      	ldr	r1, [pc, #116]	; (86ab4 <mw_gl_monochrome_bitmap+0x204>)
}
   86a3e:	b017      	add	sp, #92	; 0x5c
   86a40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MW_ASSERT((bool)false, "Null pointer argument");
   86a44:	4760      	bx	ip
		for (y = 0; y < (int16_t)image_data_height_pixels; y++)
   86a46:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86a48:	2b00      	cmp	r3, #0
   86a4a:	ddee      	ble.n	86a2a <mw_gl_monochrome_bitmap+0x17a>
   86a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a4e:	2b00      	cmp	r3, #0
   86a50:	f47f af6d 	bne.w	8692e <mw_gl_monochrome_bitmap+0x7e>
   86a54:	e7e9      	b.n	86a2a <mw_gl_monochrome_bitmap+0x17a>
		mw_hal_lcd_monochrome_bitmap_clip(draw_info->origin_x + start_x,
   86a56:	8803      	ldrh	r3, [r0, #0]
				draw_info->origin_y + start_y,
   86a58:	8842      	ldrh	r2, [r0, #2]
				draw_info->origin_x + draw_info->clip_rect.x,
   86a5a:	1919      	adds	r1, r3, r4
		mw_hal_lcd_monochrome_bitmap_clip(draw_info->origin_x + start_x,
   86a5c:	4c0e      	ldr	r4, [pc, #56]	; (86a98 <mw_gl_monochrome_bitmap+0x1e8>)
				draw_info->origin_y + draw_info->clip_rect.y,
   86a5e:	eb02 000c 	add.w	r0, r2, ip
		mw_hal_lcd_monochrome_bitmap_clip(draw_info->origin_x + start_x,
   86a62:	6864      	ldr	r4, [r4, #4]
   86a64:	b209      	sxth	r1, r1
   86a66:	9405      	str	r4, [sp, #20]
   86a68:	4c0b      	ldr	r4, [pc, #44]	; (86a98 <mw_gl_monochrome_bitmap+0x1e8>)
   86a6a:	b200      	sxth	r0, r0
   86a6c:	6824      	ldr	r4, [r4, #0]
   86a6e:	9100      	str	r1, [sp, #0]
   86a70:	9404      	str	r4, [sp, #16]
				draw_info->origin_y + start_y,
   86a72:	9c15      	ldr	r4, [sp, #84]	; 0x54
		mw_hal_lcd_monochrome_bitmap_clip(draw_info->origin_x + start_x,
   86a74:	9001      	str	r0, [sp, #4]
				draw_info->origin_y + start_y,
   86a76:	4414      	add	r4, r2
		mw_hal_lcd_monochrome_bitmap_clip(draw_info->origin_x + start_x,
   86a78:	9a11      	ldr	r2, [sp, #68]	; 0x44
   86a7a:	b221      	sxth	r1, r4
   86a7c:	441a      	add	r2, r3
   86a7e:	4690      	mov	r8, r2
   86a80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   86a82:	4673      	mov	r3, lr
   86a84:	9406      	str	r4, [sp, #24]
   86a86:	463a      	mov	r2, r7
   86a88:	fa0f f088 	sxth.w	r0, r8
   86a8c:	9603      	str	r6, [sp, #12]
   86a8e:	9502      	str	r5, [sp, #8]
   86a90:	4c09      	ldr	r4, [pc, #36]	; (86ab8 <mw_gl_monochrome_bitmap+0x208>)
   86a92:	47a0      	blx	r4
   86a94:	e7c9      	b.n	86a2a <mw_gl_monochrome_bitmap+0x17a>
   86a96:	bf00      	nop
   86a98:	200715e0 	.word	0x200715e0
   86a9c:	00086e2d 	.word	0x00086e2d
   86aa0:	00086e31 	.word	0x00086e31
   86aa4:	000a6618 	.word	0x000a6618
   86aa8:	000ab018 	.word	0x000ab018
   86aac:	00086e39 	.word	0x00086e39
   86ab0:	00095add 	.word	0x00095add
   86ab4:	000ab118 	.word	0x000ab118
   86ab8:	000873f5 	.word	0x000873f5

00086abc <mw_gl_colour_bitmap>:
		int16_t start_x,
		int16_t start_y,
		uint16_t image_data_width_pixels,
		uint16_t image_data_height_pixels,
		const uint8_t *image_data)
{
   86abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86ac0:	b087      	sub	sp, #28
   86ac2:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
   86ac6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	if (draw_info == NULL || image_data == NULL)
   86ac8:	2800      	cmp	r0, #0
   86aca:	d035      	beq.n	86b38 <mw_gl_colour_bitmap+0x7c>
   86acc:	b3a5      	cbz	r5, 86b38 <mw_gl_colour_bitmap+0x7c>
		MW_ASSERT((bool)false, "Null pointer argument");
		return;
	}

	/* check for left edge being to right of clip rect or top edge being below clip rect*/
	if (start_x > draw_info->clip_rect.x + draw_info->clip_rect.width ||
   86ace:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
   86ad2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   86ad6:	1937      	adds	r7, r6, r4
   86ad8:	42b9      	cmp	r1, r7
   86ada:	dc2a      	bgt.n	86b32 <mw_gl_colour_bitmap+0x76>
			start_y > draw_info->clip_rect.y + draw_info->clip_rect.height)
   86adc:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
   86ae0:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
   86ae4:	eb07 0e08 	add.w	lr, r7, r8
	if (start_x > draw_info->clip_rect.x + draw_info->clip_rect.width ||
   86ae8:	4572      	cmp	r2, lr
   86aea:	dc22      	bgt.n	86b32 <mw_gl_colour_bitmap+0x76>
	{
		return;
	}

	/* check for right edge being to left of clip rect or bottom edge being above rect */
	if (start_x + (int16_t)image_data_width_pixels - 1 < draw_info->clip_rect.x ||
   86aec:	fa0f fe83 	sxth.w	lr, r3
   86af0:	448e      	add	lr, r1
   86af2:	4574      	cmp	r4, lr
   86af4:	da1d      	bge.n	86b32 <mw_gl_colour_bitmap+0x76>
			start_y + (int16_t)image_data_height_pixels - 1 < draw_info->clip_rect.y)
   86af6:	fa0f fe8c 	sxth.w	lr, ip
   86afa:	4496      	add	lr, r2
	if (start_x + (int16_t)image_data_width_pixels - 1 < draw_info->clip_rect.x ||
   86afc:	45f0      	cmp	r8, lr
   86afe:	da18      	bge.n	86b32 <mw_gl_colour_bitmap+0x76>
   86b00:	4696      	mov	lr, r2
   86b02:	4699      	mov	r9, r3
	{
		return;
	}

	mw_hal_lcd_colour_bitmap_clip(draw_info->origin_x + start_x,
			draw_info->origin_y + start_y,
   86b04:	8842      	ldrh	r2, [r0, #2]
	mw_hal_lcd_colour_bitmap_clip(draw_info->origin_x + start_x,
   86b06:	8803      	ldrh	r3, [r0, #0]
			image_data_width_pixels,
			image_data_height_pixels,
			draw_info->origin_x + draw_info->clip_rect.x,
			draw_info->origin_y + draw_info->clip_rect.y,
   86b08:	4490      	add	r8, r2
			draw_info->origin_x + draw_info->clip_rect.x,
   86b0a:	441c      	add	r4, r3
	mw_hal_lcd_colour_bitmap_clip(draw_info->origin_x + start_x,
   86b0c:	fa0f f088 	sxth.w	r0, r8
   86b10:	b224      	sxth	r4, r4
   86b12:	eb03 0801 	add.w	r8, r3, r1
			draw_info->origin_y + start_y,
   86b16:	4496      	add	lr, r2
	mw_hal_lcd_colour_bitmap_clip(draw_info->origin_x + start_x,
   86b18:	9400      	str	r4, [sp, #0]
   86b1a:	9001      	str	r0, [sp, #4]
   86b1c:	4663      	mov	r3, ip
   86b1e:	464a      	mov	r2, r9
   86b20:	fa0f f18e 	sxth.w	r1, lr
   86b24:	fa0f f088 	sxth.w	r0, r8
   86b28:	9504      	str	r5, [sp, #16]
   86b2a:	9703      	str	r7, [sp, #12]
   86b2c:	9602      	str	r6, [sp, #8]
   86b2e:	4c08      	ldr	r4, [pc, #32]	; (86b50 <mw_gl_colour_bitmap+0x94>)
   86b30:	47a0      	blx	r4
			draw_info->clip_rect.width,
			draw_info->clip_rect.height,
			image_data);
}
   86b32:	b007      	add	sp, #28
   86b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		MW_ASSERT((bool)false, "Null pointer argument");
   86b38:	4c06      	ldr	r4, [pc, #24]	; (86b54 <mw_gl_colour_bitmap+0x98>)
   86b3a:	f640 12f7 	movw	r2, #2551	; 0x9f7
   86b3e:	2000      	movs	r0, #0
   86b40:	46a4      	mov	ip, r4
   86b42:	4b05      	ldr	r3, [pc, #20]	; (86b58 <mw_gl_colour_bitmap+0x9c>)
   86b44:	4905      	ldr	r1, [pc, #20]	; (86b5c <mw_gl_colour_bitmap+0xa0>)
}
   86b46:	b007      	add	sp, #28
   86b48:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		MW_ASSERT((bool)false, "Null pointer argument");
   86b4c:	4760      	bx	ip
   86b4e:	bf00      	nop
   86b50:	000870b5 	.word	0x000870b5
   86b54:	00095add 	.word	0x00095add
   86b58:	000a6618 	.word	0x000a6618
   86b5c:	000ab130 	.word	0x000ab130

00086b60 <mw_hal_delay_init>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

void mw_hal_delay_init(void)
{
   86b60:	4770      	bx	lr
   86b62:	bf00      	nop

00086b64 <mw_hal_delay_ms>:
}

void mw_hal_delay_ms(uint16_t ms)
{
	delay_ms(ms);
   86b64:	b910      	cbnz	r0, 86b6c <mw_hal_delay_ms+0x8>
   86b66:	2006      	movs	r0, #6
   86b68:	4b09      	ldr	r3, [pc, #36]	; (86b90 <mw_hal_delay_ms+0x2c>)
   86b6a:	4718      	bx	r3
   86b6c:	f243 62af 	movw	r2, #13999	; 0x36af
   86b70:	2300      	movs	r3, #0
   86b72:	4908      	ldr	r1, [pc, #32]	; (86b94 <mw_hal_delay_ms+0x30>)
{
   86b74:	b510      	push	{r4, lr}
	delay_ms(ms);
   86b76:	fbe1 2300 	umlal	r2, r3, r1, r0
   86b7a:	4c07      	ldr	r4, [pc, #28]	; (86b98 <mw_hal_delay_ms+0x34>)
   86b7c:	4610      	mov	r0, r2
   86b7e:	4619      	mov	r1, r3
   86b80:	f243 62b0 	movw	r2, #14000	; 0x36b0
   86b84:	2300      	movs	r3, #0
   86b86:	47a0      	blx	r4
}
   86b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(ms);
   86b8c:	4b00      	ldr	r3, [pc, #0]	; (86b90 <mw_hal_delay_ms+0x2c>)
   86b8e:	4718      	bx	r3
   86b90:	20070001 	.word	0x20070001
   86b94:	0501bd00 	.word	0x0501bd00
   86b98:	000a4f65 	.word	0x000a4f65

00086b9c <write_command>:
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   86b9c:	4b05      	ldr	r3, [pc, #20]	; (86bb4 <write_command+0x18>)
 * Send a command to the ILI9341 panel. The callback switches the DC line to C first
 *
 * @param command The command byte
 */
static inline void write_command(const uint8_t command)
{  	
   86b9e:	b410      	push	{r4}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   86ba0:	2408      	movs	r4, #8
	return p_spi->SPI_SR;
   86ba2:	461a      	mov	r2, r3
   86ba4:	4904      	ldr	r1, [pc, #16]	; (86bb8 <write_command+0x1c>)
   86ba6:	634c      	str	r4, [r1, #52]	; 0x34
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   86ba8:	60d8      	str	r0, [r3, #12]
	return p_spi->SPI_SR;
   86baa:	6913      	ldr	r3, [r2, #16]
	ioport_set_pin_level(LCD_DC_PIN, false);
	spi_put(SPI_LCD_TOUCH_BASE, (uint16_t)command);
	while ((spi_read_status(SPI_LCD_TOUCH_BASE) & SPI_SR_RDRF) == 0U)
   86bac:	07db      	lsls	r3, r3, #31
   86bae:	d5fc      	bpl.n	86baa <write_command+0xe>
	{
	}
}
   86bb0:	bc10      	pop	{r4}
   86bb2:	4770      	bx	lr
   86bb4:	40008000 	.word	0x40008000
   86bb8:	400e1400 	.word	0x400e1400

00086bbc <write_data>:
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   86bbc:	4b05      	ldr	r3, [pc, #20]	; (86bd4 <write_data+0x18>)
 * Send a data byte to the ILI9341 panel. The callback switches the DC line to D first
 *
 * @param data The data byte
 */
static inline void write_data(const uint8_t data)
{
   86bbe:	b410      	push	{r4}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   86bc0:	2408      	movs	r4, #8
	return p_spi->SPI_SR;
   86bc2:	461a      	mov	r2, r3
   86bc4:	4904      	ldr	r1, [pc, #16]	; (86bd8 <write_data+0x1c>)
   86bc6:	630c      	str	r4, [r1, #48]	; 0x30
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   86bc8:	60d8      	str	r0, [r3, #12]
	return p_spi->SPI_SR;
   86bca:	6913      	ldr	r3, [r2, #16]
	ioport_set_pin_level(LCD_DC_PIN, true);
	spi_put(SPI_LCD_TOUCH_BASE, (uint16_t)data);
	while ((spi_read_status(SPI_LCD_TOUCH_BASE) & SPI_SR_RDRF) == 0U)
   86bcc:	07db      	lsls	r3, r3, #31
   86bce:	d5fc      	bpl.n	86bca <write_data+0xe>
	{
	}
}
   86bd0:	bc10      	pop	{r4}
   86bd2:	4770      	bx	lr
   86bd4:	40008000 	.word	0x40008000
   86bd8:	400e1400 	.word	0x400e1400

00086bdc <mw_hal_lcd_init>:

#pragma GCC push_options
#pragma GCC optimize ("O0")

void mw_hal_lcd_init(void)
{    
   86bdc:	b580      	push	{r7, lr}
   86bde:	af00      	add	r7, sp, #0
	gpio_set_pin_low(LCD_RESET_PIN);
   86be0:	2062      	movs	r0, #98	; 0x62
   86be2:	4b8b      	ldr	r3, [pc, #556]	; (86e10 <mw_hal_lcd_init+0x234>)
   86be4:	4798      	blx	r3
    mw_hal_delay_ms(100U);
   86be6:	2064      	movs	r0, #100	; 0x64
   86be8:	4b8a      	ldr	r3, [pc, #552]	; (86e14 <mw_hal_lcd_init+0x238>)
   86bea:	4798      	blx	r3
	gpio_set_pin_high(LCD_RESET_PIN);
   86bec:	2062      	movs	r0, #98	; 0x62
   86bee:	4b8a      	ldr	r3, [pc, #552]	; (86e18 <mw_hal_lcd_init+0x23c>)
   86bf0:	4798      	blx	r3
    mw_hal_delay_ms(100U);
   86bf2:	2064      	movs	r0, #100	; 0x64
   86bf4:	4b87      	ldr	r3, [pc, #540]	; (86e14 <mw_hal_lcd_init+0x238>)
   86bf6:	4798      	blx	r3

    spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   86bf8:	210e      	movs	r1, #14
   86bfa:	4888      	ldr	r0, [pc, #544]	; (86e1c <mw_hal_lcd_init+0x240>)
   86bfc:	4b88      	ldr	r3, [pc, #544]	; (86e20 <mw_hal_lcd_init+0x244>)
   86bfe:	4798      	blx	r3

	write_command(0x01U);
   86c00:	2001      	movs	r0, #1
   86c02:	4b88      	ldr	r3, [pc, #544]	; (86e24 <mw_hal_lcd_init+0x248>)
   86c04:	4798      	blx	r3
    mw_hal_delay_ms(10U);
   86c06:	200a      	movs	r0, #10
   86c08:	4b82      	ldr	r3, [pc, #520]	; (86e14 <mw_hal_lcd_init+0x238>)
   86c0a:	4798      	blx	r3
	write_command(0xcbU);
   86c0c:	20cb      	movs	r0, #203	; 0xcb
   86c0e:	4b85      	ldr	r3, [pc, #532]	; (86e24 <mw_hal_lcd_init+0x248>)
   86c10:	4798      	blx	r3
	write_data(0x39U);
   86c12:	2039      	movs	r0, #57	; 0x39
   86c14:	4b84      	ldr	r3, [pc, #528]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c16:	4798      	blx	r3
	write_data(0x2cU);
   86c18:	202c      	movs	r0, #44	; 0x2c
   86c1a:	4b83      	ldr	r3, [pc, #524]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c1c:	4798      	blx	r3
	write_data(0x00U);
   86c1e:	2000      	movs	r0, #0
   86c20:	4b81      	ldr	r3, [pc, #516]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c22:	4798      	blx	r3
	write_data(0x34U);
   86c24:	2034      	movs	r0, #52	; 0x34
   86c26:	4b80      	ldr	r3, [pc, #512]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c28:	4798      	blx	r3
	write_data(0x02U);
   86c2a:	2002      	movs	r0, #2
   86c2c:	4b7e      	ldr	r3, [pc, #504]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c2e:	4798      	blx	r3
	write_command(0xcfU);
   86c30:	20cf      	movs	r0, #207	; 0xcf
   86c32:	4b7c      	ldr	r3, [pc, #496]	; (86e24 <mw_hal_lcd_init+0x248>)
   86c34:	4798      	blx	r3
	write_data(0x00U);
   86c36:	2000      	movs	r0, #0
   86c38:	4b7b      	ldr	r3, [pc, #492]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c3a:	4798      	blx	r3
	write_data(0xc1U);
   86c3c:	20c1      	movs	r0, #193	; 0xc1
   86c3e:	4b7a      	ldr	r3, [pc, #488]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c40:	4798      	blx	r3
	write_data(0x30U);
   86c42:	2030      	movs	r0, #48	; 0x30
   86c44:	4b78      	ldr	r3, [pc, #480]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c46:	4798      	blx	r3
	write_command(0xe8U);
   86c48:	20e8      	movs	r0, #232	; 0xe8
   86c4a:	4b76      	ldr	r3, [pc, #472]	; (86e24 <mw_hal_lcd_init+0x248>)
   86c4c:	4798      	blx	r3
	write_data(0x85U);
   86c4e:	2085      	movs	r0, #133	; 0x85
   86c50:	4b75      	ldr	r3, [pc, #468]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c52:	4798      	blx	r3
	write_data(0x00U);
   86c54:	2000      	movs	r0, #0
   86c56:	4b74      	ldr	r3, [pc, #464]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c58:	4798      	blx	r3
	write_data(0x78U);
   86c5a:	2078      	movs	r0, #120	; 0x78
   86c5c:	4b72      	ldr	r3, [pc, #456]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c5e:	4798      	blx	r3
	write_command(0xeaU);
   86c60:	20ea      	movs	r0, #234	; 0xea
   86c62:	4b70      	ldr	r3, [pc, #448]	; (86e24 <mw_hal_lcd_init+0x248>)
   86c64:	4798      	blx	r3
	write_data(0x00U);
   86c66:	2000      	movs	r0, #0
   86c68:	4b6f      	ldr	r3, [pc, #444]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c6a:	4798      	blx	r3
	write_data(0x00U);
   86c6c:	2000      	movs	r0, #0
   86c6e:	4b6e      	ldr	r3, [pc, #440]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c70:	4798      	blx	r3
	write_command(0xedU);
   86c72:	20ed      	movs	r0, #237	; 0xed
   86c74:	4b6b      	ldr	r3, [pc, #428]	; (86e24 <mw_hal_lcd_init+0x248>)
   86c76:	4798      	blx	r3
	write_data(0x64U);
   86c78:	2064      	movs	r0, #100	; 0x64
   86c7a:	4b6b      	ldr	r3, [pc, #428]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c7c:	4798      	blx	r3
	write_data(0x03U);
   86c7e:	2003      	movs	r0, #3
   86c80:	4b69      	ldr	r3, [pc, #420]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c82:	4798      	blx	r3
	write_data(0x12U);
   86c84:	2012      	movs	r0, #18
   86c86:	4b68      	ldr	r3, [pc, #416]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c88:	4798      	blx	r3
	write_data(0x81U);
   86c8a:	2081      	movs	r0, #129	; 0x81
   86c8c:	4b66      	ldr	r3, [pc, #408]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c8e:	4798      	blx	r3
	write_command(0xf7U);
   86c90:	20f7      	movs	r0, #247	; 0xf7
   86c92:	4b64      	ldr	r3, [pc, #400]	; (86e24 <mw_hal_lcd_init+0x248>)
   86c94:	4798      	blx	r3
	write_data(0x20U);
   86c96:	2020      	movs	r0, #32
   86c98:	4b63      	ldr	r3, [pc, #396]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86c9a:	4798      	blx	r3
	write_command(0xc0U);
   86c9c:	20c0      	movs	r0, #192	; 0xc0
   86c9e:	4b61      	ldr	r3, [pc, #388]	; (86e24 <mw_hal_lcd_init+0x248>)
   86ca0:	4798      	blx	r3
	write_data(0x23U);
   86ca2:	2023      	movs	r0, #35	; 0x23
   86ca4:	4b60      	ldr	r3, [pc, #384]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86ca6:	4798      	blx	r3
	write_command(0xc1U);
   86ca8:	20c1      	movs	r0, #193	; 0xc1
   86caa:	4b5e      	ldr	r3, [pc, #376]	; (86e24 <mw_hal_lcd_init+0x248>)
   86cac:	4798      	blx	r3
	write_data(0x10U);
   86cae:	2010      	movs	r0, #16
   86cb0:	4b5d      	ldr	r3, [pc, #372]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86cb2:	4798      	blx	r3
	write_command(0xc5U);
   86cb4:	20c5      	movs	r0, #197	; 0xc5
   86cb6:	4b5b      	ldr	r3, [pc, #364]	; (86e24 <mw_hal_lcd_init+0x248>)
   86cb8:	4798      	blx	r3
	write_data(0x3eU);
   86cba:	203e      	movs	r0, #62	; 0x3e
   86cbc:	4b5a      	ldr	r3, [pc, #360]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86cbe:	4798      	blx	r3
	write_data(0x28U);
   86cc0:	2028      	movs	r0, #40	; 0x28
   86cc2:	4b59      	ldr	r3, [pc, #356]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86cc4:	4798      	blx	r3
	write_command(0xc7U);
   86cc6:	20c7      	movs	r0, #199	; 0xc7
   86cc8:	4b56      	ldr	r3, [pc, #344]	; (86e24 <mw_hal_lcd_init+0x248>)
   86cca:	4798      	blx	r3
	write_data(0x86U);
   86ccc:	2086      	movs	r0, #134	; 0x86
   86cce:	4b56      	ldr	r3, [pc, #344]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86cd0:	4798      	blx	r3
	write_command(0x36U);
   86cd2:	2036      	movs	r0, #54	; 0x36
   86cd4:	4b53      	ldr	r3, [pc, #332]	; (86e24 <mw_hal_lcd_init+0x248>)
   86cd6:	4798      	blx	r3
	write_data(0x48U);
   86cd8:	2048      	movs	r0, #72	; 0x48
   86cda:	4b53      	ldr	r3, [pc, #332]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86cdc:	4798      	blx	r3
	write_command(0x3aU);
   86cde:	203a      	movs	r0, #58	; 0x3a
   86ce0:	4b50      	ldr	r3, [pc, #320]	; (86e24 <mw_hal_lcd_init+0x248>)
   86ce2:	4798      	blx	r3
	write_data(0x55U);
   86ce4:	2055      	movs	r0, #85	; 0x55
   86ce6:	4b50      	ldr	r3, [pc, #320]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86ce8:	4798      	blx	r3
	write_command(0xb1U);
   86cea:	20b1      	movs	r0, #177	; 0xb1
   86cec:	4b4d      	ldr	r3, [pc, #308]	; (86e24 <mw_hal_lcd_init+0x248>)
   86cee:	4798      	blx	r3
	write_data(0x00U);
   86cf0:	2000      	movs	r0, #0
   86cf2:	4b4d      	ldr	r3, [pc, #308]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86cf4:	4798      	blx	r3
	write_data(0x18U);
   86cf6:	2018      	movs	r0, #24
   86cf8:	4b4b      	ldr	r3, [pc, #300]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86cfa:	4798      	blx	r3
	write_command(0xb6U);
   86cfc:	20b6      	movs	r0, #182	; 0xb6
   86cfe:	4b49      	ldr	r3, [pc, #292]	; (86e24 <mw_hal_lcd_init+0x248>)
   86d00:	4798      	blx	r3
	write_data(0x08U);
   86d02:	2008      	movs	r0, #8
   86d04:	4b48      	ldr	r3, [pc, #288]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d06:	4798      	blx	r3
	write_data(0x82U);
   86d08:	2082      	movs	r0, #130	; 0x82
   86d0a:	4b47      	ldr	r3, [pc, #284]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d0c:	4798      	blx	r3
	write_data(0x27U);
   86d0e:	2027      	movs	r0, #39	; 0x27
   86d10:	4b45      	ldr	r3, [pc, #276]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d12:	4798      	blx	r3
	write_command(0xf2U);
   86d14:	20f2      	movs	r0, #242	; 0xf2
   86d16:	4b43      	ldr	r3, [pc, #268]	; (86e24 <mw_hal_lcd_init+0x248>)
   86d18:	4798      	blx	r3
	write_data(0x00U);
   86d1a:	2000      	movs	r0, #0
   86d1c:	4b42      	ldr	r3, [pc, #264]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d1e:	4798      	blx	r3
	write_command(0x26U);
   86d20:	2026      	movs	r0, #38	; 0x26
   86d22:	4b40      	ldr	r3, [pc, #256]	; (86e24 <mw_hal_lcd_init+0x248>)
   86d24:	4798      	blx	r3
	write_data(0x01U);
   86d26:	2001      	movs	r0, #1
   86d28:	4b3f      	ldr	r3, [pc, #252]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d2a:	4798      	blx	r3
	write_command(0xe0U);
   86d2c:	20e0      	movs	r0, #224	; 0xe0
   86d2e:	4b3d      	ldr	r3, [pc, #244]	; (86e24 <mw_hal_lcd_init+0x248>)
   86d30:	4798      	blx	r3
	write_data(0x0fU);
   86d32:	200f      	movs	r0, #15
   86d34:	4b3c      	ldr	r3, [pc, #240]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d36:	4798      	blx	r3
	write_data(0x31U);
   86d38:	2031      	movs	r0, #49	; 0x31
   86d3a:	4b3b      	ldr	r3, [pc, #236]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d3c:	4798      	blx	r3
	write_data(0x2bU);
   86d3e:	202b      	movs	r0, #43	; 0x2b
   86d40:	4b39      	ldr	r3, [pc, #228]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d42:	4798      	blx	r3
	write_data(0x0cU);
   86d44:	200c      	movs	r0, #12
   86d46:	4b38      	ldr	r3, [pc, #224]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d48:	4798      	blx	r3
	write_data(0x0eU);
   86d4a:	200e      	movs	r0, #14
   86d4c:	4b36      	ldr	r3, [pc, #216]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d4e:	4798      	blx	r3
	write_data(0x08U);
   86d50:	2008      	movs	r0, #8
   86d52:	4b35      	ldr	r3, [pc, #212]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d54:	4798      	blx	r3
	write_data(0x4eU);
   86d56:	204e      	movs	r0, #78	; 0x4e
   86d58:	4b33      	ldr	r3, [pc, #204]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d5a:	4798      	blx	r3
	write_data(0xf1U);
   86d5c:	20f1      	movs	r0, #241	; 0xf1
   86d5e:	4b32      	ldr	r3, [pc, #200]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d60:	4798      	blx	r3
	write_data(0x37U);
   86d62:	2037      	movs	r0, #55	; 0x37
   86d64:	4b30      	ldr	r3, [pc, #192]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d66:	4798      	blx	r3
	write_data(0x07U);
   86d68:	2007      	movs	r0, #7
   86d6a:	4b2f      	ldr	r3, [pc, #188]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d6c:	4798      	blx	r3
	write_data(0x10U);
   86d6e:	2010      	movs	r0, #16
   86d70:	4b2d      	ldr	r3, [pc, #180]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d72:	4798      	blx	r3
	write_data(0x03U);
   86d74:	2003      	movs	r0, #3
   86d76:	4b2c      	ldr	r3, [pc, #176]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d78:	4798      	blx	r3
	write_data(0x0eU);
   86d7a:	200e      	movs	r0, #14
   86d7c:	4b2a      	ldr	r3, [pc, #168]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d7e:	4798      	blx	r3
	write_data(0x09U);
   86d80:	2009      	movs	r0, #9
   86d82:	4b29      	ldr	r3, [pc, #164]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d84:	4798      	blx	r3
	write_data(0x00U);
   86d86:	2000      	movs	r0, #0
   86d88:	4b27      	ldr	r3, [pc, #156]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d8a:	4798      	blx	r3
	write_command(0xe1U);
   86d8c:	20e1      	movs	r0, #225	; 0xe1
   86d8e:	4b25      	ldr	r3, [pc, #148]	; (86e24 <mw_hal_lcd_init+0x248>)
   86d90:	4798      	blx	r3
	write_data(0x00U);
   86d92:	2000      	movs	r0, #0
   86d94:	4b24      	ldr	r3, [pc, #144]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d96:	4798      	blx	r3
	write_data(0x0eU);
   86d98:	200e      	movs	r0, #14
   86d9a:	4b23      	ldr	r3, [pc, #140]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86d9c:	4798      	blx	r3
	write_data(0x14U);
   86d9e:	2014      	movs	r0, #20
   86da0:	4b21      	ldr	r3, [pc, #132]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86da2:	4798      	blx	r3
	write_data(0x03U);
   86da4:	2003      	movs	r0, #3
   86da6:	4b20      	ldr	r3, [pc, #128]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86da8:	4798      	blx	r3
	write_data(0x11U);
   86daa:	2011      	movs	r0, #17
   86dac:	4b1e      	ldr	r3, [pc, #120]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86dae:	4798      	blx	r3
	write_data(0x07U);
   86db0:	2007      	movs	r0, #7
   86db2:	4b1d      	ldr	r3, [pc, #116]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86db4:	4798      	blx	r3
	write_data(0x31U);
   86db6:	2031      	movs	r0, #49	; 0x31
   86db8:	4b1b      	ldr	r3, [pc, #108]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86dba:	4798      	blx	r3
	write_data(0xc1U);
   86dbc:	20c1      	movs	r0, #193	; 0xc1
   86dbe:	4b1a      	ldr	r3, [pc, #104]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86dc0:	4798      	blx	r3
	write_data(0x48U);
   86dc2:	2048      	movs	r0, #72	; 0x48
   86dc4:	4b18      	ldr	r3, [pc, #96]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86dc6:	4798      	blx	r3
	write_data(0x08U);
   86dc8:	2008      	movs	r0, #8
   86dca:	4b17      	ldr	r3, [pc, #92]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86dcc:	4798      	blx	r3
	write_data(0x0fU);
   86dce:	200f      	movs	r0, #15
   86dd0:	4b15      	ldr	r3, [pc, #84]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86dd2:	4798      	blx	r3
	write_data(0x0cU);
   86dd4:	200c      	movs	r0, #12
   86dd6:	4b14      	ldr	r3, [pc, #80]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86dd8:	4798      	blx	r3
	write_data(0x31U);
   86dda:	2031      	movs	r0, #49	; 0x31
   86ddc:	4b12      	ldr	r3, [pc, #72]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86dde:	4798      	blx	r3
	write_data(0x36U);
   86de0:	2036      	movs	r0, #54	; 0x36
   86de2:	4b11      	ldr	r3, [pc, #68]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86de4:	4798      	blx	r3
	write_data(0x0fU);
   86de6:	200f      	movs	r0, #15
   86de8:	4b0f      	ldr	r3, [pc, #60]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86dea:	4798      	blx	r3
	write_command(0x11U);
   86dec:	2011      	movs	r0, #17
   86dee:	4b0d      	ldr	r3, [pc, #52]	; (86e24 <mw_hal_lcd_init+0x248>)
   86df0:	4798      	blx	r3
    mw_hal_delay_ms(120U);
   86df2:	2078      	movs	r0, #120	; 0x78
   86df4:	4b07      	ldr	r3, [pc, #28]	; (86e14 <mw_hal_lcd_init+0x238>)
   86df6:	4798      	blx	r3
	write_command(0x29U);
   86df8:	2029      	movs	r0, #41	; 0x29
   86dfa:	4b0a      	ldr	r3, [pc, #40]	; (86e24 <mw_hal_lcd_init+0x248>)
   86dfc:	4798      	blx	r3
	write_command(0x36U);
   86dfe:	2036      	movs	r0, #54	; 0x36
   86e00:	4b08      	ldr	r3, [pc, #32]	; (86e24 <mw_hal_lcd_init+0x248>)
   86e02:	4798      	blx	r3
	write_data(0x48U);
   86e04:	2048      	movs	r0, #72	; 0x48
   86e06:	4b08      	ldr	r3, [pc, #32]	; (86e28 <mw_hal_lcd_init+0x24c>)
   86e08:	4798      	blx	r3
}
   86e0a:	bf00      	nop
   86e0c:	bd80      	pop	{r7, pc}
   86e0e:	bf00      	nop
   86e10:	0009b875 	.word	0x0009b875
   86e14:	00086b65 	.word	0x00086b65
   86e18:	0009b859 	.word	0x0009b859
   86e1c:	40008000 	.word	0x40008000
   86e20:	0009be9d 	.word	0x0009be9d
   86e24:	00086b9d 	.word	0x00086b9d
   86e28:	00086bbd 	.word	0x00086bbd

00086e2c <mw_hal_lcd_get_display_width>:
#pragma GCC pop_options

int16_t mw_hal_lcd_get_display_width(void)
{
	return (LCD_DISPLAY_WIDTH_PIXELS);
}
   86e2c:	20f0      	movs	r0, #240	; 0xf0
   86e2e:	4770      	bx	lr

00086e30 <mw_hal_lcd_get_display_height>:

int16_t mw_hal_lcd_get_display_height(void)
{
	return (LCD_DISPLAY_HEIGHT_PIXELS);
}
   86e30:	f44f 70a0 	mov.w	r0, #320	; 0x140
   86e34:	4770      	bx	lr
   86e36:	bf00      	nop

00086e38 <mw_hal_lcd_pixel>:

void inline mw_hal_lcd_pixel(int16_t x, int16_t y, mw_hal_lcd_colour_t colour)
{
   86e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86e3c:	4604      	mov	r4, r0
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   86e3e:	4b2f      	ldr	r3, [pc, #188]	; (86efc <mw_hal_lcd_pixel+0xc4>)
			(((uint32_t)colour & 0x0000fc00UL) >> 5) |
   86e40:	0950      	lsrs	r0, r2, #5
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   86e42:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
   86e46:	ea03 2312 	and.w	r3, r3, r2, lsr #8
   86e4a:	4303      	orrs	r3, r0
   86e4c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   86e50:	431a      	orrs	r2, r3
	if (x != previous_x || previous_width != 1)
   86e52:	4f2b      	ldr	r7, [pc, #172]	; (86f00 <mw_hal_lcd_pixel+0xc8>)
{
   86e54:	b082      	sub	sp, #8
	rgb565_colour = __builtin_bswap16(rgb565_colour);
   86e56:	ba52      	rev16	r2, r2
     spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   86e58:	4b2a      	ldr	r3, [pc, #168]	; (86f04 <mw_hal_lcd_pixel+0xcc>)
{
   86e5a:	460e      	mov	r6, r1
     spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   86e5c:	482a      	ldr	r0, [pc, #168]	; (86f08 <mw_hal_lcd_pixel+0xd0>)
   86e5e:	210e      	movs	r1, #14
	rgb565_colour = __builtin_bswap16(rgb565_colour);
   86e60:	f8ad 2006 	strh.w	r2, [sp, #6]
     spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   86e64:	4798      	blx	r3
	if (x != previous_x || previous_width != 1)
   86e66:	f9b7 3000 	ldrsh.w	r3, [r7]
   86e6a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 86f2c <mw_hal_lcd_pixel+0xf4>
   86e6e:	42a3      	cmp	r3, r4
   86e70:	d03d      	beq.n	86eee <mw_hal_lcd_pixel+0xb6>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   86e72:	f04f 0908 	mov.w	r9, #8
   86e76:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 86f1c <mw_hal_lcd_pixel+0xe4>
        spi_send(&window_x_command, sizeof(window_x_command));
   86e7a:	2101      	movs	r1, #1
   86e7c:	4823      	ldr	r0, [pc, #140]	; (86f0c <mw_hal_lcd_pixel+0xd4>)
   86e7e:	4d24      	ldr	r5, [pc, #144]	; (86f10 <mw_hal_lcd_pixel+0xd8>)
   86e80:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
   86e84:	47a8      	blx	r5
        window_x_bounds[1] = (uint8_t)x;
   86e86:	4823      	ldr	r0, [pc, #140]	; (86f14 <mw_hal_lcd_pixel+0xdc>)
   86e88:	b2e3      	uxtb	r3, r4
   86e8a:	7043      	strb	r3, [r0, #1]
        window_x_bounds[3] = (uint8_t)x;
   86e8c:	70c3      	strb	r3, [r0, #3]
        spi_send(window_x_bounds, sizeof(window_x_bounds));
   86e8e:	2104      	movs	r1, #4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   86e90:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
   86e94:	47a8      	blx	r5
		previous_width = 1;
   86e96:	2301      	movs	r3, #1
		previous_x = x;
   86e98:	803c      	strh	r4, [r7, #0]
		previous_width = 1;
   86e9a:	f8aa 3000 	strh.w	r3, [sl]
	if (y != previous_y)
   86e9e:	4c1e      	ldr	r4, [pc, #120]	; (86f18 <mw_hal_lcd_pixel+0xe0>)
   86ea0:	f9b4 3000 	ldrsh.w	r3, [r4]
   86ea4:	42b3      	cmp	r3, r6
   86ea6:	d014      	beq.n	86ed2 <mw_hal_lcd_pixel+0x9a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   86ea8:	f04f 0808 	mov.w	r8, #8
   86eac:	4f1b      	ldr	r7, [pc, #108]	; (86f1c <mw_hal_lcd_pixel+0xe4>)
        spi_send(&window_y_command, sizeof(window_y_command));
   86eae:	2101      	movs	r1, #1
   86eb0:	481b      	ldr	r0, [pc, #108]	; (86f20 <mw_hal_lcd_pixel+0xe8>)
   86eb2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
   86eb6:	47a8      	blx	r5
        window_y_bounds[0] = (uint8_t)(y >> 8);
   86eb8:	481a      	ldr	r0, [pc, #104]	; (86f24 <mw_hal_lcd_pixel+0xec>)
   86eba:	f3c6 2207 	ubfx	r2, r6, #8, #8
        window_y_bounds[1] = (uint8_t)y;
   86ebe:	b2f3      	uxtb	r3, r6
        window_y_bounds[0] = (uint8_t)(y >> 8);
   86ec0:	7002      	strb	r2, [r0, #0]
        window_y_bounds[2] = (uint8_t)(y >> 8);
   86ec2:	7082      	strb	r2, [r0, #2]
        window_y_bounds[1] = (uint8_t)y;
   86ec4:	7043      	strb	r3, [r0, #1]
        window_y_bounds[3] = (uint8_t)y;
   86ec6:	70c3      	strb	r3, [r0, #3]
        spi_send(window_y_bounds, sizeof(window_y_bounds));
   86ec8:	2104      	movs	r1, #4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   86eca:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
   86ece:	47a8      	blx	r5
		previous_y = y;
   86ed0:	8026      	strh	r6, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   86ed2:	2608      	movs	r6, #8
   86ed4:	4c11      	ldr	r4, [pc, #68]	; (86f1c <mw_hal_lcd_pixel+0xe4>)
    spi_send(&pixel_data_command, sizeof(pixel_data_command));
   86ed6:	2101      	movs	r1, #1
   86ed8:	6366      	str	r6, [r4, #52]	; 0x34
   86eda:	4813      	ldr	r0, [pc, #76]	; (86f28 <mw_hal_lcd_pixel+0xf0>)
   86edc:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   86ede:	6326      	str	r6, [r4, #48]	; 0x30
    spi_send((uint8_t *)&rgb565_colour, sizeof(rgb565_colour));
   86ee0:	2102      	movs	r1, #2
   86ee2:	f10d 0006 	add.w	r0, sp, #6
   86ee6:	47a8      	blx	r5
#elif defined (MW_DISPLAY_ROTATION_180)
	pixel_rotated(LCD_DISPLAY_WIDTH_PIXELS - x - 1, LCD_DISPLAY_HEIGHT_PIXELS - 1 - y, colour);
#elif defined (MW_DISPLAY_ROTATION_270)
	pixel_rotated(LCD_DISPLAY_WIDTH_PIXELS - 1 - y, x, colour);
#endif
}
   86ee8:	b002      	add	sp, #8
   86eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (x != previous_x || previous_width != 1)
   86eee:	f9ba 3000 	ldrsh.w	r3, [sl]
   86ef2:	2b01      	cmp	r3, #1
   86ef4:	d1bd      	bne.n	86e72 <mw_hal_lcd_pixel+0x3a>
   86ef6:	4d06      	ldr	r5, [pc, #24]	; (86f10 <mw_hal_lcd_pixel+0xd8>)
   86ef8:	e7d1      	b.n	86e9e <mw_hal_lcd_pixel+0x66>
   86efa:	bf00      	nop
   86efc:	fffff800 	.word	0xfffff800
   86f00:	20070238 	.word	0x20070238
   86f04:	0009be9d 	.word	0x0009be9d
   86f08:	40008000 	.word	0x40008000
   86f0c:	000ab1af 	.word	0x000ab1af
   86f10:	00099ab1 	.word	0x00099ab1
   86f14:	200717f4 	.word	0x200717f4
   86f18:	2007023a 	.word	0x2007023a
   86f1c:	400e1400 	.word	0x400e1400
   86f20:	000ab1b0 	.word	0x000ab1b0
   86f24:	200717f8 	.word	0x200717f8
   86f28:	000ab1ae 	.word	0x000ab1ae
   86f2c:	20070236 	.word	0x20070236

00086f30 <mw_hal_lcd_filled_rectangle>:
void inline mw_hal_lcd_filled_rectangle(int16_t start_x,
		int16_t start_y,
		int16_t width,
		int16_t height,
		mw_hal_lcd_colour_t colour)
{
   86f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86f34:	4691      	mov	r9, r2
   86f36:	b083      	sub	sp, #12
    if (width > LCD_DISPLAY_WIDTH_PIXELS)
   86f38:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
{
   86f3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    if (width > LCD_DISPLAY_WIDTH_PIXELS)
   86f3e:	f300 8091 	bgt.w	87064 <mw_hal_lcd_filled_rectangle+0x134>
   86f42:	469a      	mov	sl, r3
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   86f44:	4b4d      	ldr	r3, [pc, #308]	; (8707c <mw_hal_lcd_filled_rectangle+0x14c>)
   86f46:	460c      	mov	r4, r1
			(((uint32_t)colour & 0x0000fc00UL) >> 5) |
   86f48:	0951      	lsrs	r1, r2, #5
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   86f4a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
   86f4e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
   86f52:	430b      	orrs	r3, r1
   86f54:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   86f58:	4313      	orrs	r3, r2
	rgb565_colour = __builtin_bswap16(rgb565_colour);
   86f5a:	ba5b      	rev16	r3, r3
	for (i = 0U; i < width; i++)
   86f5c:	f1b9 0f00 	cmp.w	r9, #0
   86f60:	4606      	mov	r6, r0
	rgb565_colour = __builtin_bswap16(rgb565_colour);
   86f62:	fa1f fc83 	uxth.w	ip, r3
	for (i = 0U; i < width; i++)
   86f66:	dd2c      	ble.n	86fc2 <mw_hal_lcd_filled_rectangle+0x92>
   86f68:	fa1f f589 	uxth.w	r5, r9
   86f6c:	1eaa      	subs	r2, r5, #2
   86f6e:	f3c2 024e 	ubfx	r2, r2, #1, #15
   86f72:	3201      	adds	r2, #1
   86f74:	1e68      	subs	r0, r5, #1
   86f76:	0051      	lsls	r1, r2, #1
   86f78:	2802      	cmp	r0, #2
   86f7a:	b289      	uxth	r1, r1
   86f7c:	d97a      	bls.n	87074 <mw_hal_lcd_filled_rectangle+0x144>
   86f7e:	f04f 0e00 	mov.w	lr, #0
   86f82:	483f      	ldr	r0, [pc, #252]	; (87080 <mw_hal_lcd_filled_rectangle+0x150>)
   86f84:	4677      	mov	r7, lr
   86f86:	4680      	mov	r8, r0
   86f88:	f36c 0e0f 	bfi	lr, ip, #0, #16
   86f8c:	f36c 4e1f 	bfi	lr, ip, #16, #16
   86f90:	3701      	adds	r7, #1
   86f92:	fa1f fc87 	uxth.w	ip, r7
   86f96:	4562      	cmp	r2, ip
		line_buffer[i] = rgb565_colour;
   86f98:	f848 eb04 	str.w	lr, [r8], #4
   86f9c:	d8f8      	bhi.n	86f90 <mw_hal_lcd_filled_rectangle+0x60>
   86f9e:	428d      	cmp	r5, r1
   86fa0:	b20f      	sxth	r7, r1
   86fa2:	d00e      	beq.n	86fc2 <mw_hal_lcd_filled_rectangle+0x92>
	for (i = 0U; i < width; i++)
   86fa4:	b2ba      	uxth	r2, r7
   86fa6:	1c51      	adds	r1, r2, #1
   86fa8:	b209      	sxth	r1, r1
   86faa:	4589      	cmp	r9, r1
		line_buffer[i] = rgb565_colour;
   86fac:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
	for (i = 0U; i < width; i++)
   86fb0:	dd07      	ble.n	86fc2 <mw_hal_lcd_filled_rectangle+0x92>
   86fb2:	3202      	adds	r2, #2
   86fb4:	b212      	sxth	r2, r2
   86fb6:	4591      	cmp	r9, r2
		line_buffer[i] = rgb565_colour;
   86fb8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
	for (i = 0U; i < width; i++)
   86fbc:	dd01      	ble.n	86fc2 <mw_hal_lcd_filled_rectangle+0x92>
		line_buffer[i] = rgb565_colour;
   86fbe:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
	if (start_x != previous_x || previous_width != width)
   86fc2:	4f30      	ldr	r7, [pc, #192]	; (87084 <mw_hal_lcd_filled_rectangle+0x154>)
    spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   86fc4:	4b30      	ldr	r3, [pc, #192]	; (87088 <mw_hal_lcd_filled_rectangle+0x158>)
   86fc6:	210e      	movs	r1, #14
   86fc8:	4830      	ldr	r0, [pc, #192]	; (8708c <mw_hal_lcd_filled_rectangle+0x15c>)
   86fca:	4798      	blx	r3
	if (start_x != previous_x || previous_width != width)
   86fcc:	f9b7 3000 	ldrsh.w	r3, [r7]
   86fd0:	4a2f      	ldr	r2, [pc, #188]	; (87090 <mw_hal_lcd_filled_rectangle+0x160>)
   86fd2:	42b3      	cmp	r3, r6
   86fd4:	d049      	beq.n	8706a <mw_hal_lcd_filled_rectangle+0x13a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   86fd6:	f04f 0b08 	mov.w	fp, #8
   86fda:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 870a4 <mw_hal_lcd_filled_rectangle+0x174>
   86fde:	9201      	str	r2, [sp, #4]
        spi_send(&window_x_command, sizeof(window_x_command));
   86fe0:	2101      	movs	r1, #1
   86fe2:	482c      	ldr	r0, [pc, #176]	; (87094 <mw_hal_lcd_filled_rectangle+0x164>)
   86fe4:	4d2c      	ldr	r5, [pc, #176]	; (87098 <mw_hal_lcd_filled_rectangle+0x168>)
   86fe6:	f8c8 b034 	str.w	fp, [r8, #52]	; 0x34
   86fea:	47a8      	blx	r5
        window_x_bounds[1] = (uint8_t)start_x;
   86fec:	b2f1      	uxtb	r1, r6
   86fee:	482b      	ldr	r0, [pc, #172]	; (8709c <mw_hal_lcd_filled_rectangle+0x16c>)
        window_x_bounds[3] = (uint8_t)(start_x + width - 1);
   86ff0:	f109 33ff 	add.w	r3, r9, #4294967295
   86ff4:	440b      	add	r3, r1
        window_x_bounds[1] = (uint8_t)start_x;
   86ff6:	7041      	strb	r1, [r0, #1]
        window_x_bounds[3] = (uint8_t)(start_x + width - 1);
   86ff8:	70c3      	strb	r3, [r0, #3]
        spi_send(window_x_bounds, sizeof(window_x_bounds));
   86ffa:	2104      	movs	r1, #4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   86ffc:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
   87000:	47a8      	blx	r5
		previous_width = width;
   87002:	9a01      	ldr	r2, [sp, #4]
		previous_x = start_x;
   87004:	803e      	strh	r6, [r7, #0]
		previous_width = width;
   87006:	f8a2 9000 	strh.w	r9, [r2]
	for (y = start_y; y < (start_y + height); y++)
   8700a:	44a2      	add	sl, r4
   8700c:	4554      	cmp	r4, sl
   8700e:	da26      	bge.n	8705e <mw_hal_lcd_filled_rectangle+0x12e>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   87010:	f04f 0808 	mov.w	r8, #8
   87014:	46c3      	mov	fp, r8
   87016:	4d20      	ldr	r5, [pc, #128]	; (87098 <mw_hal_lcd_filled_rectangle+0x168>)
   87018:	4f21      	ldr	r7, [pc, #132]	; (870a0 <mw_hal_lcd_filled_rectangle+0x170>)
   8701a:	4e22      	ldr	r6, [pc, #136]	; (870a4 <mw_hal_lcd_filled_rectangle+0x174>)
   8701c:	ea4f 0949 	mov.w	r9, r9, lsl #1
        spi_send(&window_y_command, sizeof(window_y_command));
   87020:	2101      	movs	r1, #1
   87022:	4821      	ldr	r0, [pc, #132]	; (870a8 <mw_hal_lcd_filled_rectangle+0x178>)
   87024:	f8c6 b034 	str.w	fp, [r6, #52]	; 0x34
   87028:	47a8      	blx	r5
        window_y_bounds[0] = (uint8_t)(y >> 8);
   8702a:	f3c4 2207 	ubfx	r2, r4, #8, #8
        window_y_bounds[1] = (uint8_t)y;
   8702e:	b2e3      	uxtb	r3, r4
        window_y_bounds[0] = (uint8_t)(y >> 8);
   87030:	703a      	strb	r2, [r7, #0]
        window_y_bounds[2] = (uint8_t)(y >> 8);
   87032:	70ba      	strb	r2, [r7, #2]
        window_y_bounds[1] = (uint8_t)y;
   87034:	707b      	strb	r3, [r7, #1]
        window_y_bounds[3] = (uint8_t)y;
   87036:	70fb      	strb	r3, [r7, #3]
        spi_send(window_y_bounds, sizeof(window_y_bounds));
   87038:	2104      	movs	r1, #4
   8703a:	4819      	ldr	r0, [pc, #100]	; (870a0 <mw_hal_lcd_filled_rectangle+0x170>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8703c:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
   87040:	47a8      	blx	r5
   87042:	3401      	adds	r4, #1
        spi_send(&pixel_data_command, sizeof(pixel_data_command));
   87044:	2101      	movs	r1, #1
   87046:	4819      	ldr	r0, [pc, #100]	; (870ac <mw_hal_lcd_filled_rectangle+0x17c>)
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   87048:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
   8704c:	47a8      	blx	r5
   8704e:	b224      	sxth	r4, r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   87050:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
        spi_send((uint8_t *)line_buffer, width * 2);        
   87054:	4649      	mov	r1, r9
   87056:	480a      	ldr	r0, [pc, #40]	; (87080 <mw_hal_lcd_filled_rectangle+0x150>)
   87058:	47a8      	blx	r5
	for (y = start_y; y < (start_y + height); y++)
   8705a:	4554      	cmp	r4, sl
   8705c:	dbe0      	blt.n	87020 <mw_hal_lcd_filled_rectangle+0xf0>
	previous_y = y - 1;
   8705e:	4b14      	ldr	r3, [pc, #80]	; (870b0 <mw_hal_lcd_filled_rectangle+0x180>)
   87060:	3c01      	subs	r4, #1
   87062:	801c      	strh	r4, [r3, #0]
#elif defined (MW_DISPLAY_ROTATION_180)
	filled_rectangle_rotated(LCD_DISPLAY_WIDTH_PIXELS - start_x - width, LCD_DISPLAY_HEIGHT_PIXELS - start_y - height, width, height, colour);
#elif defined (MW_DISPLAY_ROTATION_270)
	filled_rectangle_rotated(LCD_DISPLAY_WIDTH_PIXELS - start_y - height, start_x, height, width, colour);
#endif
}
   87064:	b003      	add	sp, #12
   87066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (start_x != previous_x || previous_width != width)
   8706a:	f9b2 3000 	ldrsh.w	r3, [r2]
   8706e:	454b      	cmp	r3, r9
   87070:	d1b1      	bne.n	86fd6 <mw_hal_lcd_filled_rectangle+0xa6>
   87072:	e7ca      	b.n	8700a <mw_hal_lcd_filled_rectangle+0xda>
	for (i = 0U; i < width; i++)
   87074:	2700      	movs	r7, #0
   87076:	4802      	ldr	r0, [pc, #8]	; (87080 <mw_hal_lcd_filled_rectangle+0x150>)
   87078:	e794      	b.n	86fa4 <mw_hal_lcd_filled_rectangle+0x74>
   8707a:	bf00      	nop
   8707c:	fffff800 	.word	0xfffff800
   87080:	20071614 	.word	0x20071614
   87084:	20070238 	.word	0x20070238
   87088:	0009be9d 	.word	0x0009be9d
   8708c:	40008000 	.word	0x40008000
   87090:	20070236 	.word	0x20070236
   87094:	000ab1af 	.word	0x000ab1af
   87098:	00099ab1 	.word	0x00099ab1
   8709c:	200717f4 	.word	0x200717f4
   870a0:	200717f8 	.word	0x200717f8
   870a4:	400e1400 	.word	0x400e1400
   870a8:	000ab1b0 	.word	0x000ab1b0
   870ac:	000ab1ae 	.word	0x000ab1ae
   870b0:	2007023a 	.word	0x2007023a

000870b4 <mw_hal_lcd_colour_bitmap_clip>:
		int16_t clip_start_x,
		int16_t clip_start_y,
		int16_t clip_width,
		int16_t clip_height,
		const uint8_t *image_data)
{
   870b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   870b8:	4682      	mov	sl, r0
   870ba:	b091      	sub	sp, #68	; 0x44
   870bc:	f9bd 9068 	ldrsh.w	r9, [sp, #104]	; 0x68
   870c0:	461c      	mov	r4, r3
   870c2:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
	mw_hal_lcd_colour_t pixel_colour;
	uint16_t rgb565_colour;

#if defined(MW_DISPLAY_ROTATION_0)
	/* check if pixels in data buffer are all to be drawn */
	if (image_start_x >= clip_start_x &&
   870c6:	45ca      	cmp	sl, r9
{
   870c8:	9107      	str	r1, [sp, #28]
   870ca:	4615      	mov	r5, r2
   870cc:	9303      	str	r3, [sp, #12]
   870ce:	f9bd 8070 	ldrsh.w	r8, [sp, #112]	; 0x70
   870d2:	f9bd 0074 	ldrsh.w	r0, [sp, #116]	; 0x74
	if (image_start_x >= clip_start_x &&
   870d6:	db04      	blt.n	870e2 <mw_hal_lcd_colour_bitmap_clip+0x2e>
   870d8:	9a03      	ldr	r2, [sp, #12]
   870da:	460b      	mov	r3, r1
   870dc:	4291      	cmp	r1, r2
   870de:	f280 80c0 	bge.w	87262 <mw_hal_lcd_colour_bitmap_clip+0x1ae>
   870e2:	b226      	sxth	r6, r4
		
		return;
	}
#endif	

	for (y = 0; y < (int16_t)bitmap_height; y++)
   870e4:	2e00      	cmp	r6, #0
   870e6:	dd44      	ble.n	87172 <mw_hal_lcd_colour_bitmap_clip+0xbe>
   870e8:	fa0f fb85 	sxth.w	fp, r5
   870ec:	f1bb 0f00 	cmp.w	fp, #0
   870f0:	dd3f      	ble.n	87172 <mw_hal_lcd_colour_bitmap_clip+0xbe>
   870f2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   870f6:	9a03      	ldr	r2, [sp, #12]
   870f8:	441c      	add	r4, r3
   870fa:	4402      	add	r2, r0
   870fc:	9206      	str	r2, [sp, #24]
   870fe:	b2a2      	uxth	r2, r4
   87100:	9209      	str	r2, [sp, #36]	; 0x24
   87102:	eb0b 024b 	add.w	r2, fp, fp, lsl #1
   87106:	920a      	str	r2, [sp, #40]	; 0x28
   87108:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   8710a:	465f      	mov	r7, fp
   8710c:	9201      	str	r2, [sp, #4]
   8710e:	2200      	movs	r2, #0
   87110:	46c3      	mov	fp, r8
   87112:	9202      	str	r2, [sp, #8]
   87114:	9300      	str	r3, [sp, #0]
        window_y_bounds[0] = (uint8_t)(y >> 8);
   87116:	2400      	movs	r4, #0
				pixel_colour = *(2 + image_data + (x + y * (int16_t)bitmap_width) * 3);
				pixel_colour <<= 8;
				pixel_colour += *(1 + image_data + (x + y * (int16_t)bitmap_width) * 3);
				pixel_colour <<= 8;
				pixel_colour += *(image_data + (x + y * (int16_t)bitmap_width) * 3);
				mw_hal_lcd_pixel(x + image_start_x, y + image_start_y, pixel_colour);
   87118:	f9bd 3000 	ldrsh.w	r3, [sp]
   8711c:	9a02      	ldr	r2, [sp, #8]
   8711e:	9305      	str	r3, [sp, #20]
        window_y_bounds[0] = (uint8_t)(y >> 8);
   87120:	f3c3 2307 	ubfx	r3, r3, #8, #8
   87124:	9308      	str	r3, [sp, #32]
   87126:	9b07      	ldr	r3, [sp, #28]
   87128:	9e01      	ldr	r6, [sp, #4]
   8712a:	eb03 0802 	add.w	r8, r3, r2
   8712e:	eb0a 0504 	add.w	r5, sl, r4
			if (x + image_start_x >= clip_start_x &&
   87132:	45a9      	cmp	r9, r5
   87134:	dc09      	bgt.n	8714a <mw_hal_lcd_colour_bitmap_clip+0x96>
					x + image_start_x < clip_start_x + clip_width &&
   87136:	eb0b 0209 	add.w	r2, fp, r9
			if (x + image_start_x >= clip_start_x &&
   8713a:	42aa      	cmp	r2, r5
   8713c:	dd05      	ble.n	8714a <mw_hal_lcd_colour_bitmap_clip+0x96>
					x + image_start_x < clip_start_x + clip_width &&
   8713e:	9b03      	ldr	r3, [sp, #12]
   87140:	4543      	cmp	r3, r8
   87142:	dc02      	bgt.n	8714a <mw_hal_lcd_colour_bitmap_clip+0x96>
					y + image_start_y >= clip_start_y &&
   87144:	9b06      	ldr	r3, [sp, #24]
   87146:	4543      	cmp	r3, r8
   87148:	dc16      	bgt.n	87178 <mw_hal_lcd_colour_bitmap_clip+0xc4>
   8714a:	3401      	adds	r4, #1
		for (x = 0; x < (int16_t)bitmap_width; x++)
   8714c:	b222      	sxth	r2, r4
   8714e:	4297      	cmp	r7, r2
   87150:	f106 0603 	add.w	r6, r6, #3
   87154:	dceb      	bgt.n	8712e <mw_hal_lcd_colour_bitmap_clip+0x7a>
   87156:	9a02      	ldr	r2, [sp, #8]
   87158:	990a      	ldr	r1, [sp, #40]	; 0x28
   8715a:	3201      	adds	r2, #1
   8715c:	9202      	str	r2, [sp, #8]
   8715e:	9a01      	ldr	r2, [sp, #4]
   87160:	9b00      	ldr	r3, [sp, #0]
   87162:	440a      	add	r2, r1
   87164:	3301      	adds	r3, #1
   87166:	9201      	str	r2, [sp, #4]
	for (y = 0; y < (int16_t)bitmap_height; y++)
   87168:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8716a:	b29b      	uxth	r3, r3
   8716c:	429a      	cmp	r2, r3
   8716e:	9300      	str	r3, [sp, #0]
   87170:	d1d1      	bne.n	87116 <mw_hal_lcd_colour_bitmap_clip+0x62>
			}
		}
	}
}
   87172:	b011      	add	sp, #68	; 0x44
   87174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pixel_colour = *(2 + image_data + (x + y * (int16_t)bitmap_width) * 3);
   87178:	78b0      	ldrb	r0, [r6, #2]
				pixel_colour += *(1 + image_data + (x + y * (int16_t)bitmap_width) * 3);
   8717a:	7872      	ldrb	r2, [r6, #1]
				pixel_colour += *(image_data + (x + y * (int16_t)bitmap_width) * 3);
   8717c:	7831      	ldrb	r1, [r6, #0]
				pixel_colour += *(1 + image_data + (x + y * (int16_t)bitmap_width) * 3);
   8717e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
				pixel_colour += *(image_data + (x + y * (int16_t)bitmap_width) * 3);
   87182:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   87186:	4b8c      	ldr	r3, [pc, #560]	; (873b8 <mw_hal_lcd_colour_bitmap_clip+0x304>)
			(((uint32_t)colour & 0x0000fc00UL) >> 5) |
   87188:	094a      	lsrs	r2, r1, #5
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   8718a:	f402 60fc 	and.w	r0, r2, #2016	; 0x7e0
   8718e:	ea03 2211 	and.w	r2, r3, r1, lsr #8
   87192:	4302      	orrs	r2, r0
   87194:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   87198:	430a      	orrs	r2, r1
	if (x != previous_x || previous_width != 1)
   8719a:	4b88      	ldr	r3, [pc, #544]	; (873bc <mw_hal_lcd_colour_bitmap_clip+0x308>)
	rgb565_colour = __builtin_bswap16(rgb565_colour);
   8719c:	ba52      	rev16	r2, r2
   8719e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
     spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   871a2:	210e      	movs	r1, #14
   871a4:	4a86      	ldr	r2, [pc, #536]	; (873c0 <mw_hal_lcd_colour_bitmap_clip+0x30c>)
   871a6:	4887      	ldr	r0, [pc, #540]	; (873c4 <mw_hal_lcd_colour_bitmap_clip+0x310>)
	if (x != previous_x || previous_width != 1)
   871a8:	9304      	str	r3, [sp, #16]
     spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   871aa:	4790      	blx	r2
	if (x != previous_x || previous_width != 1)
   871ac:	4b83      	ldr	r3, [pc, #524]	; (873bc <mw_hal_lcd_colour_bitmap_clip+0x308>)
   871ae:	f9b3 2000 	ldrsh.w	r2, [r3]
   871b2:	b22b      	sxth	r3, r5
   871b4:	429a      	cmp	r2, r3
   871b6:	4a84      	ldr	r2, [pc, #528]	; (873c8 <mw_hal_lcd_colour_bitmap_clip+0x314>)
   871b8:	920b      	str	r2, [sp, #44]	; 0x2c
   871ba:	d103      	bne.n	871c4 <mw_hal_lcd_colour_bitmap_clip+0x110>
   871bc:	f9b2 2000 	ldrsh.w	r2, [r2]
   871c0:	2a01      	cmp	r2, #1
   871c2:	d04b      	beq.n	8725c <mw_hal_lcd_colour_bitmap_clip+0x1a8>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   871c4:	2208      	movs	r2, #8
   871c6:	930d      	str	r3, [sp, #52]	; 0x34
   871c8:	4b80      	ldr	r3, [pc, #512]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
        spi_send(&window_x_command, sizeof(window_x_command));
   871ca:	2101      	movs	r1, #1
   871cc:	635a      	str	r2, [r3, #52]	; 0x34
   871ce:	4b80      	ldr	r3, [pc, #512]	; (873d0 <mw_hal_lcd_colour_bitmap_clip+0x31c>)
   871d0:	4880      	ldr	r0, [pc, #512]	; (873d4 <mw_hal_lcd_colour_bitmap_clip+0x320>)
   871d2:	9304      	str	r3, [sp, #16]
   871d4:	920c      	str	r2, [sp, #48]	; 0x30
   871d6:	4798      	blx	r3
        window_x_bounds[1] = (uint8_t)x;
   871d8:	487f      	ldr	r0, [pc, #508]	; (873d8 <mw_hal_lcd_colour_bitmap_clip+0x324>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   871da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   871dc:	497b      	ldr	r1, [pc, #492]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
   871de:	b2ed      	uxtb	r5, r5
   871e0:	7045      	strb	r5, [r0, #1]
        window_x_bounds[3] = (uint8_t)x;
   871e2:	70c5      	strb	r5, [r0, #3]
   871e4:	630a      	str	r2, [r1, #48]	; 0x30
        spi_send(window_x_bounds, sizeof(window_x_bounds));
   871e6:	9a04      	ldr	r2, [sp, #16]
   871e8:	2104      	movs	r1, #4
   871ea:	4790      	blx	r2
		previous_x = x;
   871ec:	4b73      	ldr	r3, [pc, #460]	; (873bc <mw_hal_lcd_colour_bitmap_clip+0x308>)
		previous_width = 1;
   871ee:	2201      	movs	r2, #1
		previous_x = x;
   871f0:	4619      	mov	r1, r3
   871f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   871f4:	800b      	strh	r3, [r1, #0]
		previous_width = 1;
   871f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   871f8:	801a      	strh	r2, [r3, #0]
	if (y != previous_y)
   871fa:	4d78      	ldr	r5, [pc, #480]	; (873dc <mw_hal_lcd_colour_bitmap_clip+0x328>)
   871fc:	9b05      	ldr	r3, [sp, #20]
   871fe:	f9b5 2000 	ldrsh.w	r2, [r5]
   87202:	429a      	cmp	r2, r3
   87204:	d01b      	beq.n	8723e <mw_hal_lcd_colour_bitmap_clip+0x18a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   87206:	2208      	movs	r2, #8
   87208:	4870      	ldr	r0, [pc, #448]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
        spi_send(&window_y_command, sizeof(window_y_command));
   8720a:	2101      	movs	r1, #1
   8720c:	6342      	str	r2, [r0, #52]	; 0x34
   8720e:	920b      	str	r2, [sp, #44]	; 0x2c
   87210:	4873      	ldr	r0, [pc, #460]	; (873e0 <mw_hal_lcd_colour_bitmap_clip+0x32c>)
   87212:	9a04      	ldr	r2, [sp, #16]
   87214:	4790      	blx	r2
        window_y_bounds[0] = (uint8_t)(y >> 8);
   87216:	4873      	ldr	r0, [pc, #460]	; (873e4 <mw_hal_lcd_colour_bitmap_clip+0x330>)
        window_y_bounds[1] = (uint8_t)y;
   87218:	f89d 1000 	ldrb.w	r1, [sp]
        window_y_bounds[0] = (uint8_t)(y >> 8);
   8721c:	f8dd e020 	ldr.w	lr, [sp, #32]
        window_y_bounds[1] = (uint8_t)y;
   87220:	7041      	strb	r1, [r0, #1]
        window_y_bounds[3] = (uint8_t)y;
   87222:	70c1      	strb	r1, [r0, #3]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   87224:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87226:	4969      	ldr	r1, [pc, #420]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
        window_y_bounds[0] = (uint8_t)(y >> 8);
   87228:	f880 e000 	strb.w	lr, [r0]
        window_y_bounds[2] = (uint8_t)(y >> 8);
   8722c:	f880 e002 	strb.w	lr, [r0, #2]
   87230:	630a      	str	r2, [r1, #48]	; 0x30
        spi_send(window_y_bounds, sizeof(window_y_bounds));
   87232:	9a04      	ldr	r2, [sp, #16]
   87234:	2104      	movs	r1, #4
   87236:	4790      	blx	r2
		previous_y = y;
   87238:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   8723c:	802b      	strh	r3, [r5, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8723e:	2508      	movs	r5, #8
   87240:	4b62      	ldr	r3, [pc, #392]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
    spi_send(&pixel_data_command, sizeof(pixel_data_command));
   87242:	2101      	movs	r1, #1
   87244:	635d      	str	r5, [r3, #52]	; 0x34
   87246:	9b04      	ldr	r3, [sp, #16]
   87248:	4867      	ldr	r0, [pc, #412]	; (873e8 <mw_hal_lcd_colour_bitmap_clip+0x334>)
   8724a:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8724c:	4a5f      	ldr	r2, [pc, #380]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
    spi_send((uint8_t *)&rgb565_colour, sizeof(rgb565_colour));
   8724e:	2102      	movs	r1, #2
   87250:	6315      	str	r5, [r2, #48]	; 0x30
   87252:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
   87256:	9b04      	ldr	r3, [sp, #16]
   87258:	4798      	blx	r3
   8725a:	e776      	b.n	8714a <mw_hal_lcd_colour_bitmap_clip+0x96>
   8725c:	4b5c      	ldr	r3, [pc, #368]	; (873d0 <mw_hal_lcd_colour_bitmap_clip+0x31c>)
   8725e:	9304      	str	r3, [sp, #16]
   87260:	e7cb      	b.n	871fa <mw_hal_lcd_colour_bitmap_clip+0x146>
			image_start_x + (int16_t)bitmap_width <= clip_start_x + clip_width &&
   87262:	b22f      	sxth	r7, r5
   87264:	eb0a 0107 	add.w	r1, sl, r7
   87268:	eb09 0208 	add.w	r2, r9, r8
			image_start_y >= clip_start_y &&
   8726c:	4291      	cmp	r1, r2
   8726e:	f73f af38 	bgt.w	870e2 <mw_hal_lcd_colour_bitmap_clip+0x2e>
			image_start_y + (int16_t)bitmap_height <= clip_start_y + clip_height &&
   87272:	b226      	sxth	r6, r4
   87274:	199a      	adds	r2, r3, r6
   87276:	9b03      	ldr	r3, [sp, #12]
   87278:	4403      	add	r3, r0
			image_start_x + (int16_t)bitmap_width <= clip_start_x + clip_width &&
   8727a:	429a      	cmp	r2, r3
   8727c:	f73f af32 	bgt.w	870e4 <mw_hal_lcd_colour_bitmap_clip+0x30>
			image_start_y + (int16_t)bitmap_height <= clip_start_y + clip_height &&
   87280:	2df0      	cmp	r5, #240	; 0xf0
   87282:	f63f af2f 	bhi.w	870e4 <mw_hal_lcd_colour_bitmap_clip+0x30>
		if ((image_start_x != previous_x) || (previous_width != bitmap_width))
   87286:	f8df 9134 	ldr.w	r9, [pc, #308]	; 873bc <mw_hal_lcd_colour_bitmap_clip+0x308>
		spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   8728a:	4b4d      	ldr	r3, [pc, #308]	; (873c0 <mw_hal_lcd_colour_bitmap_clip+0x30c>)
   8728c:	210e      	movs	r1, #14
   8728e:	484d      	ldr	r0, [pc, #308]	; (873c4 <mw_hal_lcd_colour_bitmap_clip+0x310>)
   87290:	4798      	blx	r3
		if ((image_start_x != previous_x) || (previous_width != bitmap_width))
   87292:	f9b9 3000 	ldrsh.w	r3, [r9]
   87296:	f8df 8130 	ldr.w	r8, [pc, #304]	; 873c8 <mw_hal_lcd_colour_bitmap_clip+0x314>
   8729a:	4553      	cmp	r3, sl
   8729c:	d103      	bne.n	872a6 <mw_hal_lcd_colour_bitmap_clip+0x1f2>
   8729e:	f9b8 3000 	ldrsh.w	r3, [r8]
   872a2:	42ab      	cmp	r3, r5
   872a4:	d017      	beq.n	872d6 <mw_hal_lcd_colour_bitmap_clip+0x222>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   872a6:	2208      	movs	r2, #8
   872a8:	4b48      	ldr	r3, [pc, #288]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
            spi_send(&window_x_command, sizeof(window_x_command));
   872aa:	2101      	movs	r1, #1
   872ac:	635a      	str	r2, [r3, #52]	; 0x34
   872ae:	4849      	ldr	r0, [pc, #292]	; (873d4 <mw_hal_lcd_colour_bitmap_clip+0x320>)
   872b0:	f8df b11c 	ldr.w	fp, [pc, #284]	; 873d0 <mw_hal_lcd_colour_bitmap_clip+0x31c>
   872b4:	47d8      	blx	fp
            window_x_bounds[1] = (uint8_t)image_start_x;
   872b6:	4848      	ldr	r0, [pc, #288]	; (873d8 <mw_hal_lcd_colour_bitmap_clip+0x324>)
   872b8:	fa5f f28a 	uxtb.w	r2, sl
            window_x_bounds[3] = (uint8_t)(image_start_x + bitmap_width - 1);
   872bc:	1e6b      	subs	r3, r5, #1
   872be:	4413      	add	r3, r2
            window_x_bounds[1] = (uint8_t)image_start_x;
   872c0:	7042      	strb	r2, [r0, #1]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   872c2:	2208      	movs	r2, #8
            window_x_bounds[3] = (uint8_t)(image_start_x + bitmap_width - 1);
   872c4:	70c3      	strb	r3, [r0, #3]
   872c6:	4b41      	ldr	r3, [pc, #260]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
            spi_send(window_x_bounds, sizeof(window_x_bounds));            
   872c8:	2104      	movs	r1, #4
   872ca:	631a      	str	r2, [r3, #48]	; 0x30
   872cc:	47d8      	blx	fp
			previous_x = image_start_x;
   872ce:	f8a9 a000 	strh.w	sl, [r9]
			previous_width = bitmap_width;
   872d2:	f8a8 7000 	strh.w	r7, [r8]
		for (y = 0; y < (int16_t)bitmap_height; y++)
   872d6:	2e00      	cmp	r6, #0
   872d8:	dd6c      	ble.n	873b4 <mw_hal_lcd_colour_bitmap_clip+0x300>
   872da:	1e6b      	subs	r3, r5, #1
   872dc:	b29b      	uxth	r3, r3
   872de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   872e2:	9300      	str	r3, [sp, #0]
   872e4:	006b      	lsls	r3, r5, #1
   872e6:	9303      	str	r3, [sp, #12]
   872e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   872ec:	f04f 0800 	mov.w	r8, #0
   872f0:	9302      	str	r3, [sp, #8]
   872f2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   872f6:	9301      	str	r3, [sp, #4]
   872f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   872fa:	4622      	mov	r2, r4
   872fc:	469a      	mov	sl, r3
   872fe:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 873d0 <mw_hal_lcd_colour_bitmap_clip+0x31c>
   87302:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 873e4 <mw_hal_lcd_colour_bitmap_clip+0x330>
				rgb565_colour = (uint16_t)((((uint32_t)pixel_colour & 0x00f80000UL) >> 8) |
   87306:	4d2c      	ldr	r5, [pc, #176]	; (873b8 <mw_hal_lcd_colour_bitmap_clip+0x304>)
			for (x = 0; x < (int16_t)bitmap_width; x++)
   87308:	2f00      	cmp	r7, #0
   8730a:	dd1e      	ble.n	8734a <mw_hal_lcd_colour_bitmap_clip+0x296>
   8730c:	4651      	mov	r1, sl
   8730e:	9b00      	ldr	r3, [sp, #0]
   87310:	4836      	ldr	r0, [pc, #216]	; (873ec <mw_hal_lcd_colour_bitmap_clip+0x338>)
   87312:	1cdc      	adds	r4, r3, #3
   87314:	4454      	add	r4, sl
				pixel_colour = *(2 + image_data + (x + y * (int16_t)bitmap_width) * 3);
   87316:	f891 c002 	ldrb.w	ip, [r1, #2]
				pixel_colour += *(1 + image_data + (x + y * (int16_t)bitmap_width) * 3);
   8731a:	784b      	ldrb	r3, [r1, #1]
				pixel_colour += *(image_data + (x + y * (int16_t)bitmap_width) * 3);
   8731c:	f811 eb03 	ldrb.w	lr, [r1], #3
				pixel_colour += *(1 + image_data + (x + y * (int16_t)bitmap_width) * 3);
   87320:	eb03 230c 	add.w	r3, r3, ip, lsl #8
				pixel_colour += *(image_data + (x + y * (int16_t)bitmap_width) * 3);
   87324:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
							(((uint32_t)pixel_colour & 0x0000fc00UL) >> 5) |
   87328:	ea4f 135e 	mov.w	r3, lr, lsr #5
				rgb565_colour = (uint16_t)((((uint32_t)pixel_colour & 0x00f80000UL) >> 8) |
   8732c:	f403 6cfc 	and.w	ip, r3, #2016	; 0x7e0
   87330:	ea05 231e 	and.w	r3, r5, lr, lsr #8
   87334:	ea43 030c 	orr.w	r3, r3, ip
   87338:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
   8733c:	ea43 030e 	orr.w	r3, r3, lr
				line_buffer[x] = __builtin_bswap16(rgb565_colour);
   87340:	ba5b      	rev16	r3, r3
			for (x = 0; x < (int16_t)bitmap_width; x++)
   87342:	42a1      	cmp	r1, r4
				line_buffer[x] = __builtin_bswap16(rgb565_colour);
   87344:	f820 3f02 	strh.w	r3, [r0, #2]!
			for (x = 0; x < (int16_t)bitmap_width; x++)
   87348:	d1e5      	bne.n	87316 <mw_hal_lcd_colour_bitmap_clip+0x262>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8734a:	2408      	movs	r4, #8
   8734c:	4b1f      	ldr	r3, [pc, #124]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
   8734e:	9204      	str	r2, [sp, #16]
           spi_send(&window_y_command, sizeof(window_y_command));
   87350:	2101      	movs	r1, #1
   87352:	635c      	str	r4, [r3, #52]	; 0x34
   87354:	4822      	ldr	r0, [pc, #136]	; (873e0 <mw_hal_lcd_colour_bitmap_clip+0x32c>)
   87356:	47d8      	blx	fp
            window_y_bounds[0] = (uint8_t)((image_start_y + y) >> 8);
   87358:	9b07      	ldr	r3, [sp, #28]
            spi_send(window_y_bounds, sizeof(window_y_bounds));
   8735a:	4822      	ldr	r0, [pc, #136]	; (873e4 <mw_hal_lcd_colour_bitmap_clip+0x330>)
            window_y_bounds[0] = (uint8_t)((image_start_y + y) >> 8);
   8735c:	eb03 0108 	add.w	r1, r3, r8
   87360:	9b02      	ldr	r3, [sp, #8]
   87362:	f3c1 2107 	ubfx	r1, r1, #8, #8
   87366:	4443      	add	r3, r8
   87368:	b2db      	uxtb	r3, r3
            window_y_bounds[1] = (uint8_t)(image_start_y + y);
   8736a:	f889 3001 	strb.w	r3, [r9, #1]
            window_y_bounds[3] = (uint8_t)(image_start_y + y);
   8736e:	f889 3003 	strb.w	r3, [r9, #3]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   87372:	4b16      	ldr	r3, [pc, #88]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
            window_y_bounds[0] = (uint8_t)((image_start_y + y) >> 8);
   87374:	f889 1000 	strb.w	r1, [r9]
            window_y_bounds[2] = (uint8_t)((image_start_y + y) >> 8);
   87378:	f889 1002 	strb.w	r1, [r9, #2]
            spi_send(window_y_bounds, sizeof(window_y_bounds));
   8737c:	2104      	movs	r1, #4
   8737e:	631c      	str	r4, [r3, #48]	; 0x30
   87380:	47d8      	blx	fp
            spi_send(&pixel_data_command, sizeof(pixel_data_command));
   87382:	2101      	movs	r1, #1
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   87384:	4b11      	ldr	r3, [pc, #68]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
   87386:	4818      	ldr	r0, [pc, #96]	; (873e8 <mw_hal_lcd_colour_bitmap_clip+0x334>)
   87388:	635c      	str	r4, [r3, #52]	; 0x34
   8738a:	4488      	add	r8, r1
   8738c:	47d8      	blx	fp
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8738e:	4b0f      	ldr	r3, [pc, #60]	; (873cc <mw_hal_lcd_colour_bitmap_clip+0x318>)
            spi_send((uint8_t *)line_buffer, (size_t)(bitmap_width * 2U));       
   87390:	4817      	ldr	r0, [pc, #92]	; (873f0 <mw_hal_lcd_colour_bitmap_clip+0x33c>)
   87392:	631c      	str	r4, [r3, #48]	; 0x30
   87394:	9903      	ldr	r1, [sp, #12]
   87396:	47d8      	blx	fp
   87398:	9a01      	ldr	r2, [sp, #4]
		for (y = 0; y < (int16_t)bitmap_height; y++)
   8739a:	fa0f f388 	sxth.w	r3, r8
   8739e:	429e      	cmp	r6, r3
   873a0:	4492      	add	sl, r2
   873a2:	9a04      	ldr	r2, [sp, #16]
   873a4:	dcb0      	bgt.n	87308 <mw_hal_lcd_colour_bitmap_clip+0x254>
   873a6:	4614      	mov	r4, r2
		previous_y = image_start_y + y - 1;
   873a8:	9b07      	ldr	r3, [sp, #28]
   873aa:	4a0c      	ldr	r2, [pc, #48]	; (873dc <mw_hal_lcd_colour_bitmap_clip+0x328>)
   873ac:	3b01      	subs	r3, #1
   873ae:	441c      	add	r4, r3
   873b0:	8014      	strh	r4, [r2, #0]
		return;
   873b2:	e6de      	b.n	87172 <mw_hal_lcd_colour_bitmap_clip+0xbe>
		for (y = 0; y < (int16_t)bitmap_height; y++)
   873b4:	2400      	movs	r4, #0
   873b6:	e7f7      	b.n	873a8 <mw_hal_lcd_colour_bitmap_clip+0x2f4>
   873b8:	fffff800 	.word	0xfffff800
   873bc:	20070238 	.word	0x20070238
   873c0:	0009be9d 	.word	0x0009be9d
   873c4:	40008000 	.word	0x40008000
   873c8:	20070236 	.word	0x20070236
   873cc:	400e1400 	.word	0x400e1400
   873d0:	00099ab1 	.word	0x00099ab1
   873d4:	000ab1af 	.word	0x000ab1af
   873d8:	200717f4 	.word	0x200717f4
   873dc:	2007023a 	.word	0x2007023a
   873e0:	000ab1b0 	.word	0x000ab1b0
   873e4:	200717f8 	.word	0x200717f8
   873e8:	000ab1ae 	.word	0x000ab1ae
   873ec:	20071612 	.word	0x20071612
   873f0:	20071614 	.word	0x20071614

000873f4 <mw_hal_lcd_monochrome_bitmap_clip>:
		int16_t clip_width,
		int16_t clip_height,
		mw_hal_lcd_colour_t fg_colour,
		mw_hal_lcd_colour_t bg_colour,
		const uint8_t *image_data)
{
   873f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   873f8:	b0a3      	sub	sp, #140	; 0x8c
   873fa:	f9bd b0b0 	ldrsh.w	fp, [sp, #176]	; 0xb0
   873fe:	9112      	str	r1, [sp, #72]	; 0x48
   87400:	4615      	mov	r5, r2
   87402:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
   87406:	f9bd 20b4 	ldrsh.w	r2, [sp, #180]	; 0xb4
    uint16_t rgb565_fg_colour = (mw_hal_lcd_colour_t)0;
    uint16_t rgb565_bg_colour = (mw_hal_lcd_colour_t)0;    
    bool use_line_buffer = false;
    
#if defined(MW_DISPLAY_ROTATION_0)
	if (image_start_x >= clip_start_x &&
   8740a:	4558      	cmp	r0, fp
{
   8740c:	9202      	str	r2, [sp, #8]
   8740e:	9016      	str	r0, [sp, #88]	; 0x58
   87410:	f9bd 20b8 	ldrsh.w	r2, [sp, #184]	; 0xb8
   87414:	911a      	str	r1, [sp, #104]	; 0x68
   87416:	9f30      	ldr	r7, [sp, #192]	; 0xc0
   87418:	9e31      	ldr	r6, [sp, #196]	; 0xc4
	if (image_start_x >= clip_start_x &&
   8741a:	db04      	blt.n	87426 <mw_hal_lcd_monochrome_bitmap_clip+0x32>
   8741c:	9912      	ldr	r1, [sp, #72]	; 0x48
   8741e:	9802      	ldr	r0, [sp, #8]
   87420:	4281      	cmp	r1, r0
   87422:	f280 817b 	bge.w	8771c <mw_hal_lcd_monochrome_bitmap_clip+0x328>
   87426:	b21b      	sxth	r3, r3
   87428:	9315      	str	r3, [sp, #84]	; 0x54
   8742a:	b22b      	sxth	r3, r5
   8742c:	9317      	str	r3, [sp, #92]	; 0x5c
{
   8742e:	2300      	movs	r3, #0
   87430:	9915      	ldr	r1, [sp, #84]	; 0x54
   87432:	9309      	str	r3, [sp, #36]	; 0x24
   87434:	911f      	str	r1, [sp, #124]	; 0x7c
    uint16_t rgb565_bg_colour = (mw_hal_lcd_colour_t)0;    
   87436:	9319      	str	r3, [sp, #100]	; 0x64
    uint16_t rgb565_fg_colour = (mw_hal_lcd_colour_t)0;
   87438:	9318      	str	r3, [sp, #96]	; 0x60
            previous_x = image_start_x;
            previous_width = bitmap_width;
        }
    }
	
	array_width_bytes = (int16_t)bitmap_width / 8;
   8743a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   8743c:	460b      	mov	r3, r1
   8743e:	2900      	cmp	r1, #0
   87440:	bfb8      	it	lt
   87442:	3307      	addlt	r3, #7
   87444:	f343 03cf 	sbfx	r3, r3, #3, #16
	if ((bitmap_width % 8U) > 0U)
   87448:	0769      	lsls	r1, r5, #29
	array_width_bytes = (int16_t)bitmap_width / 8;
   8744a:	930f      	str	r3, [sp, #60]	; 0x3c
	if ((bitmap_width % 8U) > 0U)
   8744c:	d002      	beq.n	87454 <mw_hal_lcd_monochrome_bitmap_clip+0x60>
	{
		array_width_bytes++;
   8744e:	3301      	adds	r3, #1
   87450:	b21b      	sxth	r3, r3
   87452:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	for (y = 0; y < (int16_t)bitmap_height; y++)
   87454:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87456:	2b00      	cmp	r3, #0
   87458:	f340 81ca 	ble.w	877f0 <mw_hal_lcd_monochrome_bitmap_clip+0x3fc>
   8745c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   8745e:	46d9      	mov	r9, fp
   87460:	930e      	str	r3, [sp, #56]	; 0x38

			ioport_set_pin_level(LCD_DC_PIN, false);
            spi_send(&pixel_data_command, sizeof(pixel_data_command));

			ioport_set_pin_level(LCD_DC_PIN, true);
            spi_send((uint8_t *)line_buffer, (size_t)(bitmap_width * 2U));       
   87462:	2300      	movs	r3, #0
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   87464:	499f      	ldr	r1, [pc, #636]	; (876e4 <mw_hal_lcd_monochrome_bitmap_clip+0x2f0>)
			(((uint32_t)colour & 0x0000fc00UL) >> 5) |
   87466:	0974      	lsrs	r4, r6, #5
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   87468:	ea01 2016 	and.w	r0, r1, r6, lsr #8
            spi_send((uint8_t *)line_buffer, (size_t)(bitmap_width * 2U));       
   8746c:	930c      	str	r3, [sp, #48]	; 0x30
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   8746e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
			(((uint32_t)colour & 0x0000fc00UL) >> 5) |
   87472:	097b      	lsrs	r3, r7, #5
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   87474:	ea01 2117 	and.w	r1, r1, r7, lsr #8
   87478:	4320      	orrs	r0, r4
   8747a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
   8747e:	f3c6 06c4 	ubfx	r6, r6, #3, #5
   87482:	430b      	orrs	r3, r1
   87484:	4306      	orrs	r6, r0
   87486:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   8748a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8748c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
   87490:	433b      	orrs	r3, r7
   87492:	b29b      	uxth	r3, r3
   87494:	911b      	str	r1, [sp, #108]	; 0x6c
   87496:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8749a:	931c      	str	r3, [sp, #112]	; 0x70
   8749c:	b28b      	uxth	r3, r1
            spi_send((uint8_t *)line_buffer, (size_t)(bitmap_width * 2U));       
   8749e:	0068      	lsls	r0, r5, #1
   874a0:	9305      	str	r3, [sp, #20]
   874a2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   874a6:	901e      	str	r0, [sp, #120]	; 0x78
	rgb565_colour = (uint16_t)((((uint32_t)colour & 0x00f80000UL) >> 8) |
   874a8:	b2b0      	uxth	r0, r6
   874aa:	901d      	str	r0, [sp, #116]	; 0x74
   874ac:	930a      	str	r3, [sp, #40]	; 0x28
   874ae:	9200      	str	r2, [sp, #0]
		for (a = 0; a < array_width_bytes; a++)
   874b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   874b2:	2b00      	cmp	r3, #0
   874b4:	dd5b      	ble.n	8756e <mw_hal_lcd_monochrome_bitmap_clip+0x17a>
                            mw_hal_lcd_pixel((a * 8) + x + image_start_x, y + image_start_y, bg_colour);
   874b6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
						y + image_start_y < clip_start_y + clip_height)
   874ba:	9a02      	ldr	r2, [sp, #8]
                            mw_hal_lcd_pixel((a * 8) + x + image_start_x, y + image_start_y, bg_colour);
   874bc:	930b      	str	r3, [sp, #44]	; 0x2c
        window_y_bounds[0] = (uint8_t)(y >> 8);
   874be:	f3c3 2307 	ubfx	r3, r3, #8, #8
   874c2:	9310      	str	r3, [sp, #64]	; 0x40
						y + image_start_y < clip_start_y + clip_height)
   874c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   874c6:	990c      	ldr	r1, [sp, #48]	; 0x30
   874c8:	4413      	add	r3, r2
   874ca:	9307      	str	r3, [sp, #28]
   874cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
        window_y_bounds[0] = (uint8_t)(y >> 8);
   874ce:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
   874d2:	440b      	add	r3, r1
   874d4:	9303      	str	r3, [sp, #12]
   874d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   874d8:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
   874dc:	9301      	str	r3, [sp, #4]
   874de:	4653      	mov	r3, sl
   874e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   874e2:	46da      	mov	sl, fp
   874e4:	4693      	mov	fp, r2
   874e6:	461a      	mov	r2, r3
   874e8:	f8df 822c 	ldr.w	r8, [pc, #556]	; 87718 <mw_hal_lcd_monochrome_bitmap_clip+0x324>
			image_byte = image_data[(y * array_width_bytes) + a];
   874ec:	9b01      	ldr	r3, [sp, #4]
   874ee:	4655      	mov	r5, sl
   874f0:	4619      	mov	r1, r3
   874f2:	f811 3b01 	ldrb.w	r3, [r1], #1
   874f6:	4647      	mov	r7, r8
   874f8:	9304      	str	r3, [sp, #16]
   874fa:	4613      	mov	r3, r2
   874fc:	2400      	movs	r4, #0
   874fe:	4652      	mov	r2, sl
			mask = 0x80U;
   87500:	2680      	movs	r6, #128	; 0x80
			image_byte = image_data[(y * array_width_bytes) + a];
   87502:	46c2      	mov	sl, r8
   87504:	4698      	mov	r8, r3
   87506:	9101      	str	r1, [sp, #4]
				if ((a * 8) + x == (int16_t)bitmap_width)
   87508:	455c      	cmp	r4, fp
   8750a:	d022      	beq.n	87552 <mw_hal_lcd_monochrome_bitmap_clip+0x15e>
				if ((a * 8) + x + image_start_x >= clip_start_x &&
   8750c:	45a9      	cmp	r9, r5
   8750e:	dc17      	bgt.n	87540 <mw_hal_lcd_monochrome_bitmap_clip+0x14c>
						(a * 8) + x + image_start_x < clip_start_x + clip_width &&
   87510:	9b00      	ldr	r3, [sp, #0]
   87512:	444b      	add	r3, r9
				if ((a * 8) + x + image_start_x >= clip_start_x &&
   87514:	42ab      	cmp	r3, r5
   87516:	dd13      	ble.n	87540 <mw_hal_lcd_monochrome_bitmap_clip+0x14c>
						(a * 8) + x + image_start_x < clip_start_x + clip_width &&
   87518:	9b02      	ldr	r3, [sp, #8]
   8751a:	9903      	ldr	r1, [sp, #12]
   8751c:	4618      	mov	r0, r3
   8751e:	4288      	cmp	r0, r1
   87520:	dc0e      	bgt.n	87540 <mw_hal_lcd_monochrome_bitmap_clip+0x14c>
						y + image_start_y >= clip_start_y &&
   87522:	9b07      	ldr	r3, [sp, #28]
   87524:	4618      	mov	r0, r3
   87526:	4288      	cmp	r0, r1
   87528:	dd0a      	ble.n	87540 <mw_hal_lcd_monochrome_bitmap_clip+0x14c>
                    if (use_line_buffer)
   8752a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8752c:	2b00      	cmp	r3, #0
   8752e:	d03c      	beq.n	875aa <mw_hal_lcd_monochrome_bitmap_clip+0x1b6>
                        if ((image_byte & mask) == 0U)
   87530:	9b04      	ldr	r3, [sp, #16]
   87532:	4233      	tst	r3, r6
                            line_buffer[(a * 8) + x] = rgb565_fg_colour;
   87534:	bf0c      	ite	eq
   87536:	f8bd 3060 	ldrheq.w	r3, [sp, #96]	; 0x60
                            line_buffer[(a * 8) + x] = rgb565_bg_colour;
   8753a:	f8bd 3064 	ldrhne.w	r3, [sp, #100]	; 0x64
   8753e:	803b      	strh	r3, [r7, #0]
   87540:	3401      	adds	r4, #1
			for (x = 0; x < 8; x++)
   87542:	2c08      	cmp	r4, #8
				mask >>= 1;
   87544:	ea4f 0656 	mov.w	r6, r6, lsr #1
   87548:	f107 0702 	add.w	r7, r7, #2
   8754c:	f105 0501 	add.w	r5, r5, #1
			for (x = 0; x < 8; x++)
   87550:	d1da      	bne.n	87508 <mw_hal_lcd_monochrome_bitmap_clip+0x114>
   87552:	4643      	mov	r3, r8
   87554:	46d0      	mov	r8, sl
   87556:	4692      	mov	sl, r2
   87558:	3308      	adds	r3, #8
   8755a:	b29a      	uxth	r2, r3
		for (a = 0; a < array_width_bytes; a++)
   8755c:	9b05      	ldr	r3, [sp, #20]
   8755e:	f108 0810 	add.w	r8, r8, #16
   87562:	4293      	cmp	r3, r2
   87564:	f10a 0a08 	add.w	sl, sl, #8
   87568:	f1ab 0b08 	sub.w	fp, fp, #8
   8756c:	d1be      	bne.n	874ec <mw_hal_lcd_monochrome_bitmap_clip+0xf8>
        if (use_line_buffer)
   8756e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87570:	2b00      	cmp	r3, #0
   87572:	f040 8092 	bne.w	8769a <mw_hal_lcd_monochrome_bitmap_clip+0x2a6>
   87576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87578:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8757a:	3201      	adds	r2, #1
   8757c:	b292      	uxth	r2, r2
   8757e:	920a      	str	r2, [sp, #40]	; 0x28
   87580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87584:	440a      	add	r2, r1
   87586:	3301      	adds	r3, #1
   87588:	920e      	str	r2, [sp, #56]	; 0x38
	for (y = 0; y < (int16_t)bitmap_height; y++)
   8758a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8758c:	930c      	str	r3, [sp, #48]	; 0x30
   8758e:	b21b      	sxth	r3, r3
   87590:	4293      	cmp	r3, r2
   87592:	db8d      	blt.n	874b0 <mw_hal_lcd_monochrome_bitmap_clip+0xbc>
        }
	}
	
    if (use_line_buffer)
   87594:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87596:	b12b      	cbz	r3, 875a4 <mw_hal_lcd_monochrome_bitmap_clip+0x1b0>
    {
        previous_y = image_start_y + y - 1;
   87598:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8759a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8759c:	3b01      	subs	r3, #1
   8759e:	4a52      	ldr	r2, [pc, #328]	; (876e8 <mw_hal_lcd_monochrome_bitmap_clip+0x2f4>)
   875a0:	440b      	add	r3, r1
   875a2:	8013      	strh	r3, [r2, #0]
    }
}
   875a4:	b023      	add	sp, #140	; 0x8c
   875a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        if ((image_byte & mask) == 0U)
   875aa:	9b04      	ldr	r3, [sp, #16]
   875ac:	9206      	str	r2, [sp, #24]
   875ae:	4233      	tst	r3, r6
	rgb565_colour = __builtin_bswap16(rgb565_colour);
   875b0:	bf0c      	ite	eq
   875b2:	f8bd 3070 	ldrheq.w	r3, [sp, #112]	; 0x70
   875b6:	f8bd 3074 	ldrhne.w	r3, [sp, #116]	; 0x74
     spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   875ba:	4a4c      	ldr	r2, [pc, #304]	; (876ec <mw_hal_lcd_monochrome_bitmap_clip+0x2f8>)
	rgb565_colour = __builtin_bswap16(rgb565_colour);
   875bc:	ba5b      	rev16	r3, r3
   875be:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
     spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   875c2:	210e      	movs	r1, #14
   875c4:	eb08 0304 	add.w	r3, r8, r4
   875c8:	4849      	ldr	r0, [pc, #292]	; (876f0 <mw_hal_lcd_monochrome_bitmap_clip+0x2fc>)
   875ca:	9308      	str	r3, [sp, #32]
   875cc:	4790      	blx	r2
	if (x != previous_x || previous_width != 1)
   875ce:	4a49      	ldr	r2, [pc, #292]	; (876f4 <mw_hal_lcd_monochrome_bitmap_clip+0x300>)
   875d0:	f9b2 3000 	ldrsh.w	r3, [r2]
   875d4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
   875d8:	4293      	cmp	r3, r2
   875da:	4b47      	ldr	r3, [pc, #284]	; (876f8 <mw_hal_lcd_monochrome_bitmap_clip+0x304>)
   875dc:	9211      	str	r2, [sp, #68]	; 0x44
   875de:	930d      	str	r3, [sp, #52]	; 0x34
   875e0:	9a06      	ldr	r2, [sp, #24]
   875e2:	d103      	bne.n	875ec <mw_hal_lcd_monochrome_bitmap_clip+0x1f8>
   875e4:	f9b3 3000 	ldrsh.w	r3, [r3]
   875e8:	2b01      	cmp	r3, #1
   875ea:	d078      	beq.n	876de <mw_hal_lcd_monochrome_bitmap_clip+0x2ea>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   875ec:	2308      	movs	r3, #8
   875ee:	9214      	str	r2, [sp, #80]	; 0x50
   875f0:	4a42      	ldr	r2, [pc, #264]	; (876fc <mw_hal_lcd_monochrome_bitmap_clip+0x308>)
        spi_send(&window_x_command, sizeof(window_x_command));
   875f2:	2101      	movs	r1, #1
   875f4:	6353      	str	r3, [r2, #52]	; 0x34
   875f6:	9313      	str	r3, [sp, #76]	; 0x4c
   875f8:	4b41      	ldr	r3, [pc, #260]	; (87700 <mw_hal_lcd_monochrome_bitmap_clip+0x30c>)
   875fa:	4842      	ldr	r0, [pc, #264]	; (87704 <mw_hal_lcd_monochrome_bitmap_clip+0x310>)
   875fc:	9306      	str	r3, [sp, #24]
   875fe:	4798      	blx	r3
   87600:	f89d 1020 	ldrb.w	r1, [sp, #32]
        window_x_bounds[1] = (uint8_t)x;
   87604:	4840      	ldr	r0, [pc, #256]	; (87708 <mw_hal_lcd_monochrome_bitmap_clip+0x314>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   87606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87608:	7041      	strb	r1, [r0, #1]
        window_x_bounds[3] = (uint8_t)x;
   8760a:	70c1      	strb	r1, [r0, #3]
   8760c:	493b      	ldr	r1, [pc, #236]	; (876fc <mw_hal_lcd_monochrome_bitmap_clip+0x308>)
   8760e:	630b      	str	r3, [r1, #48]	; 0x30
        spi_send(window_x_bounds, sizeof(window_x_bounds));
   87610:	9a06      	ldr	r2, [sp, #24]
   87612:	2104      	movs	r1, #4
   87614:	4790      	blx	r2
		previous_width = 1;
   87616:	2301      	movs	r3, #1
		previous_x = x;
   87618:	4a36      	ldr	r2, [pc, #216]	; (876f4 <mw_hal_lcd_monochrome_bitmap_clip+0x300>)
   8761a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   8761e:	8011      	strh	r1, [r2, #0]
		previous_width = 1;
   87620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87622:	8013      	strh	r3, [r2, #0]
   87624:	9a14      	ldr	r2, [sp, #80]	; 0x50
	if (y != previous_y)
   87626:	4b30      	ldr	r3, [pc, #192]	; (876e8 <mw_hal_lcd_monochrome_bitmap_clip+0x2f4>)
   87628:	f9b3 1000 	ldrsh.w	r1, [r3]
   8762c:	9308      	str	r3, [sp, #32]
   8762e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87630:	4299      	cmp	r1, r3
   87632:	d01f      	beq.n	87674 <mw_hal_lcd_monochrome_bitmap_clip+0x280>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   87634:	2008      	movs	r0, #8
   87636:	920d      	str	r2, [sp, #52]	; 0x34
   87638:	4a30      	ldr	r2, [pc, #192]	; (876fc <mw_hal_lcd_monochrome_bitmap_clip+0x308>)
        spi_send(&window_y_command, sizeof(window_y_command));
   8763a:	2101      	movs	r1, #1
   8763c:	6350      	str	r0, [r2, #52]	; 0x34
   8763e:	9a06      	ldr	r2, [sp, #24]
   87640:	4832      	ldr	r0, [pc, #200]	; (8770c <mw_hal_lcd_monochrome_bitmap_clip+0x318>)
   87642:	4790      	blx	r2
        window_y_bounds[0] = (uint8_t)(y >> 8);
   87644:	4832      	ldr	r0, [pc, #200]	; (87710 <mw_hal_lcd_monochrome_bitmap_clip+0x31c>)
   87646:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
        window_y_bounds[1] = (uint8_t)y;
   8764a:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
        window_y_bounds[0] = (uint8_t)(y >> 8);
   8764e:	f880 e000 	strb.w	lr, [r0]
        window_y_bounds[2] = (uint8_t)(y >> 8);
   87652:	f880 e002 	strb.w	lr, [r0, #2]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   87656:	f04f 0e08 	mov.w	lr, #8
        window_y_bounds[1] = (uint8_t)y;
   8765a:	7041      	strb	r1, [r0, #1]
        window_y_bounds[3] = (uint8_t)y;
   8765c:	70c1      	strb	r1, [r0, #3]
   8765e:	4927      	ldr	r1, [pc, #156]	; (876fc <mw_hal_lcd_monochrome_bitmap_clip+0x308>)
   87660:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
        spi_send(window_y_bounds, sizeof(window_y_bounds));
   87664:	9a06      	ldr	r2, [sp, #24]
   87666:	2104      	movs	r1, #4
   87668:	4790      	blx	r2
		previous_y = y;
   8766a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   8766e:	9b08      	ldr	r3, [sp, #32]
   87670:	801a      	strh	r2, [r3, #0]
   87672:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   87674:	2308      	movs	r3, #8
   87676:	920d      	str	r2, [sp, #52]	; 0x34
   87678:	4a20      	ldr	r2, [pc, #128]	; (876fc <mw_hal_lcd_monochrome_bitmap_clip+0x308>)
    spi_send(&pixel_data_command, sizeof(pixel_data_command));
   8767a:	2101      	movs	r1, #1
   8767c:	6353      	str	r3, [r2, #52]	; 0x34
   8767e:	4825      	ldr	r0, [pc, #148]	; (87714 <mw_hal_lcd_monochrome_bitmap_clip+0x320>)
   87680:	9308      	str	r3, [sp, #32]
   87682:	9b06      	ldr	r3, [sp, #24]
   87684:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   87686:	4a1d      	ldr	r2, [pc, #116]	; (876fc <mw_hal_lcd_monochrome_bitmap_clip+0x308>)
   87688:	9b08      	ldr	r3, [sp, #32]
    spi_send((uint8_t *)&rgb565_colour, sizeof(rgb565_colour));
   8768a:	2102      	movs	r1, #2
   8768c:	6313      	str	r3, [r2, #48]	; 0x30
   8768e:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   87692:	9b06      	ldr	r3, [sp, #24]
   87694:	4798      	blx	r3
   87696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87698:	e752      	b.n	87540 <mw_hal_lcd_monochrome_bitmap_clip+0x14c>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8769a:	2508      	movs	r5, #8
   8769c:	4b17      	ldr	r3, [pc, #92]	; (876fc <mw_hal_lcd_monochrome_bitmap_clip+0x308>)
            spi_send(&window_y_command, sizeof(window_y_command));
   8769e:	4c18      	ldr	r4, [pc, #96]	; (87700 <mw_hal_lcd_monochrome_bitmap_clip+0x30c>)
   876a0:	635d      	str	r5, [r3, #52]	; 0x34
   876a2:	2101      	movs	r1, #1
   876a4:	4819      	ldr	r0, [pc, #100]	; (8770c <mw_hal_lcd_monochrome_bitmap_clip+0x318>)
   876a6:	47a0      	blx	r4
            window_y_bounds[0] = (uint8_t)((image_start_y + y) >> 8);
   876a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   876aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   876ac:	4818      	ldr	r0, [pc, #96]	; (87710 <mw_hal_lcd_monochrome_bitmap_clip+0x31c>)
   876ae:	4413      	add	r3, r2
   876b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
            window_y_bounds[1] = (uint8_t)(image_start_y + y);
   876b4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
            window_y_bounds[0] = (uint8_t)((image_start_y + y) >> 8);
   876b8:	7003      	strb	r3, [r0, #0]
            window_y_bounds[2] = (uint8_t)((image_start_y + y) >> 8);
   876ba:	7083      	strb	r3, [r0, #2]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   876bc:	4b0f      	ldr	r3, [pc, #60]	; (876fc <mw_hal_lcd_monochrome_bitmap_clip+0x308>)
            window_y_bounds[1] = (uint8_t)(image_start_y + y);
   876be:	7042      	strb	r2, [r0, #1]
            window_y_bounds[3] = (uint8_t)(image_start_y + y);
   876c0:	70c2      	strb	r2, [r0, #3]
			spi_send(window_y_bounds, sizeof(window_y_bounds));
   876c2:	2104      	movs	r1, #4
   876c4:	631d      	str	r5, [r3, #48]	; 0x30
   876c6:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   876c8:	4b0c      	ldr	r3, [pc, #48]	; (876fc <mw_hal_lcd_monochrome_bitmap_clip+0x308>)
            spi_send(&pixel_data_command, sizeof(pixel_data_command));
   876ca:	2101      	movs	r1, #1
   876cc:	635d      	str	r5, [r3, #52]	; 0x34
   876ce:	4811      	ldr	r0, [pc, #68]	; (87714 <mw_hal_lcd_monochrome_bitmap_clip+0x320>)
   876d0:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   876d2:	4b0a      	ldr	r3, [pc, #40]	; (876fc <mw_hal_lcd_monochrome_bitmap_clip+0x308>)
            spi_send((uint8_t *)line_buffer, (size_t)(bitmap_width * 2U));       
   876d4:	4810      	ldr	r0, [pc, #64]	; (87718 <mw_hal_lcd_monochrome_bitmap_clip+0x324>)
   876d6:	631d      	str	r5, [r3, #48]	; 0x30
   876d8:	991e      	ldr	r1, [sp, #120]	; 0x78
   876da:	47a0      	blx	r4
   876dc:	e74b      	b.n	87576 <mw_hal_lcd_monochrome_bitmap_clip+0x182>
   876de:	4b08      	ldr	r3, [pc, #32]	; (87700 <mw_hal_lcd_monochrome_bitmap_clip+0x30c>)
   876e0:	9306      	str	r3, [sp, #24]
   876e2:	e7a0      	b.n	87626 <mw_hal_lcd_monochrome_bitmap_clip+0x232>
   876e4:	fffff800 	.word	0xfffff800
   876e8:	2007023a 	.word	0x2007023a
   876ec:	0009be9d 	.word	0x0009be9d
   876f0:	40008000 	.word	0x40008000
   876f4:	20070238 	.word	0x20070238
   876f8:	20070236 	.word	0x20070236
   876fc:	400e1400 	.word	0x400e1400
   87700:	00099ab1 	.word	0x00099ab1
   87704:	000ab1af 	.word	0x000ab1af
   87708:	200717f4 	.word	0x200717f4
   8770c:	000ab1b0 	.word	0x000ab1b0
   87710:	200717f8 	.word	0x200717f8
   87714:	000ab1ae 	.word	0x000ab1ae
   87718:	20071614 	.word	0x20071614
			image_start_x + (int16_t)bitmap_width <= clip_start_x + clip_width &&
   8771c:	9816      	ldr	r0, [sp, #88]	; 0x58
   8771e:	b229      	sxth	r1, r5
   87720:	9117      	str	r1, [sp, #92]	; 0x5c
   87722:	1841      	adds	r1, r0, r1
   87724:	eb0b 0002 	add.w	r0, fp, r2
			image_start_y >= clip_start_y &&
   87728:	4281      	cmp	r1, r0
			image_start_y + (int16_t)bitmap_height <= clip_start_y + clip_height &&
   8772a:	b21b      	sxth	r3, r3
			image_start_y >= clip_start_y &&
   8772c:	dc5e      	bgt.n	877ec <mw_hal_lcd_monochrome_bitmap_clip+0x3f8>
			image_start_y + (int16_t)bitmap_height <= clip_start_y + clip_height &&
   8772e:	4618      	mov	r0, r3
   87730:	9912      	ldr	r1, [sp, #72]	; 0x48
   87732:	9315      	str	r3, [sp, #84]	; 0x54
   87734:	4419      	add	r1, r3
   87736:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   87738:	9b02      	ldr	r3, [sp, #8]
   8773a:	901f      	str	r0, [sp, #124]	; 0x7c
   8773c:	4423      	add	r3, r4
			image_start_x + (int16_t)bitmap_width <= clip_start_x + clip_width &&
   8773e:	4299      	cmp	r1, r3
   87740:	f73f ae75 	bgt.w	8742e <mw_hal_lcd_monochrome_bitmap_clip+0x3a>
			image_start_y + (int16_t)bitmap_height <= clip_start_y + clip_height &&
   87744:	2df0      	cmp	r5, #240	; 0xf0
   87746:	f63f ae72 	bhi.w	8742e <mw_hal_lcd_monochrome_bitmap_clip+0x3a>
        rgb565_fg_colour = (uint16_t)((((uint32_t)fg_colour & 0x00f80000UL) >> 8) |
   8774a:	4c2c      	ldr	r4, [pc, #176]	; (877fc <mw_hal_lcd_monochrome_bitmap_clip+0x408>)
                    (((uint32_t)fg_colour & 0x0000fc00UL) >> 5) |
   8774c:	097b      	lsrs	r3, r7, #5
        rgb565_fg_colour = (uint16_t)((((uint32_t)fg_colour & 0x00f80000UL) >> 8) |
   8774e:	ea04 2117 	and.w	r1, r4, r7, lsr #8
                    (((uint32_t)bg_colour & 0x0000fc00UL) >> 5) |
   87752:	0970      	lsrs	r0, r6, #5
        rgb565_fg_colour = (uint16_t)((((uint32_t)fg_colour & 0x00f80000UL) >> 8) |
   87754:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
        rgb565_bg_colour = (uint16_t)((((uint32_t)bg_colour & 0x00f80000UL) >> 8) |
   87758:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
        rgb565_fg_colour = (uint16_t)((((uint32_t)fg_colour & 0x00f80000UL) >> 8) |
   8775c:	430b      	orrs	r3, r1
        rgb565_bg_colour = (uint16_t)((((uint32_t)bg_colour & 0x00f80000UL) >> 8) |
   8775e:	ea04 2416 	and.w	r4, r4, r6, lsr #8
        rgb565_fg_colour = (uint16_t)((((uint32_t)fg_colour & 0x00f80000UL) >> 8) |
   87762:	f3c7 01c4 	ubfx	r1, r7, #3, #5
        rgb565_bg_colour = (uint16_t)((((uint32_t)bg_colour & 0x00f80000UL) >> 8) |
   87766:	4304      	orrs	r4, r0
        rgb565_fg_colour = (uint16_t)((((uint32_t)fg_colour & 0x00f80000UL) >> 8) |
   87768:	430b      	orrs	r3, r1
        rgb565_bg_colour = (uint16_t)((((uint32_t)bg_colour & 0x00f80000UL) >> 8) |
   8776a:	f3c6 00c4 	ubfx	r0, r6, #3, #5
   8776e:	ea44 0100 	orr.w	r1, r4, r0
        rgb565_fg_colour = __builtin_bswap16(rgb565_fg_colour);
   87772:	ba5c      	rev16	r4, r3
        rgb565_bg_colour = __builtin_bswap16(rgb565_bg_colour);	
   87774:	fa91 fe91 	rev16.w	lr, r1
   87778:	9200      	str	r2, [sp, #0]
        if ((image_start_x != previous_x) || (bitmap_width != previous_width))
   8777a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 87814 <mw_hal_lcd_monochrome_bitmap_clip+0x420>
        rgb565_fg_colour = __builtin_bswap16(rgb565_fg_colour);
   8777e:	b2a2      	uxth	r2, r4
		spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   87780:	4b1f      	ldr	r3, [pc, #124]	; (87800 <mw_hal_lcd_monochrome_bitmap_clip+0x40c>)
        rgb565_fg_colour = __builtin_bswap16(rgb565_fg_colour);
   87782:	9218      	str	r2, [sp, #96]	; 0x60
		spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   87784:	210e      	movs	r1, #14
        rgb565_bg_colour = __builtin_bswap16(rgb565_bg_colour);	
   87786:	fa1f f28e 	uxth.w	r2, lr
		spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   8778a:	481e      	ldr	r0, [pc, #120]	; (87804 <mw_hal_lcd_monochrome_bitmap_clip+0x410>)
        rgb565_bg_colour = __builtin_bswap16(rgb565_bg_colour);	
   8778c:	9219      	str	r2, [sp, #100]	; 0x64
		spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_LCD_CHIP_SEL));
   8778e:	4798      	blx	r3
        if ((image_start_x != previous_x) || (bitmap_width != previous_width))
   87790:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87792:	f9b9 3000 	ldrsh.w	r3, [r9]
   87796:	f8df 8080 	ldr.w	r8, [pc, #128]	; 87818 <mw_hal_lcd_monochrome_bitmap_clip+0x424>
   8779a:	4293      	cmp	r3, r2
   8779c:	9a00      	ldr	r2, [sp, #0]
   8779e:	d103      	bne.n	877a8 <mw_hal_lcd_monochrome_bitmap_clip+0x3b4>
   877a0:	f9b8 3000 	ldrsh.w	r3, [r8]
   877a4:	429d      	cmp	r5, r3
   877a6:	d026      	beq.n	877f6 <mw_hal_lcd_monochrome_bitmap_clip+0x402>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   877a8:	2308      	movs	r3, #8
   877aa:	f8df a070 	ldr.w	sl, [pc, #112]	; 8781c <mw_hal_lcd_monochrome_bitmap_clip+0x428>
   877ae:	9200      	str	r2, [sp, #0]
            spi_send(&window_x_command, sizeof(window_x_command));
   877b0:	2101      	movs	r1, #1
   877b2:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
   877b6:	4814      	ldr	r0, [pc, #80]	; (87808 <mw_hal_lcd_monochrome_bitmap_clip+0x414>)
   877b8:	4c14      	ldr	r4, [pc, #80]	; (8780c <mw_hal_lcd_monochrome_bitmap_clip+0x418>)
   877ba:	47a0      	blx	r4
            window_x_bounds[1] = (uint8_t)image_start_x;
   877bc:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
   877c0:	4813      	ldr	r0, [pc, #76]	; (87810 <mw_hal_lcd_monochrome_bitmap_clip+0x41c>)
            window_x_bounds[3] = (uint8_t)(image_start_x + bitmap_width - 1);
   877c2:	1e6b      	subs	r3, r5, #1
   877c4:	440b      	add	r3, r1
   877c6:	70c3      	strb	r3, [r0, #3]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   877c8:	2308      	movs	r3, #8
            window_x_bounds[1] = (uint8_t)image_start_x;
   877ca:	7041      	strb	r1, [r0, #1]
   877cc:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
            spi_send(window_x_bounds, sizeof(window_x_bounds));
   877d0:	2104      	movs	r1, #4
   877d2:	47a0      	blx	r4
        use_line_buffer = true;
   877d4:	2301      	movs	r3, #1
   877d6:	9309      	str	r3, [sp, #36]	; 0x24
            previous_x = image_start_x;
   877d8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   877dc:	9a00      	ldr	r2, [sp, #0]
   877de:	f8a9 3000 	strh.w	r3, [r9]
            previous_width = bitmap_width;
   877e2:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   877e6:	f8a8 3000 	strh.w	r3, [r8]
   877ea:	e626      	b.n	8743a <mw_hal_lcd_monochrome_bitmap_clip+0x46>
   877ec:	9315      	str	r3, [sp, #84]	; 0x54
   877ee:	e61e      	b.n	8742e <mw_hal_lcd_monochrome_bitmap_clip+0x3a>
	for (y = 0; y < (int16_t)bitmap_height; y++)
   877f0:	2300      	movs	r3, #0
   877f2:	931f      	str	r3, [sp, #124]	; 0x7c
   877f4:	e6ce      	b.n	87594 <mw_hal_lcd_monochrome_bitmap_clip+0x1a0>
        use_line_buffer = true;
   877f6:	2301      	movs	r3, #1
   877f8:	9309      	str	r3, [sp, #36]	; 0x24
   877fa:	e61e      	b.n	8743a <mw_hal_lcd_monochrome_bitmap_clip+0x46>
   877fc:	fffff800 	.word	0xfffff800
   87800:	0009be9d 	.word	0x0009be9d
   87804:	40008000 	.word	0x40008000
   87808:	000ab1af 	.word	0x000ab1af
   8780c:	00099ab1 	.word	0x00099ab1
   87810:	200717f4 	.word	0x200717f4
   87814:	20070238 	.word	0x20070238
   87818:	20070236 	.word	0x20070236
   8781c:	400e1400 	.word	0x400e1400

00087820 <mw_hal_non_vol_init>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

void mw_hal_non_vol_init(void)
{
   87820:	4770      	bx	lr
   87822:	bf00      	nop

00087824 <mw_hal_non_vol_load>:
}

void mw_hal_non_vol_load(uint8_t *data, uint16_t length)
{
    (void)memcpy((void *)data, (void *)TEST_PAGE_ADDRESS, (size_t)length);
   87824:	460a      	mov	r2, r1
   87826:	4b01      	ldr	r3, [pc, #4]	; (8782c <mw_hal_non_vol_load+0x8>)
   87828:	4901      	ldr	r1, [pc, #4]	; (87830 <mw_hal_non_vol_load+0xc>)
   8782a:	4718      	bx	r3
   8782c:	000a5871 	.word	0x000a5871
   87830:	000fff00 	.word	0x000fff00

00087834 <mw_hal_non_vol_save>:
}

void mw_hal_non_vol_save(uint8_t *data, uint16_t length)
{
   87834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)flash_init(FLASH_ACCESS_MODE_128, 6);
   87838:	4b0e      	ldr	r3, [pc, #56]	; (87874 <mw_hal_non_vol_save+0x40>)
{
   8783a:	4606      	mov	r6, r0
   8783c:	460f      	mov	r7, r1
	(void)flash_init(FLASH_ACCESS_MODE_128, 6);
   8783e:	2000      	movs	r0, #0
   87840:	2106      	movs	r1, #6
   87842:	4798      	blx	r3
	(void)flash_unlock(TEST_PAGE_ADDRESS, TEST_PAGE_ADDRESS + IFLASH1_PAGE_SIZE - 1U, 0U, 0U);
   87844:	2300      	movs	r3, #0
   87846:	4c0c      	ldr	r4, [pc, #48]	; (87878 <mw_hal_non_vol_save+0x44>)
   87848:	4d0c      	ldr	r5, [pc, #48]	; (8787c <mw_hal_non_vol_save+0x48>)
   8784a:	461a      	mov	r2, r3
   8784c:	4629      	mov	r1, r5
   8784e:	4620      	mov	r0, r4
   87850:	f8df 8034 	ldr.w	r8, [pc, #52]	; 87888 <mw_hal_non_vol_save+0x54>
   87854:	47c0      	blx	r8
	
	(void)flash_write(TEST_PAGE_ADDRESS, data, (uint32_t)length, 1U);	
   87856:	463a      	mov	r2, r7
   87858:	4631      	mov	r1, r6
   8785a:	4620      	mov	r0, r4
   8785c:	2301      	movs	r3, #1
   8785e:	4e08      	ldr	r6, [pc, #32]	; (87880 <mw_hal_non_vol_save+0x4c>)
   87860:	47b0      	blx	r6
	
	(void)flash_lock(TEST_PAGE_ADDRESS, TEST_PAGE_ADDRESS + IFLASH1_PAGE_SIZE - 1U, 0U, 0U);
   87862:	2300      	movs	r3, #0
   87864:	4620      	mov	r0, r4
   87866:	4c07      	ldr	r4, [pc, #28]	; (87884 <mw_hal_non_vol_save+0x50>)
   87868:	4629      	mov	r1, r5
   8786a:	46a4      	mov	ip, r4
}
   8786c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)flash_lock(TEST_PAGE_ADDRESS, TEST_PAGE_ADDRESS + IFLASH1_PAGE_SIZE - 1U, 0U, 0U);
   87870:	461a      	mov	r2, r3
   87872:	4760      	bx	ip
   87874:	0009ef2d 	.word	0x0009ef2d
   87878:	000fff00 	.word	0x000fff00
   8787c:	000fffff 	.word	0x000fffff
   87880:	0009ef55 	.word	0x0009ef55
   87884:	0009f059 	.word	0x0009f059
   87888:	0009f0d1 	.word	0x0009f0d1

0008788c <TC0_Handler>:
void TC0_Handler(void)
{
	static uint8_t whole_second;
	
	/* Clear status bit to acknowledge interrupt */
	(void)tc_get_status(TC0, 0);
   8788c:	2100      	movs	r1, #0
{
   8788e:	b510      	push	{r4, lr}
	(void)tc_get_status(TC0, 0);
   87890:	4b0b      	ldr	r3, [pc, #44]	; (878c0 <TC0_Handler+0x34>)
   87892:	480c      	ldr	r0, [pc, #48]	; (878c4 <TC0_Handler+0x38>)
   87894:	4798      	blx	r3

	gpio_toggle_pin(LED0_GPIO);
   87896:	203b      	movs	r0, #59	; 0x3b
   87898:	4b0b      	ldr	r3, [pc, #44]	; (878c8 <TC0_Handler+0x3c>)
   8789a:	4798      	blx	r3
	
	mw_hal_timer_fired();

#ifdef SIMULATED_RTC
	/* this is needed to enable the real time clock simulation needed by file system for Due boards with no RTC external crystal fitted */
	whole_second++;
   8789c:	490b      	ldr	r1, [pc, #44]	; (878cc <TC0_Handler+0x40>)
	tc_start(TC0, 0);
}

void mw_hal_timer_fired(void)
{
	mw_tick_counter++;
   8789e:	480c      	ldr	r0, [pc, #48]	; (878d0 <TC0_Handler+0x44>)
	whole_second++;
   878a0:	780b      	ldrb	r3, [r1, #0]
	mw_tick_counter++;
   878a2:	6802      	ldr	r2, [r0, #0]
	whole_second++;
   878a4:	3301      	adds	r3, #1
   878a6:	b2db      	uxtb	r3, r3
	mw_tick_counter++;
   878a8:	3201      	adds	r2, #1
	if (whole_second == MW_TICKS_PER_SECOND)
   878aa:	2b14      	cmp	r3, #20
	mw_tick_counter++;
   878ac:	6002      	str	r2, [r0, #0]
	if (whole_second == MW_TICKS_PER_SECOND)
   878ae:	d001      	beq.n	878b4 <TC0_Handler+0x28>
	whole_second++;
   878b0:	700b      	strb	r3, [r1, #0]
   878b2:	bd10      	pop	{r4, pc}
		whole_second = 0U;
   878b4:	2200      	movs	r2, #0
   878b6:	700a      	strb	r2, [r1, #0]
		update_real_time();
   878b8:	4b06      	ldr	r3, [pc, #24]	; (878d4 <TC0_Handler+0x48>)
}
   878ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		update_real_time();
   878be:	4718      	bx	r3
   878c0:	0009bf6d 	.word	0x0009bf6d
   878c4:	40080000 	.word	0x40080000
   878c8:	0009b891 	.word	0x0009b891
   878cc:	200717fc 	.word	0x200717fc
   878d0:	20072f98 	.word	0x20072f98
   878d4:	000998b9 	.word	0x000998b9

000878d8 <mw_hal_timer_init>:
{
   878d8:	b530      	push	{r4, r5, lr}
	tc_find_mck_divisor(MW_TICKS_PER_SECOND, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   878da:	4c17      	ldr	r4, [pc, #92]	; (87938 <mw_hal_timer_init+0x60>)
{
   878dc:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_TC0);
   878de:	4b17      	ldr	r3, [pc, #92]	; (8793c <mw_hal_timer_init+0x64>)
   878e0:	201b      	movs	r0, #27
   878e2:	4798      	blx	r3
	tc_find_mck_divisor(MW_TICKS_PER_SECOND, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   878e4:	4d16      	ldr	r5, [pc, #88]	; (87940 <mw_hal_timer_init+0x68>)
   878e6:	9400      	str	r4, [sp, #0]
   878e8:	4621      	mov	r1, r4
   878ea:	ab03      	add	r3, sp, #12
   878ec:	aa02      	add	r2, sp, #8
   878ee:	2014      	movs	r0, #20
   878f0:	47a8      	blx	r5
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
   878f2:	4d14      	ldr	r5, [pc, #80]	; (87944 <mw_hal_timer_init+0x6c>)
   878f4:	9a03      	ldr	r2, [sp, #12]
   878f6:	4628      	mov	r0, r5
   878f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   878fc:	2100      	movs	r1, #0
   878fe:	4b12      	ldr	r3, [pc, #72]	; (87948 <mw_hal_timer_init+0x70>)
   87900:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / 20);
   87902:	9b02      	ldr	r3, [sp, #8]
   87904:	4a11      	ldr	r2, [pc, #68]	; (8794c <mw_hal_timer_init+0x74>)
   87906:	fbb4 f4f3 	udiv	r4, r4, r3
   8790a:	fba2 3204 	umull	r3, r2, r2, r4
   8790e:	4628      	mov	r0, r5
   87910:	0912      	lsrs	r2, r2, #4
   87912:	2100      	movs	r1, #0
   87914:	4b0e      	ldr	r3, [pc, #56]	; (87950 <mw_hal_timer_init+0x78>)
   87916:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   87918:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8791c:	4b0d      	ldr	r3, [pc, #52]	; (87954 <mw_hal_timer_init+0x7c>)
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   8791e:	4628      	mov	r0, r5
   87920:	601a      	str	r2, [r3, #0]
   87922:	2100      	movs	r1, #0
   87924:	2210      	movs	r2, #16
   87926:	4b0c      	ldr	r3, [pc, #48]	; (87958 <mw_hal_timer_init+0x80>)
   87928:	4798      	blx	r3
	tc_start(TC0, 0);
   8792a:	4628      	mov	r0, r5
   8792c:	2100      	movs	r1, #0
   8792e:	4b0b      	ldr	r3, [pc, #44]	; (8795c <mw_hal_timer_init+0x84>)
   87930:	4798      	blx	r3
}
   87932:	b005      	add	sp, #20
   87934:	bd30      	pop	{r4, r5, pc}
   87936:	bf00      	nop
   87938:	0501bd00 	.word	0x0501bd00
   8793c:	0009bdcd 	.word	0x0009bdcd
   87940:	0009bf75 	.word	0x0009bf75
   87944:	40080000 	.word	0x40080000
   87948:	0009bf35 	.word	0x0009bf35
   8794c:	cccccccd 	.word	0xcccccccd
   87950:	0009bf5d 	.word	0x0009bf5d
   87954:	e000e100 	.word	0xe000e100
   87958:	0009bf65 	.word	0x0009bf65
   8795c:	0009bf4d 	.word	0x0009bf4d

00087960 <mw_hal_touch_init>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

void mw_hal_touch_init(void)
{
   87960:	4770      	bx	lr
   87962:	bf00      	nop

00087964 <mw_hal_touch_is_recalibration_required>:
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   87964:	4b02      	ldr	r3, [pc, #8]	; (87970 <mw_hal_touch_is_recalibration_required+0xc>)
   87966:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}

bool mw_hal_touch_is_recalibration_required(void)
{
	/* if board button pressed clear settings which forces a screen recalibration */
    if (ioport_get_pin_level(TOUCH_RECAL_PIN))
   87968:	43c0      	mvns	r0, r0
    {
        return false;
    }
    
    return true;
}
   8796a:	f000 0001 	and.w	r0, r0, #1
   8796e:	4770      	bx	lr
   87970:	400e1400 	.word	0x400e1400

00087974 <mw_hal_touch_get_state>:
   87974:	4b02      	ldr	r3, [pc, #8]	; (87980 <mw_hal_touch_get_state+0xc>)
   87976:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	{
		return(MW_HAL_TOUCH_STATE_DOWN);
	}

	return (MW_HAL_TOUCH_STATE_UP);
}
   87978:	f3c0 0040 	ubfx	r0, r0, #1, #1
   8797c:	4770      	bx	lr
   8797e:	bf00      	nop
   87980:	400e1400 	.word	0x400e1400

00087984 <mw_hal_touch_get_point>:

bool mw_hal_touch_get_point(uint16_t* x, uint16_t* y)
{
   87984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t swap_value;
	uint16_t x_raw;
	uint16_t y_raw;
	uint16_t databuffer[2][READ_POINTS_COUNT];
	uint8_t touch_count;
	uint8_t ts_command[3] = {0};
   87988:	2400      	movs	r4, #0
{
   8798a:	b095      	sub	sp, #84	; 0x54
   8798c:	e88d 0003 	stmia.w	sp, {r0, r1}
	uint8_t ts_response[3];
	
	spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_TOUCH_CHIP_SEL));
   87990:	4ba1      	ldr	r3, [pc, #644]	; (87c18 <mw_hal_touch_get_point+0x294>)
   87992:	210d      	movs	r1, #13
   87994:	48a1      	ldr	r0, [pc, #644]	; (87c1c <mw_hal_touch_get_point+0x298>)
	uint8_t ts_command[3] = {0};
   87996:	f8ad 4020 	strh.w	r4, [sp, #32]
   8799a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
	
	touch_count = 0U;
	do
	{
		ts_command[0] = COMMAND_READ_X;
   8799e:	27d0      	movs	r7, #208	; 0xd0
	spi_set_peripheral_chip_select_value(SPI_LCD_TOUCH_BASE, spi_get_pcs(SPI_TOUCH_CHIP_SEL));
   879a0:	4798      	blx	r3
   879a2:	4d9f      	ldr	r5, [pc, #636]	; (87c20 <mw_hal_touch_get_point+0x29c>)
   879a4:	4e9f      	ldr	r6, [pc, #636]	; (87c24 <mw_hal_touch_get_point+0x2a0>)
   879a6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
		spi_transfer(ts_command, ts_response, sizeof(ts_response));
   879aa:	2203      	movs	r2, #3
   879ac:	a909      	add	r1, sp, #36	; 0x24
   879ae:	a808      	add	r0, sp, #32
		ts_command[0] = COMMAND_READ_X;
   879b0:	f88d 7020 	strb.w	r7, [sp, #32]
		spi_transfer(ts_command, ts_response, sizeof(ts_response));
   879b4:	47a8      	blx	r5
		x_raw = (uint16_t)ts_response[1] << 8;
		x_raw |= (uint16_t)ts_response[2];
		x_raw >>= 3;

		ts_command[0] = COMMAND_READ_Y;
   879b6:	2090      	movs	r0, #144	; 0x90
		x_raw = (uint16_t)ts_response[1] << 8;
   879b8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		x_raw |= (uint16_t)ts_response[2];
   879bc:	f89d 9026 	ldrb.w	r9, [sp, #38]	; 0x26
		spi_transfer(ts_command, ts_response, sizeof(ts_response));
   879c0:	2203      	movs	r2, #3
		ts_command[0] = COMMAND_READ_Y;
   879c2:	f88d 0020 	strb.w	r0, [sp, #32]
		spi_transfer(ts_command, ts_response, sizeof(ts_response));
   879c6:	a909      	add	r1, sp, #36	; 0x24
   879c8:	a808      	add	r0, sp, #32
		x_raw |= (uint16_t)ts_response[2];
   879ca:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
		spi_transfer(ts_command, ts_response, sizeof(ts_response));
   879ce:	47a8      	blx	r5
		y_raw = (uint16_t)ts_response[1] << 8;
   879d0:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
		y_raw |= (uint16_t)ts_response[2];
   879d4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
		x_raw >>= 3;
   879d8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
		y_raw |= (uint16_t)ts_response[2];
   879dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		y_raw >>= 3;
		
		databuffer[0][touch_count] = x_raw;
   879e0:	f828 9b02 	strh.w	r9, [r8], #2
		y_raw >>= 3;
   879e4:	08db      	lsrs	r3, r3, #3
		databuffer[1][touch_count] = y_raw;
   879e6:	f8a8 3012 	strh.w	r3, [r8, #18]
   879ea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
		touch_count++;
   879ec:	3401      	adds	r4, #1
	if (!ioport_get_pin_level(TOUCH_T_IRQ_PIN))
   879ee:	079b      	lsls	r3, r3, #30
		touch_count++;
   879f0:	b2e4      	uxtb	r4, r4
	if (!ioport_get_pin_level(TOUCH_T_IRQ_PIN))
   879f2:	d506      	bpl.n	87a02 <mw_hal_touch_get_point+0x7e>
	}
	while ((mw_hal_touch_get_state() == MW_HAL_TOUCH_STATE_DOWN) && (touch_count < READ_POINTS_COUNT));

	if (touch_count != READ_POINTS_COUNT)
   879f4:	2c0a      	cmp	r4, #10
	{
		return (false);
   879f6:	bf18      	it	ne
   879f8:	2000      	movne	r0, #0
	if (touch_count != READ_POINTS_COUNT)
   879fa:	d004      	beq.n	87a06 <mw_hal_touch_get_point+0x82>

	*x = (databuffer[0][4] + databuffer[0][5]) / 8U;
	*y = (databuffer[1][4] + databuffer[1][5]) / 8U;

	return (true);
}
   879fc:	b015      	add	sp, #84	; 0x54
   879fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while ((mw_hal_touch_get_state() == MW_HAL_TOUCH_STATE_DOWN) && (touch_count < READ_POINTS_COUNT));
   87a02:	2c0a      	cmp	r4, #10
   87a04:	d1d1      	bne.n	879aa <mw_hal_touch_get_point+0x26>
   87a06:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   87a0a:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
   87a0e:	2200      	movs	r2, #0
   87a10:	4688      	mov	r8, r1
   87a12:	4650      	mov	r0, sl
   87a14:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   87a18:	f8bd c02a 	ldrh.w	ip, [sp, #42]	; 0x2a
   87a1c:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
   87a20:	f8bd 702e 	ldrh.w	r7, [sp, #46]	; 0x2e
   87a24:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   87a28:	f8bd 6036 	ldrh.w	r6, [sp, #54]	; 0x36
   87a2c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   87a30:	f8bd 903a 	ldrh.w	r9, [sp, #58]	; 0x3a
   87a34:	9203      	str	r2, [sp, #12]
   87a36:	9104      	str	r1, [sp, #16]
			if (databuffer[0][i] > databuffer[0][i + 1U])
   87a38:	4563      	cmp	r3, ip
   87a3a:	f200 809d 	bhi.w	87b78 <mw_hal_touch_get_point+0x1f4>
   87a3e:	469b      	mov	fp, r3
   87a40:	2301      	movs	r3, #1
   87a42:	9302      	str	r3, [sp, #8]
   87a44:	4663      	mov	r3, ip
   87a46:	46dc      	mov	ip, fp
   87a48:	4573      	cmp	r3, lr
   87a4a:	f200 80e2 	bhi.w	87c12 <mw_hal_touch_get_point+0x28e>
   87a4e:	469b      	mov	fp, r3
   87a50:	4673      	mov	r3, lr
   87a52:	46de      	mov	lr, fp
   87a54:	429f      	cmp	r7, r3
   87a56:	f0c0 80d9 	bcc.w	87c0c <mw_hal_touch_get_point+0x288>
   87a5a:	469b      	mov	fp, r3
   87a5c:	463b      	mov	r3, r7
   87a5e:	465f      	mov	r7, fp
   87a60:	4543      	cmp	r3, r8
   87a62:	f200 80cf 	bhi.w	87c04 <mw_hal_touch_get_point+0x280>
   87a66:	469b      	mov	fp, r3
   87a68:	4643      	mov	r3, r8
   87a6a:	46d8      	mov	r8, fp
   87a6c:	4283      	cmp	r3, r0
   87a6e:	f200 80c4 	bhi.w	87bfa <mw_hal_touch_get_point+0x276>
   87a72:	469b      	mov	fp, r3
   87a74:	4603      	mov	r3, r0
   87a76:	4658      	mov	r0, fp
   87a78:	42a3      	cmp	r3, r4
   87a7a:	f200 80b9 	bhi.w	87bf0 <mw_hal_touch_get_point+0x26c>
   87a7e:	469b      	mov	fp, r3
   87a80:	4623      	mov	r3, r4
   87a82:	465c      	mov	r4, fp
   87a84:	42b3      	cmp	r3, r6
   87a86:	f200 80b0 	bhi.w	87bea <mw_hal_touch_get_point+0x266>
   87a8a:	469b      	mov	fp, r3
   87a8c:	4633      	mov	r3, r6
   87a8e:	465e      	mov	r6, fp
   87a90:	42ab      	cmp	r3, r5
   87a92:	f200 80a7 	bhi.w	87be4 <mw_hal_touch_get_point+0x260>
   87a96:	469b      	mov	fp, r3
   87a98:	462b      	mov	r3, r5
   87a9a:	465d      	mov	r5, fp
   87a9c:	4599      	cmp	r9, r3
   87a9e:	f0c0 8095 	bcc.w	87bcc <mw_hal_touch_get_point+0x248>
	while (!sorted);
   87aa2:	9902      	ldr	r1, [sp, #8]
   87aa4:	2900      	cmp	r1, #0
   87aa6:	f000 808e 	beq.w	87bc6 <mw_hal_touch_get_point+0x242>
   87aaa:	f04f 0b00 	mov.w	fp, #0
   87aae:	9b03      	ldr	r3, [sp, #12]
   87ab0:	9904      	ldr	r1, [sp, #16]
   87ab2:	455b      	cmp	r3, fp
   87ab4:	bf18      	it	ne
   87ab6:	46a2      	movne	sl, r4
   87ab8:	455a      	cmp	r2, fp
   87aba:	bf18      	it	ne
   87abc:	4601      	movne	r1, r0
   87abe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   87ac2:	f8bd 5046 	ldrh.w	r5, [sp, #70]	; 0x46
   87ac6:	9305      	str	r3, [sp, #20]
   87ac8:	9506      	str	r5, [sp, #24]
   87aca:	f8cd b00c 	str.w	fp, [sp, #12]
   87ace:	f8cd b010 	str.w	fp, [sp, #16]
   87ad2:	469e      	mov	lr, r3
   87ad4:	462a      	mov	r2, r5
   87ad6:	9107      	str	r1, [sp, #28]
   87ad8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   87adc:	f8bd 703e 	ldrh.w	r7, [sp, #62]	; 0x3e
   87ae0:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
   87ae4:	f8bd 5042 	ldrh.w	r5, [sp, #66]	; 0x42
   87ae8:	f8bd 4048 	ldrh.w	r4, [sp, #72]	; 0x48
   87aec:	f8bd 804a 	ldrh.w	r8, [sp, #74]	; 0x4a
   87af0:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
   87af4:	f8bd b04e 	ldrh.w	fp, [sp, #78]	; 0x4e
   87af8:	9902      	ldr	r1, [sp, #8]
			if (databuffer[1][i] > databuffer[1][i + 1U])
   87afa:	42bb      	cmp	r3, r7
   87afc:	d861      	bhi.n	87bc2 <mw_hal_touch_get_point+0x23e>
   87afe:	469c      	mov	ip, r3
   87b00:	4608      	mov	r0, r1
   87b02:	463b      	mov	r3, r7
   87b04:	4667      	mov	r7, ip
   87b06:	42b3      	cmp	r3, r6
   87b08:	bf9b      	ittet	ls
   87b0a:	469c      	movls	ip, r3
   87b0c:	4633      	movls	r3, r6
				sorted = false;
   87b0e:	2000      	movhi	r0, #0
			if (databuffer[1][i] > databuffer[1][i + 1U])
   87b10:	4666      	movls	r6, ip
   87b12:	42ab      	cmp	r3, r5
   87b14:	bf9b      	ittet	ls
   87b16:	469c      	movls	ip, r3
   87b18:	462b      	movls	r3, r5
				sorted = false;
   87b1a:	2000      	movhi	r0, #0
			if (databuffer[1][i] > databuffer[1][i + 1U])
   87b1c:	4665      	movls	r5, ip
   87b1e:	4573      	cmp	r3, lr
   87b20:	d84c      	bhi.n	87bbc <mw_hal_touch_get_point+0x238>
   87b22:	469c      	mov	ip, r3
   87b24:	4673      	mov	r3, lr
   87b26:	46e6      	mov	lr, ip
   87b28:	4293      	cmp	r3, r2
   87b2a:	d843      	bhi.n	87bb4 <mw_hal_touch_get_point+0x230>
   87b2c:	469c      	mov	ip, r3
   87b2e:	4613      	mov	r3, r2
   87b30:	4662      	mov	r2, ip
   87b32:	429c      	cmp	r4, r3
   87b34:	d33b      	bcc.n	87bae <mw_hal_touch_get_point+0x22a>
   87b36:	469c      	mov	ip, r3
   87b38:	4623      	mov	r3, r4
   87b3a:	4664      	mov	r4, ip
   87b3c:	4543      	cmp	r3, r8
   87b3e:	bf9b      	ittet	ls
   87b40:	469c      	movls	ip, r3
   87b42:	4643      	movls	r3, r8
				sorted = false;
   87b44:	2000      	movhi	r0, #0
			if (databuffer[1][i] > databuffer[1][i + 1U])
   87b46:	46e0      	movls	r8, ip
   87b48:	4599      	cmp	r9, r3
   87b4a:	bf25      	ittet	cs
   87b4c:	469c      	movcs	ip, r3
   87b4e:	464b      	movcs	r3, r9
				sorted = false;
   87b50:	2000      	movcc	r0, #0
			if (databuffer[1][i] > databuffer[1][i + 1U])
   87b52:	46e1      	movcs	r9, ip
   87b54:	455b      	cmp	r3, fp
   87b56:	d803      	bhi.n	87b60 <mw_hal_touch_get_point+0x1dc>
	while (!sorted);
   87b58:	b988      	cbnz	r0, 87b7e <mw_hal_touch_get_point+0x1fa>
   87b5a:	4618      	mov	r0, r3
   87b5c:	465b      	mov	r3, fp
   87b5e:	4683      	mov	fp, r0
   87b60:	4658      	mov	r0, fp
   87b62:	469b      	mov	fp, r3
   87b64:	463b      	mov	r3, r7
   87b66:	4637      	mov	r7, r6
   87b68:	462e      	mov	r6, r5
   87b6a:	4675      	mov	r5, lr
   87b6c:	4696      	mov	lr, r2
   87b6e:	4622      	mov	r2, r4
   87b70:	4644      	mov	r4, r8
   87b72:	46c8      	mov	r8, r9
   87b74:	4681      	mov	r9, r0
   87b76:	e7c0      	b.n	87afa <mw_hal_touch_get_point+0x176>
				sorted = false;
   87b78:	2100      	movs	r1, #0
   87b7a:	9102      	str	r1, [sp, #8]
   87b7c:	e764      	b.n	87a48 <mw_hal_touch_get_point+0xc4>
   87b7e:	9b04      	ldr	r3, [sp, #16]
   87b80:	9907      	ldr	r1, [sp, #28]
   87b82:	2b00      	cmp	r3, #0
   87b84:	9b06      	ldr	r3, [sp, #24]
   87b86:	bf18      	it	ne
   87b88:	4623      	movne	r3, r4
   87b8a:	461c      	mov	r4, r3
   87b8c:	9b03      	ldr	r3, [sp, #12]
   87b8e:	2b00      	cmp	r3, #0
   87b90:	9b05      	ldr	r3, [sp, #20]
   87b92:	bf18      	it	ne
   87b94:	4613      	movne	r3, r2
   87b96:	461a      	mov	r2, r3
	*x = (databuffer[0][4] + databuffer[0][5]) / 8U;
   87b98:	eb01 030a 	add.w	r3, r1, sl
	*y = (databuffer[1][4] + databuffer[1][5]) / 8U;
   87b9c:	4611      	mov	r1, r2
   87b9e:	190a      	adds	r2, r1, r4
	*x = (databuffer[0][4] + databuffer[0][5]) / 8U;
   87ba0:	9900      	ldr	r1, [sp, #0]
   87ba2:	08db      	lsrs	r3, r3, #3
   87ba4:	800b      	strh	r3, [r1, #0]
	*y = (databuffer[1][4] + databuffer[1][5]) / 8U;
   87ba6:	9b01      	ldr	r3, [sp, #4]
   87ba8:	08d2      	lsrs	r2, r2, #3
   87baa:	801a      	strh	r2, [r3, #0]
	return (true);
   87bac:	e726      	b.n	879fc <mw_hal_touch_get_point+0x78>
			if (databuffer[1][i] > databuffer[1][i + 1U])
   87bae:	9104      	str	r1, [sp, #16]
				sorted = false;
   87bb0:	2000      	movs	r0, #0
   87bb2:	e7c3      	b.n	87b3c <mw_hal_touch_get_point+0x1b8>
			if (databuffer[1][i] > databuffer[1][i + 1U])
   87bb4:	9103      	str	r1, [sp, #12]
   87bb6:	9104      	str	r1, [sp, #16]
				sorted = false;
   87bb8:	2000      	movs	r0, #0
   87bba:	e7ba      	b.n	87b32 <mw_hal_touch_get_point+0x1ae>
			if (databuffer[1][i] > databuffer[1][i + 1U])
   87bbc:	9103      	str	r1, [sp, #12]
				sorted = false;
   87bbe:	2000      	movs	r0, #0
   87bc0:	e7b2      	b.n	87b28 <mw_hal_touch_get_point+0x1a4>
   87bc2:	2000      	movs	r0, #0
   87bc4:	e79f      	b.n	87b06 <mw_hal_touch_get_point+0x182>
   87bc6:	46cb      	mov	fp, r9
   87bc8:	4699      	mov	r9, r3
   87bca:	465b      	mov	r3, fp
   87bcc:	46ab      	mov	fp, r5
   87bce:	464d      	mov	r5, r9
   87bd0:	4699      	mov	r9, r3
   87bd2:	4663      	mov	r3, ip
   87bd4:	46f4      	mov	ip, lr
   87bd6:	46be      	mov	lr, r7
   87bd8:	4647      	mov	r7, r8
   87bda:	4680      	mov	r8, r0
   87bdc:	4620      	mov	r0, r4
   87bde:	4634      	mov	r4, r6
   87be0:	465e      	mov	r6, fp
   87be2:	e729      	b.n	87a38 <mw_hal_touch_get_point+0xb4>
				sorted = false;
   87be4:	2100      	movs	r1, #0
   87be6:	9102      	str	r1, [sp, #8]
   87be8:	e758      	b.n	87a9c <mw_hal_touch_get_point+0x118>
   87bea:	2100      	movs	r1, #0
   87bec:	9102      	str	r1, [sp, #8]
   87bee:	e74f      	b.n	87a90 <mw_hal_touch_get_point+0x10c>
			if (databuffer[0][i] > databuffer[0][i + 1U])
   87bf0:	2101      	movs	r1, #1
   87bf2:	9103      	str	r1, [sp, #12]
				sorted = false;
   87bf4:	2100      	movs	r1, #0
   87bf6:	9102      	str	r1, [sp, #8]
   87bf8:	e744      	b.n	87a84 <mw_hal_touch_get_point+0x100>
			if (databuffer[0][i] > databuffer[0][i + 1U])
   87bfa:	2201      	movs	r2, #1
				sorted = false;
   87bfc:	2100      	movs	r1, #0
			if (databuffer[0][i] > databuffer[0][i + 1U])
   87bfe:	9203      	str	r2, [sp, #12]
				sorted = false;
   87c00:	9102      	str	r1, [sp, #8]
   87c02:	e739      	b.n	87a78 <mw_hal_touch_get_point+0xf4>
   87c04:	2100      	movs	r1, #0
			if (databuffer[0][i] > databuffer[0][i + 1U])
   87c06:	2201      	movs	r2, #1
				sorted = false;
   87c08:	9102      	str	r1, [sp, #8]
   87c0a:	e72f      	b.n	87a6c <mw_hal_touch_get_point+0xe8>
   87c0c:	2100      	movs	r1, #0
   87c0e:	9102      	str	r1, [sp, #8]
   87c10:	e726      	b.n	87a60 <mw_hal_touch_get_point+0xdc>
   87c12:	2100      	movs	r1, #0
   87c14:	9102      	str	r1, [sp, #8]
   87c16:	e71d      	b.n	87a54 <mw_hal_touch_get_point+0xd0>
   87c18:	0009be9d 	.word	0x0009be9d
   87c1c:	40008000 	.word	0x40008000
   87c20:	00099a69 	.word	0x00099a69
   87c24:	400e1400 	.word	0x400e1400

00087c28 <mw_hal_init>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

void mw_hal_init(void)
{
   87c28:	b510      	push	{r4, lr}
	/* initialise all the hal sub-systems */
	mw_hal_delay_init();
   87c2a:	4b06      	ldr	r3, [pc, #24]	; (87c44 <mw_hal_init+0x1c>)
   87c2c:	4798      	blx	r3
	mw_hal_lcd_init();
   87c2e:	4b06      	ldr	r3, [pc, #24]	; (87c48 <mw_hal_init+0x20>)
   87c30:	4798      	blx	r3
	mw_hal_touch_init();
   87c32:	4b06      	ldr	r3, [pc, #24]	; (87c4c <mw_hal_init+0x24>)
   87c34:	4798      	blx	r3
	mw_hal_timer_init();
   87c36:	4b06      	ldr	r3, [pc, #24]	; (87c50 <mw_hal_init+0x28>)
   87c38:	4798      	blx	r3
	mw_hal_non_vol_init();
}
   87c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mw_hal_non_vol_init();
   87c3e:	4b05      	ldr	r3, [pc, #20]	; (87c54 <mw_hal_init+0x2c>)
   87c40:	4718      	bx	r3
   87c42:	bf00      	nop
   87c44:	00086b61 	.word	0x00086b61
   87c48:	00086bdd 	.word	0x00086bdd
   87c4c:	00087961 	.word	0x00087961
   87c50:	000878d9 	.word	0x000878d9
   87c54:	00087821 	.word	0x00087821

00087c58 <check_window_dimensions>:
 * @return true if allowed else false 
 */
static bool check_window_dimensions(int16_t new_width,
		int16_t new_height,
		uint32_t flags)
{
   87c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t window_minimum_width;
	int16_t title_bar_height;
	int16_t icon_offset;

	/* get menu bar height, scroll bar narrow dimension and scroll bar slider size depending on large flag */
	if ((flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   87c5c:	0417      	lsls	r7, r2, #16
{
   87c5e:	b091      	sub	sp, #68	; 0x44
   87c60:	4683      	mov	fp, r0
   87c62:	9102      	str	r1, [sp, #8]
	if ((flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   87c64:	d535      	bpl.n	87cd2 <check_window_dimensions+0x7a>
   87c66:	2715      	movs	r7, #21
   87c68:	970e      	str	r7, [sp, #56]	; 0x38
   87c6a:	2749      	movs	r7, #73	; 0x49
   87c6c:	970d      	str	r7, [sp, #52]	; 0x34
   87c6e:	2732      	movs	r7, #50	; 0x32
   87c70:	9709      	str	r7, [sp, #36]	; 0x24
   87c72:	274a      	movs	r7, #74	; 0x4a
   87c74:	9708      	str	r7, [sp, #32]
   87c76:	2746      	movs	r7, #70	; 0x46
   87c78:	9707      	str	r7, [sp, #28]
   87c7a:	275e      	movs	r7, #94	; 0x5e
   87c7c:	9706      	str	r7, [sp, #24]
   87c7e:	272e      	movs	r7, #46	; 0x2e
   87c80:	9705      	str	r7, [sp, #20]
   87c82:	271b      	movs	r7, #27
   87c84:	9701      	str	r7, [sp, #4]
   87c86:	2733      	movs	r7, #51	; 0x33
   87c88:	235d      	movs	r3, #93	; 0x5d
   87c8a:	9703      	str	r7, [sp, #12]
   87c8c:	2730      	movs	r7, #48	; 0x30
   87c8e:	4619      	mov	r1, r3
   87c90:	262d      	movs	r6, #45	; 0x2d
   87c92:	f04f 0845 	mov.w	r8, #69	; 0x45
   87c96:	2031      	movs	r0, #49	; 0x31
   87c98:	930b      	str	r3, [sp, #44]	; 0x2c
   87c9a:	970f      	str	r7, [sp, #60]	; 0x3c
   87c9c:	2319      	movs	r3, #25
   87c9e:	271a      	movs	r7, #26

	/* starting height is 1 pixel */
	window_minimum_height = 1;

	/* check for a border first when calculating minimum height */
	if ((flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER)
   87ca0:	f012 0e01 	ands.w	lr, r2, #1
	if ((flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   87ca4:	468a      	mov	sl, r1
   87ca6:	960a      	str	r6, [sp, #40]	; 0x28
   87ca8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   87cac:	4604      	mov	r4, r0
   87cae:	4619      	mov	r1, r3
   87cb0:	f04f 0c2f 	mov.w	ip, #47	; 0x2f
   87cb4:	f04f 0947 	mov.w	r9, #71	; 0x47
   87cb8:	f04f 0517 	mov.w	r5, #23
   87cbc:	9704      	str	r7, [sp, #16]
	if ((flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER)
   87cbe:	d038      	beq.n	87d32 <check_window_dimensions+0xda>
	{
		/* has border */
		if ((flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   87cc0:	f012 0702 	ands.w	r7, r2, #2
   87cc4:	d066      	beq.n	87d94 <check_window_dimensions+0x13c>
		{
			/* title bar present so add title bar height and one border thickness */
			window_minimum_height += (title_bar_height + MW_BORDER_WIDTH);
   87cc6:	a904      	add	r1, sp, #16
		if ((flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   87cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
   87cca:	9c08      	ldr	r4, [sp, #32]
			window_minimum_height += (title_bar_height + MW_BORDER_WIDTH);
   87ccc:	e891 1222 	ldmia.w	r1, {r1, r5, r9, ip}
   87cd0:	e037      	b.n	87d42 <check_window_dimensions+0xea>
   87cd2:	230f      	movs	r3, #15
   87cd4:	930e      	str	r3, [sp, #56]	; 0x38
   87cd6:	9301      	str	r3, [sp, #4]
   87cd8:	232b      	movs	r3, #43	; 0x2b
   87cda:	930d      	str	r3, [sp, #52]	; 0x34
   87cdc:	232d      	movs	r3, #45	; 0x2d
   87cde:	930c      	str	r3, [sp, #48]	; 0x30
   87ce0:	2339      	movs	r3, #57	; 0x39
   87ce2:	930b      	str	r3, [sp, #44]	; 0x2c
   87ce4:	2321      	movs	r3, #33	; 0x21
   87ce6:	930a      	str	r3, [sp, #40]	; 0x28
   87ce8:	2320      	movs	r3, #32
   87cea:	9309      	str	r3, [sp, #36]	; 0x24
   87cec:	232c      	movs	r3, #44	; 0x2c
   87cee:	9308      	str	r3, [sp, #32]
   87cf0:	232e      	movs	r3, #46	; 0x2e
   87cf2:	9307      	str	r3, [sp, #28]
   87cf4:	233a      	movs	r3, #58	; 0x3a
   87cf6:	2118      	movs	r1, #24
   87cf8:	261b      	movs	r6, #27
   87cfa:	9306      	str	r3, [sp, #24]
   87cfc:	2714      	movs	r7, #20
   87cfe:	2322      	movs	r3, #34	; 0x22
	if ((flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER)
   87d00:	f012 0e01 	ands.w	lr, r2, #1
   87d04:	9305      	str	r3, [sp, #20]
   87d06:	910f      	str	r1, [sp, #60]	; 0x3c
   87d08:	9603      	str	r6, [sp, #12]
   87d0a:	f04f 0c1d 	mov.w	ip, #29
   87d0e:	f04f 0929 	mov.w	r9, #41	; 0x29
   87d12:	f04f 0511 	mov.w	r5, #17
   87d16:	f04f 0827 	mov.w	r8, #39	; 0x27
   87d1a:	f04f 001f 	mov.w	r0, #31
   87d1e:	f04f 0419 	mov.w	r4, #25
   87d22:	f04f 030d 	mov.w	r3, #13
   87d26:	f04f 0a41 	mov.w	sl, #65	; 0x41
   87d2a:	f04f 0113 	mov.w	r1, #19
   87d2e:	9704      	str	r7, [sp, #16]
   87d30:	d1c6      	bne.n	87cc0 <check_window_dimensions+0x68>
		}
	}
	else
	{
		/* no border present */
		if ((flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   87d32:	f012 0702 	ands.w	r7, r2, #2
   87d36:	d128      	bne.n	87d8a <check_window_dimensions+0x132>
   87d38:	46b4      	mov	ip, r6
   87d3a:	46c1      	mov	r9, r8
   87d3c:	4618      	mov	r0, r3
	window_minimum_height = 1;
   87d3e:	2101      	movs	r1, #1
   87d40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
			window_minimum_height += title_bar_height;
		}
	}
	
	/* check for menu bar */
	if ((flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR)
   87d42:	0596      	lsls	r6, r2, #22
   87d44:	d502      	bpl.n	87d4c <check_window_dimensions+0xf4>
   87d46:	4660      	mov	r0, ip
   87d48:	464c      	mov	r4, r9
	{
		/* menu bar present so add its height */
		window_minimum_height += menu_bar_height;
   87d4a:	4629      	mov	r1, r5
	}

	/* check for scroll bars */
	if ((flags & MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR &&
   87d4c:	f402 75c0 	and.w	r5, r2, #384	; 0x180
   87d50:	f5b5 7fc0 	cmp.w	r5, #384	; 0x180
   87d54:	d032      	beq.n	87dbc <check_window_dimensions+0x164>
			(flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
	{
		/* both scroll bars present so add scroll bar narrow dimension and slider size*/
		window_minimum_height += (scroll_bar_narrow_dimension + scroll_bar_slider_size);
	}
	else if ((flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
   87d56:	f012 0480 	ands.w	r4, r2, #128	; 0x80
   87d5a:	d023      	beq.n	87da4 <check_window_dimensions+0x14c>

	/* starting width is 1 pixel */
	window_minimum_width = 1;

	/* check for border present */
	if ((flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER)
   87d5c:	f1be 0f00 	cmp.w	lr, #0
   87d60:	d132      	bne.n	87dc8 <check_window_dimensions+0x170>
	window_minimum_width = 1;
   87d62:	2101      	movs	r1, #1
   87d64:	f402 7280 	and.w	r2, r2, #256	; 0x100
			(flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
	{
		/* both scroll bars present so add scroll bar narrow dimension and slider size*/
		window_minimum_width += (scroll_bar_narrow_dimension + scroll_bar_slider_size);
	}
	else if ((flags & MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR)
   87d68:	b912      	cbnz	r2, 87d70 <check_window_dimensions+0x118>
	{
		/* only horiz scroll bar present so add slider size */
		window_minimum_width += (scroll_bar_slider_size);
	}
	else if ((flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
   87d6a:	2c00      	cmp	r4, #0
   87d6c:	bf08      	it	eq
   87d6e:	460b      	moveq	r3, r1
	 * other width giving features, so use which of the two (title bar or previously calculated width) is bigger */
	if ((flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
	{
		if (window_minimum_width < (icon_offset * 4 + 1))
		{
			window_minimum_width = (icon_offset * 4 + 1);
   87d70:	2f00      	cmp	r7, #0
   87d72:	bf18      	it	ne
   87d74:	4653      	movne	r3, sl
		}
	}

	/* now check the new dimensions with the minimums allowed */
	if (new_width < window_minimum_width)
   87d76:	455b      	cmp	r3, fp
   87d78:	dc10      	bgt.n	87d9c <check_window_dimensions+0x144>
	{
		return (false);
	}
	if (new_height < window_minimum_height)
   87d7a:	9b02      	ldr	r3, [sp, #8]
   87d7c:	4283      	cmp	r3, r0
   87d7e:	bfb4      	ite	lt
   87d80:	2000      	movlt	r0, #0
   87d82:	2001      	movge	r0, #1
		return (false);
	}

	/* requested new dimensions acceptable */
	return (true);
}
   87d84:	b011      	add	sp, #68	; 0x44
   87d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   87d8a:	ad0a      	add	r5, sp, #40	; 0x28
   87d8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   87d8e:	e895 1220 	ldmia.w	r5, {r5, r9, ip}
   87d92:	e7d6      	b.n	87d42 <check_window_dimensions+0xea>
   87d94:	9801      	ldr	r0, [sp, #4]
   87d96:	9c03      	ldr	r4, [sp, #12]
			window_minimum_height += (MW_BORDER_WIDTH * 2);
   87d98:	2103      	movs	r1, #3
   87d9a:	e7d2      	b.n	87d42 <check_window_dimensions+0xea>
		return (false);
   87d9c:	2000      	movs	r0, #0
}
   87d9e:	b011      	add	sp, #68	; 0x44
   87da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87da4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
   87da8:	bf08      	it	eq
   87daa:	4608      	moveq	r0, r1
	if ((flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER)
   87dac:	9901      	ldr	r1, [sp, #4]
   87dae:	f1be 0f00 	cmp.w	lr, #0
   87db2:	bf16      	itet	ne
   87db4:	460b      	movne	r3, r1
   87db6:	2101      	moveq	r1, #1
   87db8:	2103      	movne	r1, #3
   87dba:	e7d5      	b.n	87d68 <check_window_dimensions+0x110>
   87dbc:	f1be 0f00 	cmp.w	lr, #0
   87dc0:	d004      	beq.n	87dcc <check_window_dimensions+0x174>
   87dc2:	4620      	mov	r0, r4
		window_minimum_width += (scroll_bar_narrow_dimension + scroll_bar_slider_size);
   87dc4:	9b03      	ldr	r3, [sp, #12]
   87dc6:	e7d3      	b.n	87d70 <check_window_dimensions+0x118>
	if ((flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER)
   87dc8:	9b01      	ldr	r3, [sp, #4]
   87dca:	e7d1      	b.n	87d70 <check_window_dimensions+0x118>
   87dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87dce:	3301      	adds	r3, #1
   87dd0:	9303      	str	r3, [sp, #12]
   87dd2:	e7f6      	b.n	87dc2 <check_window_dimensions+0x16a>

00087dd4 <root_paint_function>:
 *
 * @param window_handle Handle of root window
 * @param draw_info Draw info structure describing offset and clip region
 */
static void root_paint_function(mw_handle_t window_handle, const mw_gl_draw_info_t *draw_info)
{
   87dd4:	b570      	push	{r4, r5, r6, lr}
	MW_ASSERT(mw_all_windows[MW_ROOT_WINDOW_ID].window_handle == window_handle, "Expected root window handle");
   87dd6:	4b09      	ldr	r3, [pc, #36]	; (87dfc <root_paint_function+0x28>)
{
   87dd8:	460c      	mov	r4, r1
	MW_ASSERT(mw_all_windows[MW_ROOT_WINDOW_ID].window_handle == window_handle, "Expected root window handle");
   87dda:	695a      	ldr	r2, [r3, #20]
   87ddc:	4d08      	ldr	r5, [pc, #32]	; (87e00 <root_paint_function+0x2c>)
   87dde:	1a10      	subs	r0, r2, r0
   87de0:	fab0 f080 	clz	r0, r0
   87de4:	4b07      	ldr	r3, [pc, #28]	; (87e04 <root_paint_function+0x30>)
   87de6:	0940      	lsrs	r0, r0, #5
   87de8:	f240 22bf 	movw	r2, #703	; 0x2bf
   87dec:	4906      	ldr	r1, [pc, #24]	; (87e08 <root_paint_function+0x34>)
   87dee:	47a8      	blx	r5

	/* call user root window paint */
	mw_user_root_paint_function(draw_info);
   87df0:	4620      	mov	r0, r4
}
   87df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	mw_user_root_paint_function(draw_info);
   87df6:	4b05      	ldr	r3, [pc, #20]	; (87e0c <root_paint_function+0x38>)
   87df8:	4718      	bx	r3
   87dfa:	bf00      	nop
   87dfc:	20071bd8 	.word	0x20071bd8
   87e00:	00095add 	.word	0x00095add
   87e04:	000ab964 	.word	0x000ab964
   87e08:	000ab200 	.word	0x000ab200
   87e0c:	000801c5 	.word	0x000801c5

00087e10 <find_rect_window_intersections>:
	bool self_left_found = false;
	bool self_right_found = false;
	bool self_top_found = false;
	bool self_bottom_found = false;

	MW_ASSERT(horiz_edges_count != (void*)0, "Null pointer argument");
   87e10:	1c0b      	adds	r3, r1, #0
   87e12:	bf18      	it	ne
   87e14:	2301      	movne	r3, #1
{
   87e16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87e1a:	4690      	mov	r8, r2
   87e1c:	4606      	mov	r6, r0
	MW_ASSERT(horiz_edges_count != (void*)0, "Null pointer argument");
   87e1e:	4cb5      	ldr	r4, [pc, #724]	; (880f4 <find_rect_window_intersections+0x2e4>)
{
   87e20:	b083      	sub	sp, #12
	MW_ASSERT(horiz_edges_count != (void*)0, "Null pointer argument");
   87e22:	4618      	mov	r0, r3
   87e24:	460f      	mov	r7, r1
   87e26:	4bb4      	ldr	r3, [pc, #720]	; (880f8 <find_rect_window_intersections+0x2e8>)
   87e28:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
   87e2c:	49b3      	ldr	r1, [pc, #716]	; (880fc <find_rect_window_intersections+0x2ec>)
   87e2e:	47a0      	blx	r4
	MW_ASSERT(vert_edges_count != (void*)0, "Null pointer argument");
   87e30:	f118 0000 	adds.w	r0, r8, #0
   87e34:	bf18      	it	ne
   87e36:	2001      	movne	r0, #1
   87e38:	4baf      	ldr	r3, [pc, #700]	; (880f8 <find_rect_window_intersections+0x2e8>)
   87e3a:	f240 42b9 	movw	r2, #1209	; 0x4b9
   87e3e:	49af      	ldr	r1, [pc, #700]	; (880fc <find_rect_window_intersections+0x2ec>)
   87e40:	47a0      	blx	r4
	MW_ASSERT(r != (void*)0, "Null pointer argument");
   87e42:	1c30      	adds	r0, r6, #0
   87e44:	4bac      	ldr	r3, [pc, #688]	; (880f8 <find_rect_window_intersections+0x2e8>)
   87e46:	bf18      	it	ne
   87e48:	2001      	movne	r0, #1
   87e4a:	f240 42ba 	movw	r2, #1210	; 0x4ba
   87e4e:	49ab      	ldr	r1, [pc, #684]	; (880fc <find_rect_window_intersections+0x2ec>)
   87e50:	47a0      	blx	r4

	/* clear the number of edges found */
	*horiz_edges_count = 0U;
   87e52:	2300      	movs	r3, #0
   87e54:	4caa      	ldr	r4, [pc, #680]	; (88100 <find_rect_window_intersections+0x2f0>)
   87e56:	803b      	strh	r3, [r7, #0]
		{
			continue;
		}
        
        /* check here if the latest window i overlaps with the rect r, if not then continue */
		if (!mw_util_do_rects_coincide(r, &mw_all_windows[i].window_rect))
   87e58:	4daa      	ldr	r5, [pc, #680]	; (88104 <find_rect_window_intersections+0x2f4>)
		/* test window bottom edge against rect r's vertical range */
		if (mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height - 1 >= r->y &&
				mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height - 1 < r->y + r->height)
		{
			/* check window's bottom edge against screen edges */				
			if (mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height <= MW_ROOT_HEIGHT &&
   87e5a:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 88118 <find_rect_window_intersections+0x308>
					mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height >= 0)
			{
				/* it's within both so add bottom edge */			
				horizontal_edges[*horiz_edges_count] = mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height;
   87e5e:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 8810c <find_rect_window_intersections+0x2fc>
	*vert_edges_count = 0U;
   87e62:	f8a8 3000 	strh.w	r3, [r8]
   87e66:	f504 7b60 	add.w	fp, r4, #896	; 0x380
   87e6a:	e002      	b.n	87e72 <find_rect_window_intersections+0x62>
   87e6c:	3440      	adds	r4, #64	; 0x40
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   87e6e:	45a3      	cmp	fp, r4
   87e70:	d04b      	beq.n	87f0a <find_rect_window_intersections+0xfa>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   87e72:	68e3      	ldr	r3, [r4, #12]
   87e74:	f003 0228 	and.w	r2, r3, #40	; 0x28
   87e78:	2a28      	cmp	r2, #40	; 0x28
   87e7a:	d1f7      	bne.n	87e6c <find_rect_window_intersections+0x5c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   87e7c:	06db      	lsls	r3, r3, #27
   87e7e:	d4f5      	bmi.n	87e6c <find_rect_window_intersections+0x5c>
		if (!mw_util_do_rects_coincide(r, &mw_all_windows[i].window_rect))
   87e80:	f104 0118 	add.w	r1, r4, #24
   87e84:	4630      	mov	r0, r6
   87e86:	47a8      	blx	r5
   87e88:	2800      	cmp	r0, #0
   87e8a:	d0ef      	beq.n	87e6c <find_rect_window_intersections+0x5c>
		if (mw_all_windows[i].window_rect.x >= r->x &&
   87e8c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   87e90:	f9b6 3000 	ldrsh.w	r3, [r6]
   87e94:	429a      	cmp	r2, r3
   87e96:	db05      	blt.n	87ea4 <find_rect_window_intersections+0x94>
				mw_all_windows[i].window_rect.x < r->x + r->width)
   87e98:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   87e9c:	4419      	add	r1, r3
		if (mw_all_windows[i].window_rect.x >= r->x &&
   87e9e:	428a      	cmp	r2, r1
   87ea0:	f2c0 80df 	blt.w	88062 <find_rect_window_intersections+0x252>
		if (mw_all_windows[i].window_rect.x + mw_all_windows[i].window_rect.width - 1 >= r->x &&
   87ea4:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   87ea8:	440a      	add	r2, r1
   87eaa:	429a      	cmp	r2, r3
   87eac:	dd05      	ble.n	87eba <find_rect_window_intersections+0xaa>
				mw_all_windows[i].window_rect.x + mw_all_windows[i].window_rect.width - 1 < r->x + r->width)
   87eae:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   87eb2:	440b      	add	r3, r1
		if (mw_all_windows[i].window_rect.x + mw_all_windows[i].window_rect.width - 1 >= r->x &&
   87eb4:	429a      	cmp	r2, r3
   87eb6:	f340 80ed 	ble.w	88094 <find_rect_window_intersections+0x284>
		if (mw_all_windows[i].window_rect.y >= r->y &&
   87eba:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
   87ebe:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   87ec2:	429a      	cmp	r2, r3
   87ec4:	db05      	blt.n	87ed2 <find_rect_window_intersections+0xc2>
				mw_all_windows[i].window_rect.y < r->y + r->height)
   87ec6:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
   87eca:	4419      	add	r1, r3
		if (mw_all_windows[i].window_rect.y >= r->y &&
   87ecc:	428a      	cmp	r2, r1
   87ece:	f2c0 80b4 	blt.w	8803a <find_rect_window_intersections+0x22a>
		if (mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height - 1 >= r->y &&
   87ed2:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   87ed6:	440a      	add	r2, r1
   87ed8:	429a      	cmp	r2, r3
   87eda:	ddc7      	ble.n	87e6c <find_rect_window_intersections+0x5c>
				mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height - 1 < r->y + r->height)
   87edc:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
   87ee0:	440b      	add	r3, r1
		if (mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height - 1 >= r->y &&
   87ee2:	429a      	cmp	r2, r3
   87ee4:	dcc2      	bgt.n	87e6c <find_rect_window_intersections+0x5c>
   87ee6:	9201      	str	r2, [sp, #4]
			if (mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height <= MW_ROOT_HEIGHT &&
   87ee8:	47c8      	blx	r9
   87eea:	9a01      	ldr	r2, [sp, #4]
   87eec:	4282      	cmp	r2, r0
   87eee:	dcbd      	bgt.n	87e6c <find_rect_window_intersections+0x5c>
					mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height >= 0)
   87ef0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
   87ef4:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
			if (mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height <= MW_ROOT_HEIGHT &&
   87ef8:	189b      	adds	r3, r3, r2
   87efa:	d4b7      	bmi.n	87e6c <find_rect_window_intersections+0x5c>
				horizontal_edges[*horiz_edges_count] = mw_all_windows[i].window_rect.y + mw_all_windows[i].window_rect.height;
   87efc:	883a      	ldrh	r2, [r7, #0]
   87efe:	f82a 3012 	strh.w	r3, [sl, r2, lsl #1]
				(*horiz_edges_count)++;
   87f02:	883b      	ldrh	r3, [r7, #0]
   87f04:	3301      	adds	r3, #1
   87f06:	803b      	strh	r3, [r7, #0]
   87f08:	e7b0      	b.n	87e6c <find_rect_window_intersections+0x5c>
			}
		}
	}

	/* find if the vertical edges of the window being compared against the rect are in the array of found edges */
	for (edges = 0U; edges < *vert_edges_count; edges++)
   87f0a:	f8b8 3000 	ldrh.w	r3, [r8]
   87f0e:	9301      	str	r3, [sp, #4]
   87f10:	2b00      	cmp	r3, #0
   87f12:	f000 80da 	beq.w	880ca <find_rect_window_intersections+0x2ba>
   87f16:	2100      	movs	r1, #0
   87f18:	4608      	mov	r0, r1
   87f1a:	1e5c      	subs	r4, r3, #1
   87f1c:	f9b6 5000 	ldrsh.w	r5, [r6]
   87f20:	4b79      	ldr	r3, [pc, #484]	; (88108 <find_rect_window_intersections+0x2f8>)
   87f22:	f9b6 e004 	ldrsh.w	lr, [r6, #4]
   87f26:	b2a4      	uxth	r4, r4
   87f28:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   87f2c:	44ae      	add	lr, r5
   87f2e:	3b02      	subs	r3, #2
	{
		/* left edge */
		if (vertical_edges[edges] == r->x)
   87f30:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
   87f34:	42aa      	cmp	r2, r5
   87f36:	bf08      	it	eq
   87f38:	2001      	moveq	r0, #1
   87f3a:	4572      	cmp	r2, lr
   87f3c:	bf08      	it	eq
   87f3e:	2101      	moveq	r1, #1
	for (edges = 0U; edges < *vert_edges_count; edges++)
   87f40:	429c      	cmp	r4, r3
   87f42:	d1f5      	bne.n	87f30 <find_rect_window_intersections+0x120>
			self_right_found = true;
		}
	}

	/* repeat for horizontal edges */
	for (edges = 0U; edges < *horiz_edges_count; edges++)
   87f44:	f8b7 a000 	ldrh.w	sl, [r7]
   87f48:	f1ba 0f00 	cmp.w	sl, #0
   87f4c:	f000 80c7 	beq.w	880de <find_rect_window_intersections+0x2ce>
   87f50:	2300      	movs	r3, #0
   87f52:	461c      	mov	r4, r3
   87f54:	461d      	mov	r5, r3
   87f56:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
   87f5a:	f9b6 9006 	ldrsh.w	r9, [r6, #6]
   87f5e:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 8811c <find_rect_window_intersections+0x30c>
   87f62:	44d9      	add	r9, fp
	{
		/* top edge */
		if (horizontal_edges[edges] == r->y)
   87f64:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!
   87f68:	3301      	adds	r3, #1
	for (edges = 0U; edges < *horiz_edges_count; edges++)
   87f6a:	fa1f fc83 	uxth.w	ip, r3
   87f6e:	455a      	cmp	r2, fp
   87f70:	bf08      	it	eq
   87f72:	2501      	moveq	r5, #1
   87f74:	454a      	cmp	r2, r9
   87f76:	bf08      	it	eq
   87f78:	2401      	moveq	r4, #1
   87f7a:	45e2      	cmp	sl, ip
   87f7c:	d8f2      	bhi.n	87f64 <find_rect_window_intersections+0x154>
			self_bottom_found = true;
		}
	}

	/* if our own window edges were not found add them, clipping to the edge of the screen first */
	if (!self_left_found)
   87f7e:	b1d0      	cbz	r0, 87fb6 <find_rect_window_intersections+0x1a6>
	{
		vertical_edges[*vert_edges_count] = r->x < 0 ? 0 : r->x;
		(*vert_edges_count)++;
	}

	if (!self_right_found)
   87f80:	b369      	cbz	r1, 87fde <find_rect_window_intersections+0x1ce>
	{
		vertical_edges[*vert_edges_count] = r->x + r->width > MW_ROOT_WIDTH ? MW_ROOT_WIDTH : r->x + r->width;
		(*vert_edges_count)++;
	}

	if (!self_top_found)
   87f82:	b955      	cbnz	r5, 87f9a <find_rect_window_intersections+0x18a>
	{
		horizontal_edges[*horiz_edges_count] = r->y < 0 ? 0 : r->y;
   87f84:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   87f88:	8839      	ldrh	r1, [r7, #0]
   87f8a:	4a60      	ldr	r2, [pc, #384]	; (8810c <find_rect_window_intersections+0x2fc>)
   87f8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87f90:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		(*horiz_edges_count)++;
   87f94:	883b      	ldrh	r3, [r7, #0]
   87f96:	3301      	adds	r3, #1
   87f98:	803b      	strh	r3, [r7, #0]
	}

	if (!self_bottom_found)
   87f9a:	2c00      	cmp	r4, #0
   87f9c:	d037      	beq.n	8800e <find_rect_window_intersections+0x1fe>
		horizontal_edges[*horiz_edges_count] = r->y + r->height > MW_ROOT_HEIGHT ? MW_ROOT_HEIGHT : r->y + r->height;
		(*horiz_edges_count)++;
	}

	/* sort the arrays of intersections */
	mw_util_shell_sort(vertical_edges, *vert_edges_count);
   87f9e:	4c5c      	ldr	r4, [pc, #368]	; (88110 <find_rect_window_intersections+0x300>)
   87fa0:	f8b8 1000 	ldrh.w	r1, [r8]
   87fa4:	4858      	ldr	r0, [pc, #352]	; (88108 <find_rect_window_intersections+0x2f8>)
   87fa6:	47a0      	blx	r4
	mw_util_shell_sort(horizontal_edges, *horiz_edges_count);
   87fa8:	4623      	mov	r3, r4
   87faa:	8839      	ldrh	r1, [r7, #0]
   87fac:	4857      	ldr	r0, [pc, #348]	; (8810c <find_rect_window_intersections+0x2fc>)
}
   87fae:	b003      	add	sp, #12
   87fb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_util_shell_sort(horizontal_edges, *horiz_edges_count);
   87fb4:	4718      	bx	r3
   87fb6:	f8dd a004 	ldr.w	sl, [sp, #4]
		vertical_edges[*vert_edges_count] = r->x < 0 ? 0 : r->x;
   87fba:	f9b6 3000 	ldrsh.w	r3, [r6]
   87fbe:	4a52      	ldr	r2, [pc, #328]	; (88108 <find_rect_window_intersections+0x2f8>)
   87fc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87fc4:	f822 301a 	strh.w	r3, [r2, sl, lsl #1]
		(*vert_edges_count)++;
   87fc8:	f8b8 a000 	ldrh.w	sl, [r8]
   87fcc:	f10a 0a01 	add.w	sl, sl, #1
   87fd0:	fa1f f38a 	uxth.w	r3, sl
   87fd4:	9301      	str	r3, [sp, #4]
   87fd6:	f8a8 3000 	strh.w	r3, [r8]
	if (!self_right_found)
   87fda:	2900      	cmp	r1, #0
   87fdc:	d1d1      	bne.n	87f82 <find_rect_window_intersections+0x172>
		vertical_edges[*vert_edges_count] = r->x + r->width > MW_ROOT_WIDTH ? MW_ROOT_WIDTH : r->x + r->width;
   87fde:	f9b6 9000 	ldrsh.w	r9, [r6]
   87fe2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
   87fe6:	f8df a12c 	ldr.w	sl, [pc, #300]	; 88114 <find_rect_window_intersections+0x304>
   87fea:	4499      	add	r9, r3
   87fec:	47d0      	blx	sl
   87fee:	4581      	cmp	r9, r0
   87ff0:	dc73      	bgt.n	880da <find_rect_window_intersections+0x2ca>
   87ff2:	8830      	ldrh	r0, [r6, #0]
   87ff4:	88b3      	ldrh	r3, [r6, #4]
   87ff6:	4418      	add	r0, r3
   87ff8:	b200      	sxth	r0, r0
   87ffa:	4b43      	ldr	r3, [pc, #268]	; (88108 <find_rect_window_intersections+0x2f8>)
   87ffc:	9a01      	ldr	r2, [sp, #4]
   87ffe:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
		(*vert_edges_count)++;
   88002:	f8b8 3000 	ldrh.w	r3, [r8]
   88006:	3301      	adds	r3, #1
   88008:	f8a8 3000 	strh.w	r3, [r8]
   8800c:	e7b9      	b.n	87f82 <find_rect_window_intersections+0x172>
		horizontal_edges[*horiz_edges_count] = r->y + r->height > MW_ROOT_HEIGHT ? MW_ROOT_HEIGHT : r->y + r->height;
   8800e:	f9b6 4002 	ldrsh.w	r4, [r6, #2]
   88012:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
   88016:	f8df 9100 	ldr.w	r9, [pc, #256]	; 88118 <find_rect_window_intersections+0x308>
   8801a:	441c      	add	r4, r3
   8801c:	883d      	ldrh	r5, [r7, #0]
   8801e:	47c8      	blx	r9
   88020:	4284      	cmp	r4, r0
   88022:	dc50      	bgt.n	880c6 <find_rect_window_intersections+0x2b6>
   88024:	8870      	ldrh	r0, [r6, #2]
   88026:	88f3      	ldrh	r3, [r6, #6]
   88028:	4418      	add	r0, r3
   8802a:	b200      	sxth	r0, r0
   8802c:	4b37      	ldr	r3, [pc, #220]	; (8810c <find_rect_window_intersections+0x2fc>)
   8802e:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
		(*horiz_edges_count)++;
   88032:	883b      	ldrh	r3, [r7, #0]
   88034:	3301      	adds	r3, #1
   88036:	803b      	strh	r3, [r7, #0]
   88038:	e7b1      	b.n	87f9e <find_rect_window_intersections+0x18e>
   8803a:	9201      	str	r2, [sp, #4]
			if (mw_all_windows[i].window_rect.y < MW_ROOT_HEIGHT &&
   8803c:	47c8      	blx	r9
   8803e:	9a01      	ldr	r2, [sp, #4]
   88040:	4282      	cmp	r2, r0
					mw_all_windows[i].window_rect.y >= 0)
   88042:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
			if (mw_all_windows[i].window_rect.y < MW_ROOT_HEIGHT &&
   88046:	da09      	bge.n	8805c <find_rect_window_intersections+0x24c>
   88048:	2a00      	cmp	r2, #0
   8804a:	db07      	blt.n	8805c <find_rect_window_intersections+0x24c>
				horizontal_edges[*horiz_edges_count] = mw_all_windows[i].window_rect.y;
   8804c:	883b      	ldrh	r3, [r7, #0]
   8804e:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
				(*horiz_edges_count)++;
   88052:	883b      	ldrh	r3, [r7, #0]
   88054:	3301      	adds	r3, #1
   88056:	803b      	strh	r3, [r7, #0]
   88058:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
   8805c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   88060:	e737      	b.n	87ed2 <find_rect_window_intersections+0xc2>
			if (mw_all_windows[i].window_rect.x < MW_ROOT_WIDTH &&
   88062:	4b2c      	ldr	r3, [pc, #176]	; (88114 <find_rect_window_intersections+0x304>)
   88064:	9201      	str	r2, [sp, #4]
   88066:	4798      	blx	r3
   88068:	9a01      	ldr	r2, [sp, #4]
   8806a:	4282      	cmp	r2, r0
					mw_all_windows[i].window_rect.x >= 0)
   8806c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
			if (mw_all_windows[i].window_rect.x < MW_ROOT_WIDTH &&
   88070:	da0d      	bge.n	8808e <find_rect_window_intersections+0x27e>
   88072:	2a00      	cmp	r2, #0
   88074:	db0b      	blt.n	8808e <find_rect_window_intersections+0x27e>
				vertical_edges[*vert_edges_count] = mw_all_windows[i].window_rect.x;
   88076:	4b24      	ldr	r3, [pc, #144]	; (88108 <find_rect_window_intersections+0x2f8>)
   88078:	f8b8 1000 	ldrh.w	r1, [r8]
   8807c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
				(*vert_edges_count)++;
   88080:	f8b8 3000 	ldrh.w	r3, [r8]
   88084:	3301      	adds	r3, #1
   88086:	f8a8 3000 	strh.w	r3, [r8]
   8808a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   8808e:	f9b6 3000 	ldrsh.w	r3, [r6]
   88092:	e707      	b.n	87ea4 <find_rect_window_intersections+0x94>
			if (mw_all_windows[i].window_rect.x + mw_all_windows[i].window_rect.width <= MW_ROOT_WIDTH &&
   88094:	4b1f      	ldr	r3, [pc, #124]	; (88114 <find_rect_window_intersections+0x304>)
   88096:	9201      	str	r2, [sp, #4]
   88098:	4798      	blx	r3
   8809a:	9a01      	ldr	r2, [sp, #4]
   8809c:	4282      	cmp	r2, r0
   8809e:	f73f af0c 	bgt.w	87eba <find_rect_window_intersections+0xaa>
					mw_all_windows[i].window_rect.x + mw_all_windows[i].window_rect.width >= 0)
   880a2:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
   880a6:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
			if (mw_all_windows[i].window_rect.x + mw_all_windows[i].window_rect.width <= MW_ROOT_WIDTH &&
   880aa:	189b      	adds	r3, r3, r2
   880ac:	f53f af05 	bmi.w	87eba <find_rect_window_intersections+0xaa>
				vertical_edges[*vert_edges_count] = mw_all_windows[i].window_rect.x + mw_all_windows[i].window_rect.width;
   880b0:	f8b8 1000 	ldrh.w	r1, [r8]
   880b4:	4a14      	ldr	r2, [pc, #80]	; (88108 <find_rect_window_intersections+0x2f8>)
   880b6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
				(*vert_edges_count)++;
   880ba:	f8b8 3000 	ldrh.w	r3, [r8]
   880be:	3301      	adds	r3, #1
   880c0:	f8a8 3000 	strh.w	r3, [r8]
   880c4:	e6f9      	b.n	87eba <find_rect_window_intersections+0xaa>
		horizontal_edges[*horiz_edges_count] = r->y + r->height > MW_ROOT_HEIGHT ? MW_ROOT_HEIGHT : r->y + r->height;
   880c6:	47c8      	blx	r9
   880c8:	e7b0      	b.n	8802c <find_rect_window_intersections+0x21c>
	for (edges = 0U; edges < *horiz_edges_count; edges++)
   880ca:	f8b7 a000 	ldrh.w	sl, [r7]
   880ce:	f1ba 0f00 	cmp.w	sl, #0
   880d2:	d00a      	beq.n	880ea <find_rect_window_intersections+0x2da>
   880d4:	4618      	mov	r0, r3
   880d6:	4619      	mov	r1, r3
   880d8:	e73a      	b.n	87f50 <find_rect_window_intersections+0x140>
		vertical_edges[*vert_edges_count] = r->x + r->width > MW_ROOT_WIDTH ? MW_ROOT_WIDTH : r->x + r->width;
   880da:	47d0      	blx	sl
   880dc:	e78d      	b.n	87ffa <find_rect_window_intersections+0x1ea>
	for (edges = 0U; edges < *horiz_edges_count; edges++)
   880de:	4654      	mov	r4, sl
   880e0:	4655      	mov	r5, sl
	if (!self_left_found)
   880e2:	2800      	cmp	r0, #0
   880e4:	f47f af4c 	bne.w	87f80 <find_rect_window_intersections+0x170>
   880e8:	e765      	b.n	87fb6 <find_rect_window_intersections+0x1a6>
	for (edges = 0U; edges < *horiz_edges_count; edges++)
   880ea:	4654      	mov	r4, sl
   880ec:	4655      	mov	r5, sl
   880ee:	4651      	mov	r1, sl
   880f0:	e763      	b.n	87fba <find_rect_window_intersections+0x1aa>
   880f2:	bf00      	nop
   880f4:	00095add 	.word	0x00095add
   880f8:	000a6618 	.word	0x000a6618
   880fc:	000ab2c8 	.word	0x000ab2c8
   88100:	20071bd8 	.word	0x20071bd8
   88104:	00096ecd 	.word	0x00096ecd
   88108:	20071f78 	.word	0x20071f78
   8810c:	2007180c 	.word	0x2007180c
   88110:	000970c1 	.word	0x000970c1
   88114:	00086e2d 	.word	0x00086e2d
   88118:	00086e31 	.word	0x00086e31
   8811c:	2007180a 	.word	0x2007180a

00088120 <get_window_id_for_handle.part.0>:
		return (MW_MAX_WINDOW_COUNT);
	}

	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
	{
		if (mw_all_windows[i].window_handle == window_handle &&
   88120:	4b46      	ldr	r3, [pc, #280]	; (8823c <get_window_id_for_handle.part.0+0x11c>)
   88122:	695a      	ldr	r2, [r3, #20]
   88124:	4290      	cmp	r0, r2
   88126:	d034      	beq.n	88192 <get_window_id_for_handle.part.0+0x72>
   88128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   8812a:	4290      	cmp	r0, r2
   8812c:	d036      	beq.n	8819c <get_window_id_for_handle.part.0+0x7c>
   8812e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   88132:	4290      	cmp	r0, r2
   88134:	d037      	beq.n	881a6 <get_window_id_for_handle.part.0+0x86>
   88136:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   8813a:	4290      	cmp	r0, r2
   8813c:	d039      	beq.n	881b2 <get_window_id_for_handle.part.0+0x92>
   8813e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   88142:	4290      	cmp	r0, r2
   88144:	d03b      	beq.n	881be <get_window_id_for_handle.part.0+0x9e>
   88146:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   8814a:	4290      	cmp	r0, r2
   8814c:	d03d      	beq.n	881ca <get_window_id_for_handle.part.0+0xaa>
   8814e:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
   88152:	4290      	cmp	r0, r2
   88154:	d03f      	beq.n	881d6 <get_window_id_for_handle.part.0+0xb6>
   88156:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
   8815a:	4290      	cmp	r0, r2
   8815c:	d041      	beq.n	881e2 <get_window_id_for_handle.part.0+0xc2>
   8815e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   88162:	4290      	cmp	r0, r2
   88164:	d043      	beq.n	881ee <get_window_id_for_handle.part.0+0xce>
   88166:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
   8816a:	4290      	cmp	r0, r2
   8816c:	d045      	beq.n	881fa <get_window_id_for_handle.part.0+0xda>
   8816e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   88172:	4290      	cmp	r0, r2
   88174:	d047      	beq.n	88206 <get_window_id_for_handle.part.0+0xe6>
   88176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
   8817a:	4290      	cmp	r0, r2
   8817c:	d049      	beq.n	88212 <get_window_id_for_handle.part.0+0xf2>
   8817e:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
   88182:	4290      	cmp	r0, r2
   88184:	d04b      	beq.n	8821e <get_window_id_for_handle.part.0+0xfe>
   88186:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   8818a:	4282      	cmp	r2, r0
   8818c:	d04d      	beq.n	8822a <get_window_id_for_handle.part.0+0x10a>
		{
			return (i);
		}
	}

	return (MW_MAX_WINDOW_COUNT);
   8818e:	200e      	movs	r0, #14
}
   88190:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88192:	68da      	ldr	r2, [r3, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   88194:	0692      	lsls	r2, r2, #26
   88196:	d5c7      	bpl.n	88128 <get_window_id_for_handle.part.0+0x8>
   88198:	2000      	movs	r0, #0
   8819a:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8819c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8819e:	0691      	lsls	r1, r2, #26
   881a0:	d5c5      	bpl.n	8812e <get_window_id_for_handle.part.0+0xe>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   881a2:	2001      	movs	r0, #1
   881a4:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   881a6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   881aa:	0692      	lsls	r2, r2, #26
   881ac:	d5c3      	bpl.n	88136 <get_window_id_for_handle.part.0+0x16>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   881ae:	2002      	movs	r0, #2
   881b0:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   881b2:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   881b6:	0691      	lsls	r1, r2, #26
   881b8:	d5c1      	bpl.n	8813e <get_window_id_for_handle.part.0+0x1e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   881ba:	2003      	movs	r0, #3
   881bc:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   881be:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   881c2:	0692      	lsls	r2, r2, #26
   881c4:	d5bf      	bpl.n	88146 <get_window_id_for_handle.part.0+0x26>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   881c6:	2004      	movs	r0, #4
   881c8:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   881ca:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   881ce:	0691      	lsls	r1, r2, #26
   881d0:	d5bd      	bpl.n	8814e <get_window_id_for_handle.part.0+0x2e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   881d2:	2005      	movs	r0, #5
   881d4:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   881d6:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   881da:	0692      	lsls	r2, r2, #26
   881dc:	d5bb      	bpl.n	88156 <get_window_id_for_handle.part.0+0x36>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   881de:	2006      	movs	r0, #6
   881e0:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   881e2:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   881e6:	0691      	lsls	r1, r2, #26
   881e8:	d5b9      	bpl.n	8815e <get_window_id_for_handle.part.0+0x3e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   881ea:	2007      	movs	r0, #7
   881ec:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   881ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   881f2:	0692      	lsls	r2, r2, #26
   881f4:	d5b7      	bpl.n	88166 <get_window_id_for_handle.part.0+0x46>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   881f6:	2008      	movs	r0, #8
   881f8:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   881fa:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   881fe:	0691      	lsls	r1, r2, #26
   88200:	d5b5      	bpl.n	8816e <get_window_id_for_handle.part.0+0x4e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   88202:	2009      	movs	r0, #9
   88204:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88206:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8820a:	0692      	lsls	r2, r2, #26
   8820c:	d5b3      	bpl.n	88176 <get_window_id_for_handle.part.0+0x56>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8820e:	200a      	movs	r0, #10
   88210:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88212:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   88216:	0691      	lsls	r1, r2, #26
   88218:	d5b1      	bpl.n	8817e <get_window_id_for_handle.part.0+0x5e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8821a:	200b      	movs	r0, #11
   8821c:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8821e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   88222:	0692      	lsls	r2, r2, #26
   88224:	d5af      	bpl.n	88186 <get_window_id_for_handle.part.0+0x66>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   88226:	200c      	movs	r0, #12
   88228:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8822a:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8822e:	f013 0f20 	tst.w	r3, #32
   88232:	bf0c      	ite	eq
   88234:	200e      	moveq	r0, #14
   88236:	200d      	movne	r0, #13
   88238:	4770      	bx	lr
   8823a:	bf00      	nop
   8823c:	20071bd8 	.word	0x20071bd8

00088240 <do_paint_window_client2>:
	MW_ASSERT(invalid_rect != (void*)0, "Null pointer argument");
   88240:	1c0b      	adds	r3, r1, #0
   88242:	bf18      	it	ne
   88244:	2301      	movne	r3, #1
{
   88246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8824a:	4605      	mov	r5, r0
   8824c:	b084      	sub	sp, #16
	MW_ASSERT(invalid_rect != (void*)0, "Null pointer argument");
   8824e:	460f      	mov	r7, r1
   88250:	4618      	mov	r0, r3
   88252:	f640 12c7 	movw	r2, #2503	; 0x9c7
   88256:	4b60      	ldr	r3, [pc, #384]	; (883d8 <do_paint_window_client2+0x198>)
   88258:	4960      	ldr	r1, [pc, #384]	; (883dc <do_paint_window_client2+0x19c>)
   8825a:	f8df 8190 	ldr.w	r8, [pc, #400]	; 883ec <do_paint_window_client2+0x1ac>
   8825e:	47c0      	blx	r8
	if (window_handle == MW_INVALID_HANDLE)
   88260:	2d00      	cmp	r5, #0
   88262:	d05f      	beq.n	88324 <do_paint_window_client2+0xe4>
		if (mw_all_windows[i].window_handle == window_handle &&
   88264:	4c5e      	ldr	r4, [pc, #376]	; (883e0 <do_paint_window_client2+0x1a0>)
   88266:	6963      	ldr	r3, [r4, #20]
   88268:	429d      	cmp	r5, r3
   8826a:	d05f      	beq.n	8832c <do_paint_window_client2+0xec>
   8826c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8826e:	429d      	cmp	r5, r3
   88270:	d062      	beq.n	88338 <do_paint_window_client2+0xf8>
   88272:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   88276:	429d      	cmp	r5, r3
   88278:	d063      	beq.n	88342 <do_paint_window_client2+0x102>
   8827a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   8827e:	429d      	cmp	r5, r3
   88280:	d065      	beq.n	8834e <do_paint_window_client2+0x10e>
   88282:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   88286:	429d      	cmp	r5, r3
   88288:	d067      	beq.n	8835a <do_paint_window_client2+0x11a>
   8828a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   8828e:	429d      	cmp	r5, r3
   88290:	d069      	beq.n	88366 <do_paint_window_client2+0x126>
   88292:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   88296:	429d      	cmp	r5, r3
   88298:	d06b      	beq.n	88372 <do_paint_window_client2+0x132>
   8829a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   8829e:	429d      	cmp	r5, r3
   882a0:	d06d      	beq.n	8837e <do_paint_window_client2+0x13e>
   882a2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   882a6:	429d      	cmp	r5, r3
   882a8:	d06f      	beq.n	8838a <do_paint_window_client2+0x14a>
   882aa:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   882ae:	429d      	cmp	r5, r3
   882b0:	d071      	beq.n	88396 <do_paint_window_client2+0x156>
   882b2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   882b6:	429d      	cmp	r5, r3
   882b8:	d073      	beq.n	883a2 <do_paint_window_client2+0x162>
   882ba:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   882be:	429d      	cmp	r5, r3
   882c0:	d075      	beq.n	883ae <do_paint_window_client2+0x16e>
   882c2:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   882c6:	429d      	cmp	r5, r3
   882c8:	d077      	beq.n	883ba <do_paint_window_client2+0x17a>
   882ca:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   882ce:	429d      	cmp	r5, r3
   882d0:	d079      	beq.n	883c6 <do_paint_window_client2+0x186>
   882d2:	260e      	movs	r6, #14
   882d4:	2000      	movs	r0, #0
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Illegal window id");
   882d6:	4b43      	ldr	r3, [pc, #268]	; (883e4 <do_paint_window_client2+0x1a4>)
   882d8:	f640 12cb 	movw	r2, #2507	; 0x9cb
   882dc:	493f      	ldr	r1, [pc, #252]	; (883dc <do_paint_window_client2+0x19c>)
   882de:	47c0      	blx	r8
	in_client_window_paint_function = true;
   882e0:	f04f 0e01 	mov.w	lr, #1
	client_draw_info.clip_rect.x = invalid_rect->x - mw_all_windows[window_id].client_rect.x;
   882e4:	01b3      	lsls	r3, r6, #6
   882e6:	18e2      	adds	r2, r4, r3
   882e8:	3320      	adds	r3, #32
   882ea:	58e6      	ldr	r6, [r4, r3]
   882ec:	f8b2 c020 	ldrh.w	ip, [r2, #32]
   882f0:	883c      	ldrh	r4, [r7, #0]
	client_draw_info.clip_rect.y = invalid_rect->y - mw_all_windows[window_id].client_rect.y;
   882f2:	8c50      	ldrh	r0, [r2, #34]	; 0x22
   882f4:	887b      	ldrh	r3, [r7, #2]
	client_draw_info.clip_rect.width = invalid_rect->width;
   882f6:	687f      	ldr	r7, [r7, #4]
	client_draw_info.clip_rect.y = invalid_rect->y - mw_all_windows[window_id].client_rect.y;
   882f8:	1a1b      	subs	r3, r3, r0
	client_draw_info.origin_x = mw_all_windows[window_id].client_rect.x;
   882fa:	a904      	add	r1, sp, #16
	client_draw_info.clip_rect.width = invalid_rect->width;
   882fc:	9703      	str	r7, [sp, #12]
	client_draw_info.clip_rect.x = invalid_rect->x - mw_all_windows[window_id].client_rect.x;
   882fe:	eba4 040c 	sub.w	r4, r4, ip
	in_client_window_paint_function = true;
   88302:	4f39      	ldr	r7, [pc, #228]	; (883e8 <do_paint_window_client2+0x1a8>)
	client_draw_info.clip_rect.y = invalid_rect->y - mw_all_windows[window_id].client_rect.y;
   88304:	f8ad 300a 	strh.w	r3, [sp, #10]
	client_draw_info.origin_x = mw_all_windows[window_id].client_rect.x;
   88308:	f841 6d0c 	str.w	r6, [r1, #-12]!
	mw_all_windows[window_id].paint_func(window_handle, &client_draw_info);
   8830c:	4628      	mov	r0, r5
	client_draw_info.clip_rect.x = invalid_rect->x - mw_all_windows[window_id].client_rect.x;
   8830e:	f8ad 4008 	strh.w	r4, [sp, #8]
	mw_all_windows[window_id].paint_func(window_handle, &client_draw_info);
   88312:	6852      	ldr	r2, [r2, #4]
	in_client_window_paint_function = true;
   88314:	f887 e000 	strb.w	lr, [r7]
	mw_all_windows[window_id].paint_func(window_handle, &client_draw_info);
   88318:	4790      	blx	r2
	in_client_window_paint_function = false;
   8831a:	2300      	movs	r3, #0
   8831c:	703b      	strb	r3, [r7, #0]
}
   8831e:	b004      	add	sp, #16
   88320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (window_handle == MW_INVALID_HANDLE)
   88324:	260e      	movs	r6, #14
   88326:	4628      	mov	r0, r5
   88328:	4c2d      	ldr	r4, [pc, #180]	; (883e0 <do_paint_window_client2+0x1a0>)
   8832a:	e7d4      	b.n	882d6 <do_paint_window_client2+0x96>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8832c:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8832e:	0699      	lsls	r1, r3, #26
   88330:	d59c      	bpl.n	8826c <do_paint_window_client2+0x2c>
   88332:	2600      	movs	r6, #0
   88334:	2001      	movs	r0, #1
   88336:	e7ce      	b.n	882d6 <do_paint_window_client2+0x96>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88338:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8833a:	069a      	lsls	r2, r3, #26
   8833c:	d599      	bpl.n	88272 <do_paint_window_client2+0x32>
   8833e:	2601      	movs	r6, #1
   88340:	e7f8      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88342:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   88346:	069b      	lsls	r3, r3, #26
   88348:	d597      	bpl.n	8827a <do_paint_window_client2+0x3a>
   8834a:	2602      	movs	r6, #2
   8834c:	e7f2      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8834e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   88352:	069e      	lsls	r6, r3, #26
   88354:	d595      	bpl.n	88282 <do_paint_window_client2+0x42>
   88356:	2603      	movs	r6, #3
   88358:	e7ec      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8835a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8835e:	0698      	lsls	r0, r3, #26
   88360:	d593      	bpl.n	8828a <do_paint_window_client2+0x4a>
   88362:	2604      	movs	r6, #4
   88364:	e7e6      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88366:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8836a:	0699      	lsls	r1, r3, #26
   8836c:	d591      	bpl.n	88292 <do_paint_window_client2+0x52>
   8836e:	2605      	movs	r6, #5
   88370:	e7e0      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88372:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   88376:	069a      	lsls	r2, r3, #26
   88378:	d58f      	bpl.n	8829a <do_paint_window_client2+0x5a>
   8837a:	2606      	movs	r6, #6
   8837c:	e7da      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8837e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   88382:	069b      	lsls	r3, r3, #26
   88384:	d58d      	bpl.n	882a2 <do_paint_window_client2+0x62>
   88386:	2607      	movs	r6, #7
   88388:	e7d4      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8838a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8838e:	069e      	lsls	r6, r3, #26
   88390:	d58b      	bpl.n	882aa <do_paint_window_client2+0x6a>
   88392:	2608      	movs	r6, #8
   88394:	e7ce      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88396:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8839a:	0698      	lsls	r0, r3, #26
   8839c:	d589      	bpl.n	882b2 <do_paint_window_client2+0x72>
   8839e:	2609      	movs	r6, #9
   883a0:	e7c8      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   883a2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   883a6:	0699      	lsls	r1, r3, #26
   883a8:	d587      	bpl.n	882ba <do_paint_window_client2+0x7a>
   883aa:	260a      	movs	r6, #10
   883ac:	e7c2      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   883ae:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   883b2:	069a      	lsls	r2, r3, #26
   883b4:	d585      	bpl.n	882c2 <do_paint_window_client2+0x82>
   883b6:	260b      	movs	r6, #11
   883b8:	e7bc      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   883ba:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   883be:	069b      	lsls	r3, r3, #26
   883c0:	d583      	bpl.n	882ca <do_paint_window_client2+0x8a>
   883c2:	260c      	movs	r6, #12
   883c4:	e7b6      	b.n	88334 <do_paint_window_client2+0xf4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   883c6:	f8d4 034c 	ldr.w	r0, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   883ca:	f010 0020 	ands.w	r0, r0, #32
   883ce:	bf18      	it	ne
   883d0:	260d      	movne	r6, #13
   883d2:	d1af      	bne.n	88334 <do_paint_window_client2+0xf4>
   883d4:	260e      	movs	r6, #14
   883d6:	e77e      	b.n	882d6 <do_paint_window_client2+0x96>
   883d8:	000a6618 	.word	0x000a6618
   883dc:	000ab3ec 	.word	0x000ab3ec
   883e0:	20071bd8 	.word	0x20071bd8
   883e4:	000ab748 	.word	0x000ab748
   883e8:	20071844 	.word	0x20071844
   883ec:	00095add 	.word	0x00095add

000883f0 <draw_titlebar_text>:
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   883f0:	1c0b      	adds	r3, r1, #0
   883f2:	bf18      	it	ne
   883f4:	2301      	movne	r3, #1
{
   883f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   883fa:	4605      	mov	r5, r0
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   883fc:	4688      	mov	r8, r1
   883fe:	4618      	mov	r0, r3
   88400:	f44f 62c7 	mov.w	r2, #1592	; 0x638
   88404:	4b7b      	ldr	r3, [pc, #492]	; (885f4 <draw_titlebar_text+0x204>)
   88406:	497c      	ldr	r1, [pc, #496]	; (885f8 <draw_titlebar_text+0x208>)
   88408:	4f7c      	ldr	r7, [pc, #496]	; (885fc <draw_titlebar_text+0x20c>)
   8840a:	47b8      	blx	r7
	if (window_handle == MW_INVALID_HANDLE)
   8840c:	2d00      	cmp	r5, #0
   8840e:	d049      	beq.n	884a4 <draw_titlebar_text+0xb4>
		if (mw_all_windows[i].window_handle == window_handle &&
   88410:	4c7b      	ldr	r4, [pc, #492]	; (88600 <draw_titlebar_text+0x210>)
   88412:	6963      	ldr	r3, [r4, #20]
   88414:	429d      	cmp	r5, r3
   88416:	d07a      	beq.n	8850e <draw_titlebar_text+0x11e>
   88418:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8841a:	429d      	cmp	r5, r3
   8841c:	f000 808a 	beq.w	88534 <draw_titlebar_text+0x144>
   88420:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   88424:	429d      	cmp	r5, r3
   88426:	f000 808b 	beq.w	88540 <draw_titlebar_text+0x150>
   8842a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   8842e:	429d      	cmp	r5, r3
   88430:	f000 808d 	beq.w	8854e <draw_titlebar_text+0x15e>
   88434:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   88438:	429d      	cmp	r5, r3
   8843a:	f000 808f 	beq.w	8855c <draw_titlebar_text+0x16c>
   8843e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   88442:	429d      	cmp	r5, r3
   88444:	f000 8091 	beq.w	8856a <draw_titlebar_text+0x17a>
   88448:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   8844c:	429d      	cmp	r5, r3
   8844e:	f000 8093 	beq.w	88578 <draw_titlebar_text+0x188>
   88452:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   88456:	429d      	cmp	r5, r3
   88458:	f000 8095 	beq.w	88586 <draw_titlebar_text+0x196>
   8845c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   88460:	429d      	cmp	r5, r3
   88462:	f000 8097 	beq.w	88594 <draw_titlebar_text+0x1a4>
   88466:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   8846a:	429d      	cmp	r5, r3
   8846c:	f000 8099 	beq.w	885a2 <draw_titlebar_text+0x1b2>
   88470:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   88474:	429d      	cmp	r5, r3
   88476:	f000 809b 	beq.w	885b0 <draw_titlebar_text+0x1c0>
   8847a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   8847e:	429d      	cmp	r5, r3
   88480:	f000 809d 	beq.w	885be <draw_titlebar_text+0x1ce>
   88484:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   88488:	429d      	cmp	r5, r3
   8848a:	f000 809f 	beq.w	885cc <draw_titlebar_text+0x1dc>
   8848e:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   88492:	429d      	cmp	r5, r3
   88494:	f000 80a1 	beq.w	885da <draw_titlebar_text+0x1ea>
   88498:	f240 39b1 	movw	r9, #945	; 0x3b1
   8849c:	2000      	movs	r0, #0
   8849e:	f44f 7660 	mov.w	r6, #896	; 0x380
   884a2:	e005      	b.n	884b0 <draw_titlebar_text+0xc0>
	if (window_handle == MW_INVALID_HANDLE)
   884a4:	f240 39b1 	movw	r9, #945	; 0x3b1
   884a8:	4628      	mov	r0, r5
   884aa:	f44f 7660 	mov.w	r6, #896	; 0x380
   884ae:	4c54      	ldr	r4, [pc, #336]	; (88600 <draw_titlebar_text+0x210>)
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   884b0:	f240 623c 	movw	r2, #1596	; 0x63c
   884b4:	4950      	ldr	r1, [pc, #320]	; (885f8 <draw_titlebar_text+0x208>)
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   884b6:	4426      	add	r6, r4
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   884b8:	4b52      	ldr	r3, [pc, #328]	; (88604 <draw_titlebar_text+0x214>)
   884ba:	47b8      	blx	r7
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   884bc:	68f3      	ldr	r3, [r6, #12]
		mw_gl_set_fg_colour(MW_TITLE_TEXT_COLOUR_NO_FOCUS);
   884be:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   884c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
		title_y_offset = MW_TITLE_Y_OFFSET;
   884c6:	2b00      	cmp	r3, #0
		mw_gl_set_fg_colour(MW_TITLE_TEXT_COLOUR_NO_FOCUS);
   884c8:	4b4f      	ldr	r3, [pc, #316]	; (88608 <draw_titlebar_text+0x218>)
		title_y_offset = MW_TITLE_Y_OFFSET;
   884ca:	bf15      	itete	ne
   884cc:	2705      	movne	r7, #5
   884ce:	2702      	moveq	r7, #2
   884d0:	f04f 0a19 	movne.w	sl, #25
   884d4:	f04f 0a12 	moveq.w	sl, #18
		mw_gl_set_fg_colour(MW_TITLE_TEXT_COLOUR_NO_FOCUS);
   884d8:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   884da:	2000      	movs	r0, #0
   884dc:	4b4b      	ldr	r3, [pc, #300]	; (8860c <draw_titlebar_text+0x21c>)
   884de:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   884e0:	2000      	movs	r0, #0
   884e2:	4b4b      	ldr	r3, [pc, #300]	; (88610 <draw_titlebar_text+0x220>)
   884e4:	4798      	blx	r3
	mw_gl_set_font(MW_GL_TITLE_FONT);
   884e6:	4b4b      	ldr	r3, [pc, #300]	; (88614 <draw_titlebar_text+0x224>)
   884e8:	2005      	movs	r0, #5
   884ea:	4798      	blx	r3
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MODAL) == MW_WINDOW_FLAG_IS_MODAL || (window_handle != window_with_focus_handle))
   884ec:	68f3      	ldr	r3, [r6, #12]
   884ee:	065b      	lsls	r3, r3, #25
   884f0:	d403      	bmi.n	884fa <draw_titlebar_text+0x10a>
   884f2:	4b49      	ldr	r3, [pc, #292]	; (88618 <draw_titlebar_text+0x228>)
   884f4:	681b      	ldr	r3, [r3, #0]
   884f6:	429d      	cmp	r5, r3
   884f8:	d012      	beq.n	88520 <draw_titlebar_text+0x130>
		mw_gl_string(draw_info, title_modal_x_offset, title_y_offset, mw_all_windows[window_id].title);
   884fa:	eb04 0309 	add.w	r3, r4, r9
   884fe:	4c47      	ldr	r4, [pc, #284]	; (8861c <draw_titlebar_text+0x22c>)
   88500:	463a      	mov	r2, r7
   88502:	4640      	mov	r0, r8
   88504:	46a4      	mov	ip, r4
}
   88506:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		mw_gl_string(draw_info, title_modal_x_offset, title_y_offset, mw_all_windows[window_id].title);
   8850a:	2102      	movs	r1, #2
   8850c:	4760      	bx	ip
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8850e:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   88510:	0698      	lsls	r0, r3, #26
   88512:	d581      	bpl.n	88418 <draw_titlebar_text+0x28>
   88514:	2600      	movs	r6, #0
   88516:	01b6      	lsls	r6, r6, #6
   88518:	f106 0931 	add.w	r9, r6, #49	; 0x31
   8851c:	2001      	movs	r0, #1
   8851e:	e7c7      	b.n	884b0 <draw_titlebar_text+0xc0>
		mw_gl_string(draw_info, title_x_offset, title_y_offset, mw_all_windows[window_id].title);
   88520:	eb04 0309 	add.w	r3, r4, r9
   88524:	4c3d      	ldr	r4, [pc, #244]	; (8861c <draw_titlebar_text+0x22c>)
   88526:	463a      	mov	r2, r7
   88528:	4651      	mov	r1, sl
   8852a:	4640      	mov	r0, r8
   8852c:	46a4      	mov	ip, r4
}
   8852e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		mw_gl_string(draw_info, title_x_offset, title_y_offset, mw_all_windows[window_id].title);
   88532:	4760      	bx	ip
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88534:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   88536:	0699      	lsls	r1, r3, #26
   88538:	f57f af72 	bpl.w	88420 <draw_titlebar_text+0x30>
   8853c:	2601      	movs	r6, #1
   8853e:	e7ea      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88540:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   88544:	069a      	lsls	r2, r3, #26
   88546:	f57f af70 	bpl.w	8842a <draw_titlebar_text+0x3a>
   8854a:	2602      	movs	r6, #2
   8854c:	e7e3      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8854e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   88552:	069b      	lsls	r3, r3, #26
   88554:	f57f af6e 	bpl.w	88434 <draw_titlebar_text+0x44>
   88558:	2603      	movs	r6, #3
   8855a:	e7dc      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8855c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   88560:	069e      	lsls	r6, r3, #26
   88562:	f57f af6c 	bpl.w	8843e <draw_titlebar_text+0x4e>
   88566:	2604      	movs	r6, #4
   88568:	e7d5      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8856a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8856e:	0698      	lsls	r0, r3, #26
   88570:	f57f af6a 	bpl.w	88448 <draw_titlebar_text+0x58>
   88574:	2605      	movs	r6, #5
   88576:	e7ce      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88578:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8857c:	0699      	lsls	r1, r3, #26
   8857e:	f57f af68 	bpl.w	88452 <draw_titlebar_text+0x62>
   88582:	2606      	movs	r6, #6
   88584:	e7c7      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88586:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8858a:	069a      	lsls	r2, r3, #26
   8858c:	f57f af66 	bpl.w	8845c <draw_titlebar_text+0x6c>
   88590:	2607      	movs	r6, #7
   88592:	e7c0      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88594:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   88598:	069b      	lsls	r3, r3, #26
   8859a:	f57f af64 	bpl.w	88466 <draw_titlebar_text+0x76>
   8859e:	2608      	movs	r6, #8
   885a0:	e7b9      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   885a2:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   885a6:	069e      	lsls	r6, r3, #26
   885a8:	f57f af62 	bpl.w	88470 <draw_titlebar_text+0x80>
   885ac:	2609      	movs	r6, #9
   885ae:	e7b2      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   885b0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   885b4:	0698      	lsls	r0, r3, #26
   885b6:	f57f af60 	bpl.w	8847a <draw_titlebar_text+0x8a>
   885ba:	260a      	movs	r6, #10
   885bc:	e7ab      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   885be:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   885c2:	0699      	lsls	r1, r3, #26
   885c4:	f57f af5e 	bpl.w	88484 <draw_titlebar_text+0x94>
   885c8:	260b      	movs	r6, #11
   885ca:	e7a4      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   885cc:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   885d0:	069a      	lsls	r2, r3, #26
   885d2:	f57f af5c 	bpl.w	8848e <draw_titlebar_text+0x9e>
   885d6:	260c      	movs	r6, #12
   885d8:	e79d      	b.n	88516 <draw_titlebar_text+0x126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   885da:	f8d4 034c 	ldr.w	r0, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   885de:	f010 0020 	ands.w	r0, r0, #32
   885e2:	bf18      	it	ne
   885e4:	260d      	movne	r6, #13
   885e6:	d196      	bne.n	88516 <draw_titlebar_text+0x126>
   885e8:	f240 39b1 	movw	r9, #945	; 0x3b1
   885ec:	f44f 7660 	mov.w	r6, #896	; 0x380
   885f0:	e75e      	b.n	884b0 <draw_titlebar_text+0xc0>
   885f2:	bf00      	nop
   885f4:	000a6618 	.word	0x000a6618
   885f8:	000ab338 	.word	0x000ab338
   885fc:	00095add 	.word	0x00095add
   88600:	20071bd8 	.word	0x20071bd8
   88604:	000ab764 	.word	0x000ab764
   88608:	000846b1 	.word	0x000846b1
   8860c:	00084709 	.word	0x00084709
   88610:	00084745 	.word	0x00084745
   88614:	00084715 	.word	0x00084715
   88618:	20071fb4 	.word	0x20071fb4
   8861c:	00085f1d 	.word	0x00085f1d

00088620 <calculate_new_window_size_details>:
{
   88620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   88624:	1c0b      	adds	r3, r1, #0
   88626:	bf18      	it	ne
   88628:	2301      	movne	r3, #1
{
   8862a:	4605      	mov	r5, r0
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   8862c:	460e      	mov	r6, r1
   8862e:	4618      	mov	r0, r3
   88630:	f240 221b 	movw	r2, #539	; 0x21b
   88634:	4b8b      	ldr	r3, [pc, #556]	; (88864 <calculate_new_window_size_details+0x244>)
   88636:	498c      	ldr	r1, [pc, #560]	; (88868 <calculate_new_window_size_details+0x248>)
   88638:	4f8c      	ldr	r7, [pc, #560]	; (8886c <calculate_new_window_size_details+0x24c>)
   8863a:	47b8      	blx	r7
	if (window_handle == MW_INVALID_HANDLE)
   8863c:	2d00      	cmp	r5, #0
   8863e:	d04a      	beq.n	886d6 <calculate_new_window_size_details+0xb6>
		if (mw_all_windows[i].window_handle == window_handle &&
   88640:	4c8b      	ldr	r4, [pc, #556]	; (88870 <calculate_new_window_size_details+0x250>)
   88642:	6963      	ldr	r3, [r4, #20]
   88644:	429d      	cmp	r5, r3
   88646:	f000 80a4 	beq.w	88792 <calculate_new_window_size_details+0x172>
   8864a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8864c:	429d      	cmp	r5, r3
   8864e:	f000 80aa 	beq.w	887a6 <calculate_new_window_size_details+0x186>
   88652:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   88656:	429d      	cmp	r5, r3
   88658:	f000 80ab 	beq.w	887b2 <calculate_new_window_size_details+0x192>
   8865c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   88660:	429d      	cmp	r5, r3
   88662:	f000 80ad 	beq.w	887c0 <calculate_new_window_size_details+0x1a0>
   88666:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   8866a:	429d      	cmp	r5, r3
   8866c:	f000 80af 	beq.w	887ce <calculate_new_window_size_details+0x1ae>
   88670:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   88674:	429d      	cmp	r5, r3
   88676:	f000 80b1 	beq.w	887dc <calculate_new_window_size_details+0x1bc>
   8867a:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   8867e:	429d      	cmp	r5, r3
   88680:	f000 80b3 	beq.w	887ea <calculate_new_window_size_details+0x1ca>
   88684:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   88688:	429d      	cmp	r5, r3
   8868a:	f000 80b5 	beq.w	887f8 <calculate_new_window_size_details+0x1d8>
   8868e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   88692:	429d      	cmp	r5, r3
   88694:	f000 80b7 	beq.w	88806 <calculate_new_window_size_details+0x1e6>
   88698:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   8869c:	429d      	cmp	r5, r3
   8869e:	f000 80b9 	beq.w	88814 <calculate_new_window_size_details+0x1f4>
   886a2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   886a6:	429d      	cmp	r5, r3
   886a8:	f000 80bb 	beq.w	88822 <calculate_new_window_size_details+0x202>
   886ac:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   886b0:	429d      	cmp	r5, r3
   886b2:	f000 80bd 	beq.w	88830 <calculate_new_window_size_details+0x210>
   886b6:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   886ba:	429d      	cmp	r5, r3
   886bc:	f000 80bf 	beq.w	8883e <calculate_new_window_size_details+0x21e>
   886c0:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   886c4:	429d      	cmp	r5, r3
   886c6:	f000 80c1 	beq.w	8884c <calculate_new_window_size_details+0x22c>
   886ca:	2000      	movs	r0, #0
   886cc:	f44f 7866 	mov.w	r8, #920	; 0x398
   886d0:	f44f 7560 	mov.w	r5, #896	; 0x380
   886d4:	e005      	b.n	886e2 <calculate_new_window_size_details+0xc2>
	if (window_handle == MW_INVALID_HANDLE)
   886d6:	4628      	mov	r0, r5
   886d8:	f44f 7866 	mov.w	r8, #920	; 0x398
   886dc:	f44f 7560 	mov.w	r5, #896	; 0x380
   886e0:	4c63      	ldr	r4, [pc, #396]	; (88870 <calculate_new_window_size_details+0x250>)
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   886e2:	4b64      	ldr	r3, [pc, #400]	; (88874 <calculate_new_window_size_details+0x254>)
   886e4:	f240 221f 	movw	r2, #543	; 0x21f
   886e8:	495f      	ldr	r1, [pc, #380]	; (88868 <calculate_new_window_size_details+0x248>)
   886ea:	47b8      	blx	r7
	(void)memcpy((&(mw_all_windows[window_id].window_rect)), (rect), (sizeof(mw_util_rect_t)));
   886ec:	6830      	ldr	r0, [r6, #0]
   886ee:	6871      	ldr	r1, [r6, #4]
   886f0:	eb04 0308 	add.w	r3, r4, r8
   886f4:	c303      	stmia	r3!, {r0, r1}
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   886f6:	1960      	adds	r0, r4, r5
   886f8:	68c1      	ldr	r1, [r0, #12]
	mw_all_windows[window_id].client_rect.x = rect->x + border_width;
   886fa:	8832      	ldrh	r2, [r6, #0]
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   886fc:	f401 4700 	and.w	r7, r1, #32768	; 0x8000
	mw_all_windows[window_id].client_rect.x = rect->x + border_width;
   88700:	f001 0301 	and.w	r3, r1, #1
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   88704:	2f00      	cmp	r7, #0
	mw_all_windows[window_id].client_rect.x = rect->x + border_width;
   88706:	441a      	add	r2, r3
   88708:	8402      	strh	r2, [r0, #32]
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8870a:	bf0b      	itete	eq
   8870c:	270c      	moveq	r7, #12
   8870e:	2718      	movne	r7, #24
   88710:	f04f 0e0e 	moveq.w	lr, #14
   88714:	f04f 0e14 	movne.w	lr, #20
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   88718:	f011 0202 	ands.w	r2, r1, #2
   8871c:	d035      	beq.n	8878a <calculate_new_window_size_details+0x16a>
		mw_all_windows[window_id].client_rect.y = rect->y + mw_all_windows[window_id].title_bar_height;
   8871e:	f8b0 c02a 	ldrh.w	ip, [r0, #42]	; 0x2a
   88722:	8870      	ldrh	r0, [r6, #2]
   88724:	4460      	add	r0, ip
   88726:	b200      	sxth	r0, r0
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR)
   88728:	f411 7c00 	ands.w	ip, r1, #512	; 0x200
		mw_all_windows[window_id].client_rect.y += menu_bar_height;
   8872c:	bf18      	it	ne
   8872e:	4470      	addne	r0, lr
   88730:	eb04 0805 	add.w	r8, r4, r5
   88734:	f8a8 0022 	strh.w	r0, [r8, #34]	; 0x22
	mw_all_windows[window_id].client_rect.width = rect->width - 2 * border_width;
   88738:	88b0      	ldrh	r0, [r6, #4]
   8873a:	ea4f 0843 	mov.w	r8, r3, lsl #1
   8873e:	eba0 0008 	sub.w	r0, r0, r8
   88742:	b280      	uxth	r0, r0
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
   88744:	f011 0f80 	tst.w	r1, #128	; 0x80
		mw_all_windows[window_id].client_rect.width -= scroll_bar_narrow_dimension;
   88748:	bf18      	it	ne
   8874a:	1bc0      	subne	r0, r0, r7
   8874c:	eb04 0905 	add.w	r9, r4, r5
   88750:	f8a9 0024 	strh.w	r0, [r9, #36]	; 0x24
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   88754:	b1a2      	cbz	r2, 88780 <calculate_new_window_size_details+0x160>
		mw_all_windows[window_id].client_rect.height = rect->height - mw_all_windows[window_id].title_bar_height - border_width;
   88756:	1960      	adds	r0, r4, r5
   88758:	88f2      	ldrh	r2, [r6, #6]
   8875a:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   8875c:	1a12      	subs	r2, r2, r0
   8875e:	1ad2      	subs	r2, r2, r3
   88760:	b213      	sxth	r3, r2
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR)
   88762:	f1bc 0f00 	cmp.w	ip, #0
   88766:	d002      	beq.n	8876e <calculate_new_window_size_details+0x14e>
		mw_all_windows[window_id].client_rect.height -= menu_bar_height;
   88768:	eba3 030e 	sub.w	r3, r3, lr
   8876c:	b21b      	sxth	r3, r3
   8876e:	1962      	adds	r2, r4, r5
   88770:	84d3      	strh	r3, [r2, #38]	; 0x26
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR)
   88772:	05ca      	lsls	r2, r1, #23
   88774:	d502      	bpl.n	8877c <calculate_new_window_size_details+0x15c>
		mw_all_windows[window_id].client_rect.height -= scroll_bar_narrow_dimension;
   88776:	442c      	add	r4, r5
   88778:	1bdb      	subs	r3, r3, r7
   8877a:	84e3      	strh	r3, [r4, #38]	; 0x26
   8877c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		mw_all_windows[window_id].client_rect.height = rect->height - 2 * border_width;
   88780:	88f2      	ldrh	r2, [r6, #6]
   88782:	eba2 0208 	sub.w	r2, r2, r8
   88786:	b213      	sxth	r3, r2
   88788:	e7eb      	b.n	88762 <calculate_new_window_size_details+0x142>
		mw_all_windows[window_id].client_rect.y = rect->y + border_width;
   8878a:	8870      	ldrh	r0, [r6, #2]
   8878c:	4418      	add	r0, r3
   8878e:	b200      	sxth	r0, r0
   88790:	e7ca      	b.n	88728 <calculate_new_window_size_details+0x108>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88792:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   88794:	069b      	lsls	r3, r3, #26
   88796:	f57f af58 	bpl.w	8864a <calculate_new_window_size_details+0x2a>
   8879a:	2500      	movs	r5, #0
   8879c:	01ad      	lsls	r5, r5, #6
   8879e:	f105 0818 	add.w	r8, r5, #24
   887a2:	2001      	movs	r0, #1
   887a4:	e79d      	b.n	886e2 <calculate_new_window_size_details+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   887a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   887a8:	0698      	lsls	r0, r3, #26
   887aa:	f57f af52 	bpl.w	88652 <calculate_new_window_size_details+0x32>
   887ae:	2501      	movs	r5, #1
   887b0:	e7f4      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   887b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   887b6:	0699      	lsls	r1, r3, #26
   887b8:	f57f af50 	bpl.w	8865c <calculate_new_window_size_details+0x3c>
   887bc:	2502      	movs	r5, #2
   887be:	e7ed      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   887c0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   887c4:	069a      	lsls	r2, r3, #26
   887c6:	f57f af4e 	bpl.w	88666 <calculate_new_window_size_details+0x46>
   887ca:	2503      	movs	r5, #3
   887cc:	e7e6      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   887ce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   887d2:	069b      	lsls	r3, r3, #26
   887d4:	f57f af4c 	bpl.w	88670 <calculate_new_window_size_details+0x50>
   887d8:	2504      	movs	r5, #4
   887da:	e7df      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   887dc:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   887e0:	0698      	lsls	r0, r3, #26
   887e2:	f57f af4a 	bpl.w	8867a <calculate_new_window_size_details+0x5a>
   887e6:	2505      	movs	r5, #5
   887e8:	e7d8      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   887ea:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   887ee:	0699      	lsls	r1, r3, #26
   887f0:	f57f af48 	bpl.w	88684 <calculate_new_window_size_details+0x64>
   887f4:	2506      	movs	r5, #6
   887f6:	e7d1      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   887f8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   887fc:	069a      	lsls	r2, r3, #26
   887fe:	f57f af46 	bpl.w	8868e <calculate_new_window_size_details+0x6e>
   88802:	2507      	movs	r5, #7
   88804:	e7ca      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88806:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8880a:	069b      	lsls	r3, r3, #26
   8880c:	f57f af44 	bpl.w	88698 <calculate_new_window_size_details+0x78>
   88810:	2508      	movs	r5, #8
   88812:	e7c3      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88814:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   88818:	0698      	lsls	r0, r3, #26
   8881a:	f57f af42 	bpl.w	886a2 <calculate_new_window_size_details+0x82>
   8881e:	2509      	movs	r5, #9
   88820:	e7bc      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88822:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   88826:	0699      	lsls	r1, r3, #26
   88828:	f57f af40 	bpl.w	886ac <calculate_new_window_size_details+0x8c>
   8882c:	250a      	movs	r5, #10
   8882e:	e7b5      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88830:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   88834:	069a      	lsls	r2, r3, #26
   88836:	f57f af3e 	bpl.w	886b6 <calculate_new_window_size_details+0x96>
   8883a:	250b      	movs	r5, #11
   8883c:	e7ae      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8883e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   88842:	069b      	lsls	r3, r3, #26
   88844:	f57f af3c 	bpl.w	886c0 <calculate_new_window_size_details+0xa0>
   88848:	250c      	movs	r5, #12
   8884a:	e7a7      	b.n	8879c <calculate_new_window_size_details+0x17c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8884c:	f8d4 034c 	ldr.w	r0, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   88850:	f010 0020 	ands.w	r0, r0, #32
   88854:	bf18      	it	ne
   88856:	250d      	movne	r5, #13
   88858:	d1a0      	bne.n	8879c <calculate_new_window_size_details+0x17c>
   8885a:	f44f 7866 	mov.w	r8, #920	; 0x398
   8885e:	f44f 7560 	mov.w	r5, #896	; 0x380
   88862:	e73e      	b.n	886e2 <calculate_new_window_size_details+0xc2>
   88864:	000a6618 	.word	0x000a6618
   88868:	000ab1c8 	.word	0x000ab1c8
   8886c:	00095add 	.word	0x00095add
   88870:	20071bd8 	.word	0x20071bd8
   88874:	000ab764 	.word	0x000ab764

00088878 <do_paint_window_client>:
{
   88878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (window_handle == MW_INVALID_HANDLE)
   8887c:	4682      	mov	sl, r0
{
   8887e:	b093      	sub	sp, #76	; 0x4c
	if (window_handle == MW_INVALID_HANDLE)
   88880:	2800      	cmp	r0, #0
   88882:	d048      	beq.n	88916 <do_paint_window_client+0x9e>
		if (mw_all_windows[i].window_handle == window_handle &&
   88884:	f8df 93e8 	ldr.w	r9, [pc, #1000]	; 88c70 <do_paint_window_client+0x3f8>
   88888:	f8d9 3014 	ldr.w	r3, [r9, #20]
   8888c:	4298      	cmp	r0, r3
   8888e:	d060      	beq.n	88952 <do_paint_window_client+0xda>
   88890:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
   88894:	459a      	cmp	sl, r3
   88896:	d055      	beq.n	88944 <do_paint_window_client+0xcc>
   88898:	f8d9 3094 	ldr.w	r3, [r9, #148]	; 0x94
   8889c:	459a      	cmp	sl, r3
   8889e:	f000 84c1 	beq.w	89224 <do_paint_window_client+0x9ac>
   888a2:	f8d9 30d4 	ldr.w	r3, [r9, #212]	; 0xd4
   888a6:	459a      	cmp	sl, r3
   888a8:	f000 84cc 	beq.w	89244 <do_paint_window_client+0x9cc>
   888ac:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
   888b0:	459a      	cmp	sl, r3
   888b2:	f000 8507 	beq.w	892c4 <do_paint_window_client+0xa4c>
   888b6:	f8d9 3154 	ldr.w	r3, [r9, #340]	; 0x154
   888ba:	459a      	cmp	sl, r3
   888bc:	f000 84fa 	beq.w	892b4 <do_paint_window_client+0xa3c>
   888c0:	f8d9 3194 	ldr.w	r3, [r9, #404]	; 0x194
   888c4:	459a      	cmp	sl, r3
   888c6:	f000 84ed 	beq.w	892a4 <do_paint_window_client+0xa2c>
   888ca:	f8d9 31d4 	ldr.w	r3, [r9, #468]	; 0x1d4
   888ce:	459a      	cmp	sl, r3
   888d0:	f000 84e0 	beq.w	89294 <do_paint_window_client+0xa1c>
   888d4:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
   888d8:	459a      	cmp	sl, r3
   888da:	f000 84d3 	beq.w	89284 <do_paint_window_client+0xa0c>
   888de:	f8d9 3254 	ldr.w	r3, [r9, #596]	; 0x254
   888e2:	459a      	cmp	sl, r3
   888e4:	f000 84c6 	beq.w	89274 <do_paint_window_client+0x9fc>
   888e8:	f8d9 3294 	ldr.w	r3, [r9, #660]	; 0x294
   888ec:	459a      	cmp	sl, r3
   888ee:	f000 84b9 	beq.w	89264 <do_paint_window_client+0x9ec>
   888f2:	f8d9 32d4 	ldr.w	r3, [r9, #724]	; 0x2d4
   888f6:	459a      	cmp	sl, r3
   888f8:	f000 84ac 	beq.w	89254 <do_paint_window_client+0x9dc>
   888fc:	f8d9 3314 	ldr.w	r3, [r9, #788]	; 0x314
   88900:	459a      	cmp	sl, r3
   88902:	f000 8497 	beq.w	89234 <do_paint_window_client+0x9bc>
   88906:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
   8890a:	459a      	cmp	sl, r3
   8890c:	f000 847e 	beq.w	8920c <do_paint_window_client+0x994>
   88910:	230e      	movs	r3, #14
   88912:	2000      	movs	r0, #0
   88914:	e002      	b.n	8891c <do_paint_window_client+0xa4>
	if (window_handle == MW_INVALID_HANDLE)
   88916:	230e      	movs	r3, #14
   88918:	f8df 9354 	ldr.w	r9, [pc, #852]	; 88c70 <do_paint_window_client+0x3f8>
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8891c:	019b      	lsls	r3, r3, #6
   8891e:	461c      	mov	r4, r3
   88920:	9302      	str	r3, [sp, #8]
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   88922:	f640 02eb 	movw	r2, #2283	; 0x8eb
   88926:	4bc8      	ldr	r3, [pc, #800]	; (88c48 <do_paint_window_client+0x3d0>)
   88928:	49c8      	ldr	r1, [pc, #800]	; (88c4c <do_paint_window_client+0x3d4>)
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8892a:	444c      	add	r4, r9
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8892c:	4dc8      	ldr	r5, [pc, #800]	; (88c50 <do_paint_window_client+0x3d8>)
   8892e:	47a8      	blx	r5
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88930:	68e3      	ldr	r3, [r4, #12]
   88932:	f003 0228 	and.w	r2, r3, #40	; 0x28
   88936:	2a28      	cmp	r2, #40	; 0x28
   88938:	d101      	bne.n	8893e <do_paint_window_client+0xc6>
			(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8893a:	06d9      	lsls	r1, r3, #27
   8893c:	d50f      	bpl.n	8895e <do_paint_window_client+0xe6>
}
   8893e:	b013      	add	sp, #76	; 0x4c
   88940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88944:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   88948:	069e      	lsls	r6, r3, #26
   8894a:	d5a5      	bpl.n	88898 <do_paint_window_client+0x20>
   8894c:	2301      	movs	r3, #1
   8894e:	2001      	movs	r0, #1
   88950:	e7e4      	b.n	8891c <do_paint_window_client+0xa4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88952:	f8d9 300c 	ldr.w	r3, [r9, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   88956:	069f      	lsls	r7, r3, #26
   88958:	d59a      	bpl.n	88890 <do_paint_window_client+0x18>
   8895a:	2300      	movs	r3, #0
   8895c:	e7f7      	b.n	8894e <do_paint_window_client+0xd6>
	if (find_if_rect_is_completely_on_screen(&mw_all_windows[window_id].client_rect) && window_handle == window_with_focus_handle)
   8895e:	9b02      	ldr	r3, [sp, #8]
   88960:	f103 0520 	add.w	r5, r3, #32
	int16_t root_width = MW_ROOT_WIDTH;
   88964:	4bbb      	ldr	r3, [pc, #748]	; (88c54 <do_paint_window_client+0x3dc>)
   88966:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   88968:	4bbb      	ldr	r3, [pc, #748]	; (88c58 <do_paint_window_client+0x3e0>)
	int16_t root_width = MW_ROOT_WIDTH;
   8896a:	4606      	mov	r6, r0
	int16_t root_height = MW_ROOT_HEIGHT;
   8896c:	4798      	blx	r3
	return (rect->x >= 0 &&
   8896e:	f9b4 7020 	ldrsh.w	r7, [r4, #32]
	if (find_if_rect_is_completely_on_screen(&mw_all_windows[window_id].client_rect) && window_handle == window_with_focus_handle)
   88972:	444d      	add	r5, r9
			rect->x + rect->width <= root_width &&
   88974:	2f00      	cmp	r7, #0
	return (rect->x >= 0 &&
   88976:	f104 0220 	add.w	r2, r4, #32
			rect->x + rect->width <= root_width &&
   8897a:	db1b      	blt.n	889b4 <do_paint_window_client+0x13c>
			rect->y >= 0 &&
   8897c:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
	return (rect->x >= 0 &&
   88980:	2900      	cmp	r1, #0
   88982:	db17      	blt.n	889b4 <do_paint_window_client+0x13c>
			rect->x + rect->width <= root_width &&
   88984:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
   88988:	443b      	add	r3, r7
			rect->y >= 0 &&
   8898a:	42b3      	cmp	r3, r6
   8898c:	dc12      	bgt.n	889b4 <do_paint_window_client+0x13c>
			rect->y + rect->height <= root_height);
   8898e:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
   88992:	440b      	add	r3, r1
			rect->x + rect->width <= root_width &&
   88994:	4283      	cmp	r3, r0
   88996:	dc0d      	bgt.n	889b4 <do_paint_window_client+0x13c>
	if (find_if_rect_is_completely_on_screen(&mw_all_windows[window_id].client_rect) && window_handle == window_with_focus_handle)
   88998:	4bb0      	ldr	r3, [pc, #704]	; (88c5c <do_paint_window_client+0x3e4>)
   8899a:	681b      	ldr	r3, [r3, #0]
   8899c:	459a      	cmp	sl, r3
   8899e:	d109      	bne.n	889b4 <do_paint_window_client+0x13c>
		(void)memcpy((&rect_current), (&mw_all_windows[window_id].client_rect), (sizeof(mw_util_rect_t)));
   889a0:	e892 0003 	ldmia.w	r2, {r0, r1}
   889a4:	ab09      	add	r3, sp, #36	; 0x24
   889a6:	e883 0003 	stmia.w	r3, {r0, r1}
		do_paint_window_client2(window_handle, &rect_current);
   889aa:	4aad      	ldr	r2, [pc, #692]	; (88c60 <do_paint_window_client+0x3e8>)
   889ac:	4619      	mov	r1, r3
   889ae:	4650      	mov	r0, sl
   889b0:	4790      	blx	r2
   889b2:	e1cb      	b.n	88d4c <do_paint_window_client+0x4d4>
		find_rect_window_intersections(&mw_all_windows[window_id].client_rect, &horiz_edges_count, &vert_edges_count);
   889b4:	a907      	add	r1, sp, #28
   889b6:	4628      	mov	r0, r5
   889b8:	f10d 021e 	add.w	r2, sp, #30
   889bc:	4ba9      	ldr	r3, [pc, #676]	; (88c64 <do_paint_window_client+0x3ec>)
   889be:	4798      	blx	r3
		for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   889c0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   889c4:	2901      	cmp	r1, #1
   889c6:	f000 81c1 	beq.w	88d4c <do_paint_window_client+0x4d4>
   889ca:	2300      	movs	r3, #0
   889cc:	4aa6      	ldr	r2, [pc, #664]	; (88c68 <do_paint_window_client+0x3f0>)
   889ce:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 88c74 <do_paint_window_client+0x3fc>
   889d2:	9303      	str	r3, [sp, #12]
   889d4:	9205      	str	r2, [sp, #20]
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   889d6:	f8cd a010 	str.w	sl, [sp, #16]
			rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   889da:	9805      	ldr	r0, [sp, #20]
   889dc:	3301      	adds	r3, #1
   889de:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
			rect_current.y = horizontal_edges[horizontal_edge_counter];
   889e2:	4603      	mov	r3, r0
   889e4:	9803      	ldr	r0, [sp, #12]
   889e6:	f933 b010 	ldrsh.w	fp, [r3, r0, lsl #1]
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   889ea:	f8bd 001e 	ldrh.w	r0, [sp, #30]
			rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   889ee:	eba2 020b 	sub.w	r2, r2, fp
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   889f2:	2801      	cmp	r0, #1
			rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   889f4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
			rect_current.y = horizontal_edges[horizontal_edge_counter];
   889f8:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   889fc:	f000 819c 	beq.w	88d38 <do_paint_window_client+0x4c0>
   88a00:	2200      	movs	r2, #0
   88a02:	4692      	mov	sl, r2
   88a04:	4616      	mov	r6, r2
   88a06:	e00e      	b.n	88a26 <do_paint_window_client+0x1ae>
					if (rect_waiting_to_be_painted)
   88a08:	f1ba 0f00 	cmp.w	sl, #0
   88a0c:	f040 8187 	bne.w	88d1e <do_paint_window_client+0x4a6>
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   88a10:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   88a14:	3601      	adds	r6, #1
   88a16:	b2b6      	uxth	r6, r6
   88a18:	3b01      	subs	r3, #1
   88a1a:	429e      	cmp	r6, r3
   88a1c:	4632      	mov	r2, r6
   88a1e:	f080 8185 	bcs.w	88d2c <do_paint_window_client+0x4b4>
   88a22:	f9bd b026 	ldrsh.w	fp, [sp, #38]	; 0x26
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   88a26:	3201      	adds	r2, #1
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88a28:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
				rect_current.x = vertical_edges[vertical_edge_counter];
   88a2c:	f938 5016 	ldrsh.w	r5, [r8, r6, lsl #1]
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   88a30:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88a34:	f001 0028 	and.w	r0, r1, #40	; 0x28
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   88a38:	1b52      	subs	r2, r2, r5
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88a3a:	2828      	cmp	r0, #40	; 0x28
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   88a3c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
				rect_current.x = vertical_edges[vertical_edge_counter];
   88a40:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88a44:	d102      	bne.n	88a4c <do_paint_window_client+0x1d4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88a46:	06ca      	lsls	r2, r1, #27
   88a48:	f140 83a0 	bpl.w	8918c <do_paint_window_client+0x914>
	uint8_t highest_z_order = 0U;
   88a4c:	2700      	movs	r7, #0
	uint8_t window_id = MW_ROOT_WINDOW_ID;
   88a4e:	463c      	mov	r4, r7
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88a50:	f8d9 208c 	ldr.w	r2, [r9, #140]	; 0x8c
   88a54:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88a58:	2928      	cmp	r1, #40	; 0x28
   88a5a:	d102      	bne.n	88a62 <do_paint_window_client+0x1ea>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88a5c:	06d3      	lsls	r3, r2, #27
   88a5e:	f140 83a3 	bpl.w	891a8 <do_paint_window_client+0x930>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88a62:	f8d9 20cc 	ldr.w	r2, [r9, #204]	; 0xcc
   88a66:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88a6a:	2928      	cmp	r1, #40	; 0x28
   88a6c:	d102      	bne.n	88a74 <do_paint_window_client+0x1fc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88a6e:	06d0      	lsls	r0, r2, #27
   88a70:	f140 8314 	bpl.w	8909c <do_paint_window_client+0x824>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88a74:	f8d9 210c 	ldr.w	r2, [r9, #268]	; 0x10c
   88a78:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88a7c:	2928      	cmp	r1, #40	; 0x28
   88a7e:	d102      	bne.n	88a86 <do_paint_window_client+0x20e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88a80:	06d1      	lsls	r1, r2, #27
   88a82:	f140 831a 	bpl.w	890ba <do_paint_window_client+0x842>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88a86:	f8d9 214c 	ldr.w	r2, [r9, #332]	; 0x14c
   88a8a:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88a8e:	2928      	cmp	r1, #40	; 0x28
   88a90:	d102      	bne.n	88a98 <do_paint_window_client+0x220>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88a92:	06d2      	lsls	r2, r2, #27
   88a94:	f140 8320 	bpl.w	890d8 <do_paint_window_client+0x860>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88a98:	f8d9 218c 	ldr.w	r2, [r9, #396]	; 0x18c
   88a9c:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88aa0:	2928      	cmp	r1, #40	; 0x28
   88aa2:	d102      	bne.n	88aaa <do_paint_window_client+0x232>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88aa4:	06d3      	lsls	r3, r2, #27
   88aa6:	f140 8326 	bpl.w	890f6 <do_paint_window_client+0x87e>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88aaa:	f8d9 21cc 	ldr.w	r2, [r9, #460]	; 0x1cc
   88aae:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88ab2:	2928      	cmp	r1, #40	; 0x28
   88ab4:	d102      	bne.n	88abc <do_paint_window_client+0x244>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88ab6:	06d0      	lsls	r0, r2, #27
   88ab8:	f140 832c 	bpl.w	89114 <do_paint_window_client+0x89c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88abc:	f8d9 220c 	ldr.w	r2, [r9, #524]	; 0x20c
   88ac0:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88ac4:	2928      	cmp	r1, #40	; 0x28
   88ac6:	d102      	bne.n	88ace <do_paint_window_client+0x256>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88ac8:	06d1      	lsls	r1, r2, #27
   88aca:	f140 8332 	bpl.w	89132 <do_paint_window_client+0x8ba>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88ace:	f8d9 224c 	ldr.w	r2, [r9, #588]	; 0x24c
   88ad2:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88ad6:	2928      	cmp	r1, #40	; 0x28
   88ad8:	d102      	bne.n	88ae0 <do_paint_window_client+0x268>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88ada:	06d2      	lsls	r2, r2, #27
   88adc:	f140 8338 	bpl.w	89150 <do_paint_window_client+0x8d8>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88ae0:	f8d9 228c 	ldr.w	r2, [r9, #652]	; 0x28c
   88ae4:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88ae8:	2928      	cmp	r1, #40	; 0x28
   88aea:	d102      	bne.n	88af2 <do_paint_window_client+0x27a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88aec:	06d3      	lsls	r3, r2, #27
   88aee:	f140 833e 	bpl.w	8916e <do_paint_window_client+0x8f6>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88af2:	f8d9 22cc 	ldr.w	r2, [r9, #716]	; 0x2cc
   88af6:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88afa:	2928      	cmp	r1, #40	; 0x28
   88afc:	d102      	bne.n	88b04 <do_paint_window_client+0x28c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88afe:	06d0      	lsls	r0, r2, #27
   88b00:	f140 8361 	bpl.w	891c6 <do_paint_window_client+0x94e>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88b04:	f8d9 230c 	ldr.w	r2, [r9, #780]	; 0x30c
   88b08:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88b0c:	2928      	cmp	r1, #40	; 0x28
   88b0e:	d102      	bne.n	88b16 <do_paint_window_client+0x29e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88b10:	06d1      	lsls	r1, r2, #27
   88b12:	f140 8367 	bpl.w	891e4 <do_paint_window_client+0x96c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88b16:	f8d9 234c 	ldr.w	r2, [r9, #844]	; 0x34c
   88b1a:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88b1e:	2928      	cmp	r1, #40	; 0x28
   88b20:	d102      	bne.n	88b28 <do_paint_window_client+0x2b0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88b22:	06d2      	lsls	r2, r2, #27
   88b24:	f140 827b 	bpl.w	8901e <do_paint_window_client+0x7a6>
	return (mw_all_windows[window_id].window_handle);
   88b28:	eb09 1484 	add.w	r4, r9, r4, lsl #6
   88b2c:	6960      	ldr	r0, [r4, #20]
	if (window_handle == MW_INVALID_HANDLE)
   88b2e:	2800      	cmp	r0, #0
   88b30:	d069      	beq.n	88c06 <do_paint_window_client+0x38e>
		if (mw_all_windows[i].window_handle == window_handle &&
   88b32:	f8d9 3014 	ldr.w	r3, [r9, #20]
   88b36:	4298      	cmp	r0, r3
   88b38:	d071      	beq.n	88c1e <do_paint_window_client+0x3a6>
   88b3a:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
   88b3e:	4298      	cmp	r0, r3
   88b40:	d066      	beq.n	88c10 <do_paint_window_client+0x398>
   88b42:	f8d9 3094 	ldr.w	r3, [r9, #148]	; 0x94
   88b46:	4298      	cmp	r0, r3
   88b48:	d070      	beq.n	88c2c <do_paint_window_client+0x3b4>
   88b4a:	f8d9 30d4 	ldr.w	r3, [r9, #212]	; 0xd4
   88b4e:	4298      	cmp	r0, r3
   88b50:	d073      	beq.n	88c3a <do_paint_window_client+0x3c2>
   88b52:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
   88b56:	4298      	cmp	r0, r3
   88b58:	f000 808e 	beq.w	88c78 <do_paint_window_client+0x400>
   88b5c:	f8d9 3154 	ldr.w	r3, [r9, #340]	; 0x154
   88b60:	4298      	cmp	r0, r3
   88b62:	f000 8091 	beq.w	88c88 <do_paint_window_client+0x410>
   88b66:	f8d9 3194 	ldr.w	r3, [r9, #404]	; 0x194
   88b6a:	4298      	cmp	r0, r3
   88b6c:	f000 8094 	beq.w	88c98 <do_paint_window_client+0x420>
   88b70:	f8d9 31d4 	ldr.w	r3, [r9, #468]	; 0x1d4
   88b74:	4298      	cmp	r0, r3
   88b76:	f000 8097 	beq.w	88ca8 <do_paint_window_client+0x430>
   88b7a:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
   88b7e:	4298      	cmp	r0, r3
   88b80:	f000 809a 	beq.w	88cb8 <do_paint_window_client+0x440>
   88b84:	f8d9 3254 	ldr.w	r3, [r9, #596]	; 0x254
   88b88:	4298      	cmp	r0, r3
   88b8a:	f000 809d 	beq.w	88cc8 <do_paint_window_client+0x450>
   88b8e:	f8d9 3294 	ldr.w	r3, [r9, #660]	; 0x294
   88b92:	4298      	cmp	r0, r3
   88b94:	f000 80a0 	beq.w	88cd8 <do_paint_window_client+0x460>
   88b98:	f8d9 32d4 	ldr.w	r3, [r9, #724]	; 0x2d4
   88b9c:	4298      	cmp	r0, r3
   88b9e:	f000 80a3 	beq.w	88ce8 <do_paint_window_client+0x470>
   88ba2:	f8d9 3314 	ldr.w	r3, [r9, #788]	; 0x314
   88ba6:	4298      	cmp	r0, r3
   88ba8:	f000 80a6 	beq.w	88cf8 <do_paint_window_client+0x480>
   88bac:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
   88bb0:	4298      	cmp	r0, r3
   88bb2:	f000 80a9 	beq.w	88d08 <do_paint_window_client+0x490>
   88bb6:	240e      	movs	r4, #14
   88bb8:	2000      	movs	r0, #0
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   88bba:	4b23      	ldr	r3, [pc, #140]	; (88c48 <do_paint_window_client+0x3d0>)
   88bbc:	f240 5252 	movw	r2, #1362	; 0x552
   88bc0:	492a      	ldr	r1, [pc, #168]	; (88c6c <do_paint_window_client+0x3f4>)
   88bc2:	4d23      	ldr	r5, [pc, #140]	; (88c50 <do_paint_window_client+0x3d8>)
   88bc4:	47a8      	blx	r5
				if (find_highest_z_order_at_point(rect_current.x, rect_current.y) > mw_all_windows[window_id].z_order)
   88bc6:	9b02      	ldr	r3, [sp, #8]
	return (mw_all_windows[window_id].z_order);
   88bc8:	eb09 1484 	add.w	r4, r9, r4, lsl #6
				if (find_highest_z_order_at_point(rect_current.x, rect_current.y) > mw_all_windows[window_id].z_order)
   88bcc:	444b      	add	r3, r9
   88bce:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   88bd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   88bd6:	4293      	cmp	r3, r2
   88bd8:	f4ff af16 	bcc.w	88a08 <do_paint_window_client+0x190>
				(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   88bdc:	aa09      	add	r2, sp, #36	; 0x24
   88bde:	ab0b      	add	r3, sp, #44	; 0x2c
   88be0:	e892 0003 	ldmia.w	r2, {r0, r1}
				previous_rect_left = rect_previous.x;
   88be4:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	; 0x2c
				previous_rect_width = rect_previous.width;
   88be8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
				(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   88bec:	e883 0003 	stmia.w	r3, {r0, r1}
				if (rect_waiting_to_be_painted)
   88bf0:	f1ba 0f00 	cmp.w	sl, #0
   88bf4:	d009      	beq.n	88c0a <do_paint_window_client+0x392>
					rect_previous.width += previous_rect_width;
   88bf6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
					rect_previous.x = previous_rect_left;
   88bfa:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
					rect_previous.width += previous_rect_width;
   88bfe:	441a      	add	r2, r3
   88c00:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   88c04:	e704      	b.n	88a10 <do_paint_window_client+0x198>
	if (window_handle == MW_INVALID_HANDLE)
   88c06:	240e      	movs	r4, #14
   88c08:	e7d7      	b.n	88bba <do_paint_window_client+0x342>
				rect_waiting_to_be_painted = true;
   88c0a:	f04f 0a01 	mov.w	sl, #1
   88c0e:	e6ff      	b.n	88a10 <do_paint_window_client+0x198>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88c10:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   88c14:	069f      	lsls	r7, r3, #26
   88c16:	d594      	bpl.n	88b42 <do_paint_window_client+0x2ca>
   88c18:	2401      	movs	r4, #1
   88c1a:	4620      	mov	r0, r4
   88c1c:	e7cd      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88c1e:	f8d9 300c 	ldr.w	r3, [r9, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   88c22:	069b      	lsls	r3, r3, #26
   88c24:	d589      	bpl.n	88b3a <do_paint_window_client+0x2c2>
   88c26:	2400      	movs	r4, #0
   88c28:	2001      	movs	r0, #1
   88c2a:	e7c6      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88c2c:	f8d9 308c 	ldr.w	r3, [r9, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   88c30:	069d      	lsls	r5, r3, #26
   88c32:	d58a      	bpl.n	88b4a <do_paint_window_client+0x2d2>
   88c34:	2402      	movs	r4, #2
   88c36:	2001      	movs	r0, #1
   88c38:	e7bf      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88c3a:	f8d9 30cc 	ldr.w	r3, [r9, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   88c3e:	0699      	lsls	r1, r3, #26
   88c40:	d587      	bpl.n	88b52 <do_paint_window_client+0x2da>
   88c42:	2403      	movs	r4, #3
   88c44:	2001      	movs	r0, #1
   88c46:	e7b8      	b.n	88bba <do_paint_window_client+0x342>
   88c48:	000ab764 	.word	0x000ab764
   88c4c:	000ab3b8 	.word	0x000ab3b8
   88c50:	00095add 	.word	0x00095add
   88c54:	00086e2d 	.word	0x00086e2d
   88c58:	00086e31 	.word	0x00086e31
   88c5c:	20071fb4 	.word	0x20071fb4
   88c60:	00088241 	.word	0x00088241
   88c64:	00087e11 	.word	0x00087e11
   88c68:	2007180c 	.word	0x2007180c
   88c6c:	000ab2e8 	.word	0x000ab2e8
   88c70:	20071bd8 	.word	0x20071bd8
   88c74:	20071f78 	.word	0x20071f78
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88c78:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   88c7c:	069a      	lsls	r2, r3, #26
   88c7e:	f57f af6d 	bpl.w	88b5c <do_paint_window_client+0x2e4>
   88c82:	2404      	movs	r4, #4
   88c84:	2001      	movs	r0, #1
   88c86:	e798      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88c88:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   88c8c:	069b      	lsls	r3, r3, #26
   88c8e:	f57f af6a 	bpl.w	88b66 <do_paint_window_client+0x2ee>
   88c92:	2405      	movs	r4, #5
   88c94:	2001      	movs	r0, #1
   88c96:	e790      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88c98:	f8d9 318c 	ldr.w	r3, [r9, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   88c9c:	069f      	lsls	r7, r3, #26
   88c9e:	f57f af67 	bpl.w	88b70 <do_paint_window_client+0x2f8>
   88ca2:	2406      	movs	r4, #6
   88ca4:	2001      	movs	r0, #1
   88ca6:	e788      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88ca8:	f8d9 31cc 	ldr.w	r3, [r9, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   88cac:	069d      	lsls	r5, r3, #26
   88cae:	f57f af64 	bpl.w	88b7a <do_paint_window_client+0x302>
   88cb2:	2407      	movs	r4, #7
   88cb4:	2001      	movs	r0, #1
   88cb6:	e780      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88cb8:	f8d9 320c 	ldr.w	r3, [r9, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   88cbc:	0699      	lsls	r1, r3, #26
   88cbe:	f57f af61 	bpl.w	88b84 <do_paint_window_client+0x30c>
   88cc2:	2408      	movs	r4, #8
   88cc4:	2001      	movs	r0, #1
   88cc6:	e778      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88cc8:	f8d9 324c 	ldr.w	r3, [r9, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   88ccc:	069a      	lsls	r2, r3, #26
   88cce:	f57f af5e 	bpl.w	88b8e <do_paint_window_client+0x316>
   88cd2:	2409      	movs	r4, #9
   88cd4:	2001      	movs	r0, #1
   88cd6:	e770      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88cd8:	f8d9 328c 	ldr.w	r3, [r9, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   88cdc:	069b      	lsls	r3, r3, #26
   88cde:	f57f af5b 	bpl.w	88b98 <do_paint_window_client+0x320>
   88ce2:	240a      	movs	r4, #10
   88ce4:	2001      	movs	r0, #1
   88ce6:	e768      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88ce8:	f8d9 32cc 	ldr.w	r3, [r9, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   88cec:	069f      	lsls	r7, r3, #26
   88cee:	f57f af58 	bpl.w	88ba2 <do_paint_window_client+0x32a>
   88cf2:	240b      	movs	r4, #11
   88cf4:	2001      	movs	r0, #1
   88cf6:	e760      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88cf8:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   88cfc:	069d      	lsls	r5, r3, #26
   88cfe:	f57f af55 	bpl.w	88bac <do_paint_window_client+0x334>
   88d02:	240c      	movs	r4, #12
   88d04:	2001      	movs	r0, #1
   88d06:	e758      	b.n	88bba <do_paint_window_client+0x342>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   88d08:	f8d9 334c 	ldr.w	r3, [r9, #844]	; 0x34c
   88d0c:	f003 0320 	and.w	r3, r3, #32
		if (mw_all_windows[i].window_handle == window_handle &&
   88d10:	2b00      	cmp	r3, #0
   88d12:	bf0b      	itete	eq
   88d14:	240e      	moveq	r4, #14
   88d16:	240d      	movne	r4, #13
   88d18:	2000      	moveq	r0, #0
   88d1a:	2001      	movne	r0, #1
   88d1c:	e74d      	b.n	88bba <do_paint_window_client+0x342>
						do_paint_window_client2(window_handle, &rect_previous);
   88d1e:	a90b      	add	r1, sp, #44	; 0x2c
   88d20:	9804      	ldr	r0, [sp, #16]
   88d22:	4bc6      	ldr	r3, [pc, #792]	; (8903c <do_paint_window_client+0x7c4>)
   88d24:	4798      	blx	r3
						rect_waiting_to_be_painted = false;
   88d26:	f04f 0a00 	mov.w	sl, #0
   88d2a:	e671      	b.n	88a10 <do_paint_window_client+0x198>
			if (rect_waiting_to_be_painted)
   88d2c:	f1ba 0f00 	cmp.w	sl, #0
   88d30:	f040 8267 	bne.w	89202 <do_paint_window_client+0x98a>
   88d34:	f8bd 101c 	ldrh.w	r1, [sp, #28]
		for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   88d38:	9b03      	ldr	r3, [sp, #12]
   88d3a:	1e4a      	subs	r2, r1, #1
   88d3c:	3301      	adds	r3, #1
   88d3e:	b29b      	uxth	r3, r3
   88d40:	4293      	cmp	r3, r2
   88d42:	9303      	str	r3, [sp, #12]
   88d44:	f4ff ae49 	bcc.w	889da <do_paint_window_client+0x162>
   88d48:	f8dd a010 	ldr.w	sl, [sp, #16]
	if (window_handle == mw_all_windows[MW_ROOT_WINDOW_ID].window_handle)
   88d4c:	f8d9 3014 	ldr.w	r3, [r9, #20]
   88d50:	459a      	cmp	sl, r3
   88d52:	f47f adf4 	bne.w	8893e <do_paint_window_client+0xc6>
	r.width = MW_DESKTOP_ICON_WIDTH;
   88d56:	4bba      	ldr	r3, [pc, #744]	; (89040 <do_paint_window_client+0x7c8>)
   88d58:	4798      	blx	r3
	r.height = MW_DESKTOP_ICON_HEIGHT;
   88d5a:	2200      	movs	r2, #0
   88d5c:	2318      	movs	r3, #24
	r.width = MW_DESKTOP_ICON_WIDTH;
   88d5e:	2800      	cmp	r0, #0
   88d60:	bfb8      	it	lt
   88d62:	3003      	addlt	r0, #3
	r.height = MW_DESKTOP_ICON_HEIGHT;
   88d64:	9205      	str	r2, [sp, #20]
   88d66:	4ab7      	ldr	r2, [pc, #732]	; (89044 <do_paint_window_client+0x7cc>)
	r.width = MW_DESKTOP_ICON_WIDTH;
   88d68:	1080      	asrs	r0, r0, #2
   88d6a:	9204      	str	r2, [sp, #16]
   88d6c:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
	r.height = MW_DESKTOP_ICON_HEIGHT;
   88d70:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		if (minimised_windows[i] == MW_ROOT_WINDOW_ID)
   88d74:	9b04      	ldr	r3, [sp, #16]
   88d76:	785b      	ldrb	r3, [r3, #1]
   88d78:	2b00      	cmp	r3, #0
   88d7a:	f43f ade0 	beq.w	8893e <do_paint_window_client+0xc6>
	MW_ASSERT(x != (void*)0, "Null pointer argument");
   88d7e:	4cb2      	ldr	r4, [pc, #712]	; (89048 <do_paint_window_client+0x7d0>)
   88d80:	4bb2      	ldr	r3, [pc, #712]	; (8904c <do_paint_window_client+0x7d4>)
   88d82:	f44f 7255 	mov.w	r2, #852	; 0x354
   88d86:	49b2      	ldr	r1, [pc, #712]	; (89050 <do_paint_window_client+0x7d8>)
   88d88:	2001      	movs	r0, #1
   88d8a:	47a0      	blx	r4
	MW_ASSERT(y != (void*)0, "Null pointer argument");
   88d8c:	f240 3255 	movw	r2, #853	; 0x355
   88d90:	49af      	ldr	r1, [pc, #700]	; (89050 <do_paint_window_client+0x7d8>)
   88d92:	4bae      	ldr	r3, [pc, #696]	; (8904c <do_paint_window_client+0x7d4>)
   88d94:	2001      	movs	r0, #1
   88d96:	47a0      	blx	r4
	*x = (int16_t)(((int16_t)icon_number % MW_DESKTOP_ICONS_PER_ROW) * MW_DESKTOP_ICON_WIDTH);
   88d98:	4ba9      	ldr	r3, [pc, #676]	; (89040 <do_paint_window_client+0x7c8>)
   88d9a:	4798      	blx	r3
		find_minimsed_icon_location(i - 1U, &x, &y);
   88d9c:	f89d 4014 	ldrb.w	r4, [sp, #20]
	*x = (int16_t)(((int16_t)icon_number % MW_DESKTOP_ICONS_PER_ROW) * MW_DESKTOP_ICON_WIDTH);
   88da0:	2800      	cmp	r0, #0
   88da2:	bfb8      	it	lt
   88da4:	3003      	addlt	r0, #3
   88da6:	f004 0303 	and.w	r3, r4, #3
   88daa:	1080      	asrs	r0, r0, #2
   88dac:	fb03 f000 	mul.w	r0, r3, r0
	*y = (int16_t)(MW_ROOT_HEIGHT - ((1 + ((int16_t)icon_number / MW_DESKTOP_ICONS_PER_ROW)) * MW_DESKTOP_ICON_HEIGHT));
   88db0:	4ba8      	ldr	r3, [pc, #672]	; (89054 <do_paint_window_client+0x7dc>)
	*x = (int16_t)(((int16_t)icon_number % MW_DESKTOP_ICONS_PER_ROW) * MW_DESKTOP_ICON_WIDTH);
   88db2:	b205      	sxth	r5, r0
	*y = (int16_t)(MW_ROOT_HEIGHT - ((1 + ((int16_t)icon_number / MW_DESKTOP_ICONS_PER_ROW)) * MW_DESKTOP_ICON_HEIGHT));
   88db4:	4798      	blx	r3
   88db6:	08a3      	lsrs	r3, r4, #2
   88db8:	3301      	adds	r3, #1
   88dba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   88dbe:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
   88dc2:	b21b      	sxth	r3, r3
		find_rect_window_intersections(&r, &horiz_edges_count, &vert_edges_count);
   88dc4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   88dc8:	a908      	add	r1, sp, #32
   88dca:	a80d      	add	r0, sp, #52	; 0x34
		r.y = y;
   88dcc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
		draw_info.origin_y = r.y;
   88dd0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
		find_rect_window_intersections(&r, &horiz_edges_count, &vert_edges_count);
   88dd4:	4ba0      	ldr	r3, [pc, #640]	; (89058 <do_paint_window_client+0x7e0>)
		r.x = x;
   88dd6:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
		draw_info.origin_x = r.x;
   88dda:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
		find_rect_window_intersections(&r, &horiz_edges_count, &vert_edges_count);
   88dde:	4798      	blx	r3
		mw_gl_set_fill(MW_GL_FILL);
   88de0:	2001      	movs	r0, #1
   88de2:	4b9e      	ldr	r3, [pc, #632]	; (8905c <do_paint_window_client+0x7e4>)
   88de4:	4798      	blx	r3
		mw_gl_clear_pattern();
   88de6:	4b9e      	ldr	r3, [pc, #632]	; (89060 <do_paint_window_client+0x7e8>)
   88de8:	4798      	blx	r3
		mw_gl_set_bg_transparency(MW_GL_BG_NOT_TRANSPARENT);
   88dea:	4c9e      	ldr	r4, [pc, #632]	; (89064 <do_paint_window_client+0x7ec>)
   88dec:	2001      	movs	r0, #1
   88dee:	47a0      	blx	r4
		mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   88df0:	2000      	movs	r0, #0
   88df2:	4b9d      	ldr	r3, [pc, #628]	; (89068 <do_paint_window_client+0x7f0>)
   88df4:	4798      	blx	r3
		mw_gl_set_solid_fill_colour(MW_HAL_LCD_GREY5);
   88df6:	489d      	ldr	r0, [pc, #628]	; (8906c <do_paint_window_client+0x7f4>)
   88df8:	4b9d      	ldr	r3, [pc, #628]	; (89070 <do_paint_window_client+0x7f8>)
   88dfa:	4798      	blx	r3
		mw_gl_set_border(MW_GL_BORDER_ON);
   88dfc:	2001      	movs	r0, #1
   88dfe:	4b9d      	ldr	r3, [pc, #628]	; (89074 <do_paint_window_client+0x7fc>)
   88e00:	4798      	blx	r3
		mw_gl_set_line(MW_GL_SOLID_LINE);
   88e02:	4b9d      	ldr	r3, [pc, #628]	; (89078 <do_paint_window_client+0x800>)
   88e04:	f64f 70ff 	movw	r0, #65535	; 0xffff
   88e08:	4798      	blx	r3
		mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   88e0a:	2000      	movs	r0, #0
   88e0c:	47a0      	blx	r4
		mw_gl_set_font(MW_GL_FONT_9);
   88e0e:	2000      	movs	r0, #0
   88e10:	4b9a      	ldr	r3, [pc, #616]	; (8907c <do_paint_window_client+0x804>)
   88e12:	4798      	blx	r3
		mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   88e14:	2000      	movs	r0, #0
   88e16:	4b9a      	ldr	r3, [pc, #616]	; (89080 <do_paint_window_client+0x808>)
   88e18:	4798      	blx	r3
		for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   88e1a:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   88e1e:	2801      	cmp	r0, #1
   88e20:	f000 8355 	beq.w	894ce <do_paint_window_client+0xc56>
   88e24:	2300      	movs	r3, #0
   88e26:	469b      	mov	fp, r3
   88e28:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   88e2c:	f8df a268 	ldr.w	sl, [pc, #616]	; 89098 <do_paint_window_client+0x820>
   88e30:	9303      	str	r3, [sp, #12]
			draw_info.clip_rect.y = horizontal_edges[horizontal_edge_counter] - draw_info.origin_y;
   88e32:	f93a 801b 	ldrsh.w	r8, [sl, fp, lsl #1]
   88e36:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   88e3a:	2a01      	cmp	r2, #1
			draw_info.clip_rect.y = horizontal_edges[horizontal_edge_counter] - draw_info.origin_y;
   88e3c:	eba8 0101 	sub.w	r1, r8, r1
   88e40:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   88e44:	f000 8339 	beq.w	894ba <do_paint_window_client+0xc42>
   88e48:	2300      	movs	r3, #0
   88e4a:	9302      	str	r3, [sp, #8]
   88e4c:	461c      	mov	r4, r3
   88e4e:	e05f      	b.n	88f10 <do_paint_window_client+0x698>
		if (mw_all_windows[i].window_handle == window_handle &&
   88e50:	f8d9 3014 	ldr.w	r3, [r9, #20]
   88e54:	4298      	cmp	r0, r3
   88e56:	f000 82bb 	beq.w	893d0 <do_paint_window_client+0xb58>
   88e5a:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
   88e5e:	4283      	cmp	r3, r0
   88e60:	f000 82be 	beq.w	893e0 <do_paint_window_client+0xb68>
   88e64:	f8d9 3094 	ldr.w	r3, [r9, #148]	; 0x94
   88e68:	4283      	cmp	r3, r0
   88e6a:	f000 82c1 	beq.w	893f0 <do_paint_window_client+0xb78>
   88e6e:	f8d9 30d4 	ldr.w	r3, [r9, #212]	; 0xd4
   88e72:	4298      	cmp	r0, r3
   88e74:	f000 82c4 	beq.w	89400 <do_paint_window_client+0xb88>
   88e78:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
   88e7c:	4283      	cmp	r3, r0
   88e7e:	f000 82c7 	beq.w	89410 <do_paint_window_client+0xb98>
   88e82:	f8d9 3154 	ldr.w	r3, [r9, #340]	; 0x154
   88e86:	4298      	cmp	r0, r3
   88e88:	f000 82ca 	beq.w	89420 <do_paint_window_client+0xba8>
   88e8c:	f8d9 3194 	ldr.w	r3, [r9, #404]	; 0x194
   88e90:	4298      	cmp	r0, r3
   88e92:	f000 82cd 	beq.w	89430 <do_paint_window_client+0xbb8>
   88e96:	f8d9 31d4 	ldr.w	r3, [r9, #468]	; 0x1d4
   88e9a:	4298      	cmp	r0, r3
   88e9c:	f000 82d0 	beq.w	89440 <do_paint_window_client+0xbc8>
   88ea0:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
   88ea4:	4298      	cmp	r0, r3
   88ea6:	f000 82db 	beq.w	89460 <do_paint_window_client+0xbe8>
   88eaa:	f8d9 3254 	ldr.w	r3, [r9, #596]	; 0x254
   88eae:	4298      	cmp	r0, r3
   88eb0:	f000 82ce 	beq.w	89450 <do_paint_window_client+0xbd8>
   88eb4:	f8d9 3294 	ldr.w	r3, [r9, #660]	; 0x294
   88eb8:	4298      	cmp	r0, r3
   88eba:	f000 82d9 	beq.w	89470 <do_paint_window_client+0xbf8>
   88ebe:	f8d9 32d4 	ldr.w	r3, [r9, #724]	; 0x2d4
   88ec2:	4298      	cmp	r0, r3
   88ec4:	f000 82dc 	beq.w	89480 <do_paint_window_client+0xc08>
   88ec8:	f8d9 3314 	ldr.w	r3, [r9, #788]	; 0x314
   88ecc:	4298      	cmp	r0, r3
   88ece:	f000 82df 	beq.w	89490 <do_paint_window_client+0xc18>
   88ed2:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
   88ed6:	4298      	cmp	r0, r3
   88ed8:	f000 82e2 	beq.w	894a0 <do_paint_window_client+0xc28>
   88edc:	250e      	movs	r5, #14
   88ede:	2000      	movs	r0, #0
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   88ee0:	4b68      	ldr	r3, [pc, #416]	; (89084 <do_paint_window_client+0x80c>)
   88ee2:	f240 5252 	movw	r2, #1362	; 0x552
   88ee6:	4968      	ldr	r1, [pc, #416]	; (89088 <do_paint_window_client+0x810>)
   88ee8:	4e57      	ldr	r6, [pc, #348]	; (89048 <do_paint_window_client+0x7d0>)
	return (mw_all_windows[window_id].z_order);
   88eea:	eb09 1585 	add.w	r5, r9, r5, lsl #6
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   88eee:	47b0      	blx	r6
				if (find_highest_z_order_at_point(vertical_edges[vertical_edge_counter],
   88ef0:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
   88ef4:	2800      	cmp	r0, #0
   88ef6:	f000 8209 	beq.w	8930c <do_paint_window_client+0xa94>
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   88efa:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   88efe:	3401      	adds	r4, #1
   88f00:	b2a4      	uxth	r4, r4
   88f02:	1e53      	subs	r3, r2, #1
   88f04:	429c      	cmp	r4, r3
   88f06:	9402      	str	r4, [sp, #8]
   88f08:	f080 82d5 	bcs.w	894b6 <do_paint_window_client+0xc3e>
   88f0c:	f93a 801b 	ldrsh.w	r8, [sl, fp, lsl #1]
				draw_info.clip_rect.x = vertical_edges[vertical_edge_counter] - draw_info.origin_x;
   88f10:	4b5e      	ldr	r3, [pc, #376]	; (8908c <do_paint_window_client+0x814>)
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88f12:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
				draw_info.clip_rect.x = vertical_edges[vertical_edge_counter] - draw_info.origin_x;
   88f16:	f933 6014 	ldrsh.w	r6, [r3, r4, lsl #1]
   88f1a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88f1e:	f001 0028 	and.w	r0, r1, #40	; 0x28
				draw_info.clip_rect.x = vertical_edges[vertical_edge_counter] - draw_info.origin_x;
   88f22:	1ab2      	subs	r2, r6, r2
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88f24:	2828      	cmp	r0, #40	; 0x28
				draw_info.clip_rect.x = vertical_edges[vertical_edge_counter] - draw_info.origin_x;
   88f26:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88f2a:	d102      	bne.n	88f32 <do_paint_window_client+0x6ba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88f2c:	06c8      	lsls	r0, r1, #27
   88f2e:	f140 82d9 	bpl.w	894e4 <do_paint_window_client+0xc6c>
	uint8_t highest_z_order = 0U;
   88f32:	2700      	movs	r7, #0
	uint8_t window_id = MW_ROOT_WINDOW_ID;
   88f34:	463d      	mov	r5, r7
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88f36:	f8d9 208c 	ldr.w	r2, [r9, #140]	; 0x8c
   88f3a:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88f3e:	2928      	cmp	r1, #40	; 0x28
   88f40:	d102      	bne.n	88f48 <do_paint_window_client+0x6d0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88f42:	06d1      	lsls	r1, r2, #27
   88f44:	f140 8317 	bpl.w	89576 <do_paint_window_client+0xcfe>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88f48:	f8d9 20cc 	ldr.w	r2, [r9, #204]	; 0xcc
   88f4c:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88f50:	2928      	cmp	r1, #40	; 0x28
   88f52:	d102      	bne.n	88f5a <do_paint_window_client+0x6e2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88f54:	06d2      	lsls	r2, r2, #27
   88f56:	f140 831d 	bpl.w	89594 <do_paint_window_client+0xd1c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88f5a:	f8d9 210c 	ldr.w	r2, [r9, #268]	; 0x10c
   88f5e:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88f62:	2928      	cmp	r1, #40	; 0x28
   88f64:	d102      	bne.n	88f6c <do_paint_window_client+0x6f4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88f66:	06d3      	lsls	r3, r2, #27
   88f68:	f140 8323 	bpl.w	895b2 <do_paint_window_client+0xd3a>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88f6c:	f8d9 214c 	ldr.w	r2, [r9, #332]	; 0x14c
   88f70:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88f74:	2928      	cmp	r1, #40	; 0x28
   88f76:	d102      	bne.n	88f7e <do_paint_window_client+0x706>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88f78:	06d0      	lsls	r0, r2, #27
   88f7a:	f140 834b 	bpl.w	89614 <do_paint_window_client+0xd9c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88f7e:	f8d9 218c 	ldr.w	r2, [r9, #396]	; 0x18c
   88f82:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88f86:	2928      	cmp	r1, #40	; 0x28
   88f88:	d102      	bne.n	88f90 <do_paint_window_client+0x718>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88f8a:	06d1      	lsls	r1, r2, #27
   88f8c:	f140 8351 	bpl.w	89632 <do_paint_window_client+0xdba>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88f90:	f8d9 21cc 	ldr.w	r2, [r9, #460]	; 0x1cc
   88f94:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88f98:	2928      	cmp	r1, #40	; 0x28
   88f9a:	d102      	bne.n	88fa2 <do_paint_window_client+0x72a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88f9c:	06d2      	lsls	r2, r2, #27
   88f9e:	f140 8357 	bpl.w	89650 <do_paint_window_client+0xdd8>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88fa2:	f8d9 220c 	ldr.w	r2, [r9, #524]	; 0x20c
   88fa6:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88faa:	2928      	cmp	r1, #40	; 0x28
   88fac:	d102      	bne.n	88fb4 <do_paint_window_client+0x73c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88fae:	06d3      	lsls	r3, r2, #27
   88fb0:	f140 835d 	bpl.w	8966e <do_paint_window_client+0xdf6>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88fb4:	f8d9 224c 	ldr.w	r2, [r9, #588]	; 0x24c
   88fb8:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88fbc:	2928      	cmp	r1, #40	; 0x28
   88fbe:	d102      	bne.n	88fc6 <do_paint_window_client+0x74e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88fc0:	06d0      	lsls	r0, r2, #27
   88fc2:	f140 8363 	bpl.w	8968c <do_paint_window_client+0xe14>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88fc6:	f8d9 228c 	ldr.w	r2, [r9, #652]	; 0x28c
   88fca:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88fce:	2928      	cmp	r1, #40	; 0x28
   88fd0:	d102      	bne.n	88fd8 <do_paint_window_client+0x760>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88fd2:	06d1      	lsls	r1, r2, #27
   88fd4:	f140 8294 	bpl.w	89500 <do_paint_window_client+0xc88>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88fd8:	f8d9 22cc 	ldr.w	r2, [r9, #716]	; 0x2cc
   88fdc:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88fe0:	2928      	cmp	r1, #40	; 0x28
   88fe2:	d102      	bne.n	88fea <do_paint_window_client+0x772>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88fe4:	06d2      	lsls	r2, r2, #27
   88fe6:	f140 829a 	bpl.w	8951e <do_paint_window_client+0xca6>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88fea:	f8d9 230c 	ldr.w	r2, [r9, #780]	; 0x30c
   88fee:	f002 0128 	and.w	r1, r2, #40	; 0x28
   88ff2:	2928      	cmp	r1, #40	; 0x28
   88ff4:	d102      	bne.n	88ffc <do_paint_window_client+0x784>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   88ff6:	06d3      	lsls	r3, r2, #27
   88ff8:	f140 82a0 	bpl.w	8953c <do_paint_window_client+0xcc4>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   88ffc:	f8d9 234c 	ldr.w	r2, [r9, #844]	; 0x34c
   89000:	f002 0128 	and.w	r1, r2, #40	; 0x28
   89004:	2928      	cmp	r1, #40	; 0x28
   89006:	d102      	bne.n	8900e <do_paint_window_client+0x796>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   89008:	06d0      	lsls	r0, r2, #27
   8900a:	f140 82a6 	bpl.w	8955a <do_paint_window_client+0xce2>
	return (mw_all_windows[window_id].window_handle);
   8900e:	eb09 1585 	add.w	r5, r9, r5, lsl #6
   89012:	6968      	ldr	r0, [r5, #20]
	if (window_handle == MW_INVALID_HANDLE)
   89014:	2800      	cmp	r0, #0
   89016:	f47f af1b 	bne.w	88e50 <do_paint_window_client+0x5d8>
   8901a:	250e      	movs	r5, #14
   8901c:	e760      	b.n	88ee0 <do_paint_window_client+0x668>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8901e:	465a      	mov	r2, fp
   89020:	4629      	mov	r1, r5
   89022:	481b      	ldr	r0, [pc, #108]	; (89090 <do_paint_window_client+0x818>)
   89024:	4b1b      	ldr	r3, [pc, #108]	; (89094 <do_paint_window_client+0x81c>)
   89026:	4798      	blx	r3
   89028:	2800      	cmp	r0, #0
   8902a:	f43f ad7d 	beq.w	88b28 <do_paint_window_client+0x2b0>
			if (mw_all_windows[i].z_order > highest_z_order)
   8902e:	f899 336c 	ldrb.w	r3, [r9, #876]	; 0x36c
   89032:	42bb      	cmp	r3, r7
   89034:	bf88      	it	hi
   89036:	240d      	movhi	r4, #13
   89038:	e576      	b.n	88b28 <do_paint_window_client+0x2b0>
   8903a:	bf00      	nop
   8903c:	00088241 	.word	0x00088241
   89040:	00086e2d 	.word	0x00086e2d
   89044:	20071848 	.word	0x20071848
   89048:	00095add 	.word	0x00095add
   8904c:	000a6618 	.word	0x000a6618
   89050:	000ab28c 	.word	0x000ab28c
   89054:	00086e31 	.word	0x00086e31
   89058:	00087e11 	.word	0x00087e11
   8905c:	000846fd 	.word	0x000846fd
   89060:	000846e1 	.word	0x000846e1
   89064:	00084709 	.word	0x00084709
   89068:	000846b1 	.word	0x000846b1
   8906c:	00bfbfbf 	.word	0x00bfbfbf
   89070:	000846c9 	.word	0x000846c9
   89074:	000846f1 	.word	0x000846f1
   89078:	000846d5 	.word	0x000846d5
   8907c:	00084715 	.word	0x00084715
   89080:	00084745 	.word	0x00084745
   89084:	000ab764 	.word	0x000ab764
   89088:	000ab2e8 	.word	0x000ab2e8
   8908c:	20071f78 	.word	0x20071f78
   89090:	20071f30 	.word	0x20071f30
   89094:	00096e7d 	.word	0x00096e7d
   89098:	2007180c 	.word	0x2007180c
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8909c:	465a      	mov	r2, fp
   8909e:	4629      	mov	r1, r5
   890a0:	488c      	ldr	r0, [pc, #560]	; (892d4 <do_paint_window_client+0xa5c>)
   890a2:	4b8d      	ldr	r3, [pc, #564]	; (892d8 <do_paint_window_client+0xa60>)
   890a4:	4798      	blx	r3
   890a6:	2800      	cmp	r0, #0
   890a8:	f43f ace4 	beq.w	88a74 <do_paint_window_client+0x1fc>
			if (mw_all_windows[i].z_order > highest_z_order)
   890ac:	f899 20ec 	ldrb.w	r2, [r9, #236]	; 0xec
   890b0:	4297      	cmp	r7, r2
   890b2:	bf3c      	itt	cc
   890b4:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   890b6:	2403      	movcc	r4, #3
   890b8:	e4dc      	b.n	88a74 <do_paint_window_client+0x1fc>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   890ba:	465a      	mov	r2, fp
   890bc:	4629      	mov	r1, r5
   890be:	4887      	ldr	r0, [pc, #540]	; (892dc <do_paint_window_client+0xa64>)
   890c0:	4b85      	ldr	r3, [pc, #532]	; (892d8 <do_paint_window_client+0xa60>)
   890c2:	4798      	blx	r3
   890c4:	2800      	cmp	r0, #0
   890c6:	f43f acde 	beq.w	88a86 <do_paint_window_client+0x20e>
			if (mw_all_windows[i].z_order > highest_z_order)
   890ca:	f899 212c 	ldrb.w	r2, [r9, #300]	; 0x12c
   890ce:	4297      	cmp	r7, r2
   890d0:	bf3c      	itt	cc
   890d2:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   890d4:	2404      	movcc	r4, #4
   890d6:	e4d6      	b.n	88a86 <do_paint_window_client+0x20e>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   890d8:	465a      	mov	r2, fp
   890da:	4629      	mov	r1, r5
   890dc:	4880      	ldr	r0, [pc, #512]	; (892e0 <do_paint_window_client+0xa68>)
   890de:	4b7e      	ldr	r3, [pc, #504]	; (892d8 <do_paint_window_client+0xa60>)
   890e0:	4798      	blx	r3
   890e2:	2800      	cmp	r0, #0
   890e4:	f43f acd8 	beq.w	88a98 <do_paint_window_client+0x220>
			if (mw_all_windows[i].z_order > highest_z_order)
   890e8:	f899 216c 	ldrb.w	r2, [r9, #364]	; 0x16c
   890ec:	4297      	cmp	r7, r2
   890ee:	bf3c      	itt	cc
   890f0:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   890f2:	2405      	movcc	r4, #5
   890f4:	e4d0      	b.n	88a98 <do_paint_window_client+0x220>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   890f6:	465a      	mov	r2, fp
   890f8:	4629      	mov	r1, r5
   890fa:	487a      	ldr	r0, [pc, #488]	; (892e4 <do_paint_window_client+0xa6c>)
   890fc:	4b76      	ldr	r3, [pc, #472]	; (892d8 <do_paint_window_client+0xa60>)
   890fe:	4798      	blx	r3
   89100:	2800      	cmp	r0, #0
   89102:	f43f acd2 	beq.w	88aaa <do_paint_window_client+0x232>
			if (mw_all_windows[i].z_order > highest_z_order)
   89106:	f899 21ac 	ldrb.w	r2, [r9, #428]	; 0x1ac
   8910a:	4297      	cmp	r7, r2
   8910c:	bf3c      	itt	cc
   8910e:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   89110:	2406      	movcc	r4, #6
   89112:	e4ca      	b.n	88aaa <do_paint_window_client+0x232>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   89114:	465a      	mov	r2, fp
   89116:	4629      	mov	r1, r5
   89118:	4873      	ldr	r0, [pc, #460]	; (892e8 <do_paint_window_client+0xa70>)
   8911a:	4b6f      	ldr	r3, [pc, #444]	; (892d8 <do_paint_window_client+0xa60>)
   8911c:	4798      	blx	r3
   8911e:	2800      	cmp	r0, #0
   89120:	f43f accc 	beq.w	88abc <do_paint_window_client+0x244>
			if (mw_all_windows[i].z_order > highest_z_order)
   89124:	f899 21ec 	ldrb.w	r2, [r9, #492]	; 0x1ec
   89128:	4297      	cmp	r7, r2
   8912a:	bf3c      	itt	cc
   8912c:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8912e:	2407      	movcc	r4, #7
   89130:	e4c4      	b.n	88abc <do_paint_window_client+0x244>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   89132:	465a      	mov	r2, fp
   89134:	4629      	mov	r1, r5
   89136:	486d      	ldr	r0, [pc, #436]	; (892ec <do_paint_window_client+0xa74>)
   89138:	4b67      	ldr	r3, [pc, #412]	; (892d8 <do_paint_window_client+0xa60>)
   8913a:	4798      	blx	r3
   8913c:	2800      	cmp	r0, #0
   8913e:	f43f acc6 	beq.w	88ace <do_paint_window_client+0x256>
			if (mw_all_windows[i].z_order > highest_z_order)
   89142:	f899 222c 	ldrb.w	r2, [r9, #556]	; 0x22c
   89146:	4297      	cmp	r7, r2
   89148:	bf3c      	itt	cc
   8914a:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8914c:	2408      	movcc	r4, #8
   8914e:	e4be      	b.n	88ace <do_paint_window_client+0x256>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   89150:	465a      	mov	r2, fp
   89152:	4629      	mov	r1, r5
   89154:	4866      	ldr	r0, [pc, #408]	; (892f0 <do_paint_window_client+0xa78>)
   89156:	4b60      	ldr	r3, [pc, #384]	; (892d8 <do_paint_window_client+0xa60>)
   89158:	4798      	blx	r3
   8915a:	2800      	cmp	r0, #0
   8915c:	f43f acc0 	beq.w	88ae0 <do_paint_window_client+0x268>
			if (mw_all_windows[i].z_order > highest_z_order)
   89160:	f899 226c 	ldrb.w	r2, [r9, #620]	; 0x26c
   89164:	4297      	cmp	r7, r2
   89166:	bf3c      	itt	cc
   89168:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8916a:	2409      	movcc	r4, #9
   8916c:	e4b8      	b.n	88ae0 <do_paint_window_client+0x268>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8916e:	465a      	mov	r2, fp
   89170:	4629      	mov	r1, r5
   89172:	4860      	ldr	r0, [pc, #384]	; (892f4 <do_paint_window_client+0xa7c>)
   89174:	4b58      	ldr	r3, [pc, #352]	; (892d8 <do_paint_window_client+0xa60>)
   89176:	4798      	blx	r3
   89178:	2800      	cmp	r0, #0
   8917a:	f43f acba 	beq.w	88af2 <do_paint_window_client+0x27a>
			if (mw_all_windows[i].z_order > highest_z_order)
   8917e:	f899 22ac 	ldrb.w	r2, [r9, #684]	; 0x2ac
   89182:	4297      	cmp	r7, r2
   89184:	bf3c      	itt	cc
   89186:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   89188:	240a      	movcc	r4, #10
   8918a:	e4b2      	b.n	88af2 <do_paint_window_client+0x27a>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8918c:	465a      	mov	r2, fp
   8918e:	4629      	mov	r1, r5
   89190:	4859      	ldr	r0, [pc, #356]	; (892f8 <do_paint_window_client+0xa80>)
   89192:	4b51      	ldr	r3, [pc, #324]	; (892d8 <do_paint_window_client+0xa60>)
   89194:	4798      	blx	r3
   89196:	2800      	cmp	r0, #0
   89198:	f43f ac58 	beq.w	88a4c <do_paint_window_client+0x1d4>
			if (mw_all_windows[i].z_order > highest_z_order)
   8919c:	f899 706c 	ldrb.w	r7, [r9, #108]	; 0x6c
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   891a0:	1c3c      	adds	r4, r7, #0
   891a2:	bf18      	it	ne
   891a4:	2401      	movne	r4, #1
   891a6:	e453      	b.n	88a50 <do_paint_window_client+0x1d8>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   891a8:	465a      	mov	r2, fp
   891aa:	4629      	mov	r1, r5
   891ac:	4853      	ldr	r0, [pc, #332]	; (892fc <do_paint_window_client+0xa84>)
   891ae:	4b4a      	ldr	r3, [pc, #296]	; (892d8 <do_paint_window_client+0xa60>)
   891b0:	4798      	blx	r3
   891b2:	2800      	cmp	r0, #0
   891b4:	f43f ac55 	beq.w	88a62 <do_paint_window_client+0x1ea>
			if (mw_all_windows[i].z_order > highest_z_order)
   891b8:	f899 20ac 	ldrb.w	r2, [r9, #172]	; 0xac
   891bc:	4297      	cmp	r7, r2
   891be:	bf3c      	itt	cc
   891c0:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   891c2:	2402      	movcc	r4, #2
   891c4:	e44d      	b.n	88a62 <do_paint_window_client+0x1ea>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   891c6:	465a      	mov	r2, fp
   891c8:	4629      	mov	r1, r5
   891ca:	484d      	ldr	r0, [pc, #308]	; (89300 <do_paint_window_client+0xa88>)
   891cc:	4b42      	ldr	r3, [pc, #264]	; (892d8 <do_paint_window_client+0xa60>)
   891ce:	4798      	blx	r3
   891d0:	2800      	cmp	r0, #0
   891d2:	f43f ac97 	beq.w	88b04 <do_paint_window_client+0x28c>
			if (mw_all_windows[i].z_order > highest_z_order)
   891d6:	f899 22ec 	ldrb.w	r2, [r9, #748]	; 0x2ec
   891da:	4297      	cmp	r7, r2
   891dc:	bf3c      	itt	cc
   891de:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   891e0:	240b      	movcc	r4, #11
   891e2:	e48f      	b.n	88b04 <do_paint_window_client+0x28c>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   891e4:	465a      	mov	r2, fp
   891e6:	4629      	mov	r1, r5
   891e8:	4846      	ldr	r0, [pc, #280]	; (89304 <do_paint_window_client+0xa8c>)
   891ea:	4b3b      	ldr	r3, [pc, #236]	; (892d8 <do_paint_window_client+0xa60>)
   891ec:	4798      	blx	r3
   891ee:	2800      	cmp	r0, #0
   891f0:	f43f ac91 	beq.w	88b16 <do_paint_window_client+0x29e>
			if (mw_all_windows[i].z_order > highest_z_order)
   891f4:	f899 232c 	ldrb.w	r2, [r9, #812]	; 0x32c
   891f8:	4297      	cmp	r7, r2
   891fa:	bf3c      	itt	cc
   891fc:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   891fe:	240c      	movcc	r4, #12
   89200:	e489      	b.n	88b16 <do_paint_window_client+0x29e>
				do_paint_window_client2(window_handle, &rect_previous);
   89202:	a90b      	add	r1, sp, #44	; 0x2c
   89204:	9804      	ldr	r0, [sp, #16]
   89206:	4b40      	ldr	r3, [pc, #256]	; (89308 <do_paint_window_client+0xa90>)
   89208:	4798      	blx	r3
   8920a:	e593      	b.n	88d34 <do_paint_window_client+0x4bc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8920c:	f8d9 334c 	ldr.w	r3, [r9, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   89210:	f013 0320 	ands.w	r3, r3, #32
   89214:	bf18      	it	ne
   89216:	230d      	movne	r3, #13
   89218:	f47f ab99 	bne.w	8894e <do_paint_window_client+0xd6>
   8921c:	4618      	mov	r0, r3
   8921e:	230e      	movs	r3, #14
   89220:	f7ff bb7c 	b.w	8891c <do_paint_window_client+0xa4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89224:	f8d9 308c 	ldr.w	r3, [r9, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   89228:	069d      	lsls	r5, r3, #26
   8922a:	f57f ab3a 	bpl.w	888a2 <do_paint_window_client+0x2a>
   8922e:	2302      	movs	r3, #2
   89230:	f7ff bb8d 	b.w	8894e <do_paint_window_client+0xd6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89234:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   89238:	0698      	lsls	r0, r3, #26
   8923a:	f57f ab64 	bpl.w	88906 <do_paint_window_client+0x8e>
   8923e:	230c      	movs	r3, #12
   89240:	f7ff bb85 	b.w	8894e <do_paint_window_client+0xd6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89244:	f8d9 30cc 	ldr.w	r3, [r9, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   89248:	069c      	lsls	r4, r3, #26
   8924a:	f57f ab2f 	bpl.w	888ac <do_paint_window_client+0x34>
   8924e:	2303      	movs	r3, #3
   89250:	f7ff bb7d 	b.w	8894e <do_paint_window_client+0xd6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89254:	f8d9 32cc 	ldr.w	r3, [r9, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   89258:	069c      	lsls	r4, r3, #26
   8925a:	f57f ab4f 	bpl.w	888fc <do_paint_window_client+0x84>
   8925e:	230b      	movs	r3, #11
   89260:	f7ff bb75 	b.w	8894e <do_paint_window_client+0xd6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89264:	f8d9 328c 	ldr.w	r3, [r9, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   89268:	069d      	lsls	r5, r3, #26
   8926a:	f57f ab42 	bpl.w	888f2 <do_paint_window_client+0x7a>
   8926e:	230a      	movs	r3, #10
   89270:	f7ff bb6d 	b.w	8894e <do_paint_window_client+0xd6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89274:	f8d9 324c 	ldr.w	r3, [r9, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   89278:	069e      	lsls	r6, r3, #26
   8927a:	f57f ab35 	bpl.w	888e8 <do_paint_window_client+0x70>
   8927e:	2309      	movs	r3, #9
   89280:	f7ff bb65 	b.w	8894e <do_paint_window_client+0xd6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89284:	f8d9 320c 	ldr.w	r3, [r9, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   89288:	069f      	lsls	r7, r3, #26
   8928a:	f57f ab28 	bpl.w	888de <do_paint_window_client+0x66>
   8928e:	2308      	movs	r3, #8
   89290:	f7ff bb5d 	b.w	8894e <do_paint_window_client+0xd6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89294:	f8d9 31cc 	ldr.w	r3, [r9, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   89298:	069b      	lsls	r3, r3, #26
   8929a:	f57f ab1b 	bpl.w	888d4 <do_paint_window_client+0x5c>
   8929e:	2307      	movs	r3, #7
   892a0:	f7ff bb55 	b.w	8894e <do_paint_window_client+0xd6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   892a4:	f8d9 318c 	ldr.w	r3, [r9, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   892a8:	069a      	lsls	r2, r3, #26
   892aa:	f57f ab0e 	bpl.w	888ca <do_paint_window_client+0x52>
   892ae:	2306      	movs	r3, #6
   892b0:	f7ff bb4d 	b.w	8894e <do_paint_window_client+0xd6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   892b4:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   892b8:	0699      	lsls	r1, r3, #26
   892ba:	f57f ab01 	bpl.w	888c0 <do_paint_window_client+0x48>
   892be:	2305      	movs	r3, #5
   892c0:	f7ff bb45 	b.w	8894e <do_paint_window_client+0xd6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   892c4:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   892c8:	0698      	lsls	r0, r3, #26
   892ca:	f57f aaf4 	bpl.w	888b6 <do_paint_window_client+0x3e>
   892ce:	2304      	movs	r3, #4
   892d0:	f7ff bb3d 	b.w	8894e <do_paint_window_client+0xd6>
   892d4:	20071cb0 	.word	0x20071cb0
   892d8:	00096e7d 	.word	0x00096e7d
   892dc:	20071cf0 	.word	0x20071cf0
   892e0:	20071d30 	.word	0x20071d30
   892e4:	20071d70 	.word	0x20071d70
   892e8:	20071db0 	.word	0x20071db0
   892ec:	20071df0 	.word	0x20071df0
   892f0:	20071e30 	.word	0x20071e30
   892f4:	20071e70 	.word	0x20071e70
   892f8:	20071c30 	.word	0x20071c30
   892fc:	20071c70 	.word	0x20071c70
   89300:	20071eb0 	.word	0x20071eb0
   89304:	20071ef0 	.word	0x20071ef0
   89308:	00088241 	.word	0x00088241
					draw_info.clip_rect.width = vertical_edges[vertical_edge_counter + 1U] - vertical_edges[vertical_edge_counter];
   8930c:	9b02      	ldr	r3, [sp, #8]
   8930e:	4ab0      	ldr	r2, [pc, #704]	; (895d0 <do_paint_window_client+0xd58>)
   89310:	49af      	ldr	r1, [pc, #700]	; (895d0 <do_paint_window_client+0xd58>)
   89312:	f103 0801 	add.w	r8, r3, #1
					draw_info.clip_rect.height = horizontal_edges[horizontal_edge_counter + 1U] - horizontal_edges[horizontal_edge_counter];
   89316:	9b03      	ldr	r3, [sp, #12]
					draw_info.clip_rect.width = vertical_edges[vertical_edge_counter + 1U] - vertical_edges[vertical_edge_counter];
   89318:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
   8931c:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
					draw_info.clip_rect.height = horizontal_edges[horizontal_edge_counter + 1U] - horizontal_edges[horizontal_edge_counter];
   89320:	3301      	adds	r3, #1
					draw_info.clip_rect.width = vertical_edges[vertical_edge_counter + 1U] - vertical_edges[vertical_edge_counter];
   89322:	1a52      	subs	r2, r2, r1
					draw_info.clip_rect.height = horizontal_edges[horizontal_edge_counter + 1U] - horizontal_edges[horizontal_edge_counter];
   89324:	f83a 3013 	ldrh.w	r3, [sl, r3, lsl #1]
   89328:	f83a 101b 	ldrh.w	r1, [sl, fp, lsl #1]
					draw_info.clip_rect.width = vertical_edges[vertical_edge_counter + 1U] - vertical_edges[vertical_edge_counter];
   8932c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
					draw_info.clip_rect.height = horizontal_edges[horizontal_edge_counter + 1U] - horizontal_edges[horizontal_edge_counter];
   89330:	1a5b      	subs	r3, r3, r1
   89332:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
					mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   89336:	4ba7      	ldr	r3, [pc, #668]	; (895d4 <do_paint_window_client+0xd5c>)
   89338:	4798      	blx	r3
					mw_gl_rectangle(&draw_info, 0, 0, MW_DESKTOP_ICON_WIDTH, MW_DESKTOP_ICON_HEIGHT);
   8933a:	4ba7      	ldr	r3, [pc, #668]	; (895d8 <do_paint_window_client+0xd60>)
   8933c:	4798      	blx	r3
   8933e:	2200      	movs	r2, #0
   89340:	2118      	movs	r1, #24
   89342:	1e03      	subs	r3, r0, #0
   89344:	bfb8      	it	lt
   89346:	3303      	addlt	r3, #3
   89348:	9100      	str	r1, [sp, #0]
   8934a:	a80f      	add	r0, sp, #60	; 0x3c
   8934c:	4611      	mov	r1, r2
   8934e:	f343 038f 	sbfx	r3, r3, #2, #16
   89352:	4da2      	ldr	r5, [pc, #648]	; (895dc <do_paint_window_client+0xd64>)
   89354:	47a8      	blx	r5
					mw_gl_string(&draw_info, 4, 9, mw_all_windows[minimised_windows[i]].title);
   89356:	9b04      	ldr	r3, [sp, #16]
   89358:	a80f      	add	r0, sp, #60	; 0x3c
   8935a:	785b      	ldrb	r3, [r3, #1]
   8935c:	2209      	movs	r2, #9
   8935e:	eb09 1383 	add.w	r3, r9, r3, lsl #6
   89362:	2104      	movs	r1, #4
   89364:	3331      	adds	r3, #49	; 0x31
   89366:	4d9e      	ldr	r5, [pc, #632]	; (895e0 <do_paint_window_client+0xd68>)
   89368:	47a8      	blx	r5
					mw_gl_set_fg_colour(MW_HAL_LCD_WHITE);
   8936a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   8936e:	4b99      	ldr	r3, [pc, #612]	; (895d4 <do_paint_window_client+0xd5c>)
   89370:	4798      	blx	r3
					mw_gl_vline(&draw_info, 1, 1, MW_DESKTOP_ICON_HEIGHT - 2);
   89372:	2201      	movs	r2, #1
   89374:	a80f      	add	r0, sp, #60	; 0x3c
   89376:	4611      	mov	r1, r2
   89378:	4e9a      	ldr	r6, [pc, #616]	; (895e4 <do_paint_window_client+0xd6c>)
   8937a:	2316      	movs	r3, #22
   8937c:	47b0      	blx	r6
					mw_gl_hline(&draw_info, 1, MW_DESKTOP_ICON_WIDTH - 2, 1);
   8937e:	4b96      	ldr	r3, [pc, #600]	; (895d8 <do_paint_window_client+0xd60>)
   89380:	4798      	blx	r3
   89382:	2301      	movs	r3, #1
   89384:	2800      	cmp	r0, #0
   89386:	bfb8      	it	lt
   89388:	3003      	addlt	r0, #3
   8938a:	1080      	asrs	r0, r0, #2
   8938c:	1e82      	subs	r2, r0, #2
   8938e:	4619      	mov	r1, r3
   89390:	b212      	sxth	r2, r2
   89392:	a80f      	add	r0, sp, #60	; 0x3c
   89394:	4d94      	ldr	r5, [pc, #592]	; (895e8 <do_paint_window_client+0xd70>)
   89396:	47a8      	blx	r5
					mw_gl_set_fg_colour(MW_HAL_LCD_GREY7);
   89398:	4894      	ldr	r0, [pc, #592]	; (895ec <do_paint_window_client+0xd74>)
   8939a:	4b8e      	ldr	r3, [pc, #568]	; (895d4 <do_paint_window_client+0xd5c>)
   8939c:	4798      	blx	r3
					mw_gl_vline(&draw_info, MW_DESKTOP_ICON_WIDTH - 2, 2, MW_DESKTOP_ICON_HEIGHT - 2);
   8939e:	4b8e      	ldr	r3, [pc, #568]	; (895d8 <do_paint_window_client+0xd60>)
   893a0:	4798      	blx	r3
   893a2:	2800      	cmp	r0, #0
   893a4:	bfb8      	it	lt
   893a6:	3003      	addlt	r0, #3
   893a8:	1080      	asrs	r0, r0, #2
   893aa:	1e81      	subs	r1, r0, #2
   893ac:	b209      	sxth	r1, r1
   893ae:	2202      	movs	r2, #2
   893b0:	a80f      	add	r0, sp, #60	; 0x3c
   893b2:	2316      	movs	r3, #22
   893b4:	47b0      	blx	r6
					mw_gl_hline(&draw_info, 2, MW_DESKTOP_ICON_WIDTH - 2, MW_DESKTOP_ICON_HEIGHT - 2);
   893b6:	4b88      	ldr	r3, [pc, #544]	; (895d8 <do_paint_window_client+0xd60>)
   893b8:	4798      	blx	r3
   893ba:	2800      	cmp	r0, #0
   893bc:	bfb8      	it	lt
   893be:	3003      	addlt	r0, #3
   893c0:	1080      	asrs	r0, r0, #2
   893c2:	1e82      	subs	r2, r0, #2
   893c4:	b212      	sxth	r2, r2
   893c6:	a80f      	add	r0, sp, #60	; 0x3c
   893c8:	2316      	movs	r3, #22
   893ca:	2102      	movs	r1, #2
   893cc:	47a8      	blx	r5
   893ce:	e594      	b.n	88efa <do_paint_window_client+0x682>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   893d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   893d4:	0699      	lsls	r1, r3, #26
   893d6:	f57f ad40 	bpl.w	88e5a <do_paint_window_client+0x5e2>
   893da:	2500      	movs	r5, #0
   893dc:	2001      	movs	r0, #1
   893de:	e57f      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   893e0:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   893e4:	069a      	lsls	r2, r3, #26
   893e6:	f57f ad3d 	bpl.w	88e64 <do_paint_window_client+0x5ec>
   893ea:	2501      	movs	r5, #1
   893ec:	4628      	mov	r0, r5
   893ee:	e577      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   893f0:	f8d9 308c 	ldr.w	r3, [r9, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   893f4:	069b      	lsls	r3, r3, #26
   893f6:	f57f ad3a 	bpl.w	88e6e <do_paint_window_client+0x5f6>
   893fa:	2502      	movs	r5, #2
   893fc:	2001      	movs	r0, #1
   893fe:	e56f      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89400:	f8d9 30cc 	ldr.w	r3, [r9, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   89404:	069f      	lsls	r7, r3, #26
   89406:	f57f ad37 	bpl.w	88e78 <do_paint_window_client+0x600>
   8940a:	2503      	movs	r5, #3
   8940c:	2001      	movs	r0, #1
   8940e:	e567      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89410:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   89414:	069e      	lsls	r6, r3, #26
   89416:	f57f ad34 	bpl.w	88e82 <do_paint_window_client+0x60a>
   8941a:	2504      	movs	r5, #4
   8941c:	2001      	movs	r0, #1
   8941e:	e55f      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89420:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   89424:	0699      	lsls	r1, r3, #26
   89426:	f57f ad31 	bpl.w	88e8c <do_paint_window_client+0x614>
   8942a:	2505      	movs	r5, #5
   8942c:	2001      	movs	r0, #1
   8942e:	e557      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89430:	f8d9 318c 	ldr.w	r3, [r9, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   89434:	069a      	lsls	r2, r3, #26
   89436:	f57f ad2e 	bpl.w	88e96 <do_paint_window_client+0x61e>
   8943a:	2506      	movs	r5, #6
   8943c:	2001      	movs	r0, #1
   8943e:	e54f      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89440:	f8d9 31cc 	ldr.w	r3, [r9, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   89444:	069b      	lsls	r3, r3, #26
   89446:	f57f ad2b 	bpl.w	88ea0 <do_paint_window_client+0x628>
   8944a:	2507      	movs	r5, #7
   8944c:	2001      	movs	r0, #1
   8944e:	e547      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89450:	f8d9 324c 	ldr.w	r3, [r9, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   89454:	069e      	lsls	r6, r3, #26
   89456:	f57f ad2d 	bpl.w	88eb4 <do_paint_window_client+0x63c>
   8945a:	2509      	movs	r5, #9
   8945c:	2001      	movs	r0, #1
   8945e:	e53f      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89460:	f8d9 320c 	ldr.w	r3, [r9, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   89464:	069f      	lsls	r7, r3, #26
   89466:	f57f ad20 	bpl.w	88eaa <do_paint_window_client+0x632>
   8946a:	2508      	movs	r5, #8
   8946c:	2001      	movs	r0, #1
   8946e:	e537      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89470:	f8d9 328c 	ldr.w	r3, [r9, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   89474:	0699      	lsls	r1, r3, #26
   89476:	f57f ad22 	bpl.w	88ebe <do_paint_window_client+0x646>
   8947a:	250a      	movs	r5, #10
   8947c:	2001      	movs	r0, #1
   8947e:	e52f      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89480:	f8d9 32cc 	ldr.w	r3, [r9, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   89484:	069a      	lsls	r2, r3, #26
   89486:	f57f ad1f 	bpl.w	88ec8 <do_paint_window_client+0x650>
   8948a:	250b      	movs	r5, #11
   8948c:	2001      	movs	r0, #1
   8948e:	e527      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89490:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   89494:	069b      	lsls	r3, r3, #26
   89496:	f57f ad1c 	bpl.w	88ed2 <do_paint_window_client+0x65a>
   8949a:	250c      	movs	r5, #12
   8949c:	2001      	movs	r0, #1
   8949e:	e51f      	b.n	88ee0 <do_paint_window_client+0x668>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   894a0:	f8d9 334c 	ldr.w	r3, [r9, #844]	; 0x34c
   894a4:	f003 0320 	and.w	r3, r3, #32
		if (mw_all_windows[i].window_handle == window_handle &&
   894a8:	2b00      	cmp	r3, #0
   894aa:	bf0b      	itete	eq
   894ac:	250e      	moveq	r5, #14
   894ae:	250d      	movne	r5, #13
   894b0:	2000      	moveq	r0, #0
   894b2:	2001      	movne	r0, #1
   894b4:	e514      	b.n	88ee0 <do_paint_window_client+0x668>
   894b6:	f8bd 0020 	ldrh.w	r0, [sp, #32]
		for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   894ba:	f10b 0b01 	add.w	fp, fp, #1
   894be:	fa1f fb8b 	uxth.w	fp, fp
   894c2:	1e43      	subs	r3, r0, #1
   894c4:	459b      	cmp	fp, r3
   894c6:	f8cd b00c 	str.w	fp, [sp, #12]
   894ca:	f4ff acb2 	bcc.w	88e32 <do_paint_window_client+0x5ba>
   894ce:	9b05      	ldr	r3, [sp, #20]
   894d0:	9a04      	ldr	r2, [sp, #16]
   894d2:	3301      	adds	r3, #1
   894d4:	3201      	adds	r2, #1
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   894d6:	2b0d      	cmp	r3, #13
   894d8:	9305      	str	r3, [sp, #20]
   894da:	9204      	str	r2, [sp, #16]
   894dc:	f47f ac4a 	bne.w	88d74 <do_paint_window_client+0x4fc>
   894e0:	f7ff ba2d 	b.w	8893e <do_paint_window_client+0xc6>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   894e4:	4642      	mov	r2, r8
   894e6:	4631      	mov	r1, r6
   894e8:	4841      	ldr	r0, [pc, #260]	; (895f0 <do_paint_window_client+0xd78>)
   894ea:	4b42      	ldr	r3, [pc, #264]	; (895f4 <do_paint_window_client+0xd7c>)
   894ec:	4798      	blx	r3
   894ee:	2800      	cmp	r0, #0
   894f0:	f43f ad1f 	beq.w	88f32 <do_paint_window_client+0x6ba>
			if (mw_all_windows[i].z_order > highest_z_order)
   894f4:	f899 706c 	ldrb.w	r7, [r9, #108]	; 0x6c
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   894f8:	1c3d      	adds	r5, r7, #0
   894fa:	bf18      	it	ne
   894fc:	2501      	movne	r5, #1
   894fe:	e51a      	b.n	88f36 <do_paint_window_client+0x6be>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   89500:	4642      	mov	r2, r8
   89502:	4631      	mov	r1, r6
   89504:	483c      	ldr	r0, [pc, #240]	; (895f8 <do_paint_window_client+0xd80>)
   89506:	4b3b      	ldr	r3, [pc, #236]	; (895f4 <do_paint_window_client+0xd7c>)
   89508:	4798      	blx	r3
   8950a:	2800      	cmp	r0, #0
   8950c:	f43f ad64 	beq.w	88fd8 <do_paint_window_client+0x760>
			if (mw_all_windows[i].z_order > highest_z_order)
   89510:	f899 22ac 	ldrb.w	r2, [r9, #684]	; 0x2ac
   89514:	4297      	cmp	r7, r2
   89516:	bf3c      	itt	cc
   89518:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8951a:	250a      	movcc	r5, #10
   8951c:	e55c      	b.n	88fd8 <do_paint_window_client+0x760>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8951e:	4642      	mov	r2, r8
   89520:	4631      	mov	r1, r6
   89522:	4836      	ldr	r0, [pc, #216]	; (895fc <do_paint_window_client+0xd84>)
   89524:	4b33      	ldr	r3, [pc, #204]	; (895f4 <do_paint_window_client+0xd7c>)
   89526:	4798      	blx	r3
   89528:	2800      	cmp	r0, #0
   8952a:	f43f ad5e 	beq.w	88fea <do_paint_window_client+0x772>
			if (mw_all_windows[i].z_order > highest_z_order)
   8952e:	f899 22ec 	ldrb.w	r2, [r9, #748]	; 0x2ec
   89532:	4297      	cmp	r7, r2
   89534:	bf3c      	itt	cc
   89536:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   89538:	250b      	movcc	r5, #11
   8953a:	e556      	b.n	88fea <do_paint_window_client+0x772>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8953c:	4642      	mov	r2, r8
   8953e:	4631      	mov	r1, r6
   89540:	482f      	ldr	r0, [pc, #188]	; (89600 <do_paint_window_client+0xd88>)
   89542:	4b2c      	ldr	r3, [pc, #176]	; (895f4 <do_paint_window_client+0xd7c>)
   89544:	4798      	blx	r3
   89546:	2800      	cmp	r0, #0
   89548:	f43f ad58 	beq.w	88ffc <do_paint_window_client+0x784>
			if (mw_all_windows[i].z_order > highest_z_order)
   8954c:	f899 232c 	ldrb.w	r2, [r9, #812]	; 0x32c
   89550:	4297      	cmp	r7, r2
   89552:	bf3c      	itt	cc
   89554:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   89556:	250c      	movcc	r5, #12
   89558:	e550      	b.n	88ffc <do_paint_window_client+0x784>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8955a:	4642      	mov	r2, r8
   8955c:	4631      	mov	r1, r6
   8955e:	4829      	ldr	r0, [pc, #164]	; (89604 <do_paint_window_client+0xd8c>)
   89560:	4b24      	ldr	r3, [pc, #144]	; (895f4 <do_paint_window_client+0xd7c>)
   89562:	4798      	blx	r3
   89564:	2800      	cmp	r0, #0
   89566:	f43f ad52 	beq.w	8900e <do_paint_window_client+0x796>
			if (mw_all_windows[i].z_order > highest_z_order)
   8956a:	f899 336c 	ldrb.w	r3, [r9, #876]	; 0x36c
   8956e:	42bb      	cmp	r3, r7
   89570:	bf88      	it	hi
   89572:	250d      	movhi	r5, #13
   89574:	e54b      	b.n	8900e <do_paint_window_client+0x796>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   89576:	4642      	mov	r2, r8
   89578:	4631      	mov	r1, r6
   8957a:	4823      	ldr	r0, [pc, #140]	; (89608 <do_paint_window_client+0xd90>)
   8957c:	4b1d      	ldr	r3, [pc, #116]	; (895f4 <do_paint_window_client+0xd7c>)
   8957e:	4798      	blx	r3
   89580:	2800      	cmp	r0, #0
   89582:	f43f ace1 	beq.w	88f48 <do_paint_window_client+0x6d0>
			if (mw_all_windows[i].z_order > highest_z_order)
   89586:	f899 20ac 	ldrb.w	r2, [r9, #172]	; 0xac
   8958a:	4297      	cmp	r7, r2
   8958c:	bf3c      	itt	cc
   8958e:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   89590:	2502      	movcc	r5, #2
   89592:	e4d9      	b.n	88f48 <do_paint_window_client+0x6d0>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   89594:	4642      	mov	r2, r8
   89596:	4631      	mov	r1, r6
   89598:	481c      	ldr	r0, [pc, #112]	; (8960c <do_paint_window_client+0xd94>)
   8959a:	4b16      	ldr	r3, [pc, #88]	; (895f4 <do_paint_window_client+0xd7c>)
   8959c:	4798      	blx	r3
   8959e:	2800      	cmp	r0, #0
   895a0:	f43f acdb 	beq.w	88f5a <do_paint_window_client+0x6e2>
			if (mw_all_windows[i].z_order > highest_z_order)
   895a4:	f899 20ec 	ldrb.w	r2, [r9, #236]	; 0xec
   895a8:	4297      	cmp	r7, r2
   895aa:	bf3c      	itt	cc
   895ac:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   895ae:	2503      	movcc	r5, #3
   895b0:	e4d3      	b.n	88f5a <do_paint_window_client+0x6e2>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   895b2:	4642      	mov	r2, r8
   895b4:	4631      	mov	r1, r6
   895b6:	4816      	ldr	r0, [pc, #88]	; (89610 <do_paint_window_client+0xd98>)
   895b8:	4b0e      	ldr	r3, [pc, #56]	; (895f4 <do_paint_window_client+0xd7c>)
   895ba:	4798      	blx	r3
   895bc:	2800      	cmp	r0, #0
   895be:	f43f acd5 	beq.w	88f6c <do_paint_window_client+0x6f4>
			if (mw_all_windows[i].z_order > highest_z_order)
   895c2:	f899 212c 	ldrb.w	r2, [r9, #300]	; 0x12c
   895c6:	4297      	cmp	r7, r2
   895c8:	bf3c      	itt	cc
   895ca:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   895cc:	2504      	movcc	r5, #4
   895ce:	e4cd      	b.n	88f6c <do_paint_window_client+0x6f4>
   895d0:	20071f78 	.word	0x20071f78
   895d4:	000846b1 	.word	0x000846b1
   895d8:	00086e2d 	.word	0x00086e2d
   895dc:	000850e1 	.word	0x000850e1
   895e0:	00085f1d 	.word	0x00085f1d
   895e4:	00084f39 	.word	0x00084f39
   895e8:	00084dd1 	.word	0x00084dd1
   895ec:	00a6a6a6 	.word	0x00a6a6a6
   895f0:	20071c30 	.word	0x20071c30
   895f4:	00096e7d 	.word	0x00096e7d
   895f8:	20071e70 	.word	0x20071e70
   895fc:	20071eb0 	.word	0x20071eb0
   89600:	20071ef0 	.word	0x20071ef0
   89604:	20071f30 	.word	0x20071f30
   89608:	20071c70 	.word	0x20071c70
   8960c:	20071cb0 	.word	0x20071cb0
   89610:	20071cf0 	.word	0x20071cf0
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   89614:	4642      	mov	r2, r8
   89616:	4631      	mov	r1, r6
   89618:	4824      	ldr	r0, [pc, #144]	; (896ac <do_paint_window_client+0xe34>)
   8961a:	4b25      	ldr	r3, [pc, #148]	; (896b0 <do_paint_window_client+0xe38>)
   8961c:	4798      	blx	r3
   8961e:	2800      	cmp	r0, #0
   89620:	f43f acad 	beq.w	88f7e <do_paint_window_client+0x706>
			if (mw_all_windows[i].z_order > highest_z_order)
   89624:	f899 216c 	ldrb.w	r2, [r9, #364]	; 0x16c
   89628:	4297      	cmp	r7, r2
   8962a:	bf3c      	itt	cc
   8962c:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8962e:	2505      	movcc	r5, #5
   89630:	e4a5      	b.n	88f7e <do_paint_window_client+0x706>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   89632:	4642      	mov	r2, r8
   89634:	4631      	mov	r1, r6
   89636:	481f      	ldr	r0, [pc, #124]	; (896b4 <do_paint_window_client+0xe3c>)
   89638:	4b1d      	ldr	r3, [pc, #116]	; (896b0 <do_paint_window_client+0xe38>)
   8963a:	4798      	blx	r3
   8963c:	2800      	cmp	r0, #0
   8963e:	f43f aca7 	beq.w	88f90 <do_paint_window_client+0x718>
			if (mw_all_windows[i].z_order > highest_z_order)
   89642:	f899 21ac 	ldrb.w	r2, [r9, #428]	; 0x1ac
   89646:	4297      	cmp	r7, r2
   89648:	bf3c      	itt	cc
   8964a:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8964c:	2506      	movcc	r5, #6
   8964e:	e49f      	b.n	88f90 <do_paint_window_client+0x718>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   89650:	4642      	mov	r2, r8
   89652:	4631      	mov	r1, r6
   89654:	4818      	ldr	r0, [pc, #96]	; (896b8 <do_paint_window_client+0xe40>)
   89656:	4b16      	ldr	r3, [pc, #88]	; (896b0 <do_paint_window_client+0xe38>)
   89658:	4798      	blx	r3
   8965a:	2800      	cmp	r0, #0
   8965c:	f43f aca1 	beq.w	88fa2 <do_paint_window_client+0x72a>
			if (mw_all_windows[i].z_order > highest_z_order)
   89660:	f899 21ec 	ldrb.w	r2, [r9, #492]	; 0x1ec
   89664:	4297      	cmp	r7, r2
   89666:	bf3c      	itt	cc
   89668:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8966a:	2507      	movcc	r5, #7
   8966c:	e499      	b.n	88fa2 <do_paint_window_client+0x72a>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8966e:	4642      	mov	r2, r8
   89670:	4631      	mov	r1, r6
   89672:	4812      	ldr	r0, [pc, #72]	; (896bc <do_paint_window_client+0xe44>)
   89674:	4b0e      	ldr	r3, [pc, #56]	; (896b0 <do_paint_window_client+0xe38>)
   89676:	4798      	blx	r3
   89678:	2800      	cmp	r0, #0
   8967a:	f43f ac9b 	beq.w	88fb4 <do_paint_window_client+0x73c>
			if (mw_all_windows[i].z_order > highest_z_order)
   8967e:	f899 222c 	ldrb.w	r2, [r9, #556]	; 0x22c
   89682:	4297      	cmp	r7, r2
   89684:	bf3c      	itt	cc
   89686:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   89688:	2508      	movcc	r5, #8
   8968a:	e493      	b.n	88fb4 <do_paint_window_client+0x73c>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8968c:	4642      	mov	r2, r8
   8968e:	4631      	mov	r1, r6
   89690:	480b      	ldr	r0, [pc, #44]	; (896c0 <do_paint_window_client+0xe48>)
   89692:	4b07      	ldr	r3, [pc, #28]	; (896b0 <do_paint_window_client+0xe38>)
   89694:	4798      	blx	r3
   89696:	2800      	cmp	r0, #0
   89698:	f43f ac95 	beq.w	88fc6 <do_paint_window_client+0x74e>
			if (mw_all_windows[i].z_order > highest_z_order)
   8969c:	f899 226c 	ldrb.w	r2, [r9, #620]	; 0x26c
   896a0:	4297      	cmp	r7, r2
   896a2:	bf3c      	itt	cc
   896a4:	4617      	movcc	r7, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   896a6:	2509      	movcc	r5, #9
   896a8:	e48d      	b.n	88fc6 <do_paint_window_client+0x74e>
   896aa:	bf00      	nop
   896ac:	20071d30 	.word	0x20071d30
   896b0:	00096e7d 	.word	0x00096e7d
   896b4:	20071d70 	.word	0x20071d70
   896b8:	20071db0 	.word	0x20071db0
   896bc:	20071df0 	.word	0x20071df0
   896c0:	20071e30 	.word	0x20071e30

000896c4 <mw_post_message.constprop.6>:
			}
		}
	}
}

void mw_post_message(mw_message_id_t message_id,
   896c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   896c8:	4680      	mov	r8, r0
   896ca:	b087      	sub	sp, #28
   896cc:	4617      	mov	r7, r2
	if (window_handle == MW_INVALID_HANDLE)
   896ce:	460e      	mov	r6, r1
   896d0:	4c18      	ldr	r4, [pc, #96]	; (89734 <mw_post_message.constprop.6+0x70>)
   896d2:	b171      	cbz	r1, 896f2 <mw_post_message.constprop.6+0x2e>
   896d4:	4622      	mov	r2, r4
   896d6:	2300      	movs	r3, #0
		if (mw_all_windows[i].window_handle == window_handle &&
   896d8:	6951      	ldr	r1, [r2, #20]
   896da:	b2dd      	uxtb	r5, r3
   896dc:	428e      	cmp	r6, r1
   896de:	f103 0301 	add.w	r3, r3, #1
   896e2:	d102      	bne.n	896ea <mw_post_message.constprop.6+0x26>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   896e4:	68d1      	ldr	r1, [r2, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   896e6:	0689      	lsls	r1, r1, #26
   896e8:	d404      	bmi.n	896f4 <mw_post_message.constprop.6+0x30>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   896ea:	2b0e      	cmp	r3, #14
   896ec:	f102 0240 	add.w	r2, r2, #64	; 0x40
   896f0:	d1f2      	bne.n	896d8 <mw_post_message.constprop.6+0x14>
		return (MW_MAX_WINDOW_COUNT);
   896f2:	250e      	movs	r5, #14
	
	/* check recipient handle for type makes sense */
	if (recipient_type == MW_WINDOW_MESSAGE)
	{
		recipient_id = get_window_id_for_handle(recipient_handle);
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   896f4:	2d0d      	cmp	r5, #13
   896f6:	4b10      	ldr	r3, [pc, #64]	; (89738 <mw_post_message.constprop.6+0x74>)
   896f8:	f241 5262 	movw	r2, #5474	; 0x1562
   896fc:	bf8c      	ite	hi
   896fe:	2000      	movhi	r0, #0
   89700:	2001      	movls	r0, #1
   89702:	490e      	ldr	r1, [pc, #56]	; (8973c <mw_post_message.constprop.6+0x78>)
   89704:	f8df 903c 	ldr.w	r9, [pc, #60]	; 89744 <mw_post_message.constprop.6+0x80>
   89708:	47c8      	blx	r9
	}

	/* fill in the message fields from supplied parameters */
	new_message.message_id = message_id;
	new_message.message_data = message_data;
	new_message.message_recipient_type = recipient_type;
   8970a:	2300      	movs	r3, #0
	new_message.sender_handle = sender_handle;
	new_message.message_pointer = message_pointer;

	/* do not send messages to unused windows */
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8970c:	eb04 1485 	add.w	r4, r4, r5, lsl #6
   89710:	68e2      	ldr	r2, [r4, #12]
	new_message.message_recipient_type = recipient_type;
   89712:	f88d 300d 	strb.w	r3, [sp, #13]
	new_message.sender_handle = sender_handle;
   89716:	9301      	str	r3, [sp, #4]
	new_message.message_pointer = message_pointer;
   89718:	9305      	str	r3, [sp, #20]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8971a:	0693      	lsls	r3, r2, #26
	new_message.message_id = message_id;
   8971c:	f88d 800c 	strb.w	r8, [sp, #12]
	new_message.message_data = message_data;
   89720:	9704      	str	r7, [sp, #16]
	new_message.recipient_handle = recipient_handle;
   89722:	9602      	str	r6, [sp, #8]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   89724:	d502      	bpl.n	8972c <mw_post_message.constprop.6+0x68>
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
		new_message.message_recipient_type == MW_SYSTEM_MESSAGE)
	{
		/* add this message to the queue */
		(void)mw_message_queue_insert(&new_message);
   89726:	a801      	add	r0, sp, #4
   89728:	4b05      	ldr	r3, [pc, #20]	; (89740 <mw_post_message.constprop.6+0x7c>)
   8972a:	4798      	blx	r3
	}
}
   8972c:	b007      	add	sp, #28
   8972e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89732:	bf00      	nop
   89734:	20071bd8 	.word	0x20071bd8
   89738:	000ab764 	.word	0x000ab764
   8973c:	000ab710 	.word	0x000ab710
   89740:	00095bc1 	.word	0x00095bc1
   89744:	00095add 	.word	0x00095add

00089748 <draw_min_restore_window_effect>:
{
   89748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8974c:	b083      	sub	sp, #12
	if (window_handle == MW_INVALID_HANDLE)
   8974e:	2800      	cmp	r0, #0
   89750:	d042      	beq.n	897d8 <draw_min_restore_window_effect+0x90>
		if (mw_all_windows[i].window_handle == window_handle &&
   89752:	4cb0      	ldr	r4, [pc, #704]	; (89a14 <draw_min_restore_window_effect+0x2cc>)
   89754:	6963      	ldr	r3, [r4, #20]
   89756:	4298      	cmp	r0, r3
   89758:	d049      	beq.n	897ee <draw_min_restore_window_effect+0xa6>
   8975a:	6d62      	ldr	r2, [r4, #84]	; 0x54
   8975c:	4290      	cmp	r0, r2
   8975e:	f000 80fc 	beq.w	8995a <draw_min_restore_window_effect+0x212>
   89762:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   89766:	4290      	cmp	r0, r2
   89768:	f000 8106 	beq.w	89978 <draw_min_restore_window_effect+0x230>
   8976c:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
   89770:	4290      	cmp	r0, r2
   89772:	f000 8108 	beq.w	89986 <draw_min_restore_window_effect+0x23e>
   89776:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   8977a:	4290      	cmp	r0, r2
   8977c:	f000 810a 	beq.w	89994 <draw_min_restore_window_effect+0x24c>
   89780:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   89784:	4290      	cmp	r0, r2
   89786:	f000 810c 	beq.w	899a2 <draw_min_restore_window_effect+0x25a>
   8978a:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
   8978e:	4290      	cmp	r0, r2
   89790:	f000 810e 	beq.w	899b0 <draw_min_restore_window_effect+0x268>
   89794:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   89798:	4290      	cmp	r0, r2
   8979a:	f000 8110 	beq.w	899be <draw_min_restore_window_effect+0x276>
   8979e:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
   897a2:	4290      	cmp	r0, r2
   897a4:	f000 8112 	beq.w	899cc <draw_min_restore_window_effect+0x284>
   897a8:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
   897ac:	4290      	cmp	r0, r2
   897ae:	f000 8114 	beq.w	899da <draw_min_restore_window_effect+0x292>
   897b2:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
   897b6:	4290      	cmp	r0, r2
   897b8:	f000 8116 	beq.w	899e8 <draw_min_restore_window_effect+0x2a0>
   897bc:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
   897c0:	4290      	cmp	r0, r2
   897c2:	f000 8118 	beq.w	899f6 <draw_min_restore_window_effect+0x2ae>
   897c6:	f8d4 2314 	ldr.w	r2, [r4, #788]	; 0x314
   897ca:	4290      	cmp	r0, r2
   897cc:	f000 811a 	beq.w	89a04 <draw_min_restore_window_effect+0x2bc>
   897d0:	f8d4 2354 	ldr.w	r2, [r4, #852]	; 0x354
   897d4:	4290      	cmp	r0, r2
   897d6:	d013      	beq.n	89800 <draw_min_restore_window_effect+0xb8>
		MW_ASSERT((bool)false, "Bad window handle");
   897d8:	4c8f      	ldr	r4, [pc, #572]	; (89a18 <draw_min_restore_window_effect+0x2d0>)
   897da:	f44f 726d 	mov.w	r2, #948	; 0x3b4
   897de:	2000      	movs	r0, #0
   897e0:	46a4      	mov	ip, r4
   897e2:	4b8e      	ldr	r3, [pc, #568]	; (89a1c <draw_min_restore_window_effect+0x2d4>)
   897e4:	498e      	ldr	r1, [pc, #568]	; (89a20 <draw_min_restore_window_effect+0x2d8>)
}
   897e6:	b003      	add	sp, #12
   897e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		MW_ASSERT((bool)false, "Bad window handle");
   897ec:	4760      	bx	ip
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   897ee:	68e2      	ldr	r2, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   897f0:	0691      	lsls	r1, r2, #26
   897f2:	d5b2      	bpl.n	8975a <draw_min_restore_window_effect+0x12>
   897f4:	2600      	movs	r6, #0
   897f6:	4613      	mov	r3, r2
   897f8:	069d      	lsls	r5, r3, #26
   897fa:	d50a      	bpl.n	89812 <draw_min_restore_window_effect+0xca>
   897fc:	2300      	movs	r3, #0
   897fe:	e12d      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89800:	f8d4 234c 	ldr.w	r2, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   89804:	0696      	lsls	r6, r2, #26
   89806:	bf48      	it	mi
   89808:	260d      	movmi	r6, #13
   8980a:	d5e5      	bpl.n	897d8 <draw_min_restore_window_effect+0x90>
   8980c:	4298      	cmp	r0, r3
   8980e:	f000 81b7 	beq.w	89b80 <draw_min_restore_window_effect+0x438>
   89812:	6d63      	ldr	r3, [r4, #84]	; 0x54
   89814:	4298      	cmp	r0, r3
   89816:	f000 80a9 	beq.w	8996c <draw_min_restore_window_effect+0x224>
   8981a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   8981e:	4298      	cmp	r0, r3
   89820:	f000 8184 	beq.w	89b2c <draw_min_restore_window_effect+0x3e4>
   89824:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   89828:	4298      	cmp	r0, r3
   8982a:	f000 8178 	beq.w	89b1e <draw_min_restore_window_effect+0x3d6>
   8982e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   89832:	4298      	cmp	r0, r3
   89834:	f000 816c 	beq.w	89b10 <draw_min_restore_window_effect+0x3c8>
   89838:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   8983c:	4298      	cmp	r0, r3
   8983e:	f000 8198 	beq.w	89b72 <draw_min_restore_window_effect+0x42a>
   89842:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   89846:	4298      	cmp	r0, r3
   89848:	f000 817e 	beq.w	89b48 <draw_min_restore_window_effect+0x400>
   8984c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   89850:	4298      	cmp	r0, r3
   89852:	f000 8172 	beq.w	89b3a <draw_min_restore_window_effect+0x3f2>
   89856:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   8985a:	4298      	cmp	r0, r3
   8985c:	f000 8182 	beq.w	89b64 <draw_min_restore_window_effect+0x41c>
   89860:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   89864:	4298      	cmp	r0, r3
   89866:	f000 8176 	beq.w	89b56 <draw_min_restore_window_effect+0x40e>
   8986a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   8986e:	4298      	cmp	r0, r3
   89870:	f000 80ee 	beq.w	89a50 <draw_min_restore_window_effect+0x308>
   89874:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   89878:	4298      	cmp	r0, r3
   8987a:	f000 8134 	beq.w	89ae6 <draw_min_restore_window_effect+0x39e>
   8987e:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   89882:	4298      	cmp	r0, r3
   89884:	f000 8128 	beq.w	89ad8 <draw_min_restore_window_effect+0x390>
   89888:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   8988c:	4298      	cmp	r0, r3
   8988e:	f000 811c 	beq.w	89aca <draw_min_restore_window_effect+0x382>
		MW_ASSERT((bool)false, "Bad window handle");
   89892:	4b62      	ldr	r3, [pc, #392]	; (89a1c <draw_min_restore_window_effect+0x2d4>)
   89894:	f44f 723e 	mov.w	r2, #760	; 0x2f8
   89898:	4962      	ldr	r1, [pc, #392]	; (89a24 <draw_min_restore_window_effect+0x2dc>)
   8989a:	2000      	movs	r0, #0
   8989c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 89a18 <draw_min_restore_window_effect+0x2d0>
   898a0:	47c0      	blx	r8
   898a2:	2518      	movs	r5, #24
   898a4:	f04f 0900 	mov.w	r9, #0
	MW_ASSERT(x != (void*)0, "Null pointer argument");
   898a8:	4b5f      	ldr	r3, [pc, #380]	; (89a28 <draw_min_restore_window_effect+0x2e0>)
   898aa:	f44f 7255 	mov.w	r2, #852	; 0x354
   898ae:	495f      	ldr	r1, [pc, #380]	; (89a2c <draw_min_restore_window_effect+0x2e4>)
   898b0:	2001      	movs	r0, #1
   898b2:	47c0      	blx	r8
	*x = (int16_t)(((int16_t)icon_number % MW_DESKTOP_ICONS_PER_ROW) * MW_DESKTOP_ICON_WIDTH);
   898b4:	4f5e      	ldr	r7, [pc, #376]	; (89a30 <draw_min_restore_window_effect+0x2e8>)
	MW_ASSERT(y != (void*)0, "Null pointer argument");
   898b6:	f240 3255 	movw	r2, #853	; 0x355
   898ba:	495c      	ldr	r1, [pc, #368]	; (89a2c <draw_min_restore_window_effect+0x2e4>)
   898bc:	4b5a      	ldr	r3, [pc, #360]	; (89a28 <draw_min_restore_window_effect+0x2e0>)
   898be:	2001      	movs	r0, #1
   898c0:	47c0      	blx	r8
	*x = (int16_t)(((int16_t)icon_number % MW_DESKTOP_ICONS_PER_ROW) * MW_DESKTOP_ICON_WIDTH);
   898c2:	47b8      	blx	r7
   898c4:	2800      	cmp	r0, #0
   898c6:	bfb8      	it	lt
   898c8:	3003      	addlt	r0, #3
   898ca:	1080      	asrs	r0, r0, #2
   898cc:	fb00 f009 	mul.w	r0, r0, r9
	*y = (int16_t)(MW_ROOT_HEIGHT - ((1 + ((int16_t)icon_number / MW_DESKTOP_ICONS_PER_ROW)) * MW_DESKTOP_ICON_HEIGHT));
   898d0:	4b58      	ldr	r3, [pc, #352]	; (89a34 <draw_min_restore_window_effect+0x2ec>)
	*x = (int16_t)(((int16_t)icon_number % MW_DESKTOP_ICONS_PER_ROW) * MW_DESKTOP_ICON_WIDTH);
   898d2:	fa1f f880 	uxth.w	r8, r0
	*y = (int16_t)(MW_ROOT_HEIGHT - ((1 + ((int16_t)icon_number / MW_DESKTOP_ICONS_PER_ROW)) * MW_DESKTOP_ICON_HEIGHT));
   898d6:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_NOT_TRANSPARENT);
   898d8:	4b57      	ldr	r3, [pc, #348]	; (89a38 <draw_min_restore_window_effect+0x2f0>)
	*y = (int16_t)(MW_ROOT_HEIGHT - ((1 + ((int16_t)icon_number / MW_DESKTOP_ICONS_PER_ROW)) * MW_DESKTOP_ICON_HEIGHT));
   898da:	1b45      	subs	r5, r0, r5
	mw_gl_set_bg_transparency(MW_GL_BG_NOT_TRANSPARENT);
   898dc:	2001      	movs	r0, #1
   898de:	4798      	blx	r3
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   898e0:	2000      	movs	r0, #0
   898e2:	4b56      	ldr	r3, [pc, #344]	; (89a3c <draw_min_restore_window_effect+0x2f4>)
   898e4:	4798      	blx	r3
	mw_gl_line(&draw_info_root,
   898e6:	01b6      	lsls	r6, r6, #6
	mw_gl_set_bg_colour(MW_HAL_LCD_WHITE);
   898e8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   898ec:	4b54      	ldr	r3, [pc, #336]	; (89a40 <draw_min_restore_window_effect+0x2f8>)
   898ee:	4798      	blx	r3
	mw_gl_line(&draw_info_root,
   898f0:	eb04 0b06 	add.w	fp, r4, r6
	*y = (int16_t)(MW_ROOT_HEIGHT - ((1 + ((int16_t)icon_number / MW_DESKTOP_ICONS_PER_ROW)) * MW_DESKTOP_ICON_HEIGHT));
   898f4:	b22d      	sxth	r5, r5
	mw_gl_set_line(MW_GL_LARGE_DASH_LINE);
   898f6:	f64f 70f0 	movw	r0, #65520	; 0xfff0
   898fa:	4b52      	ldr	r3, [pc, #328]	; (89a44 <draw_min_restore_window_effect+0x2fc>)
   898fc:	4798      	blx	r3
	mw_gl_line(&draw_info_root,
   898fe:	f8df 914c 	ldr.w	r9, [pc, #332]	; 89a4c <draw_min_restore_window_effect+0x304>
   89902:	f9bb 201a 	ldrsh.w	r2, [fp, #26]
   89906:	f9bb 1018 	ldrsh.w	r1, [fp, #24]
   8990a:	fa0f f388 	sxth.w	r3, r8
   8990e:	9500      	str	r5, [sp, #0]
   89910:	484d      	ldr	r0, [pc, #308]	; (89a48 <draw_min_restore_window_effect+0x300>)
   89912:	47c8      	blx	r9
			mw_all_windows[window_id].window_rect.x + mw_all_windows[window_id].window_rect.width,
   89914:	f8bb 101c 	ldrh.w	r1, [fp, #28]
   89918:	f8bb a018 	ldrh.w	sl, [fp, #24]
	mw_gl_line(&draw_info_root,
   8991c:	f9bb b01a 	ldrsh.w	fp, [fp, #26]
			mw_all_windows[window_id].window_rect.x + mw_all_windows[window_id].window_rect.width,
   89920:	448a      	add	sl, r1
			x + MW_DESKTOP_ICON_WIDTH,
   89922:	47b8      	blx	r7
   89924:	2800      	cmp	r0, #0
   89926:	bfb8      	it	lt
   89928:	3003      	addlt	r0, #3
   8992a:	eb08 03a0 	add.w	r3, r8, r0, asr #2
	mw_gl_line(&draw_info_root,
   8992e:	fa0f fa8a 	sxth.w	sl, sl
	mw_gl_line(&draw_info_root,
   89932:	4434      	add	r4, r6
	mw_gl_line(&draw_info_root,
   89934:	465a      	mov	r2, fp
   89936:	4651      	mov	r1, sl
   89938:	b21b      	sxth	r3, r3
   8993a:	9500      	str	r5, [sp, #0]
   8993c:	4842      	ldr	r0, [pc, #264]	; (89a48 <draw_min_restore_window_effect+0x300>)
   8993e:	47c8      	blx	r9
	mw_gl_line(&draw_info_root,
   89940:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
			mw_all_windows[window_id].window_rect.x +  mw_all_windows[window_id].window_rect.width,
   89944:	8ba3      	ldrh	r3, [r4, #28]
	mw_gl_line(&draw_info_root,
   89946:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
			mw_all_windows[window_id].window_rect.x +  mw_all_windows[window_id].window_rect.width,
   8994a:	440b      	add	r3, r1
	mw_gl_line(&draw_info_root,
   8994c:	b21b      	sxth	r3, r3
   8994e:	9200      	str	r2, [sp, #0]
   89950:	483d      	ldr	r0, [pc, #244]	; (89a48 <draw_min_restore_window_effect+0x300>)
   89952:	47c8      	blx	r9
}
   89954:	b003      	add	sp, #12
   89956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8995a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8995c:	0692      	lsls	r2, r2, #26
   8995e:	f57f af00 	bpl.w	89762 <draw_min_restore_window_effect+0x1a>
   89962:	4298      	cmp	r0, r3
   89964:	f04f 0601 	mov.w	r6, #1
   89968:	f000 810a 	beq.w	89b80 <draw_min_restore_window_effect+0x438>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8996c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8996e:	0699      	lsls	r1, r3, #26
   89970:	f57f af53 	bpl.w	8981a <draw_min_restore_window_effect+0xd2>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89974:	2301      	movs	r3, #1
   89976:	e071      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89978:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8997c:	0697      	lsls	r7, r2, #26
   8997e:	f57f aef5 	bpl.w	8976c <draw_min_restore_window_effect+0x24>
   89982:	2602      	movs	r6, #2
   89984:	e742      	b.n	8980c <draw_min_restore_window_effect+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89986:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8998a:	0696      	lsls	r6, r2, #26
   8998c:	f57f aef3 	bpl.w	89776 <draw_min_restore_window_effect+0x2e>
   89990:	2603      	movs	r6, #3
   89992:	e73b      	b.n	8980c <draw_min_restore_window_effect+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89994:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   89998:	0695      	lsls	r5, r2, #26
   8999a:	f57f aef1 	bpl.w	89780 <draw_min_restore_window_effect+0x38>
   8999e:	2604      	movs	r6, #4
   899a0:	e734      	b.n	8980c <draw_min_restore_window_effect+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   899a2:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   899a6:	0691      	lsls	r1, r2, #26
   899a8:	f57f aeef 	bpl.w	8978a <draw_min_restore_window_effect+0x42>
   899ac:	2605      	movs	r6, #5
   899ae:	e72d      	b.n	8980c <draw_min_restore_window_effect+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   899b0:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   899b4:	0692      	lsls	r2, r2, #26
   899b6:	f57f aeed 	bpl.w	89794 <draw_min_restore_window_effect+0x4c>
   899ba:	2606      	movs	r6, #6
   899bc:	e726      	b.n	8980c <draw_min_restore_window_effect+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   899be:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   899c2:	0697      	lsls	r7, r2, #26
   899c4:	f57f aeeb 	bpl.w	8979e <draw_min_restore_window_effect+0x56>
   899c8:	2607      	movs	r6, #7
   899ca:	e71f      	b.n	8980c <draw_min_restore_window_effect+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   899cc:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   899d0:	0696      	lsls	r6, r2, #26
   899d2:	f57f aee9 	bpl.w	897a8 <draw_min_restore_window_effect+0x60>
   899d6:	2608      	movs	r6, #8
   899d8:	e718      	b.n	8980c <draw_min_restore_window_effect+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   899da:	f8d4 224c 	ldr.w	r2, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   899de:	0695      	lsls	r5, r2, #26
   899e0:	f57f aee7 	bpl.w	897b2 <draw_min_restore_window_effect+0x6a>
   899e4:	2609      	movs	r6, #9
   899e6:	e711      	b.n	8980c <draw_min_restore_window_effect+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   899e8:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   899ec:	0691      	lsls	r1, r2, #26
   899ee:	f57f aee5 	bpl.w	897bc <draw_min_restore_window_effect+0x74>
   899f2:	260a      	movs	r6, #10
   899f4:	e70a      	b.n	8980c <draw_min_restore_window_effect+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   899f6:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   899fa:	0692      	lsls	r2, r2, #26
   899fc:	f57f aee3 	bpl.w	897c6 <draw_min_restore_window_effect+0x7e>
   89a00:	260b      	movs	r6, #11
   89a02:	e703      	b.n	8980c <draw_min_restore_window_effect+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89a04:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   89a08:	0697      	lsls	r7, r2, #26
   89a0a:	f57f aee1 	bpl.w	897d0 <draw_min_restore_window_effect+0x88>
   89a0e:	260c      	movs	r6, #12
   89a10:	e6fc      	b.n	8980c <draw_min_restore_window_effect+0xc4>
   89a12:	bf00      	nop
   89a14:	20071bd8 	.word	0x20071bd8
   89a18:	00095add 	.word	0x00095add
   89a1c:	000ab764 	.word	0x000ab764
   89a20:	000ab2a8 	.word	0x000ab2a8
   89a24:	000ab22c 	.word	0x000ab22c
   89a28:	000a6618 	.word	0x000a6618
   89a2c:	000ab28c 	.word	0x000ab28c
   89a30:	00086e2d 	.word	0x00086e2d
   89a34:	00086e31 	.word	0x00086e31
   89a38:	00084709 	.word	0x00084709
   89a3c:	000846b1 	.word	0x000846b1
   89a40:	000846bd 	.word	0x000846bd
   89a44:	000846d5 	.word	0x000846d5
   89a48:	20071800 	.word	0x20071800
   89a4c:	000850a1 	.word	0x000850a1
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89a50:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   89a54:	069d      	lsls	r5, r3, #26
   89a56:	f57f af0d 	bpl.w	89874 <draw_min_restore_window_effect+0x12c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89a5a:	230a      	movs	r3, #10
		if (minimised_windows[i] == window_id)
   89a5c:	4a54      	ldr	r2, [pc, #336]	; (89bb0 <draw_min_restore_window_effect+0x468>)
   89a5e:	7851      	ldrb	r1, [r2, #1]
   89a60:	4299      	cmp	r1, r3
   89a62:	f000 809b 	beq.w	89b9c <draw_min_restore_window_effect+0x454>
   89a66:	7891      	ldrb	r1, [r2, #2]
   89a68:	4299      	cmp	r1, r3
   89a6a:	f000 8095 	beq.w	89b98 <draw_min_restore_window_effect+0x450>
   89a6e:	78d1      	ldrb	r1, [r2, #3]
   89a70:	4299      	cmp	r1, r3
   89a72:	f000 808f 	beq.w	89b94 <draw_min_restore_window_effect+0x44c>
   89a76:	7911      	ldrb	r1, [r2, #4]
   89a78:	4299      	cmp	r1, r3
   89a7a:	f000 8089 	beq.w	89b90 <draw_min_restore_window_effect+0x448>
   89a7e:	7951      	ldrb	r1, [r2, #5]
   89a80:	4299      	cmp	r1, r3
   89a82:	f000 8083 	beq.w	89b8c <draw_min_restore_window_effect+0x444>
   89a86:	7991      	ldrb	r1, [r2, #6]
   89a88:	4299      	cmp	r1, r3
   89a8a:	d07d      	beq.n	89b88 <draw_min_restore_window_effect+0x440>
   89a8c:	79d1      	ldrb	r1, [r2, #7]
   89a8e:	4299      	cmp	r1, r3
   89a90:	d078      	beq.n	89b84 <draw_min_restore_window_effect+0x43c>
   89a92:	7a11      	ldrb	r1, [r2, #8]
   89a94:	4299      	cmp	r1, r3
   89a96:	f000 8083 	beq.w	89ba0 <draw_min_restore_window_effect+0x458>
   89a9a:	7a51      	ldrb	r1, [r2, #9]
   89a9c:	4299      	cmp	r1, r3
   89a9e:	f000 8085 	beq.w	89bac <draw_min_restore_window_effect+0x464>
   89aa2:	7a91      	ldrb	r1, [r2, #10]
   89aa4:	4299      	cmp	r1, r3
   89aa6:	d07f      	beq.n	89ba8 <draw_min_restore_window_effect+0x460>
   89aa8:	7ad1      	ldrb	r1, [r2, #11]
   89aaa:	4299      	cmp	r1, r3
   89aac:	d07a      	beq.n	89ba4 <draw_min_restore_window_effect+0x45c>
   89aae:	7b11      	ldrb	r1, [r2, #12]
   89ab0:	4299      	cmp	r1, r3
   89ab2:	d01f      	beq.n	89af4 <draw_min_restore_window_effect+0x3ac>
   89ab4:	7b52      	ldrb	r2, [r2, #13]
   89ab6:	429a      	cmp	r2, r3
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   89ab8:	bf08      	it	eq
   89aba:	200d      	moveq	r0, #13
		if (minimised_windows[i] == window_id)
   89abc:	d01b      	beq.n	89af6 <draw_min_restore_window_effect+0x3ae>
   89abe:	2518      	movs	r5, #24
   89ac0:	f04f 0900 	mov.w	r9, #0
   89ac4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 89bb4 <draw_min_restore_window_effect+0x46c>
   89ac8:	e6ee      	b.n	898a8 <draw_min_restore_window_effect+0x160>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89aca:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   89ace:	069b      	lsls	r3, r3, #26
   89ad0:	f57f aedf 	bpl.w	89892 <draw_min_restore_window_effect+0x14a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89ad4:	230d      	movs	r3, #13
   89ad6:	e7c1      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89ad8:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   89adc:	069a      	lsls	r2, r3, #26
   89ade:	f57f aed3 	bpl.w	89888 <draw_min_restore_window_effect+0x140>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89ae2:	230c      	movs	r3, #12
   89ae4:	e7ba      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89ae6:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   89aea:	0699      	lsls	r1, r3, #26
   89aec:	f57f aec7 	bpl.w	8987e <draw_min_restore_window_effect+0x136>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89af0:	230b      	movs	r3, #11
   89af2:	e7b3      	b.n	89a5c <draw_min_restore_window_effect+0x314>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   89af4:	200c      	movs	r0, #12
			return (i - 1U);
   89af6:	3801      	subs	r0, #1
   89af8:	b2c0      	uxtb	r0, r0
   89afa:	0883      	lsrs	r3, r0, #2
   89afc:	3301      	adds	r3, #1
   89afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   89b02:	00dd      	lsls	r5, r3, #3
   89b04:	b2ad      	uxth	r5, r5
   89b06:	f000 0903 	and.w	r9, r0, #3
   89b0a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 89bb4 <draw_min_restore_window_effect+0x46c>
   89b0e:	e6cb      	b.n	898a8 <draw_min_restore_window_effect+0x160>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89b10:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   89b14:	069f      	lsls	r7, r3, #26
   89b16:	f57f ae8f 	bpl.w	89838 <draw_min_restore_window_effect+0xf0>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89b1a:	2304      	movs	r3, #4
   89b1c:	e79e      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89b1e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   89b22:	069b      	lsls	r3, r3, #26
   89b24:	f57f ae83 	bpl.w	8982e <draw_min_restore_window_effect+0xe6>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89b28:	2303      	movs	r3, #3
   89b2a:	e797      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89b2c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   89b30:	069a      	lsls	r2, r3, #26
   89b32:	f57f ae77 	bpl.w	89824 <draw_min_restore_window_effect+0xdc>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89b36:	2302      	movs	r3, #2
   89b38:	e790      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89b3a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   89b3e:	069a      	lsls	r2, r3, #26
   89b40:	f57f ae89 	bpl.w	89856 <draw_min_restore_window_effect+0x10e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89b44:	2307      	movs	r3, #7
   89b46:	e789      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89b48:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   89b4c:	0699      	lsls	r1, r3, #26
   89b4e:	f57f ae7d 	bpl.w	8984c <draw_min_restore_window_effect+0x104>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89b52:	2306      	movs	r3, #6
   89b54:	e782      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89b56:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   89b5a:	069f      	lsls	r7, r3, #26
   89b5c:	f57f ae85 	bpl.w	8986a <draw_min_restore_window_effect+0x122>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89b60:	2309      	movs	r3, #9
   89b62:	e77b      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89b64:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   89b68:	069b      	lsls	r3, r3, #26
   89b6a:	f57f ae79 	bpl.w	89860 <draw_min_restore_window_effect+0x118>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89b6e:	2308      	movs	r3, #8
   89b70:	e774      	b.n	89a5c <draw_min_restore_window_effect+0x314>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89b72:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   89b76:	069d      	lsls	r5, r3, #26
   89b78:	f57f ae63 	bpl.w	89842 <draw_min_restore_window_effect+0xfa>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   89b7c:	2305      	movs	r3, #5
   89b7e:	e76d      	b.n	89a5c <draw_min_restore_window_effect+0x314>
   89b80:	68e3      	ldr	r3, [r4, #12]
   89b82:	e639      	b.n	897f8 <draw_min_restore_window_effect+0xb0>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   89b84:	2007      	movs	r0, #7
   89b86:	e7b6      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
   89b88:	2006      	movs	r0, #6
   89b8a:	e7b4      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
   89b8c:	2005      	movs	r0, #5
   89b8e:	e7b2      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
   89b90:	2004      	movs	r0, #4
   89b92:	e7b0      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
   89b94:	2003      	movs	r0, #3
   89b96:	e7ae      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
   89b98:	2002      	movs	r0, #2
   89b9a:	e7ac      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
		if (minimised_windows[i] == window_id)
   89b9c:	2001      	movs	r0, #1
   89b9e:	e7aa      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   89ba0:	2008      	movs	r0, #8
   89ba2:	e7a8      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
   89ba4:	200b      	movs	r0, #11
   89ba6:	e7a6      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
   89ba8:	200a      	movs	r0, #10
   89baa:	e7a4      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
   89bac:	2009      	movs	r0, #9
   89bae:	e7a2      	b.n	89af6 <draw_min_restore_window_effect+0x3ae>
   89bb0:	20071848 	.word	0x20071848
   89bb4:	00095add 	.word	0x00095add

00089bb8 <do_paint_control2>:
	MW_ASSERT(invalid_rect != (void*)0, "Null pointer argument");
   89bb8:	1c0b      	adds	r3, r1, #0
   89bba:	bf18      	it	ne
   89bbc:	2301      	movne	r3, #1
{
   89bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   89bc2:	4605      	mov	r5, r0
   89bc4:	b085      	sub	sp, #20
	MW_ASSERT(invalid_rect != (void*)0, "Null pointer argument");
   89bc6:	460f      	mov	r7, r1
   89bc8:	4618      	mov	r0, r3
   89bca:	f640 3206 	movw	r2, #2822	; 0xb06
   89bce:	4b9a      	ldr	r3, [pc, #616]	; (89e38 <do_paint_control2+0x280>)
   89bd0:	499a      	ldr	r1, [pc, #616]	; (89e3c <do_paint_control2+0x284>)
   89bd2:	f8df 827c 	ldr.w	r8, [pc, #636]	; 89e50 <do_paint_control2+0x298>
   89bd6:	47c0      	blx	r8
	if (control_handle == MW_INVALID_HANDLE)
   89bd8:	b16d      	cbz	r5, 89bf6 <do_paint_control2+0x3e>
   89bda:	4e99      	ldr	r6, [pc, #612]	; (89e40 <do_paint_control2+0x288>)
   89bdc:	2200      	movs	r2, #0
   89bde:	4633      	mov	r3, r6
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   89be0:	8b99      	ldrh	r1, [r3, #28]
   89be2:	0749      	lsls	r1, r1, #29
   89be4:	d502      	bpl.n	89bec <do_paint_control2+0x34>
   89be6:	6999      	ldr	r1, [r3, #24]
   89be8:	428d      	cmp	r5, r1
   89bea:	d00d      	beq.n	89c08 <do_paint_control2+0x50>
   89bec:	3201      	adds	r2, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   89bee:	2a18      	cmp	r2, #24
   89bf0:	f103 0320 	add.w	r3, r3, #32
   89bf4:	d1f4      	bne.n	89be0 <do_paint_control2+0x28>
		MW_ASSERT((bool)false, "Bad control handle");
   89bf6:	4b93      	ldr	r3, [pc, #588]	; (89e44 <do_paint_control2+0x28c>)
   89bf8:	f640 320c 	movw	r2, #2828	; 0xb0c
   89bfc:	498f      	ldr	r1, [pc, #572]	; (89e3c <do_paint_control2+0x284>)
   89bfe:	2000      	movs	r0, #0
   89c00:	47c0      	blx	r8
}
   89c02:	b005      	add	sp, #20
   89c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	client_draw_info.clip_rect.x = invalid_rect->x - mw_all_controls[control_id].control_rect.x;
   89c08:	0154      	lsls	r4, r2, #5
   89c0a:	1932      	adds	r2, r6, r4
   89c0c:	8993      	ldrh	r3, [r2, #12]
   89c0e:	f8b7 e000 	ldrh.w	lr, [r7]
	client_draw_info.clip_rect.y = invalid_rect->y - mw_all_controls[control_id].control_rect.y;
   89c12:	89d1      	ldrh	r1, [r2, #14]
	client_draw_info.clip_rect.x = invalid_rect->x - mw_all_controls[control_id].control_rect.x;
   89c14:	ebae 0e03 	sub.w	lr, lr, r3
	client_draw_info.clip_rect.y = invalid_rect->y - mw_all_controls[control_id].control_rect.y;
   89c18:	887b      	ldrh	r3, [r7, #2]
	parent_window_id = get_window_id_for_handle(mw_all_controls[control_id].parent_handle);
   89c1a:	6950      	ldr	r0, [r2, #20]
	client_draw_info.clip_rect.y = invalid_rect->y - mw_all_controls[control_id].control_rect.y;
   89c1c:	1a5b      	subs	r3, r3, r1
	client_draw_info.clip_rect.x = invalid_rect->x - mw_all_controls[control_id].control_rect.x;
   89c1e:	1931      	adds	r1, r6, r4
   89c20:	68c9      	ldr	r1, [r1, #12]
	client_draw_info.clip_rect.width = invalid_rect->width;
   89c22:	687a      	ldr	r2, [r7, #4]
	client_draw_info.clip_rect.x = invalid_rect->x - mw_all_controls[control_id].control_rect.x;
   89c24:	f8ad e008 	strh.w	lr, [sp, #8]
	client_draw_info.clip_rect.y = invalid_rect->y - mw_all_controls[control_id].control_rect.y;
   89c28:	f8ad 300a 	strh.w	r3, [sp, #10]
	client_draw_info.clip_rect.width = invalid_rect->width;
   89c2c:	9203      	str	r2, [sp, #12]
	client_draw_info.origin_x = mw_all_controls[control_id].control_rect.x;
   89c2e:	9101      	str	r1, [sp, #4]
	if (window_handle == MW_INVALID_HANDLE)
   89c30:	2800      	cmp	r0, #0
   89c32:	d048      	beq.n	89cc6 <do_paint_control2+0x10e>
		if (mw_all_windows[i].window_handle == window_handle &&
   89c34:	4f84      	ldr	r7, [pc, #528]	; (89e48 <do_paint_control2+0x290>)
   89c36:	697b      	ldr	r3, [r7, #20]
   89c38:	4298      	cmp	r0, r3
   89c3a:	f000 808b 	beq.w	89d54 <do_paint_control2+0x19c>
   89c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   89c40:	4298      	cmp	r0, r3
   89c42:	f000 808f 	beq.w	89d64 <do_paint_control2+0x1ac>
   89c46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   89c4a:	4298      	cmp	r0, r3
   89c4c:	f000 8091 	beq.w	89d72 <do_paint_control2+0x1ba>
   89c50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   89c54:	4298      	cmp	r0, r3
   89c56:	f000 8094 	beq.w	89d82 <do_paint_control2+0x1ca>
   89c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   89c5e:	4298      	cmp	r0, r3
   89c60:	f000 8097 	beq.w	89d92 <do_paint_control2+0x1da>
   89c64:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   89c68:	4298      	cmp	r0, r3
   89c6a:	f000 809a 	beq.w	89da2 <do_paint_control2+0x1ea>
   89c6e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
   89c72:	4298      	cmp	r0, r3
   89c74:	f000 809d 	beq.w	89db2 <do_paint_control2+0x1fa>
   89c78:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
   89c7c:	4298      	cmp	r0, r3
   89c7e:	f000 80a0 	beq.w	89dc2 <do_paint_control2+0x20a>
   89c82:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
   89c86:	4298      	cmp	r0, r3
   89c88:	f000 80a3 	beq.w	89dd2 <do_paint_control2+0x21a>
   89c8c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
   89c90:	4298      	cmp	r0, r3
   89c92:	f000 80a6 	beq.w	89de2 <do_paint_control2+0x22a>
   89c96:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
   89c9a:	4298      	cmp	r0, r3
   89c9c:	f000 80a9 	beq.w	89df2 <do_paint_control2+0x23a>
   89ca0:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
   89ca4:	4298      	cmp	r0, r3
   89ca6:	f000 80ac 	beq.w	89e02 <do_paint_control2+0x24a>
   89caa:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
   89cae:	4298      	cmp	r0, r3
   89cb0:	f000 80ba 	beq.w	89e28 <do_paint_control2+0x270>
   89cb4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
   89cb8:	4298      	cmp	r0, r3
   89cba:	f000 80aa 	beq.w	89e12 <do_paint_control2+0x25a>
   89cbe:	f04f 090e 	mov.w	r9, #14
   89cc2:	2000      	movs	r0, #0
   89cc4:	e002      	b.n	89ccc <do_paint_control2+0x114>
	if (window_handle == MW_INVALID_HANDLE)
   89cc6:	f04f 090e 	mov.w	r9, #14
   89cca:	4f5f      	ldr	r7, [pc, #380]	; (89e48 <do_paint_control2+0x290>)
	MW_ASSERT(parent_window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   89ccc:	4b5f      	ldr	r3, [pc, #380]	; (89e4c <do_paint_control2+0x294>)
   89cce:	f640 3218 	movw	r2, #2840	; 0xb18
   89cd2:	495a      	ldr	r1, [pc, #360]	; (89e3c <do_paint_control2+0x284>)
   89cd4:	47c0      	blx	r8
	client_area_overspill = (client_draw_info.origin_x + client_draw_info.clip_rect.width +  + client_draw_info.clip_rect.x) -
   89cd6:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
			(mw_all_windows[parent_window_id].client_rect.x + mw_all_windows[parent_window_id].client_rect.width);
   89cda:	ea4f 1189 	mov.w	r1, r9, lsl #6
	client_area_overspill = (client_draw_info.origin_x + client_draw_info.clip_rect.width +  + client_draw_info.clip_rect.x) -
   89cde:	f8bd 3004 	ldrh.w	r3, [sp, #4]
			(mw_all_windows[parent_window_id].client_rect.x + mw_all_windows[parent_window_id].client_rect.width);
   89ce2:	187a      	adds	r2, r7, r1
	client_area_overspill = (client_draw_info.origin_x + client_draw_info.clip_rect.width +  + client_draw_info.clip_rect.x) -
   89ce4:	fa1f f08e 	uxth.w	r0, lr
   89ce8:	f8bd 8008 	ldrh.w	r8, [sp, #8]
   89cec:	f8b2 c020 	ldrh.w	ip, [r2, #32]
   89cf0:	4403      	add	r3, r0
   89cf2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   89cf4:	4443      	add	r3, r8
   89cf6:	eba3 030c 	sub.w	r3, r3, ip
   89cfa:	1a9b      	subs	r3, r3, r2
   89cfc:	b29b      	uxth	r3, r3
   89cfe:	b21a      	sxth	r2, r3
	if (client_area_overspill >= client_draw_info.clip_rect.width)
   89d00:	4596      	cmp	lr, r2
   89d02:	f77f af7e 	ble.w	89c02 <do_paint_control2+0x4a>
	if (client_area_overspill > 0)
   89d06:	2a00      	cmp	r2, #0
		client_draw_info.clip_rect.width -= client_area_overspill;
   89d08:	bfc8      	it	gt
   89d0a:	1ac3      	subgt	r3, r0, r3
	client_area_overspill = (client_draw_info.origin_y + client_draw_info.clip_rect.height + client_draw_info.clip_rect.y) -
   89d0c:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
		client_draw_info.clip_rect.width -= client_area_overspill;
   89d10:	bfc8      	it	gt
   89d12:	f8ad 300c 	strhgt.w	r3, [sp, #12]
	client_area_overspill = (client_draw_info.origin_y + client_draw_info.clip_rect.height + client_draw_info.clip_rect.y) -
   89d16:	f8bd 3006 	ldrh.w	r3, [sp, #6]
			(mw_all_windows[parent_window_id].client_rect.y + mw_all_windows[parent_window_id].client_rect.height);
   89d1a:	440f      	add	r7, r1
	client_area_overspill = (client_draw_info.origin_y + client_draw_info.clip_rect.height + client_draw_info.clip_rect.y) -
   89d1c:	b282      	uxth	r2, r0
   89d1e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   89d22:	4413      	add	r3, r2
   89d24:	f8b7 e022 	ldrh.w	lr, [r7, #34]	; 0x22
   89d28:	440b      	add	r3, r1
   89d2a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
   89d2c:	eba3 030e 	sub.w	r3, r3, lr
   89d30:	1a5b      	subs	r3, r3, r1
   89d32:	b29b      	uxth	r3, r3
   89d34:	b219      	sxth	r1, r3
	if (client_area_overspill >= client_draw_info.clip_rect.height)
   89d36:	4288      	cmp	r0, r1
   89d38:	f77f af63 	ble.w	89c02 <do_paint_control2+0x4a>
	if (client_area_overspill > 0)
   89d3c:	2900      	cmp	r1, #0
		client_draw_info.clip_rect.height -= client_area_overspill;
   89d3e:	bfc4      	itt	gt
   89d40:	1ad3      	subgt	r3, r2, r3
   89d42:	f8ad 300e 	strhgt.w	r3, [sp, #14]
	mw_all_controls[control_id].paint_func(control_handle, &client_draw_info);
   89d46:	4628      	mov	r0, r5
   89d48:	5933      	ldr	r3, [r6, r4]
   89d4a:	a901      	add	r1, sp, #4
   89d4c:	4798      	blx	r3
}
   89d4e:	b005      	add	sp, #20
   89d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89d54:	68fb      	ldr	r3, [r7, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   89d56:	069b      	lsls	r3, r3, #26
   89d58:	f57f af71 	bpl.w	89c3e <do_paint_control2+0x86>
   89d5c:	f04f 0900 	mov.w	r9, #0
   89d60:	2001      	movs	r0, #1
   89d62:	e7b3      	b.n	89ccc <do_paint_control2+0x114>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   89d66:	0699      	lsls	r1, r3, #26
   89d68:	f57f af6d 	bpl.w	89c46 <do_paint_control2+0x8e>
   89d6c:	f04f 0901 	mov.w	r9, #1
   89d70:	e7f6      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   89d76:	069a      	lsls	r2, r3, #26
   89d78:	f57f af6a 	bpl.w	89c50 <do_paint_control2+0x98>
   89d7c:	f04f 0902 	mov.w	r9, #2
   89d80:	e7ee      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   89d86:	069b      	lsls	r3, r3, #26
   89d88:	f57f af67 	bpl.w	89c5a <do_paint_control2+0xa2>
   89d8c:	f04f 0903 	mov.w	r9, #3
   89d90:	e7e6      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   89d96:	0699      	lsls	r1, r3, #26
   89d98:	f57f af64 	bpl.w	89c64 <do_paint_control2+0xac>
   89d9c:	f04f 0904 	mov.w	r9, #4
   89da0:	e7de      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89da2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   89da6:	069a      	lsls	r2, r3, #26
   89da8:	f57f af61 	bpl.w	89c6e <do_paint_control2+0xb6>
   89dac:	f04f 0905 	mov.w	r9, #5
   89db0:	e7d6      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89db2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   89db6:	069b      	lsls	r3, r3, #26
   89db8:	f57f af5e 	bpl.w	89c78 <do_paint_control2+0xc0>
   89dbc:	f04f 0906 	mov.w	r9, #6
   89dc0:	e7ce      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89dc2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   89dc6:	0699      	lsls	r1, r3, #26
   89dc8:	f57f af5b 	bpl.w	89c82 <do_paint_control2+0xca>
   89dcc:	f04f 0907 	mov.w	r9, #7
   89dd0:	e7c6      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89dd2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   89dd6:	069a      	lsls	r2, r3, #26
   89dd8:	f57f af58 	bpl.w	89c8c <do_paint_control2+0xd4>
   89ddc:	f04f 0908 	mov.w	r9, #8
   89de0:	e7be      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89de2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   89de6:	069b      	lsls	r3, r3, #26
   89de8:	f57f af55 	bpl.w	89c96 <do_paint_control2+0xde>
   89dec:	f04f 0909 	mov.w	r9, #9
   89df0:	e7b6      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89df2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   89df6:	0699      	lsls	r1, r3, #26
   89df8:	f57f af52 	bpl.w	89ca0 <do_paint_control2+0xe8>
   89dfc:	f04f 090a 	mov.w	r9, #10
   89e00:	e7ae      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89e02:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   89e06:	069a      	lsls	r2, r3, #26
   89e08:	f57f af4f 	bpl.w	89caa <do_paint_control2+0xf2>
   89e0c:	f04f 090b 	mov.w	r9, #11
   89e10:	e7a6      	b.n	89d60 <do_paint_control2+0x1a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89e12:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   89e16:	f013 0020 	ands.w	r0, r3, #32
   89e1a:	bf18      	it	ne
   89e1c:	f04f 090d 	movne.w	r9, #13
   89e20:	d19e      	bne.n	89d60 <do_paint_control2+0x1a8>
   89e22:	f04f 090e 	mov.w	r9, #14
   89e26:	e751      	b.n	89ccc <do_paint_control2+0x114>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89e28:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   89e2c:	069b      	lsls	r3, r3, #26
   89e2e:	f57f af41 	bpl.w	89cb4 <do_paint_control2+0xfc>
   89e32:	f04f 090c 	mov.w	r9, #12
   89e36:	e793      	b.n	89d60 <do_paint_control2+0x1a8>
   89e38:	000a6618 	.word	0x000a6618
   89e3c:	000ab440 	.word	0x000ab440
   89e40:	20071858 	.word	0x20071858
   89e44:	000ab734 	.word	0x000ab734
   89e48:	20071bd8 	.word	0x20071bd8
   89e4c:	000ab764 	.word	0x000ab764
   89e50:	00095add 	.word	0x00095add

00089e54 <do_paint_control>:
	if (control_handle == MW_INVALID_HANDLE)
   89e54:	2800      	cmp	r0, #0
   89e56:	d059      	beq.n	89f0c <do_paint_control+0xb8>
{
   89e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89e5c:	4d71      	ldr	r5, [pc, #452]	; (8a024 <do_paint_control+0x1d0>)
	if (control_handle == MW_INVALID_HANDLE)
   89e5e:	2200      	movs	r2, #0
   89e60:	462b      	mov	r3, r5
{
   89e62:	b08b      	sub	sp, #44	; 0x2c
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   89e64:	8b99      	ldrh	r1, [r3, #28]
   89e66:	074c      	lsls	r4, r1, #29
   89e68:	d502      	bpl.n	89e70 <do_paint_control+0x1c>
   89e6a:	699c      	ldr	r4, [r3, #24]
   89e6c:	42a0      	cmp	r0, r4
   89e6e:	d007      	beq.n	89e80 <do_paint_control+0x2c>
   89e70:	3201      	adds	r2, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   89e72:	2a18      	cmp	r2, #24
   89e74:	f103 0320 	add.w	r3, r3, #32
   89e78:	d1f4      	bne.n	89e64 <do_paint_control+0x10>
}
   89e7a:	b00b      	add	sp, #44	; 0x2c
   89e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent_window_id = get_window_id_for_handle(mw_all_controls[control_id].parent_handle);
   89e80:	0152      	lsls	r2, r2, #5
   89e82:	18ab      	adds	r3, r5, r2
   89e84:	695b      	ldr	r3, [r3, #20]
	if (window_handle == MW_INVALID_HANDLE)
   89e86:	2b00      	cmp	r3, #0
   89e88:	d0f7      	beq.n	89e7a <do_paint_control+0x26>
		if (mw_all_windows[i].window_handle == window_handle &&
   89e8a:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8a030 <do_paint_control+0x1dc>
   89e8e:	f8db 4014 	ldr.w	r4, [fp, #20]
   89e92:	42a3      	cmp	r3, r4
   89e94:	d049      	beq.n	89f2a <do_paint_control+0xd6>
   89e96:	f8db 4054 	ldr.w	r4, [fp, #84]	; 0x54
   89e9a:	42a3      	cmp	r3, r4
   89e9c:	d03e      	beq.n	89f1c <do_paint_control+0xc8>
   89e9e:	f8db 4094 	ldr.w	r4, [fp, #148]	; 0x94
   89ea2:	42a3      	cmp	r3, r4
   89ea4:	d033      	beq.n	89f0e <do_paint_control+0xba>
   89ea6:	f8db 40d4 	ldr.w	r4, [fp, #212]	; 0xd4
   89eaa:	42a3      	cmp	r3, r4
   89eac:	d044      	beq.n	89f38 <do_paint_control+0xe4>
   89eae:	f8db 4114 	ldr.w	r4, [fp, #276]	; 0x114
   89eb2:	42a3      	cmp	r3, r4
   89eb4:	d05c      	beq.n	89f70 <do_paint_control+0x11c>
   89eb6:	f8db 4154 	ldr.w	r4, [fp, #340]	; 0x154
   89eba:	42a3      	cmp	r3, r4
   89ebc:	d051      	beq.n	89f62 <do_paint_control+0x10e>
   89ebe:	f8db 4194 	ldr.w	r4, [fp, #404]	; 0x194
   89ec2:	42a3      	cmp	r3, r4
   89ec4:	d046      	beq.n	89f54 <do_paint_control+0x100>
   89ec6:	f8db 41d4 	ldr.w	r4, [fp, #468]	; 0x1d4
   89eca:	42a3      	cmp	r3, r4
   89ecc:	d03b      	beq.n	89f46 <do_paint_control+0xf2>
   89ece:	f8db 4214 	ldr.w	r4, [fp, #532]	; 0x214
   89ed2:	42a3      	cmp	r3, r4
   89ed4:	d06f      	beq.n	89fb6 <do_paint_control+0x162>
   89ed6:	f8db 4254 	ldr.w	r4, [fp, #596]	; 0x254
   89eda:	42a3      	cmp	r3, r4
   89edc:	d064      	beq.n	89fa8 <do_paint_control+0x154>
   89ede:	f8db 4294 	ldr.w	r4, [fp, #660]	; 0x294
   89ee2:	42a3      	cmp	r3, r4
   89ee4:	d059      	beq.n	89f9a <do_paint_control+0x146>
   89ee6:	f8db 42d4 	ldr.w	r4, [fp, #724]	; 0x2d4
   89eea:	42a3      	cmp	r3, r4
   89eec:	d04e      	beq.n	89f8c <do_paint_control+0x138>
   89eee:	f8db 4314 	ldr.w	r4, [fp, #788]	; 0x314
   89ef2:	42a3      	cmp	r3, r4
   89ef4:	d043      	beq.n	89f7e <do_paint_control+0x12a>
   89ef6:	f8db 4354 	ldr.w	r4, [fp, #852]	; 0x354
   89efa:	42a3      	cmp	r3, r4
   89efc:	d1bd      	bne.n	89e7a <do_paint_control+0x26>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89efe:	f8db 434c 	ldr.w	r4, [fp, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   89f02:	06a6      	lsls	r6, r4, #26
   89f04:	d5b9      	bpl.n	89e7a <do_paint_control+0x26>
   89f06:	230d      	movs	r3, #13
   89f08:	9304      	str	r3, [sp, #16]
   89f0a:	e05a      	b.n	89fc2 <do_paint_control+0x16e>
   89f0c:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f0e:	f8db 408c 	ldr.w	r4, [fp, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   89f12:	06a7      	lsls	r7, r4, #26
   89f14:	d5c7      	bpl.n	89ea6 <do_paint_control+0x52>
   89f16:	2302      	movs	r3, #2
   89f18:	9304      	str	r3, [sp, #16]
   89f1a:	e052      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f1c:	f8db 404c 	ldr.w	r4, [fp, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   89f20:	06a6      	lsls	r6, r4, #26
   89f22:	d5bc      	bpl.n	89e9e <do_paint_control+0x4a>
   89f24:	2301      	movs	r3, #1
   89f26:	9304      	str	r3, [sp, #16]
   89f28:	e04b      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f2a:	f8db 400c 	ldr.w	r4, [fp, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   89f2e:	06a7      	lsls	r7, r4, #26
   89f30:	d5b1      	bpl.n	89e96 <do_paint_control+0x42>
   89f32:	2300      	movs	r3, #0
   89f34:	9304      	str	r3, [sp, #16]
   89f36:	e044      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f38:	f8db 40cc 	ldr.w	r4, [fp, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   89f3c:	06a6      	lsls	r6, r4, #26
   89f3e:	d5b6      	bpl.n	89eae <do_paint_control+0x5a>
   89f40:	2303      	movs	r3, #3
   89f42:	9304      	str	r3, [sp, #16]
   89f44:	e03d      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f46:	f8db 41cc 	ldr.w	r4, [fp, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   89f4a:	06a6      	lsls	r6, r4, #26
   89f4c:	d5bf      	bpl.n	89ece <do_paint_control+0x7a>
   89f4e:	2307      	movs	r3, #7
   89f50:	9304      	str	r3, [sp, #16]
   89f52:	e036      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f54:	f8db 418c 	ldr.w	r4, [fp, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   89f58:	06a7      	lsls	r7, r4, #26
   89f5a:	d5b4      	bpl.n	89ec6 <do_paint_control+0x72>
   89f5c:	2306      	movs	r3, #6
   89f5e:	9304      	str	r3, [sp, #16]
   89f60:	e02f      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f62:	f8db 414c 	ldr.w	r4, [fp, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   89f66:	06a6      	lsls	r6, r4, #26
   89f68:	d5a9      	bpl.n	89ebe <do_paint_control+0x6a>
   89f6a:	2305      	movs	r3, #5
   89f6c:	9304      	str	r3, [sp, #16]
   89f6e:	e028      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f70:	f8db 410c 	ldr.w	r4, [fp, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   89f74:	06a7      	lsls	r7, r4, #26
   89f76:	d59e      	bpl.n	89eb6 <do_paint_control+0x62>
   89f78:	2304      	movs	r3, #4
   89f7a:	9304      	str	r3, [sp, #16]
   89f7c:	e021      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f7e:	f8db 430c 	ldr.w	r4, [fp, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   89f82:	06a7      	lsls	r7, r4, #26
   89f84:	d5b7      	bpl.n	89ef6 <do_paint_control+0xa2>
   89f86:	230c      	movs	r3, #12
   89f88:	9304      	str	r3, [sp, #16]
   89f8a:	e01a      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f8c:	f8db 42cc 	ldr.w	r4, [fp, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   89f90:	06a6      	lsls	r6, r4, #26
   89f92:	d5ac      	bpl.n	89eee <do_paint_control+0x9a>
   89f94:	230b      	movs	r3, #11
   89f96:	9304      	str	r3, [sp, #16]
   89f98:	e013      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89f9a:	f8db 428c 	ldr.w	r4, [fp, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   89f9e:	06a7      	lsls	r7, r4, #26
   89fa0:	d5a1      	bpl.n	89ee6 <do_paint_control+0x92>
   89fa2:	230a      	movs	r3, #10
   89fa4:	9304      	str	r3, [sp, #16]
   89fa6:	e00c      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89fa8:	f8db 424c 	ldr.w	r4, [fp, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   89fac:	06a6      	lsls	r6, r4, #26
   89fae:	d596      	bpl.n	89ede <do_paint_control+0x8a>
   89fb0:	2309      	movs	r3, #9
   89fb2:	9304      	str	r3, [sp, #16]
   89fb4:	e005      	b.n	89fc2 <do_paint_control+0x16e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   89fb6:	f8db 420c 	ldr.w	r4, [fp, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   89fba:	06a7      	lsls	r7, r4, #26
   89fbc:	d58b      	bpl.n	89ed6 <do_paint_control+0x82>
   89fbe:	2308      	movs	r3, #8
   89fc0:	9304      	str	r3, [sp, #16]
	if ((mw_all_controls[control_id].control_flags & MW_CONTROL_FLAG_IS_VISIBLE) == 0U ||
   89fc2:	f001 0105 	and.w	r1, r1, #5
   89fc6:	2905      	cmp	r1, #5
   89fc8:	f47f af57 	bne.w	89e7a <do_paint_control+0x26>
			(mw_all_controls[control_id].control_flags & MW_CONTROL_FLAG_IS_USED) == 0U ||
   89fcc:	f014 0410 	ands.w	r4, r4, #16
   89fd0:	f47f af53 	bne.w	89e7a <do_paint_control+0x26>
	find_rect_window_intersections(&mw_all_controls[control_id].control_rect, &horiz_edges_count, &vert_edges_count);
   89fd4:	320c      	adds	r2, #12
   89fd6:	9005      	str	r0, [sp, #20]
   89fd8:	a907      	add	r1, sp, #28
   89fda:	18a8      	adds	r0, r5, r2
   89fdc:	4b12      	ldr	r3, [pc, #72]	; (8a028 <do_paint_control+0x1d4>)
   89fde:	f10d 021e 	add.w	r2, sp, #30
   89fe2:	4798      	blx	r3
	for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   89fe4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   89fe8:	2901      	cmp	r1, #1
   89fea:	f43f af46 	beq.w	89e7a <do_paint_control+0x26>
   89fee:	4623      	mov	r3, r4
   89ff0:	4620      	mov	r0, r4
   89ff2:	f8df a040 	ldr.w	sl, [pc, #64]	; 8a034 <do_paint_control+0x1e0>
   89ff6:	9403      	str	r4, [sp, #12]
		rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   89ff8:	4a0c      	ldr	r2, [pc, #48]	; (8a02c <do_paint_control+0x1d8>)
   89ffa:	3301      	adds	r3, #1
   89ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		rect_current.y = horizontal_edges[horizontal_edge_counter];
   8a000:	f932 9010 	ldrsh.w	r9, [r2, r0, lsl #1]
		for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8a004:	f8bd 201e 	ldrh.w	r2, [sp, #30]
		rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   8a008:	eba3 0309 	sub.w	r3, r3, r9
   8a00c:	b21b      	sxth	r3, r3
		for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8a00e:	2a01      	cmp	r2, #1
		rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   8a010:	9302      	str	r3, [sp, #8]
		for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8a012:	f000 8199 	beq.w	8a348 <do_paint_control+0x4f4>
   8a016:	2300      	movs	r3, #0
   8a018:	9a04      	ldr	r2, [sp, #16]
   8a01a:	4698      	mov	r8, r3
   8a01c:	0192      	lsls	r2, r2, #6
   8a01e:	461d      	mov	r5, r3
   8a020:	9201      	str	r2, [sp, #4]
   8a022:	e06f      	b.n	8a104 <do_paint_control+0x2b0>
   8a024:	20071858 	.word	0x20071858
   8a028:	00087e11 	.word	0x00087e11
   8a02c:	2007180c 	.word	0x2007180c
   8a030:	20071bd8 	.word	0x20071bd8
   8a034:	20071f78 	.word	0x20071f78
		if (mw_all_windows[i].window_handle == window_handle &&
   8a038:	f8db 3014 	ldr.w	r3, [fp, #20]
   8a03c:	4283      	cmp	r3, r0
   8a03e:	f000 8107 	beq.w	8a250 <do_paint_control+0x3fc>
   8a042:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
   8a046:	4298      	cmp	r0, r3
   8a048:	f000 810a 	beq.w	8a260 <do_paint_control+0x40c>
   8a04c:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
   8a050:	4298      	cmp	r0, r3
   8a052:	f000 810d 	beq.w	8a270 <do_paint_control+0x41c>
   8a056:	f8db 30d4 	ldr.w	r3, [fp, #212]	; 0xd4
   8a05a:	4298      	cmp	r0, r3
   8a05c:	f000 8110 	beq.w	8a280 <do_paint_control+0x42c>
   8a060:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
   8a064:	4298      	cmp	r0, r3
   8a066:	f000 8113 	beq.w	8a290 <do_paint_control+0x43c>
   8a06a:	f8db 3154 	ldr.w	r3, [fp, #340]	; 0x154
   8a06e:	4298      	cmp	r0, r3
   8a070:	f000 8116 	beq.w	8a2a0 <do_paint_control+0x44c>
   8a074:	f8db 3194 	ldr.w	r3, [fp, #404]	; 0x194
   8a078:	4298      	cmp	r0, r3
   8a07a:	f000 8119 	beq.w	8a2b0 <do_paint_control+0x45c>
   8a07e:	f8db 31d4 	ldr.w	r3, [fp, #468]	; 0x1d4
   8a082:	4298      	cmp	r0, r3
   8a084:	f000 811c 	beq.w	8a2c0 <do_paint_control+0x46c>
   8a088:	f8db 3214 	ldr.w	r3, [fp, #532]	; 0x214
   8a08c:	4298      	cmp	r0, r3
   8a08e:	f000 8127 	beq.w	8a2e0 <do_paint_control+0x48c>
   8a092:	f8db 3254 	ldr.w	r3, [fp, #596]	; 0x254
   8a096:	4298      	cmp	r0, r3
   8a098:	f000 811a 	beq.w	8a2d0 <do_paint_control+0x47c>
   8a09c:	f8db 3294 	ldr.w	r3, [fp, #660]	; 0x294
   8a0a0:	4298      	cmp	r0, r3
   8a0a2:	f000 8125 	beq.w	8a2f0 <do_paint_control+0x49c>
   8a0a6:	f8db 32d4 	ldr.w	r3, [fp, #724]	; 0x2d4
   8a0aa:	4298      	cmp	r0, r3
   8a0ac:	f000 8128 	beq.w	8a300 <do_paint_control+0x4ac>
   8a0b0:	f8db 3314 	ldr.w	r3, [fp, #788]	; 0x314
   8a0b4:	4298      	cmp	r0, r3
   8a0b6:	f000 812b 	beq.w	8a310 <do_paint_control+0x4bc>
   8a0ba:	f8db 3354 	ldr.w	r3, [fp, #852]	; 0x354
   8a0be:	4298      	cmp	r0, r3
   8a0c0:	f000 812e 	beq.w	8a320 <do_paint_control+0x4cc>
   8a0c4:	240e      	movs	r4, #14
   8a0c6:	2000      	movs	r0, #0
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8a0c8:	4bc1      	ldr	r3, [pc, #772]	; (8a3d0 <do_paint_control+0x57c>)
   8a0ca:	f240 5252 	movw	r2, #1362	; 0x552
   8a0ce:	49c1      	ldr	r1, [pc, #772]	; (8a3d4 <do_paint_control+0x580>)
   8a0d0:	4ec1      	ldr	r6, [pc, #772]	; (8a3d8 <do_paint_control+0x584>)
   8a0d2:	47b0      	blx	r6
					mw_all_windows[parent_window_id].z_order)
   8a0d4:	9b01      	ldr	r3, [sp, #4]
	return (mw_all_windows[window_id].z_order);
   8a0d6:	eb0b 1484 	add.w	r4, fp, r4, lsl #6
					mw_all_windows[parent_window_id].z_order)
   8a0da:	445b      	add	r3, fp
			if (find_highest_z_order_at_point(rect_current.x, rect_current.y) !=
   8a0dc:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   8a0e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   8a0e4:	4293      	cmp	r3, r2
   8a0e6:	f000 8092 	beq.w	8a20e <do_paint_control+0x3ba>
				if (rect_waiting_to_be_painted)
   8a0ea:	f1b8 0f00 	cmp.w	r8, #0
   8a0ee:	f040 80a8 	bne.w	8a242 <do_paint_control+0x3ee>
		for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8a0f2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   8a0f6:	3501      	adds	r5, #1
   8a0f8:	b2ad      	uxth	r5, r5
   8a0fa:	3a01      	subs	r2, #1
   8a0fc:	4295      	cmp	r5, r2
   8a0fe:	462b      	mov	r3, r5
   8a100:	f080 811c 	bcs.w	8a33c <do_paint_control+0x4e8>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a104:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8a108:	3301      	adds	r3, #1
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a10a:	f002 0128 	and.w	r1, r2, #40	; 0x28
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8a10e:	f93a 3013 	ldrsh.w	r3, [sl, r3, lsl #1]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a112:	2928      	cmp	r1, #40	; 0x28
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8a114:	9300      	str	r3, [sp, #0]
			rect_current.x = vertical_edges[vertical_edge_counter];
   8a116:	f93a 7015 	ldrsh.w	r7, [sl, r5, lsl #1]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a11a:	d102      	bne.n	8a122 <do_paint_control+0x2ce>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a11c:	06d2      	lsls	r2, r2, #27
   8a11e:	f140 812b 	bpl.w	8a378 <do_paint_control+0x524>
	uint8_t highest_z_order = 0U;
   8a122:	2600      	movs	r6, #0
	uint8_t window_id = MW_ROOT_WINDOW_ID;
   8a124:	4634      	mov	r4, r6
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a126:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
   8a12a:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a12e:	2928      	cmp	r1, #40	; 0x28
   8a130:	d102      	bne.n	8a138 <do_paint_control+0x2e4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a132:	06d3      	lsls	r3, r2, #27
   8a134:	f140 812e 	bpl.w	8a394 <do_paint_control+0x540>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a138:	f8db 20cc 	ldr.w	r2, [fp, #204]	; 0xcc
   8a13c:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a140:	2928      	cmp	r1, #40	; 0x28
   8a142:	d102      	bne.n	8a14a <do_paint_control+0x2f6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a144:	06d0      	lsls	r0, r2, #27
   8a146:	f140 8164 	bpl.w	8a412 <do_paint_control+0x5be>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a14a:	f8db 210c 	ldr.w	r2, [fp, #268]	; 0x10c
   8a14e:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a152:	2928      	cmp	r1, #40	; 0x28
   8a154:	d102      	bne.n	8a15c <do_paint_control+0x308>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a156:	06d1      	lsls	r1, r2, #27
   8a158:	f140 816a 	bpl.w	8a430 <do_paint_control+0x5dc>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a15c:	f8db 214c 	ldr.w	r2, [fp, #332]	; 0x14c
   8a160:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a164:	2928      	cmp	r1, #40	; 0x28
   8a166:	d102      	bne.n	8a16e <do_paint_control+0x31a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a168:	06d2      	lsls	r2, r2, #27
   8a16a:	f140 8170 	bpl.w	8a44e <do_paint_control+0x5fa>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a16e:	f8db 218c 	ldr.w	r2, [fp, #396]	; 0x18c
   8a172:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a176:	2928      	cmp	r1, #40	; 0x28
   8a178:	d102      	bne.n	8a180 <do_paint_control+0x32c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a17a:	06d3      	lsls	r3, r2, #27
   8a17c:	f140 8176 	bpl.w	8a46c <do_paint_control+0x618>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a180:	f8db 21cc 	ldr.w	r2, [fp, #460]	; 0x1cc
   8a184:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a188:	2928      	cmp	r1, #40	; 0x28
   8a18a:	d102      	bne.n	8a192 <do_paint_control+0x33e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a18c:	06d0      	lsls	r0, r2, #27
   8a18e:	f140 817c 	bpl.w	8a48a <do_paint_control+0x636>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a192:	f8db 220c 	ldr.w	r2, [fp, #524]	; 0x20c
   8a196:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a19a:	2928      	cmp	r1, #40	; 0x28
   8a19c:	d102      	bne.n	8a1a4 <do_paint_control+0x350>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a19e:	06d1      	lsls	r1, r2, #27
   8a1a0:	f140 8182 	bpl.w	8a4a8 <do_paint_control+0x654>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a1a4:	f8db 224c 	ldr.w	r2, [fp, #588]	; 0x24c
   8a1a8:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a1ac:	2928      	cmp	r1, #40	; 0x28
   8a1ae:	d102      	bne.n	8a1b6 <do_paint_control+0x362>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a1b0:	06d2      	lsls	r2, r2, #27
   8a1b2:	f140 8188 	bpl.w	8a4c6 <do_paint_control+0x672>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a1b6:	f8db 228c 	ldr.w	r2, [fp, #652]	; 0x28c
   8a1ba:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a1be:	2928      	cmp	r1, #40	; 0x28
   8a1c0:	d102      	bne.n	8a1c8 <do_paint_control+0x374>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a1c2:	06d3      	lsls	r3, r2, #27
   8a1c4:	f140 818e 	bpl.w	8a4e4 <do_paint_control+0x690>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a1c8:	f8db 22cc 	ldr.w	r2, [fp, #716]	; 0x2cc
   8a1cc:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a1d0:	2928      	cmp	r1, #40	; 0x28
   8a1d2:	d102      	bne.n	8a1da <do_paint_control+0x386>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a1d4:	06d0      	lsls	r0, r2, #27
   8a1d6:	f140 80ec 	bpl.w	8a3b2 <do_paint_control+0x55e>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a1da:	f8db 230c 	ldr.w	r2, [fp, #780]	; 0x30c
   8a1de:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a1e2:	2928      	cmp	r1, #40	; 0x28
   8a1e4:	d102      	bne.n	8a1ec <do_paint_control+0x398>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a1e6:	06d1      	lsls	r1, r2, #27
   8a1e8:	f140 8104 	bpl.w	8a3f4 <do_paint_control+0x5a0>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8a1ec:	f8db 234c 	ldr.w	r2, [fp, #844]	; 0x34c
   8a1f0:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8a1f4:	2928      	cmp	r1, #40	; 0x28
   8a1f6:	d102      	bne.n	8a1fe <do_paint_control+0x3aa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8a1f8:	06d2      	lsls	r2, r2, #27
   8a1fa:	f140 80af 	bpl.w	8a35c <do_paint_control+0x508>
	return (mw_all_windows[window_id].window_handle);
   8a1fe:	eb0b 1484 	add.w	r4, fp, r4, lsl #6
   8a202:	6960      	ldr	r0, [r4, #20]
	if (window_handle == MW_INVALID_HANDLE)
   8a204:	2800      	cmp	r0, #0
   8a206:	f47f af17 	bne.w	8a038 <do_paint_control+0x1e4>
   8a20a:	240e      	movs	r4, #14
   8a20c:	e75c      	b.n	8a0c8 <do_paint_control+0x274>
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8a20e:	9b00      	ldr	r3, [sp, #0]
			previous_rect_width = rect_previous.width;
   8a210:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8a214:	1bde      	subs	r6, r3, r7
			(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   8a216:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8a21a:	b2b6      	uxth	r6, r6
			(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   8a21c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   8a220:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
			previous_rect_left = rect_previous.x;
   8a224:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
			(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   8a228:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
   8a22c:	f8ad 7020 	strh.w	r7, [sp, #32]
			if (rect_waiting_to_be_painted)
   8a230:	f1b8 0f00 	cmp.w	r8, #0
   8a234:	d07f      	beq.n	8a336 <do_paint_control+0x4e2>
				rect_previous.width += previous_rect_width;
   8a236:	4416      	add	r6, r2
   8a238:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
				rect_previous.x = previous_rect_left;
   8a23c:	f8ad 3020 	strh.w	r3, [sp, #32]
   8a240:	e757      	b.n	8a0f2 <do_paint_control+0x29e>
					do_paint_control2(control_handle, &rect_previous);
   8a242:	a908      	add	r1, sp, #32
   8a244:	9805      	ldr	r0, [sp, #20]
   8a246:	4b65      	ldr	r3, [pc, #404]	; (8a3dc <do_paint_control+0x588>)
   8a248:	4798      	blx	r3
					rect_waiting_to_be_painted = false;
   8a24a:	f04f 0800 	mov.w	r8, #0
   8a24e:	e750      	b.n	8a0f2 <do_paint_control+0x29e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a250:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8a254:	069b      	lsls	r3, r3, #26
   8a256:	f57f aef4 	bpl.w	8a042 <do_paint_control+0x1ee>
   8a25a:	2400      	movs	r4, #0
   8a25c:	2001      	movs	r0, #1
   8a25e:	e733      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a260:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a264:	069e      	lsls	r6, r3, #26
   8a266:	f57f aef1 	bpl.w	8a04c <do_paint_control+0x1f8>
   8a26a:	2401      	movs	r4, #1
   8a26c:	4620      	mov	r0, r4
   8a26e:	e72b      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a270:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a274:	0699      	lsls	r1, r3, #26
   8a276:	f57f aeee 	bpl.w	8a056 <do_paint_control+0x202>
   8a27a:	2402      	movs	r4, #2
   8a27c:	2001      	movs	r0, #1
   8a27e:	e723      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a280:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8a284:	069a      	lsls	r2, r3, #26
   8a286:	f57f aeeb 	bpl.w	8a060 <do_paint_control+0x20c>
   8a28a:	2403      	movs	r4, #3
   8a28c:	2001      	movs	r0, #1
   8a28e:	e71b      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a290:	f8db 310c 	ldr.w	r3, [fp, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a294:	069b      	lsls	r3, r3, #26
   8a296:	f57f aee8 	bpl.w	8a06a <do_paint_control+0x216>
   8a29a:	2404      	movs	r4, #4
   8a29c:	2001      	movs	r0, #1
   8a29e:	e713      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a2a0:	f8db 314c 	ldr.w	r3, [fp, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a2a4:	069e      	lsls	r6, r3, #26
   8a2a6:	f57f aee5 	bpl.w	8a074 <do_paint_control+0x220>
   8a2aa:	2405      	movs	r4, #5
   8a2ac:	2001      	movs	r0, #1
   8a2ae:	e70b      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a2b0:	f8db 318c 	ldr.w	r3, [fp, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a2b4:	0699      	lsls	r1, r3, #26
   8a2b6:	f57f aee2 	bpl.w	8a07e <do_paint_control+0x22a>
   8a2ba:	2406      	movs	r4, #6
   8a2bc:	2001      	movs	r0, #1
   8a2be:	e703      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a2c0:	f8db 31cc 	ldr.w	r3, [fp, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8a2c4:	069a      	lsls	r2, r3, #26
   8a2c6:	f57f aedf 	bpl.w	8a088 <do_paint_control+0x234>
   8a2ca:	2407      	movs	r4, #7
   8a2cc:	2001      	movs	r0, #1
   8a2ce:	e6fb      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a2d0:	f8db 324c 	ldr.w	r3, [fp, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a2d4:	069e      	lsls	r6, r3, #26
   8a2d6:	f57f aee1 	bpl.w	8a09c <do_paint_control+0x248>
   8a2da:	2409      	movs	r4, #9
   8a2dc:	2001      	movs	r0, #1
   8a2de:	e6f3      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a2e0:	f8db 320c 	ldr.w	r3, [fp, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a2e4:	069b      	lsls	r3, r3, #26
   8a2e6:	f57f aed4 	bpl.w	8a092 <do_paint_control+0x23e>
   8a2ea:	2408      	movs	r4, #8
   8a2ec:	2001      	movs	r0, #1
   8a2ee:	e6eb      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a2f0:	f8db 328c 	ldr.w	r3, [fp, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a2f4:	0699      	lsls	r1, r3, #26
   8a2f6:	f57f aed6 	bpl.w	8a0a6 <do_paint_control+0x252>
   8a2fa:	240a      	movs	r4, #10
   8a2fc:	2001      	movs	r0, #1
   8a2fe:	e6e3      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a300:	f8db 32cc 	ldr.w	r3, [fp, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8a304:	069a      	lsls	r2, r3, #26
   8a306:	f57f aed3 	bpl.w	8a0b0 <do_paint_control+0x25c>
   8a30a:	240b      	movs	r4, #11
   8a30c:	2001      	movs	r0, #1
   8a30e:	e6db      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a310:	f8db 330c 	ldr.w	r3, [fp, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a314:	069b      	lsls	r3, r3, #26
   8a316:	f57f aed0 	bpl.w	8a0ba <do_paint_control+0x266>
   8a31a:	240c      	movs	r4, #12
   8a31c:	2001      	movs	r0, #1
   8a31e:	e6d3      	b.n	8a0c8 <do_paint_control+0x274>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a320:	f8db 334c 	ldr.w	r3, [fp, #844]	; 0x34c
   8a324:	f003 0320 	and.w	r3, r3, #32
		if (mw_all_windows[i].window_handle == window_handle &&
   8a328:	2b00      	cmp	r3, #0
   8a32a:	bf0b      	itete	eq
   8a32c:	240e      	moveq	r4, #14
   8a32e:	240d      	movne	r4, #13
   8a330:	2000      	moveq	r0, #0
   8a332:	2001      	movne	r0, #1
   8a334:	e6c8      	b.n	8a0c8 <do_paint_control+0x274>
			rect_waiting_to_be_painted = true;
   8a336:	f04f 0801 	mov.w	r8, #1
   8a33a:	e6da      	b.n	8a0f2 <do_paint_control+0x29e>
		if (rect_waiting_to_be_painted)
   8a33c:	f1b8 0f00 	cmp.w	r8, #0
   8a340:	f040 80df 	bne.w	8a502 <do_paint_control+0x6ae>
   8a344:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   8a348:	9b03      	ldr	r3, [sp, #12]
   8a34a:	1e4a      	subs	r2, r1, #1
   8a34c:	3301      	adds	r3, #1
   8a34e:	b29b      	uxth	r3, r3
   8a350:	4293      	cmp	r3, r2
   8a352:	4618      	mov	r0, r3
   8a354:	9303      	str	r3, [sp, #12]
   8a356:	f4ff ae4f 	bcc.w	89ff8 <do_paint_control+0x1a4>
   8a35a:	e58e      	b.n	89e7a <do_paint_control+0x26>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a35c:	464a      	mov	r2, r9
   8a35e:	4639      	mov	r1, r7
   8a360:	481f      	ldr	r0, [pc, #124]	; (8a3e0 <do_paint_control+0x58c>)
   8a362:	4b20      	ldr	r3, [pc, #128]	; (8a3e4 <do_paint_control+0x590>)
   8a364:	4798      	blx	r3
   8a366:	2800      	cmp	r0, #0
   8a368:	f43f af49 	beq.w	8a1fe <do_paint_control+0x3aa>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a36c:	f89b 236c 	ldrb.w	r2, [fp, #876]	; 0x36c
   8a370:	42b2      	cmp	r2, r6
   8a372:	bf88      	it	hi
   8a374:	240d      	movhi	r4, #13
   8a376:	e742      	b.n	8a1fe <do_paint_control+0x3aa>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a378:	464a      	mov	r2, r9
   8a37a:	4639      	mov	r1, r7
   8a37c:	481a      	ldr	r0, [pc, #104]	; (8a3e8 <do_paint_control+0x594>)
   8a37e:	4b19      	ldr	r3, [pc, #100]	; (8a3e4 <do_paint_control+0x590>)
   8a380:	4798      	blx	r3
   8a382:	2800      	cmp	r0, #0
   8a384:	f43f aecd 	beq.w	8a122 <do_paint_control+0x2ce>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a388:	f89b 606c 	ldrb.w	r6, [fp, #108]	; 0x6c
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a38c:	1c34      	adds	r4, r6, #0
   8a38e:	bf18      	it	ne
   8a390:	2401      	movne	r4, #1
   8a392:	e6c8      	b.n	8a126 <do_paint_control+0x2d2>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a394:	464a      	mov	r2, r9
   8a396:	4639      	mov	r1, r7
   8a398:	4814      	ldr	r0, [pc, #80]	; (8a3ec <do_paint_control+0x598>)
   8a39a:	4b12      	ldr	r3, [pc, #72]	; (8a3e4 <do_paint_control+0x590>)
   8a39c:	4798      	blx	r3
   8a39e:	2800      	cmp	r0, #0
   8a3a0:	f43f aeca 	beq.w	8a138 <do_paint_control+0x2e4>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a3a4:	f89b 20ac 	ldrb.w	r2, [fp, #172]	; 0xac
   8a3a8:	4296      	cmp	r6, r2
   8a3aa:	bf3c      	itt	cc
   8a3ac:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a3ae:	2402      	movcc	r4, #2
   8a3b0:	e6c2      	b.n	8a138 <do_paint_control+0x2e4>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a3b2:	464a      	mov	r2, r9
   8a3b4:	4639      	mov	r1, r7
   8a3b6:	480e      	ldr	r0, [pc, #56]	; (8a3f0 <do_paint_control+0x59c>)
   8a3b8:	4b0a      	ldr	r3, [pc, #40]	; (8a3e4 <do_paint_control+0x590>)
   8a3ba:	4798      	blx	r3
   8a3bc:	2800      	cmp	r0, #0
   8a3be:	f43f af0c 	beq.w	8a1da <do_paint_control+0x386>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a3c2:	f89b 22ec 	ldrb.w	r2, [fp, #748]	; 0x2ec
   8a3c6:	4296      	cmp	r6, r2
   8a3c8:	bf3c      	itt	cc
   8a3ca:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a3cc:	240b      	movcc	r4, #11
   8a3ce:	e704      	b.n	8a1da <do_paint_control+0x386>
   8a3d0:	000ab764 	.word	0x000ab764
   8a3d4:	000ab2e8 	.word	0x000ab2e8
   8a3d8:	00095add 	.word	0x00095add
   8a3dc:	00089bb9 	.word	0x00089bb9
   8a3e0:	20071f30 	.word	0x20071f30
   8a3e4:	00096e7d 	.word	0x00096e7d
   8a3e8:	20071c30 	.word	0x20071c30
   8a3ec:	20071c70 	.word	0x20071c70
   8a3f0:	20071eb0 	.word	0x20071eb0
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a3f4:	464a      	mov	r2, r9
   8a3f6:	4639      	mov	r1, r7
   8a3f8:	4844      	ldr	r0, [pc, #272]	; (8a50c <do_paint_control+0x6b8>)
   8a3fa:	4b45      	ldr	r3, [pc, #276]	; (8a510 <do_paint_control+0x6bc>)
   8a3fc:	4798      	blx	r3
   8a3fe:	2800      	cmp	r0, #0
   8a400:	f43f aef4 	beq.w	8a1ec <do_paint_control+0x398>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a404:	f89b 232c 	ldrb.w	r2, [fp, #812]	; 0x32c
   8a408:	4296      	cmp	r6, r2
   8a40a:	bf3c      	itt	cc
   8a40c:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a40e:	240c      	movcc	r4, #12
   8a410:	e6ec      	b.n	8a1ec <do_paint_control+0x398>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a412:	464a      	mov	r2, r9
   8a414:	4639      	mov	r1, r7
   8a416:	483f      	ldr	r0, [pc, #252]	; (8a514 <do_paint_control+0x6c0>)
   8a418:	4b3d      	ldr	r3, [pc, #244]	; (8a510 <do_paint_control+0x6bc>)
   8a41a:	4798      	blx	r3
   8a41c:	2800      	cmp	r0, #0
   8a41e:	f43f ae94 	beq.w	8a14a <do_paint_control+0x2f6>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a422:	f89b 20ec 	ldrb.w	r2, [fp, #236]	; 0xec
   8a426:	4296      	cmp	r6, r2
   8a428:	bf3c      	itt	cc
   8a42a:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a42c:	2403      	movcc	r4, #3
   8a42e:	e68c      	b.n	8a14a <do_paint_control+0x2f6>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a430:	464a      	mov	r2, r9
   8a432:	4639      	mov	r1, r7
   8a434:	4838      	ldr	r0, [pc, #224]	; (8a518 <do_paint_control+0x6c4>)
   8a436:	4b36      	ldr	r3, [pc, #216]	; (8a510 <do_paint_control+0x6bc>)
   8a438:	4798      	blx	r3
   8a43a:	2800      	cmp	r0, #0
   8a43c:	f43f ae8e 	beq.w	8a15c <do_paint_control+0x308>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a440:	f89b 212c 	ldrb.w	r2, [fp, #300]	; 0x12c
   8a444:	4296      	cmp	r6, r2
   8a446:	bf3c      	itt	cc
   8a448:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a44a:	2404      	movcc	r4, #4
   8a44c:	e686      	b.n	8a15c <do_paint_control+0x308>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a44e:	464a      	mov	r2, r9
   8a450:	4639      	mov	r1, r7
   8a452:	4832      	ldr	r0, [pc, #200]	; (8a51c <do_paint_control+0x6c8>)
   8a454:	4b2e      	ldr	r3, [pc, #184]	; (8a510 <do_paint_control+0x6bc>)
   8a456:	4798      	blx	r3
   8a458:	2800      	cmp	r0, #0
   8a45a:	f43f ae88 	beq.w	8a16e <do_paint_control+0x31a>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a45e:	f89b 216c 	ldrb.w	r2, [fp, #364]	; 0x16c
   8a462:	4296      	cmp	r6, r2
   8a464:	bf3c      	itt	cc
   8a466:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a468:	2405      	movcc	r4, #5
   8a46a:	e680      	b.n	8a16e <do_paint_control+0x31a>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a46c:	464a      	mov	r2, r9
   8a46e:	4639      	mov	r1, r7
   8a470:	482b      	ldr	r0, [pc, #172]	; (8a520 <do_paint_control+0x6cc>)
   8a472:	4b27      	ldr	r3, [pc, #156]	; (8a510 <do_paint_control+0x6bc>)
   8a474:	4798      	blx	r3
   8a476:	2800      	cmp	r0, #0
   8a478:	f43f ae82 	beq.w	8a180 <do_paint_control+0x32c>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a47c:	f89b 21ac 	ldrb.w	r2, [fp, #428]	; 0x1ac
   8a480:	4296      	cmp	r6, r2
   8a482:	bf3c      	itt	cc
   8a484:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a486:	2406      	movcc	r4, #6
   8a488:	e67a      	b.n	8a180 <do_paint_control+0x32c>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a48a:	464a      	mov	r2, r9
   8a48c:	4639      	mov	r1, r7
   8a48e:	4825      	ldr	r0, [pc, #148]	; (8a524 <do_paint_control+0x6d0>)
   8a490:	4b1f      	ldr	r3, [pc, #124]	; (8a510 <do_paint_control+0x6bc>)
   8a492:	4798      	blx	r3
   8a494:	2800      	cmp	r0, #0
   8a496:	f43f ae7c 	beq.w	8a192 <do_paint_control+0x33e>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a49a:	f89b 21ec 	ldrb.w	r2, [fp, #492]	; 0x1ec
   8a49e:	4296      	cmp	r6, r2
   8a4a0:	bf3c      	itt	cc
   8a4a2:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a4a4:	2407      	movcc	r4, #7
   8a4a6:	e674      	b.n	8a192 <do_paint_control+0x33e>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a4a8:	464a      	mov	r2, r9
   8a4aa:	4639      	mov	r1, r7
   8a4ac:	481e      	ldr	r0, [pc, #120]	; (8a528 <do_paint_control+0x6d4>)
   8a4ae:	4b18      	ldr	r3, [pc, #96]	; (8a510 <do_paint_control+0x6bc>)
   8a4b0:	4798      	blx	r3
   8a4b2:	2800      	cmp	r0, #0
   8a4b4:	f43f ae76 	beq.w	8a1a4 <do_paint_control+0x350>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a4b8:	f89b 222c 	ldrb.w	r2, [fp, #556]	; 0x22c
   8a4bc:	4296      	cmp	r6, r2
   8a4be:	bf3c      	itt	cc
   8a4c0:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a4c2:	2408      	movcc	r4, #8
   8a4c4:	e66e      	b.n	8a1a4 <do_paint_control+0x350>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a4c6:	464a      	mov	r2, r9
   8a4c8:	4639      	mov	r1, r7
   8a4ca:	4818      	ldr	r0, [pc, #96]	; (8a52c <do_paint_control+0x6d8>)
   8a4cc:	4b10      	ldr	r3, [pc, #64]	; (8a510 <do_paint_control+0x6bc>)
   8a4ce:	4798      	blx	r3
   8a4d0:	2800      	cmp	r0, #0
   8a4d2:	f43f ae70 	beq.w	8a1b6 <do_paint_control+0x362>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a4d6:	f89b 226c 	ldrb.w	r2, [fp, #620]	; 0x26c
   8a4da:	4296      	cmp	r6, r2
   8a4dc:	bf3c      	itt	cc
   8a4de:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a4e0:	2409      	movcc	r4, #9
   8a4e2:	e668      	b.n	8a1b6 <do_paint_control+0x362>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8a4e4:	464a      	mov	r2, r9
   8a4e6:	4639      	mov	r1, r7
   8a4e8:	4811      	ldr	r0, [pc, #68]	; (8a530 <do_paint_control+0x6dc>)
   8a4ea:	4b09      	ldr	r3, [pc, #36]	; (8a510 <do_paint_control+0x6bc>)
   8a4ec:	4798      	blx	r3
   8a4ee:	2800      	cmp	r0, #0
   8a4f0:	f43f ae6a 	beq.w	8a1c8 <do_paint_control+0x374>
			if (mw_all_windows[i].z_order > highest_z_order)
   8a4f4:	f89b 22ac 	ldrb.w	r2, [fp, #684]	; 0x2ac
   8a4f8:	4296      	cmp	r6, r2
   8a4fa:	bf3c      	itt	cc
   8a4fc:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8a4fe:	240a      	movcc	r4, #10
   8a500:	e662      	b.n	8a1c8 <do_paint_control+0x374>
			do_paint_control2(control_handle, &rect_previous);
   8a502:	a908      	add	r1, sp, #32
   8a504:	9805      	ldr	r0, [sp, #20]
   8a506:	4b0b      	ldr	r3, [pc, #44]	; (8a534 <do_paint_control+0x6e0>)
   8a508:	4798      	blx	r3
   8a50a:	e71b      	b.n	8a344 <do_paint_control+0x4f0>
   8a50c:	20071ef0 	.word	0x20071ef0
   8a510:	00096e7d 	.word	0x00096e7d
   8a514:	20071cb0 	.word	0x20071cb0
   8a518:	20071cf0 	.word	0x20071cf0
   8a51c:	20071d30 	.word	0x20071d30
   8a520:	20071d70 	.word	0x20071d70
   8a524:	20071db0 	.word	0x20071db0
   8a528:	20071df0 	.word	0x20071df0
   8a52c:	20071e30 	.word	0x20071e30
   8a530:	20071e70 	.word	0x20071e70
   8a534:	00089bb9 	.word	0x00089bb9

0008a538 <draw_horizontal_window_scroll_bar>:
{
   8a538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a53c:	460c      	mov	r4, r1
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   8a53e:	4606      	mov	r6, r0
   8a540:	3000      	adds	r0, #0
{
   8a542:	b083      	sub	sp, #12
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   8a544:	bf18      	it	ne
   8a546:	2001      	movne	r0, #1
   8a548:	4bae      	ldr	r3, [pc, #696]	; (8a804 <draw_horizontal_window_scroll_bar+0x2cc>)
   8a54a:	f240 62fb 	movw	r2, #1787	; 0x6fb
   8a54e:	49ae      	ldr	r1, [pc, #696]	; (8a808 <draw_horizontal_window_scroll_bar+0x2d0>)
   8a550:	4fae      	ldr	r7, [pc, #696]	; (8a80c <draw_horizontal_window_scroll_bar+0x2d4>)
   8a552:	47b8      	blx	r7
	if (window_handle == MW_INVALID_HANDLE)
   8a554:	2c00      	cmp	r4, #0
   8a556:	d047      	beq.n	8a5e8 <draw_horizontal_window_scroll_bar+0xb0>
		if (mw_all_windows[i].window_handle == window_handle &&
   8a558:	4dad      	ldr	r5, [pc, #692]	; (8a810 <draw_horizontal_window_scroll_bar+0x2d8>)
   8a55a:	696b      	ldr	r3, [r5, #20]
   8a55c:	429c      	cmp	r4, r3
   8a55e:	f000 80ee 	beq.w	8a73e <draw_horizontal_window_scroll_bar+0x206>
   8a562:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   8a564:	429c      	cmp	r4, r3
   8a566:	f000 80f1 	beq.w	8a74c <draw_horizontal_window_scroll_bar+0x214>
   8a56a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   8a56e:	429c      	cmp	r4, r3
   8a570:	f000 80f2 	beq.w	8a758 <draw_horizontal_window_scroll_bar+0x220>
   8a574:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   8a578:	429c      	cmp	r4, r3
   8a57a:	f000 80f4 	beq.w	8a766 <draw_horizontal_window_scroll_bar+0x22e>
   8a57e:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
   8a582:	429c      	cmp	r4, r3
   8a584:	f000 80f6 	beq.w	8a774 <draw_horizontal_window_scroll_bar+0x23c>
   8a588:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   8a58c:	429c      	cmp	r4, r3
   8a58e:	f000 80f8 	beq.w	8a782 <draw_horizontal_window_scroll_bar+0x24a>
   8a592:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   8a596:	429c      	cmp	r4, r3
   8a598:	f000 80fa 	beq.w	8a790 <draw_horizontal_window_scroll_bar+0x258>
   8a59c:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   8a5a0:	429c      	cmp	r4, r3
   8a5a2:	f000 80fc 	beq.w	8a79e <draw_horizontal_window_scroll_bar+0x266>
   8a5a6:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
   8a5aa:	429c      	cmp	r4, r3
   8a5ac:	f000 80fe 	beq.w	8a7ac <draw_horizontal_window_scroll_bar+0x274>
   8a5b0:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
   8a5b4:	429c      	cmp	r4, r3
   8a5b6:	f000 8100 	beq.w	8a7ba <draw_horizontal_window_scroll_bar+0x282>
   8a5ba:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
   8a5be:	429c      	cmp	r4, r3
   8a5c0:	f000 8102 	beq.w	8a7c8 <draw_horizontal_window_scroll_bar+0x290>
   8a5c4:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
   8a5c8:	429c      	cmp	r4, r3
   8a5ca:	f000 8104 	beq.w	8a7d6 <draw_horizontal_window_scroll_bar+0x29e>
   8a5ce:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
   8a5d2:	429c      	cmp	r4, r3
   8a5d4:	f000 8106 	beq.w	8a7e4 <draw_horizontal_window_scroll_bar+0x2ac>
   8a5d8:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
   8a5dc:	429c      	cmp	r4, r3
   8a5de:	f000 8108 	beq.w	8a7f2 <draw_horizontal_window_scroll_bar+0x2ba>
   8a5e2:	240e      	movs	r4, #14
   8a5e4:	2000      	movs	r0, #0
   8a5e6:	e002      	b.n	8a5ee <draw_horizontal_window_scroll_bar+0xb6>
	if (window_handle == MW_INVALID_HANDLE)
   8a5e8:	4620      	mov	r0, r4
   8a5ea:	240e      	movs	r4, #14
   8a5ec:	4d88      	ldr	r5, [pc, #544]	; (8a810 <draw_horizontal_window_scroll_bar+0x2d8>)
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8a5ee:	f240 62ff 	movw	r2, #1791	; 0x6ff
   8a5f2:	4985      	ldr	r1, [pc, #532]	; (8a808 <draw_horizontal_window_scroll_bar+0x2d0>)
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8a5f4:	01a4      	lsls	r4, r4, #6
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8a5f6:	4b87      	ldr	r3, [pc, #540]	; (8a814 <draw_horizontal_window_scroll_bar+0x2dc>)
   8a5f8:	47b8      	blx	r7
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8a5fa:	192b      	adds	r3, r5, r4
   8a5fc:	68db      	ldr	r3, [r3, #12]
	mw_gl_set_fill(MW_GL_FILL);
   8a5fe:	2001      	movs	r0, #1
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8a600:	0419      	lsls	r1, r3, #16
   8a602:	bf4c      	ite	mi
   8a604:	2718      	movmi	r7, #24
   8a606:	270c      	movpl	r7, #12
	mw_gl_set_fill(MW_GL_FILL);
   8a608:	4b83      	ldr	r3, [pc, #524]	; (8a818 <draw_horizontal_window_scroll_bar+0x2e0>)
   8a60a:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_ON);
   8a60c:	2001      	movs	r0, #1
   8a60e:	4b83      	ldr	r3, [pc, #524]	; (8a81c <draw_horizontal_window_scroll_bar+0x2e4>)
   8a610:	4798      	blx	r3
	mw_gl_set_line(MW_GL_SOLID_LINE);
   8a612:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8a616:	4b82      	ldr	r3, [pc, #520]	; (8a820 <draw_horizontal_window_scroll_bar+0x2e8>)
   8a618:	4798      	blx	r3
	mw_gl_clear_pattern();
   8a61a:	4b82      	ldr	r3, [pc, #520]	; (8a824 <draw_horizontal_window_scroll_bar+0x2ec>)
   8a61c:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   8a61e:	f8df a21c 	ldr.w	sl, [pc, #540]	; 8a83c <draw_horizontal_window_scroll_bar+0x304>
   8a622:	4881      	ldr	r0, [pc, #516]	; (8a828 <draw_horizontal_window_scroll_bar+0x2f0>)
   8a624:	47d0      	blx	sl
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HORIZ_SCROLL_BAR_ENABLED) == MW_WINDOW_FLAG_HORIZ_SCROLL_BAR_ENABLED)
   8a626:	192b      	adds	r3, r5, r4
   8a628:	68db      	ldr	r3, [r3, #12]
			((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0,
   8a62a:	442c      	add	r4, r5
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HORIZ_SCROLL_BAR_ENABLED) == MW_WINDOW_FLAG_HORIZ_SCROLL_BAR_ENABLED)
   8a62c:	049a      	lsls	r2, r3, #18
		mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   8a62e:	bf4c      	ite	mi
   8a630:	2000      	movmi	r0, #0
		mw_gl_set_fg_colour(MW_CONTROL_DISABLED_COLOUR);
   8a632:	487e      	ldrpl	r0, [pc, #504]	; (8a82c <draw_horizontal_window_scroll_bar+0x2f4>)
   8a634:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8a840 <draw_horizontal_window_scroll_bar+0x308>
   8a638:	47c8      	blx	r9
	mw_gl_rectangle(draw_info,
   8a63a:	68e1      	ldr	r1, [r4, #12]
			mw_all_windows[window_id].window_rect.height -
   8a63c:	8be2      	ldrh	r2, [r4, #30]
	mw_gl_rectangle(draw_info,
   8a63e:	f001 0101 	and.w	r1, r1, #1
			mw_all_windows[window_id].window_rect.height -
   8a642:	1a52      	subs	r2, r2, r1
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a644:	1bd2      	subs	r2, r2, r7
	mw_gl_rectangle(draw_info,
   8a646:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
   8a64a:	b212      	sxth	r2, r2
   8a64c:	9700      	str	r7, [sp, #0]
   8a64e:	4630      	mov	r0, r6
   8a650:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 8a844 <draw_horizontal_window_scroll_bar+0x30c>
   8a654:	47d8      	blx	fp
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HORIZ_SCROLL_BAR_ENABLED) == 0U)
   8a656:	68e3      	ldr	r3, [r4, #12]
   8a658:	049b      	lsls	r3, r3, #18
   8a65a:	d402      	bmi.n	8a662 <draw_horizontal_window_scroll_bar+0x12a>
}
   8a65c:	b003      	add	sp, #12
   8a65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   8a662:	4873      	ldr	r0, [pc, #460]	; (8a830 <draw_horizontal_window_scroll_bar+0x2f8>)
   8a664:	47d0      	blx	sl
	scroll_bar_horiz_slider_left = (mw_all_windows[window_id].client_rect.width - scroll_bar_slider_size) *
   8a666:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
		(int16_t)mw_all_windows[window_id].horiz_scroll_pos / UINT8_MAX;
   8a66a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
	scroll_bar_horiz_slider_left = (mw_all_windows[window_id].client_rect.width - scroll_bar_slider_size) *
   8a66e:	1bd2      	subs	r2, r2, r7
   8a670:	fb03 f302 	mul.w	r3, r3, r2
		(int16_t)mw_all_windows[window_id].horiz_scroll_pos / UINT8_MAX;
   8a674:	4d6f      	ldr	r5, [pc, #444]	; (8a834 <draw_horizontal_window_scroll_bar+0x2fc>)
	scroll_bar_horiz_slider_left += (mw_all_windows[window_id].client_rect.x -
   8a676:	f8b4 c018 	ldrh.w	ip, [r4, #24]
		(int16_t)mw_all_windows[window_id].horiz_scroll_pos / UINT8_MAX;
   8a67a:	fb85 2503 	smull	r2, r5, r5, r3
	scroll_bar_horiz_slider_left += (mw_all_windows[window_id].client_rect.x -
   8a67e:	f8b4 e020 	ldrh.w	lr, [r4, #32]
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a682:	68e1      	ldr	r1, [r4, #12]
		(int16_t)mw_all_windows[window_id].horiz_scroll_pos / UINT8_MAX;
   8a684:	18e8      	adds	r0, r5, r3
			mw_all_windows[window_id].window_rect.height -
   8a686:	8be2      	ldrh	r2, [r4, #30]
		(int16_t)mw_all_windows[window_id].horiz_scroll_pos / UINT8_MAX;
   8a688:	17dd      	asrs	r5, r3, #31
	scroll_bar_horiz_slider_left += (mw_all_windows[window_id].client_rect.x -
   8a68a:	ebae 0e0c 	sub.w	lr, lr, ip
		(int16_t)mw_all_windows[window_id].horiz_scroll_pos / UINT8_MAX;
   8a68e:	ebc5 15e0 	rsb	r5, r5, r0, asr #7
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a692:	f001 0101 	and.w	r1, r1, #1
	scroll_bar_horiz_slider_left += (mw_all_windows[window_id].client_rect.x -
   8a696:	4475      	add	r5, lr
			mw_all_windows[window_id].window_rect.height -
   8a698:	1a52      	subs	r2, r2, r1
	scroll_bar_horiz_slider_left += (mw_all_windows[window_id].client_rect.x -
   8a69a:	b2ad      	uxth	r5, r5
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a69c:	1bd2      	subs	r2, r2, r7
	mw_gl_rectangle(draw_info,
   8a69e:	463b      	mov	r3, r7
   8a6a0:	b229      	sxth	r1, r5
   8a6a2:	b212      	sxth	r2, r2
   8a6a4:	4630      	mov	r0, r6
   8a6a6:	9700      	str	r7, [sp, #0]
   8a6a8:	47d8      	blx	fp
	mw_gl_set_fg_colour(MW_HAL_LCD_WHITE);
   8a6aa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   8a6ae:	47c8      	blx	r9
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a6b0:	68e2      	ldr	r2, [r4, #12]
				mw_all_windows[window_id].window_rect.height -
   8a6b2:	8be3      	ldrh	r3, [r4, #30]
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a6b4:	f002 0201 	and.w	r2, r2, #1
				mw_all_windows[window_id].window_rect.height -
   8a6b8:	1a9b      	subs	r3, r3, r2
   8a6ba:	b29b      	uxth	r3, r3
			scroll_bar_horiz_slider_left + 1,
   8a6bc:	f105 0a01 	add.w	sl, r5, #1
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a6c0:	1c9a      	adds	r2, r3, #2
	mw_gl_vline(draw_info,
   8a6c2:	fa0f fa8a 	sxth.w	sl, sl
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a6c6:	1bd2      	subs	r2, r2, r7
				2 -
   8a6c8:	3b02      	subs	r3, #2
	mw_gl_vline(draw_info,
   8a6ca:	4651      	mov	r1, sl
   8a6cc:	4630      	mov	r0, r6
   8a6ce:	f8df b178 	ldr.w	fp, [pc, #376]	; 8a848 <draw_horizontal_window_scroll_bar+0x310>
   8a6d2:	b212      	sxth	r2, r2
   8a6d4:	b21b      	sxth	r3, r3
   8a6d6:	47d8      	blx	fp
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a6d8:	8be3      	ldrh	r3, [r4, #30]
   8a6da:	68e2      	ldr	r2, [r4, #12]
			scroll_bar_horiz_slider_left + scroll_bar_slider_size - 2,
   8a6dc:	f1a7 0802 	sub.w	r8, r7, #2
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a6e0:	f002 0201 	and.w	r2, r2, #1
   8a6e4:	3301      	adds	r3, #1
			scroll_bar_horiz_slider_left + scroll_bar_slider_size - 2,
   8a6e6:	44a8      	add	r8, r5
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a6e8:	1a9b      	subs	r3, r3, r2
	mw_gl_hline(draw_info,
   8a6ea:	fa0f f888 	sxth.w	r8, r8
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a6ee:	1bdb      	subs	r3, r3, r7
	mw_gl_hline(draw_info,
   8a6f0:	4651      	mov	r1, sl
   8a6f2:	4642      	mov	r2, r8
   8a6f4:	b21b      	sxth	r3, r3
   8a6f6:	4630      	mov	r0, r6
   8a6f8:	f8df a150 	ldr.w	sl, [pc, #336]	; 8a84c <draw_horizontal_window_scroll_bar+0x314>
   8a6fc:	47d0      	blx	sl
	mw_gl_set_fg_colour(MW_HAL_LCD_GREY7);
   8a6fe:	484e      	ldr	r0, [pc, #312]	; (8a838 <draw_horizontal_window_scroll_bar+0x300>)
   8a700:	47c8      	blx	r9
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a702:	68e2      	ldr	r2, [r4, #12]
				mw_all_windows[window_id].window_rect.height -
   8a704:	8be3      	ldrh	r3, [r4, #30]
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a706:	f002 0201 	and.w	r2, r2, #1
				mw_all_windows[window_id].window_rect.height -
   8a70a:	1a9b      	subs	r3, r3, r2
   8a70c:	b29b      	uxth	r3, r3
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a70e:	1c9a      	adds	r2, r3, #2
   8a710:	1bd2      	subs	r2, r2, r7
				3 -
   8a712:	3b03      	subs	r3, #3
	mw_gl_vline(draw_info,
   8a714:	4641      	mov	r1, r8
   8a716:	4630      	mov	r0, r6
   8a718:	b212      	sxth	r2, r2
   8a71a:	b21b      	sxth	r3, r3
   8a71c:	47d8      	blx	fp
				2 -
   8a71e:	8be3      	ldrh	r3, [r4, #30]
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0));
   8a720:	68e2      	ldr	r2, [r4, #12]
				2 -
   8a722:	3b02      	subs	r3, #2
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0));
   8a724:	f002 0201 	and.w	r2, r2, #1
				2 -
   8a728:	1a9b      	subs	r3, r3, r2
	mw_gl_hline(draw_info,
   8a72a:	4630      	mov	r0, r6
   8a72c:	4642      	mov	r2, r8
   8a72e:	46d4      	mov	ip, sl
			scroll_bar_horiz_slider_left + 2,
   8a730:	1ca9      	adds	r1, r5, #2
	mw_gl_hline(draw_info,
   8a732:	b209      	sxth	r1, r1
   8a734:	b21b      	sxth	r3, r3
}
   8a736:	b003      	add	sp, #12
   8a738:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_gl_hline(draw_info,
   8a73c:	4760      	bx	ip
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a73e:	68eb      	ldr	r3, [r5, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8a740:	0698      	lsls	r0, r3, #26
   8a742:	f57f af0e 	bpl.w	8a562 <draw_horizontal_window_scroll_bar+0x2a>
   8a746:	2400      	movs	r4, #0
   8a748:	2001      	movs	r0, #1
   8a74a:	e750      	b.n	8a5ee <draw_horizontal_window_scroll_bar+0xb6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a74c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a74e:	0699      	lsls	r1, r3, #26
   8a750:	f57f af0b 	bpl.w	8a56a <draw_horizontal_window_scroll_bar+0x32>
   8a754:	2401      	movs	r4, #1
   8a756:	e7f7      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a758:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a75c:	069a      	lsls	r2, r3, #26
   8a75e:	f57f af09 	bpl.w	8a574 <draw_horizontal_window_scroll_bar+0x3c>
   8a762:	2402      	movs	r4, #2
   8a764:	e7f0      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a766:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8a76a:	069b      	lsls	r3, r3, #26
   8a76c:	f57f af07 	bpl.w	8a57e <draw_horizontal_window_scroll_bar+0x46>
   8a770:	2403      	movs	r4, #3
   8a772:	e7e9      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a774:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a778:	0698      	lsls	r0, r3, #26
   8a77a:	f57f af05 	bpl.w	8a588 <draw_horizontal_window_scroll_bar+0x50>
   8a77e:	2404      	movs	r4, #4
   8a780:	e7e2      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a782:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a786:	0699      	lsls	r1, r3, #26
   8a788:	f57f af03 	bpl.w	8a592 <draw_horizontal_window_scroll_bar+0x5a>
   8a78c:	2405      	movs	r4, #5
   8a78e:	e7db      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a790:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a794:	069a      	lsls	r2, r3, #26
   8a796:	f57f af01 	bpl.w	8a59c <draw_horizontal_window_scroll_bar+0x64>
   8a79a:	2406      	movs	r4, #6
   8a79c:	e7d4      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a79e:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8a7a2:	069b      	lsls	r3, r3, #26
   8a7a4:	f57f aeff 	bpl.w	8a5a6 <draw_horizontal_window_scroll_bar+0x6e>
   8a7a8:	2407      	movs	r4, #7
   8a7aa:	e7cd      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a7ac:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a7b0:	0698      	lsls	r0, r3, #26
   8a7b2:	f57f aefd 	bpl.w	8a5b0 <draw_horizontal_window_scroll_bar+0x78>
   8a7b6:	2408      	movs	r4, #8
   8a7b8:	e7c6      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a7ba:	f8d5 324c 	ldr.w	r3, [r5, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a7be:	0699      	lsls	r1, r3, #26
   8a7c0:	f57f aefb 	bpl.w	8a5ba <draw_horizontal_window_scroll_bar+0x82>
   8a7c4:	2409      	movs	r4, #9
   8a7c6:	e7bf      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a7c8:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a7cc:	069a      	lsls	r2, r3, #26
   8a7ce:	f57f aef9 	bpl.w	8a5c4 <draw_horizontal_window_scroll_bar+0x8c>
   8a7d2:	240a      	movs	r4, #10
   8a7d4:	e7b8      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a7d6:	f8d5 32cc 	ldr.w	r3, [r5, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8a7da:	069b      	lsls	r3, r3, #26
   8a7dc:	f57f aef7 	bpl.w	8a5ce <draw_horizontal_window_scroll_bar+0x96>
   8a7e0:	240b      	movs	r4, #11
   8a7e2:	e7b1      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a7e4:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a7e8:	0698      	lsls	r0, r3, #26
   8a7ea:	f57f aef5 	bpl.w	8a5d8 <draw_horizontal_window_scroll_bar+0xa0>
   8a7ee:	240c      	movs	r4, #12
   8a7f0:	e7aa      	b.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8a7f2:	f8d5 034c 	ldr.w	r0, [r5, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8a7f6:	f010 0020 	ands.w	r0, r0, #32
   8a7fa:	bf18      	it	ne
   8a7fc:	240d      	movne	r4, #13
   8a7fe:	d1a3      	bne.n	8a748 <draw_horizontal_window_scroll_bar+0x210>
   8a800:	240e      	movs	r4, #14
   8a802:	e6f4      	b.n	8a5ee <draw_horizontal_window_scroll_bar+0xb6>
   8a804:	000a6618 	.word	0x000a6618
   8a808:	000ab35c 	.word	0x000ab35c
   8a80c:	00095add 	.word	0x00095add
   8a810:	20071bd8 	.word	0x20071bd8
   8a814:	000ab764 	.word	0x000ab764
   8a818:	000846fd 	.word	0x000846fd
   8a81c:	000846f1 	.word	0x000846f1
   8a820:	000846d5 	.word	0x000846d5
   8a824:	000846e1 	.word	0x000846e1
   8a828:	00e6e6e6 	.word	0x00e6e6e6
   8a82c:	00bfbfbf 	.word	0x00bfbfbf
   8a830:	00cccccc 	.word	0x00cccccc
   8a834:	80808081 	.word	0x80808081
   8a838:	00a6a6a6 	.word	0x00a6a6a6
   8a83c:	000846c9 	.word	0x000846c9
   8a840:	000846b1 	.word	0x000846b1
   8a844:	000850e1 	.word	0x000850e1
   8a848:	00084f39 	.word	0x00084f39
   8a84c:	00084dd1 	.word	0x00084dd1

0008a850 <draw_vertical_window_scroll_bar>:
{
   8a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a854:	460c      	mov	r4, r1
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   8a856:	4606      	mov	r6, r0
   8a858:	3000      	adds	r0, #0
{
   8a85a:	b085      	sub	sp, #20
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   8a85c:	bf18      	it	ne
   8a85e:	2001      	movne	r0, #1
   8a860:	4bb8      	ldr	r3, [pc, #736]	; (8ab44 <draw_vertical_window_scroll_bar+0x2f4>)
   8a862:	f240 726b 	movw	r2, #1899	; 0x76b
   8a866:	49b8      	ldr	r1, [pc, #736]	; (8ab48 <draw_vertical_window_scroll_bar+0x2f8>)
   8a868:	4db8      	ldr	r5, [pc, #736]	; (8ab4c <draw_vertical_window_scroll_bar+0x2fc>)
   8a86a:	47a8      	blx	r5
	if (window_handle == MW_INVALID_HANDLE)
   8a86c:	2c00      	cmp	r4, #0
   8a86e:	d04a      	beq.n	8a906 <draw_vertical_window_scroll_bar+0xb6>
		if (mw_all_windows[i].window_handle == window_handle &&
   8a870:	f8df b308 	ldr.w	fp, [pc, #776]	; 8ab7c <draw_vertical_window_scroll_bar+0x32c>
   8a874:	f8db 3014 	ldr.w	r3, [fp, #20]
   8a878:	429c      	cmp	r4, r3
   8a87a:	f000 80fd 	beq.w	8aa78 <draw_vertical_window_scroll_bar+0x228>
   8a87e:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
   8a882:	429c      	cmp	r4, r3
   8a884:	f000 8100 	beq.w	8aa88 <draw_vertical_window_scroll_bar+0x238>
   8a888:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
   8a88c:	429c      	cmp	r4, r3
   8a88e:	f000 8102 	beq.w	8aa96 <draw_vertical_window_scroll_bar+0x246>
   8a892:	f8db 30d4 	ldr.w	r3, [fp, #212]	; 0xd4
   8a896:	429c      	cmp	r4, r3
   8a898:	f000 8104 	beq.w	8aaa4 <draw_vertical_window_scroll_bar+0x254>
   8a89c:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
   8a8a0:	429c      	cmp	r4, r3
   8a8a2:	f000 8106 	beq.w	8aab2 <draw_vertical_window_scroll_bar+0x262>
   8a8a6:	f8db 3154 	ldr.w	r3, [fp, #340]	; 0x154
   8a8aa:	429c      	cmp	r4, r3
   8a8ac:	f000 8108 	beq.w	8aac0 <draw_vertical_window_scroll_bar+0x270>
   8a8b0:	f8db 3194 	ldr.w	r3, [fp, #404]	; 0x194
   8a8b4:	429c      	cmp	r4, r3
   8a8b6:	f000 810a 	beq.w	8aace <draw_vertical_window_scroll_bar+0x27e>
   8a8ba:	f8db 31d4 	ldr.w	r3, [fp, #468]	; 0x1d4
   8a8be:	429c      	cmp	r4, r3
   8a8c0:	f000 810c 	beq.w	8aadc <draw_vertical_window_scroll_bar+0x28c>
   8a8c4:	f8db 3214 	ldr.w	r3, [fp, #532]	; 0x214
   8a8c8:	429c      	cmp	r4, r3
   8a8ca:	f000 810e 	beq.w	8aaea <draw_vertical_window_scroll_bar+0x29a>
   8a8ce:	f8db 3254 	ldr.w	r3, [fp, #596]	; 0x254
   8a8d2:	429c      	cmp	r4, r3
   8a8d4:	f000 8110 	beq.w	8aaf8 <draw_vertical_window_scroll_bar+0x2a8>
   8a8d8:	f8db 3294 	ldr.w	r3, [fp, #660]	; 0x294
   8a8dc:	429c      	cmp	r4, r3
   8a8de:	f000 8112 	beq.w	8ab06 <draw_vertical_window_scroll_bar+0x2b6>
   8a8e2:	f8db 32d4 	ldr.w	r3, [fp, #724]	; 0x2d4
   8a8e6:	429c      	cmp	r4, r3
   8a8e8:	f000 8114 	beq.w	8ab14 <draw_vertical_window_scroll_bar+0x2c4>
   8a8ec:	f8db 3314 	ldr.w	r3, [fp, #788]	; 0x314
   8a8f0:	429c      	cmp	r4, r3
   8a8f2:	f000 8116 	beq.w	8ab22 <draw_vertical_window_scroll_bar+0x2d2>
   8a8f6:	f8db 3354 	ldr.w	r3, [fp, #852]	; 0x354
   8a8fa:	429c      	cmp	r4, r3
   8a8fc:	f000 8118 	beq.w	8ab30 <draw_vertical_window_scroll_bar+0x2e0>
   8a900:	240e      	movs	r4, #14
   8a902:	2000      	movs	r0, #0
   8a904:	e003      	b.n	8a90e <draw_vertical_window_scroll_bar+0xbe>
	if (window_handle == MW_INVALID_HANDLE)
   8a906:	4620      	mov	r0, r4
   8a908:	240e      	movs	r4, #14
   8a90a:	f8df b270 	ldr.w	fp, [pc, #624]	; 8ab7c <draw_vertical_window_scroll_bar+0x32c>
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8a90e:	f240 726f 	movw	r2, #1903	; 0x76f
   8a912:	498d      	ldr	r1, [pc, #564]	; (8ab48 <draw_vertical_window_scroll_bar+0x2f8>)
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8a914:	01a4      	lsls	r4, r4, #6
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8a916:	4b8e      	ldr	r3, [pc, #568]	; (8ab50 <draw_vertical_window_scroll_bar+0x300>)
   8a918:	47a8      	blx	r5
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8a91a:	eb0b 0304 	add.w	r3, fp, r4
   8a91e:	68db      	ldr	r3, [r3, #12]
	mw_gl_set_fill(MW_GL_FILL);
   8a920:	2001      	movs	r0, #1
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8a922:	0419      	lsls	r1, r3, #16
   8a924:	bf4b      	itete	mi
   8a926:	2518      	movmi	r5, #24
   8a928:	250c      	movpl	r5, #12
   8a92a:	2316      	movmi	r3, #22
   8a92c:	230a      	movpl	r3, #10
   8a92e:	46aa      	mov	sl, r5
   8a930:	9303      	str	r3, [sp, #12]
	mw_gl_set_fill(MW_GL_FILL);
   8a932:	4b88      	ldr	r3, [pc, #544]	; (8ab54 <draw_vertical_window_scroll_bar+0x304>)
   8a934:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_ON);
   8a936:	2001      	movs	r0, #1
   8a938:	4b87      	ldr	r3, [pc, #540]	; (8ab58 <draw_vertical_window_scroll_bar+0x308>)
   8a93a:	4798      	blx	r3
	mw_gl_set_line(MW_GL_SOLID_LINE);
   8a93c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8a940:	4b86      	ldr	r3, [pc, #536]	; (8ab5c <draw_vertical_window_scroll_bar+0x30c>)
   8a942:	4798      	blx	r3
	mw_gl_clear_pattern();
   8a944:	4b86      	ldr	r3, [pc, #536]	; (8ab60 <draw_vertical_window_scroll_bar+0x310>)
   8a946:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   8a948:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8ab80 <draw_vertical_window_scroll_bar+0x330>
   8a94c:	4885      	ldr	r0, [pc, #532]	; (8ab64 <draw_vertical_window_scroll_bar+0x314>)
   8a94e:	47c8      	blx	r9
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_VERT_SCROLL_BAR_ENABLED) == MW_WINDOW_FLAG_VERT_SCROLL_BAR_ENABLED)
   8a950:	eb0b 0304 	add.w	r3, fp, r4
   8a954:	68db      	ldr	r3, [r3, #12]
			mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y,
   8a956:	445c      	add	r4, fp
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_VERT_SCROLL_BAR_ENABLED) == MW_WINDOW_FLAG_VERT_SCROLL_BAR_ENABLED)
   8a958:	04da      	lsls	r2, r3, #19
		mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   8a95a:	bf4c      	ite	mi
   8a95c:	2000      	movmi	r0, #0
		mw_gl_set_fg_colour(MW_CONTROL_DISABLED_COLOUR);
   8a95e:	4882      	ldrpl	r0, [pc, #520]	; (8ab68 <draw_vertical_window_scroll_bar+0x318>)
   8a960:	4f82      	ldr	r7, [pc, #520]	; (8ab6c <draw_vertical_window_scroll_bar+0x31c>)
   8a962:	47b8      	blx	r7
			(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) +
   8a964:	68e3      	ldr	r3, [r4, #12]
   8a966:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
			mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y,
   8a968:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   8a96a:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
	mw_gl_rectangle(draw_info,
   8a96e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
			(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) +
   8a972:	f003 0301 	and.w	r3, r3, #1
   8a976:	4419      	add	r1, r3
			mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y,
   8a978:	eba2 020e 	sub.w	r2, r2, lr
	mw_gl_rectangle(draw_info,
   8a97c:	9000      	str	r0, [sp, #0]
   8a97e:	4653      	mov	r3, sl
   8a980:	b209      	sxth	r1, r1
   8a982:	b212      	sxth	r2, r2
   8a984:	4630      	mov	r0, r6
   8a986:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8ab84 <draw_vertical_window_scroll_bar+0x334>
   8a98a:	47d8      	blx	fp
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_VERT_SCROLL_BAR_ENABLED) == 0U)
   8a98c:	68e3      	ldr	r3, [r4, #12]
   8a98e:	04db      	lsls	r3, r3, #19
   8a990:	d402      	bmi.n	8a998 <draw_vertical_window_scroll_bar+0x148>
}
   8a992:	b005      	add	sp, #20
   8a994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   8a998:	4875      	ldr	r0, [pc, #468]	; (8ab70 <draw_vertical_window_scroll_bar+0x320>)
   8a99a:	47c8      	blx	r9
	scroll_bar_horiz_slider_top = (mw_all_windows[window_id].client_rect.height - scroll_bar_slider_size) *
   8a99c:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
			(int16_t)mw_all_windows[window_id].vert_scroll_pos / UINT8_MAX;
   8a9a0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
	scroll_bar_horiz_slider_top = (mw_all_windows[window_id].client_rect.height - scroll_bar_slider_size) *
   8a9a4:	eba2 0a05 	sub.w	sl, r2, r5
   8a9a8:	fb03 fa0a 	mul.w	sl, r3, sl
			(int16_t)mw_all_windows[window_id].vert_scroll_pos / UINT8_MAX;
   8a9ac:	4b71      	ldr	r3, [pc, #452]	; (8ab74 <draw_vertical_window_scroll_bar+0x324>)
	scroll_bar_horiz_slider_top += (mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y);
   8a9ae:	8b60      	ldrh	r0, [r4, #26]
			(int16_t)mw_all_windows[window_id].vert_scroll_pos / UINT8_MAX;
   8a9b0:	fb83 390a 	smull	r3, r9, r3, sl
	scroll_bar_horiz_slider_top += (mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y);
   8a9b4:	8c62      	ldrh	r2, [r4, #34]	; 0x22
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a9b6:	68e3      	ldr	r3, [r4, #12]
			(int16_t)mw_all_windows[window_id].vert_scroll_pos / UINT8_MAX;
   8a9b8:	eb09 0e0a 	add.w	lr, r9, sl
			mw_all_windows[window_id].window_rect.width -
   8a9bc:	8ba1      	ldrh	r1, [r4, #28]
			(int16_t)mw_all_windows[window_id].vert_scroll_pos / UINT8_MAX;
   8a9be:	ea4f 79ea 	mov.w	r9, sl, asr #31
   8a9c2:	ebc9 19ee 	rsb	r9, r9, lr, asr #7
	scroll_bar_horiz_slider_top += (mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y);
   8a9c6:	1a12      	subs	r2, r2, r0
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a9c8:	f003 0301 	and.w	r3, r3, #1
	scroll_bar_horiz_slider_top += (mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y);
   8a9cc:	4491      	add	r9, r2
			mw_all_windows[window_id].window_rect.width -
   8a9ce:	1ac9      	subs	r1, r1, r3
	scroll_bar_horiz_slider_top += (mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y);
   8a9d0:	fa1f f989 	uxth.w	r9, r9
				(((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER) ? MW_BORDER_WIDTH : 0) -
   8a9d4:	1b49      	subs	r1, r1, r5
	mw_gl_rectangle(draw_info,
   8a9d6:	462b      	mov	r3, r5
   8a9d8:	fa0f f289 	sxth.w	r2, r9
   8a9dc:	b209      	sxth	r1, r1
   8a9de:	4630      	mov	r0, r6
   8a9e0:	9500      	str	r5, [sp, #0]
   8a9e2:	47d8      	blx	fp
	mw_gl_set_fg_colour(MW_HAL_LCD_WHITE);
   8a9e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   8a9e8:	47b8      	blx	r7
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8a9ea:	8ba1      	ldrh	r1, [r4, #28]
   8a9ec:	68e3      	ldr	r3, [r4, #12]
			scroll_bar_horiz_slider_top + scroll_bar_narrow_dimension - 2);
   8a9ee:	9a03      	ldr	r2, [sp, #12]
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8a9f0:	f003 0301 	and.w	r3, r3, #1
   8a9f4:	3102      	adds	r1, #2
			scroll_bar_horiz_slider_top + scroll_bar_narrow_dimension - 2);
   8a9f6:	444a      	add	r2, r9
			1 + scroll_bar_horiz_slider_top,
   8a9f8:	f109 0a01 	add.w	sl, r9, #1
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8a9fc:	1ac9      	subs	r1, r1, r3
	mw_gl_vline(draw_info,
   8a9fe:	fa0f f882 	sxth.w	r8, r2
   8aa02:	fa0f fa8a 	sxth.w	sl, sl
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa06:	1b49      	subs	r1, r1, r5
	mw_gl_vline(draw_info,
   8aa08:	4643      	mov	r3, r8
   8aa0a:	4652      	mov	r2, sl
   8aa0c:	4630      	mov	r0, r6
   8aa0e:	f8df b178 	ldr.w	fp, [pc, #376]	; 8ab88 <draw_vertical_window_scroll_bar+0x338>
   8aa12:	b209      	sxth	r1, r1
   8aa14:	47d8      	blx	fp
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa16:	68e3      	ldr	r3, [r4, #12]
				mw_all_windows[window_id].window_rect.width -
   8aa18:	8ba2      	ldrh	r2, [r4, #28]
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa1a:	f003 0301 	and.w	r3, r3, #1
				mw_all_windows[window_id].window_rect.width -
   8aa1e:	1ad2      	subs	r2, r2, r3
   8aa20:	b292      	uxth	r2, r2
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa22:	1c91      	adds	r1, r2, #2
   8aa24:	1b49      	subs	r1, r1, r5
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa26:	3a02      	subs	r2, #2
	mw_gl_hline(draw_info,
   8aa28:	4653      	mov	r3, sl
   8aa2a:	b209      	sxth	r1, r1
   8aa2c:	b212      	sxth	r2, r2
   8aa2e:	4630      	mov	r0, r6
   8aa30:	f8df a158 	ldr.w	sl, [pc, #344]	; 8ab8c <draw_vertical_window_scroll_bar+0x33c>
   8aa34:	47d0      	blx	sl
	mw_gl_set_fg_colour(MW_HAL_LCD_GREY7);
   8aa36:	4850      	ldr	r0, [pc, #320]	; (8ab78 <draw_vertical_window_scroll_bar+0x328>)
   8aa38:	47b8      	blx	r7
				scroll_bar_narrow_dimension -
   8aa3a:	8ba1      	ldrh	r1, [r4, #28]
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa3c:	68e3      	ldr	r3, [r4, #12]
				scroll_bar_narrow_dimension -
   8aa3e:	3902      	subs	r1, #2
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa40:	f003 0301 	and.w	r3, r3, #1
				2 + scroll_bar_horiz_slider_top,
   8aa44:	f109 0202 	add.w	r2, r9, #2
				scroll_bar_narrow_dimension -
   8aa48:	1ac9      	subs	r1, r1, r3
	mw_gl_vline(draw_info,
   8aa4a:	4630      	mov	r0, r6
   8aa4c:	4643      	mov	r3, r8
   8aa4e:	b212      	sxth	r2, r2
   8aa50:	b209      	sxth	r1, r1
   8aa52:	47d8      	blx	fp
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa54:	68e3      	ldr	r3, [r4, #12]
				mw_all_windows[window_id].window_rect.width -
   8aa56:	8ba2      	ldrh	r2, [r4, #28]
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa58:	f003 0301 	and.w	r3, r3, #1
				mw_all_windows[window_id].window_rect.width -
   8aa5c:	1ad2      	subs	r2, r2, r3
	mw_gl_hline(draw_info,
   8aa5e:	4630      	mov	r0, r6
   8aa60:	4643      	mov	r3, r8
   8aa62:	46d4      	mov	ip, sl
				mw_all_windows[window_id].window_rect.width -
   8aa64:	b292      	uxth	r2, r2
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa66:	1c91      	adds	r1, r2, #2
   8aa68:	1b49      	subs	r1, r1, r5
				((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? MW_BORDER_WIDTH : 0) -
   8aa6a:	3a02      	subs	r2, #2
	mw_gl_hline(draw_info,
   8aa6c:	b209      	sxth	r1, r1
   8aa6e:	b212      	sxth	r2, r2
}
   8aa70:	b005      	add	sp, #20
   8aa72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_gl_hline(draw_info,
   8aa76:	4760      	bx	ip
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8aa78:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8aa7c:	069b      	lsls	r3, r3, #26
   8aa7e:	f57f aefe 	bpl.w	8a87e <draw_vertical_window_scroll_bar+0x2e>
   8aa82:	2400      	movs	r4, #0
   8aa84:	2001      	movs	r0, #1
   8aa86:	e742      	b.n	8a90e <draw_vertical_window_scroll_bar+0xbe>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8aa88:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8aa8c:	069f      	lsls	r7, r3, #26
   8aa8e:	f57f aefb 	bpl.w	8a888 <draw_vertical_window_scroll_bar+0x38>
   8aa92:	2401      	movs	r4, #1
   8aa94:	e7f6      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8aa96:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8aa9a:	0698      	lsls	r0, r3, #26
   8aa9c:	f57f aef9 	bpl.w	8a892 <draw_vertical_window_scroll_bar+0x42>
   8aaa0:	2402      	movs	r4, #2
   8aaa2:	e7ef      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8aaa4:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8aaa8:	0699      	lsls	r1, r3, #26
   8aaaa:	f57f aef7 	bpl.w	8a89c <draw_vertical_window_scroll_bar+0x4c>
   8aaae:	2403      	movs	r4, #3
   8aab0:	e7e8      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8aab2:	f8db 310c 	ldr.w	r3, [fp, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8aab6:	069a      	lsls	r2, r3, #26
   8aab8:	f57f aef5 	bpl.w	8a8a6 <draw_vertical_window_scroll_bar+0x56>
   8aabc:	2404      	movs	r4, #4
   8aabe:	e7e1      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8aac0:	f8db 314c 	ldr.w	r3, [fp, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8aac4:	069b      	lsls	r3, r3, #26
   8aac6:	f57f aef3 	bpl.w	8a8b0 <draw_vertical_window_scroll_bar+0x60>
   8aaca:	2405      	movs	r4, #5
   8aacc:	e7da      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8aace:	f8db 318c 	ldr.w	r3, [fp, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8aad2:	069f      	lsls	r7, r3, #26
   8aad4:	f57f aef1 	bpl.w	8a8ba <draw_vertical_window_scroll_bar+0x6a>
   8aad8:	2406      	movs	r4, #6
   8aada:	e7d3      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8aadc:	f8db 31cc 	ldr.w	r3, [fp, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8aae0:	0698      	lsls	r0, r3, #26
   8aae2:	f57f aeef 	bpl.w	8a8c4 <draw_vertical_window_scroll_bar+0x74>
   8aae6:	2407      	movs	r4, #7
   8aae8:	e7cc      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8aaea:	f8db 320c 	ldr.w	r3, [fp, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8aaee:	0699      	lsls	r1, r3, #26
   8aaf0:	f57f aeed 	bpl.w	8a8ce <draw_vertical_window_scroll_bar+0x7e>
   8aaf4:	2408      	movs	r4, #8
   8aaf6:	e7c5      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8aaf8:	f8db 324c 	ldr.w	r3, [fp, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8aafc:	069a      	lsls	r2, r3, #26
   8aafe:	f57f aeeb 	bpl.w	8a8d8 <draw_vertical_window_scroll_bar+0x88>
   8ab02:	2409      	movs	r4, #9
   8ab04:	e7be      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ab06:	f8db 328c 	ldr.w	r3, [fp, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ab0a:	069b      	lsls	r3, r3, #26
   8ab0c:	f57f aee9 	bpl.w	8a8e2 <draw_vertical_window_scroll_bar+0x92>
   8ab10:	240a      	movs	r4, #10
   8ab12:	e7b7      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ab14:	f8db 32cc 	ldr.w	r3, [fp, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8ab18:	069f      	lsls	r7, r3, #26
   8ab1a:	f57f aee7 	bpl.w	8a8ec <draw_vertical_window_scroll_bar+0x9c>
   8ab1e:	240b      	movs	r4, #11
   8ab20:	e7b0      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ab22:	f8db 330c 	ldr.w	r3, [fp, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ab26:	0698      	lsls	r0, r3, #26
   8ab28:	f57f aee5 	bpl.w	8a8f6 <draw_vertical_window_scroll_bar+0xa6>
   8ab2c:	240c      	movs	r4, #12
   8ab2e:	e7a9      	b.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ab30:	f8db 034c 	ldr.w	r0, [fp, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ab34:	f010 0020 	ands.w	r0, r0, #32
   8ab38:	bf18      	it	ne
   8ab3a:	240d      	movne	r4, #13
   8ab3c:	d1a2      	bne.n	8aa84 <draw_vertical_window_scroll_bar+0x234>
   8ab3e:	240e      	movs	r4, #14
   8ab40:	e6e5      	b.n	8a90e <draw_vertical_window_scroll_bar+0xbe>
   8ab42:	bf00      	nop
   8ab44:	000a6618 	.word	0x000a6618
   8ab48:	000ab380 	.word	0x000ab380
   8ab4c:	00095add 	.word	0x00095add
   8ab50:	000ab764 	.word	0x000ab764
   8ab54:	000846fd 	.word	0x000846fd
   8ab58:	000846f1 	.word	0x000846f1
   8ab5c:	000846d5 	.word	0x000846d5
   8ab60:	000846e1 	.word	0x000846e1
   8ab64:	00e6e6e6 	.word	0x00e6e6e6
   8ab68:	00bfbfbf 	.word	0x00bfbfbf
   8ab6c:	000846b1 	.word	0x000846b1
   8ab70:	00cccccc 	.word	0x00cccccc
   8ab74:	80808081 	.word	0x80808081
   8ab78:	00a6a6a6 	.word	0x00a6a6a6
   8ab7c:	20071bd8 	.word	0x20071bd8
   8ab80:	000846c9 	.word	0x000846c9
   8ab84:	000850e1 	.word	0x000850e1
   8ab88:	00084f39 	.word	0x00084f39
   8ab8c:	00084dd1 	.word	0x00084dd1

0008ab90 <do_paint_control_rect>:
	MW_ASSERT(invalid_rect != (void*)0, "Null pointer argument");
   8ab90:	1c0b      	adds	r3, r1, #0
   8ab92:	bf18      	it	ne
   8ab94:	2301      	movne	r3, #1
{
   8ab96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ab9a:	4683      	mov	fp, r0
   8ab9c:	b08d      	sub	sp, #52	; 0x34
	MW_ASSERT(invalid_rect != (void*)0, "Null pointer argument");
   8ab9e:	460c      	mov	r4, r1
   8aba0:	4618      	mov	r0, r3
   8aba2:	f640 223c 	movw	r2, #2620	; 0xa3c
   8aba6:	4b72      	ldr	r3, [pc, #456]	; (8ad70 <do_paint_control_rect+0x1e0>)
   8aba8:	4972      	ldr	r1, [pc, #456]	; (8ad74 <do_paint_control_rect+0x1e4>)
   8abaa:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8ad8c <do_paint_control_rect+0x1fc>
   8abae:	47d0      	blx	sl
	if (control_handle == MW_INVALID_HANDLE)
   8abb0:	f1bb 0f00 	cmp.w	fp, #0
   8abb4:	d00d      	beq.n	8abd2 <do_paint_control_rect+0x42>
   8abb6:	4f70      	ldr	r7, [pc, #448]	; (8ad78 <do_paint_control_rect+0x1e8>)
   8abb8:	2200      	movs	r2, #0
   8abba:	463b      	mov	r3, r7
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   8abbc:	8b99      	ldrh	r1, [r3, #28]
   8abbe:	0749      	lsls	r1, r1, #29
   8abc0:	d502      	bpl.n	8abc8 <do_paint_control_rect+0x38>
   8abc2:	6999      	ldr	r1, [r3, #24]
   8abc4:	458b      	cmp	fp, r1
   8abc6:	d00d      	beq.n	8abe4 <do_paint_control_rect+0x54>
   8abc8:	3201      	adds	r2, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   8abca:	2a18      	cmp	r2, #24
   8abcc:	f103 0320 	add.w	r3, r3, #32
   8abd0:	d1f4      	bne.n	8abbc <do_paint_control_rect+0x2c>
		MW_ASSERT((bool)false, "Bad control handle");
   8abd2:	4b6a      	ldr	r3, [pc, #424]	; (8ad7c <do_paint_control_rect+0x1ec>)
   8abd4:	f640 2242 	movw	r2, #2626	; 0xa42
   8abd8:	4966      	ldr	r1, [pc, #408]	; (8ad74 <do_paint_control_rect+0x1e4>)
   8abda:	2000      	movs	r0, #0
   8abdc:	47d0      	blx	sl
}
   8abde:	b00d      	add	sp, #52	; 0x34
   8abe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent_window_id = get_window_id_for_handle(mw_all_controls[control_id].parent_handle);
   8abe4:	0155      	lsls	r5, r2, #5
   8abe6:	197b      	adds	r3, r7, r5
   8abe8:	6958      	ldr	r0, [r3, #20]
	if (window_handle == MW_INVALID_HANDLE)
   8abea:	2800      	cmp	r0, #0
   8abec:	d051      	beq.n	8ac92 <do_paint_control_rect+0x102>
		if (mw_all_windows[i].window_handle == window_handle &&
   8abee:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8ad90 <do_paint_control_rect+0x200>
   8abf2:	f8d9 3014 	ldr.w	r3, [r9, #20]
   8abf6:	4298      	cmp	r0, r3
   8abf8:	f000 81c0 	beq.w	8af7c <do_paint_control_rect+0x3ec>
   8abfc:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
   8ac00:	4298      	cmp	r0, r3
   8ac02:	f000 81b3 	beq.w	8af6c <do_paint_control_rect+0x3dc>
   8ac06:	f8d9 3094 	ldr.w	r3, [r9, #148]	; 0x94
   8ac0a:	4298      	cmp	r0, r3
   8ac0c:	f000 81c4 	beq.w	8af98 <do_paint_control_rect+0x408>
   8ac10:	f8d9 30d4 	ldr.w	r3, [r9, #212]	; 0xd4
   8ac14:	4298      	cmp	r0, r3
   8ac16:	f000 81b8 	beq.w	8af8a <do_paint_control_rect+0x3fa>
   8ac1a:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
   8ac1e:	4298      	cmp	r0, r3
   8ac20:	f000 81c1 	beq.w	8afa6 <do_paint_control_rect+0x416>
   8ac24:	f8d9 3154 	ldr.w	r3, [r9, #340]	; 0x154
   8ac28:	4298      	cmp	r0, r3
   8ac2a:	f000 81c3 	beq.w	8afb4 <do_paint_control_rect+0x424>
   8ac2e:	f8d9 3194 	ldr.w	r3, [r9, #404]	; 0x194
   8ac32:	4298      	cmp	r0, r3
   8ac34:	f000 81cc 	beq.w	8afd0 <do_paint_control_rect+0x440>
   8ac38:	f8d9 31d4 	ldr.w	r3, [r9, #468]	; 0x1d4
   8ac3c:	4298      	cmp	r0, r3
   8ac3e:	f000 81c0 	beq.w	8afc2 <do_paint_control_rect+0x432>
   8ac42:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
   8ac46:	4298      	cmp	r0, r3
   8ac48:	f000 81d7 	beq.w	8affa <do_paint_control_rect+0x46a>
   8ac4c:	f8d9 3254 	ldr.w	r3, [r9, #596]	; 0x254
   8ac50:	4298      	cmp	r0, r3
   8ac52:	f000 81cb 	beq.w	8afec <do_paint_control_rect+0x45c>
   8ac56:	f8d9 3294 	ldr.w	r3, [r9, #660]	; 0x294
   8ac5a:	4298      	cmp	r0, r3
   8ac5c:	f000 81bf 	beq.w	8afde <do_paint_control_rect+0x44e>
   8ac60:	f8d9 32d4 	ldr.w	r3, [r9, #724]	; 0x2d4
   8ac64:	4298      	cmp	r0, r3
   8ac66:	f000 81cf 	beq.w	8b008 <do_paint_control_rect+0x478>
   8ac6a:	f8d9 3314 	ldr.w	r3, [r9, #788]	; 0x314
   8ac6e:	4298      	cmp	r0, r3
   8ac70:	f000 81d1 	beq.w	8b016 <do_paint_control_rect+0x486>
   8ac74:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
   8ac78:	4298      	cmp	r0, r3
   8ac7a:	d002      	beq.n	8ac82 <do_paint_control_rect+0xf2>
   8ac7c:	260e      	movs	r6, #14
   8ac7e:	2000      	movs	r0, #0
   8ac80:	e008      	b.n	8ac94 <do_paint_control_rect+0x104>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ac82:	f8d9 034c 	ldr.w	r0, [r9, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ac86:	f010 0020 	ands.w	r0, r0, #32
   8ac8a:	bf18      	it	ne
   8ac8c:	260d      	movne	r6, #13
   8ac8e:	f040 8173 	bne.w	8af78 <do_paint_control_rect+0x3e8>
	if (window_handle == MW_INVALID_HANDLE)
   8ac92:	260e      	movs	r6, #14
	MW_ASSERT(parent_window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8ac94:	4b3a      	ldr	r3, [pc, #232]	; (8ad80 <do_paint_control_rect+0x1f0>)
   8ac96:	f640 2247 	movw	r2, #2631	; 0xa47
   8ac9a:	4936      	ldr	r1, [pc, #216]	; (8ad74 <do_paint_control_rect+0x1e4>)
	if ((mw_all_controls[control_id].control_flags & MW_CONTROL_FLAG_IS_VISIBLE) == 0U ||
   8ac9c:	442f      	add	r7, r5
	MW_ASSERT(parent_window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8ac9e:	47d0      	blx	sl
	if ((mw_all_controls[control_id].control_flags & MW_CONTROL_FLAG_IS_VISIBLE) == 0U ||
   8aca0:	8bbb      	ldrh	r3, [r7, #28]
   8aca2:	f003 0305 	and.w	r3, r3, #5
   8aca6:	2b05      	cmp	r3, #5
   8aca8:	d199      	bne.n	8abde <do_paint_control_rect+0x4e>
			(mw_all_windows[parent_window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED)
   8acaa:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8ad90 <do_paint_control_rect+0x200>
   8acae:	01b3      	lsls	r3, r6, #6
   8acb0:	9302      	str	r3, [sp, #8]
   8acb2:	444b      	add	r3, r9
   8acb4:	68db      	ldr	r3, [r3, #12]
			(mw_all_controls[control_id].control_flags & MW_CONTROL_FLAG_IS_USED) == 0U ||
   8acb6:	06d9      	lsls	r1, r3, #27
   8acb8:	d491      	bmi.n	8abde <do_paint_control_rect+0x4e>
	invalid_rect_copy.x = mw_all_controls[control_id].control_rect.x + invalid_rect->x;
   8acba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   8acbe:	8823      	ldrh	r3, [r4, #0]
   8acc0:	b291      	uxth	r1, r2
   8acc2:	440b      	add	r3, r1
	if (invalid_rect_copy.x > mw_all_controls[control_id].control_rect.x + mw_all_controls[control_id].control_rect.width)
   8acc4:	f9b7 c010 	ldrsh.w	ip, [r7, #16]
	invalid_rect_copy.x = mw_all_controls[control_id].control_rect.x + invalid_rect->x;
   8acc8:	b29b      	uxth	r3, r3
   8acca:	b218      	sxth	r0, r3
	if (invalid_rect_copy.x > mw_all_controls[control_id].control_rect.x + mw_all_controls[control_id].control_rect.width)
   8accc:	4462      	add	r2, ip
   8acce:	4290      	cmp	r0, r2
	invalid_rect_copy.x = mw_all_controls[control_id].control_rect.x + invalid_rect->x;
   8acd0:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
	if (invalid_rect_copy.x > mw_all_controls[control_id].control_rect.x + mw_all_controls[control_id].control_rect.width)
   8acd4:	dc83      	bgt.n	8abde <do_paint_control_rect+0x4e>
	invalid_rect_copy.y = mw_all_controls[control_id].control_rect.y + invalid_rect->y;
   8acd6:	f9b7 e00e 	ldrsh.w	lr, [r7, #14]
   8acda:	8866      	ldrh	r6, [r4, #2]
   8acdc:	fa1f f58e 	uxth.w	r5, lr
	if (invalid_rect_copy.y > mw_all_controls[control_id].control_rect.y + mw_all_controls[control_id].control_rect.height)
   8ace0:	f9b7 8012 	ldrsh.w	r8, [r7, #18]
	invalid_rect_copy.y = mw_all_controls[control_id].control_rect.y + invalid_rect->y;
   8ace4:	442e      	add	r6, r5
   8ace6:	b2b6      	uxth	r6, r6
   8ace8:	b237      	sxth	r7, r6
	if (invalid_rect_copy.y > mw_all_controls[control_id].control_rect.y + mw_all_controls[control_id].control_rect.height)
   8acea:	44c6      	add	lr, r8
   8acec:	4577      	cmp	r7, lr
	invalid_rect_copy.y = mw_all_controls[control_id].control_rect.y + invalid_rect->y;
   8acee:	9500      	str	r5, [sp, #0]
   8acf0:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
	if (invalid_rect_copy.y > mw_all_controls[control_id].control_rect.y + mw_all_controls[control_id].control_rect.height)
   8acf4:	f73f af73 	bgt.w	8abde <do_paint_control_rect+0x4e>
	invalid_rect_copy.width = invalid_rect->width;
   8acf8:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
	if (invalid_rect_copy.x + invalid_rect_copy.width >
   8acfc:	4428      	add	r0, r5
   8acfe:	4282      	cmp	r2, r0
   8ad00:	9501      	str	r5, [sp, #4]
	invalid_rect_copy.width = invalid_rect->width;
   8ad02:	bfae      	itee	ge
   8ad04:	f8bd 3004 	ldrhge.w	r3, [sp, #4]
		invalid_rect_copy.width -= ((invalid_rect_copy.x + invalid_rect_copy.width) -
   8ad08:	4461      	addlt	r1, ip
   8ad0a:	1acb      	sublt	r3, r1, r3
   8ad0c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	invalid_rect_copy.height = invalid_rect->height;
   8ad10:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
	if (invalid_rect_copy.y + invalid_rect_copy.height >
   8ad14:	441f      	add	r7, r3
   8ad16:	45be      	cmp	lr, r7
   8ad18:	f280 82f8 	bge.w	8b30c <do_paint_control_rect+0x77c>
		invalid_rect_copy.height -= ((invalid_rect_copy.y + invalid_rect_copy.height) -
   8ad1c:	9b00      	ldr	r3, [sp, #0]
   8ad1e:	4443      	add	r3, r8
   8ad20:	1b9e      	subs	r6, r3, r6
   8ad22:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
	find_rect_window_intersections(&invalid_rect_copy, &horiz_edges_count, &vert_edges_count);
   8ad26:	a907      	add	r1, sp, #28
   8ad28:	f10d 021e 	add.w	r2, sp, #30
   8ad2c:	a80a      	add	r0, sp, #40	; 0x28
   8ad2e:	4b15      	ldr	r3, [pc, #84]	; (8ad84 <do_paint_control_rect+0x1f4>)
   8ad30:	4798      	blx	r3
	for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   8ad32:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   8ad36:	2901      	cmp	r1, #1
   8ad38:	f43f af51 	beq.w	8abde <do_paint_control_rect+0x4e>
   8ad3c:	2300      	movs	r3, #0
   8ad3e:	4618      	mov	r0, r3
   8ad40:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8ad94 <do_paint_control_rect+0x204>
   8ad44:	9304      	str	r3, [sp, #16]
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8ad46:	f8cd b014 	str.w	fp, [sp, #20]
		rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   8ad4a:	4a0f      	ldr	r2, [pc, #60]	; (8ad88 <do_paint_control_rect+0x1f8>)
   8ad4c:	3301      	adds	r3, #1
   8ad4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		rect_current.y = horizontal_edges[horizontal_edge_counter];
   8ad52:	f932 b010 	ldrsh.w	fp, [r2, r0, lsl #1]
		for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8ad56:	f8bd 201e 	ldrh.w	r2, [sp, #30]
		rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   8ad5a:	eba3 030b 	sub.w	r3, r3, fp
   8ad5e:	b21b      	sxth	r3, r3
		for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8ad60:	2a01      	cmp	r2, #1
		rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   8ad62:	9303      	str	r3, [sp, #12]
		for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8ad64:	f000 8202 	beq.w	8b16c <do_paint_control_rect+0x5dc>
   8ad68:	2300      	movs	r3, #0
   8ad6a:	9300      	str	r3, [sp, #0]
   8ad6c:	461d      	mov	r5, r3
   8ad6e:	e078      	b.n	8ae62 <do_paint_control_rect+0x2d2>
   8ad70:	000a6618 	.word	0x000a6618
   8ad74:	000ab428 	.word	0x000ab428
   8ad78:	20071858 	.word	0x20071858
   8ad7c:	000ab734 	.word	0x000ab734
   8ad80:	000ab764 	.word	0x000ab764
   8ad84:	00087e11 	.word	0x00087e11
   8ad88:	2007180c 	.word	0x2007180c
   8ad8c:	00095add 	.word	0x00095add
   8ad90:	20071bd8 	.word	0x20071bd8
   8ad94:	20071f78 	.word	0x20071f78
		if (mw_all_windows[i].window_handle == window_handle &&
   8ad98:	f8d9 3014 	ldr.w	r3, [r9, #20]
   8ad9c:	4283      	cmp	r3, r0
   8ad9e:	f000 8163 	beq.w	8b068 <do_paint_control_rect+0x4d8>
   8ada2:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
   8ada6:	4298      	cmp	r0, r3
   8ada8:	f000 8166 	beq.w	8b078 <do_paint_control_rect+0x4e8>
   8adac:	f8d9 3094 	ldr.w	r3, [r9, #148]	; 0x94
   8adb0:	4298      	cmp	r0, r3
   8adb2:	f000 8169 	beq.w	8b088 <do_paint_control_rect+0x4f8>
   8adb6:	f8d9 30d4 	ldr.w	r3, [r9, #212]	; 0xd4
   8adba:	4298      	cmp	r0, r3
   8adbc:	f000 816c 	beq.w	8b098 <do_paint_control_rect+0x508>
   8adc0:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
   8adc4:	4298      	cmp	r0, r3
   8adc6:	f000 816f 	beq.w	8b0a8 <do_paint_control_rect+0x518>
   8adca:	f8d9 3154 	ldr.w	r3, [r9, #340]	; 0x154
   8adce:	4298      	cmp	r0, r3
   8add0:	f000 8172 	beq.w	8b0b8 <do_paint_control_rect+0x528>
   8add4:	f8d9 3194 	ldr.w	r3, [r9, #404]	; 0x194
   8add8:	4298      	cmp	r0, r3
   8adda:	f000 8175 	beq.w	8b0c8 <do_paint_control_rect+0x538>
   8adde:	f8d9 31d4 	ldr.w	r3, [r9, #468]	; 0x1d4
   8ade2:	4298      	cmp	r0, r3
   8ade4:	f000 8178 	beq.w	8b0d8 <do_paint_control_rect+0x548>
   8ade8:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
   8adec:	4298      	cmp	r0, r3
   8adee:	f000 8183 	beq.w	8b0f8 <do_paint_control_rect+0x568>
   8adf2:	f8d9 3254 	ldr.w	r3, [r9, #596]	; 0x254
   8adf6:	4298      	cmp	r0, r3
   8adf8:	f000 8176 	beq.w	8b0e8 <do_paint_control_rect+0x558>
   8adfc:	f8d9 3294 	ldr.w	r3, [r9, #660]	; 0x294
   8ae00:	4298      	cmp	r0, r3
   8ae02:	f000 8181 	beq.w	8b108 <do_paint_control_rect+0x578>
   8ae06:	f8d9 32d4 	ldr.w	r3, [r9, #724]	; 0x2d4
   8ae0a:	4298      	cmp	r0, r3
   8ae0c:	f000 8184 	beq.w	8b118 <do_paint_control_rect+0x588>
   8ae10:	f8d9 3314 	ldr.w	r3, [r9, #788]	; 0x314
   8ae14:	4298      	cmp	r0, r3
   8ae16:	f000 8187 	beq.w	8b128 <do_paint_control_rect+0x598>
   8ae1a:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
   8ae1e:	4298      	cmp	r0, r3
   8ae20:	f000 8190 	beq.w	8b144 <do_paint_control_rect+0x5b4>
   8ae24:	240e      	movs	r4, #14
   8ae26:	2000      	movs	r0, #0
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8ae28:	4bc3      	ldr	r3, [pc, #780]	; (8b138 <do_paint_control_rect+0x5a8>)
   8ae2a:	f240 5252 	movw	r2, #1362	; 0x552
   8ae2e:	49c3      	ldr	r1, [pc, #780]	; (8b13c <do_paint_control_rect+0x5ac>)
   8ae30:	47d0      	blx	sl
					mw_all_windows[parent_window_id].z_order)
   8ae32:	9b02      	ldr	r3, [sp, #8]
	return (mw_all_windows[window_id].z_order);
   8ae34:	eb09 1484 	add.w	r4, r9, r4, lsl #6
					mw_all_windows[parent_window_id].z_order)
   8ae38:	444b      	add	r3, r9
			if (find_highest_z_order_at_point(rect_current.x, rect_current.y) !=
   8ae3a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   8ae3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   8ae42:	4293      	cmp	r3, r2
   8ae44:	f000 80ee 	beq.w	8b024 <do_paint_control_rect+0x494>
				if (rect_waiting_to_be_painted)
   8ae48:	9b00      	ldr	r3, [sp, #0]
   8ae4a:	2b00      	cmp	r3, #0
   8ae4c:	f040 8105 	bne.w	8b05a <do_paint_control_rect+0x4ca>
		for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8ae50:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   8ae54:	3501      	adds	r5, #1
   8ae56:	b2ad      	uxth	r5, r5
   8ae58:	3a01      	subs	r2, #1
   8ae5a:	4295      	cmp	r5, r2
   8ae5c:	462b      	mov	r3, r5
   8ae5e:	f080 817f 	bcs.w	8b160 <do_paint_control_rect+0x5d0>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8ae62:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8ae66:	3301      	adds	r3, #1
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8ae68:	f002 0128 	and.w	r1, r2, #40	; 0x28
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8ae6c:	f938 3013 	ldrsh.w	r3, [r8, r3, lsl #1]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8ae70:	2928      	cmp	r1, #40	; 0x28
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8ae72:	9301      	str	r3, [sp, #4]
			rect_current.x = vertical_edges[vertical_edge_counter];
   8ae74:	f938 7015 	ldrsh.w	r7, [r8, r5, lsl #1]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8ae78:	d102      	bne.n	8ae80 <do_paint_control_rect+0x2f0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8ae7a:	06d2      	lsls	r2, r2, #27
   8ae7c:	f140 8180 	bpl.w	8b180 <do_paint_control_rect+0x5f0>
	uint8_t highest_z_order = 0U;
   8ae80:	2600      	movs	r6, #0
	uint8_t window_id = MW_ROOT_WINDOW_ID;
   8ae82:	4634      	mov	r4, r6
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8ae84:	f8d9 208c 	ldr.w	r2, [r9, #140]	; 0x8c
   8ae88:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8ae8c:	2928      	cmp	r1, #40	; 0x28
   8ae8e:	d102      	bne.n	8ae96 <do_paint_control_rect+0x306>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8ae90:	06d3      	lsls	r3, r2, #27
   8ae92:	f140 81be 	bpl.w	8b212 <do_paint_control_rect+0x682>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8ae96:	f8d9 20cc 	ldr.w	r2, [r9, #204]	; 0xcc
   8ae9a:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8ae9e:	2928      	cmp	r1, #40	; 0x28
   8aea0:	d102      	bne.n	8aea8 <do_paint_control_rect+0x318>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8aea2:	06d0      	lsls	r0, r2, #27
   8aea4:	f140 81c4 	bpl.w	8b230 <do_paint_control_rect+0x6a0>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8aea8:	f8d9 210c 	ldr.w	r2, [r9, #268]	; 0x10c
   8aeac:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8aeb0:	2928      	cmp	r1, #40	; 0x28
   8aeb2:	d102      	bne.n	8aeba <do_paint_control_rect+0x32a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8aeb4:	06d1      	lsls	r1, r2, #27
   8aeb6:	f140 81ca 	bpl.w	8b24e <do_paint_control_rect+0x6be>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8aeba:	f8d9 214c 	ldr.w	r2, [r9, #332]	; 0x14c
   8aebe:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8aec2:	2928      	cmp	r1, #40	; 0x28
   8aec4:	d102      	bne.n	8aecc <do_paint_control_rect+0x33c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8aec6:	06d2      	lsls	r2, r2, #27
   8aec8:	f140 81d0 	bpl.w	8b26c <do_paint_control_rect+0x6dc>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8aecc:	f8d9 218c 	ldr.w	r2, [r9, #396]	; 0x18c
   8aed0:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8aed4:	2928      	cmp	r1, #40	; 0x28
   8aed6:	d102      	bne.n	8aede <do_paint_control_rect+0x34e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8aed8:	06d3      	lsls	r3, r2, #27
   8aeda:	f140 81d6 	bpl.w	8b28a <do_paint_control_rect+0x6fa>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8aede:	f8d9 21cc 	ldr.w	r2, [r9, #460]	; 0x1cc
   8aee2:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8aee6:	2928      	cmp	r1, #40	; 0x28
   8aee8:	d102      	bne.n	8aef0 <do_paint_control_rect+0x360>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8aeea:	06d0      	lsls	r0, r2, #27
   8aeec:	f140 81dc 	bpl.w	8b2a8 <do_paint_control_rect+0x718>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8aef0:	f8d9 220c 	ldr.w	r2, [r9, #524]	; 0x20c
   8aef4:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8aef8:	2928      	cmp	r1, #40	; 0x28
   8aefa:	d102      	bne.n	8af02 <do_paint_control_rect+0x372>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8aefc:	06d1      	lsls	r1, r2, #27
   8aefe:	f140 81e2 	bpl.w	8b2c6 <do_paint_control_rect+0x736>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8af02:	f8d9 224c 	ldr.w	r2, [r9, #588]	; 0x24c
   8af06:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8af0a:	2928      	cmp	r1, #40	; 0x28
   8af0c:	d102      	bne.n	8af14 <do_paint_control_rect+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8af0e:	06d2      	lsls	r2, r2, #27
   8af10:	f140 81e8 	bpl.w	8b2e4 <do_paint_control_rect+0x754>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8af14:	f8d9 228c 	ldr.w	r2, [r9, #652]	; 0x28c
   8af18:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8af1c:	2928      	cmp	r1, #40	; 0x28
   8af1e:	d102      	bne.n	8af26 <do_paint_control_rect+0x396>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8af20:	06d3      	lsls	r3, r2, #27
   8af22:	f140 813b 	bpl.w	8b19c <do_paint_control_rect+0x60c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8af26:	f8d9 22cc 	ldr.w	r2, [r9, #716]	; 0x2cc
   8af2a:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8af2e:	2928      	cmp	r1, #40	; 0x28
   8af30:	d102      	bne.n	8af38 <do_paint_control_rect+0x3a8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8af32:	06d0      	lsls	r0, r2, #27
   8af34:	f140 8141 	bpl.w	8b1ba <do_paint_control_rect+0x62a>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8af38:	f8d9 230c 	ldr.w	r2, [r9, #780]	; 0x30c
   8af3c:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8af40:	2928      	cmp	r1, #40	; 0x28
   8af42:	d102      	bne.n	8af4a <do_paint_control_rect+0x3ba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8af44:	06d1      	lsls	r1, r2, #27
   8af46:	f140 8147 	bpl.w	8b1d8 <do_paint_control_rect+0x648>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8af4a:	f8d9 234c 	ldr.w	r2, [r9, #844]	; 0x34c
   8af4e:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8af52:	2928      	cmp	r1, #40	; 0x28
   8af54:	d102      	bne.n	8af5c <do_paint_control_rect+0x3cc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8af56:	06d2      	lsls	r2, r2, #27
   8af58:	f140 814d 	bpl.w	8b1f6 <do_paint_control_rect+0x666>
	return (mw_all_windows[window_id].window_handle);
   8af5c:	eb09 1484 	add.w	r4, r9, r4, lsl #6
   8af60:	6960      	ldr	r0, [r4, #20]
	if (window_handle == MW_INVALID_HANDLE)
   8af62:	2800      	cmp	r0, #0
   8af64:	f47f af18 	bne.w	8ad98 <do_paint_control_rect+0x208>
   8af68:	240e      	movs	r4, #14
   8af6a:	e75d      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8af6c:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8af70:	0699      	lsls	r1, r3, #26
   8af72:	f57f ae48 	bpl.w	8ac06 <do_paint_control_rect+0x76>
   8af76:	2601      	movs	r6, #1
   8af78:	2001      	movs	r0, #1
   8af7a:	e68b      	b.n	8ac94 <do_paint_control_rect+0x104>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8af7c:	f8d9 300c 	ldr.w	r3, [r9, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8af80:	069e      	lsls	r6, r3, #26
   8af82:	f57f ae3b 	bpl.w	8abfc <do_paint_control_rect+0x6c>
   8af86:	2600      	movs	r6, #0
   8af88:	e7f6      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8af8a:	f8d9 30cc 	ldr.w	r3, [r9, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8af8e:	069b      	lsls	r3, r3, #26
   8af90:	f57f ae43 	bpl.w	8ac1a <do_paint_control_rect+0x8a>
   8af94:	2603      	movs	r6, #3
   8af96:	e7ef      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8af98:	f8d9 308c 	ldr.w	r3, [r9, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8af9c:	069a      	lsls	r2, r3, #26
   8af9e:	f57f ae37 	bpl.w	8ac10 <do_paint_control_rect+0x80>
   8afa2:	2602      	movs	r6, #2
   8afa4:	e7e8      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8afa6:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8afaa:	069e      	lsls	r6, r3, #26
   8afac:	f57f ae3a 	bpl.w	8ac24 <do_paint_control_rect+0x94>
   8afb0:	2604      	movs	r6, #4
   8afb2:	e7e1      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8afb4:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8afb8:	0699      	lsls	r1, r3, #26
   8afba:	f57f ae38 	bpl.w	8ac2e <do_paint_control_rect+0x9e>
   8afbe:	2605      	movs	r6, #5
   8afc0:	e7da      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8afc2:	f8d9 31cc 	ldr.w	r3, [r9, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8afc6:	069b      	lsls	r3, r3, #26
   8afc8:	f57f ae3b 	bpl.w	8ac42 <do_paint_control_rect+0xb2>
   8afcc:	2607      	movs	r6, #7
   8afce:	e7d3      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8afd0:	f8d9 318c 	ldr.w	r3, [r9, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8afd4:	069a      	lsls	r2, r3, #26
   8afd6:	f57f ae2f 	bpl.w	8ac38 <do_paint_control_rect+0xa8>
   8afda:	2606      	movs	r6, #6
   8afdc:	e7cc      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8afde:	f8d9 328c 	ldr.w	r3, [r9, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8afe2:	069a      	lsls	r2, r3, #26
   8afe4:	f57f ae3c 	bpl.w	8ac60 <do_paint_control_rect+0xd0>
   8afe8:	260a      	movs	r6, #10
   8afea:	e7c5      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8afec:	f8d9 324c 	ldr.w	r3, [r9, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8aff0:	0699      	lsls	r1, r3, #26
   8aff2:	f57f ae30 	bpl.w	8ac56 <do_paint_control_rect+0xc6>
   8aff6:	2609      	movs	r6, #9
   8aff8:	e7be      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8affa:	f8d9 320c 	ldr.w	r3, [r9, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8affe:	069e      	lsls	r6, r3, #26
   8b000:	f57f ae24 	bpl.w	8ac4c <do_paint_control_rect+0xbc>
   8b004:	2608      	movs	r6, #8
   8b006:	e7b7      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b008:	f8d9 32cc 	ldr.w	r3, [r9, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b00c:	069b      	lsls	r3, r3, #26
   8b00e:	f57f ae2c 	bpl.w	8ac6a <do_paint_control_rect+0xda>
   8b012:	260b      	movs	r6, #11
   8b014:	e7b0      	b.n	8af78 <do_paint_control_rect+0x3e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b016:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b01a:	069e      	lsls	r6, r3, #26
   8b01c:	f57f ae2a 	bpl.w	8ac74 <do_paint_control_rect+0xe4>
   8b020:	260c      	movs	r6, #12
   8b022:	e7a9      	b.n	8af78 <do_paint_control_rect+0x3e8>
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8b024:	9b01      	ldr	r3, [sp, #4]
			if (rect_waiting_to_be_painted)
   8b026:	9900      	ldr	r1, [sp, #0]
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8b028:	1bde      	subs	r6, r3, r7
			(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   8b02a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
			rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8b02e:	b2b6      	uxth	r6, r6
			(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   8b030:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			previous_rect_width = rect_previous.width;
   8b034:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
			previous_rect_left = rect_previous.x;
   8b038:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
			(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   8b03c:	f8ad b022 	strh.w	fp, [sp, #34]	; 0x22
   8b040:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
   8b044:	f8ad 7020 	strh.w	r7, [sp, #32]
			if (rect_waiting_to_be_painted)
   8b048:	2900      	cmp	r1, #0
   8b04a:	f000 8086 	beq.w	8b15a <do_paint_control_rect+0x5ca>
				rect_previous.width += previous_rect_width;
   8b04e:	4416      	add	r6, r2
   8b050:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
				rect_previous.x = previous_rect_left;
   8b054:	f8ad 3020 	strh.w	r3, [sp, #32]
   8b058:	e6fa      	b.n	8ae50 <do_paint_control_rect+0x2c0>
					do_paint_control2(control_handle, &rect_previous);
   8b05a:	4b39      	ldr	r3, [pc, #228]	; (8b140 <do_paint_control_rect+0x5b0>)
   8b05c:	a908      	add	r1, sp, #32
   8b05e:	9805      	ldr	r0, [sp, #20]
   8b060:	4798      	blx	r3
					rect_waiting_to_be_painted = false;
   8b062:	2300      	movs	r3, #0
   8b064:	9300      	str	r3, [sp, #0]
   8b066:	e6f3      	b.n	8ae50 <do_paint_control_rect+0x2c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b068:	f8d9 300c 	ldr.w	r3, [r9, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8b06c:	069b      	lsls	r3, r3, #26
   8b06e:	f57f ae98 	bpl.w	8ada2 <do_paint_control_rect+0x212>
   8b072:	2400      	movs	r4, #0
   8b074:	2001      	movs	r0, #1
   8b076:	e6d7      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b078:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b07c:	069e      	lsls	r6, r3, #26
   8b07e:	f57f ae95 	bpl.w	8adac <do_paint_control_rect+0x21c>
   8b082:	2401      	movs	r4, #1
   8b084:	4620      	mov	r0, r4
   8b086:	e6cf      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b088:	f8d9 308c 	ldr.w	r3, [r9, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b08c:	0699      	lsls	r1, r3, #26
   8b08e:	f57f ae92 	bpl.w	8adb6 <do_paint_control_rect+0x226>
   8b092:	2402      	movs	r4, #2
   8b094:	2001      	movs	r0, #1
   8b096:	e6c7      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b098:	f8d9 30cc 	ldr.w	r3, [r9, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b09c:	069a      	lsls	r2, r3, #26
   8b09e:	f57f ae8f 	bpl.w	8adc0 <do_paint_control_rect+0x230>
   8b0a2:	2403      	movs	r4, #3
   8b0a4:	2001      	movs	r0, #1
   8b0a6:	e6bf      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b0a8:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b0ac:	069b      	lsls	r3, r3, #26
   8b0ae:	f57f ae8c 	bpl.w	8adca <do_paint_control_rect+0x23a>
   8b0b2:	2404      	movs	r4, #4
   8b0b4:	2001      	movs	r0, #1
   8b0b6:	e6b7      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b0b8:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b0bc:	069e      	lsls	r6, r3, #26
   8b0be:	f57f ae89 	bpl.w	8add4 <do_paint_control_rect+0x244>
   8b0c2:	2405      	movs	r4, #5
   8b0c4:	2001      	movs	r0, #1
   8b0c6:	e6af      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b0c8:	f8d9 318c 	ldr.w	r3, [r9, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b0cc:	0699      	lsls	r1, r3, #26
   8b0ce:	f57f ae86 	bpl.w	8adde <do_paint_control_rect+0x24e>
   8b0d2:	2406      	movs	r4, #6
   8b0d4:	2001      	movs	r0, #1
   8b0d6:	e6a7      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b0d8:	f8d9 31cc 	ldr.w	r3, [r9, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b0dc:	069a      	lsls	r2, r3, #26
   8b0de:	f57f ae83 	bpl.w	8ade8 <do_paint_control_rect+0x258>
   8b0e2:	2407      	movs	r4, #7
   8b0e4:	2001      	movs	r0, #1
   8b0e6:	e69f      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b0e8:	f8d9 324c 	ldr.w	r3, [r9, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b0ec:	069e      	lsls	r6, r3, #26
   8b0ee:	f57f ae85 	bpl.w	8adfc <do_paint_control_rect+0x26c>
   8b0f2:	2409      	movs	r4, #9
   8b0f4:	2001      	movs	r0, #1
   8b0f6:	e697      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b0f8:	f8d9 320c 	ldr.w	r3, [r9, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b0fc:	069b      	lsls	r3, r3, #26
   8b0fe:	f57f ae78 	bpl.w	8adf2 <do_paint_control_rect+0x262>
   8b102:	2408      	movs	r4, #8
   8b104:	2001      	movs	r0, #1
   8b106:	e68f      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b108:	f8d9 328c 	ldr.w	r3, [r9, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b10c:	0699      	lsls	r1, r3, #26
   8b10e:	f57f ae7a 	bpl.w	8ae06 <do_paint_control_rect+0x276>
   8b112:	240a      	movs	r4, #10
   8b114:	2001      	movs	r0, #1
   8b116:	e687      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b118:	f8d9 32cc 	ldr.w	r3, [r9, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b11c:	069a      	lsls	r2, r3, #26
   8b11e:	f57f ae77 	bpl.w	8ae10 <do_paint_control_rect+0x280>
   8b122:	240b      	movs	r4, #11
   8b124:	2001      	movs	r0, #1
   8b126:	e67f      	b.n	8ae28 <do_paint_control_rect+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b128:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b12c:	069b      	lsls	r3, r3, #26
   8b12e:	f57f ae74 	bpl.w	8ae1a <do_paint_control_rect+0x28a>
   8b132:	240c      	movs	r4, #12
   8b134:	2001      	movs	r0, #1
   8b136:	e677      	b.n	8ae28 <do_paint_control_rect+0x298>
   8b138:	000ab764 	.word	0x000ab764
   8b13c:	000ab2e8 	.word	0x000ab2e8
   8b140:	00089bb9 	.word	0x00089bb9
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b144:	f8d9 334c 	ldr.w	r3, [r9, #844]	; 0x34c
   8b148:	f003 0320 	and.w	r3, r3, #32
		if (mw_all_windows[i].window_handle == window_handle &&
   8b14c:	2b00      	cmp	r3, #0
   8b14e:	bf0b      	itete	eq
   8b150:	240e      	moveq	r4, #14
   8b152:	240d      	movne	r4, #13
   8b154:	2000      	moveq	r0, #0
   8b156:	2001      	movne	r0, #1
   8b158:	e666      	b.n	8ae28 <do_paint_control_rect+0x298>
			rect_waiting_to_be_painted = true;
   8b15a:	2301      	movs	r3, #1
   8b15c:	9300      	str	r3, [sp, #0]
   8b15e:	e677      	b.n	8ae50 <do_paint_control_rect+0x2c0>
		if (rect_waiting_to_be_painted)
   8b160:	9b00      	ldr	r3, [sp, #0]
   8b162:	2b00      	cmp	r3, #0
   8b164:	f040 80cd 	bne.w	8b302 <do_paint_control_rect+0x772>
   8b168:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   8b16c:	9b04      	ldr	r3, [sp, #16]
   8b16e:	1e4a      	subs	r2, r1, #1
   8b170:	3301      	adds	r3, #1
   8b172:	b29b      	uxth	r3, r3
   8b174:	4293      	cmp	r3, r2
   8b176:	4618      	mov	r0, r3
   8b178:	9304      	str	r3, [sp, #16]
   8b17a:	f4ff ade6 	bcc.w	8ad4a <do_paint_control_rect+0x1ba>
   8b17e:	e52e      	b.n	8abde <do_paint_control_rect+0x4e>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b180:	465a      	mov	r2, fp
   8b182:	4639      	mov	r1, r7
   8b184:	4863      	ldr	r0, [pc, #396]	; (8b314 <do_paint_control_rect+0x784>)
   8b186:	4b64      	ldr	r3, [pc, #400]	; (8b318 <do_paint_control_rect+0x788>)
   8b188:	4798      	blx	r3
   8b18a:	2800      	cmp	r0, #0
   8b18c:	f43f ae78 	beq.w	8ae80 <do_paint_control_rect+0x2f0>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b190:	f899 606c 	ldrb.w	r6, [r9, #108]	; 0x6c
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b194:	1c34      	adds	r4, r6, #0
   8b196:	bf18      	it	ne
   8b198:	2401      	movne	r4, #1
   8b19a:	e673      	b.n	8ae84 <do_paint_control_rect+0x2f4>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b19c:	465a      	mov	r2, fp
   8b19e:	4639      	mov	r1, r7
   8b1a0:	485e      	ldr	r0, [pc, #376]	; (8b31c <do_paint_control_rect+0x78c>)
   8b1a2:	4b5d      	ldr	r3, [pc, #372]	; (8b318 <do_paint_control_rect+0x788>)
   8b1a4:	4798      	blx	r3
   8b1a6:	2800      	cmp	r0, #0
   8b1a8:	f43f aebd 	beq.w	8af26 <do_paint_control_rect+0x396>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b1ac:	f899 22ac 	ldrb.w	r2, [r9, #684]	; 0x2ac
   8b1b0:	4296      	cmp	r6, r2
   8b1b2:	bf3c      	itt	cc
   8b1b4:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b1b6:	240a      	movcc	r4, #10
   8b1b8:	e6b5      	b.n	8af26 <do_paint_control_rect+0x396>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b1ba:	465a      	mov	r2, fp
   8b1bc:	4639      	mov	r1, r7
   8b1be:	4858      	ldr	r0, [pc, #352]	; (8b320 <do_paint_control_rect+0x790>)
   8b1c0:	4b55      	ldr	r3, [pc, #340]	; (8b318 <do_paint_control_rect+0x788>)
   8b1c2:	4798      	blx	r3
   8b1c4:	2800      	cmp	r0, #0
   8b1c6:	f43f aeb7 	beq.w	8af38 <do_paint_control_rect+0x3a8>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b1ca:	f899 22ec 	ldrb.w	r2, [r9, #748]	; 0x2ec
   8b1ce:	4296      	cmp	r6, r2
   8b1d0:	bf3c      	itt	cc
   8b1d2:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b1d4:	240b      	movcc	r4, #11
   8b1d6:	e6af      	b.n	8af38 <do_paint_control_rect+0x3a8>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b1d8:	465a      	mov	r2, fp
   8b1da:	4639      	mov	r1, r7
   8b1dc:	4851      	ldr	r0, [pc, #324]	; (8b324 <do_paint_control_rect+0x794>)
   8b1de:	4b4e      	ldr	r3, [pc, #312]	; (8b318 <do_paint_control_rect+0x788>)
   8b1e0:	4798      	blx	r3
   8b1e2:	2800      	cmp	r0, #0
   8b1e4:	f43f aeb1 	beq.w	8af4a <do_paint_control_rect+0x3ba>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b1e8:	f899 232c 	ldrb.w	r2, [r9, #812]	; 0x32c
   8b1ec:	4296      	cmp	r6, r2
   8b1ee:	bf3c      	itt	cc
   8b1f0:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b1f2:	240c      	movcc	r4, #12
   8b1f4:	e6a9      	b.n	8af4a <do_paint_control_rect+0x3ba>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b1f6:	465a      	mov	r2, fp
   8b1f8:	4639      	mov	r1, r7
   8b1fa:	484b      	ldr	r0, [pc, #300]	; (8b328 <do_paint_control_rect+0x798>)
   8b1fc:	4b46      	ldr	r3, [pc, #280]	; (8b318 <do_paint_control_rect+0x788>)
   8b1fe:	4798      	blx	r3
   8b200:	2800      	cmp	r0, #0
   8b202:	f43f aeab 	beq.w	8af5c <do_paint_control_rect+0x3cc>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b206:	f899 236c 	ldrb.w	r2, [r9, #876]	; 0x36c
   8b20a:	42b2      	cmp	r2, r6
   8b20c:	bf88      	it	hi
   8b20e:	240d      	movhi	r4, #13
   8b210:	e6a4      	b.n	8af5c <do_paint_control_rect+0x3cc>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b212:	465a      	mov	r2, fp
   8b214:	4639      	mov	r1, r7
   8b216:	4845      	ldr	r0, [pc, #276]	; (8b32c <do_paint_control_rect+0x79c>)
   8b218:	4b3f      	ldr	r3, [pc, #252]	; (8b318 <do_paint_control_rect+0x788>)
   8b21a:	4798      	blx	r3
   8b21c:	2800      	cmp	r0, #0
   8b21e:	f43f ae3a 	beq.w	8ae96 <do_paint_control_rect+0x306>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b222:	f899 20ac 	ldrb.w	r2, [r9, #172]	; 0xac
   8b226:	4296      	cmp	r6, r2
   8b228:	bf3c      	itt	cc
   8b22a:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b22c:	2402      	movcc	r4, #2
   8b22e:	e632      	b.n	8ae96 <do_paint_control_rect+0x306>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b230:	465a      	mov	r2, fp
   8b232:	4639      	mov	r1, r7
   8b234:	483e      	ldr	r0, [pc, #248]	; (8b330 <do_paint_control_rect+0x7a0>)
   8b236:	4b38      	ldr	r3, [pc, #224]	; (8b318 <do_paint_control_rect+0x788>)
   8b238:	4798      	blx	r3
   8b23a:	2800      	cmp	r0, #0
   8b23c:	f43f ae34 	beq.w	8aea8 <do_paint_control_rect+0x318>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b240:	f899 20ec 	ldrb.w	r2, [r9, #236]	; 0xec
   8b244:	4296      	cmp	r6, r2
   8b246:	bf3c      	itt	cc
   8b248:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b24a:	2403      	movcc	r4, #3
   8b24c:	e62c      	b.n	8aea8 <do_paint_control_rect+0x318>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b24e:	465a      	mov	r2, fp
   8b250:	4639      	mov	r1, r7
   8b252:	4838      	ldr	r0, [pc, #224]	; (8b334 <do_paint_control_rect+0x7a4>)
   8b254:	4b30      	ldr	r3, [pc, #192]	; (8b318 <do_paint_control_rect+0x788>)
   8b256:	4798      	blx	r3
   8b258:	2800      	cmp	r0, #0
   8b25a:	f43f ae2e 	beq.w	8aeba <do_paint_control_rect+0x32a>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b25e:	f899 212c 	ldrb.w	r2, [r9, #300]	; 0x12c
   8b262:	4296      	cmp	r6, r2
   8b264:	bf3c      	itt	cc
   8b266:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b268:	2404      	movcc	r4, #4
   8b26a:	e626      	b.n	8aeba <do_paint_control_rect+0x32a>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b26c:	465a      	mov	r2, fp
   8b26e:	4639      	mov	r1, r7
   8b270:	4831      	ldr	r0, [pc, #196]	; (8b338 <do_paint_control_rect+0x7a8>)
   8b272:	4b29      	ldr	r3, [pc, #164]	; (8b318 <do_paint_control_rect+0x788>)
   8b274:	4798      	blx	r3
   8b276:	2800      	cmp	r0, #0
   8b278:	f43f ae28 	beq.w	8aecc <do_paint_control_rect+0x33c>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b27c:	f899 216c 	ldrb.w	r2, [r9, #364]	; 0x16c
   8b280:	4296      	cmp	r6, r2
   8b282:	bf3c      	itt	cc
   8b284:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b286:	2405      	movcc	r4, #5
   8b288:	e620      	b.n	8aecc <do_paint_control_rect+0x33c>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b28a:	465a      	mov	r2, fp
   8b28c:	4639      	mov	r1, r7
   8b28e:	482b      	ldr	r0, [pc, #172]	; (8b33c <do_paint_control_rect+0x7ac>)
   8b290:	4b21      	ldr	r3, [pc, #132]	; (8b318 <do_paint_control_rect+0x788>)
   8b292:	4798      	blx	r3
   8b294:	2800      	cmp	r0, #0
   8b296:	f43f ae22 	beq.w	8aede <do_paint_control_rect+0x34e>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b29a:	f899 21ac 	ldrb.w	r2, [r9, #428]	; 0x1ac
   8b29e:	4296      	cmp	r6, r2
   8b2a0:	bf3c      	itt	cc
   8b2a2:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b2a4:	2406      	movcc	r4, #6
   8b2a6:	e61a      	b.n	8aede <do_paint_control_rect+0x34e>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b2a8:	465a      	mov	r2, fp
   8b2aa:	4639      	mov	r1, r7
   8b2ac:	4824      	ldr	r0, [pc, #144]	; (8b340 <do_paint_control_rect+0x7b0>)
   8b2ae:	4b1a      	ldr	r3, [pc, #104]	; (8b318 <do_paint_control_rect+0x788>)
   8b2b0:	4798      	blx	r3
   8b2b2:	2800      	cmp	r0, #0
   8b2b4:	f43f ae1c 	beq.w	8aef0 <do_paint_control_rect+0x360>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b2b8:	f899 21ec 	ldrb.w	r2, [r9, #492]	; 0x1ec
   8b2bc:	4296      	cmp	r6, r2
   8b2be:	bf3c      	itt	cc
   8b2c0:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b2c2:	2407      	movcc	r4, #7
   8b2c4:	e614      	b.n	8aef0 <do_paint_control_rect+0x360>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b2c6:	465a      	mov	r2, fp
   8b2c8:	4639      	mov	r1, r7
   8b2ca:	481e      	ldr	r0, [pc, #120]	; (8b344 <do_paint_control_rect+0x7b4>)
   8b2cc:	4b12      	ldr	r3, [pc, #72]	; (8b318 <do_paint_control_rect+0x788>)
   8b2ce:	4798      	blx	r3
   8b2d0:	2800      	cmp	r0, #0
   8b2d2:	f43f ae16 	beq.w	8af02 <do_paint_control_rect+0x372>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b2d6:	f899 222c 	ldrb.w	r2, [r9, #556]	; 0x22c
   8b2da:	4296      	cmp	r6, r2
   8b2dc:	bf3c      	itt	cc
   8b2de:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b2e0:	2408      	movcc	r4, #8
   8b2e2:	e60e      	b.n	8af02 <do_paint_control_rect+0x372>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8b2e4:	465a      	mov	r2, fp
   8b2e6:	4639      	mov	r1, r7
   8b2e8:	4817      	ldr	r0, [pc, #92]	; (8b348 <do_paint_control_rect+0x7b8>)
   8b2ea:	4b0b      	ldr	r3, [pc, #44]	; (8b318 <do_paint_control_rect+0x788>)
   8b2ec:	4798      	blx	r3
   8b2ee:	2800      	cmp	r0, #0
   8b2f0:	f43f ae10 	beq.w	8af14 <do_paint_control_rect+0x384>
			if (mw_all_windows[i].z_order > highest_z_order)
   8b2f4:	f899 226c 	ldrb.w	r2, [r9, #620]	; 0x26c
   8b2f8:	4296      	cmp	r6, r2
   8b2fa:	bf3c      	itt	cc
   8b2fc:	4616      	movcc	r6, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8b2fe:	2409      	movcc	r4, #9
   8b300:	e608      	b.n	8af14 <do_paint_control_rect+0x384>
			do_paint_control2(control_handle, &rect_previous);
   8b302:	a908      	add	r1, sp, #32
   8b304:	9805      	ldr	r0, [sp, #20]
   8b306:	4b11      	ldr	r3, [pc, #68]	; (8b34c <do_paint_control_rect+0x7bc>)
   8b308:	4798      	blx	r3
   8b30a:	e72d      	b.n	8b168 <do_paint_control_rect+0x5d8>
	invalid_rect_copy.height = invalid_rect->height;
   8b30c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   8b310:	e509      	b.n	8ad26 <do_paint_control_rect+0x196>
   8b312:	bf00      	nop
   8b314:	20071c30 	.word	0x20071c30
   8b318:	00096e7d 	.word	0x00096e7d
   8b31c:	20071e70 	.word	0x20071e70
   8b320:	20071eb0 	.word	0x20071eb0
   8b324:	20071ef0 	.word	0x20071ef0
   8b328:	20071f30 	.word	0x20071f30
   8b32c:	20071c70 	.word	0x20071c70
   8b330:	20071cb0 	.word	0x20071cb0
   8b334:	20071cf0 	.word	0x20071cf0
   8b338:	20071d30 	.word	0x20071d30
   8b33c:	20071d70 	.word	0x20071d70
   8b340:	20071db0 	.word	0x20071db0
   8b344:	20071df0 	.word	0x20071df0
   8b348:	20071e30 	.word	0x20071e30
   8b34c:	00089bb9 	.word	0x00089bb9

0008b350 <set_focus>:
{
   8b350:	2300      	movs	r3, #0
   8b352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b356:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8b654 <set_focus+0x304>
	uint8_t highest_z_order_found = 0U;
   8b35a:	461d      	mov	r5, r3
   8b35c:	4642      	mov	r2, r8
{
   8b35e:	b089      	sub	sp, #36	; 0x24
	uint8_t window_with_highest_z_order_id = MW_ROOT_WINDOW_ID;
   8b360:	9301      	str	r3, [sp, #4]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8b362:	68d1      	ldr	r1, [r2, #12]
   8b364:	b2dc      	uxtb	r4, r3
   8b366:	f001 0028 	and.w	r0, r1, #40	; 0x28
   8b36a:	2828      	cmp	r0, #40	; 0x28
   8b36c:	f103 0301 	add.w	r3, r3, #1
   8b370:	d107      	bne.n	8b382 <set_focus+0x32>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8b372:	06ce      	lsls	r6, r1, #27
   8b374:	d405      	bmi.n	8b382 <set_focus+0x32>
				mw_all_windows[i].z_order > highest_z_order_found)
   8b376:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == 0U &&
   8b37a:	42a9      	cmp	r1, r5
   8b37c:	bf84      	itt	hi
   8b37e:	460d      	movhi	r5, r1
   8b380:	9401      	strhi	r4, [sp, #4]
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8b382:	2b0e      	cmp	r3, #14
   8b384:	f102 0240 	add.w	r2, r2, #64	; 0x40
   8b388:	d1eb      	bne.n	8b362 <set_focus+0x12>
	if (get_window_id_for_handle(window_with_focus_handle) < MW_MAX_WINDOW_COUNT)
   8b38a:	4eac      	ldr	r6, [pc, #688]	; (8b63c <set_focus+0x2ec>)
   8b38c:	6837      	ldr	r7, [r6, #0]
	if (window_handle == MW_INVALID_HANDLE)
   8b38e:	2f00      	cmp	r7, #0
   8b390:	d045      	beq.n	8b41e <set_focus+0xce>
		if (mw_all_windows[i].window_handle == window_handle &&
   8b392:	f8d8 3014 	ldr.w	r3, [r8, #20]
   8b396:	429f      	cmp	r7, r3
   8b398:	f000 8145 	beq.w	8b626 <set_focus+0x2d6>
   8b39c:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
   8b3a0:	4297      	cmp	r7, r2
   8b3a2:	f000 8241 	beq.w	8b828 <set_focus+0x4d8>
   8b3a6:	f8d8 2094 	ldr.w	r2, [r8, #148]	; 0x94
   8b3aa:	4297      	cmp	r7, r2
   8b3ac:	f000 81d3 	beq.w	8b756 <set_focus+0x406>
   8b3b0:	f8d8 20d4 	ldr.w	r2, [r8, #212]	; 0xd4
   8b3b4:	4297      	cmp	r7, r2
   8b3b6:	f000 81d7 	beq.w	8b768 <set_focus+0x418>
   8b3ba:	f8d8 2114 	ldr.w	r2, [r8, #276]	; 0x114
   8b3be:	4297      	cmp	r7, r2
   8b3c0:	f000 81dc 	beq.w	8b77c <set_focus+0x42c>
   8b3c4:	f8d8 2154 	ldr.w	r2, [r8, #340]	; 0x154
   8b3c8:	4297      	cmp	r7, r2
   8b3ca:	f000 81e1 	beq.w	8b790 <set_focus+0x440>
   8b3ce:	f8d8 2194 	ldr.w	r2, [r8, #404]	; 0x194
   8b3d2:	4297      	cmp	r7, r2
   8b3d4:	f000 81e6 	beq.w	8b7a4 <set_focus+0x454>
   8b3d8:	f8d8 21d4 	ldr.w	r2, [r8, #468]	; 0x1d4
   8b3dc:	4297      	cmp	r7, r2
   8b3de:	f000 81eb 	beq.w	8b7b8 <set_focus+0x468>
   8b3e2:	f8d8 2214 	ldr.w	r2, [r8, #532]	; 0x214
   8b3e6:	4297      	cmp	r7, r2
   8b3e8:	f000 81f0 	beq.w	8b7cc <set_focus+0x47c>
   8b3ec:	f8d8 2254 	ldr.w	r2, [r8, #596]	; 0x254
   8b3f0:	4297      	cmp	r7, r2
   8b3f2:	f000 81f5 	beq.w	8b7e0 <set_focus+0x490>
   8b3f6:	f8d8 2294 	ldr.w	r2, [r8, #660]	; 0x294
   8b3fa:	4297      	cmp	r7, r2
   8b3fc:	f000 81fa 	beq.w	8b7f4 <set_focus+0x4a4>
   8b400:	f8d8 22d4 	ldr.w	r2, [r8, #724]	; 0x2d4
   8b404:	4297      	cmp	r7, r2
   8b406:	f000 81ff 	beq.w	8b808 <set_focus+0x4b8>
   8b40a:	f8d8 2314 	ldr.w	r2, [r8, #788]	; 0x314
   8b40e:	4297      	cmp	r7, r2
   8b410:	f000 8204 	beq.w	8b81c <set_focus+0x4cc>
   8b414:	f8d8 2354 	ldr.w	r2, [r8, #852]	; 0x354
   8b418:	4297      	cmp	r7, r2
   8b41a:	f000 811f 	beq.w	8b65c <set_focus+0x30c>
   8b41e:	f8df a238 	ldr.w	sl, [pc, #568]	; 8b658 <set_focus+0x308>
   8b422:	f8df b224 	ldr.w	fp, [pc, #548]	; 8b648 <set_focus+0x2f8>
   8b426:	465c      	mov	r4, fp
   8b428:	f50b 7540 	add.w	r5, fp, #768	; 0x300
   8b42c:	e003      	b.n	8b436 <set_focus+0xe6>
   8b42e:	3420      	adds	r4, #32
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   8b430:	42a5      	cmp	r5, r4
   8b432:	d03b      	beq.n	8b4ac <set_focus+0x15c>
   8b434:	6837      	ldr	r7, [r6, #0]
		if (mw_all_controls[i].parent_handle == window_with_focus_handle &&
   8b436:	6963      	ldr	r3, [r4, #20]
   8b438:	42bb      	cmp	r3, r7
   8b43a:	d1f8      	bne.n	8b42e <set_focus+0xde>
   8b43c:	8ba3      	ldrh	r3, [r4, #28]
   8b43e:	075f      	lsls	r7, r3, #29
   8b440:	d5f5      	bpl.n	8b42e <set_focus+0xde>
			mw_post_message(MW_CONTROL_LOST_FOCUS_MESSAGE,
   8b442:	f8d4 9018 	ldr.w	r9, [r4, #24]
	if (control_handle == MW_INVALID_HANDLE)
   8b446:	f1b9 0f00 	cmp.w	r9, #0
   8b44a:	f000 80da 	beq.w	8b602 <set_focus+0x2b2>
   8b44e:	465a      	mov	r2, fp
   8b450:	2300      	movs	r3, #0
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   8b452:	8b91      	ldrh	r1, [r2, #28]
   8b454:	461f      	mov	r7, r3
   8b456:	0748      	lsls	r0, r1, #29
   8b458:	f103 0301 	add.w	r3, r3, #1
   8b45c:	d503      	bpl.n	8b466 <set_focus+0x116>
   8b45e:	6991      	ldr	r1, [r2, #24]
   8b460:	4589      	cmp	r9, r1
   8b462:	f000 80d4 	beq.w	8b60e <set_focus+0x2be>
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   8b466:	2b18      	cmp	r3, #24
   8b468:	f102 0220 	add.w	r2, r2, #32
   8b46c:	d1f1      	bne.n	8b452 <set_focus+0x102>
   8b46e:	461f      	mov	r7, r3
   8b470:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   8b472:	4b73      	ldr	r3, [pc, #460]	; (8b640 <set_focus+0x2f0>)
   8b474:	f241 5267 	movw	r2, #5479	; 0x1567
   8b478:	4972      	ldr	r1, [pc, #456]	; (8b644 <set_focus+0x2f4>)
   8b47a:	47d0      	blx	sl
	new_message.message_recipient_type = recipient_type;
   8b47c:	2101      	movs	r1, #1
	new_message.message_data = message_data;
   8b47e:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   8b480:	2011      	movs	r0, #17
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   8b482:	4a71      	ldr	r2, [pc, #452]	; (8b648 <set_focus+0x2f8>)
	new_message.message_recipient_type = recipient_type;
   8b484:	f88d 1015 	strb.w	r1, [sp, #21]
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   8b488:	eb02 1747 	add.w	r7, r2, r7, lsl #5
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   8b48c:	8bba      	ldrh	r2, [r7, #28]
	new_message.recipient_handle = recipient_handle;
   8b48e:	f8cd 9010 	str.w	r9, [sp, #16]
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   8b492:	0751      	lsls	r1, r2, #29
	new_message.message_id = message_id;
   8b494:	f88d 0014 	strb.w	r0, [sp, #20]
	new_message.message_data = message_data;
   8b498:	9306      	str	r3, [sp, #24]
	new_message.sender_handle = sender_handle;
   8b49a:	9303      	str	r3, [sp, #12]
	new_message.message_pointer = message_pointer;
   8b49c:	9307      	str	r3, [sp, #28]
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   8b49e:	d5c6      	bpl.n	8b42e <set_focus+0xde>
		(void)mw_message_queue_insert(&new_message);
   8b4a0:	a803      	add	r0, sp, #12
   8b4a2:	4b6a      	ldr	r3, [pc, #424]	; (8b64c <set_focus+0x2fc>)
   8b4a4:	3420      	adds	r4, #32
   8b4a6:	4798      	blx	r3
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   8b4a8:	42a5      	cmp	r5, r4
   8b4aa:	d1c3      	bne.n	8b434 <set_focus+0xe4>
	window_with_focus_handle = mw_all_windows[window_with_highest_z_order_id].window_handle;
   8b4ac:	9b01      	ldr	r3, [sp, #4]
   8b4ae:	eb08 1383 	add.w	r3, r8, r3, lsl #6
   8b4b2:	695d      	ldr	r5, [r3, #20]
   8b4b4:	6035      	str	r5, [r6, #0]
	if (window_handle == MW_INVALID_HANDLE)
   8b4b6:	2d00      	cmp	r5, #0
   8b4b8:	d045      	beq.n	8b546 <set_focus+0x1f6>
		if (mw_all_windows[i].window_handle == window_handle &&
   8b4ba:	f8d8 3014 	ldr.w	r3, [r8, #20]
   8b4be:	42ab      	cmp	r3, r5
   8b4c0:	f000 80a9 	beq.w	8b616 <set_focus+0x2c6>
   8b4c4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
   8b4c8:	42ab      	cmp	r3, r5
   8b4ca:	f000 8136 	beq.w	8b73a <set_focus+0x3ea>
   8b4ce:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
   8b4d2:	429d      	cmp	r5, r3
   8b4d4:	f000 8138 	beq.w	8b748 <set_focus+0x3f8>
   8b4d8:	f8d8 30d4 	ldr.w	r3, [r8, #212]	; 0xd4
   8b4dc:	429d      	cmp	r5, r3
   8b4de:	f000 81b2 	beq.w	8b846 <set_focus+0x4f6>
   8b4e2:	f8d8 3114 	ldr.w	r3, [r8, #276]	; 0x114
   8b4e6:	429d      	cmp	r5, r3
   8b4e8:	f000 81bb 	beq.w	8b862 <set_focus+0x512>
   8b4ec:	f8d8 3154 	ldr.w	r3, [r8, #340]	; 0x154
   8b4f0:	429d      	cmp	r5, r3
   8b4f2:	f000 81af 	beq.w	8b854 <set_focus+0x504>
   8b4f6:	f8d8 3194 	ldr.w	r3, [r8, #404]	; 0x194
   8b4fa:	429d      	cmp	r5, r3
   8b4fc:	f000 81b8 	beq.w	8b870 <set_focus+0x520>
   8b500:	f8d8 31d4 	ldr.w	r3, [r8, #468]	; 0x1d4
   8b504:	429d      	cmp	r5, r3
   8b506:	f000 81ba 	beq.w	8b87e <set_focus+0x52e>
   8b50a:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
   8b50e:	429d      	cmp	r5, r3
   8b510:	f000 81bc 	beq.w	8b88c <set_focus+0x53c>
   8b514:	f8d8 3254 	ldr.w	r3, [r8, #596]	; 0x254
   8b518:	429d      	cmp	r5, r3
   8b51a:	f000 81be 	beq.w	8b89a <set_focus+0x54a>
   8b51e:	f8d8 3294 	ldr.w	r3, [r8, #660]	; 0x294
   8b522:	429d      	cmp	r5, r3
   8b524:	f000 81c7 	beq.w	8b8b6 <set_focus+0x566>
   8b528:	f8d8 32d4 	ldr.w	r3, [r8, #724]	; 0x2d4
   8b52c:	429d      	cmp	r5, r3
   8b52e:	f000 81bb 	beq.w	8b8a8 <set_focus+0x558>
   8b532:	f8d8 3314 	ldr.w	r3, [r8, #788]	; 0x314
   8b536:	429d      	cmp	r5, r3
   8b538:	f000 81c4 	beq.w	8b8c4 <set_focus+0x574>
   8b53c:	f8d8 3354 	ldr.w	r3, [r8, #852]	; 0x354
   8b540:	429d      	cmp	r5, r3
   8b542:	f000 80f0 	beq.w	8b726 <set_focus+0x3d6>
   8b546:	270e      	movs	r7, #14
   8b548:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8b54a:	4b41      	ldr	r3, [pc, #260]	; (8b650 <set_focus+0x300>)
   8b54c:	f241 5262 	movw	r2, #5474	; 0x1562
   8b550:	493c      	ldr	r1, [pc, #240]	; (8b644 <set_focus+0x2f4>)
   8b552:	47d0      	blx	sl
	new_message.message_data = message_data;
   8b554:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   8b556:	2102      	movs	r1, #2
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8b558:	eb08 1887 	add.w	r8, r8, r7, lsl #6
   8b55c:	f8d8 200c 	ldr.w	r2, [r8, #12]
	new_message.recipient_handle = recipient_handle;
   8b560:	9504      	str	r5, [sp, #16]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8b562:	0695      	lsls	r5, r2, #26
	new_message.message_id = message_id;
   8b564:	f88d 1014 	strb.w	r1, [sp, #20]
	new_message.message_data = message_data;
   8b568:	9306      	str	r3, [sp, #24]
	new_message.message_recipient_type = recipient_type;
   8b56a:	f88d 3015 	strb.w	r3, [sp, #21]
	new_message.sender_handle = sender_handle;
   8b56e:	9303      	str	r3, [sp, #12]
	new_message.message_pointer = message_pointer;
   8b570:	9307      	str	r3, [sp, #28]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8b572:	d502      	bpl.n	8b57a <set_focus+0x22a>
		(void)mw_message_queue_insert(&new_message);
   8b574:	a803      	add	r0, sp, #12
   8b576:	4b35      	ldr	r3, [pc, #212]	; (8b64c <set_focus+0x2fc>)
   8b578:	4798      	blx	r3
   8b57a:	4d33      	ldr	r5, [pc, #204]	; (8b648 <set_focus+0x2f8>)
		MW_ASSERT(recipient_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   8b57c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8b644 <set_focus+0x2f4>
   8b580:	e002      	b.n	8b588 <set_focus+0x238>
   8b582:	3520      	adds	r5, #32
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   8b584:	42ac      	cmp	r4, r5
   8b586:	d039      	beq.n	8b5fc <set_focus+0x2ac>
		if (mw_all_controls[i].parent_handle == window_with_focus_handle &&
   8b588:	696a      	ldr	r2, [r5, #20]
   8b58a:	6833      	ldr	r3, [r6, #0]
   8b58c:	429a      	cmp	r2, r3
   8b58e:	d1f8      	bne.n	8b582 <set_focus+0x232>
   8b590:	8bab      	ldrh	r3, [r5, #28]
   8b592:	0758      	lsls	r0, r3, #29
   8b594:	d5f5      	bpl.n	8b582 <set_focus+0x232>
			mw_post_message(MW_CONTROL_GAINED_FOCUS_MESSAGE,
   8b596:	f8d5 8018 	ldr.w	r8, [r5, #24]
	if (control_handle == MW_INVALID_HANDLE)
   8b59a:	f1b8 0f00 	cmp.w	r8, #0
   8b59e:	d033      	beq.n	8b608 <set_focus+0x2b8>
   8b5a0:	465a      	mov	r2, fp
   8b5a2:	2300      	movs	r3, #0
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   8b5a4:	8b91      	ldrh	r1, [r2, #28]
   8b5a6:	461f      	mov	r7, r3
   8b5a8:	0749      	lsls	r1, r1, #29
   8b5aa:	f103 0301 	add.w	r3, r3, #1
   8b5ae:	d502      	bpl.n	8b5b6 <set_focus+0x266>
   8b5b0:	6991      	ldr	r1, [r2, #24]
   8b5b2:	4588      	cmp	r8, r1
   8b5b4:	d02d      	beq.n	8b612 <set_focus+0x2c2>
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   8b5b6:	2b18      	cmp	r3, #24
   8b5b8:	f102 0220 	add.w	r2, r2, #32
   8b5bc:	d1f2      	bne.n	8b5a4 <set_focus+0x254>
   8b5be:	461f      	mov	r7, r3
   8b5c0:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   8b5c2:	4b1f      	ldr	r3, [pc, #124]	; (8b640 <set_focus+0x2f0>)
   8b5c4:	f241 5267 	movw	r2, #5479	; 0x1567
   8b5c8:	4649      	mov	r1, r9
   8b5ca:	47d0      	blx	sl
	new_message.message_data = message_data;
   8b5cc:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   8b5ce:	200f      	movs	r0, #15
	new_message.message_recipient_type = recipient_type;
   8b5d0:	2101      	movs	r1, #1
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   8b5d2:	4a1d      	ldr	r2, [pc, #116]	; (8b648 <set_focus+0x2f8>)
	new_message.message_data = message_data;
   8b5d4:	9306      	str	r3, [sp, #24]
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   8b5d6:	eb02 1747 	add.w	r7, r2, r7, lsl #5
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   8b5da:	8bba      	ldrh	r2, [r7, #28]
	new_message.sender_handle = sender_handle;
   8b5dc:	9303      	str	r3, [sp, #12]
	new_message.message_pointer = message_pointer;
   8b5de:	9307      	str	r3, [sp, #28]
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   8b5e0:	0753      	lsls	r3, r2, #29
	new_message.recipient_handle = recipient_handle;
   8b5e2:	f8cd 8010 	str.w	r8, [sp, #16]
	new_message.message_id = message_id;
   8b5e6:	f88d 0014 	strb.w	r0, [sp, #20]
	new_message.message_recipient_type = recipient_type;
   8b5ea:	f88d 1015 	strb.w	r1, [sp, #21]
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   8b5ee:	d5c8      	bpl.n	8b582 <set_focus+0x232>
		(void)mw_message_queue_insert(&new_message);
   8b5f0:	a803      	add	r0, sp, #12
   8b5f2:	4b16      	ldr	r3, [pc, #88]	; (8b64c <set_focus+0x2fc>)
   8b5f4:	3520      	adds	r5, #32
   8b5f6:	4798      	blx	r3
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   8b5f8:	42ac      	cmp	r4, r5
   8b5fa:	d1c5      	bne.n	8b588 <set_focus+0x238>
}
   8b5fc:	b009      	add	sp, #36	; 0x24
   8b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (control_handle == MW_INVALID_HANDLE)
   8b602:	2718      	movs	r7, #24
   8b604:	4648      	mov	r0, r9
   8b606:	e734      	b.n	8b472 <set_focus+0x122>
   8b608:	2718      	movs	r7, #24
   8b60a:	4640      	mov	r0, r8
   8b60c:	e7d9      	b.n	8b5c2 <set_focus+0x272>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   8b60e:	2001      	movs	r0, #1
   8b610:	e72f      	b.n	8b472 <set_focus+0x122>
   8b612:	2001      	movs	r0, #1
   8b614:	e7d5      	b.n	8b5c2 <set_focus+0x272>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b616:	f8d8 300c 	ldr.w	r3, [r8, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8b61a:	069a      	lsls	r2, r3, #26
   8b61c:	f57f af52 	bpl.w	8b4c4 <set_focus+0x174>
   8b620:	2700      	movs	r7, #0
   8b622:	2001      	movs	r0, #1
   8b624:	e791      	b.n	8b54a <set_focus+0x1fa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b626:	f8d8 200c 	ldr.w	r2, [r8, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8b62a:	0695      	lsls	r5, r2, #26
   8b62c:	f57f aeb6 	bpl.w	8b39c <set_focus+0x4c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b630:	f8d8 300c 	ldr.w	r3, [r8, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8b634:	069a      	lsls	r2, r3, #26
   8b636:	d518      	bpl.n	8b66a <set_focus+0x31a>
   8b638:	2400      	movs	r4, #0
   8b63a:	e150      	b.n	8b8de <set_focus+0x58e>
   8b63c:	20071fb4 	.word	0x20071fb4
   8b640:	000ab734 	.word	0x000ab734
   8b644:	000ab710 	.word	0x000ab710
   8b648:	20071858 	.word	0x20071858
   8b64c:	00095bc1 	.word	0x00095bc1
   8b650:	000ab764 	.word	0x000ab764
   8b654:	20071bd8 	.word	0x20071bd8
   8b658:	00095add 	.word	0x00095add
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b65c:	f8d8 234c 	ldr.w	r2, [r8, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b660:	0691      	lsls	r1, r2, #26
   8b662:	f57f aedc 	bpl.w	8b41e <set_focus+0xce>
   8b666:	429f      	cmp	r7, r3
   8b668:	d0e2      	beq.n	8b630 <set_focus+0x2e0>
   8b66a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
   8b66e:	429f      	cmp	r7, r3
   8b670:	f000 80e2 	beq.w	8b838 <set_focus+0x4e8>
   8b674:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
   8b678:	429f      	cmp	r7, r3
   8b67a:	f000 817b 	beq.w	8b974 <set_focus+0x624>
   8b67e:	f8d8 30d4 	ldr.w	r3, [r8, #212]	; 0xd4
   8b682:	429f      	cmp	r7, r3
   8b684:	f000 816f 	beq.w	8b966 <set_focus+0x616>
   8b688:	f8d8 3114 	ldr.w	r3, [r8, #276]	; 0x114
   8b68c:	429f      	cmp	r7, r3
   8b68e:	f000 8163 	beq.w	8b958 <set_focus+0x608>
   8b692:	f8d8 3154 	ldr.w	r3, [r8, #340]	; 0x154
   8b696:	429f      	cmp	r7, r3
   8b698:	f000 8157 	beq.w	8b94a <set_focus+0x5fa>
   8b69c:	f8d8 3194 	ldr.w	r3, [r8, #404]	; 0x194
   8b6a0:	429f      	cmp	r7, r3
   8b6a2:	f000 814b 	beq.w	8b93c <set_focus+0x5ec>
   8b6a6:	f8d8 31d4 	ldr.w	r3, [r8, #468]	; 0x1d4
   8b6aa:	429f      	cmp	r7, r3
   8b6ac:	f000 8135 	beq.w	8b91a <set_focus+0x5ca>
   8b6b0:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
   8b6b4:	429f      	cmp	r7, r3
   8b6b6:	f000 8114 	beq.w	8b8e2 <set_focus+0x592>
   8b6ba:	f8d8 3254 	ldr.w	r3, [r8, #596]	; 0x254
   8b6be:	429f      	cmp	r7, r3
   8b6c0:	f000 8107 	beq.w	8b8d2 <set_focus+0x582>
   8b6c4:	f8d8 3294 	ldr.w	r3, [r8, #660]	; 0x294
   8b6c8:	429f      	cmp	r7, r3
   8b6ca:	f000 8111 	beq.w	8b8f0 <set_focus+0x5a0>
   8b6ce:	f8d8 32d4 	ldr.w	r3, [r8, #724]	; 0x2d4
   8b6d2:	429f      	cmp	r7, r3
   8b6d4:	f000 8113 	beq.w	8b8fe <set_focus+0x5ae>
   8b6d8:	f8d8 3314 	ldr.w	r3, [r8, #788]	; 0x314
   8b6dc:	429f      	cmp	r7, r3
   8b6de:	f000 8115 	beq.w	8b90c <set_focus+0x5bc>
   8b6e2:	f8d8 3354 	ldr.w	r3, [r8, #852]	; 0x354
   8b6e6:	429f      	cmp	r7, r3
   8b6e8:	f000 811e 	beq.w	8b928 <set_focus+0x5d8>
   8b6ec:	240e      	movs	r4, #14
   8b6ee:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8b6f0:	4ba4      	ldr	r3, [pc, #656]	; (8b984 <set_focus+0x634>)
   8b6f2:	f241 5262 	movw	r2, #5474	; 0x1562
   8b6f6:	49a4      	ldr	r1, [pc, #656]	; (8b988 <set_focus+0x638>)
   8b6f8:	f8df a294 	ldr.w	sl, [pc, #660]	; 8b990 <set_focus+0x640>
   8b6fc:	47d0      	blx	sl
	new_message.message_data = message_data;
   8b6fe:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   8b700:	2103      	movs	r1, #3
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8b702:	eb08 1484 	add.w	r4, r8, r4, lsl #6
   8b706:	68e2      	ldr	r2, [r4, #12]
	new_message.message_data = message_data;
   8b708:	9306      	str	r3, [sp, #24]
	new_message.message_recipient_type = recipient_type;
   8b70a:	f88d 3015 	strb.w	r3, [sp, #21]
	new_message.sender_handle = sender_handle;
   8b70e:	9303      	str	r3, [sp, #12]
	new_message.message_pointer = message_pointer;
   8b710:	9307      	str	r3, [sp, #28]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8b712:	0693      	lsls	r3, r2, #26
	new_message.recipient_handle = recipient_handle;
   8b714:	9704      	str	r7, [sp, #16]
	new_message.message_id = message_id;
   8b716:	f88d 1014 	strb.w	r1, [sp, #20]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8b71a:	d502      	bpl.n	8b722 <set_focus+0x3d2>
		(void)mw_message_queue_insert(&new_message);
   8b71c:	a803      	add	r0, sp, #12
   8b71e:	4b9b      	ldr	r3, [pc, #620]	; (8b98c <set_focus+0x63c>)
   8b720:	4798      	blx	r3
   8b722:	6837      	ldr	r7, [r6, #0]
   8b724:	e67d      	b.n	8b422 <set_focus+0xd2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b726:	f8d8 334c 	ldr.w	r3, [r8, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b72a:	f013 0020 	ands.w	r0, r3, #32
   8b72e:	bf18      	it	ne
   8b730:	270d      	movne	r7, #13
   8b732:	f47f af76 	bne.w	8b622 <set_focus+0x2d2>
   8b736:	270e      	movs	r7, #14
   8b738:	e707      	b.n	8b54a <set_focus+0x1fa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b73a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b73e:	069b      	lsls	r3, r3, #26
   8b740:	f57f aec5 	bpl.w	8b4ce <set_focus+0x17e>
   8b744:	2701      	movs	r7, #1
   8b746:	e76c      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b748:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b74c:	069f      	lsls	r7, r3, #26
   8b74e:	f57f aec3 	bpl.w	8b4d8 <set_focus+0x188>
   8b752:	2702      	movs	r7, #2
   8b754:	e765      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b756:	f8d8 208c 	ldr.w	r2, [r8, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b75a:	0690      	lsls	r0, r2, #26
   8b75c:	d483      	bmi.n	8b666 <set_focus+0x316>
   8b75e:	f8d8 20d4 	ldr.w	r2, [r8, #212]	; 0xd4
   8b762:	4297      	cmp	r7, r2
   8b764:	f47f ae29 	bne.w	8b3ba <set_focus+0x6a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b768:	f8d8 20cc 	ldr.w	r2, [r8, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b76c:	0691      	lsls	r1, r2, #26
   8b76e:	f53f af7a 	bmi.w	8b666 <set_focus+0x316>
   8b772:	f8d8 2114 	ldr.w	r2, [r8, #276]	; 0x114
   8b776:	4297      	cmp	r7, r2
   8b778:	f47f ae24 	bne.w	8b3c4 <set_focus+0x74>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b77c:	f8d8 210c 	ldr.w	r2, [r8, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b780:	0692      	lsls	r2, r2, #26
   8b782:	f53f af70 	bmi.w	8b666 <set_focus+0x316>
   8b786:	f8d8 2154 	ldr.w	r2, [r8, #340]	; 0x154
   8b78a:	4297      	cmp	r7, r2
   8b78c:	f47f ae1f 	bne.w	8b3ce <set_focus+0x7e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b790:	f8d8 214c 	ldr.w	r2, [r8, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b794:	0695      	lsls	r5, r2, #26
   8b796:	f53f af66 	bmi.w	8b666 <set_focus+0x316>
   8b79a:	f8d8 2194 	ldr.w	r2, [r8, #404]	; 0x194
   8b79e:	4297      	cmp	r7, r2
   8b7a0:	f47f ae1a 	bne.w	8b3d8 <set_focus+0x88>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b7a4:	f8d8 218c 	ldr.w	r2, [r8, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b7a8:	0694      	lsls	r4, r2, #26
   8b7aa:	f53f af5c 	bmi.w	8b666 <set_focus+0x316>
   8b7ae:	f8d8 21d4 	ldr.w	r2, [r8, #468]	; 0x1d4
   8b7b2:	4297      	cmp	r7, r2
   8b7b4:	f47f ae15 	bne.w	8b3e2 <set_focus+0x92>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b7b8:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b7bc:	0690      	lsls	r0, r2, #26
   8b7be:	f53f af52 	bmi.w	8b666 <set_focus+0x316>
   8b7c2:	f8d8 2214 	ldr.w	r2, [r8, #532]	; 0x214
   8b7c6:	4297      	cmp	r7, r2
   8b7c8:	f47f ae10 	bne.w	8b3ec <set_focus+0x9c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b7cc:	f8d8 220c 	ldr.w	r2, [r8, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b7d0:	0691      	lsls	r1, r2, #26
   8b7d2:	f53f af48 	bmi.w	8b666 <set_focus+0x316>
   8b7d6:	f8d8 2254 	ldr.w	r2, [r8, #596]	; 0x254
   8b7da:	4297      	cmp	r7, r2
   8b7dc:	f47f ae0b 	bne.w	8b3f6 <set_focus+0xa6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b7e0:	f8d8 224c 	ldr.w	r2, [r8, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b7e4:	0692      	lsls	r2, r2, #26
   8b7e6:	f53f af3e 	bmi.w	8b666 <set_focus+0x316>
   8b7ea:	f8d8 2294 	ldr.w	r2, [r8, #660]	; 0x294
   8b7ee:	4297      	cmp	r7, r2
   8b7f0:	f47f ae06 	bne.w	8b400 <set_focus+0xb0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b7f4:	f8d8 228c 	ldr.w	r2, [r8, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b7f8:	0695      	lsls	r5, r2, #26
   8b7fa:	f53f af34 	bmi.w	8b666 <set_focus+0x316>
   8b7fe:	f8d8 22d4 	ldr.w	r2, [r8, #724]	; 0x2d4
   8b802:	4297      	cmp	r7, r2
   8b804:	f47f ae01 	bne.w	8b40a <set_focus+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b808:	f8d8 22cc 	ldr.w	r2, [r8, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b80c:	0694      	lsls	r4, r2, #26
   8b80e:	f53f af2a 	bmi.w	8b666 <set_focus+0x316>
   8b812:	f8d8 2314 	ldr.w	r2, [r8, #788]	; 0x314
   8b816:	4297      	cmp	r7, r2
   8b818:	f47f adfc 	bne.w	8b414 <set_focus+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b81c:	f8d8 230c 	ldr.w	r2, [r8, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b820:	0690      	lsls	r0, r2, #26
   8b822:	f53f af20 	bmi.w	8b666 <set_focus+0x316>
   8b826:	e5f5      	b.n	8b414 <set_focus+0xc4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b828:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b82c:	0694      	lsls	r4, r2, #26
   8b82e:	f57f adba 	bpl.w	8b3a6 <set_focus+0x56>
   8b832:	429f      	cmp	r7, r3
   8b834:	f43f aefc 	beq.w	8b630 <set_focus+0x2e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b838:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b83c:	069b      	lsls	r3, r3, #26
   8b83e:	f57f af19 	bpl.w	8b674 <set_focus+0x324>
   8b842:	2401      	movs	r4, #1
   8b844:	e04b      	b.n	8b8de <set_focus+0x58e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b846:	f8d8 30cc 	ldr.w	r3, [r8, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b84a:	0698      	lsls	r0, r3, #26
   8b84c:	f57f ae49 	bpl.w	8b4e2 <set_focus+0x192>
   8b850:	2703      	movs	r7, #3
   8b852:	e6e6      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b854:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b858:	069a      	lsls	r2, r3, #26
   8b85a:	f57f ae4c 	bpl.w	8b4f6 <set_focus+0x1a6>
   8b85e:	2705      	movs	r7, #5
   8b860:	e6df      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b862:	f8d8 310c 	ldr.w	r3, [r8, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b866:	0699      	lsls	r1, r3, #26
   8b868:	f57f ae40 	bpl.w	8b4ec <set_focus+0x19c>
   8b86c:	2704      	movs	r7, #4
   8b86e:	e6d8      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b870:	f8d8 318c 	ldr.w	r3, [r8, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b874:	069b      	lsls	r3, r3, #26
   8b876:	f57f ae43 	bpl.w	8b500 <set_focus+0x1b0>
   8b87a:	2706      	movs	r7, #6
   8b87c:	e6d1      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b87e:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b882:	069f      	lsls	r7, r3, #26
   8b884:	f57f ae41 	bpl.w	8b50a <set_focus+0x1ba>
   8b888:	2707      	movs	r7, #7
   8b88a:	e6ca      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b88c:	f8d8 320c 	ldr.w	r3, [r8, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b890:	0698      	lsls	r0, r3, #26
   8b892:	f57f ae3f 	bpl.w	8b514 <set_focus+0x1c4>
   8b896:	2708      	movs	r7, #8
   8b898:	e6c3      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b89a:	f8d8 324c 	ldr.w	r3, [r8, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b89e:	0699      	lsls	r1, r3, #26
   8b8a0:	f57f ae3d 	bpl.w	8b51e <set_focus+0x1ce>
   8b8a4:	2709      	movs	r7, #9
   8b8a6:	e6bc      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b8a8:	f8d8 32cc 	ldr.w	r3, [r8, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b8ac:	069b      	lsls	r3, r3, #26
   8b8ae:	f57f ae40 	bpl.w	8b532 <set_focus+0x1e2>
   8b8b2:	270b      	movs	r7, #11
   8b8b4:	e6b5      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b8b6:	f8d8 328c 	ldr.w	r3, [r8, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b8ba:	069a      	lsls	r2, r3, #26
   8b8bc:	f57f ae34 	bpl.w	8b528 <set_focus+0x1d8>
   8b8c0:	270a      	movs	r7, #10
   8b8c2:	e6ae      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b8c4:	f8d8 330c 	ldr.w	r3, [r8, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b8c8:	069f      	lsls	r7, r3, #26
   8b8ca:	f57f ae37 	bpl.w	8b53c <set_focus+0x1ec>
   8b8ce:	270c      	movs	r7, #12
   8b8d0:	e6a7      	b.n	8b622 <set_focus+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b8d2:	f8d8 324c 	ldr.w	r3, [r8, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b8d6:	069c      	lsls	r4, r3, #26
   8b8d8:	f57f aef4 	bpl.w	8b6c4 <set_focus+0x374>
   8b8dc:	2409      	movs	r4, #9
   8b8de:	2001      	movs	r0, #1
   8b8e0:	e706      	b.n	8b6f0 <set_focus+0x3a0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b8e2:	f8d8 320c 	ldr.w	r3, [r8, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b8e6:	069d      	lsls	r5, r3, #26
   8b8e8:	f57f aee7 	bpl.w	8b6ba <set_focus+0x36a>
   8b8ec:	2408      	movs	r4, #8
   8b8ee:	e7f6      	b.n	8b8de <set_focus+0x58e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b8f0:	f8d8 328c 	ldr.w	r3, [r8, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b8f4:	0698      	lsls	r0, r3, #26
   8b8f6:	f57f aeea 	bpl.w	8b6ce <set_focus+0x37e>
   8b8fa:	240a      	movs	r4, #10
   8b8fc:	e7ef      	b.n	8b8de <set_focus+0x58e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b8fe:	f8d8 32cc 	ldr.w	r3, [r8, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b902:	0699      	lsls	r1, r3, #26
   8b904:	f57f aee8 	bpl.w	8b6d8 <set_focus+0x388>
   8b908:	240b      	movs	r4, #11
   8b90a:	e7e8      	b.n	8b8de <set_focus+0x58e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b90c:	f8d8 330c 	ldr.w	r3, [r8, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b910:	069a      	lsls	r2, r3, #26
   8b912:	f57f aee6 	bpl.w	8b6e2 <set_focus+0x392>
   8b916:	240c      	movs	r4, #12
   8b918:	e7e1      	b.n	8b8de <set_focus+0x58e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b91a:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b91e:	069b      	lsls	r3, r3, #26
   8b920:	f57f aec6 	bpl.w	8b6b0 <set_focus+0x360>
   8b924:	2407      	movs	r4, #7
   8b926:	e7da      	b.n	8b8de <set_focus+0x58e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b928:	f8d8 334c 	ldr.w	r3, [r8, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b92c:	f013 0320 	ands.w	r3, r3, #32
   8b930:	bf18      	it	ne
   8b932:	240d      	movne	r4, #13
   8b934:	d1d3      	bne.n	8b8de <set_focus+0x58e>
   8b936:	4618      	mov	r0, r3
   8b938:	240e      	movs	r4, #14
   8b93a:	e6d9      	b.n	8b6f0 <set_focus+0x3a0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b93c:	f8d8 318c 	ldr.w	r3, [r8, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b940:	069a      	lsls	r2, r3, #26
   8b942:	f57f aeb0 	bpl.w	8b6a6 <set_focus+0x356>
   8b946:	2406      	movs	r4, #6
   8b948:	e7c9      	b.n	8b8de <set_focus+0x58e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b94a:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b94e:	0699      	lsls	r1, r3, #26
   8b950:	f57f aea4 	bpl.w	8b69c <set_focus+0x34c>
   8b954:	2405      	movs	r4, #5
   8b956:	e7c2      	b.n	8b8de <set_focus+0x58e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b958:	f8d8 310c 	ldr.w	r3, [r8, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b95c:	0698      	lsls	r0, r3, #26
   8b95e:	f57f ae98 	bpl.w	8b692 <set_focus+0x342>
   8b962:	2404      	movs	r4, #4
   8b964:	e7bb      	b.n	8b8de <set_focus+0x58e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b966:	f8d8 30cc 	ldr.w	r3, [r8, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8b96a:	069c      	lsls	r4, r3, #26
   8b96c:	f57f ae8c 	bpl.w	8b688 <set_focus+0x338>
   8b970:	2403      	movs	r4, #3
   8b972:	e7b4      	b.n	8b8de <set_focus+0x58e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8b974:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8b978:	069d      	lsls	r5, r3, #26
   8b97a:	f57f ae80 	bpl.w	8b67e <set_focus+0x32e>
   8b97e:	2402      	movs	r4, #2
   8b980:	e7ad      	b.n	8b8de <set_focus+0x58e>
   8b982:	bf00      	nop
   8b984:	000ab764 	.word	0x000ab764
   8b988:	000ab710 	.word	0x000ab710
   8b98c:	00095bc1 	.word	0x00095bc1
   8b990:	00095add 	.word	0x00095add

0008b994 <rationalize_z_orders>:
{
   8b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8b998:	4baa      	ldr	r3, [pc, #680]	; (8bc44 <rationalize_z_orders+0x2b0>)
{
   8b99a:	b099      	sub	sp, #100	; 0x64
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8b99c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   8b99e:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8b9a2:	2928      	cmp	r1, #40	; 0x28
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8b9a4:	bf08      	it	eq
   8b9a6:	f082 0010 	eoreq.w	r0, r2, #16
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8b9aa:	920e      	str	r2, [sp, #56]	; 0x38
   8b9ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   8b9b0:	9101      	str	r1, [sp, #4]
   8b9b2:	f002 0128 	and.w	r1, r2, #40	; 0x28
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8b9b6:	bf0c      	ite	eq
   8b9b8:	f3c0 1000 	ubfxeq	r0, r0, #4, #1
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8b9bc:	2000      	movne	r0, #0
   8b9be:	2928      	cmp	r1, #40	; 0x28
   8b9c0:	920f      	str	r2, [sp, #60]	; 0x3c
   8b9c2:	9102      	str	r1, [sp, #8]
   8b9c4:	d102      	bne.n	8b9cc <rationalize_z_orders+0x38>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8b9c6:	06d4      	lsls	r4, r2, #27
			displayed_windows++;
   8b9c8:	bf58      	it	pl
   8b9ca:	3001      	addpl	r0, #1
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8b9cc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   8b9d0:	f002 0828 	and.w	r8, r2, #40	; 0x28
   8b9d4:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
   8b9d8:	920b      	str	r2, [sp, #44]	; 0x2c
   8b9da:	d103      	bne.n	8b9e4 <rationalize_z_orders+0x50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8b9dc:	06d1      	lsls	r1, r2, #27
			displayed_windows++;
   8b9de:	bf5c      	itt	pl
   8b9e0:	3001      	addpl	r0, #1
   8b9e2:	b2c0      	uxtbpl	r0, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8b9e4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   8b9e8:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8b9ec:	2928      	cmp	r1, #40	; 0x28
   8b9ee:	920a      	str	r2, [sp, #40]	; 0x28
   8b9f0:	9104      	str	r1, [sp, #16]
   8b9f2:	d103      	bne.n	8b9fc <rationalize_z_orders+0x68>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8b9f4:	06d2      	lsls	r2, r2, #27
			displayed_windows++;
   8b9f6:	bf5c      	itt	pl
   8b9f8:	3001      	addpl	r0, #1
   8b9fa:	b2c0      	uxtbpl	r0, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8b9fc:	f8d3 c14c 	ldr.w	ip, [r3, #332]	; 0x14c
   8ba00:	f00c 0228 	and.w	r2, ip, #40	; 0x28
   8ba04:	2a28      	cmp	r2, #40	; 0x28
   8ba06:	9203      	str	r2, [sp, #12]
   8ba08:	d104      	bne.n	8ba14 <rationalize_z_orders+0x80>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8ba0a:	f01c 0f10 	tst.w	ip, #16
			displayed_windows++;
   8ba0e:	bf04      	itt	eq
   8ba10:	3001      	addeq	r0, #1
   8ba12:	b2c0      	uxtbeq	r0, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8ba14:	f8d3 e18c 	ldr.w	lr, [r3, #396]	; 0x18c
   8ba18:	f00e 0228 	and.w	r2, lr, #40	; 0x28
   8ba1c:	2a28      	cmp	r2, #40	; 0x28
   8ba1e:	9206      	str	r2, [sp, #24]
   8ba20:	d104      	bne.n	8ba2c <rationalize_z_orders+0x98>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8ba22:	f01e 0f10 	tst.w	lr, #16
			displayed_windows++;
   8ba26:	bf04      	itt	eq
   8ba28:	3001      	addeq	r0, #1
   8ba2a:	b2c0      	uxtbeq	r0, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8ba2c:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
   8ba30:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8ba34:	2928      	cmp	r1, #40	; 0x28
   8ba36:	9211      	str	r2, [sp, #68]	; 0x44
   8ba38:	9105      	str	r1, [sp, #20]
   8ba3a:	d103      	bne.n	8ba44 <rationalize_z_orders+0xb0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8ba3c:	06d7      	lsls	r7, r2, #27
			displayed_windows++;
   8ba3e:	bf5c      	itt	pl
   8ba40:	3001      	addpl	r0, #1
   8ba42:	b2c0      	uxtbpl	r0, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8ba44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
   8ba48:	f002 0a28 	and.w	sl, r2, #40	; 0x28
   8ba4c:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
   8ba50:	9210      	str	r2, [sp, #64]	; 0x40
   8ba52:	d103      	bne.n	8ba5c <rationalize_z_orders+0xc8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8ba54:	06d6      	lsls	r6, r2, #27
			displayed_windows++;
   8ba56:	bf5c      	itt	pl
   8ba58:	3001      	addpl	r0, #1
   8ba5a:	b2c0      	uxtbpl	r0, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8ba5c:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
   8ba60:	f002 0b28 	and.w	fp, r2, #40	; 0x28
   8ba64:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
   8ba68:	920d      	str	r2, [sp, #52]	; 0x34
   8ba6a:	d103      	bne.n	8ba74 <rationalize_z_orders+0xe0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8ba6c:	06d5      	lsls	r5, r2, #27
			displayed_windows++;
   8ba6e:	bf5c      	itt	pl
   8ba70:	3001      	addpl	r0, #1
   8ba72:	b2c0      	uxtbpl	r0, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8ba74:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
   8ba78:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8ba7c:	2928      	cmp	r1, #40	; 0x28
   8ba7e:	920c      	str	r2, [sp, #48]	; 0x30
   8ba80:	9107      	str	r1, [sp, #28]
   8ba82:	d103      	bne.n	8ba8c <rationalize_z_orders+0xf8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8ba84:	06d4      	lsls	r4, r2, #27
			displayed_windows++;
   8ba86:	bf5c      	itt	pl
   8ba88:	3001      	addpl	r0, #1
   8ba8a:	b2c0      	uxtbpl	r0, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8ba8c:	f8d3 72cc 	ldr.w	r7, [r3, #716]	; 0x2cc
   8ba90:	f007 0228 	and.w	r2, r7, #40	; 0x28
   8ba94:	2a28      	cmp	r2, #40	; 0x28
   8ba96:	9208      	str	r2, [sp, #32]
   8ba98:	d103      	bne.n	8baa2 <rationalize_z_orders+0x10e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8ba9a:	06f9      	lsls	r1, r7, #27
			displayed_windows++;
   8ba9c:	bf5c      	itt	pl
   8ba9e:	3001      	addpl	r0, #1
   8baa0:	b2c0      	uxtbpl	r0, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8baa2:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
   8baa6:	f006 0228 	and.w	r2, r6, #40	; 0x28
   8baaa:	2a28      	cmp	r2, #40	; 0x28
   8baac:	9209      	str	r2, [sp, #36]	; 0x24
   8baae:	d103      	bne.n	8bab8 <rationalize_z_orders+0x124>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bab0:	06f2      	lsls	r2, r6, #27
			displayed_windows++;
   8bab2:	bf5c      	itt	pl
   8bab4:	3001      	addpl	r0, #1
   8bab6:	b2c0      	uxtbpl	r0, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bab8:	f8d3 234c 	ldr.w	r2, [r3, #844]	; 0x34c
   8babc:	f002 0928 	and.w	r9, r2, #40	; 0x28
   8bac0:	f1b9 0f28 	cmp.w	r9, #40	; 0x28
   8bac4:	d104      	bne.n	8bad0 <rationalize_z_orders+0x13c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bac6:	f012 0110 	ands.w	r1, r2, #16
   8baca:	9117      	str	r1, [sp, #92]	; 0x5c
   8bacc:	f000 8102 	beq.w	8bcd4 <rationalize_z_orders+0x340>
	while (number_of_windows_rationalized < existing_window_count)
   8bad0:	2800      	cmp	r0, #0
   8bad2:	f000 8083 	beq.w	8bbdc <rationalize_z_orders+0x248>
   8bad6:	f002 0210 	and.w	r2, r2, #16
   8bada:	9217      	str	r2, [sp, #92]	; 0x5c
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == 0U)
   8badc:	2400      	movs	r4, #0
   8bade:	990e      	ldr	r1, [sp, #56]	; 0x38
   8bae0:	2201      	movs	r2, #1
   8bae2:	f001 0110 	and.w	r1, r1, #16
   8bae6:	910e      	str	r1, [sp, #56]	; 0x38
   8bae8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8baea:	4625      	mov	r5, r4
   8baec:	f001 0110 	and.w	r1, r1, #16
   8baf0:	910f      	str	r1, [sp, #60]	; 0x3c
   8baf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8baf4:	9212      	str	r2, [sp, #72]	; 0x48
   8baf6:	f001 0110 	and.w	r1, r1, #16
   8bafa:	910b      	str	r1, [sp, #44]	; 0x2c
   8bafc:	990a      	ldr	r1, [sp, #40]	; 0x28
   8bafe:	4a52      	ldr	r2, [pc, #328]	; (8bc48 <rationalize_z_orders+0x2b4>)
   8bb00:	f001 0110 	and.w	r1, r1, #16
   8bb04:	910a      	str	r1, [sp, #40]	; 0x28
   8bb06:	f00c 0110 	and.w	r1, ip, #16
   8bb0a:	9113      	str	r1, [sp, #76]	; 0x4c
   8bb0c:	f00e 0110 	and.w	r1, lr, #16
   8bb10:	9114      	str	r1, [sp, #80]	; 0x50
   8bb12:	9911      	ldr	r1, [sp, #68]	; 0x44
   8bb14:	f001 0110 	and.w	r1, r1, #16
   8bb18:	9111      	str	r1, [sp, #68]	; 0x44
   8bb1a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8bb1c:	f001 0110 	and.w	r1, r1, #16
   8bb20:	9110      	str	r1, [sp, #64]	; 0x40
   8bb22:	990d      	ldr	r1, [sp, #52]	; 0x34
   8bb24:	f001 0110 	and.w	r1, r1, #16
   8bb28:	910d      	str	r1, [sp, #52]	; 0x34
   8bb2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8bb2c:	f001 0110 	and.w	r1, r1, #16
   8bb30:	910c      	str	r1, [sp, #48]	; 0x30
   8bb32:	f007 0110 	and.w	r1, r7, #16
   8bb36:	9115      	str	r1, [sp, #84]	; 0x54
   8bb38:	f006 0110 	and.w	r1, r6, #16
   8bb3c:	9116      	str	r1, [sp, #88]	; 0x58
   8bb3e:	2101      	movs	r1, #1
   8bb40:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8bb44:	4e3f      	ldr	r6, [pc, #252]	; (8bc44 <rationalize_z_orders+0x2b0>)
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bb46:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
   8bb48:	f007 0e28 	and.w	lr, r7, #40	; 0x28
   8bb4c:	f1be 0f28 	cmp.w	lr, #40	; 0x28
   8bb50:	d108      	bne.n	8bb64 <rationalize_z_orders+0x1d0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bb52:	06ff      	lsls	r7, r7, #27
   8bb54:	d406      	bmi.n	8bb64 <rationalize_z_orders+0x1d0>
			if (mw_all_windows[i].z_order < next_z_order && mw_all_windows[i].z_order > z_order)
   8bb56:	f896 706c 	ldrb.w	r7, [r6, #108]	; 0x6c
   8bb5a:	4567      	cmp	r7, ip
   8bb5c:	d202      	bcs.n	8bb64 <rationalize_z_orders+0x1d0>
   8bb5e:	42a7      	cmp	r7, r4
   8bb60:	bf88      	it	hi
   8bb62:	46bc      	movhi	ip, r7
   8bb64:	3640      	adds	r6, #64	; 0x40
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8bb66:	4296      	cmp	r6, r2
   8bb68:	d1ed      	bne.n	8bb46 <rationalize_z_orders+0x1b2>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bb6a:	f893 406c 	ldrb.w	r4, [r3, #108]	; 0x6c
   8bb6e:	4564      	cmp	r4, ip
   8bb70:	d05f      	beq.n	8bc32 <rationalize_z_orders+0x29e>
   8bb72:	f893 40ac 	ldrb.w	r4, [r3, #172]	; 0xac
   8bb76:	4564      	cmp	r4, ip
   8bb78:	d053      	beq.n	8bc22 <rationalize_z_orders+0x28e>
   8bb7a:	f893 40ec 	ldrb.w	r4, [r3, #236]	; 0xec
   8bb7e:	4564      	cmp	r4, ip
   8bb80:	d047      	beq.n	8bc12 <rationalize_z_orders+0x27e>
   8bb82:	f893 412c 	ldrb.w	r4, [r3, #300]	; 0x12c
   8bb86:	4564      	cmp	r4, ip
   8bb88:	d03b      	beq.n	8bc02 <rationalize_z_orders+0x26e>
   8bb8a:	f893 416c 	ldrb.w	r4, [r3, #364]	; 0x16c
   8bb8e:	4564      	cmp	r4, ip
   8bb90:	d029      	beq.n	8bbe6 <rationalize_z_orders+0x252>
   8bb92:	f893 41ac 	ldrb.w	r4, [r3, #428]	; 0x1ac
   8bb96:	4564      	cmp	r4, ip
   8bb98:	d06a      	beq.n	8bc70 <rationalize_z_orders+0x2dc>
   8bb9a:	f893 41ec 	ldrb.w	r4, [r3, #492]	; 0x1ec
   8bb9e:	4564      	cmp	r4, ip
   8bba0:	d076      	beq.n	8bc90 <rationalize_z_orders+0x2fc>
   8bba2:	f893 422c 	ldrb.w	r4, [r3, #556]	; 0x22c
   8bba6:	4564      	cmp	r4, ip
   8bba8:	d06a      	beq.n	8bc80 <rationalize_z_orders+0x2ec>
   8bbaa:	f893 426c 	ldrb.w	r4, [r3, #620]	; 0x26c
   8bbae:	4564      	cmp	r4, ip
   8bbb0:	d056      	beq.n	8bc60 <rationalize_z_orders+0x2cc>
   8bbb2:	f893 42ac 	ldrb.w	r4, [r3, #684]	; 0x2ac
   8bbb6:	4564      	cmp	r4, ip
   8bbb8:	d04a      	beq.n	8bc50 <rationalize_z_orders+0x2bc>
   8bbba:	f893 42ec 	ldrb.w	r4, [r3, #748]	; 0x2ec
   8bbbe:	4564      	cmp	r4, ip
   8bbc0:	d07e      	beq.n	8bcc0 <rationalize_z_orders+0x32c>
   8bbc2:	f893 432c 	ldrb.w	r4, [r3, #812]	; 0x32c
   8bbc6:	4564      	cmp	r4, ip
   8bbc8:	d072      	beq.n	8bcb0 <rationalize_z_orders+0x31c>
   8bbca:	f893 436c 	ldrb.w	r4, [r3, #876]	; 0x36c
   8bbce:	4564      	cmp	r4, ip
   8bbd0:	d066      	beq.n	8bca0 <rationalize_z_orders+0x30c>
		next_z_order_rationalized++;
   8bbd2:	3101      	adds	r1, #1
	while (number_of_windows_rationalized < existing_window_count)
   8bbd4:	4285      	cmp	r5, r0
		next_z_order_rationalized++;
   8bbd6:	b2c9      	uxtb	r1, r1
   8bbd8:	4664      	mov	r4, ip
	while (number_of_windows_rationalized < existing_window_count)
   8bbda:	d3b1      	bcc.n	8bb40 <rationalize_z_orders+0x1ac>
	set_focus();
   8bbdc:	4b1b      	ldr	r3, [pc, #108]	; (8bc4c <rationalize_z_orders+0x2b8>)
}
   8bbde:	b019      	add	sp, #100	; 0x64
   8bbe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	set_focus();
   8bbe4:	4718      	bx	r3
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bbe6:	9c03      	ldr	r4, [sp, #12]
   8bbe8:	2c28      	cmp	r4, #40	; 0x28
   8bbea:	d1d2      	bne.n	8bb92 <rationalize_z_orders+0x1fe>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bbec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8bbee:	2c00      	cmp	r4, #0
   8bbf0:	d1cf      	bne.n	8bb92 <rationalize_z_orders+0x1fe>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bbf2:	2405      	movs	r4, #5
				mw_all_windows[i].z_order = next_z_order_rationalized;
   8bbf4:	eb03 1484 	add.w	r4, r3, r4, lsl #6
				number_of_windows_rationalized++;
   8bbf8:	3501      	adds	r5, #1
				mw_all_windows[i].z_order = next_z_order_rationalized;
   8bbfa:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
				number_of_windows_rationalized++;
   8bbfe:	b2ed      	uxtb	r5, r5
				break;
   8bc00:	e7e7      	b.n	8bbd2 <rationalize_z_orders+0x23e>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bc02:	9c04      	ldr	r4, [sp, #16]
   8bc04:	2c28      	cmp	r4, #40	; 0x28
   8bc06:	d1c0      	bne.n	8bb8a <rationalize_z_orders+0x1f6>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bc08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8bc0a:	2c00      	cmp	r4, #0
   8bc0c:	d1bd      	bne.n	8bb8a <rationalize_z_orders+0x1f6>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bc0e:	2404      	movs	r4, #4
   8bc10:	e7f0      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bc12:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
   8bc16:	d1b4      	bne.n	8bb82 <rationalize_z_orders+0x1ee>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bc18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8bc1a:	2c00      	cmp	r4, #0
   8bc1c:	d1b1      	bne.n	8bb82 <rationalize_z_orders+0x1ee>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bc1e:	2403      	movs	r4, #3
   8bc20:	e7e8      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bc22:	9c02      	ldr	r4, [sp, #8]
   8bc24:	2c28      	cmp	r4, #40	; 0x28
   8bc26:	d1a8      	bne.n	8bb7a <rationalize_z_orders+0x1e6>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bc28:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8bc2a:	2c00      	cmp	r4, #0
   8bc2c:	d1a5      	bne.n	8bb7a <rationalize_z_orders+0x1e6>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bc2e:	2402      	movs	r4, #2
   8bc30:	e7e0      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bc32:	9c01      	ldr	r4, [sp, #4]
   8bc34:	2c28      	cmp	r4, #40	; 0x28
   8bc36:	d19c      	bne.n	8bb72 <rationalize_z_orders+0x1de>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bc38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8bc3a:	2c00      	cmp	r4, #0
   8bc3c:	d199      	bne.n	8bb72 <rationalize_z_orders+0x1de>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bc3e:	2401      	movs	r4, #1
   8bc40:	e7d8      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bc42:	bf00      	nop
   8bc44:	20071bd8 	.word	0x20071bd8
   8bc48:	20071f18 	.word	0x20071f18
   8bc4c:	0008b351 	.word	0x0008b351
   8bc50:	9c07      	ldr	r4, [sp, #28]
   8bc52:	2c28      	cmp	r4, #40	; 0x28
   8bc54:	d1b1      	bne.n	8bbba <rationalize_z_orders+0x226>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bc56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8bc58:	2c00      	cmp	r4, #0
   8bc5a:	d1ae      	bne.n	8bbba <rationalize_z_orders+0x226>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bc5c:	240a      	movs	r4, #10
   8bc5e:	e7c9      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bc60:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
   8bc64:	d1a5      	bne.n	8bbb2 <rationalize_z_orders+0x21e>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bc66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   8bc68:	2c00      	cmp	r4, #0
   8bc6a:	d1a2      	bne.n	8bbb2 <rationalize_z_orders+0x21e>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bc6c:	2409      	movs	r4, #9
   8bc6e:	e7c1      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bc70:	9c06      	ldr	r4, [sp, #24]
   8bc72:	2c28      	cmp	r4, #40	; 0x28
   8bc74:	d191      	bne.n	8bb9a <rationalize_z_orders+0x206>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bc76:	9c14      	ldr	r4, [sp, #80]	; 0x50
   8bc78:	2c00      	cmp	r4, #0
   8bc7a:	d18e      	bne.n	8bb9a <rationalize_z_orders+0x206>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bc7c:	2406      	movs	r4, #6
   8bc7e:	e7b9      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bc80:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
   8bc84:	d191      	bne.n	8bbaa <rationalize_z_orders+0x216>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bc86:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8bc88:	2c00      	cmp	r4, #0
   8bc8a:	d18e      	bne.n	8bbaa <rationalize_z_orders+0x216>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bc8c:	2408      	movs	r4, #8
   8bc8e:	e7b1      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bc90:	9c05      	ldr	r4, [sp, #20]
   8bc92:	2c28      	cmp	r4, #40	; 0x28
   8bc94:	d185      	bne.n	8bba2 <rationalize_z_orders+0x20e>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bc96:	9c11      	ldr	r4, [sp, #68]	; 0x44
   8bc98:	2c00      	cmp	r4, #0
   8bc9a:	d182      	bne.n	8bba2 <rationalize_z_orders+0x20e>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bc9c:	2407      	movs	r4, #7
   8bc9e:	e7a9      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bca0:	f1b9 0f28 	cmp.w	r9, #40	; 0x28
   8bca4:	d195      	bne.n	8bbd2 <rationalize_z_orders+0x23e>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bca6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   8bca8:	2c00      	cmp	r4, #0
   8bcaa:	d192      	bne.n	8bbd2 <rationalize_z_orders+0x23e>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bcac:	240d      	movs	r4, #13
   8bcae:	e7a1      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bcb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8bcb2:	2c28      	cmp	r4, #40	; 0x28
   8bcb4:	d189      	bne.n	8bbca <rationalize_z_orders+0x236>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bcb6:	9c16      	ldr	r4, [sp, #88]	; 0x58
   8bcb8:	2c00      	cmp	r4, #0
   8bcba:	d186      	bne.n	8bbca <rationalize_z_orders+0x236>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bcbc:	240c      	movs	r4, #12
   8bcbe:	e799      	b.n	8bbf4 <rationalize_z_orders+0x260>
   8bcc0:	9c08      	ldr	r4, [sp, #32]
   8bcc2:	2c28      	cmp	r4, #40	; 0x28
   8bcc4:	f47f af7d 	bne.w	8bbc2 <rationalize_z_orders+0x22e>
					(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8bcc8:	9c15      	ldr	r4, [sp, #84]	; 0x54
   8bcca:	2c00      	cmp	r4, #0
   8bccc:	f47f af79 	bne.w	8bbc2 <rationalize_z_orders+0x22e>
			if (mw_all_windows[i].z_order == next_z_order_existing && (mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8bcd0:	240b      	movs	r4, #11
   8bcd2:	e78f      	b.n	8bbf4 <rationalize_z_orders+0x260>
			displayed_windows++;
   8bcd4:	3001      	adds	r0, #1
   8bcd6:	b2c0      	uxtb	r0, r0
   8bcd8:	e700      	b.n	8badc <rationalize_z_orders+0x148>
   8bcda:	bf00      	nop

0008bcdc <do_paint_window_frame2>:
	MW_ASSERT(invalid_rect != (void*)0, "Null pointer argument");
   8bcdc:	1c13      	adds	r3, r2, #0
   8bcde:	bf18      	it	ne
   8bce0:	2301      	movne	r3, #1
{
   8bce2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bce6:	4683      	mov	fp, r0
   8bce8:	b093      	sub	sp, #76	; 0x4c
   8bcea:	9102      	str	r1, [sp, #8]
	MW_ASSERT(invalid_rect != (void*)0, "Null pointer argument");
   8bcec:	4618      	mov	r0, r3
   8bcee:	4616      	mov	r6, r2
   8bcf0:	4bb9      	ldr	r3, [pc, #740]	; (8bfd8 <do_paint_window_frame2+0x2fc>)
   8bcf2:	f640 025a 	movw	r2, #2138	; 0x85a
   8bcf6:	49b9      	ldr	r1, [pc, #740]	; (8bfdc <do_paint_window_frame2+0x300>)
   8bcf8:	4cb9      	ldr	r4, [pc, #740]	; (8bfe0 <do_paint_window_frame2+0x304>)
   8bcfa:	47a0      	blx	r4
	if (window_handle == MW_INVALID_HANDLE)
   8bcfc:	f1bb 0f00 	cmp.w	fp, #0
   8bd00:	d047      	beq.n	8bd92 <do_paint_window_frame2+0xb6>
		if (mw_all_windows[i].window_handle == window_handle &&
   8bd02:	4db8      	ldr	r5, [pc, #736]	; (8bfe4 <do_paint_window_frame2+0x308>)
   8bd04:	696b      	ldr	r3, [r5, #20]
   8bd06:	459b      	cmp	fp, r3
   8bd08:	f000 82a7 	beq.w	8c25a <do_paint_window_frame2+0x57e>
   8bd0c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   8bd0e:	459b      	cmp	fp, r3
   8bd10:	f000 82bf 	beq.w	8c292 <do_paint_window_frame2+0x5b6>
   8bd14:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   8bd18:	459b      	cmp	fp, r3
   8bd1a:	f000 82c0 	beq.w	8c29e <do_paint_window_frame2+0x5c2>
   8bd1e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   8bd22:	459b      	cmp	fp, r3
   8bd24:	f000 82c2 	beq.w	8c2ac <do_paint_window_frame2+0x5d0>
   8bd28:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
   8bd2c:	459b      	cmp	fp, r3
   8bd2e:	f000 82c4 	beq.w	8c2ba <do_paint_window_frame2+0x5de>
   8bd32:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   8bd36:	459b      	cmp	fp, r3
   8bd38:	f000 82c6 	beq.w	8c2c8 <do_paint_window_frame2+0x5ec>
   8bd3c:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   8bd40:	459b      	cmp	fp, r3
   8bd42:	f000 82c8 	beq.w	8c2d6 <do_paint_window_frame2+0x5fa>
   8bd46:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   8bd4a:	459b      	cmp	fp, r3
   8bd4c:	f000 82fc 	beq.w	8c348 <do_paint_window_frame2+0x66c>
   8bd50:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
   8bd54:	459b      	cmp	fp, r3
   8bd56:	f000 82fe 	beq.w	8c356 <do_paint_window_frame2+0x67a>
   8bd5a:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
   8bd5e:	459b      	cmp	fp, r3
   8bd60:	f000 8300 	beq.w	8c364 <do_paint_window_frame2+0x688>
   8bd64:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
   8bd68:	459b      	cmp	fp, r3
   8bd6a:	f000 8302 	beq.w	8c372 <do_paint_window_frame2+0x696>
   8bd6e:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
   8bd72:	459b      	cmp	fp, r3
   8bd74:	f000 8304 	beq.w	8c380 <do_paint_window_frame2+0x6a4>
   8bd78:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
   8bd7c:	459b      	cmp	fp, r3
   8bd7e:	f000 8306 	beq.w	8c38e <do_paint_window_frame2+0x6b2>
   8bd82:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
   8bd86:	459b      	cmp	fp, r3
   8bd88:	f000 8308 	beq.w	8c39c <do_paint_window_frame2+0x6c0>
   8bd8c:	230e      	movs	r3, #14
   8bd8e:	2000      	movs	r0, #0
   8bd90:	e002      	b.n	8bd98 <do_paint_window_frame2+0xbc>
	if (window_handle == MW_INVALID_HANDLE)
   8bd92:	230e      	movs	r3, #14
   8bd94:	4658      	mov	r0, fp
   8bd96:	4d93      	ldr	r5, [pc, #588]	; (8bfe4 <do_paint_window_frame2+0x308>)
	draw_info.clip_rect.x = invalid_rect->x - mw_all_windows[window_id].window_rect.x;
   8bd98:	019b      	lsls	r3, r3, #6
   8bd9a:	461c      	mov	r4, r3
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8bd9c:	f640 025e 	movw	r2, #2142	; 0x85e
   8bda0:	4b91      	ldr	r3, [pc, #580]	; (8bfe8 <do_paint_window_frame2+0x30c>)
   8bda2:	498e      	ldr	r1, [pc, #568]	; (8bfdc <do_paint_window_frame2+0x300>)
   8bda4:	4f8e      	ldr	r7, [pc, #568]	; (8bfe0 <do_paint_window_frame2+0x304>)
   8bda6:	47b8      	blx	r7
	draw_info.clip_rect.x = invalid_rect->x - mw_all_windows[window_id].window_rect.x;
   8bda8:	192b      	adds	r3, r5, r4
   8bdaa:	8b19      	ldrh	r1, [r3, #24]
   8bdac:	9404      	str	r4, [sp, #16]
   8bdae:	8834      	ldrh	r4, [r6, #0]
	draw_info.clip_rect.y = invalid_rect->y - mw_all_windows[window_id].window_rect.y;
   8bdb0:	8b5f      	ldrh	r7, [r3, #26]
	draw_info.clip_rect.x = invalid_rect->x - mw_all_windows[window_id].window_rect.x;
   8bdb2:	1a64      	subs	r4, r4, r1
   8bdb4:	9904      	ldr	r1, [sp, #16]
	draw_info.clip_rect.width = invalid_rect->width;
   8bdb6:	6870      	ldr	r0, [r6, #4]
	draw_info.clip_rect.y = invalid_rect->y - mw_all_windows[window_id].window_rect.y;
   8bdb8:	8872      	ldrh	r2, [r6, #2]
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR &&
   8bdba:	68db      	ldr	r3, [r3, #12]
	draw_info.clip_rect.x = invalid_rect->x - mw_all_windows[window_id].window_rect.x;
   8bdbc:	3118      	adds	r1, #24
   8bdbe:	5869      	ldr	r1, [r5, r1]
	draw_info.clip_rect.y = invalid_rect->y - mw_all_windows[window_id].window_rect.y;
   8bdc0:	1bd2      	subs	r2, r2, r7
	draw_info.clip_rect.width = invalid_rect->width;
   8bdc2:	9011      	str	r0, [sp, #68]	; 0x44
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR &&
   8bdc4:	0598      	lsls	r0, r3, #22
	draw_info.clip_rect.x = invalid_rect->x - mw_all_windows[window_id].window_rect.x;
   8bdc6:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
	draw_info.clip_rect.y = invalid_rect->y - mw_all_windows[window_id].window_rect.y;
   8bdca:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
	draw_info.origin_x = mw_all_windows[window_id].window_rect.x;
   8bdce:	910f      	str	r1, [sp, #60]	; 0x3c
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR &&
   8bdd0:	d503      	bpl.n	8bdda <do_paint_window_frame2+0xfe>
   8bdd2:	9a02      	ldr	r2, [sp, #8]
   8bdd4:	0751      	lsls	r1, r2, #29
   8bdd6:	f100 811d 	bmi.w	8c014 <do_paint_window_frame2+0x338>
  	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER &&
   8bdda:	07da      	lsls	r2, r3, #31
   8bddc:	d504      	bpl.n	8bde8 <do_paint_window_frame2+0x10c>
   8bdde:	9a02      	ldr	r2, [sp, #8]
   8bde0:	f012 0f06 	tst.w	r2, #6
   8bde4:	f040 8207 	bne.w	8c1f6 <do_paint_window_frame2+0x51a>
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR &&
   8bde8:	079f      	lsls	r7, r3, #30
   8bdea:	d502      	bpl.n	8bdf2 <do_paint_window_frame2+0x116>
   8bdec:	9a02      	ldr	r2, [sp, #8]
   8bdee:	07d6      	lsls	r6, r2, #31
   8bdf0:	d44c      	bmi.n	8be8c <do_paint_window_frame2+0x1b0>
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR &&
   8bdf2:	05de      	lsls	r6, r3, #23
   8bdf4:	d407      	bmi.n	8be06 <do_paint_window_frame2+0x12a>
	else if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR &&
   8bdf6:	061a      	lsls	r2, r3, #24
   8bdf8:	d502      	bpl.n	8be00 <do_paint_window_frame2+0x124>
   8bdfa:	9b02      	ldr	r3, [sp, #8]
   8bdfc:	071b      	lsls	r3, r3, #28
   8bdfe:	d43e      	bmi.n	8be7e <do_paint_window_frame2+0x1a2>
}
   8be00:	b013      	add	sp, #76	; 0x4c
   8be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR &&
   8be06:	f013 0f80 	tst.w	r3, #128	; 0x80
		if ((components & MW_WINDOW_FRAME_COMPONENT_HORIZ_SCROLL_BAR) == MW_WINDOW_FRAME_COMPONENT_HORIZ_SCROLL_BAR)
   8be0a:	9b02      	ldr	r3, [sp, #8]
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR &&
   8be0c:	d030      	beq.n	8be70 <do_paint_window_frame2+0x194>
		if ((components & MW_WINDOW_FRAME_COMPONENT_HORIZ_SCROLL_BAR) == MW_WINDOW_FRAME_COMPONENT_HORIZ_SCROLL_BAR)
   8be0e:	f013 0f10 	tst.w	r3, #16
			draw_horizontal_window_scroll_bar(&draw_info, window_handle);
   8be12:	ab0f      	add	r3, sp, #60	; 0x3c
   8be14:	9303      	str	r3, [sp, #12]
		if ((components & MW_WINDOW_FRAME_COMPONENT_HORIZ_SCROLL_BAR) == MW_WINDOW_FRAME_COMPONENT_HORIZ_SCROLL_BAR)
   8be16:	f040 822c 	bne.w	8c272 <do_paint_window_frame2+0x596>
		if ((components & MW_WINDOW_FRAME_COMPONENT_VERT_SCROLL_BAR) == MW_WINDOW_FRAME_COMPONENT_VERT_SCROLL_BAR)
   8be1a:	9b02      	ldr	r3, [sp, #8]
   8be1c:	0718      	lsls	r0, r3, #28
   8be1e:	f100 8223 	bmi.w	8c268 <do_paint_window_frame2+0x58c>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8be22:	9b04      	ldr	r3, [sp, #16]
		mw_gl_set_fill(MW_GL_FILL);
   8be24:	2001      	movs	r0, #1
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8be26:	441d      	add	r5, r3
   8be28:	68eb      	ldr	r3, [r5, #12]
			scroll_bar_narrow_dimension = MW_SCROLL_BAR_LARGE_NARROW_DIMENSION;
   8be2a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   8be2e:	bf0c      	ite	eq
   8be30:	240c      	moveq	r4, #12
   8be32:	2418      	movne	r4, #24
		mw_gl_set_fill(MW_GL_FILL);
   8be34:	4b6d      	ldr	r3, [pc, #436]	; (8bfec <do_paint_window_frame2+0x310>)
   8be36:	4798      	blx	r3
		mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   8be38:	486d      	ldr	r0, [pc, #436]	; (8bff0 <do_paint_window_frame2+0x314>)
   8be3a:	4b6e      	ldr	r3, [pc, #440]	; (8bff4 <do_paint_window_frame2+0x318>)
   8be3c:	4798      	blx	r3
		mw_gl_set_border(MW_GL_BORDER_OFF);
   8be3e:	2000      	movs	r0, #0
   8be40:	4b6d      	ldr	r3, [pc, #436]	; (8bff8 <do_paint_window_frame2+0x31c>)
   8be42:	4798      	blx	r3
		mw_gl_clear_pattern();
   8be44:	4b6d      	ldr	r3, [pc, #436]	; (8bffc <do_paint_window_frame2+0x320>)
   8be46:	4798      	blx	r3
				(mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y) +
   8be48:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   8be4a:	8cef      	ldrh	r7, [r5, #38]	; 0x26
				(mw_all_windows[window_id].client_rect.x - mw_all_windows[window_id].window_rect.x) +
   8be4c:	8c29      	ldrh	r1, [r5, #32]
   8be4e:	8cae      	ldrh	r6, [r5, #36]	; 0x24
				(mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y) +
   8be50:	8b68      	ldrh	r0, [r5, #26]
				(mw_all_windows[window_id].client_rect.x - mw_all_windows[window_id].window_rect.x) +
   8be52:	8b2b      	ldrh	r3, [r5, #24]
				(mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y) +
   8be54:	443a      	add	r2, r7
				(mw_all_windows[window_id].client_rect.x - mw_all_windows[window_id].window_rect.x) +
   8be56:	4431      	add	r1, r6
				(mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y) +
   8be58:	1a12      	subs	r2, r2, r0
				(mw_all_windows[window_id].client_rect.x - mw_all_windows[window_id].window_rect.x) +
   8be5a:	1ac9      	subs	r1, r1, r3
		mw_gl_rectangle(&draw_info,
   8be5c:	9400      	str	r4, [sp, #0]
   8be5e:	4623      	mov	r3, r4
   8be60:	9803      	ldr	r0, [sp, #12]
   8be62:	b212      	sxth	r2, r2
   8be64:	b209      	sxth	r1, r1
   8be66:	4c66      	ldr	r4, [pc, #408]	; (8c000 <do_paint_window_frame2+0x324>)
   8be68:	47a0      	blx	r4
}
   8be6a:	b013      	add	sp, #76	; 0x4c
   8be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR &&
   8be70:	06d9      	lsls	r1, r3, #27
   8be72:	d5c5      	bpl.n	8be00 <do_paint_window_frame2+0x124>
		draw_horizontal_window_scroll_bar(&draw_info, window_handle);
   8be74:	4659      	mov	r1, fp
   8be76:	a80f      	add	r0, sp, #60	; 0x3c
   8be78:	4b62      	ldr	r3, [pc, #392]	; (8c004 <do_paint_window_frame2+0x328>)
   8be7a:	4798      	blx	r3
   8be7c:	e7c0      	b.n	8be00 <do_paint_window_frame2+0x124>
		draw_vertical_window_scroll_bar(&draw_info, window_handle);
   8be7e:	4659      	mov	r1, fp
   8be80:	a80f      	add	r0, sp, #60	; 0x3c
   8be82:	4b61      	ldr	r3, [pc, #388]	; (8c008 <do_paint_window_frame2+0x32c>)
   8be84:	4798      	blx	r3
}
   8be86:	b013      	add	sp, #76	; 0x4c
   8be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   8be8c:	4b52      	ldr	r3, [pc, #328]	; (8bfd8 <do_paint_window_frame2+0x2fc>)
   8be8e:	f240 52b5 	movw	r2, #1461	; 0x5b5
   8be92:	495e      	ldr	r1, [pc, #376]	; (8c00c <do_paint_window_frame2+0x330>)
   8be94:	2001      	movs	r0, #1
   8be96:	4c52      	ldr	r4, [pc, #328]	; (8bfe0 <do_paint_window_frame2+0x304>)
   8be98:	47a0      	blx	r4
	if (window_handle == MW_INVALID_HANDLE)
   8be9a:	f1bb 0f00 	cmp.w	fp, #0
   8be9e:	d043      	beq.n	8bf28 <do_paint_window_frame2+0x24c>
		if (mw_all_windows[i].window_handle == window_handle &&
   8bea0:	696b      	ldr	r3, [r5, #20]
   8bea2:	459b      	cmp	fp, r3
   8bea4:	f000 84b0 	beq.w	8c808 <do_paint_window_frame2+0xb2c>
   8bea8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   8beaa:	459b      	cmp	fp, r3
   8beac:	f000 8564 	beq.w	8c978 <do_paint_window_frame2+0xc9c>
   8beb0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   8beb4:	459b      	cmp	fp, r3
   8beb6:	f000 8558 	beq.w	8c96a <do_paint_window_frame2+0xc8e>
   8beba:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   8bebe:	459b      	cmp	fp, r3
   8bec0:	f000 854c 	beq.w	8c95c <do_paint_window_frame2+0xc80>
   8bec4:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
   8bec8:	459b      	cmp	fp, r3
   8beca:	f000 855b 	beq.w	8c984 <do_paint_window_frame2+0xca8>
   8bece:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   8bed2:	459b      	cmp	fp, r3
   8bed4:	f000 83a8 	beq.w	8c628 <do_paint_window_frame2+0x94c>
   8bed8:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   8bedc:	459b      	cmp	fp, r3
   8bede:	f000 83e3 	beq.w	8c6a8 <do_paint_window_frame2+0x9cc>
   8bee2:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   8bee6:	459b      	cmp	fp, r3
   8bee8:	f000 83fa 	beq.w	8c6e0 <do_paint_window_frame2+0xa04>
   8beec:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
   8bef0:	459b      	cmp	fp, r3
   8bef2:	f000 83ee 	beq.w	8c6d2 <do_paint_window_frame2+0x9f6>
   8bef6:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
   8befa:	459b      	cmp	fp, r3
   8befc:	f000 840e 	beq.w	8c71c <do_paint_window_frame2+0xa40>
   8bf00:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
   8bf04:	459b      	cmp	fp, r3
   8bf06:	f000 8446 	beq.w	8c796 <do_paint_window_frame2+0xaba>
   8bf0a:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
   8bf0e:	459b      	cmp	fp, r3
   8bf10:	f000 842c 	beq.w	8c76c <do_paint_window_frame2+0xa90>
   8bf14:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
   8bf18:	459b      	cmp	fp, r3
   8bf1a:	f000 8420 	beq.w	8c75e <do_paint_window_frame2+0xa82>
   8bf1e:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
   8bf22:	459b      	cmp	fp, r3
   8bf24:	f000 8410 	beq.w	8c748 <do_paint_window_frame2+0xa6c>
   8bf28:	240e      	movs	r4, #14
   8bf2a:	2000      	movs	r0, #0
	window_with_focus_id = get_window_id_for_handle(window_with_focus_handle);
   8bf2c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8c010 <do_paint_window_frame2+0x334>
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8bf30:	4b2d      	ldr	r3, [pc, #180]	; (8bfe8 <do_paint_window_frame2+0x30c>)
   8bf32:	f240 52b9 	movw	r2, #1465	; 0x5b9
   8bf36:	4935      	ldr	r1, [pc, #212]	; (8c00c <do_paint_window_frame2+0x330>)
   8bf38:	4e29      	ldr	r6, [pc, #164]	; (8bfe0 <do_paint_window_frame2+0x304>)
   8bf3a:	47b0      	blx	r6
	window_with_focus_id = get_window_id_for_handle(window_with_focus_handle);
   8bf3c:	f8d8 0000 	ldr.w	r0, [r8]
	if (window_handle == MW_INVALID_HANDLE)
   8bf40:	2800      	cmp	r0, #0
   8bf42:	f000 82b8 	beq.w	8c4b6 <do_paint_window_frame2+0x7da>
		if (mw_all_windows[i].window_handle == window_handle &&
   8bf46:	696b      	ldr	r3, [r5, #20]
   8bf48:	4298      	cmp	r0, r3
   8bf4a:	f000 84d5 	beq.w	8c8f8 <do_paint_window_frame2+0xc1c>
   8bf4e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   8bf50:	4283      	cmp	r3, r0
   8bf52:	f000 84ec 	beq.w	8c92e <do_paint_window_frame2+0xc52>
   8bf56:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   8bf5a:	4283      	cmp	r3, r0
   8bf5c:	f000 84f6 	beq.w	8c94c <do_paint_window_frame2+0xc70>
   8bf60:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   8bf64:	4298      	cmp	r0, r3
   8bf66:	f000 84e9 	beq.w	8c93c <do_paint_window_frame2+0xc60>
   8bf6a:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
   8bf6e:	4283      	cmp	r3, r0
   8bf70:	f000 8516 	beq.w	8c9a0 <do_paint_window_frame2+0xcc4>
   8bf74:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   8bf78:	4283      	cmp	r3, r0
   8bf7a:	f000 834d 	beq.w	8c618 <do_paint_window_frame2+0x93c>
   8bf7e:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   8bf82:	4298      	cmp	r0, r3
   8bf84:	f000 833f 	beq.w	8c606 <do_paint_window_frame2+0x92a>
   8bf88:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   8bf8c:	4283      	cmp	r3, r0
   8bf8e:	f000 83bd 	beq.w	8c70c <do_paint_window_frame2+0xa30>
   8bf92:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
   8bf96:	4298      	cmp	r0, r3
   8bf98:	f000 83b0 	beq.w	8c6fc <do_paint_window_frame2+0xa20>
   8bf9c:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
   8bfa0:	4298      	cmp	r0, r3
   8bfa2:	f000 83c9 	beq.w	8c738 <do_paint_window_frame2+0xa5c>
   8bfa6:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
   8bfaa:	4298      	cmp	r0, r3
   8bfac:	f000 8413 	beq.w	8c7d6 <do_paint_window_frame2+0xafa>
   8bfb0:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
   8bfb4:	4298      	cmp	r0, r3
   8bfb6:	f000 8406 	beq.w	8c7c6 <do_paint_window_frame2+0xaea>
   8bfba:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
   8bfbe:	4298      	cmp	r0, r3
   8bfc0:	f000 83f9 	beq.w	8c7b6 <do_paint_window_frame2+0xada>
   8bfc4:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
   8bfc8:	4298      	cmp	r0, r3
   8bfca:	f000 83eb 	beq.w	8c7a4 <do_paint_window_frame2+0xac8>
   8bfce:	230e      	movs	r3, #14
   8bfd0:	2000      	movs	r0, #0
   8bfd2:	9305      	str	r3, [sp, #20]
   8bfd4:	e271      	b.n	8c4ba <do_paint_window_frame2+0x7de>
   8bfd6:	bf00      	nop
   8bfd8:	000a6618 	.word	0x000a6618
   8bfdc:	000ab3a0 	.word	0x000ab3a0
   8bfe0:	00095add 	.word	0x00095add
   8bfe4:	20071bd8 	.word	0x20071bd8
   8bfe8:	000ab764 	.word	0x000ab764
   8bfec:	000846fd 	.word	0x000846fd
   8bff0:	00cccccc 	.word	0x00cccccc
   8bff4:	000846c9 	.word	0x000846c9
   8bff8:	000846f1 	.word	0x000846f1
   8bffc:	000846e1 	.word	0x000846e1
   8c000:	000850e1 	.word	0x000850e1
   8c004:	0008a539 	.word	0x0008a539
   8c008:	0008a851 	.word	0x0008a851
   8c00c:	000ab328 	.word	0x000ab328
   8c010:	20071fb4 	.word	0x20071fb4
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   8c014:	4bb3      	ldr	r3, [pc, #716]	; (8c2e4 <do_paint_window_frame2+0x608>)
   8c016:	f44f 62cf 	mov.w	r2, #1656	; 0x678
   8c01a:	49b3      	ldr	r1, [pc, #716]	; (8c2e8 <do_paint_window_frame2+0x60c>)
   8c01c:	2001      	movs	r0, #1
   8c01e:	4cb3      	ldr	r4, [pc, #716]	; (8c2ec <do_paint_window_frame2+0x610>)
   8c020:	47a0      	blx	r4
	if (window_handle == MW_INVALID_HANDLE)
   8c022:	f1bb 0f00 	cmp.w	fp, #0
   8c026:	d043      	beq.n	8c0b0 <do_paint_window_frame2+0x3d4>
		if (mw_all_windows[i].window_handle == window_handle &&
   8c028:	696b      	ldr	r3, [r5, #20]
   8c02a:	459b      	cmp	fp, r3
   8c02c:	f000 845e 	beq.w	8c8ec <do_paint_window_frame2+0xc10>
   8c030:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   8c032:	459b      	cmp	fp, r3
   8c034:	f000 8475 	beq.w	8c922 <do_paint_window_frame2+0xc46>
   8c038:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   8c03c:	459b      	cmp	fp, r3
   8c03e:	f000 8469 	beq.w	8c914 <do_paint_window_frame2+0xc38>
   8c042:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   8c046:	459b      	cmp	fp, r3
   8c048:	f000 845d 	beq.w	8c906 <do_paint_window_frame2+0xc2a>
   8c04c:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
   8c050:	459b      	cmp	fp, r3
   8c052:	f000 849e 	beq.w	8c992 <do_paint_window_frame2+0xcb6>
   8c056:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   8c05a:	459b      	cmp	fp, r3
   8c05c:	f000 832b 	beq.w	8c6b6 <do_paint_window_frame2+0x9da>
   8c060:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   8c064:	459b      	cmp	fp, r3
   8c066:	f000 82e7 	beq.w	8c638 <do_paint_window_frame2+0x95c>
   8c06a:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   8c06e:	459b      	cmp	fp, r3
   8c070:	f000 833d 	beq.w	8c6ee <do_paint_window_frame2+0xa12>
   8c074:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
   8c078:	459b      	cmp	fp, r3
   8c07a:	f000 8323 	beq.w	8c6c4 <do_paint_window_frame2+0x9e8>
   8c07e:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
   8c082:	459b      	cmp	fp, r3
   8c084:	f000 8351 	beq.w	8c72a <do_paint_window_frame2+0xa4e>
   8c088:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
   8c08c:	459b      	cmp	fp, r3
   8c08e:	f000 837b 	beq.w	8c788 <do_paint_window_frame2+0xaac>
   8c092:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
   8c096:	459b      	cmp	fp, r3
   8c098:	f000 836f 	beq.w	8c77a <do_paint_window_frame2+0xa9e>
   8c09c:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
   8c0a0:	459b      	cmp	fp, r3
   8c0a2:	f000 83aa 	beq.w	8c7fa <do_paint_window_frame2+0xb1e>
   8c0a6:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
   8c0aa:	459b      	cmp	fp, r3
   8c0ac:	f000 839b 	beq.w	8c7e6 <do_paint_window_frame2+0xb0a>
   8c0b0:	260e      	movs	r6, #14
   8c0b2:	2000      	movs	r0, #0
	menu_bar_width = mw_all_windows[window_id].client_rect.width;
   8c0b4:	01b6      	lsls	r6, r6, #6
   8c0b6:	19af      	adds	r7, r5, r6
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8c0b8:	4c8c      	ldr	r4, [pc, #560]	; (8c2ec <do_paint_window_frame2+0x610>)
   8c0ba:	4b8d      	ldr	r3, [pc, #564]	; (8c2f0 <do_paint_window_frame2+0x614>)
   8c0bc:	f240 627c 	movw	r2, #1660	; 0x67c
   8c0c0:	4989      	ldr	r1, [pc, #548]	; (8c2e8 <do_paint_window_frame2+0x60c>)
   8c0c2:	47a0      	blx	r4
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8c0c4:	68f8      	ldr	r0, [r7, #12]
	menu_bar_width = mw_all_windows[window_id].client_rect.width;
   8c0c6:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8c0ca:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
   8c0ce:	f000 8280 	beq.w	8c5d2 <do_paint_window_frame2+0x8f6>
	    mw_gl_set_font(MW_GL_TITLE_FONT);
   8c0d2:	4b88      	ldr	r3, [pc, #544]	; (8c2f4 <do_paint_window_frame2+0x618>)
   8c0d4:	2005      	movs	r0, #5
   8c0d6:	4798      	blx	r3
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
   8c0d8:	68fb      	ldr	r3, [r7, #12]
   8c0da:	f013 0f80 	tst.w	r3, #128	; 0x80
			menu_bar_width += MW_SCROLL_BAR_LARGE_NARROW_DIMENSION;
   8c0de:	f04f 0314 	mov.w	r3, #20
   8c0e2:	461f      	mov	r7, r3
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
   8c0e4:	f040 828b 	bne.w	8c5fe <do_paint_window_frame2+0x922>
		menu_bar_height = MW_MENU_BAR_HEIGHT;
   8c0e8:	9306      	str	r3, [sp, #24]
	mw_gl_set_fill(MW_GL_FILL);
   8c0ea:	2001      	movs	r0, #1
   8c0ec:	4b82      	ldr	r3, [pc, #520]	; (8c2f8 <do_paint_window_frame2+0x61c>)
   8c0ee:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   8c0f0:	4882      	ldr	r0, [pc, #520]	; (8c2fc <do_paint_window_frame2+0x620>)
   8c0f2:	4b83      	ldr	r3, [pc, #524]	; (8c300 <do_paint_window_frame2+0x624>)
   8c0f4:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   8c0f6:	2000      	movs	r0, #0
   8c0f8:	4b82      	ldr	r3, [pc, #520]	; (8c304 <do_paint_window_frame2+0x628>)
			mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c0fa:	442e      	add	r6, r5
	mw_gl_set_border(MW_GL_BORDER_OFF);
   8c0fc:	4798      	blx	r3
	mw_gl_clear_pattern();
   8c0fe:	4b82      	ldr	r3, [pc, #520]	; (8c308 <do_paint_window_frame2+0x62c>)
   8c100:	4798      	blx	r3
			mw_all_windows[window_id].client_rect.x - mw_all_windows[window_id].window_rect.x,
   8c102:	8b33      	ldrh	r3, [r6, #24]
   8c104:	8c31      	ldrh	r1, [r6, #32]
			mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c106:	8b70      	ldrh	r0, [r6, #26]
   8c108:	8c72      	ldrh	r2, [r6, #34]	; 0x22
			mw_all_windows[window_id].client_rect.x - mw_all_windows[window_id].window_rect.x,
   8c10a:	1ac9      	subs	r1, r1, r3
	mw_gl_rectangle(draw_info,
   8c10c:	ab0f      	add	r3, sp, #60	; 0x3c
			mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c10e:	1a12      	subs	r2, r2, r0
	mw_gl_rectangle(draw_info,
   8c110:	4618      	mov	r0, r3
   8c112:	9b06      	ldr	r3, [sp, #24]
			mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c114:	1bd2      	subs	r2, r2, r7
	mw_gl_rectangle(draw_info,
   8c116:	b212      	sxth	r2, r2
   8c118:	b209      	sxth	r1, r1
   8c11a:	9300      	str	r3, [sp, #0]
   8c11c:	4623      	mov	r3, r4
   8c11e:	4c7b      	ldr	r4, [pc, #492]	; (8c30c <do_paint_window_frame2+0x630>)
   8c120:	4681      	mov	r9, r0
   8c122:	47a0      	blx	r4
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   8c124:	2000      	movs	r0, #0
   8c126:	4b7a      	ldr	r3, [pc, #488]	; (8c310 <do_paint_window_frame2+0x634>)
   8c128:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   8c12a:	2000      	movs	r0, #0
   8c12c:	4b79      	ldr	r3, [pc, #484]	; (8c314 <do_paint_window_frame2+0x638>)
   8c12e:	4798      	blx	r3
	mw_gl_set_line(MW_GL_SOLID_LINE);
   8c130:	4b79      	ldr	r3, [pc, #484]	; (8c318 <do_paint_window_frame2+0x63c>)
   8c132:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8c136:	4798      	blx	r3
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER)
   8c138:	68f4      	ldr	r4, [r6, #12]
	for (i = 0U; i < mw_all_windows[window_id].menu_bar_items_count; i++)
   8c13a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
	int16_t next_pos = 0;
   8c13e:	f004 0a01 	and.w	sl, r4, #1
	for (i = 0U; i < mw_all_windows[window_id].menu_bar_items_count; i++)
   8c142:	2b00      	cmp	r3, #0
   8c144:	f000 80a1 	beq.w	8c28a <do_paint_window_frame2+0x5ae>
   8c148:	4b74      	ldr	r3, [pc, #464]	; (8c31c <do_paint_window_frame2+0x640>)
   8c14a:	f8cd b020 	str.w	fp, [sp, #32]
   8c14e:	f04f 0800 	mov.w	r8, #0
   8c152:	9305      	str	r3, [sp, #20]
   8c154:	46bb      	mov	fp, r7
   8c156:	9509      	str	r5, [sp, #36]	; 0x24
   8c158:	e03e      	b.n	8c1d8 <do_paint_window_frame2+0x4fc>
   8c15a:	fa1f f38a 	uxth.w	r3, sl
   8c15e:	9303      	str	r3, [sp, #12]
   8c160:	ea4f 0788 	mov.w	r7, r8, lsl #2
	    if (mw_util_get_bit(mw_all_windows[window_id].menu_bar_item_enables, i) &&
   8c164:	4641      	mov	r1, r8
   8c166:	8d30      	ldrh	r0, [r6, #40]	; 0x28
   8c168:	4b6d      	ldr	r3, [pc, #436]	; (8c320 <do_paint_window_frame2+0x644>)
   8c16a:	4798      	blx	r3
   8c16c:	b118      	cbz	r0, 8c176 <do_paint_window_frame2+0x49a>
	    		(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_MENU_BAR_ENABLED) == MW_WINDOW_FLAG_MENU_BAR_ENABLED)
   8c16e:	68f3      	ldr	r3, [r6, #12]
	    if (mw_util_get_bit(mw_all_windows[window_id].menu_bar_item_enables, i) &&
   8c170:	0559      	lsls	r1, r3, #21
   8c172:	f100 8083 	bmi.w	8c27c <do_paint_window_frame2+0x5a0>
	        mw_gl_set_fg_colour(MW_CONTROL_DISABLED_COLOUR);
   8c176:	486b      	ldr	r0, [pc, #428]	; (8c324 <do_paint_window_frame2+0x648>)
   8c178:	9b05      	ldr	r3, [sp, #20]
   8c17a:	4798      	blx	r3
				selected_text_offset + next_pos + mw_gl_get_string_width_pixels(" "),
   8c17c:	4b6a      	ldr	r3, [pc, #424]	; (8c328 <do_paint_window_frame2+0x64c>)
   8c17e:	486b      	ldr	r0, [pc, #428]	; (8c32c <do_paint_window_frame2+0x650>)
   8c180:	9d03      	ldr	r5, [sp, #12]
   8c182:	4798      	blx	r3
					mw_all_windows[window_id].window_rect.y -
   8c184:	8c72      	ldrh	r2, [r6, #34]	; 0x22
   8c186:	8b73      	ldrh	r3, [r6, #26]
   8c188:	3203      	adds	r2, #3
				selected_text_offset + next_pos + mw_gl_get_string_width_pixels(" "),
   8c18a:	eb05 0a04 	add.w	sl, r5, r4
					mw_all_windows[window_id].window_rect.y -
   8c18e:	1ad2      	subs	r2, r2, r3
				selected_text_offset + next_pos + mw_gl_get_string_width_pixels(" "),
   8c190:	fa1f fa8a 	uxth.w	sl, sl
		mw_gl_string(draw_info,
   8c194:	6833      	ldr	r3, [r6, #0]
					mw_all_windows[window_id].window_rect.y -
   8c196:	eba2 020b 	sub.w	r2, r2, fp
				selected_text_offset + next_pos + mw_gl_get_string_width_pixels(" "),
   8c19a:	eb0a 0100 	add.w	r1, sl, r0
					mw_all_windows[window_id].window_rect.y -
   8c19e:	4422      	add	r2, r4
		mw_gl_string(draw_info,
   8c1a0:	b212      	sxth	r2, r2
   8c1a2:	b209      	sxth	r1, r1
   8c1a4:	59db      	ldr	r3, [r3, r7]
   8c1a6:	4648      	mov	r0, r9
   8c1a8:	4c61      	ldr	r4, [pc, #388]	; (8c330 <do_paint_window_frame2+0x654>)
   8c1aa:	47a0      	blx	r4
		next_pos += (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ");
   8c1ac:	6833      	ldr	r3, [r6, #0]
	for (i = 0U; i < mw_all_windows[window_id].menu_bar_items_count; i++)
   8c1ae:	f108 0801 	add.w	r8, r8, #1
		next_pos += (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ");
   8c1b2:	59d8      	ldr	r0, [r3, r7]
   8c1b4:	4b5c      	ldr	r3, [pc, #368]	; (8c328 <do_paint_window_frame2+0x64c>)
   8c1b6:	4798      	blx	r3
   8c1b8:	4b5b      	ldr	r3, [pc, #364]	; (8c328 <do_paint_window_frame2+0x64c>)
   8c1ba:	4682      	mov	sl, r0
   8c1bc:	485d      	ldr	r0, [pc, #372]	; (8c334 <do_paint_window_frame2+0x658>)
   8c1be:	4798      	blx	r3
   8c1c0:	462a      	mov	r2, r5
	for (i = 0U; i < mw_all_windows[window_id].menu_bar_items_count; i++)
   8c1c2:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
		next_pos += (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ");
   8c1c6:	4482      	add	sl, r0
	for (i = 0U; i < mw_all_windows[window_id].menu_bar_items_count; i++)
   8c1c8:	fa5f f888 	uxtb.w	r8, r8
		next_pos += (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ");
   8c1cc:	4452      	add	r2, sl
	for (i = 0U; i < mw_all_windows[window_id].menu_bar_items_count; i++)
   8c1ce:	4543      	cmp	r3, r8
		next_pos += (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ");
   8c1d0:	fa0f fa82 	sxth.w	sl, r2
	for (i = 0U; i < mw_all_windows[window_id].menu_bar_items_count; i++)
   8c1d4:	d956      	bls.n	8c284 <do_paint_window_frame2+0x5a8>
   8c1d6:	68f4      	ldr	r4, [r6, #12]
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED) == MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED &&
   8c1d8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   8c1dc:	d0bd      	beq.n	8c15a <do_paint_window_frame2+0x47e>
   8c1de:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   8c1e2:	4543      	cmp	r3, r8
   8c1e4:	f000 80e4 	beq.w	8c3b0 <do_paint_window_frame2+0x6d4>
   8c1e8:	fa1f f38a 	uxth.w	r3, sl
   8c1ec:	9303      	str	r3, [sp, #12]
   8c1ee:	ea4f 0788 	mov.w	r7, r8, lsl #2
   8c1f2:	2400      	movs	r4, #0
   8c1f4:	e7b6      	b.n	8c164 <do_paint_window_frame2+0x488>
  		mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   8c1f6:	2000      	movs	r0, #0
   8c1f8:	4b48      	ldr	r3, [pc, #288]	; (8c31c <do_paint_window_frame2+0x640>)
   8c1fa:	4798      	blx	r3
  		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   8c1fc:	9a04      	ldr	r2, [sp, #16]
  		mw_gl_set_line(MW_GL_SOLID_LINE);
   8c1fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
  		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   8c202:	18ae      	adds	r6, r5, r2
  		mw_gl_set_line(MW_GL_SOLID_LINE);
   8c204:	4b44      	ldr	r3, [pc, #272]	; (8c318 <do_paint_window_frame2+0x63c>)
   8c206:	4798      	blx	r3
  		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   8c208:	68f4      	ldr	r4, [r6, #12]
   8c20a:	f014 0402 	ands.w	r4, r4, #2
   8c20e:	f000 81c2 	beq.w	8c596 <do_paint_window_frame2+0x8ba>
  			mw_gl_vline(&draw_info,
   8c212:	aa0f      	add	r2, sp, #60	; 0x3c
   8c214:	4617      	mov	r7, r2
  					mw_all_windows[window_id].window_rect.height - 1);
   8c216:	8bf3      	ldrh	r3, [r6, #30]
  			mw_gl_vline(&draw_info,
   8c218:	4610      	mov	r0, r2
  					mw_all_windows[window_id].window_rect.height - 1);
   8c21a:	3b01      	subs	r3, #1
  			mw_gl_vline(&draw_info,
   8c21c:	9203      	str	r2, [sp, #12]
   8c21e:	b21b      	sxth	r3, r3
   8c220:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
   8c224:	2100      	movs	r1, #0
   8c226:	4c44      	ldr	r4, [pc, #272]	; (8c338 <do_paint_window_frame2+0x65c>)
   8c228:	47a0      	blx	r4
  					mw_all_windows[window_id].window_rect.height - 1);
   8c22a:	8bf3      	ldrh	r3, [r6, #30]
  					mw_all_windows[window_id].window_rect.width - 1,
   8c22c:	8bb1      	ldrh	r1, [r6, #28]
  					mw_all_windows[window_id].window_rect.height - 1);
   8c22e:	3b01      	subs	r3, #1
  					mw_all_windows[window_id].window_rect.width - 1,
   8c230:	3901      	subs	r1, #1
  			mw_gl_vline(&draw_info,
   8c232:	4638      	mov	r0, r7
   8c234:	b21b      	sxth	r3, r3
   8c236:	b209      	sxth	r1, r1
   8c238:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
   8c23c:	47a0      	blx	r4
   8c23e:	4f3f      	ldr	r7, [pc, #252]	; (8c33c <do_paint_window_frame2+0x660>)
				mw_all_windows[window_id].window_rect.height - 1);
   8c240:	9b04      	ldr	r3, [sp, #16]
		mw_gl_hline(&draw_info,
   8c242:	9803      	ldr	r0, [sp, #12]
				mw_all_windows[window_id].window_rect.height - 1);
   8c244:	18ec      	adds	r4, r5, r3
   8c246:	8be3      	ldrh	r3, [r4, #30]
				mw_all_windows[window_id].window_rect.width - 1,
   8c248:	8ba2      	ldrh	r2, [r4, #28]
				mw_all_windows[window_id].window_rect.height - 1);
   8c24a:	3b01      	subs	r3, #1
				mw_all_windows[window_id].window_rect.width - 1,
   8c24c:	3a01      	subs	r2, #1
		mw_gl_hline(&draw_info,
   8c24e:	b21b      	sxth	r3, r3
   8c250:	b212      	sxth	r2, r2
   8c252:	2100      	movs	r1, #0
   8c254:	47b8      	blx	r7
   8c256:	68e3      	ldr	r3, [r4, #12]
   8c258:	e5c6      	b.n	8bde8 <do_paint_window_frame2+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c25a:	68eb      	ldr	r3, [r5, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8c25c:	069c      	lsls	r4, r3, #26
   8c25e:	f57f ad55 	bpl.w	8bd0c <do_paint_window_frame2+0x30>
   8c262:	2300      	movs	r3, #0
   8c264:	2001      	movs	r0, #1
   8c266:	e597      	b.n	8bd98 <do_paint_window_frame2+0xbc>
			draw_vertical_window_scroll_bar(&draw_info, window_handle);
   8c268:	4659      	mov	r1, fp
   8c26a:	9803      	ldr	r0, [sp, #12]
   8c26c:	4b34      	ldr	r3, [pc, #208]	; (8c340 <do_paint_window_frame2+0x664>)
   8c26e:	4798      	blx	r3
   8c270:	e5d7      	b.n	8be22 <do_paint_window_frame2+0x146>
			draw_horizontal_window_scroll_bar(&draw_info, window_handle);
   8c272:	4618      	mov	r0, r3
   8c274:	4659      	mov	r1, fp
   8c276:	4b33      	ldr	r3, [pc, #204]	; (8c344 <do_paint_window_frame2+0x668>)
   8c278:	4798      	blx	r3
   8c27a:	e5ce      	b.n	8be1a <do_paint_window_frame2+0x13e>
	        mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   8c27c:	2000      	movs	r0, #0
   8c27e:	9b05      	ldr	r3, [sp, #20]
   8c280:	4798      	blx	r3
   8c282:	e77b      	b.n	8c17c <do_paint_window_frame2+0x4a0>
   8c284:	f8dd b020 	ldr.w	fp, [sp, #32]
   8c288:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8c28a:	9b04      	ldr	r3, [sp, #16]
   8c28c:	18eb      	adds	r3, r5, r3
   8c28e:	68db      	ldr	r3, [r3, #12]
   8c290:	e5a3      	b.n	8bdda <do_paint_window_frame2+0xfe>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c292:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c294:	0698      	lsls	r0, r3, #26
   8c296:	f57f ad3d 	bpl.w	8bd14 <do_paint_window_frame2+0x38>
   8c29a:	2301      	movs	r3, #1
   8c29c:	e7e2      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c29e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c2a2:	0699      	lsls	r1, r3, #26
   8c2a4:	f57f ad3b 	bpl.w	8bd1e <do_paint_window_frame2+0x42>
   8c2a8:	2302      	movs	r3, #2
   8c2aa:	e7db      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c2ac:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c2b0:	069a      	lsls	r2, r3, #26
   8c2b2:	f57f ad39 	bpl.w	8bd28 <do_paint_window_frame2+0x4c>
   8c2b6:	2303      	movs	r3, #3
   8c2b8:	e7d4      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c2ba:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c2be:	069b      	lsls	r3, r3, #26
   8c2c0:	f57f ad37 	bpl.w	8bd32 <do_paint_window_frame2+0x56>
   8c2c4:	2304      	movs	r3, #4
   8c2c6:	e7cd      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c2c8:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c2cc:	069f      	lsls	r7, r3, #26
   8c2ce:	f57f ad35 	bpl.w	8bd3c <do_paint_window_frame2+0x60>
   8c2d2:	2305      	movs	r3, #5
   8c2d4:	e7c6      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c2d6:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c2da:	069c      	lsls	r4, r3, #26
   8c2dc:	f57f ad33 	bpl.w	8bd46 <do_paint_window_frame2+0x6a>
   8c2e0:	2306      	movs	r3, #6
   8c2e2:	e7bf      	b.n	8c264 <do_paint_window_frame2+0x588>
   8c2e4:	000a6618 	.word	0x000a6618
   8c2e8:	000ab34c 	.word	0x000ab34c
   8c2ec:	00095add 	.word	0x00095add
   8c2f0:	000ab764 	.word	0x000ab764
   8c2f4:	00084715 	.word	0x00084715
   8c2f8:	000846fd 	.word	0x000846fd
   8c2fc:	00e6e6e6 	.word	0x00e6e6e6
   8c300:	000846c9 	.word	0x000846c9
   8c304:	000846f1 	.word	0x000846f1
   8c308:	000846e1 	.word	0x000846e1
   8c30c:	000850e1 	.word	0x000850e1
   8c310:	00084709 	.word	0x00084709
   8c314:	00084745 	.word	0x00084745
   8c318:	000846d5 	.word	0x000846d5
   8c31c:	000846b1 	.word	0x000846b1
   8c320:	00097029 	.word	0x00097029
   8c324:	00bfbfbf 	.word	0x00bfbfbf
   8c328:	00086165 	.word	0x00086165
   8c32c:	000ab760 	.word	0x000ab760
   8c330:	00085f1d 	.word	0x00085f1d
   8c334:	000ab75c 	.word	0x000ab75c
   8c338:	00084f39 	.word	0x00084f39
   8c33c:	00084dd1 	.word	0x00084dd1
   8c340:	0008a851 	.word	0x0008a851
   8c344:	0008a539 	.word	0x0008a539
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c348:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c34c:	0698      	lsls	r0, r3, #26
   8c34e:	f57f acff 	bpl.w	8bd50 <do_paint_window_frame2+0x74>
   8c352:	2307      	movs	r3, #7
   8c354:	e786      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c356:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c35a:	0699      	lsls	r1, r3, #26
   8c35c:	f57f acfd 	bpl.w	8bd5a <do_paint_window_frame2+0x7e>
   8c360:	2308      	movs	r3, #8
   8c362:	e77f      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c364:	f8d5 324c 	ldr.w	r3, [r5, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c368:	069a      	lsls	r2, r3, #26
   8c36a:	f57f acfb 	bpl.w	8bd64 <do_paint_window_frame2+0x88>
   8c36e:	2309      	movs	r3, #9
   8c370:	e778      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c372:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c376:	069b      	lsls	r3, r3, #26
   8c378:	f57f acf9 	bpl.w	8bd6e <do_paint_window_frame2+0x92>
   8c37c:	230a      	movs	r3, #10
   8c37e:	e771      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c380:	f8d5 32cc 	ldr.w	r3, [r5, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c384:	069f      	lsls	r7, r3, #26
   8c386:	f57f acf7 	bpl.w	8bd78 <do_paint_window_frame2+0x9c>
   8c38a:	230b      	movs	r3, #11
   8c38c:	e76a      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c38e:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c392:	069c      	lsls	r4, r3, #26
   8c394:	f57f acf5 	bpl.w	8bd82 <do_paint_window_frame2+0xa6>
   8c398:	230c      	movs	r3, #12
   8c39a:	e763      	b.n	8c264 <do_paint_window_frame2+0x588>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c39c:	f8d5 034c 	ldr.w	r0, [r5, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c3a0:	f010 0020 	ands.w	r0, r0, #32
   8c3a4:	bf18      	it	ne
   8c3a6:	230d      	movne	r3, #13
   8c3a8:	f47f af5c 	bne.w	8c264 <do_paint_window_frame2+0x588>
   8c3ac:	230e      	movs	r3, #14
   8c3ae:	e4f3      	b.n	8bd98 <do_paint_window_frame2+0xbc>
			mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   8c3b0:	48a5      	ldr	r0, [pc, #660]	; (8c648 <do_paint_window_frame2+0x96c>)
   8c3b2:	4ba6      	ldr	r3, [pc, #664]	; (8c64c <do_paint_window_frame2+0x970>)
   8c3b4:	4798      	blx	r3
					(int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  "),
   8c3b6:	6833      	ldr	r3, [r6, #0]
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c3b8:	8b72      	ldrh	r2, [r6, #26]
   8c3ba:	8c74      	ldrh	r4, [r6, #34]	; 0x22
					(int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  "),
   8c3bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   8c3c0:	4ba3      	ldr	r3, [pc, #652]	; (8c650 <do_paint_window_frame2+0x974>)
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c3c2:	1aa4      	subs	r4, r4, r2
					(int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  "),
   8c3c4:	4798      	blx	r3
   8c3c6:	4ba2      	ldr	r3, [pc, #648]	; (8c650 <do_paint_window_frame2+0x974>)
   8c3c8:	4605      	mov	r5, r0
   8c3ca:	48a2      	ldr	r0, [pc, #648]	; (8c654 <do_paint_window_frame2+0x978>)
   8c3cc:	4798      	blx	r3
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c3ce:	eba4 040b 	sub.w	r4, r4, fp
			mw_gl_rectangle(draw_info,
   8c3d2:	9906      	ldr	r1, [sp, #24]
					(int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  "),
   8c3d4:	182b      	adds	r3, r5, r0
			mw_gl_rectangle(draw_info,
   8c3d6:	b224      	sxth	r4, r4
   8c3d8:	4622      	mov	r2, r4
   8c3da:	9100      	str	r1, [sp, #0]
   8c3dc:	4648      	mov	r0, r9
   8c3de:	4651      	mov	r1, sl
   8c3e0:	b21b      	sxth	r3, r3
   8c3e2:	4c9d      	ldr	r4, [pc, #628]	; (8c658 <do_paint_window_frame2+0x97c>)
   8c3e4:	47a0      	blx	r4
			mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   8c3e6:	9b05      	ldr	r3, [sp, #20]
   8c3e8:	2000      	movs	r0, #0
   8c3ea:	4798      	blx	r3
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c3ec:	8b73      	ldrh	r3, [r6, #26]
   8c3ee:	8c72      	ldrh	r2, [r6, #34]	; 0x22
			mw_gl_vline(draw_info,
   8c3f0:	4651      	mov	r1, sl
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c3f2:	1ad2      	subs	r2, r2, r3
   8c3f4:	b292      	uxth	r2, r2
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - 1);
   8c3f6:	1e53      	subs	r3, r2, #1
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c3f8:	eba2 020b 	sub.w	r2, r2, fp
			mw_gl_vline(draw_info,
   8c3fc:	4648      	mov	r0, r9
   8c3fe:	4f97      	ldr	r7, [pc, #604]	; (8c65c <do_paint_window_frame2+0x980>)
   8c400:	b21b      	sxth	r3, r3
   8c402:	b212      	sxth	r2, r2
   8c404:	47b8      	blx	r7
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c406:	6833      	ldr	r3, [r6, #0]
   8c408:	fa1f f28a 	uxth.w	r2, sl
   8c40c:	4615      	mov	r5, r2
   8c40e:	9203      	str	r2, [sp, #12]
   8c410:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   8c414:	4a8e      	ldr	r2, [pc, #568]	; (8c650 <do_paint_window_frame2+0x974>)
   8c416:	4790      	blx	r2
   8c418:	1e6b      	subs	r3, r5, #1
   8c41a:	b29a      	uxth	r2, r3
   8c41c:	4615      	mov	r5, r2
   8c41e:	4604      	mov	r4, r0
   8c420:	4a8b      	ldr	r2, [pc, #556]	; (8c650 <do_paint_window_frame2+0x974>)
   8c422:	488c      	ldr	r0, [pc, #560]	; (8c654 <do_paint_window_frame2+0x978>)
   8c424:	4790      	blx	r2
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height);
   8c426:	8b71      	ldrh	r1, [r6, #26]
   8c428:	8c73      	ldrh	r3, [r6, #34]	; 0x22
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c42a:	1822      	adds	r2, r4, r0
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height);
   8c42c:	1a5b      	subs	r3, r3, r1
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c42e:	442a      	add	r2, r5
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height);
   8c430:	eba3 030b 	sub.w	r3, r3, fp
			mw_gl_hline(draw_info,
   8c434:	4651      	mov	r1, sl
   8c436:	b212      	sxth	r2, r2
   8c438:	4648      	mov	r0, r9
   8c43a:	4c89      	ldr	r4, [pc, #548]	; (8c660 <do_paint_window_frame2+0x984>)
   8c43c:	b21b      	sxth	r3, r3
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c43e:	9507      	str	r5, [sp, #28]
			mw_gl_hline(draw_info,
   8c440:	47a0      	blx	r4
			mw_gl_set_fg_colour(MW_HAL_LCD_WHITE);
   8c442:	9b05      	ldr	r3, [sp, #20]
   8c444:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   8c448:	4798      	blx	r3
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c44a:	6833      	ldr	r3, [r6, #0]
   8c44c:	4a80      	ldr	r2, [pc, #512]	; (8c650 <do_paint_window_frame2+0x974>)
   8c44e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   8c452:	4790      	blx	r2
   8c454:	4a7e      	ldr	r2, [pc, #504]	; (8c650 <do_paint_window_frame2+0x974>)
   8c456:	900a      	str	r0, [sp, #40]	; 0x28
   8c458:	487e      	ldr	r0, [pc, #504]	; (8c654 <do_paint_window_frame2+0x978>)
   8c45a:	4790      	blx	r2
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c45c:	f8b6 e01a 	ldrh.w	lr, [r6, #26]
   8c460:	8c73      	ldrh	r3, [r6, #34]	; 0x22
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c462:	990a      	ldr	r1, [sp, #40]	; 0x28
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c464:	eba3 030e 	sub.w	r3, r3, lr
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c468:	4401      	add	r1, r0
   8c46a:	9807      	ldr	r0, [sp, #28]
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c46c:	b29a      	uxth	r2, r3
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c46e:	4401      	add	r1, r0
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - 1);
   8c470:	1e53      	subs	r3, r2, #1
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - menu_bar_height,
   8c472:	eba2 020b 	sub.w	r2, r2, fp
			mw_gl_vline(draw_info,
   8c476:	b209      	sxth	r1, r1
   8c478:	b212      	sxth	r2, r2
   8c47a:	4648      	mov	r0, r9
   8c47c:	b21b      	sxth	r3, r3
   8c47e:	47b8      	blx	r7
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c480:	6833      	ldr	r3, [r6, #0]
			mw_gl_hline(draw_info,
   8c482:	4625      	mov	r5, r4
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c484:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   8c488:	4b71      	ldr	r3, [pc, #452]	; (8c650 <do_paint_window_frame2+0x974>)
   8c48a:	4798      	blx	r3
   8c48c:	4b70      	ldr	r3, [pc, #448]	; (8c650 <do_paint_window_frame2+0x974>)
   8c48e:	900a      	str	r0, [sp, #40]	; 0x28
   8c490:	4870      	ldr	r0, [pc, #448]	; (8c654 <do_paint_window_frame2+0x978>)
   8c492:	4798      	blx	r3
   8c494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - 1);
   8c496:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   8c498:	8b71      	ldrh	r1, [r6, #26]
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c49a:	4402      	add	r2, r0
   8c49c:	9807      	ldr	r0, [sp, #28]
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - 1);
   8c49e:	3b01      	subs	r3, #1
					next_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ") - 1,
   8c4a0:	4402      	add	r2, r0
					mw_all_windows[window_id].client_rect.y - mw_all_windows[window_id].window_rect.y - 1);
   8c4a2:	1a5b      	subs	r3, r3, r1
			mw_gl_hline(draw_info,
   8c4a4:	b212      	sxth	r2, r2
   8c4a6:	4651      	mov	r1, sl
   8c4a8:	b21b      	sxth	r3, r3
   8c4aa:	4648      	mov	r0, r9
   8c4ac:	2401      	movs	r4, #1
					(int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  "),
   8c4ae:	ea4f 0788 	mov.w	r7, r8, lsl #2
			mw_gl_hline(draw_info,
   8c4b2:	47a8      	blx	r5
   8c4b4:	e656      	b.n	8c164 <do_paint_window_frame2+0x488>
		if (mw_all_windows[i].window_handle == window_handle &&
   8c4b6:	230e      	movs	r3, #14
   8c4b8:	9305      	str	r3, [sp, #20]
	MW_ASSERT(window_with_focus_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8c4ba:	4b6a      	ldr	r3, [pc, #424]	; (8c664 <do_paint_window_frame2+0x988>)
   8c4bc:	f240 52bb 	movw	r2, #1467	; 0x5bb
   8c4c0:	4969      	ldr	r1, [pc, #420]	; (8c668 <do_paint_window_frame2+0x98c>)
   8c4c2:	4e6a      	ldr	r6, [pc, #424]	; (8c66c <do_paint_window_frame2+0x990>)
   8c4c4:	47b0      	blx	r6
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8c4c6:	01a3      	lsls	r3, r4, #6
   8c4c8:	9306      	str	r3, [sp, #24]
   8c4ca:	18eb      	adds	r3, r5, r3
   8c4cc:	68db      	ldr	r3, [r3, #12]
   8c4ce:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8c6a4 <do_paint_window_frame2+0x9c8>
   8c4d2:	f403 4a00 	and.w	sl, r3, #32768	; 0x8000
   8c4d6:	f1ba 0f00 	cmp.w	sl, #0
   8c4da:	4a65      	ldr	r2, [pc, #404]	; (8c670 <do_paint_window_frame2+0x994>)
   8c4dc:	bf08      	it	eq
   8c4de:	4662      	moveq	r2, ip
   8c4e0:	4f64      	ldr	r7, [pc, #400]	; (8c674 <do_paint_window_frame2+0x998>)
   8c4e2:	4e65      	ldr	r6, [pc, #404]	; (8c678 <do_paint_window_frame2+0x99c>)
   8c4e4:	920b      	str	r2, [sp, #44]	; 0x2c
   8c4e6:	bf0c      	ite	eq
   8c4e8:	463a      	moveq	r2, r7
   8c4ea:	4632      	movne	r2, r6
   8c4ec:	4c63      	ldr	r4, [pc, #396]	; (8c67c <do_paint_window_frame2+0x9a0>)
   8c4ee:	4864      	ldr	r0, [pc, #400]	; (8c680 <do_paint_window_frame2+0x9a4>)
   8c4f0:	9209      	str	r2, [sp, #36]	; 0x24
   8c4f2:	bf0c      	ite	eq
   8c4f4:	4622      	moveq	r2, r4
   8c4f6:	4602      	movne	r2, r0
   8c4f8:	4962      	ldr	r1, [pc, #392]	; (8c684 <do_paint_window_frame2+0x9a8>)
   8c4fa:	920a      	str	r2, [sp, #40]	; 0x28
   8c4fc:	4a62      	ldr	r2, [pc, #392]	; (8c688 <do_paint_window_frame2+0x9ac>)
   8c4fe:	bf08      	it	eq
   8c500:	460a      	moveq	r2, r1
   8c502:	9208      	str	r2, [sp, #32]
   8c504:	bf0c      	ite	eq
   8c506:	2212      	moveq	r2, #18
   8c508:	2219      	movne	r2, #25
   8c50a:	9207      	str	r2, [sp, #28]
   8c50c:	bf0c      	ite	eq
   8c50e:	2220      	moveq	r2, #32
   8c510:	222e      	movne	r2, #46	; 0x2e
   8c512:	920c      	str	r2, [sp, #48]	; 0x30
   8c514:	bf0c      	ite	eq
   8c516:	2210      	moveq	r2, #16
   8c518:	2217      	movne	r2, #23
   8c51a:	f64f 7ebb 	movw	lr, #65467	; 0xffbb
   8c51e:	920d      	str	r2, [sp, #52]	; 0x34
	if (window_handle != window_with_focus_handle)
   8c520:	f8d8 2000 	ldr.w	r2, [r8]
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   8c524:	f64f 79d0 	movw	r9, #65488	; 0xffd0
   8c528:	bf0d      	iteet	eq
   8c52a:	f04f 0a40 	moveq.w	sl, #64	; 0x40
   8c52e:	46f1      	movne	r9, lr
   8c530:	f04f 0a5c 	movne.w	sl, #92	; 0x5c
   8c534:	270e      	moveq	r7, #14
   8c536:	bf18      	it	ne
   8c538:	2714      	movne	r7, #20
	if (window_handle != window_with_focus_handle)
   8c53a:	4593      	cmp	fp, r2
   8c53c:	d057      	beq.n	8c5ee <do_paint_window_frame2+0x912>
		mw_gl_set_solid_fill_colour(MW_TITLE_BAR_COLOUR_NO_FOCUS);
   8c53e:	4853      	ldr	r0, [pc, #332]	; (8c68c <do_paint_window_frame2+0x9b0>)
   8c540:	4b42      	ldr	r3, [pc, #264]	; (8c64c <do_paint_window_frame2+0x970>)
   8c542:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   8c544:	2000      	movs	r0, #0
   8c546:	4b52      	ldr	r3, [pc, #328]	; (8c690 <do_paint_window_frame2+0x9b4>)
   8c548:	4798      	blx	r3
	mw_gl_set_fill(MW_GL_FILL);
   8c54a:	2001      	movs	r0, #1
   8c54c:	4b51      	ldr	r3, [pc, #324]	; (8c694 <do_paint_window_frame2+0x9b8>)
   8c54e:	4798      	blx	r3
	mw_gl_clear_pattern();
   8c550:	4b51      	ldr	r3, [pc, #324]	; (8c698 <do_paint_window_frame2+0x9bc>)
   8c552:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
   8c554:	2200      	movs	r2, #0
   8c556:	9b06      	ldr	r3, [sp, #24]
   8c558:	a80f      	add	r0, sp, #60	; 0x3c
   8c55a:	18ec      	adds	r4, r5, r3
   8c55c:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
   8c560:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
   8c564:	4e3c      	ldr	r6, [pc, #240]	; (8c658 <do_paint_window_frame2+0x97c>)
   8c566:	9100      	str	r1, [sp, #0]
   8c568:	4611      	mov	r1, r2
   8c56a:	9003      	str	r0, [sp, #12]
   8c56c:	47b0      	blx	r6
	if (window_with_focus_handle == window_handle && (mw_all_windows[window_with_focus_id].window_flags & MW_WINDOW_FLAG_IS_MODAL) == 0U)
   8c56e:	f8d8 3000 	ldr.w	r3, [r8]
   8c572:	459b      	cmp	fp, r3
   8c574:	d107      	bne.n	8c586 <do_paint_window_frame2+0x8aa>
   8c576:	9b05      	ldr	r3, [sp, #20]
   8c578:	eb05 1383 	add.w	r3, r5, r3, lsl #6
   8c57c:	68de      	ldr	r6, [r3, #12]
   8c57e:	f016 0640 	ands.w	r6, r6, #64	; 0x40
   8c582:	f000 8147 	beq.w	8c814 <do_paint_window_frame2+0xb38>
		draw_titlebar_text(window_handle, draw_info);
   8c586:	9903      	ldr	r1, [sp, #12]
   8c588:	4658      	mov	r0, fp
   8c58a:	4b44      	ldr	r3, [pc, #272]	; (8c69c <do_paint_window_frame2+0x9c0>)
   8c58c:	4798      	blx	r3
   8c58e:	9b04      	ldr	r3, [sp, #16]
   8c590:	18eb      	adds	r3, r5, r3
   8c592:	68db      	ldr	r3, [r3, #12]
   8c594:	e42d      	b.n	8bdf2 <do_paint_window_frame2+0x116>
            mw_gl_hline(&draw_info,
   8c596:	ab0f      	add	r3, sp, #60	; 0x3c
   8c598:	4699      	mov	r9, r3
                    mw_all_windows[window_id].window_rect.width - 1,
   8c59a:	8bb2      	ldrh	r2, [r6, #28]
            mw_gl_hline(&draw_info,
   8c59c:	9303      	str	r3, [sp, #12]
                    mw_all_windows[window_id].window_rect.width - 1,
   8c59e:	3a01      	subs	r2, #1
            mw_gl_hline(&draw_info,
   8c5a0:	4618      	mov	r0, r3
   8c5a2:	4621      	mov	r1, r4
   8c5a4:	4623      	mov	r3, r4
   8c5a6:	b212      	sxth	r2, r2
   8c5a8:	4f2d      	ldr	r7, [pc, #180]	; (8c660 <do_paint_window_frame2+0x984>)
   8c5aa:	47b8      	blx	r7
                    mw_all_windows[window_id].window_rect.height - 1);
   8c5ac:	8bf3      	ldrh	r3, [r6, #30]
            mw_gl_vline(&draw_info,
   8c5ae:	4648      	mov	r0, r9
                    mw_all_windows[window_id].window_rect.height - 1);
   8c5b0:	3b01      	subs	r3, #1
            mw_gl_vline(&draw_info,
   8c5b2:	4622      	mov	r2, r4
   8c5b4:	4621      	mov	r1, r4
   8c5b6:	b21b      	sxth	r3, r3
   8c5b8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8c65c <do_paint_window_frame2+0x980>
   8c5bc:	47c0      	blx	r8
                    mw_all_windows[window_id].window_rect.height - 1);
   8c5be:	8bf3      	ldrh	r3, [r6, #30]
                    mw_all_windows[window_id].window_rect.width - 1,
   8c5c0:	8bb1      	ldrh	r1, [r6, #28]
                    mw_all_windows[window_id].window_rect.height - 1);
   8c5c2:	3b01      	subs	r3, #1
                    mw_all_windows[window_id].window_rect.width - 1,
   8c5c4:	3901      	subs	r1, #1
            mw_gl_vline(&draw_info,
   8c5c6:	4622      	mov	r2, r4
   8c5c8:	b21b      	sxth	r3, r3
   8c5ca:	b209      	sxth	r1, r1
   8c5cc:	4648      	mov	r0, r9
   8c5ce:	47c0      	blx	r8
   8c5d0:	e636      	b.n	8c240 <do_paint_window_frame2+0x564>
	    mw_gl_set_font(MW_GL_FONT_9);
   8c5d2:	4b33      	ldr	r3, [pc, #204]	; (8c6a0 <do_paint_window_frame2+0x9c4>)
   8c5d4:	4798      	blx	r3
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
   8c5d6:	68fb      	ldr	r3, [r7, #12]
   8c5d8:	f013 0f80 	tst.w	r3, #128	; 0x80
			menu_bar_width += MW_SCROLL_BAR_NARROW_DIMENSION;
   8c5dc:	f04f 030e 	mov.w	r3, #14
   8c5e0:	461f      	mov	r7, r3
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
   8c5e2:	f43f ad81 	beq.w	8c0e8 <do_paint_window_frame2+0x40c>
			menu_bar_width += MW_SCROLL_BAR_NARROW_DIMENSION;
   8c5e6:	340c      	adds	r4, #12
   8c5e8:	b224      	sxth	r4, r4
		menu_bar_height = MW_MENU_BAR_HEIGHT;
   8c5ea:	9306      	str	r3, [sp, #24]
   8c5ec:	e57d      	b.n	8c0ea <do_paint_window_frame2+0x40e>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MODAL) == MW_WINDOW_FLAG_IS_MODAL)
   8c5ee:	065b      	lsls	r3, r3, #25
			mw_gl_set_solid_fill_colour(MW_TITLE_BAR_COLOUR_MODAL);
   8c5f0:	bf4c      	ite	mi
   8c5f2:	f44f 007f 	movmi.w	r0, #16711680	; 0xff0000
			mw_gl_set_solid_fill_colour(MW_TITLE_BAR_COLOUR_FOCUS);
   8c5f6:	20ff      	movpl	r0, #255	; 0xff
   8c5f8:	4b14      	ldr	r3, [pc, #80]	; (8c64c <do_paint_window_frame2+0x970>)
   8c5fa:	4798      	blx	r3
   8c5fc:	e7a2      	b.n	8c544 <do_paint_window_frame2+0x868>
			menu_bar_width += MW_SCROLL_BAR_LARGE_NARROW_DIMENSION;
   8c5fe:	3418      	adds	r4, #24
   8c600:	b224      	sxth	r4, r4
		menu_bar_height = MW_LARGE_MENU_BAR_HEIGHT;
   8c602:	9306      	str	r3, [sp, #24]
   8c604:	e571      	b.n	8c0ea <do_paint_window_frame2+0x40e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c606:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c60a:	0699      	lsls	r1, r3, #26
   8c60c:	f57f acbc 	bpl.w	8bf88 <do_paint_window_frame2+0x2ac>
   8c610:	2306      	movs	r3, #6
   8c612:	9305      	str	r3, [sp, #20]
   8c614:	2001      	movs	r0, #1
   8c616:	e750      	b.n	8c4ba <do_paint_window_frame2+0x7de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c618:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c61c:	069e      	lsls	r6, r3, #26
   8c61e:	f57f acae 	bpl.w	8bf7e <do_paint_window_frame2+0x2a2>
   8c622:	2305      	movs	r3, #5
   8c624:	9305      	str	r3, [sp, #20]
   8c626:	e7f5      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c628:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c62c:	069f      	lsls	r7, r3, #26
   8c62e:	f57f ac53 	bpl.w	8bed8 <do_paint_window_frame2+0x1fc>
   8c632:	2405      	movs	r4, #5
   8c634:	2001      	movs	r0, #1
   8c636:	e479      	b.n	8bf2c <do_paint_window_frame2+0x250>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c638:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c63c:	0699      	lsls	r1, r3, #26
   8c63e:	f57f ad14 	bpl.w	8c06a <do_paint_window_frame2+0x38e>
   8c642:	2606      	movs	r6, #6
   8c644:	2001      	movs	r0, #1
   8c646:	e535      	b.n	8c0b4 <do_paint_window_frame2+0x3d8>
   8c648:	00cccccc 	.word	0x00cccccc
   8c64c:	000846c9 	.word	0x000846c9
   8c650:	00086165 	.word	0x00086165
   8c654:	000ab75c 	.word	0x000ab75c
   8c658:	000850e1 	.word	0x000850e1
   8c65c:	00084f39 	.word	0x00084f39
   8c660:	00084dd1 	.word	0x00084dd1
   8c664:	000ab764 	.word	0x000ab764
   8c668:	000ab328 	.word	0x000ab328
   8c66c:	00095add 	.word	0x00095add
   8c670:	000a6880 	.word	0x000a6880
   8c674:	000a68dc 	.word	0x000a68dc
   8c678:	000a68f8 	.word	0x000a68f8
   8c67c:	000a680c 	.word	0x000a680c
   8c680:	000a6828 	.word	0x000a6828
   8c684:	000a66f4 	.word	0x000a66f4
   8c688:	000a6710 	.word	0x000a6710
   8c68c:	00bfbfbf 	.word	0x00bfbfbf
   8c690:	000846f1 	.word	0x000846f1
   8c694:	000846fd 	.word	0x000846fd
   8c698:	000846e1 	.word	0x000846e1
   8c69c:	000883f1 	.word	0x000883f1
   8c6a0:	00084715 	.word	0x00084715
   8c6a4:	000a6864 	.word	0x000a6864
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c6a8:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c6ac:	069e      	lsls	r6, r3, #26
   8c6ae:	f57f ac18 	bpl.w	8bee2 <do_paint_window_frame2+0x206>
   8c6b2:	2406      	movs	r4, #6
   8c6b4:	e7be      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c6b6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c6ba:	0698      	lsls	r0, r3, #26
   8c6bc:	f57f acd0 	bpl.w	8c060 <do_paint_window_frame2+0x384>
   8c6c0:	2605      	movs	r6, #5
   8c6c2:	e7bf      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c6c4:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c6c8:	069b      	lsls	r3, r3, #26
   8c6ca:	f57f acd8 	bpl.w	8c07e <do_paint_window_frame2+0x3a2>
   8c6ce:	2608      	movs	r6, #8
   8c6d0:	e7b8      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c6d2:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c6d6:	0698      	lsls	r0, r3, #26
   8c6d8:	f57f ac0d 	bpl.w	8bef6 <do_paint_window_frame2+0x21a>
   8c6dc:	2408      	movs	r4, #8
   8c6de:	e7a9      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c6e0:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c6e4:	069c      	lsls	r4, r3, #26
   8c6e6:	f57f ac01 	bpl.w	8beec <do_paint_window_frame2+0x210>
   8c6ea:	2407      	movs	r4, #7
   8c6ec:	e7a2      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c6ee:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c6f2:	069a      	lsls	r2, r3, #26
   8c6f4:	f57f acbe 	bpl.w	8c074 <do_paint_window_frame2+0x398>
   8c6f8:	2607      	movs	r6, #7
   8c6fa:	e7a3      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c6fc:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c700:	069b      	lsls	r3, r3, #26
   8c702:	f57f ac4b 	bpl.w	8bf9c <do_paint_window_frame2+0x2c0>
   8c706:	2308      	movs	r3, #8
   8c708:	9305      	str	r3, [sp, #20]
   8c70a:	e783      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c70c:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c710:	069a      	lsls	r2, r3, #26
   8c712:	f57f ac3e 	bpl.w	8bf92 <do_paint_window_frame2+0x2b6>
   8c716:	2307      	movs	r3, #7
   8c718:	9305      	str	r3, [sp, #20]
   8c71a:	e77b      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c71c:	f8d5 324c 	ldr.w	r3, [r5, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c720:	0699      	lsls	r1, r3, #26
   8c722:	f57f abed 	bpl.w	8bf00 <do_paint_window_frame2+0x224>
   8c726:	2409      	movs	r4, #9
   8c728:	e784      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c72a:	f8d5 324c 	ldr.w	r3, [r5, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c72e:	069f      	lsls	r7, r3, #26
   8c730:	f57f acaa 	bpl.w	8c088 <do_paint_window_frame2+0x3ac>
   8c734:	2609      	movs	r6, #9
   8c736:	e785      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c738:	f8d5 324c 	ldr.w	r3, [r5, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c73c:	069f      	lsls	r7, r3, #26
   8c73e:	f57f ac32 	bpl.w	8bfa6 <do_paint_window_frame2+0x2ca>
   8c742:	2309      	movs	r3, #9
   8c744:	9305      	str	r3, [sp, #20]
   8c746:	e765      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c748:	f8d5 334c 	ldr.w	r3, [r5, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c74c:	f013 0020 	ands.w	r0, r3, #32
   8c750:	bf18      	it	ne
   8c752:	240d      	movne	r4, #13
   8c754:	f47f af6e 	bne.w	8c634 <do_paint_window_frame2+0x958>
   8c758:	240e      	movs	r4, #14
   8c75a:	f7ff bbe7 	b.w	8bf2c <do_paint_window_frame2+0x250>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c75e:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c762:	069f      	lsls	r7, r3, #26
   8c764:	f57f abdb 	bpl.w	8bf1e <do_paint_window_frame2+0x242>
   8c768:	240c      	movs	r4, #12
   8c76a:	e763      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c76c:	f8d5 32cc 	ldr.w	r3, [r5, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c770:	069b      	lsls	r3, r3, #26
   8c772:	f57f abcf 	bpl.w	8bf14 <do_paint_window_frame2+0x238>
   8c776:	240b      	movs	r4, #11
   8c778:	e75c      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c77a:	f8d5 32cc 	ldr.w	r3, [r5, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c77e:	069c      	lsls	r4, r3, #26
   8c780:	f57f ac8c 	bpl.w	8c09c <do_paint_window_frame2+0x3c0>
   8c784:	260b      	movs	r6, #11
   8c786:	e75d      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c788:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c78c:	069e      	lsls	r6, r3, #26
   8c78e:	f57f ac80 	bpl.w	8c092 <do_paint_window_frame2+0x3b6>
   8c792:	260a      	movs	r6, #10
   8c794:	e756      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c796:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c79a:	069a      	lsls	r2, r3, #26
   8c79c:	f57f abb5 	bpl.w	8bf0a <do_paint_window_frame2+0x22e>
   8c7a0:	240a      	movs	r4, #10
   8c7a2:	e747      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c7a4:	f8d5 334c 	ldr.w	r3, [r5, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c7a8:	f013 0020 	ands.w	r0, r3, #32
   8c7ac:	f43f ae83 	beq.w	8c4b6 <do_paint_window_frame2+0x7da>
   8c7b0:	230d      	movs	r3, #13
   8c7b2:	9305      	str	r3, [sp, #20]
   8c7b4:	e72e      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c7b6:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c7ba:	069a      	lsls	r2, r3, #26
   8c7bc:	f57f ac02 	bpl.w	8bfc4 <do_paint_window_frame2+0x2e8>
   8c7c0:	230c      	movs	r3, #12
   8c7c2:	9305      	str	r3, [sp, #20]
   8c7c4:	e726      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c7c6:	f8d5 32cc 	ldr.w	r3, [r5, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c7ca:	0699      	lsls	r1, r3, #26
   8c7cc:	f57f abf5 	bpl.w	8bfba <do_paint_window_frame2+0x2de>
   8c7d0:	230b      	movs	r3, #11
   8c7d2:	9305      	str	r3, [sp, #20]
   8c7d4:	e71e      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c7d6:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c7da:	069e      	lsls	r6, r3, #26
   8c7dc:	f57f abe8 	bpl.w	8bfb0 <do_paint_window_frame2+0x2d4>
   8c7e0:	230a      	movs	r3, #10
   8c7e2:	9305      	str	r3, [sp, #20]
   8c7e4:	e716      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c7e6:	f8d5 334c 	ldr.w	r3, [r5, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c7ea:	f013 0020 	ands.w	r0, r3, #32
   8c7ee:	bf18      	it	ne
   8c7f0:	260d      	movne	r6, #13
   8c7f2:	f47f af27 	bne.w	8c644 <do_paint_window_frame2+0x968>
   8c7f6:	260e      	movs	r6, #14
   8c7f8:	e45c      	b.n	8c0b4 <do_paint_window_frame2+0x3d8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c7fa:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c7fe:	0698      	lsls	r0, r3, #26
   8c800:	f57f ac51 	bpl.w	8c0a6 <do_paint_window_frame2+0x3ca>
   8c804:	260c      	movs	r6, #12
   8c806:	e71d      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c808:	68eb      	ldr	r3, [r5, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8c80a:	069c      	lsls	r4, r3, #26
   8c80c:	f57f ab4c 	bpl.w	8bea8 <do_paint_window_frame2+0x1cc>
   8c810:	2400      	movs	r4, #0
   8c812:	e70f      	b.n	8c634 <do_paint_window_frame2+0x958>
		mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   8c814:	4b66      	ldr	r3, [pc, #408]	; (8c9b0 <do_paint_window_frame2+0xcd4>)
   8c816:	4630      	mov	r0, r6
   8c818:	9305      	str	r3, [sp, #20]
   8c81a:	4798      	blx	r3
		mw_gl_set_bg_colour((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_CAN_BE_CLOSED) == MW_WINDOW_FLAG_CAN_BE_CLOSED ? (mw_hal_lcd_colour_t)MW_HAL_LCD_WHITE : (mw_hal_lcd_colour_t)MW_HAL_LCD_GREY5);
   8c81c:	68e3      	ldr	r3, [r4, #12]
   8c81e:	4a65      	ldr	r2, [pc, #404]	; (8c9b4 <do_paint_window_frame2+0xcd8>)
   8c820:	f013 0f04 	tst.w	r3, #4
   8c824:	bf0c      	ite	eq
   8c826:	4610      	moveq	r0, r2
   8c828:	f06f 407f 	mvnne.w	r0, #4278190080	; 0xff000000
   8c82c:	4a62      	ldr	r2, [pc, #392]	; (8c9b8 <do_paint_window_frame2+0xcdc>)
   8c82e:	4790      	blx	r2
		mw_gl_set_bg_transparency(MW_GL_BG_NOT_TRANSPARENT);
   8c830:	2001      	movs	r0, #1
   8c832:	4a62      	ldr	r2, [pc, #392]	; (8c9bc <do_paint_window_frame2+0xce0>)
   8c834:	4790      	blx	r2
		mw_gl_monochrome_bitmap(draw_info,
   8c836:	9a08      	ldr	r2, [sp, #32]
				mw_all_windows[window_id].window_rect.width - icon_offset,
   8c838:	8ba1      	ldrh	r1, [r4, #28]
		mw_gl_monochrome_bitmap(draw_info,
   8c83a:	9201      	str	r2, [sp, #4]
				mw_all_windows[window_id].window_rect.width - icon_offset,
   8c83c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		mw_gl_monochrome_bitmap(draw_info,
   8c83e:	9803      	ldr	r0, [sp, #12]
				mw_all_windows[window_id].window_rect.width - icon_offset,
   8c840:	1a89      	subs	r1, r1, r2
		mw_gl_monochrome_bitmap(draw_info,
   8c842:	b209      	sxth	r1, r1
   8c844:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8c9c4 <do_paint_window_frame2+0xce8>
   8c848:	463b      	mov	r3, r7
   8c84a:	2202      	movs	r2, #2
   8c84c:	9700      	str	r7, [sp, #0]
   8c84e:	47c0      	blx	r8
		mw_gl_set_fg_colour((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_FIXED_SIZE) == MW_WINDOW_FLAG_FIXED_SIZE ? (mw_hal_lcd_colour_t)MW_HAL_LCD_GREY5 : (mw_hal_lcd_colour_t)MW_HAL_LCD_WHITE);
   8c850:	68e3      	ldr	r3, [r4, #12]
   8c852:	4a58      	ldr	r2, [pc, #352]	; (8c9b4 <do_paint_window_frame2+0xcd8>)
   8c854:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8c858:	bf14      	ite	ne
   8c85a:	4610      	movne	r0, r2
   8c85c:	f06f 407f 	mvneq.w	r0, #4278190080	; 0xff000000
   8c860:	9b05      	ldr	r3, [sp, #20]
   8c862:	4798      	blx	r3
		mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   8c864:	4630      	mov	r0, r6
   8c866:	4a55      	ldr	r2, [pc, #340]	; (8c9bc <do_paint_window_frame2+0xce0>)
   8c868:	4790      	blx	r2
		mw_gl_monochrome_bitmap(draw_info,
   8c86a:	2202      	movs	r2, #2
   8c86c:	9909      	ldr	r1, [sp, #36]	; 0x24
   8c86e:	463b      	mov	r3, r7
   8c870:	9101      	str	r1, [sp, #4]
   8c872:	9803      	ldr	r0, [sp, #12]
   8c874:	4611      	mov	r1, r2
   8c876:	9700      	str	r7, [sp, #0]
   8c878:	47c0      	blx	r8
		mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   8c87a:	4630      	mov	r0, r6
   8c87c:	9b05      	ldr	r3, [sp, #20]
   8c87e:	4798      	blx	r3
		mw_gl_set_bg_transparency(MW_GL_BG_NOT_TRANSPARENT);
   8c880:	2001      	movs	r0, #1
   8c882:	4b4e      	ldr	r3, [pc, #312]	; (8c9bc <do_paint_window_frame2+0xce0>)
   8c884:	4798      	blx	r3
		mw_gl_set_bg_colour((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_FIXED_SIZE) == MW_WINDOW_FLAG_FIXED_SIZE ? (mw_hal_lcd_colour_t)MW_HAL_LCD_GREY5 : (mw_hal_lcd_colour_t)MW_HAL_LCD_WHITE);
   8c886:	68e3      	ldr	r3, [r4, #12]
   8c888:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8c88c:	4b49      	ldr	r3, [pc, #292]	; (8c9b4 <do_paint_window_frame2+0xcd8>)
   8c88e:	bf0c      	ite	eq
   8c890:	f06f 407f 	mvneq.w	r0, #4278190080	; 0xff000000
   8c894:	4618      	movne	r0, r3
   8c896:	4b48      	ldr	r3, [pc, #288]	; (8c9b8 <do_paint_window_frame2+0xcdc>)
   8c898:	4798      	blx	r3
		mw_gl_monochrome_bitmap(draw_info,
   8c89a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				mw_all_windows[window_id].window_rect.width - (icon_offset * 2),
   8c89c:	8ba1      	ldrh	r1, [r4, #28]
		mw_gl_monochrome_bitmap(draw_info,
   8c89e:	9301      	str	r3, [sp, #4]
				mw_all_windows[window_id].window_rect.width - (icon_offset * 2),
   8c8a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		mw_gl_monochrome_bitmap(draw_info,
   8c8a2:	9e03      	ldr	r6, [sp, #12]
				mw_all_windows[window_id].window_rect.width - (icon_offset * 2),
   8c8a4:	1ac9      	subs	r1, r1, r3
		mw_gl_monochrome_bitmap(draw_info,
   8c8a6:	b209      	sxth	r1, r1
   8c8a8:	2202      	movs	r2, #2
   8c8aa:	463b      	mov	r3, r7
   8c8ac:	4630      	mov	r0, r6
   8c8ae:	9700      	str	r7, [sp, #0]
   8c8b0:	47c0      	blx	r8
		mw_gl_set_bg_colour(MW_HAL_LCD_WHITE);
   8c8b2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   8c8b6:	4b40      	ldr	r3, [pc, #256]	; (8c9b8 <do_paint_window_frame2+0xcdc>)
   8c8b8:	4798      	blx	r3
				mw_all_windows[window_id].window_rect.width - (icon_offset * 3),
   8c8ba:	8ba1      	ldrh	r1, [r4, #28]
		mw_gl_monochrome_bitmap(draw_info,
   8c8bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				mw_all_windows[window_id].window_rect.width - (icon_offset * 3),
   8c8be:	4449      	add	r1, r9
		mw_gl_monochrome_bitmap(draw_info,
   8c8c0:	9301      	str	r3, [sp, #4]
   8c8c2:	b209      	sxth	r1, r1
   8c8c4:	463b      	mov	r3, r7
   8c8c6:	2202      	movs	r2, #2
   8c8c8:	4630      	mov	r0, r6
   8c8ca:	9700      	str	r7, [sp, #0]
   8c8cc:	47c0      	blx	r8
				(int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].title))
   8c8ce:	9806      	ldr	r0, [sp, #24]
		if (mw_all_windows[window_id].window_rect.width - (icon_offset * 4) - title_x_offset >
   8c8d0:	f9b4 401c 	ldrsh.w	r4, [r4, #28]
   8c8d4:	9a07      	ldr	r2, [sp, #28]
				(int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].title))
   8c8d6:	3031      	adds	r0, #49	; 0x31
		if (mw_all_windows[window_id].window_rect.width - (icon_offset * 4) - title_x_offset >
   8c8d8:	eba4 040a 	sub.w	r4, r4, sl
				(int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].title))
   8c8dc:	4428      	add	r0, r5
   8c8de:	4b38      	ldr	r3, [pc, #224]	; (8c9c0 <do_paint_window_frame2+0xce4>)
		if (mw_all_windows[window_id].window_rect.width - (icon_offset * 4) - title_x_offset >
   8c8e0:	1aa4      	subs	r4, r4, r2
				(int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].title))
   8c8e2:	4798      	blx	r3
		if (mw_all_windows[window_id].window_rect.width - (icon_offset * 4) - title_x_offset >
   8c8e4:	4284      	cmp	r4, r0
   8c8e6:	f77f ae52 	ble.w	8c58e <do_paint_window_frame2+0x8b2>
   8c8ea:	e64c      	b.n	8c586 <do_paint_window_frame2+0x8aa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c8ec:	68eb      	ldr	r3, [r5, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8c8ee:	069a      	lsls	r2, r3, #26
   8c8f0:	f57f ab9e 	bpl.w	8c030 <do_paint_window_frame2+0x354>
   8c8f4:	2600      	movs	r6, #0
   8c8f6:	e6a5      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c8f8:	68eb      	ldr	r3, [r5, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8c8fa:	069e      	lsls	r6, r3, #26
   8c8fc:	f57f ab27 	bpl.w	8bf4e <do_paint_window_frame2+0x272>
   8c900:	2300      	movs	r3, #0
   8c902:	9305      	str	r3, [sp, #20]
   8c904:	e686      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c906:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c90a:	069e      	lsls	r6, r3, #26
   8c90c:	f57f ab9e 	bpl.w	8c04c <do_paint_window_frame2+0x370>
   8c910:	2603      	movs	r6, #3
   8c912:	e697      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c914:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c918:	069f      	lsls	r7, r3, #26
   8c91a:	f57f ab92 	bpl.w	8c042 <do_paint_window_frame2+0x366>
   8c91e:	2602      	movs	r6, #2
   8c920:	e690      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c922:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c924:	069b      	lsls	r3, r3, #26
   8c926:	f57f ab87 	bpl.w	8c038 <do_paint_window_frame2+0x35c>
   8c92a:	2601      	movs	r6, #1
   8c92c:	e68a      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c92e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c930:	0699      	lsls	r1, r3, #26
   8c932:	f57f ab10 	bpl.w	8bf56 <do_paint_window_frame2+0x27a>
   8c936:	2301      	movs	r3, #1
   8c938:	9305      	str	r3, [sp, #20]
   8c93a:	e66b      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c93c:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c940:	069b      	lsls	r3, r3, #26
   8c942:	f57f ab12 	bpl.w	8bf6a <do_paint_window_frame2+0x28e>
   8c946:	2303      	movs	r3, #3
   8c948:	9305      	str	r3, [sp, #20]
   8c94a:	e663      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c94c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c950:	069a      	lsls	r2, r3, #26
   8c952:	f57f ab05 	bpl.w	8bf60 <do_paint_window_frame2+0x284>
   8c956:	2302      	movs	r3, #2
   8c958:	9305      	str	r3, [sp, #20]
   8c95a:	e65b      	b.n	8c614 <do_paint_window_frame2+0x938>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c95c:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8c960:	069a      	lsls	r2, r3, #26
   8c962:	f57f aaaf 	bpl.w	8bec4 <do_paint_window_frame2+0x1e8>
   8c966:	2403      	movs	r4, #3
   8c968:	e664      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c96a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c96e:	0699      	lsls	r1, r3, #26
   8c970:	f57f aaa3 	bpl.w	8beba <do_paint_window_frame2+0x1de>
   8c974:	2402      	movs	r4, #2
   8c976:	e65d      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c978:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c97a:	0698      	lsls	r0, r3, #26
   8c97c:	f57f aa98 	bpl.w	8beb0 <do_paint_window_frame2+0x1d4>
   8c980:	2401      	movs	r4, #1
   8c982:	e657      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c984:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c988:	069b      	lsls	r3, r3, #26
   8c98a:	f57f aaa0 	bpl.w	8bece <do_paint_window_frame2+0x1f2>
   8c98e:	2404      	movs	r4, #4
   8c990:	e650      	b.n	8c634 <do_paint_window_frame2+0x958>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c992:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c996:	069c      	lsls	r4, r3, #26
   8c998:	f57f ab5d 	bpl.w	8c056 <do_paint_window_frame2+0x37a>
   8c99c:	2604      	movs	r6, #4
   8c99e:	e651      	b.n	8c644 <do_paint_window_frame2+0x968>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8c9a0:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c9a4:	069f      	lsls	r7, r3, #26
   8c9a6:	f57f aae5 	bpl.w	8bf74 <do_paint_window_frame2+0x298>
   8c9aa:	2304      	movs	r3, #4
   8c9ac:	9305      	str	r3, [sp, #20]
   8c9ae:	e631      	b.n	8c614 <do_paint_window_frame2+0x938>
   8c9b0:	000846b1 	.word	0x000846b1
   8c9b4:	00bfbfbf 	.word	0x00bfbfbf
   8c9b8:	000846bd 	.word	0x000846bd
   8c9bc:	00084709 	.word	0x00084709
   8c9c0:	00086165 	.word	0x00086165
   8c9c4:	000868b1 	.word	0x000868b1

0008c9c8 <do_paint_window_frame>:
	if (window_handle == MW_INVALID_HANDLE)
   8c9c8:	2800      	cmp	r0, #0
   8c9ca:	d03f      	beq.n	8ca4c <do_paint_window_frame+0x84>
{
   8c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (mw_all_windows[i].window_handle == window_handle &&
   8c9d0:	f8df a4bc 	ldr.w	sl, [pc, #1212]	; 8ce90 <do_paint_window_frame+0x4c8>
{
   8c9d4:	b08b      	sub	sp, #44	; 0x2c
		if (mw_all_windows[i].window_handle == window_handle &&
   8c9d6:	f8da 3014 	ldr.w	r3, [sl, #20]
   8c9da:	4298      	cmp	r0, r3
   8c9dc:	d037      	beq.n	8ca4e <do_paint_window_frame+0x86>
   8c9de:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   8c9e2:	4298      	cmp	r0, r3
   8c9e4:	d041      	beq.n	8ca6a <do_paint_window_frame+0xa2>
   8c9e6:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   8c9ea:	4298      	cmp	r0, r3
   8c9ec:	d036      	beq.n	8ca5c <do_paint_window_frame+0x94>
   8c9ee:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   8c9f2:	4298      	cmp	r0, r3
   8c9f4:	d047      	beq.n	8ca86 <do_paint_window_frame+0xbe>
   8c9f6:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   8c9fa:	4298      	cmp	r0, r3
   8c9fc:	d03c      	beq.n	8ca78 <do_paint_window_frame+0xb0>
   8c9fe:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   8ca02:	4298      	cmp	r0, r3
   8ca04:	d04d      	beq.n	8caa2 <do_paint_window_frame+0xda>
   8ca06:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   8ca0a:	4298      	cmp	r0, r3
   8ca0c:	d042      	beq.n	8ca94 <do_paint_window_frame+0xcc>
   8ca0e:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   8ca12:	4298      	cmp	r0, r3
   8ca14:	d053      	beq.n	8cabe <do_paint_window_frame+0xf6>
   8ca16:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   8ca1a:	4298      	cmp	r0, r3
   8ca1c:	d048      	beq.n	8cab0 <do_paint_window_frame+0xe8>
   8ca1e:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   8ca22:	4298      	cmp	r0, r3
   8ca24:	d059      	beq.n	8cada <do_paint_window_frame+0x112>
   8ca26:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   8ca2a:	4298      	cmp	r0, r3
   8ca2c:	d04e      	beq.n	8cacc <do_paint_window_frame+0x104>
   8ca2e:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   8ca32:	4298      	cmp	r0, r3
   8ca34:	d05f      	beq.n	8caf6 <do_paint_window_frame+0x12e>
   8ca36:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   8ca3a:	4298      	cmp	r0, r3
   8ca3c:	d054      	beq.n	8cae8 <do_paint_window_frame+0x120>
   8ca3e:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   8ca42:	4298      	cmp	r0, r3
   8ca44:	d05e      	beq.n	8cb04 <do_paint_window_frame+0x13c>
}
   8ca46:	b00b      	add	sp, #44	; 0x2c
   8ca48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ca4c:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ca4e:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca52:	069d      	lsls	r5, r3, #26
   8ca54:	d5c3      	bpl.n	8c9de <do_paint_window_frame+0x16>
   8ca56:	2400      	movs	r4, #0
   8ca58:	4625      	mov	r5, r4
   8ca5a:	e059      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ca5c:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca60:	069a      	lsls	r2, r3, #26
   8ca62:	d5c4      	bpl.n	8c9ee <do_paint_window_frame+0x26>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ca64:	2402      	movs	r4, #2
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca66:	4625      	mov	r5, r4
   8ca68:	e052      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ca6a:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca6e:	069c      	lsls	r4, r3, #26
   8ca70:	d5b9      	bpl.n	8c9e6 <do_paint_window_frame+0x1e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ca72:	2401      	movs	r4, #1
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca74:	4625      	mov	r5, r4
   8ca76:	e04b      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ca78:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca7c:	069e      	lsls	r6, r3, #26
   8ca7e:	d5be      	bpl.n	8c9fe <do_paint_window_frame+0x36>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ca80:	2404      	movs	r4, #4
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca82:	4625      	mov	r5, r4
   8ca84:	e044      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ca86:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca8a:	069f      	lsls	r7, r3, #26
   8ca8c:	d5b3      	bpl.n	8c9f6 <do_paint_window_frame+0x2e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ca8e:	2403      	movs	r4, #3
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca90:	4625      	mov	r5, r4
   8ca92:	e03d      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ca94:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca98:	069c      	lsls	r4, r3, #26
   8ca9a:	d5b8      	bpl.n	8ca0e <do_paint_window_frame+0x46>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ca9c:	2406      	movs	r4, #6
		if (mw_all_windows[i].window_handle == window_handle &&
   8ca9e:	4625      	mov	r5, r4
   8caa0:	e036      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8caa2:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8caa6:	069d      	lsls	r5, r3, #26
   8caa8:	d5ad      	bpl.n	8ca06 <do_paint_window_frame+0x3e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8caaa:	2405      	movs	r4, #5
		if (mw_all_windows[i].window_handle == window_handle &&
   8caac:	4625      	mov	r5, r4
   8caae:	e02f      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cab0:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8cab4:	069f      	lsls	r7, r3, #26
   8cab6:	d5b2      	bpl.n	8ca1e <do_paint_window_frame+0x56>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8cab8:	2408      	movs	r4, #8
		if (mw_all_windows[i].window_handle == window_handle &&
   8caba:	4625      	mov	r5, r4
   8cabc:	e028      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cabe:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8cac2:	069a      	lsls	r2, r3, #26
   8cac4:	d5a7      	bpl.n	8ca16 <do_paint_window_frame+0x4e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8cac6:	2407      	movs	r4, #7
		if (mw_all_windows[i].window_handle == window_handle &&
   8cac8:	4625      	mov	r5, r4
   8caca:	e021      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cacc:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8cad0:	069d      	lsls	r5, r3, #26
   8cad2:	d5ac      	bpl.n	8ca2e <do_paint_window_frame+0x66>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8cad4:	240a      	movs	r4, #10
		if (mw_all_windows[i].window_handle == window_handle &&
   8cad6:	4625      	mov	r5, r4
   8cad8:	e01a      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cada:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8cade:	069e      	lsls	r6, r3, #26
   8cae0:	d5a1      	bpl.n	8ca26 <do_paint_window_frame+0x5e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8cae2:	2409      	movs	r4, #9
		if (mw_all_windows[i].window_handle == window_handle &&
   8cae4:	4625      	mov	r5, r4
   8cae6:	e013      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cae8:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8caec:	069a      	lsls	r2, r3, #26
   8caee:	d5a6      	bpl.n	8ca3e <do_paint_window_frame+0x76>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8caf0:	240c      	movs	r4, #12
		if (mw_all_windows[i].window_handle == window_handle &&
   8caf2:	4625      	mov	r5, r4
   8caf4:	e00c      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8caf6:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8cafa:	069c      	lsls	r4, r3, #26
   8cafc:	d59b      	bpl.n	8ca36 <do_paint_window_frame+0x6e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8cafe:	240b      	movs	r4, #11
		if (mw_all_windows[i].window_handle == window_handle &&
   8cb00:	4625      	mov	r5, r4
   8cb02:	e005      	b.n	8cb10 <do_paint_window_frame+0x148>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cb04:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8cb08:	069f      	lsls	r7, r3, #26
   8cb0a:	d59c      	bpl.n	8ca46 <do_paint_window_frame+0x7e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8cb0c:	240d      	movs	r4, #13
		if (mw_all_windows[i].window_handle == window_handle &&
   8cb0e:	4625      	mov	r5, r4
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cb10:	f003 0228 	and.w	r2, r3, #40	; 0x28
   8cb14:	2a28      	cmp	r2, #40	; 0x28
   8cb16:	d196      	bne.n	8ca46 <do_paint_window_frame+0x7e>
			(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cb18:	06de      	lsls	r6, r3, #27
   8cb1a:	d494      	bmi.n	8ca46 <do_paint_window_frame+0x7e>
			(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   8cb1c:	2c00      	cmp	r4, #0
   8cb1e:	d092      	beq.n	8ca46 <do_paint_window_frame+0x7e>
	if (find_if_rect_is_completely_on_screen(&mw_all_windows[window_id].window_rect) && window_handle == window_with_focus_handle)
   8cb20:	01ab      	lsls	r3, r5, #6
   8cb22:	461d      	mov	r5, r3
   8cb24:	9300      	str	r3, [sp, #0]
   8cb26:	f103 0418 	add.w	r4, r3, #24
	int16_t root_width = MW_ROOT_WIDTH;
   8cb2a:	4bd0      	ldr	r3, [pc, #832]	; (8ce6c <do_paint_window_frame+0x4a4>)
   8cb2c:	9103      	str	r1, [sp, #12]
   8cb2e:	9002      	str	r0, [sp, #8]
   8cb30:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   8cb32:	4bcf      	ldr	r3, [pc, #828]	; (8ce70 <do_paint_window_frame+0x4a8>)
	int16_t root_width = MW_ROOT_WIDTH;
   8cb34:	4606      	mov	r6, r0
	int16_t root_height = MW_ROOT_HEIGHT;
   8cb36:	4798      	blx	r3
	return (rect->x >= 0 &&
   8cb38:	eb0a 0305 	add.w	r3, sl, r5
   8cb3c:	f9b3 7018 	ldrsh.w	r7, [r3, #24]
	if (find_if_rect_is_completely_on_screen(&mw_all_windows[window_id].window_rect) && window_handle == window_with_focus_handle)
   8cb40:	4454      	add	r4, sl
			rect->x + rect->width <= root_width &&
   8cb42:	2f00      	cmp	r7, #0
	return (rect->x >= 0 &&
   8cb44:	f103 0118 	add.w	r1, r3, #24
			rect->x + rect->width <= root_width &&
   8cb48:	db0e      	blt.n	8cb68 <do_paint_window_frame+0x1a0>
			rect->y >= 0 &&
   8cb4a:	f9b3 501a 	ldrsh.w	r5, [r3, #26]
	return (rect->x >= 0 &&
   8cb4e:	2d00      	cmp	r5, #0
   8cb50:	db0a      	blt.n	8cb68 <do_paint_window_frame+0x1a0>
			rect->x + rect->width <= root_width &&
   8cb52:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   8cb56:	443a      	add	r2, r7
			rect->y >= 0 &&
   8cb58:	42b2      	cmp	r2, r6
   8cb5a:	dc05      	bgt.n	8cb68 <do_paint_window_frame+0x1a0>
			rect->y + rect->height <= root_height);
   8cb5c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
   8cb60:	442b      	add	r3, r5
			rect->x + rect->width <= root_width &&
   8cb62:	4283      	cmp	r3, r0
   8cb64:	f340 8292 	ble.w	8d08c <do_paint_window_frame+0x6c4>
		find_rect_window_intersections(&mw_all_windows[window_id].window_rect, &horiz_edges_count, &vert_edges_count);
   8cb68:	a905      	add	r1, sp, #20
   8cb6a:	4620      	mov	r0, r4
   8cb6c:	f10d 0216 	add.w	r2, sp, #22
   8cb70:	4bc0      	ldr	r3, [pc, #768]	; (8ce74 <do_paint_window_frame+0x4ac>)
   8cb72:	4798      	blx	r3
		for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   8cb74:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   8cb78:	2901      	cmp	r1, #1
   8cb7a:	f43f af64 	beq.w	8ca46 <do_paint_window_frame+0x7e>
   8cb7e:	2300      	movs	r3, #0
   8cb80:	4618      	mov	r0, r3
   8cb82:	f8df b310 	ldr.w	fp, [pc, #784]	; 8ce94 <do_paint_window_frame+0x4cc>
   8cb86:	9301      	str	r3, [sp, #4]
			rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   8cb88:	4abb      	ldr	r2, [pc, #748]	; (8ce78 <do_paint_window_frame+0x4b0>)
   8cb8a:	3301      	adds	r3, #1
   8cb8c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
			rect_current.y = horizontal_edges[horizontal_edge_counter];
   8cb90:	4bb9      	ldr	r3, [pc, #740]	; (8ce78 <do_paint_window_frame+0x4b0>)
   8cb92:	f933 9010 	ldrsh.w	r9, [r3, r0, lsl #1]
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8cb96:	f8bd 0016 	ldrh.w	r0, [sp, #22]
			rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   8cb9a:	eba2 0209 	sub.w	r2, r2, r9
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8cb9e:	2801      	cmp	r0, #1
			rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   8cba0:	f8ad 201e 	strh.w	r2, [sp, #30]
			rect_current.y = horizontal_edges[horizontal_edge_counter];
   8cba4:	f8ad 901a 	strh.w	r9, [sp, #26]
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8cba8:	f000 81ad 	beq.w	8cf06 <do_paint_window_frame+0x53e>
   8cbac:	2200      	movs	r2, #0
   8cbae:	4616      	mov	r6, r2
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8cbb0:	4614      	mov	r4, r2
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8cbb2:	3201      	adds	r2, #1
   8cbb4:	f83b 3012 	ldrh.w	r3, [fp, r2, lsl #1]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cbb8:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
				rect_current.x = vertical_edges[vertical_edge_counter];
   8cbbc:	f93b 8016 	ldrsh.w	r8, [fp, r6, lsl #1]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cbc0:	f002 0128 	and.w	r1, r2, #40	; 0x28
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8cbc4:	eba3 0308 	sub.w	r3, r3, r8
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cbc8:	2928      	cmp	r1, #40	; 0x28
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   8cbca:	f8ad 301c 	strh.w	r3, [sp, #28]
				rect_current.x = vertical_edges[vertical_edge_counter];
   8cbce:	f8ad 8018 	strh.w	r8, [sp, #24]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cbd2:	d102      	bne.n	8cbda <do_paint_window_frame+0x212>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cbd4:	06d2      	lsls	r2, r2, #27
   8cbd6:	f140 81a0 	bpl.w	8cf1a <do_paint_window_frame+0x552>
	uint8_t highest_z_order = 0U;
   8cbda:	2500      	movs	r5, #0
	uint8_t window_id = MW_ROOT_WINDOW_ID;
   8cbdc:	462f      	mov	r7, r5
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cbde:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
   8cbe2:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cbe6:	2928      	cmp	r1, #40	; 0x28
   8cbe8:	d102      	bne.n	8cbf0 <do_paint_window_frame+0x228>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cbea:	06d3      	lsls	r3, r2, #27
   8cbec:	f140 81d0 	bpl.w	8cf90 <do_paint_window_frame+0x5c8>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cbf0:	f8da 20cc 	ldr.w	r2, [sl, #204]	; 0xcc
   8cbf4:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cbf8:	2928      	cmp	r1, #40	; 0x28
   8cbfa:	d102      	bne.n	8cc02 <do_paint_window_frame+0x23a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cbfc:	06d0      	lsls	r0, r2, #27
   8cbfe:	f140 81d6 	bpl.w	8cfae <do_paint_window_frame+0x5e6>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cc02:	f8da 210c 	ldr.w	r2, [sl, #268]	; 0x10c
   8cc06:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cc0a:	2928      	cmp	r1, #40	; 0x28
   8cc0c:	d102      	bne.n	8cc14 <do_paint_window_frame+0x24c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cc0e:	06d1      	lsls	r1, r2, #27
   8cc10:	f140 81dc 	bpl.w	8cfcc <do_paint_window_frame+0x604>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cc14:	f8da 214c 	ldr.w	r2, [sl, #332]	; 0x14c
   8cc18:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cc1c:	2928      	cmp	r1, #40	; 0x28
   8cc1e:	d102      	bne.n	8cc26 <do_paint_window_frame+0x25e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cc20:	06d2      	lsls	r2, r2, #27
   8cc22:	f140 81e2 	bpl.w	8cfea <do_paint_window_frame+0x622>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cc26:	f8da 218c 	ldr.w	r2, [sl, #396]	; 0x18c
   8cc2a:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cc2e:	2928      	cmp	r1, #40	; 0x28
   8cc30:	d102      	bne.n	8cc38 <do_paint_window_frame+0x270>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cc32:	06d3      	lsls	r3, r2, #27
   8cc34:	f140 81e8 	bpl.w	8d008 <do_paint_window_frame+0x640>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cc38:	f8da 21cc 	ldr.w	r2, [sl, #460]	; 0x1cc
   8cc3c:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cc40:	2928      	cmp	r1, #40	; 0x28
   8cc42:	d102      	bne.n	8cc4a <do_paint_window_frame+0x282>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cc44:	06d0      	lsls	r0, r2, #27
   8cc46:	f140 81ee 	bpl.w	8d026 <do_paint_window_frame+0x65e>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cc4a:	f8da 220c 	ldr.w	r2, [sl, #524]	; 0x20c
   8cc4e:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cc52:	2928      	cmp	r1, #40	; 0x28
   8cc54:	d102      	bne.n	8cc5c <do_paint_window_frame+0x294>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cc56:	06d1      	lsls	r1, r2, #27
   8cc58:	f140 81f4 	bpl.w	8d044 <do_paint_window_frame+0x67c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cc5c:	f8da 224c 	ldr.w	r2, [sl, #588]	; 0x24c
   8cc60:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cc64:	2928      	cmp	r1, #40	; 0x28
   8cc66:	d102      	bne.n	8cc6e <do_paint_window_frame+0x2a6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cc68:	06d2      	lsls	r2, r2, #27
   8cc6a:	f140 81fa 	bpl.w	8d062 <do_paint_window_frame+0x69a>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cc6e:	f8da 228c 	ldr.w	r2, [sl, #652]	; 0x28c
   8cc72:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cc76:	2928      	cmp	r1, #40	; 0x28
   8cc78:	d102      	bne.n	8cc80 <do_paint_window_frame+0x2b8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cc7a:	06d3      	lsls	r3, r2, #27
   8cc7c:	f140 815b 	bpl.w	8cf36 <do_paint_window_frame+0x56e>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cc80:	f8da 22cc 	ldr.w	r2, [sl, #716]	; 0x2cc
   8cc84:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cc88:	2928      	cmp	r1, #40	; 0x28
   8cc8a:	d102      	bne.n	8cc92 <do_paint_window_frame+0x2ca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cc8c:	06d0      	lsls	r0, r2, #27
   8cc8e:	f140 8161 	bpl.w	8cf54 <do_paint_window_frame+0x58c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cc92:	f8da 230c 	ldr.w	r2, [sl, #780]	; 0x30c
   8cc96:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8cc9a:	2928      	cmp	r1, #40	; 0x28
   8cc9c:	d102      	bne.n	8cca4 <do_paint_window_frame+0x2dc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8cc9e:	06d1      	lsls	r1, r2, #27
   8cca0:	f140 8167 	bpl.w	8cf72 <do_paint_window_frame+0x5aa>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   8cca4:	f8da 234c 	ldr.w	r2, [sl, #844]	; 0x34c
   8cca8:	f002 0128 	and.w	r1, r2, #40	; 0x28
   8ccac:	2928      	cmp	r1, #40	; 0x28
   8ccae:	d101      	bne.n	8ccb4 <do_paint_window_frame+0x2ec>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   8ccb0:	06d2      	lsls	r2, r2, #27
   8ccb2:	d56d      	bpl.n	8cd90 <do_paint_window_frame+0x3c8>
   8ccb4:	463b      	mov	r3, r7
	return (mw_all_windows[window_id].window_handle);
   8ccb6:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
   8ccba:	6958      	ldr	r0, [r3, #20]
	if (window_handle == MW_INVALID_HANDLE)
   8ccbc:	2800      	cmp	r0, #0
   8ccbe:	f000 8088 	beq.w	8cdd2 <do_paint_window_frame+0x40a>
		if (mw_all_windows[i].window_handle == window_handle &&
   8ccc2:	f8da 3014 	ldr.w	r3, [sl, #20]
   8ccc6:	4283      	cmp	r3, r0
   8ccc8:	f000 8087 	beq.w	8cdda <do_paint_window_frame+0x412>
   8cccc:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   8ccd0:	4298      	cmp	r0, r3
   8ccd2:	f000 808a 	beq.w	8cdea <do_paint_window_frame+0x422>
   8ccd6:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   8ccda:	4298      	cmp	r0, r3
   8ccdc:	f000 808d 	beq.w	8cdfa <do_paint_window_frame+0x432>
   8cce0:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   8cce4:	4298      	cmp	r0, r3
   8cce6:	f000 8090 	beq.w	8ce0a <do_paint_window_frame+0x442>
   8ccea:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   8ccee:	4298      	cmp	r0, r3
   8ccf0:	f000 8093 	beq.w	8ce1a <do_paint_window_frame+0x452>
   8ccf4:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   8ccf8:	4298      	cmp	r0, r3
   8ccfa:	f000 8096 	beq.w	8ce2a <do_paint_window_frame+0x462>
   8ccfe:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   8cd02:	4298      	cmp	r0, r3
   8cd04:	f000 8099 	beq.w	8ce3a <do_paint_window_frame+0x472>
   8cd08:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   8cd0c:	4298      	cmp	r0, r3
   8cd0e:	f000 809c 	beq.w	8ce4a <do_paint_window_frame+0x482>
   8cd12:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   8cd16:	4298      	cmp	r0, r3
   8cd18:	f000 809f 	beq.w	8ce5a <do_paint_window_frame+0x492>
   8cd1c:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   8cd20:	4298      	cmp	r0, r3
   8cd22:	f000 80b9 	beq.w	8ce98 <do_paint_window_frame+0x4d0>
   8cd26:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   8cd2a:	4298      	cmp	r0, r3
   8cd2c:	f000 80bc 	beq.w	8cea8 <do_paint_window_frame+0x4e0>
   8cd30:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   8cd34:	4298      	cmp	r0, r3
   8cd36:	f000 80bf 	beq.w	8ceb8 <do_paint_window_frame+0x4f0>
   8cd3a:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   8cd3e:	4298      	cmp	r0, r3
   8cd40:	f000 80c2 	beq.w	8cec8 <do_paint_window_frame+0x500>
   8cd44:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   8cd48:	4298      	cmp	r0, r3
   8cd4a:	f000 80c5 	beq.w	8ced8 <do_paint_window_frame+0x510>
   8cd4e:	270e      	movs	r7, #14
   8cd50:	2000      	movs	r0, #0
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8cd52:	4b4a      	ldr	r3, [pc, #296]	; (8ce7c <do_paint_window_frame+0x4b4>)
   8cd54:	f240 5252 	movw	r2, #1362	; 0x552
   8cd58:	4949      	ldr	r1, [pc, #292]	; (8ce80 <do_paint_window_frame+0x4b8>)
   8cd5a:	4d4a      	ldr	r5, [pc, #296]	; (8ce84 <do_paint_window_frame+0x4bc>)
   8cd5c:	47a8      	blx	r5
				if (find_highest_z_order_at_point(rect_current.x, rect_current.y) > mw_all_windows[window_id].z_order)
   8cd5e:	9b00      	ldr	r3, [sp, #0]
	return (mw_all_windows[window_id].z_order);
   8cd60:	eb0a 1787 	add.w	r7, sl, r7, lsl #6
				if (find_highest_z_order_at_point(rect_current.x, rect_current.y) > mw_all_windows[window_id].z_order)
   8cd64:	4453      	add	r3, sl
   8cd66:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8cd6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   8cd6e:	4293      	cmp	r3, r2
   8cd70:	d21c      	bcs.n	8cdac <do_paint_window_frame+0x3e4>
					if (rect_waiting_to_be_painted)
   8cd72:	2c00      	cmp	r4, #0
   8cd74:	f040 80bb 	bne.w	8ceee <do_paint_window_frame+0x526>
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   8cd78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   8cd7c:	3601      	adds	r6, #1
   8cd7e:	b2b6      	uxth	r6, r6
   8cd80:	3b01      	subs	r3, #1
   8cd82:	429e      	cmp	r6, r3
   8cd84:	4632      	mov	r2, r6
   8cd86:	f080 80b9 	bcs.w	8cefc <do_paint_window_frame+0x534>
   8cd8a:	f9bd 901a 	ldrsh.w	r9, [sp, #26]
   8cd8e:	e710      	b.n	8cbb2 <do_paint_window_frame+0x1ea>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8cd90:	464a      	mov	r2, r9
   8cd92:	4641      	mov	r1, r8
   8cd94:	483c      	ldr	r0, [pc, #240]	; (8ce88 <do_paint_window_frame+0x4c0>)
   8cd96:	4b3d      	ldr	r3, [pc, #244]	; (8ce8c <do_paint_window_frame+0x4c4>)
   8cd98:	4798      	blx	r3
   8cd9a:	2800      	cmp	r0, #0
   8cd9c:	d08a      	beq.n	8ccb4 <do_paint_window_frame+0x2ec>
			if (mw_all_windows[i].z_order > highest_z_order)
   8cd9e:	f89a 236c 	ldrb.w	r2, [sl, #876]	; 0x36c
   8cda2:	42aa      	cmp	r2, r5
   8cda4:	bf94      	ite	ls
   8cda6:	463b      	movls	r3, r7
   8cda8:	230d      	movhi	r3, #13
   8cdaa:	e784      	b.n	8ccb6 <do_paint_window_frame+0x2ee>
				(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   8cdac:	ab06      	add	r3, sp, #24
   8cdae:	ad0a      	add	r5, sp, #40	; 0x28
   8cdb0:	e893 0003 	ldmia.w	r3, {r0, r1}
				previous_rect_left = rect_previous.x;
   8cdb4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
				previous_rect_width = rect_previous.width;
   8cdb8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
				(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   8cdbc:	e905 0003 	stmdb	r5, {r0, r1}
				if (rect_waiting_to_be_painted)
   8cdc0:	b14c      	cbz	r4, 8cdd6 <do_paint_window_frame+0x40e>
					rect_previous.width += previous_rect_width;
   8cdc2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
					rect_previous.x = previous_rect_left;
   8cdc6:	f8ad 2020 	strh.w	r2, [sp, #32]
					rect_previous.width += previous_rect_width;
   8cdca:	440b      	add	r3, r1
   8cdcc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   8cdd0:	e7d2      	b.n	8cd78 <do_paint_window_frame+0x3b0>
	if (window_handle == MW_INVALID_HANDLE)
   8cdd2:	270e      	movs	r7, #14
   8cdd4:	e7bd      	b.n	8cd52 <do_paint_window_frame+0x38a>
				rect_waiting_to_be_painted = true;
   8cdd6:	2401      	movs	r4, #1
   8cdd8:	e7ce      	b.n	8cd78 <do_paint_window_frame+0x3b0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cdda:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8cdde:	069b      	lsls	r3, r3, #26
   8cde0:	f57f af74 	bpl.w	8cccc <do_paint_window_frame+0x304>
   8cde4:	2700      	movs	r7, #0
   8cde6:	2001      	movs	r0, #1
   8cde8:	e7b3      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cdea:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8cdee:	069d      	lsls	r5, r3, #26
   8cdf0:	f57f af71 	bpl.w	8ccd6 <do_paint_window_frame+0x30e>
   8cdf4:	2701      	movs	r7, #1
   8cdf6:	4638      	mov	r0, r7
   8cdf8:	e7ab      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cdfa:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8cdfe:	0699      	lsls	r1, r3, #26
   8ce00:	f57f af6e 	bpl.w	8cce0 <do_paint_window_frame+0x318>
   8ce04:	2702      	movs	r7, #2
   8ce06:	2001      	movs	r0, #1
   8ce08:	e7a3      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ce0a:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8ce0e:	069a      	lsls	r2, r3, #26
   8ce10:	f57f af6b 	bpl.w	8ccea <do_paint_window_frame+0x322>
   8ce14:	2703      	movs	r7, #3
   8ce16:	2001      	movs	r0, #1
   8ce18:	e79b      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ce1a:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ce1e:	069b      	lsls	r3, r3, #26
   8ce20:	f57f af68 	bpl.w	8ccf4 <do_paint_window_frame+0x32c>
   8ce24:	2704      	movs	r7, #4
   8ce26:	2001      	movs	r0, #1
   8ce28:	e793      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ce2a:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ce2e:	069d      	lsls	r5, r3, #26
   8ce30:	f57f af65 	bpl.w	8ccfe <do_paint_window_frame+0x336>
   8ce34:	2705      	movs	r7, #5
   8ce36:	2001      	movs	r0, #1
   8ce38:	e78b      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ce3a:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ce3e:	0699      	lsls	r1, r3, #26
   8ce40:	f57f af62 	bpl.w	8cd08 <do_paint_window_frame+0x340>
   8ce44:	2706      	movs	r7, #6
   8ce46:	2001      	movs	r0, #1
   8ce48:	e783      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ce4a:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8ce4e:	069a      	lsls	r2, r3, #26
   8ce50:	f57f af5f 	bpl.w	8cd12 <do_paint_window_frame+0x34a>
   8ce54:	2707      	movs	r7, #7
   8ce56:	2001      	movs	r0, #1
   8ce58:	e77b      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ce5a:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ce5e:	069b      	lsls	r3, r3, #26
   8ce60:	f57f af5c 	bpl.w	8cd1c <do_paint_window_frame+0x354>
   8ce64:	2708      	movs	r7, #8
   8ce66:	2001      	movs	r0, #1
   8ce68:	e773      	b.n	8cd52 <do_paint_window_frame+0x38a>
   8ce6a:	bf00      	nop
   8ce6c:	00086e2d 	.word	0x00086e2d
   8ce70:	00086e31 	.word	0x00086e31
   8ce74:	00087e11 	.word	0x00087e11
   8ce78:	2007180c 	.word	0x2007180c
   8ce7c:	000ab764 	.word	0x000ab764
   8ce80:	000ab2e8 	.word	0x000ab2e8
   8ce84:	00095add 	.word	0x00095add
   8ce88:	20071f30 	.word	0x20071f30
   8ce8c:	00096e7d 	.word	0x00096e7d
   8ce90:	20071bd8 	.word	0x20071bd8
   8ce94:	20071f78 	.word	0x20071f78
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ce98:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ce9c:	069d      	lsls	r5, r3, #26
   8ce9e:	f57f af42 	bpl.w	8cd26 <do_paint_window_frame+0x35e>
   8cea2:	2709      	movs	r7, #9
   8cea4:	2001      	movs	r0, #1
   8cea6:	e754      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cea8:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ceac:	0699      	lsls	r1, r3, #26
   8ceae:	f57f af3f 	bpl.w	8cd30 <do_paint_window_frame+0x368>
   8ceb2:	270a      	movs	r7, #10
   8ceb4:	2001      	movs	r0, #1
   8ceb6:	e74c      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ceb8:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8cebc:	069a      	lsls	r2, r3, #26
   8cebe:	f57f af3c 	bpl.w	8cd3a <do_paint_window_frame+0x372>
   8cec2:	270b      	movs	r7, #11
   8cec4:	2001      	movs	r0, #1
   8cec6:	e744      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8cec8:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8cecc:	069b      	lsls	r3, r3, #26
   8cece:	f57f af39 	bpl.w	8cd44 <do_paint_window_frame+0x37c>
   8ced2:	270c      	movs	r7, #12
   8ced4:	2001      	movs	r0, #1
   8ced6:	e73c      	b.n	8cd52 <do_paint_window_frame+0x38a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ced8:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
   8cedc:	f003 0320 	and.w	r3, r3, #32
		if (mw_all_windows[i].window_handle == window_handle &&
   8cee0:	2b00      	cmp	r3, #0
   8cee2:	bf0b      	itete	eq
   8cee4:	270e      	moveq	r7, #14
   8cee6:	270d      	movne	r7, #13
   8cee8:	2000      	moveq	r0, #0
   8ceea:	2001      	movne	r0, #1
   8ceec:	e731      	b.n	8cd52 <do_paint_window_frame+0x38a>
						do_paint_window_frame2(window_handle, components, &rect_previous);
   8ceee:	aa08      	add	r2, sp, #32
   8cef0:	9903      	ldr	r1, [sp, #12]
   8cef2:	9802      	ldr	r0, [sp, #8]
   8cef4:	4b6d      	ldr	r3, [pc, #436]	; (8d0ac <do_paint_window_frame+0x6e4>)
   8cef6:	4798      	blx	r3
						rect_waiting_to_be_painted = false;
   8cef8:	2400      	movs	r4, #0
   8cefa:	e73d      	b.n	8cd78 <do_paint_window_frame+0x3b0>
			if (rect_waiting_to_be_painted)
   8cefc:	2c00      	cmp	r4, #0
   8cefe:	f040 80bf 	bne.w	8d080 <do_paint_window_frame+0x6b8>
   8cf02:	f8bd 1014 	ldrh.w	r1, [sp, #20]
		for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   8cf06:	9b01      	ldr	r3, [sp, #4]
   8cf08:	1e4a      	subs	r2, r1, #1
   8cf0a:	3301      	adds	r3, #1
   8cf0c:	b29b      	uxth	r3, r3
   8cf0e:	4293      	cmp	r3, r2
   8cf10:	4618      	mov	r0, r3
   8cf12:	9301      	str	r3, [sp, #4]
   8cf14:	f4ff ae38 	bcc.w	8cb88 <do_paint_window_frame+0x1c0>
   8cf18:	e595      	b.n	8ca46 <do_paint_window_frame+0x7e>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8cf1a:	464a      	mov	r2, r9
   8cf1c:	4641      	mov	r1, r8
   8cf1e:	4864      	ldr	r0, [pc, #400]	; (8d0b0 <do_paint_window_frame+0x6e8>)
   8cf20:	4b64      	ldr	r3, [pc, #400]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8cf22:	4798      	blx	r3
   8cf24:	2800      	cmp	r0, #0
   8cf26:	f43f ae58 	beq.w	8cbda <do_paint_window_frame+0x212>
			if (mw_all_windows[i].z_order > highest_z_order)
   8cf2a:	f89a 506c 	ldrb.w	r5, [sl, #108]	; 0x6c
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8cf2e:	1c2f      	adds	r7, r5, #0
   8cf30:	bf18      	it	ne
   8cf32:	2701      	movne	r7, #1
   8cf34:	e653      	b.n	8cbde <do_paint_window_frame+0x216>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8cf36:	464a      	mov	r2, r9
   8cf38:	4641      	mov	r1, r8
   8cf3a:	485f      	ldr	r0, [pc, #380]	; (8d0b8 <do_paint_window_frame+0x6f0>)
   8cf3c:	4b5d      	ldr	r3, [pc, #372]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8cf3e:	4798      	blx	r3
   8cf40:	2800      	cmp	r0, #0
   8cf42:	f43f ae9d 	beq.w	8cc80 <do_paint_window_frame+0x2b8>
			if (mw_all_windows[i].z_order > highest_z_order)
   8cf46:	f89a 22ac 	ldrb.w	r2, [sl, #684]	; 0x2ac
   8cf4a:	4295      	cmp	r5, r2
   8cf4c:	bf3c      	itt	cc
   8cf4e:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8cf50:	270a      	movcc	r7, #10
   8cf52:	e695      	b.n	8cc80 <do_paint_window_frame+0x2b8>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8cf54:	464a      	mov	r2, r9
   8cf56:	4641      	mov	r1, r8
   8cf58:	4858      	ldr	r0, [pc, #352]	; (8d0bc <do_paint_window_frame+0x6f4>)
   8cf5a:	4b56      	ldr	r3, [pc, #344]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8cf5c:	4798      	blx	r3
   8cf5e:	2800      	cmp	r0, #0
   8cf60:	f43f ae97 	beq.w	8cc92 <do_paint_window_frame+0x2ca>
			if (mw_all_windows[i].z_order > highest_z_order)
   8cf64:	f89a 22ec 	ldrb.w	r2, [sl, #748]	; 0x2ec
   8cf68:	4295      	cmp	r5, r2
   8cf6a:	bf3c      	itt	cc
   8cf6c:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8cf6e:	270b      	movcc	r7, #11
   8cf70:	e68f      	b.n	8cc92 <do_paint_window_frame+0x2ca>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8cf72:	464a      	mov	r2, r9
   8cf74:	4641      	mov	r1, r8
   8cf76:	4852      	ldr	r0, [pc, #328]	; (8d0c0 <do_paint_window_frame+0x6f8>)
   8cf78:	4b4e      	ldr	r3, [pc, #312]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8cf7a:	4798      	blx	r3
   8cf7c:	2800      	cmp	r0, #0
   8cf7e:	f43f ae91 	beq.w	8cca4 <do_paint_window_frame+0x2dc>
			if (mw_all_windows[i].z_order > highest_z_order)
   8cf82:	f89a 232c 	ldrb.w	r2, [sl, #812]	; 0x32c
   8cf86:	4295      	cmp	r5, r2
   8cf88:	bf3c      	itt	cc
   8cf8a:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8cf8c:	270c      	movcc	r7, #12
   8cf8e:	e689      	b.n	8cca4 <do_paint_window_frame+0x2dc>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8cf90:	464a      	mov	r2, r9
   8cf92:	4641      	mov	r1, r8
   8cf94:	484b      	ldr	r0, [pc, #300]	; (8d0c4 <do_paint_window_frame+0x6fc>)
   8cf96:	4b47      	ldr	r3, [pc, #284]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8cf98:	4798      	blx	r3
   8cf9a:	2800      	cmp	r0, #0
   8cf9c:	f43f ae28 	beq.w	8cbf0 <do_paint_window_frame+0x228>
			if (mw_all_windows[i].z_order > highest_z_order)
   8cfa0:	f89a 20ac 	ldrb.w	r2, [sl, #172]	; 0xac
   8cfa4:	4295      	cmp	r5, r2
   8cfa6:	bf3c      	itt	cc
   8cfa8:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8cfaa:	2702      	movcc	r7, #2
   8cfac:	e620      	b.n	8cbf0 <do_paint_window_frame+0x228>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8cfae:	464a      	mov	r2, r9
   8cfb0:	4641      	mov	r1, r8
   8cfb2:	4845      	ldr	r0, [pc, #276]	; (8d0c8 <do_paint_window_frame+0x700>)
   8cfb4:	4b3f      	ldr	r3, [pc, #252]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8cfb6:	4798      	blx	r3
   8cfb8:	2800      	cmp	r0, #0
   8cfba:	f43f ae22 	beq.w	8cc02 <do_paint_window_frame+0x23a>
			if (mw_all_windows[i].z_order > highest_z_order)
   8cfbe:	f89a 20ec 	ldrb.w	r2, [sl, #236]	; 0xec
   8cfc2:	4295      	cmp	r5, r2
   8cfc4:	bf3c      	itt	cc
   8cfc6:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8cfc8:	2703      	movcc	r7, #3
   8cfca:	e61a      	b.n	8cc02 <do_paint_window_frame+0x23a>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8cfcc:	464a      	mov	r2, r9
   8cfce:	4641      	mov	r1, r8
   8cfd0:	483e      	ldr	r0, [pc, #248]	; (8d0cc <do_paint_window_frame+0x704>)
   8cfd2:	4b38      	ldr	r3, [pc, #224]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8cfd4:	4798      	blx	r3
   8cfd6:	2800      	cmp	r0, #0
   8cfd8:	f43f ae1c 	beq.w	8cc14 <do_paint_window_frame+0x24c>
			if (mw_all_windows[i].z_order > highest_z_order)
   8cfdc:	f89a 212c 	ldrb.w	r2, [sl, #300]	; 0x12c
   8cfe0:	4295      	cmp	r5, r2
   8cfe2:	bf3c      	itt	cc
   8cfe4:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8cfe6:	2704      	movcc	r7, #4
   8cfe8:	e614      	b.n	8cc14 <do_paint_window_frame+0x24c>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8cfea:	464a      	mov	r2, r9
   8cfec:	4641      	mov	r1, r8
   8cfee:	4838      	ldr	r0, [pc, #224]	; (8d0d0 <do_paint_window_frame+0x708>)
   8cff0:	4b30      	ldr	r3, [pc, #192]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8cff2:	4798      	blx	r3
   8cff4:	2800      	cmp	r0, #0
   8cff6:	f43f ae16 	beq.w	8cc26 <do_paint_window_frame+0x25e>
			if (mw_all_windows[i].z_order > highest_z_order)
   8cffa:	f89a 216c 	ldrb.w	r2, [sl, #364]	; 0x16c
   8cffe:	4295      	cmp	r5, r2
   8d000:	bf3c      	itt	cc
   8d002:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8d004:	2705      	movcc	r7, #5
   8d006:	e60e      	b.n	8cc26 <do_paint_window_frame+0x25e>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8d008:	464a      	mov	r2, r9
   8d00a:	4641      	mov	r1, r8
   8d00c:	4831      	ldr	r0, [pc, #196]	; (8d0d4 <do_paint_window_frame+0x70c>)
   8d00e:	4b29      	ldr	r3, [pc, #164]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8d010:	4798      	blx	r3
   8d012:	2800      	cmp	r0, #0
   8d014:	f43f ae10 	beq.w	8cc38 <do_paint_window_frame+0x270>
			if (mw_all_windows[i].z_order > highest_z_order)
   8d018:	f89a 21ac 	ldrb.w	r2, [sl, #428]	; 0x1ac
   8d01c:	4295      	cmp	r5, r2
   8d01e:	bf3c      	itt	cc
   8d020:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8d022:	2706      	movcc	r7, #6
   8d024:	e608      	b.n	8cc38 <do_paint_window_frame+0x270>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8d026:	464a      	mov	r2, r9
   8d028:	4641      	mov	r1, r8
   8d02a:	482b      	ldr	r0, [pc, #172]	; (8d0d8 <do_paint_window_frame+0x710>)
   8d02c:	4b21      	ldr	r3, [pc, #132]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8d02e:	4798      	blx	r3
   8d030:	2800      	cmp	r0, #0
   8d032:	f43f ae0a 	beq.w	8cc4a <do_paint_window_frame+0x282>
			if (mw_all_windows[i].z_order > highest_z_order)
   8d036:	f89a 21ec 	ldrb.w	r2, [sl, #492]	; 0x1ec
   8d03a:	4295      	cmp	r5, r2
   8d03c:	bf3c      	itt	cc
   8d03e:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8d040:	2707      	movcc	r7, #7
   8d042:	e602      	b.n	8cc4a <do_paint_window_frame+0x282>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8d044:	464a      	mov	r2, r9
   8d046:	4641      	mov	r1, r8
   8d048:	4824      	ldr	r0, [pc, #144]	; (8d0dc <do_paint_window_frame+0x714>)
   8d04a:	4b1a      	ldr	r3, [pc, #104]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8d04c:	4798      	blx	r3
   8d04e:	2800      	cmp	r0, #0
   8d050:	f43f ae04 	beq.w	8cc5c <do_paint_window_frame+0x294>
			if (mw_all_windows[i].z_order > highest_z_order)
   8d054:	f89a 222c 	ldrb.w	r2, [sl, #556]	; 0x22c
   8d058:	4295      	cmp	r5, r2
   8d05a:	bf3c      	itt	cc
   8d05c:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8d05e:	2708      	movcc	r7, #8
   8d060:	e5fc      	b.n	8cc5c <do_paint_window_frame+0x294>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   8d062:	464a      	mov	r2, r9
   8d064:	4641      	mov	r1, r8
   8d066:	481e      	ldr	r0, [pc, #120]	; (8d0e0 <do_paint_window_frame+0x718>)
   8d068:	4b12      	ldr	r3, [pc, #72]	; (8d0b4 <do_paint_window_frame+0x6ec>)
   8d06a:	4798      	blx	r3
   8d06c:	2800      	cmp	r0, #0
   8d06e:	f43f adfe 	beq.w	8cc6e <do_paint_window_frame+0x2a6>
			if (mw_all_windows[i].z_order > highest_z_order)
   8d072:	f89a 226c 	ldrb.w	r2, [sl, #620]	; 0x26c
   8d076:	4295      	cmp	r5, r2
   8d078:	bf3c      	itt	cc
   8d07a:	4615      	movcc	r5, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   8d07c:	2709      	movcc	r7, #9
   8d07e:	e5f6      	b.n	8cc6e <do_paint_window_frame+0x2a6>
				do_paint_window_frame2(window_handle, components,  &rect_previous);
   8d080:	aa08      	add	r2, sp, #32
   8d082:	9903      	ldr	r1, [sp, #12]
   8d084:	9802      	ldr	r0, [sp, #8]
   8d086:	4b09      	ldr	r3, [pc, #36]	; (8d0ac <do_paint_window_frame+0x6e4>)
   8d088:	4798      	blx	r3
   8d08a:	e73a      	b.n	8cf02 <do_paint_window_frame+0x53a>
	if (find_if_rect_is_completely_on_screen(&mw_all_windows[window_id].window_rect) && window_handle == window_with_focus_handle)
   8d08c:	4b15      	ldr	r3, [pc, #84]	; (8d0e4 <do_paint_window_frame+0x71c>)
   8d08e:	9a02      	ldr	r2, [sp, #8]
   8d090:	681b      	ldr	r3, [r3, #0]
   8d092:	429a      	cmp	r2, r3
   8d094:	f47f ad68 	bne.w	8cb68 <do_paint_window_frame+0x1a0>
		(void)memcpy((&rect_current), (&mw_all_windows[window_id].window_rect), (sizeof(mw_util_rect_t)));
   8d098:	c903      	ldmia	r1, {r0, r1}
   8d09a:	ab06      	add	r3, sp, #24
   8d09c:	e883 0003 	stmia.w	r3, {r0, r1}
		do_paint_window_frame2(window_handle, components, &rect_current);
   8d0a0:	461a      	mov	r2, r3
   8d0a2:	9903      	ldr	r1, [sp, #12]
   8d0a4:	4b01      	ldr	r3, [pc, #4]	; (8d0ac <do_paint_window_frame+0x6e4>)
   8d0a6:	9802      	ldr	r0, [sp, #8]
   8d0a8:	4798      	blx	r3
   8d0aa:	e4cc      	b.n	8ca46 <do_paint_window_frame+0x7e>
   8d0ac:	0008bcdd 	.word	0x0008bcdd
   8d0b0:	20071c30 	.word	0x20071c30
   8d0b4:	00096e7d 	.word	0x00096e7d
   8d0b8:	20071e70 	.word	0x20071e70
   8d0bc:	20071eb0 	.word	0x20071eb0
   8d0c0:	20071ef0 	.word	0x20071ef0
   8d0c4:	20071c70 	.word	0x20071c70
   8d0c8:	20071cb0 	.word	0x20071cb0
   8d0cc:	20071cf0 	.word	0x20071cf0
   8d0d0:	20071d30 	.word	0x20071d30
   8d0d4:	20071d70 	.word	0x20071d70
   8d0d8:	20071db0 	.word	0x20071db0
   8d0dc:	20071df0 	.word	0x20071df0
   8d0e0:	20071e30 	.word	0x20071e30
   8d0e4:	20071fb4 	.word	0x20071fb4

0008d0e8 <check_and_process_touch_on_horiz_window_scroll_bar>:
{
   8d0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR)
   8d0ec:	4ec9      	ldr	r6, [pc, #804]	; (8d414 <check_and_process_touch_on_horiz_window_scroll_bar+0x32c>)
   8d0ee:	0187      	lsls	r7, r0, #6
   8d0f0:	19f4      	adds	r4, r6, r7
   8d0f2:	68e5      	ldr	r5, [r4, #12]
{
   8d0f4:	b086      	sub	sp, #24
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR)
   8d0f6:	f415 7080 	ands.w	r0, r5, #256	; 0x100
{
   8d0fa:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_HORIZ_SCROLL_BAR)
   8d0fe:	d013      	beq.n	8d128 <check_and_process_touch_on_horiz_window_scroll_bar+0x40>
		if ((touch_y > mw_all_windows[window_id].client_rect.y +
   8d100:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
				mw_all_windows[window_id].client_rect.height &&
   8d104:	f9b4 c026 	ldrsh.w	ip, [r4, #38]	; 0x26
		if ((touch_y > mw_all_windows[window_id].client_rect.y +
   8d108:	4460      	add	r0, ip
   8d10a:	4282      	cmp	r2, r0
   8d10c:	dc0f      	bgt.n	8d12e <check_and_process_touch_on_horiz_window_scroll_bar+0x46>
				touch_x >= mw_all_windows[window_id].client_rect.x) ||
   8d10e:	f1be 0f00 	cmp.w	lr, #0
   8d112:	d113      	bne.n	8d13c <check_and_process_touch_on_horiz_window_scroll_bar+0x54>
			if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HORIZ_SCROLL_BAR_ENABLED) == MW_WINDOW_FLAG_HORIZ_SCROLL_BAR_ENABLED)
   8d114:	04ad      	lsls	r5, r5, #18
   8d116:	d506      	bpl.n	8d126 <check_and_process_touch_on_horiz_window_scroll_bar+0x3e>
				if (touch_message_id == MW_TOUCH_DOWN_MESSAGE || touch_message_id == MW_TOUCH_DRAG_MESSAGE)
   8d118:	2b14      	cmp	r3, #20
   8d11a:	d013      	beq.n	8d144 <check_and_process_touch_on_horiz_window_scroll_bar+0x5c>
   8d11c:	2b17      	cmp	r3, #23
   8d11e:	d011      	beq.n	8d144 <check_and_process_touch_on_horiz_window_scroll_bar+0x5c>
				else if (touch_message_id == MW_TOUCH_UP_MESSAGE)
   8d120:	2b16      	cmp	r3, #22
   8d122:	f000 808b 	beq.w	8d23c <check_and_process_touch_on_horiz_window_scroll_bar+0x154>
			return (true);
   8d126:	2001      	movs	r0, #1
}
   8d128:	b006      	add	sp, #24
   8d12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				mw_all_windows[window_id].client_rect.height &&
   8d12e:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
   8d132:	428a      	cmp	r2, r1
   8d134:	ddee      	ble.n	8d114 <check_and_process_touch_on_horiz_window_scroll_bar+0x2c>
				touch_x >= mw_all_windows[window_id].client_rect.x) ||
   8d136:	f1be 0f00 	cmp.w	lr, #0
   8d13a:	d0eb      	beq.n	8d114 <check_and_process_touch_on_horiz_window_scroll_bar+0x2c>
	return (false);
   8d13c:	2000      	movs	r0, #0
}
   8d13e:	b006      	add	sp, #24
   8d140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							touch_x - mw_all_windows[window_id].client_rect.x);
   8d144:	19f4      	adds	r4, r6, r7
   8d146:	8c23      	ldrh	r3, [r4, #32]
					scaled_touch = mw_ui_common_scale_scroll_bar_touch_point(mw_all_windows[window_id].client_rect.width,
   8d148:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
							touch_x - mw_all_windows[window_id].client_rect.x);
   8d14c:	1ac9      	subs	r1, r1, r3
					scaled_touch = mw_ui_common_scale_scroll_bar_touch_point(mw_all_windows[window_id].client_rect.width,
   8d14e:	b209      	sxth	r1, r1
   8d150:	4bb1      	ldr	r3, [pc, #708]	; (8d418 <check_and_process_touch_on_horiz_window_scroll_bar+0x330>)
   8d152:	4798      	blx	r3
					temp_int32 = ((int32_t)UINT8_MAX * (int32_t)scaled_touch) / (int32_t)mw_all_windows[window_id].client_rect.width;
   8d154:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
   8d158:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   8d15c:	fb90 f0f3 	sdiv	r0, r0, r3
					if (new_scroll_position != mw_all_windows[window_id].horiz_scroll_pos)
   8d160:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
					new_scroll_position = (uint8_t)temp_int32;
   8d164:	b2c0      	uxtb	r0, r0
					if (new_scroll_position != mw_all_windows[window_id].horiz_scroll_pos)
   8d166:	4283      	cmp	r3, r0
   8d168:	d0dd      	beq.n	8d126 <check_and_process_touch_on_horiz_window_scroll_bar+0x3e>
						mw_paint_window_frame(mw_all_windows[window_id].window_handle,
   8d16a:	6963      	ldr	r3, [r4, #20]
						mw_all_windows[window_id].horiz_scroll_pos = new_scroll_position;
   8d16c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
	if (window_handle == MW_INVALID_HANDLE)
   8d170:	2b00      	cmp	r3, #0
   8d172:	f040 80c7 	bne.w	8d304 <check_and_process_touch_on_horiz_window_scroll_bar+0x21c>
		MW_ASSERT((bool)false, "Bad window handle");
   8d176:	4ba9      	ldr	r3, [pc, #676]	; (8d41c <check_and_process_touch_on_horiz_window_scroll_bar+0x334>)
   8d178:	f241 22bf 	movw	r2, #4799	; 0x12bf
   8d17c:	49a8      	ldr	r1, [pc, #672]	; (8d420 <check_and_process_touch_on_horiz_window_scroll_bar+0x338>)
   8d17e:	2000      	movs	r0, #0
   8d180:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8d428 <check_and_process_touch_on_horiz_window_scroll_bar+0x340>
   8d184:	47c0      	blx	r8
						mw_post_message(MW_WINDOW_HORIZ_SCROLL_BAR_SCROLLED_MESSAGE,
   8d186:	4437      	add	r7, r6
   8d188:	697c      	ldr	r4, [r7, #20]
   8d18a:	f897 702d 	ldrb.w	r7, [r7, #45]	; 0x2d
	if (window_handle == MW_INVALID_HANDLE)
   8d18e:	2c00      	cmp	r4, #0
   8d190:	d043      	beq.n	8d21a <check_and_process_touch_on_horiz_window_scroll_bar+0x132>
		if (mw_all_windows[i].window_handle == window_handle &&
   8d192:	6973      	ldr	r3, [r6, #20]
   8d194:	42a3      	cmp	r3, r4
   8d196:	f000 8112 	beq.w	8d3be <check_and_process_touch_on_horiz_window_scroll_bar+0x2d6>
   8d19a:	6d73      	ldr	r3, [r6, #84]	; 0x54
   8d19c:	429c      	cmp	r4, r3
   8d19e:	f000 8107 	beq.w	8d3b0 <check_and_process_touch_on_horiz_window_scroll_bar+0x2c8>
   8d1a2:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   8d1a6:	429c      	cmp	r4, r3
   8d1a8:	f000 8117 	beq.w	8d3da <check_and_process_touch_on_horiz_window_scroll_bar+0x2f2>
   8d1ac:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
   8d1b0:	429c      	cmp	r4, r3
   8d1b2:	f000 8123 	beq.w	8d3fc <check_and_process_touch_on_horiz_window_scroll_bar+0x314>
   8d1b6:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
   8d1ba:	429c      	cmp	r4, r3
   8d1bc:	f000 8138 	beq.w	8d430 <check_and_process_touch_on_horiz_window_scroll_bar+0x348>
   8d1c0:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   8d1c4:	429c      	cmp	r4, r3
   8d1c6:	f000 813a 	beq.w	8d43e <check_and_process_touch_on_horiz_window_scroll_bar+0x356>
   8d1ca:	f8d6 3194 	ldr.w	r3, [r6, #404]	; 0x194
   8d1ce:	429c      	cmp	r4, r3
   8d1d0:	f000 8148 	beq.w	8d464 <check_and_process_touch_on_horiz_window_scroll_bar+0x37c>
   8d1d4:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
   8d1d8:	429c      	cmp	r4, r3
   8d1da:	f000 813c 	beq.w	8d456 <check_and_process_touch_on_horiz_window_scroll_bar+0x36e>
   8d1de:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
   8d1e2:	429c      	cmp	r4, r3
   8d1e4:	f000 814f 	beq.w	8d486 <check_and_process_touch_on_horiz_window_scroll_bar+0x39e>
   8d1e8:	f8d6 3254 	ldr.w	r3, [r6, #596]	; 0x254
   8d1ec:	429c      	cmp	r4, r3
   8d1ee:	f000 815d 	beq.w	8d4ac <check_and_process_touch_on_horiz_window_scroll_bar+0x3c4>
   8d1f2:	f8d6 3294 	ldr.w	r3, [r6, #660]	; 0x294
   8d1f6:	429c      	cmp	r4, r3
   8d1f8:	f000 8165 	beq.w	8d4c6 <check_and_process_touch_on_horiz_window_scroll_bar+0x3de>
   8d1fc:	f8d6 32d4 	ldr.w	r3, [r6, #724]	; 0x2d4
   8d200:	429c      	cmp	r4, r3
   8d202:	f000 8167 	beq.w	8d4d4 <check_and_process_touch_on_horiz_window_scroll_bar+0x3ec>
   8d206:	f8d6 3314 	ldr.w	r3, [r6, #788]	; 0x314
   8d20a:	429c      	cmp	r4, r3
   8d20c:	f000 8175 	beq.w	8d4fa <check_and_process_touch_on_horiz_window_scroll_bar+0x412>
   8d210:	f8d6 3354 	ldr.w	r3, [r6, #852]	; 0x354
   8d214:	429c      	cmp	r4, r3
   8d216:	f000 8177 	beq.w	8d508 <check_and_process_touch_on_horiz_window_scroll_bar+0x420>
   8d21a:	250e      	movs	r5, #14
   8d21c:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8d21e:	4b7f      	ldr	r3, [pc, #508]	; (8d41c <check_and_process_touch_on_horiz_window_scroll_bar+0x334>)
   8d220:	f241 5262 	movw	r2, #5474	; 0x1562
   8d224:	497f      	ldr	r1, [pc, #508]	; (8d424 <check_and_process_touch_on_horiz_window_scroll_bar+0x33c>)
   8d226:	47c0      	blx	r8
	new_message.message_id = message_id;
   8d228:	210b      	movs	r1, #11
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8d22a:	eb06 1685 	add.w	r6, r6, r5, lsl #6
	new_message.message_recipient_type = recipient_type;
   8d22e:	2300      	movs	r3, #0
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8d230:	68f2      	ldr	r2, [r6, #12]
	new_message.message_data = message_data;
   8d232:	9704      	str	r7, [sp, #16]
	new_message.recipient_handle = recipient_handle;
   8d234:	9402      	str	r4, [sp, #8]
	new_message.message_id = message_id;
   8d236:	f88d 100c 	strb.w	r1, [sp, #12]
   8d23a:	e058      	b.n	8d2ee <check_and_process_touch_on_horiz_window_scroll_bar+0x206>
					mw_post_message(MW_WINDOW_HORIZ_SCROLL_BAR_SCROLL_ENDED_MESSAGE,
   8d23c:	4437      	add	r7, r6
   8d23e:	697c      	ldr	r4, [r7, #20]
	if (window_handle == MW_INVALID_HANDLE)
   8d240:	2c00      	cmp	r4, #0
   8d242:	d043      	beq.n	8d2cc <check_and_process_touch_on_horiz_window_scroll_bar+0x1e4>
		if (mw_all_windows[i].window_handle == window_handle &&
   8d244:	6973      	ldr	r3, [r6, #20]
   8d246:	429c      	cmp	r4, r3
   8d248:	f000 8168 	beq.w	8d51c <check_and_process_touch_on_horiz_window_scroll_bar+0x434>
   8d24c:	6d73      	ldr	r3, [r6, #84]	; 0x54
   8d24e:	429c      	cmp	r4, r3
   8d250:	f000 816b 	beq.w	8d52a <check_and_process_touch_on_horiz_window_scroll_bar+0x442>
   8d254:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   8d258:	429c      	cmp	r4, r3
   8d25a:	f000 8173 	beq.w	8d544 <check_and_process_touch_on_horiz_window_scroll_bar+0x45c>
   8d25e:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
   8d262:	429c      	cmp	r4, r3
   8d264:	f000 8167 	beq.w	8d536 <check_and_process_touch_on_horiz_window_scroll_bar+0x44e>
   8d268:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
   8d26c:	429c      	cmp	r4, r3
   8d26e:	f000 8177 	beq.w	8d560 <check_and_process_touch_on_horiz_window_scroll_bar+0x478>
   8d272:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   8d276:	429c      	cmp	r4, r3
   8d278:	f000 816b 	beq.w	8d552 <check_and_process_touch_on_horiz_window_scroll_bar+0x46a>
   8d27c:	f8d6 3194 	ldr.w	r3, [r6, #404]	; 0x194
   8d280:	429c      	cmp	r4, r3
   8d282:	f000 817b 	beq.w	8d57c <check_and_process_touch_on_horiz_window_scroll_bar+0x494>
   8d286:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
   8d28a:	429c      	cmp	r4, r3
   8d28c:	f000 816f 	beq.w	8d56e <check_and_process_touch_on_horiz_window_scroll_bar+0x486>
   8d290:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
   8d294:	429c      	cmp	r4, r3
   8d296:	f000 817f 	beq.w	8d598 <check_and_process_touch_on_horiz_window_scroll_bar+0x4b0>
   8d29a:	f8d6 3254 	ldr.w	r3, [r6, #596]	; 0x254
   8d29e:	429c      	cmp	r4, r3
   8d2a0:	f000 8173 	beq.w	8d58a <check_and_process_touch_on_horiz_window_scroll_bar+0x4a2>
   8d2a4:	f8d6 3294 	ldr.w	r3, [r6, #660]	; 0x294
   8d2a8:	429c      	cmp	r4, r3
   8d2aa:	f000 8183 	beq.w	8d5b4 <check_and_process_touch_on_horiz_window_scroll_bar+0x4cc>
   8d2ae:	f8d6 32d4 	ldr.w	r3, [r6, #724]	; 0x2d4
   8d2b2:	429c      	cmp	r4, r3
   8d2b4:	f000 8177 	beq.w	8d5a6 <check_and_process_touch_on_horiz_window_scroll_bar+0x4be>
   8d2b8:	f8d6 3314 	ldr.w	r3, [r6, #788]	; 0x314
   8d2bc:	429c      	cmp	r4, r3
   8d2be:	f000 8180 	beq.w	8d5c2 <check_and_process_touch_on_horiz_window_scroll_bar+0x4da>
   8d2c2:	f8d6 3354 	ldr.w	r3, [r6, #852]	; 0x354
   8d2c6:	429c      	cmp	r4, r3
   8d2c8:	f000 8182 	beq.w	8d5d0 <check_and_process_touch_on_horiz_window_scroll_bar+0x4e8>
   8d2cc:	250e      	movs	r5, #14
   8d2ce:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8d2d0:	4b52      	ldr	r3, [pc, #328]	; (8d41c <check_and_process_touch_on_horiz_window_scroll_bar+0x334>)
   8d2d2:	f241 5262 	movw	r2, #5474	; 0x1562
   8d2d6:	4953      	ldr	r1, [pc, #332]	; (8d424 <check_and_process_touch_on_horiz_window_scroll_bar+0x33c>)
   8d2d8:	4f53      	ldr	r7, [pc, #332]	; (8d428 <check_and_process_touch_on_horiz_window_scroll_bar+0x340>)
   8d2da:	47b8      	blx	r7
	new_message.message_id = message_id;
   8d2dc:	210c      	movs	r1, #12
	new_message.message_data = message_data;
   8d2de:	2300      	movs	r3, #0
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8d2e0:	eb06 1685 	add.w	r6, r6, r5, lsl #6
   8d2e4:	68f2      	ldr	r2, [r6, #12]
	new_message.recipient_handle = recipient_handle;
   8d2e6:	9402      	str	r4, [sp, #8]
	new_message.message_id = message_id;
   8d2e8:	f88d 100c 	strb.w	r1, [sp, #12]
	new_message.message_data = message_data;
   8d2ec:	9304      	str	r3, [sp, #16]
	new_message.message_recipient_type = recipient_type;
   8d2ee:	f88d 300d 	strb.w	r3, [sp, #13]
	new_message.sender_handle = sender_handle;
   8d2f2:	9301      	str	r3, [sp, #4]
	new_message.message_pointer = message_pointer;
   8d2f4:	9305      	str	r3, [sp, #20]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8d2f6:	0693      	lsls	r3, r2, #26
   8d2f8:	f57f af15 	bpl.w	8d126 <check_and_process_touch_on_horiz_window_scroll_bar+0x3e>
		(void)mw_message_queue_insert(&new_message);
   8d2fc:	a801      	add	r0, sp, #4
   8d2fe:	4b4b      	ldr	r3, [pc, #300]	; (8d42c <check_and_process_touch_on_horiz_window_scroll_bar+0x344>)
   8d300:	4798      	blx	r3
   8d302:	e710      	b.n	8d126 <check_and_process_touch_on_horiz_window_scroll_bar+0x3e>
		if (mw_all_windows[i].window_handle == window_handle &&
   8d304:	6972      	ldr	r2, [r6, #20]
   8d306:	4293      	cmp	r3, r2
   8d308:	d063      	beq.n	8d3d2 <check_and_process_touch_on_horiz_window_scroll_bar+0x2ea>
   8d30a:	6d72      	ldr	r2, [r6, #84]	; 0x54
   8d30c:	4293      	cmp	r3, r2
   8d30e:	d05c      	beq.n	8d3ca <check_and_process_touch_on_horiz_window_scroll_bar+0x2e2>
   8d310:	f8d6 2094 	ldr.w	r2, [r6, #148]	; 0x94
   8d314:	4293      	cmp	r3, r2
   8d316:	d067      	beq.n	8d3e8 <check_and_process_touch_on_horiz_window_scroll_bar+0x300>
   8d318:	f8d6 20d4 	ldr.w	r2, [r6, #212]	; 0xd4
   8d31c:	4293      	cmp	r3, r2
   8d31e:	d068      	beq.n	8d3f2 <check_and_process_touch_on_horiz_window_scroll_bar+0x30a>
   8d320:	f8d6 2114 	ldr.w	r2, [r6, #276]	; 0x114
   8d324:	4293      	cmp	r3, r2
   8d326:	d070      	beq.n	8d40a <check_and_process_touch_on_horiz_window_scroll_bar+0x322>
   8d328:	f8d6 2154 	ldr.w	r2, [r6, #340]	; 0x154
   8d32c:	4293      	cmp	r3, r2
   8d32e:	f000 808d 	beq.w	8d44c <check_and_process_touch_on_horiz_window_scroll_bar+0x364>
   8d332:	f8d6 2194 	ldr.w	r2, [r6, #404]	; 0x194
   8d336:	4293      	cmp	r3, r2
   8d338:	f000 80a0 	beq.w	8d47c <check_and_process_touch_on_horiz_window_scroll_bar+0x394>
   8d33c:	f8d6 21d4 	ldr.w	r2, [r6, #468]	; 0x1d4
   8d340:	4293      	cmp	r3, r2
   8d342:	f000 8096 	beq.w	8d472 <check_and_process_touch_on_horiz_window_scroll_bar+0x38a>
   8d346:	f8d6 2214 	ldr.w	r2, [r6, #532]	; 0x214
   8d34a:	4293      	cmp	r3, r2
   8d34c:	f000 80a2 	beq.w	8d494 <check_and_process_touch_on_horiz_window_scroll_bar+0x3ac>
   8d350:	f8d6 2254 	ldr.w	r2, [r6, #596]	; 0x254
   8d354:	4293      	cmp	r3, r2
   8d356:	f000 80a3 	beq.w	8d4a0 <check_and_process_touch_on_horiz_window_scroll_bar+0x3b8>
   8d35a:	f8d6 2294 	ldr.w	r2, [r6, #660]	; 0x294
   8d35e:	4293      	cmp	r3, r2
   8d360:	f000 80ab 	beq.w	8d4ba <check_and_process_touch_on_horiz_window_scroll_bar+0x3d2>
   8d364:	f8d6 22d4 	ldr.w	r2, [r6, #724]	; 0x2d4
   8d368:	4293      	cmp	r3, r2
   8d36a:	f000 80c0 	beq.w	8d4ee <check_and_process_touch_on_horiz_window_scroll_bar+0x406>
   8d36e:	f8d6 2314 	ldr.w	r2, [r6, #788]	; 0x314
   8d372:	4293      	cmp	r3, r2
   8d374:	f000 80b5 	beq.w	8d4e2 <check_and_process_touch_on_horiz_window_scroll_bar+0x3fa>
   8d378:	f8d6 2354 	ldr.w	r2, [r6, #852]	; 0x354
   8d37c:	4293      	cmp	r3, r2
   8d37e:	f47f aefa 	bne.w	8d176 <check_and_process_touch_on_horiz_window_scroll_bar+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d382:	f8d6 234c 	ldr.w	r2, [r6, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d386:	0692      	lsls	r2, r2, #26
   8d388:	f57f aef5 	bpl.w	8d176 <check_and_process_touch_on_horiz_window_scroll_bar+0x8e>
	new_message.sender_handle = sender_handle;
   8d38c:	2200      	movs	r2, #0
	new_message.message_id = message_id;
   8d38e:	254b      	movs	r5, #75	; 0x4b
	new_message.message_data = message_data;
   8d390:	2410      	movs	r4, #16
	new_message.message_recipient_type = recipient_type;
   8d392:	2102      	movs	r1, #2
	new_message.recipient_handle = recipient_handle;
   8d394:	9302      	str	r3, [sp, #8]
		(void)mw_message_queue_insert(&new_message);
   8d396:	a801      	add	r0, sp, #4
   8d398:	4b24      	ldr	r3, [pc, #144]	; (8d42c <check_and_process_touch_on_horiz_window_scroll_bar+0x344>)
	new_message.message_id = message_id;
   8d39a:	f88d 500c 	strb.w	r5, [sp, #12]
	new_message.message_data = message_data;
   8d39e:	9404      	str	r4, [sp, #16]
	new_message.message_recipient_type = recipient_type;
   8d3a0:	f88d 100d 	strb.w	r1, [sp, #13]
	new_message.sender_handle = sender_handle;
   8d3a4:	9201      	str	r2, [sp, #4]
	new_message.message_pointer = message_pointer;
   8d3a6:	9205      	str	r2, [sp, #20]
   8d3a8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8d428 <check_and_process_touch_on_horiz_window_scroll_bar+0x340>
		(void)mw_message_queue_insert(&new_message);
   8d3ac:	4798      	blx	r3
   8d3ae:	e6ea      	b.n	8d186 <check_and_process_touch_on_horiz_window_scroll_bar+0x9e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d3b0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d3b2:	0698      	lsls	r0, r3, #26
   8d3b4:	f57f aef5 	bpl.w	8d1a2 <check_and_process_touch_on_horiz_window_scroll_bar+0xba>
   8d3b8:	2501      	movs	r5, #1
   8d3ba:	2001      	movs	r0, #1
   8d3bc:	e72f      	b.n	8d21e <check_and_process_touch_on_horiz_window_scroll_bar+0x136>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d3be:	68f3      	ldr	r3, [r6, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8d3c0:	069d      	lsls	r5, r3, #26
   8d3c2:	f57f aeea 	bpl.w	8d19a <check_and_process_touch_on_horiz_window_scroll_bar+0xb2>
   8d3c6:	2500      	movs	r5, #0
   8d3c8:	e7f7      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d3ca:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d3cc:	0690      	lsls	r0, r2, #26
   8d3ce:	d4dd      	bmi.n	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d3d0:	e79e      	b.n	8d310 <check_and_process_touch_on_horiz_window_scroll_bar+0x228>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d3d2:	68f2      	ldr	r2, [r6, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8d3d4:	0694      	lsls	r4, r2, #26
   8d3d6:	d4d9      	bmi.n	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d3d8:	e797      	b.n	8d30a <check_and_process_touch_on_horiz_window_scroll_bar+0x222>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d3da:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d3de:	0699      	lsls	r1, r3, #26
   8d3e0:	f57f aee4 	bpl.w	8d1ac <check_and_process_touch_on_horiz_window_scroll_bar+0xc4>
   8d3e4:	2502      	movs	r5, #2
   8d3e6:	e7e8      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d3e8:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d3ec:	0691      	lsls	r1, r2, #26
   8d3ee:	d4cd      	bmi.n	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d3f0:	e792      	b.n	8d318 <check_and_process_touch_on_horiz_window_scroll_bar+0x230>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d3f2:	f8d6 20cc 	ldr.w	r2, [r6, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d3f6:	0692      	lsls	r2, r2, #26
   8d3f8:	d4c8      	bmi.n	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d3fa:	e791      	b.n	8d320 <check_and_process_touch_on_horiz_window_scroll_bar+0x238>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d3fc:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d400:	069a      	lsls	r2, r3, #26
   8d402:	f57f aed8 	bpl.w	8d1b6 <check_and_process_touch_on_horiz_window_scroll_bar+0xce>
   8d406:	2503      	movs	r5, #3
   8d408:	e7d7      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d40a:	f8d6 210c 	ldr.w	r2, [r6, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d40e:	0695      	lsls	r5, r2, #26
   8d410:	d4bc      	bmi.n	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d412:	e789      	b.n	8d328 <check_and_process_touch_on_horiz_window_scroll_bar+0x240>
   8d414:	20071bd8 	.word	0x20071bd8
   8d418:	000979dd 	.word	0x000979dd
   8d41c:	000ab764 	.word	0x000ab764
   8d420:	000ab580 	.word	0x000ab580
   8d424:	000ab710 	.word	0x000ab710
   8d428:	00095add 	.word	0x00095add
   8d42c:	00095bc1 	.word	0x00095bc1
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d430:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d434:	069b      	lsls	r3, r3, #26
   8d436:	f57f aec3 	bpl.w	8d1c0 <check_and_process_touch_on_horiz_window_scroll_bar+0xd8>
   8d43a:	2504      	movs	r5, #4
   8d43c:	e7bd      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d43e:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d442:	069d      	lsls	r5, r3, #26
   8d444:	f57f aec1 	bpl.w	8d1ca <check_and_process_touch_on_horiz_window_scroll_bar+0xe2>
   8d448:	2505      	movs	r5, #5
   8d44a:	e7b6      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d44c:	f8d6 214c 	ldr.w	r2, [r6, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d450:	0694      	lsls	r4, r2, #26
   8d452:	d49b      	bmi.n	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d454:	e76d      	b.n	8d332 <check_and_process_touch_on_horiz_window_scroll_bar+0x24a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d456:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d45a:	0699      	lsls	r1, r3, #26
   8d45c:	f57f aebf 	bpl.w	8d1de <check_and_process_touch_on_horiz_window_scroll_bar+0xf6>
   8d460:	2507      	movs	r5, #7
   8d462:	e7aa      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d464:	f8d6 318c 	ldr.w	r3, [r6, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d468:	0698      	lsls	r0, r3, #26
   8d46a:	f57f aeb3 	bpl.w	8d1d4 <check_and_process_touch_on_horiz_window_scroll_bar+0xec>
   8d46e:	2506      	movs	r5, #6
   8d470:	e7a3      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d472:	f8d6 21cc 	ldr.w	r2, [r6, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d476:	0691      	lsls	r1, r2, #26
   8d478:	d488      	bmi.n	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d47a:	e764      	b.n	8d346 <check_and_process_touch_on_horiz_window_scroll_bar+0x25e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d47c:	f8d6 218c 	ldr.w	r2, [r6, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d480:	0690      	lsls	r0, r2, #26
   8d482:	d483      	bmi.n	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d484:	e75a      	b.n	8d33c <check_and_process_touch_on_horiz_window_scroll_bar+0x254>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d486:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d48a:	069a      	lsls	r2, r3, #26
   8d48c:	f57f aeac 	bpl.w	8d1e8 <check_and_process_touch_on_horiz_window_scroll_bar+0x100>
   8d490:	2508      	movs	r5, #8
   8d492:	e792      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d494:	f8d6 220c 	ldr.w	r2, [r6, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d498:	0692      	lsls	r2, r2, #26
   8d49a:	f53f af77 	bmi.w	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d49e:	e757      	b.n	8d350 <check_and_process_touch_on_horiz_window_scroll_bar+0x268>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d4a0:	f8d6 224c 	ldr.w	r2, [r6, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d4a4:	0695      	lsls	r5, r2, #26
   8d4a6:	f53f af71 	bmi.w	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d4aa:	e756      	b.n	8d35a <check_and_process_touch_on_horiz_window_scroll_bar+0x272>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d4ac:	f8d6 324c 	ldr.w	r3, [r6, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d4b0:	069b      	lsls	r3, r3, #26
   8d4b2:	f57f ae9e 	bpl.w	8d1f2 <check_and_process_touch_on_horiz_window_scroll_bar+0x10a>
   8d4b6:	2509      	movs	r5, #9
   8d4b8:	e77f      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d4ba:	f8d6 228c 	ldr.w	r2, [r6, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d4be:	0694      	lsls	r4, r2, #26
   8d4c0:	f53f af64 	bmi.w	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d4c4:	e74e      	b.n	8d364 <check_and_process_touch_on_horiz_window_scroll_bar+0x27c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d4c6:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d4ca:	069d      	lsls	r5, r3, #26
   8d4cc:	f57f ae96 	bpl.w	8d1fc <check_and_process_touch_on_horiz_window_scroll_bar+0x114>
   8d4d0:	250a      	movs	r5, #10
   8d4d2:	e772      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d4d4:	f8d6 32cc 	ldr.w	r3, [r6, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d4d8:	0698      	lsls	r0, r3, #26
   8d4da:	f57f ae94 	bpl.w	8d206 <check_and_process_touch_on_horiz_window_scroll_bar+0x11e>
   8d4de:	250b      	movs	r5, #11
   8d4e0:	e76b      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d4e2:	f8d6 230c 	ldr.w	r2, [r6, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d4e6:	0691      	lsls	r1, r2, #26
   8d4e8:	f53f af50 	bmi.w	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d4ec:	e744      	b.n	8d378 <check_and_process_touch_on_horiz_window_scroll_bar+0x290>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d4ee:	f8d6 22cc 	ldr.w	r2, [r6, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d4f2:	0690      	lsls	r0, r2, #26
   8d4f4:	f53f af4a 	bmi.w	8d38c <check_and_process_touch_on_horiz_window_scroll_bar+0x2a4>
   8d4f8:	e739      	b.n	8d36e <check_and_process_touch_on_horiz_window_scroll_bar+0x286>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d4fa:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d4fe:	0699      	lsls	r1, r3, #26
   8d500:	f57f ae86 	bpl.w	8d210 <check_and_process_touch_on_horiz_window_scroll_bar+0x128>
   8d504:	250c      	movs	r5, #12
   8d506:	e758      	b.n	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d508:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d50c:	f013 0020 	ands.w	r0, r3, #32
   8d510:	bf18      	it	ne
   8d512:	250d      	movne	r5, #13
   8d514:	f47f af51 	bne.w	8d3ba <check_and_process_touch_on_horiz_window_scroll_bar+0x2d2>
   8d518:	250e      	movs	r5, #14
   8d51a:	e680      	b.n	8d21e <check_and_process_touch_on_horiz_window_scroll_bar+0x136>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d51c:	68f3      	ldr	r3, [r6, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8d51e:	069a      	lsls	r2, r3, #26
   8d520:	f57f ae94 	bpl.w	8d24c <check_and_process_touch_on_horiz_window_scroll_bar+0x164>
   8d524:	2500      	movs	r5, #0
   8d526:	2001      	movs	r0, #1
   8d528:	e6d2      	b.n	8d2d0 <check_and_process_touch_on_horiz_window_scroll_bar+0x1e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d52a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d52c:	069b      	lsls	r3, r3, #26
   8d52e:	f57f ae91 	bpl.w	8d254 <check_and_process_touch_on_horiz_window_scroll_bar+0x16c>
   8d532:	2501      	movs	r5, #1
   8d534:	e7f7      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d536:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d53a:	069d      	lsls	r5, r3, #26
   8d53c:	f57f ae94 	bpl.w	8d268 <check_and_process_touch_on_horiz_window_scroll_bar+0x180>
   8d540:	2503      	movs	r5, #3
   8d542:	e7f0      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d544:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d548:	069f      	lsls	r7, r3, #26
   8d54a:	f57f ae88 	bpl.w	8d25e <check_and_process_touch_on_horiz_window_scroll_bar+0x176>
   8d54e:	2502      	movs	r5, #2
   8d550:	e7e9      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d552:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d556:	0699      	lsls	r1, r3, #26
   8d558:	f57f ae90 	bpl.w	8d27c <check_and_process_touch_on_horiz_window_scroll_bar+0x194>
   8d55c:	2505      	movs	r5, #5
   8d55e:	e7e2      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d560:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d564:	0698      	lsls	r0, r3, #26
   8d566:	f57f ae84 	bpl.w	8d272 <check_and_process_touch_on_horiz_window_scroll_bar+0x18a>
   8d56a:	2504      	movs	r5, #4
   8d56c:	e7db      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d56e:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d572:	069b      	lsls	r3, r3, #26
   8d574:	f57f ae8c 	bpl.w	8d290 <check_and_process_touch_on_horiz_window_scroll_bar+0x1a8>
   8d578:	2507      	movs	r5, #7
   8d57a:	e7d4      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d57c:	f8d6 318c 	ldr.w	r3, [r6, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d580:	069a      	lsls	r2, r3, #26
   8d582:	f57f ae80 	bpl.w	8d286 <check_and_process_touch_on_horiz_window_scroll_bar+0x19e>
   8d586:	2506      	movs	r5, #6
   8d588:	e7cd      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d58a:	f8d6 324c 	ldr.w	r3, [r6, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d58e:	069d      	lsls	r5, r3, #26
   8d590:	f57f ae88 	bpl.w	8d2a4 <check_and_process_touch_on_horiz_window_scroll_bar+0x1bc>
   8d594:	2509      	movs	r5, #9
   8d596:	e7c6      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d598:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d59c:	069f      	lsls	r7, r3, #26
   8d59e:	f57f ae7c 	bpl.w	8d29a <check_and_process_touch_on_horiz_window_scroll_bar+0x1b2>
   8d5a2:	2508      	movs	r5, #8
   8d5a4:	e7bf      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d5a6:	f8d6 32cc 	ldr.w	r3, [r6, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d5aa:	0699      	lsls	r1, r3, #26
   8d5ac:	f57f ae84 	bpl.w	8d2b8 <check_and_process_touch_on_horiz_window_scroll_bar+0x1d0>
   8d5b0:	250b      	movs	r5, #11
   8d5b2:	e7b8      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d5b4:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d5b8:	0698      	lsls	r0, r3, #26
   8d5ba:	f57f ae78 	bpl.w	8d2ae <check_and_process_touch_on_horiz_window_scroll_bar+0x1c6>
   8d5be:	250a      	movs	r5, #10
   8d5c0:	e7b1      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d5c2:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d5c6:	069a      	lsls	r2, r3, #26
   8d5c8:	f57f ae7b 	bpl.w	8d2c2 <check_and_process_touch_on_horiz_window_scroll_bar+0x1da>
   8d5cc:	250c      	movs	r5, #12
   8d5ce:	e7aa      	b.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d5d0:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d5d4:	f013 0020 	ands.w	r0, r3, #32
   8d5d8:	bf18      	it	ne
   8d5da:	250d      	movne	r5, #13
   8d5dc:	d1a3      	bne.n	8d526 <check_and_process_touch_on_horiz_window_scroll_bar+0x43e>
   8d5de:	250e      	movs	r5, #14
   8d5e0:	e676      	b.n	8d2d0 <check_and_process_touch_on_horiz_window_scroll_bar+0x1e8>
   8d5e2:	bf00      	nop

0008d5e4 <check_and_process_touch_on_vert_window_scroll_bar>:
{
   8d5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
   8d5e8:	4ec9      	ldr	r6, [pc, #804]	; (8d910 <check_and_process_touch_on_vert_window_scroll_bar+0x32c>)
   8d5ea:	0187      	lsls	r7, r0, #6
   8d5ec:	19f4      	adds	r4, r6, r7
   8d5ee:	68e5      	ldr	r5, [r4, #12]
{
   8d5f0:	b086      	sub	sp, #24
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
   8d5f2:	f015 0080 	ands.w	r0, r5, #128	; 0x80
{
   8d5f6:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR)
   8d5fa:	d013      	beq.n	8d624 <check_and_process_touch_on_vert_window_scroll_bar+0x40>
		if ((touch_x > mw_all_windows[window_id].client_rect.x +
   8d5fc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
				mw_all_windows[window_id].client_rect.width &&
   8d600:	f9b4 c024 	ldrsh.w	ip, [r4, #36]	; 0x24
		if ((touch_x > mw_all_windows[window_id].client_rect.x +
   8d604:	4460      	add	r0, ip
   8d606:	4281      	cmp	r1, r0
   8d608:	dc0f      	bgt.n	8d62a <check_and_process_touch_on_vert_window_scroll_bar+0x46>
				touch_y >= mw_all_windows[window_id].client_rect.y) ||
   8d60a:	f1be 0f00 	cmp.w	lr, #0
   8d60e:	d113      	bne.n	8d638 <check_and_process_touch_on_vert_window_scroll_bar+0x54>
			if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_VERT_SCROLL_BAR_ENABLED) == MW_WINDOW_FLAG_VERT_SCROLL_BAR_ENABLED)
   8d610:	04ed      	lsls	r5, r5, #19
   8d612:	d506      	bpl.n	8d622 <check_and_process_touch_on_vert_window_scroll_bar+0x3e>
				if (touch_message_id == MW_TOUCH_DOWN_MESSAGE || touch_message_id == MW_TOUCH_DRAG_MESSAGE)
   8d614:	2b14      	cmp	r3, #20
   8d616:	d013      	beq.n	8d640 <check_and_process_touch_on_vert_window_scroll_bar+0x5c>
   8d618:	2b17      	cmp	r3, #23
   8d61a:	d011      	beq.n	8d640 <check_and_process_touch_on_vert_window_scroll_bar+0x5c>
				else if (touch_message_id == MW_TOUCH_UP_MESSAGE)
   8d61c:	2b16      	cmp	r3, #22
   8d61e:	f000 808b 	beq.w	8d738 <check_and_process_touch_on_vert_window_scroll_bar+0x154>
			return (true);
   8d622:	2001      	movs	r0, #1
}
   8d624:	b006      	add	sp, #24
   8d626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				mw_all_windows[window_id].client_rect.width &&
   8d62a:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
   8d62e:	4291      	cmp	r1, r2
   8d630:	ddee      	ble.n	8d610 <check_and_process_touch_on_vert_window_scroll_bar+0x2c>
				touch_y >= mw_all_windows[window_id].client_rect.y) ||
   8d632:	f1be 0f00 	cmp.w	lr, #0
   8d636:	d0eb      	beq.n	8d610 <check_and_process_touch_on_vert_window_scroll_bar+0x2c>
	return (false);
   8d638:	2000      	movs	r0, #0
}
   8d63a:	b006      	add	sp, #24
   8d63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							touch_y - mw_all_windows[window_id].client_rect.y);
   8d640:	19f4      	adds	r4, r6, r7
   8d642:	8c61      	ldrh	r1, [r4, #34]	; 0x22
					scaled_touch = mw_ui_common_scale_scroll_bar_touch_point(mw_all_windows[window_id].client_rect.height,
   8d644:	4bb3      	ldr	r3, [pc, #716]	; (8d914 <check_and_process_touch_on_vert_window_scroll_bar+0x330>)
							touch_y - mw_all_windows[window_id].client_rect.y);
   8d646:	1a51      	subs	r1, r2, r1
					scaled_touch = mw_ui_common_scale_scroll_bar_touch_point(mw_all_windows[window_id].client_rect.height,
   8d648:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
   8d64c:	b209      	sxth	r1, r1
   8d64e:	4798      	blx	r3
					temp_int32 = ((int32_t)UINT8_MAX * (int32_t)scaled_touch) / (int32_t)mw_all_windows[window_id].client_rect.height;
   8d650:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
   8d654:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   8d658:	fb90 f0f3 	sdiv	r0, r0, r3
					if (new_scroll_position != mw_all_windows[window_id].vert_scroll_pos)
   8d65c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
					new_scroll_position = (uint8_t)temp_int32;
   8d660:	b2c0      	uxtb	r0, r0
					if (new_scroll_position != mw_all_windows[window_id].vert_scroll_pos)
   8d662:	4283      	cmp	r3, r0
   8d664:	d0dd      	beq.n	8d622 <check_and_process_touch_on_vert_window_scroll_bar+0x3e>
						mw_paint_window_frame(mw_all_windows[window_id].window_handle,
   8d666:	6963      	ldr	r3, [r4, #20]
						mw_all_windows[window_id].vert_scroll_pos = new_scroll_position;
   8d668:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
	if (window_handle == MW_INVALID_HANDLE)
   8d66c:	2b00      	cmp	r3, #0
   8d66e:	f040 80c7 	bne.w	8d800 <check_and_process_touch_on_vert_window_scroll_bar+0x21c>
		MW_ASSERT((bool)false, "Bad window handle");
   8d672:	4ba9      	ldr	r3, [pc, #676]	; (8d918 <check_and_process_touch_on_vert_window_scroll_bar+0x334>)
   8d674:	f241 22bf 	movw	r2, #4799	; 0x12bf
   8d678:	49a8      	ldr	r1, [pc, #672]	; (8d91c <check_and_process_touch_on_vert_window_scroll_bar+0x338>)
   8d67a:	2000      	movs	r0, #0
   8d67c:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8d924 <check_and_process_touch_on_vert_window_scroll_bar+0x340>
   8d680:	47c0      	blx	r8
						mw_post_message(MW_WINDOW_VERT_SCROLL_BAR_SCROLLED_MESSAGE,
   8d682:	4437      	add	r7, r6
   8d684:	697c      	ldr	r4, [r7, #20]
   8d686:	f897 702e 	ldrb.w	r7, [r7, #46]	; 0x2e
	if (window_handle == MW_INVALID_HANDLE)
   8d68a:	2c00      	cmp	r4, #0
   8d68c:	d043      	beq.n	8d716 <check_and_process_touch_on_vert_window_scroll_bar+0x132>
		if (mw_all_windows[i].window_handle == window_handle &&
   8d68e:	6973      	ldr	r3, [r6, #20]
   8d690:	42a3      	cmp	r3, r4
   8d692:	f000 8112 	beq.w	8d8ba <check_and_process_touch_on_vert_window_scroll_bar+0x2d6>
   8d696:	6d73      	ldr	r3, [r6, #84]	; 0x54
   8d698:	429c      	cmp	r4, r3
   8d69a:	f000 8107 	beq.w	8d8ac <check_and_process_touch_on_vert_window_scroll_bar+0x2c8>
   8d69e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   8d6a2:	429c      	cmp	r4, r3
   8d6a4:	f000 8117 	beq.w	8d8d6 <check_and_process_touch_on_vert_window_scroll_bar+0x2f2>
   8d6a8:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
   8d6ac:	429c      	cmp	r4, r3
   8d6ae:	f000 8123 	beq.w	8d8f8 <check_and_process_touch_on_vert_window_scroll_bar+0x314>
   8d6b2:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
   8d6b6:	429c      	cmp	r4, r3
   8d6b8:	f000 8138 	beq.w	8d92c <check_and_process_touch_on_vert_window_scroll_bar+0x348>
   8d6bc:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   8d6c0:	429c      	cmp	r4, r3
   8d6c2:	f000 813a 	beq.w	8d93a <check_and_process_touch_on_vert_window_scroll_bar+0x356>
   8d6c6:	f8d6 3194 	ldr.w	r3, [r6, #404]	; 0x194
   8d6ca:	429c      	cmp	r4, r3
   8d6cc:	f000 8148 	beq.w	8d960 <check_and_process_touch_on_vert_window_scroll_bar+0x37c>
   8d6d0:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
   8d6d4:	429c      	cmp	r4, r3
   8d6d6:	f000 813c 	beq.w	8d952 <check_and_process_touch_on_vert_window_scroll_bar+0x36e>
   8d6da:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
   8d6de:	429c      	cmp	r4, r3
   8d6e0:	f000 814f 	beq.w	8d982 <check_and_process_touch_on_vert_window_scroll_bar+0x39e>
   8d6e4:	f8d6 3254 	ldr.w	r3, [r6, #596]	; 0x254
   8d6e8:	429c      	cmp	r4, r3
   8d6ea:	f000 815d 	beq.w	8d9a8 <check_and_process_touch_on_vert_window_scroll_bar+0x3c4>
   8d6ee:	f8d6 3294 	ldr.w	r3, [r6, #660]	; 0x294
   8d6f2:	429c      	cmp	r4, r3
   8d6f4:	f000 8165 	beq.w	8d9c2 <check_and_process_touch_on_vert_window_scroll_bar+0x3de>
   8d6f8:	f8d6 32d4 	ldr.w	r3, [r6, #724]	; 0x2d4
   8d6fc:	429c      	cmp	r4, r3
   8d6fe:	f000 8167 	beq.w	8d9d0 <check_and_process_touch_on_vert_window_scroll_bar+0x3ec>
   8d702:	f8d6 3314 	ldr.w	r3, [r6, #788]	; 0x314
   8d706:	429c      	cmp	r4, r3
   8d708:	f000 8175 	beq.w	8d9f6 <check_and_process_touch_on_vert_window_scroll_bar+0x412>
   8d70c:	f8d6 3354 	ldr.w	r3, [r6, #852]	; 0x354
   8d710:	429c      	cmp	r4, r3
   8d712:	f000 8177 	beq.w	8da04 <check_and_process_touch_on_vert_window_scroll_bar+0x420>
   8d716:	250e      	movs	r5, #14
   8d718:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8d71a:	4b7f      	ldr	r3, [pc, #508]	; (8d918 <check_and_process_touch_on_vert_window_scroll_bar+0x334>)
   8d71c:	f241 5262 	movw	r2, #5474	; 0x1562
   8d720:	497f      	ldr	r1, [pc, #508]	; (8d920 <check_and_process_touch_on_vert_window_scroll_bar+0x33c>)
   8d722:	47c0      	blx	r8
	new_message.message_id = message_id;
   8d724:	2109      	movs	r1, #9
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8d726:	eb06 1685 	add.w	r6, r6, r5, lsl #6
	new_message.message_recipient_type = recipient_type;
   8d72a:	2300      	movs	r3, #0
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8d72c:	68f2      	ldr	r2, [r6, #12]
	new_message.message_data = message_data;
   8d72e:	9704      	str	r7, [sp, #16]
	new_message.recipient_handle = recipient_handle;
   8d730:	9402      	str	r4, [sp, #8]
	new_message.message_id = message_id;
   8d732:	f88d 100c 	strb.w	r1, [sp, #12]
   8d736:	e058      	b.n	8d7ea <check_and_process_touch_on_vert_window_scroll_bar+0x206>
					mw_post_message(MW_WINDOW_VERT_SCROLL_BAR_SCROLL_ENDED_MESSAGE,
   8d738:	4437      	add	r7, r6
   8d73a:	697c      	ldr	r4, [r7, #20]
	if (window_handle == MW_INVALID_HANDLE)
   8d73c:	2c00      	cmp	r4, #0
   8d73e:	d043      	beq.n	8d7c8 <check_and_process_touch_on_vert_window_scroll_bar+0x1e4>
		if (mw_all_windows[i].window_handle == window_handle &&
   8d740:	6973      	ldr	r3, [r6, #20]
   8d742:	429c      	cmp	r4, r3
   8d744:	f000 8168 	beq.w	8da18 <check_and_process_touch_on_vert_window_scroll_bar+0x434>
   8d748:	6d73      	ldr	r3, [r6, #84]	; 0x54
   8d74a:	429c      	cmp	r4, r3
   8d74c:	f000 816b 	beq.w	8da26 <check_and_process_touch_on_vert_window_scroll_bar+0x442>
   8d750:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   8d754:	429c      	cmp	r4, r3
   8d756:	f000 8173 	beq.w	8da40 <check_and_process_touch_on_vert_window_scroll_bar+0x45c>
   8d75a:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
   8d75e:	429c      	cmp	r4, r3
   8d760:	f000 8167 	beq.w	8da32 <check_and_process_touch_on_vert_window_scroll_bar+0x44e>
   8d764:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
   8d768:	429c      	cmp	r4, r3
   8d76a:	f000 8177 	beq.w	8da5c <check_and_process_touch_on_vert_window_scroll_bar+0x478>
   8d76e:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   8d772:	429c      	cmp	r4, r3
   8d774:	f000 816b 	beq.w	8da4e <check_and_process_touch_on_vert_window_scroll_bar+0x46a>
   8d778:	f8d6 3194 	ldr.w	r3, [r6, #404]	; 0x194
   8d77c:	429c      	cmp	r4, r3
   8d77e:	f000 817b 	beq.w	8da78 <check_and_process_touch_on_vert_window_scroll_bar+0x494>
   8d782:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
   8d786:	429c      	cmp	r4, r3
   8d788:	f000 816f 	beq.w	8da6a <check_and_process_touch_on_vert_window_scroll_bar+0x486>
   8d78c:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
   8d790:	429c      	cmp	r4, r3
   8d792:	f000 817f 	beq.w	8da94 <check_and_process_touch_on_vert_window_scroll_bar+0x4b0>
   8d796:	f8d6 3254 	ldr.w	r3, [r6, #596]	; 0x254
   8d79a:	429c      	cmp	r4, r3
   8d79c:	f000 8173 	beq.w	8da86 <check_and_process_touch_on_vert_window_scroll_bar+0x4a2>
   8d7a0:	f8d6 3294 	ldr.w	r3, [r6, #660]	; 0x294
   8d7a4:	429c      	cmp	r4, r3
   8d7a6:	f000 8183 	beq.w	8dab0 <check_and_process_touch_on_vert_window_scroll_bar+0x4cc>
   8d7aa:	f8d6 32d4 	ldr.w	r3, [r6, #724]	; 0x2d4
   8d7ae:	429c      	cmp	r4, r3
   8d7b0:	f000 8177 	beq.w	8daa2 <check_and_process_touch_on_vert_window_scroll_bar+0x4be>
   8d7b4:	f8d6 3314 	ldr.w	r3, [r6, #788]	; 0x314
   8d7b8:	429c      	cmp	r4, r3
   8d7ba:	f000 8180 	beq.w	8dabe <check_and_process_touch_on_vert_window_scroll_bar+0x4da>
   8d7be:	f8d6 3354 	ldr.w	r3, [r6, #852]	; 0x354
   8d7c2:	429c      	cmp	r4, r3
   8d7c4:	f000 8182 	beq.w	8dacc <check_and_process_touch_on_vert_window_scroll_bar+0x4e8>
   8d7c8:	250e      	movs	r5, #14
   8d7ca:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8d7cc:	4b52      	ldr	r3, [pc, #328]	; (8d918 <check_and_process_touch_on_vert_window_scroll_bar+0x334>)
   8d7ce:	f241 5262 	movw	r2, #5474	; 0x1562
   8d7d2:	4953      	ldr	r1, [pc, #332]	; (8d920 <check_and_process_touch_on_vert_window_scroll_bar+0x33c>)
   8d7d4:	4f53      	ldr	r7, [pc, #332]	; (8d924 <check_and_process_touch_on_vert_window_scroll_bar+0x340>)
   8d7d6:	47b8      	blx	r7
	new_message.message_id = message_id;
   8d7d8:	210a      	movs	r1, #10
	new_message.message_data = message_data;
   8d7da:	2300      	movs	r3, #0
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8d7dc:	eb06 1685 	add.w	r6, r6, r5, lsl #6
   8d7e0:	68f2      	ldr	r2, [r6, #12]
	new_message.recipient_handle = recipient_handle;
   8d7e2:	9402      	str	r4, [sp, #8]
	new_message.message_id = message_id;
   8d7e4:	f88d 100c 	strb.w	r1, [sp, #12]
	new_message.message_data = message_data;
   8d7e8:	9304      	str	r3, [sp, #16]
	new_message.message_recipient_type = recipient_type;
   8d7ea:	f88d 300d 	strb.w	r3, [sp, #13]
	new_message.sender_handle = sender_handle;
   8d7ee:	9301      	str	r3, [sp, #4]
	new_message.message_pointer = message_pointer;
   8d7f0:	9305      	str	r3, [sp, #20]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8d7f2:	0693      	lsls	r3, r2, #26
   8d7f4:	f57f af15 	bpl.w	8d622 <check_and_process_touch_on_vert_window_scroll_bar+0x3e>
		(void)mw_message_queue_insert(&new_message);
   8d7f8:	a801      	add	r0, sp, #4
   8d7fa:	4b4b      	ldr	r3, [pc, #300]	; (8d928 <check_and_process_touch_on_vert_window_scroll_bar+0x344>)
   8d7fc:	4798      	blx	r3
   8d7fe:	e710      	b.n	8d622 <check_and_process_touch_on_vert_window_scroll_bar+0x3e>
		if (mw_all_windows[i].window_handle == window_handle &&
   8d800:	6972      	ldr	r2, [r6, #20]
   8d802:	4293      	cmp	r3, r2
   8d804:	d063      	beq.n	8d8ce <check_and_process_touch_on_vert_window_scroll_bar+0x2ea>
   8d806:	6d72      	ldr	r2, [r6, #84]	; 0x54
   8d808:	4293      	cmp	r3, r2
   8d80a:	d05c      	beq.n	8d8c6 <check_and_process_touch_on_vert_window_scroll_bar+0x2e2>
   8d80c:	f8d6 2094 	ldr.w	r2, [r6, #148]	; 0x94
   8d810:	4293      	cmp	r3, r2
   8d812:	d067      	beq.n	8d8e4 <check_and_process_touch_on_vert_window_scroll_bar+0x300>
   8d814:	f8d6 20d4 	ldr.w	r2, [r6, #212]	; 0xd4
   8d818:	4293      	cmp	r3, r2
   8d81a:	d068      	beq.n	8d8ee <check_and_process_touch_on_vert_window_scroll_bar+0x30a>
   8d81c:	f8d6 2114 	ldr.w	r2, [r6, #276]	; 0x114
   8d820:	4293      	cmp	r3, r2
   8d822:	d070      	beq.n	8d906 <check_and_process_touch_on_vert_window_scroll_bar+0x322>
   8d824:	f8d6 2154 	ldr.w	r2, [r6, #340]	; 0x154
   8d828:	4293      	cmp	r3, r2
   8d82a:	f000 808d 	beq.w	8d948 <check_and_process_touch_on_vert_window_scroll_bar+0x364>
   8d82e:	f8d6 2194 	ldr.w	r2, [r6, #404]	; 0x194
   8d832:	4293      	cmp	r3, r2
   8d834:	f000 80a0 	beq.w	8d978 <check_and_process_touch_on_vert_window_scroll_bar+0x394>
   8d838:	f8d6 21d4 	ldr.w	r2, [r6, #468]	; 0x1d4
   8d83c:	4293      	cmp	r3, r2
   8d83e:	f000 8096 	beq.w	8d96e <check_and_process_touch_on_vert_window_scroll_bar+0x38a>
   8d842:	f8d6 2214 	ldr.w	r2, [r6, #532]	; 0x214
   8d846:	4293      	cmp	r3, r2
   8d848:	f000 80a2 	beq.w	8d990 <check_and_process_touch_on_vert_window_scroll_bar+0x3ac>
   8d84c:	f8d6 2254 	ldr.w	r2, [r6, #596]	; 0x254
   8d850:	4293      	cmp	r3, r2
   8d852:	f000 80a3 	beq.w	8d99c <check_and_process_touch_on_vert_window_scroll_bar+0x3b8>
   8d856:	f8d6 2294 	ldr.w	r2, [r6, #660]	; 0x294
   8d85a:	4293      	cmp	r3, r2
   8d85c:	f000 80ab 	beq.w	8d9b6 <check_and_process_touch_on_vert_window_scroll_bar+0x3d2>
   8d860:	f8d6 22d4 	ldr.w	r2, [r6, #724]	; 0x2d4
   8d864:	4293      	cmp	r3, r2
   8d866:	f000 80c0 	beq.w	8d9ea <check_and_process_touch_on_vert_window_scroll_bar+0x406>
   8d86a:	f8d6 2314 	ldr.w	r2, [r6, #788]	; 0x314
   8d86e:	4293      	cmp	r3, r2
   8d870:	f000 80b5 	beq.w	8d9de <check_and_process_touch_on_vert_window_scroll_bar+0x3fa>
   8d874:	f8d6 2354 	ldr.w	r2, [r6, #852]	; 0x354
   8d878:	4293      	cmp	r3, r2
   8d87a:	f47f aefa 	bne.w	8d672 <check_and_process_touch_on_vert_window_scroll_bar+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d87e:	f8d6 234c 	ldr.w	r2, [r6, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d882:	0692      	lsls	r2, r2, #26
   8d884:	f57f aef5 	bpl.w	8d672 <check_and_process_touch_on_vert_window_scroll_bar+0x8e>
	new_message.sender_handle = sender_handle;
   8d888:	2200      	movs	r2, #0
	new_message.message_id = message_id;
   8d88a:	254b      	movs	r5, #75	; 0x4b
	new_message.message_data = message_data;
   8d88c:	2408      	movs	r4, #8
	new_message.message_recipient_type = recipient_type;
   8d88e:	2102      	movs	r1, #2
	new_message.recipient_handle = recipient_handle;
   8d890:	9302      	str	r3, [sp, #8]
		(void)mw_message_queue_insert(&new_message);
   8d892:	a801      	add	r0, sp, #4
   8d894:	4b24      	ldr	r3, [pc, #144]	; (8d928 <check_and_process_touch_on_vert_window_scroll_bar+0x344>)
	new_message.message_id = message_id;
   8d896:	f88d 500c 	strb.w	r5, [sp, #12]
	new_message.message_data = message_data;
   8d89a:	9404      	str	r4, [sp, #16]
	new_message.message_recipient_type = recipient_type;
   8d89c:	f88d 100d 	strb.w	r1, [sp, #13]
	new_message.sender_handle = sender_handle;
   8d8a0:	9201      	str	r2, [sp, #4]
	new_message.message_pointer = message_pointer;
   8d8a2:	9205      	str	r2, [sp, #20]
   8d8a4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8d924 <check_and_process_touch_on_vert_window_scroll_bar+0x340>
		(void)mw_message_queue_insert(&new_message);
   8d8a8:	4798      	blx	r3
   8d8aa:	e6ea      	b.n	8d682 <check_and_process_touch_on_vert_window_scroll_bar+0x9e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d8ac:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d8ae:	0698      	lsls	r0, r3, #26
   8d8b0:	f57f aef5 	bpl.w	8d69e <check_and_process_touch_on_vert_window_scroll_bar+0xba>
   8d8b4:	2501      	movs	r5, #1
   8d8b6:	2001      	movs	r0, #1
   8d8b8:	e72f      	b.n	8d71a <check_and_process_touch_on_vert_window_scroll_bar+0x136>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d8ba:	68f3      	ldr	r3, [r6, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8d8bc:	069d      	lsls	r5, r3, #26
   8d8be:	f57f aeea 	bpl.w	8d696 <check_and_process_touch_on_vert_window_scroll_bar+0xb2>
   8d8c2:	2500      	movs	r5, #0
   8d8c4:	e7f7      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d8c6:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d8c8:	0690      	lsls	r0, r2, #26
   8d8ca:	d4dd      	bmi.n	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d8cc:	e79e      	b.n	8d80c <check_and_process_touch_on_vert_window_scroll_bar+0x228>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d8ce:	68f2      	ldr	r2, [r6, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8d8d0:	0694      	lsls	r4, r2, #26
   8d8d2:	d4d9      	bmi.n	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d8d4:	e797      	b.n	8d806 <check_and_process_touch_on_vert_window_scroll_bar+0x222>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d8d6:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d8da:	0699      	lsls	r1, r3, #26
   8d8dc:	f57f aee4 	bpl.w	8d6a8 <check_and_process_touch_on_vert_window_scroll_bar+0xc4>
   8d8e0:	2502      	movs	r5, #2
   8d8e2:	e7e8      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d8e4:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d8e8:	0691      	lsls	r1, r2, #26
   8d8ea:	d4cd      	bmi.n	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d8ec:	e792      	b.n	8d814 <check_and_process_touch_on_vert_window_scroll_bar+0x230>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d8ee:	f8d6 20cc 	ldr.w	r2, [r6, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d8f2:	0692      	lsls	r2, r2, #26
   8d8f4:	d4c8      	bmi.n	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d8f6:	e791      	b.n	8d81c <check_and_process_touch_on_vert_window_scroll_bar+0x238>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d8f8:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d8fc:	069a      	lsls	r2, r3, #26
   8d8fe:	f57f aed8 	bpl.w	8d6b2 <check_and_process_touch_on_vert_window_scroll_bar+0xce>
   8d902:	2503      	movs	r5, #3
   8d904:	e7d7      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d906:	f8d6 210c 	ldr.w	r2, [r6, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d90a:	0695      	lsls	r5, r2, #26
   8d90c:	d4bc      	bmi.n	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d90e:	e789      	b.n	8d824 <check_and_process_touch_on_vert_window_scroll_bar+0x240>
   8d910:	20071bd8 	.word	0x20071bd8
   8d914:	000979dd 	.word	0x000979dd
   8d918:	000ab764 	.word	0x000ab764
   8d91c:	000ab580 	.word	0x000ab580
   8d920:	000ab710 	.word	0x000ab710
   8d924:	00095add 	.word	0x00095add
   8d928:	00095bc1 	.word	0x00095bc1
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d92c:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d930:	069b      	lsls	r3, r3, #26
   8d932:	f57f aec3 	bpl.w	8d6bc <check_and_process_touch_on_vert_window_scroll_bar+0xd8>
   8d936:	2504      	movs	r5, #4
   8d938:	e7bd      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d93a:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d93e:	069d      	lsls	r5, r3, #26
   8d940:	f57f aec1 	bpl.w	8d6c6 <check_and_process_touch_on_vert_window_scroll_bar+0xe2>
   8d944:	2505      	movs	r5, #5
   8d946:	e7b6      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d948:	f8d6 214c 	ldr.w	r2, [r6, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d94c:	0694      	lsls	r4, r2, #26
   8d94e:	d49b      	bmi.n	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d950:	e76d      	b.n	8d82e <check_and_process_touch_on_vert_window_scroll_bar+0x24a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d952:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d956:	0699      	lsls	r1, r3, #26
   8d958:	f57f aebf 	bpl.w	8d6da <check_and_process_touch_on_vert_window_scroll_bar+0xf6>
   8d95c:	2507      	movs	r5, #7
   8d95e:	e7aa      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d960:	f8d6 318c 	ldr.w	r3, [r6, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d964:	0698      	lsls	r0, r3, #26
   8d966:	f57f aeb3 	bpl.w	8d6d0 <check_and_process_touch_on_vert_window_scroll_bar+0xec>
   8d96a:	2506      	movs	r5, #6
   8d96c:	e7a3      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d96e:	f8d6 21cc 	ldr.w	r2, [r6, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d972:	0691      	lsls	r1, r2, #26
   8d974:	d488      	bmi.n	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d976:	e764      	b.n	8d842 <check_and_process_touch_on_vert_window_scroll_bar+0x25e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d978:	f8d6 218c 	ldr.w	r2, [r6, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d97c:	0690      	lsls	r0, r2, #26
   8d97e:	d483      	bmi.n	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d980:	e75a      	b.n	8d838 <check_and_process_touch_on_vert_window_scroll_bar+0x254>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d982:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d986:	069a      	lsls	r2, r3, #26
   8d988:	f57f aeac 	bpl.w	8d6e4 <check_and_process_touch_on_vert_window_scroll_bar+0x100>
   8d98c:	2508      	movs	r5, #8
   8d98e:	e792      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d990:	f8d6 220c 	ldr.w	r2, [r6, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d994:	0692      	lsls	r2, r2, #26
   8d996:	f53f af77 	bmi.w	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d99a:	e757      	b.n	8d84c <check_and_process_touch_on_vert_window_scroll_bar+0x268>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d99c:	f8d6 224c 	ldr.w	r2, [r6, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d9a0:	0695      	lsls	r5, r2, #26
   8d9a2:	f53f af71 	bmi.w	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d9a6:	e756      	b.n	8d856 <check_and_process_touch_on_vert_window_scroll_bar+0x272>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d9a8:	f8d6 324c 	ldr.w	r3, [r6, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d9ac:	069b      	lsls	r3, r3, #26
   8d9ae:	f57f ae9e 	bpl.w	8d6ee <check_and_process_touch_on_vert_window_scroll_bar+0x10a>
   8d9b2:	2509      	movs	r5, #9
   8d9b4:	e77f      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d9b6:	f8d6 228c 	ldr.w	r2, [r6, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d9ba:	0694      	lsls	r4, r2, #26
   8d9bc:	f53f af64 	bmi.w	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d9c0:	e74e      	b.n	8d860 <check_and_process_touch_on_vert_window_scroll_bar+0x27c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d9c2:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d9c6:	069d      	lsls	r5, r3, #26
   8d9c8:	f57f ae96 	bpl.w	8d6f8 <check_and_process_touch_on_vert_window_scroll_bar+0x114>
   8d9cc:	250a      	movs	r5, #10
   8d9ce:	e772      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d9d0:	f8d6 32cc 	ldr.w	r3, [r6, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d9d4:	0698      	lsls	r0, r3, #26
   8d9d6:	f57f ae94 	bpl.w	8d702 <check_and_process_touch_on_vert_window_scroll_bar+0x11e>
   8d9da:	250b      	movs	r5, #11
   8d9dc:	e76b      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d9de:	f8d6 230c 	ldr.w	r2, [r6, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d9e2:	0691      	lsls	r1, r2, #26
   8d9e4:	f53f af50 	bmi.w	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d9e8:	e744      	b.n	8d874 <check_and_process_touch_on_vert_window_scroll_bar+0x290>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d9ea:	f8d6 22cc 	ldr.w	r2, [r6, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8d9ee:	0690      	lsls	r0, r2, #26
   8d9f0:	f53f af4a 	bmi.w	8d888 <check_and_process_touch_on_vert_window_scroll_bar+0x2a4>
   8d9f4:	e739      	b.n	8d86a <check_and_process_touch_on_vert_window_scroll_bar+0x286>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8d9f6:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8d9fa:	0699      	lsls	r1, r3, #26
   8d9fc:	f57f ae86 	bpl.w	8d70c <check_and_process_touch_on_vert_window_scroll_bar+0x128>
   8da00:	250c      	movs	r5, #12
   8da02:	e758      	b.n	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da04:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8da08:	f013 0020 	ands.w	r0, r3, #32
   8da0c:	bf18      	it	ne
   8da0e:	250d      	movne	r5, #13
   8da10:	f47f af51 	bne.w	8d8b6 <check_and_process_touch_on_vert_window_scroll_bar+0x2d2>
   8da14:	250e      	movs	r5, #14
   8da16:	e680      	b.n	8d71a <check_and_process_touch_on_vert_window_scroll_bar+0x136>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da18:	68f3      	ldr	r3, [r6, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8da1a:	069a      	lsls	r2, r3, #26
   8da1c:	f57f ae94 	bpl.w	8d748 <check_and_process_touch_on_vert_window_scroll_bar+0x164>
   8da20:	2500      	movs	r5, #0
   8da22:	2001      	movs	r0, #1
   8da24:	e6d2      	b.n	8d7cc <check_and_process_touch_on_vert_window_scroll_bar+0x1e8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da26:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8da28:	069b      	lsls	r3, r3, #26
   8da2a:	f57f ae91 	bpl.w	8d750 <check_and_process_touch_on_vert_window_scroll_bar+0x16c>
   8da2e:	2501      	movs	r5, #1
   8da30:	e7f7      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da32:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8da36:	069d      	lsls	r5, r3, #26
   8da38:	f57f ae94 	bpl.w	8d764 <check_and_process_touch_on_vert_window_scroll_bar+0x180>
   8da3c:	2503      	movs	r5, #3
   8da3e:	e7f0      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da40:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8da44:	069f      	lsls	r7, r3, #26
   8da46:	f57f ae88 	bpl.w	8d75a <check_and_process_touch_on_vert_window_scroll_bar+0x176>
   8da4a:	2502      	movs	r5, #2
   8da4c:	e7e9      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da4e:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8da52:	0699      	lsls	r1, r3, #26
   8da54:	f57f ae90 	bpl.w	8d778 <check_and_process_touch_on_vert_window_scroll_bar+0x194>
   8da58:	2505      	movs	r5, #5
   8da5a:	e7e2      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da5c:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8da60:	0698      	lsls	r0, r3, #26
   8da62:	f57f ae84 	bpl.w	8d76e <check_and_process_touch_on_vert_window_scroll_bar+0x18a>
   8da66:	2504      	movs	r5, #4
   8da68:	e7db      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da6a:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8da6e:	069b      	lsls	r3, r3, #26
   8da70:	f57f ae8c 	bpl.w	8d78c <check_and_process_touch_on_vert_window_scroll_bar+0x1a8>
   8da74:	2507      	movs	r5, #7
   8da76:	e7d4      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da78:	f8d6 318c 	ldr.w	r3, [r6, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8da7c:	069a      	lsls	r2, r3, #26
   8da7e:	f57f ae80 	bpl.w	8d782 <check_and_process_touch_on_vert_window_scroll_bar+0x19e>
   8da82:	2506      	movs	r5, #6
   8da84:	e7cd      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da86:	f8d6 324c 	ldr.w	r3, [r6, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8da8a:	069d      	lsls	r5, r3, #26
   8da8c:	f57f ae88 	bpl.w	8d7a0 <check_and_process_touch_on_vert_window_scroll_bar+0x1bc>
   8da90:	2509      	movs	r5, #9
   8da92:	e7c6      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8da94:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8da98:	069f      	lsls	r7, r3, #26
   8da9a:	f57f ae7c 	bpl.w	8d796 <check_and_process_touch_on_vert_window_scroll_bar+0x1b2>
   8da9e:	2508      	movs	r5, #8
   8daa0:	e7bf      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8daa2:	f8d6 32cc 	ldr.w	r3, [r6, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8daa6:	0699      	lsls	r1, r3, #26
   8daa8:	f57f ae84 	bpl.w	8d7b4 <check_and_process_touch_on_vert_window_scroll_bar+0x1d0>
   8daac:	250b      	movs	r5, #11
   8daae:	e7b8      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dab0:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8dab4:	0698      	lsls	r0, r3, #26
   8dab6:	f57f ae78 	bpl.w	8d7aa <check_and_process_touch_on_vert_window_scroll_bar+0x1c6>
   8daba:	250a      	movs	r5, #10
   8dabc:	e7b1      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dabe:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8dac2:	069a      	lsls	r2, r3, #26
   8dac4:	f57f ae7b 	bpl.w	8d7be <check_and_process_touch_on_vert_window_scroll_bar+0x1da>
   8dac8:	250c      	movs	r5, #12
   8daca:	e7aa      	b.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dacc:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8dad0:	f013 0020 	ands.w	r0, r3, #32
   8dad4:	bf18      	it	ne
   8dad6:	250d      	movne	r5, #13
   8dad8:	d1a3      	bne.n	8da22 <check_and_process_touch_on_vert_window_scroll_bar+0x43e>
   8dada:	250e      	movs	r5, #14
   8dadc:	e676      	b.n	8d7cc <check_and_process_touch_on_vert_window_scroll_bar+0x1e8>
   8dade:	bf00      	nop

0008dae0 <add_minimised_window_to_list>:
	if (window_handle == MW_INVALID_HANDLE)
   8dae0:	2800      	cmp	r0, #0
   8dae2:	d03d      	beq.n	8db60 <add_minimised_window_to_list+0x80>
		if (mw_all_windows[i].window_handle == window_handle &&
   8dae4:	4b74      	ldr	r3, [pc, #464]	; (8dcb8 <add_minimised_window_to_list+0x1d8>)
   8dae6:	695a      	ldr	r2, [r3, #20]
   8dae8:	4290      	cmp	r0, r2
   8daea:	d043      	beq.n	8db74 <add_minimised_window_to_list+0x94>
   8daec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   8daee:	4290      	cmp	r0, r2
   8daf0:	d04b      	beq.n	8db8a <add_minimised_window_to_list+0xaa>
   8daf2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   8daf6:	4290      	cmp	r0, r2
   8daf8:	d04c      	beq.n	8db94 <add_minimised_window_to_list+0xb4>
   8dafa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   8dafe:	4290      	cmp	r0, r2
   8db00:	d04e      	beq.n	8dba0 <add_minimised_window_to_list+0xc0>
   8db02:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   8db06:	4290      	cmp	r0, r2
   8db08:	d07c      	beq.n	8dc04 <add_minimised_window_to_list+0x124>
   8db0a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   8db0e:	4290      	cmp	r0, r2
   8db10:	d07f      	beq.n	8dc12 <add_minimised_window_to_list+0x132>
   8db12:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
   8db16:	4290      	cmp	r0, r2
   8db18:	f000 8082 	beq.w	8dc20 <add_minimised_window_to_list+0x140>
   8db1c:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
   8db20:	4290      	cmp	r0, r2
   8db22:	f000 8084 	beq.w	8dc2e <add_minimised_window_to_list+0x14e>
   8db26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   8db2a:	4290      	cmp	r0, r2
   8db2c:	f000 8086 	beq.w	8dc3c <add_minimised_window_to_list+0x15c>
   8db30:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
   8db34:	4290      	cmp	r0, r2
   8db36:	f000 8088 	beq.w	8dc4a <add_minimised_window_to_list+0x16a>
   8db3a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   8db3e:	4290      	cmp	r0, r2
   8db40:	f000 808a 	beq.w	8dc58 <add_minimised_window_to_list+0x178>
   8db44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
   8db48:	4290      	cmp	r0, r2
   8db4a:	f000 808c 	beq.w	8dc66 <add_minimised_window_to_list+0x186>
   8db4e:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
   8db52:	4290      	cmp	r0, r2
   8db54:	f000 808e 	beq.w	8dc74 <add_minimised_window_to_list+0x194>
   8db58:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   8db5c:	4290      	cmp	r0, r2
   8db5e:	d00e      	beq.n	8db7e <add_minimised_window_to_list+0x9e>
{
   8db60:	b410      	push	{r4}
		MW_ASSERT((bool)false, "Bad window handle");
   8db62:	4c56      	ldr	r4, [pc, #344]	; (8dcbc <add_minimised_window_to_list+0x1dc>)
   8db64:	4b56      	ldr	r3, [pc, #344]	; (8dcc0 <add_minimised_window_to_list+0x1e0>)
   8db66:	46a4      	mov	ip, r4
   8db68:	f44f 724e 	mov.w	r2, #824	; 0x338
   8db6c:	4955      	ldr	r1, [pc, #340]	; (8dcc4 <add_minimised_window_to_list+0x1e4>)
   8db6e:	2000      	movs	r0, #0
}
   8db70:	bc10      	pop	{r4}
		MW_ASSERT((bool)false, "Bad window handle");
   8db72:	4760      	bx	ip
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8db74:	68da      	ldr	r2, [r3, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8db76:	0691      	lsls	r1, r2, #26
   8db78:	d5b8      	bpl.n	8daec <add_minimised_window_to_list+0xc>
   8db7a:	2100      	movs	r1, #0
   8db7c:	e015      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8db7e:	f8d3 234c 	ldr.w	r2, [r3, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8db82:	0693      	lsls	r3, r2, #26
   8db84:	d5ec      	bpl.n	8db60 <add_minimised_window_to_list+0x80>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8db86:	210d      	movs	r1, #13
   8db88:	e00f      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8db8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8db8c:	0691      	lsls	r1, r2, #26
   8db8e:	d5b0      	bpl.n	8daf2 <add_minimised_window_to_list+0x12>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8db90:	2101      	movs	r1, #1
   8db92:	e00a      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8db94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8db98:	0691      	lsls	r1, r2, #26
   8db9a:	d5ae      	bpl.n	8dafa <add_minimised_window_to_list+0x1a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8db9c:	2102      	movs	r1, #2
   8db9e:	e004      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dba0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8dba4:	0691      	lsls	r1, r2, #26
   8dba6:	d5ac      	bpl.n	8db02 <add_minimised_window_to_list+0x22>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8dba8:	2103      	movs	r1, #3
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8dbaa:	f002 0228 	and.w	r2, r2, #40	; 0x28
   8dbae:	2a28      	cmp	r2, #40	; 0x28
   8dbb0:	d127      	bne.n	8dc02 <add_minimised_window_to_list+0x122>
			if (minimised_windows[i] == MW_ROOT_WINDOW_ID)
   8dbb2:	4b45      	ldr	r3, [pc, #276]	; (8dcc8 <add_minimised_window_to_list+0x1e8>)
   8dbb4:	785a      	ldrb	r2, [r3, #1]
   8dbb6:	2a00      	cmp	r2, #0
   8dbb8:	d063      	beq.n	8dc82 <add_minimised_window_to_list+0x1a2>
   8dbba:	789a      	ldrb	r2, [r3, #2]
   8dbbc:	2a00      	cmp	r2, #0
   8dbbe:	d063      	beq.n	8dc88 <add_minimised_window_to_list+0x1a8>
   8dbc0:	78da      	ldrb	r2, [r3, #3]
   8dbc2:	2a00      	cmp	r2, #0
   8dbc4:	d062      	beq.n	8dc8c <add_minimised_window_to_list+0x1ac>
   8dbc6:	791a      	ldrb	r2, [r3, #4]
   8dbc8:	2a00      	cmp	r2, #0
   8dbca:	d061      	beq.n	8dc90 <add_minimised_window_to_list+0x1b0>
   8dbcc:	795a      	ldrb	r2, [r3, #5]
   8dbce:	2a00      	cmp	r2, #0
   8dbd0:	d060      	beq.n	8dc94 <add_minimised_window_to_list+0x1b4>
   8dbd2:	799a      	ldrb	r2, [r3, #6]
   8dbd4:	2a00      	cmp	r2, #0
   8dbd6:	d05f      	beq.n	8dc98 <add_minimised_window_to_list+0x1b8>
   8dbd8:	79da      	ldrb	r2, [r3, #7]
   8dbda:	2a00      	cmp	r2, #0
   8dbdc:	d05e      	beq.n	8dc9c <add_minimised_window_to_list+0x1bc>
   8dbde:	7a1a      	ldrb	r2, [r3, #8]
   8dbe0:	2a00      	cmp	r2, #0
   8dbe2:	d05d      	beq.n	8dca0 <add_minimised_window_to_list+0x1c0>
   8dbe4:	7a5a      	ldrb	r2, [r3, #9]
   8dbe6:	2a00      	cmp	r2, #0
   8dbe8:	d05c      	beq.n	8dca4 <add_minimised_window_to_list+0x1c4>
   8dbea:	7a9a      	ldrb	r2, [r3, #10]
   8dbec:	2a00      	cmp	r2, #0
   8dbee:	d05b      	beq.n	8dca8 <add_minimised_window_to_list+0x1c8>
   8dbf0:	7ada      	ldrb	r2, [r3, #11]
   8dbf2:	2a00      	cmp	r2, #0
   8dbf4:	d05a      	beq.n	8dcac <add_minimised_window_to_list+0x1cc>
   8dbf6:	7b1a      	ldrb	r2, [r3, #12]
   8dbf8:	2a00      	cmp	r2, #0
   8dbfa:	d059      	beq.n	8dcb0 <add_minimised_window_to_list+0x1d0>
   8dbfc:	7b5a      	ldrb	r2, [r3, #13]
   8dbfe:	2a00      	cmp	r2, #0
   8dc00:	d058      	beq.n	8dcb4 <add_minimised_window_to_list+0x1d4>
   8dc02:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dc04:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8dc08:	0691      	lsls	r1, r2, #26
   8dc0a:	f57f af7e 	bpl.w	8db0a <add_minimised_window_to_list+0x2a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8dc0e:	2104      	movs	r1, #4
   8dc10:	e7cb      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dc12:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8dc16:	0691      	lsls	r1, r2, #26
   8dc18:	f57f af7b 	bpl.w	8db12 <add_minimised_window_to_list+0x32>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8dc1c:	2105      	movs	r1, #5
   8dc1e:	e7c4      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dc20:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8dc24:	0691      	lsls	r1, r2, #26
   8dc26:	f57f af79 	bpl.w	8db1c <add_minimised_window_to_list+0x3c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8dc2a:	2106      	movs	r1, #6
   8dc2c:	e7bd      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dc2e:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8dc32:	0691      	lsls	r1, r2, #26
   8dc34:	f57f af77 	bpl.w	8db26 <add_minimised_window_to_list+0x46>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8dc38:	2107      	movs	r1, #7
   8dc3a:	e7b6      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dc3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8dc40:	0691      	lsls	r1, r2, #26
   8dc42:	f57f af75 	bpl.w	8db30 <add_minimised_window_to_list+0x50>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8dc46:	2108      	movs	r1, #8
   8dc48:	e7af      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dc4a:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8dc4e:	0691      	lsls	r1, r2, #26
   8dc50:	f57f af73 	bpl.w	8db3a <add_minimised_window_to_list+0x5a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8dc54:	2109      	movs	r1, #9
   8dc56:	e7a8      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dc58:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8dc5c:	0691      	lsls	r1, r2, #26
   8dc5e:	f57f af71 	bpl.w	8db44 <add_minimised_window_to_list+0x64>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8dc62:	210a      	movs	r1, #10
   8dc64:	e7a1      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dc66:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8dc6a:	0691      	lsls	r1, r2, #26
   8dc6c:	f57f af6f 	bpl.w	8db4e <add_minimised_window_to_list+0x6e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8dc70:	210b      	movs	r1, #11
   8dc72:	e79a      	b.n	8dbaa <add_minimised_window_to_list+0xca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8dc74:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8dc78:	0691      	lsls	r1, r2, #26
   8dc7a:	f57f af6d 	bpl.w	8db58 <add_minimised_window_to_list+0x78>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8dc7e:	210c      	movs	r1, #12
   8dc80:	e793      	b.n	8dbaa <add_minimised_window_to_list+0xca>
			if (minimised_windows[i] == MW_ROOT_WINDOW_ID)
   8dc82:	2201      	movs	r2, #1
				minimised_windows[i] = window_id;
   8dc84:	5499      	strb	r1, [r3, r2]
				break;
   8dc86:	4770      	bx	lr
			if (minimised_windows[i] == MW_ROOT_WINDOW_ID)
   8dc88:	2202      	movs	r2, #2
   8dc8a:	e7fb      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dc8c:	2203      	movs	r2, #3
   8dc8e:	e7f9      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dc90:	2204      	movs	r2, #4
   8dc92:	e7f7      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dc94:	2205      	movs	r2, #5
   8dc96:	e7f5      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dc98:	2206      	movs	r2, #6
   8dc9a:	e7f3      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dc9c:	2207      	movs	r2, #7
   8dc9e:	e7f1      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dca0:	2208      	movs	r2, #8
   8dca2:	e7ef      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dca4:	2209      	movs	r2, #9
   8dca6:	e7ed      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dca8:	220a      	movs	r2, #10
   8dcaa:	e7eb      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dcac:	220b      	movs	r2, #11
   8dcae:	e7e9      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dcb0:	220c      	movs	r2, #12
   8dcb2:	e7e7      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dcb4:	220d      	movs	r2, #13
   8dcb6:	e7e5      	b.n	8dc84 <add_minimised_window_to_list+0x1a4>
   8dcb8:	20071bd8 	.word	0x20071bd8
   8dcbc:	00095add 	.word	0x00095add
   8dcc0:	000ab764 	.word	0x000ab764
   8dcc4:	000ab26c 	.word	0x000ab26c
   8dcc8:	20071848 	.word	0x20071848

0008dccc <mw_init>:
{
   8dccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	mw_hal_init();
   8dcd0:	4b7f      	ldr	r3, [pc, #508]	; (8ded0 <mw_init+0x204>)
{
   8dcd2:	b08d      	sub	sp, #52	; 0x34
	mw_hal_init();
   8dcd4:	4798      	blx	r3
	mw_gl_init();
   8dcd6:	4b7f      	ldr	r3, [pc, #508]	; (8ded4 <mw_init+0x208>)
   8dcd8:	4798      	blx	r3
	if (mw_hal_touch_is_recalibration_required())
   8dcda:	4b7f      	ldr	r3, [pc, #508]	; (8ded8 <mw_init+0x20c>)
   8dcdc:	4798      	blx	r3
   8dcde:	2800      	cmp	r0, #0
   8dce0:	f040 80f1 	bne.w	8dec6 <mw_init+0x1fa>
	mw_settings_load();
   8dce4:	4b7d      	ldr	r3, [pc, #500]	; (8dedc <mw_init+0x210>)
   8dce6:	4798      	blx	r3
	is_calibrated = mw_settings_is_calibrated();
   8dce8:	4b7d      	ldr	r3, [pc, #500]	; (8dee0 <mw_init+0x214>)
   8dcea:	4798      	blx	r3
	is_initialised = mw_settings_is_initialised();
   8dcec:	4b7d      	ldr	r3, [pc, #500]	; (8dee4 <mw_init+0x218>)
	is_calibrated = mw_settings_is_calibrated();
   8dcee:	4604      	mov	r4, r0
	is_initialised = mw_settings_is_initialised();
   8dcf0:	4798      	blx	r3
	if (!is_initialised || !is_calibrated)
   8dcf2:	2800      	cmp	r0, #0
   8dcf4:	f000 80d6 	beq.w	8dea4 <mw_init+0x1d8>
   8dcf8:	2c00      	cmp	r4, #0
   8dcfa:	f000 80d3 	beq.w	8dea4 <mw_init+0x1d8>
	draw_info_root.clip_rect.width = MW_ROOT_WIDTH;
   8dcfe:	4b7a      	ldr	r3, [pc, #488]	; (8dee8 <mw_init+0x21c>)
   8dd00:	4798      	blx	r3
   8dd02:	4e7a      	ldr	r6, [pc, #488]	; (8deec <mw_init+0x220>)
	draw_info_root.clip_rect.height = MW_ROOT_HEIGHT;
   8dd04:	4b7a      	ldr	r3, [pc, #488]	; (8def0 <mw_init+0x224>)
	draw_info_root.clip_rect.width = MW_ROOT_WIDTH;
   8dd06:	8130      	strh	r0, [r6, #8]
	draw_info_root.clip_rect.height = MW_ROOT_HEIGHT;
   8dd08:	4798      	blx	r3
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   8dd0a:	4d7a      	ldr	r5, [pc, #488]	; (8def4 <mw_init+0x228>)
	draw_info_root.clip_rect.height = MW_ROOT_HEIGHT;
   8dd0c:	8170      	strh	r0, [r6, #10]
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   8dd0e:	4b7a      	ldr	r3, [pc, #488]	; (8def8 <mw_init+0x22c>)
   8dd10:	f44f 72a8 	mov.w	r2, #336	; 0x150
   8dd14:	4979      	ldr	r1, [pc, #484]	; (8defc <mw_init+0x230>)
   8dd16:	2001      	movs	r0, #1
   8dd18:	47a8      	blx	r5
	MW_ASSERT(title != (void*)0, "Null pointer argument");
   8dd1a:	4b77      	ldr	r3, [pc, #476]	; (8def8 <mw_init+0x22c>)
   8dd1c:	f240 1251 	movw	r2, #337	; 0x151
   8dd20:	4976      	ldr	r1, [pc, #472]	; (8defc <mw_init+0x230>)
   8dd22:	2001      	movs	r0, #1
   8dd24:	47a8      	blx	r5
	MW_ASSERT(paint_func != (void*)0, "Null pointer argument");
   8dd26:	4b74      	ldr	r3, [pc, #464]	; (8def8 <mw_init+0x22c>)
   8dd28:	f44f 72a9 	mov.w	r2, #338	; 0x152
   8dd2c:	4973      	ldr	r1, [pc, #460]	; (8defc <mw_init+0x230>)
   8dd2e:	2001      	movs	r0, #1
   8dd30:	47a8      	blx	r5
	MW_ASSERT(message_func != (void*)0, "Null pointer argument");
   8dd32:	4b71      	ldr	r3, [pc, #452]	; (8def8 <mw_init+0x22c>)
   8dd34:	f240 1253 	movw	r2, #339	; 0x153
   8dd38:	4970      	ldr	r1, [pc, #448]	; (8defc <mw_init+0x230>)
   8dd3a:	2001      	movs	r0, #1
	(void)mw_util_safe_strcpy(mw_all_windows[window_id].title, MW_MAX_TITLE_SIZE, title);
   8dd3c:	4c70      	ldr	r4, [pc, #448]	; (8df00 <mw_init+0x234>)
	MW_ASSERT(message_func != (void*)0, "Null pointer argument");
   8dd3e:	47a8      	blx	r5
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8dd40:	4b70      	ldr	r3, [pc, #448]	; (8df04 <mw_init+0x238>)
   8dd42:	f44f 72aa 	mov.w	r2, #340	; 0x154
   8dd46:	496d      	ldr	r1, [pc, #436]	; (8defc <mw_init+0x230>)
   8dd48:	2001      	movs	r0, #1
   8dd4a:	47a8      	blx	r5
	MW_ASSERT(window_handle != MW_INVALID_HANDLE, "Illegal handle");
   8dd4c:	4b6e      	ldr	r3, [pc, #440]	; (8df08 <mw_init+0x23c>)
   8dd4e:	f240 1255 	movw	r2, #341	; 0x155
   8dd52:	496a      	ldr	r1, [pc, #424]	; (8defc <mw_init+0x230>)
   8dd54:	2001      	movs	r0, #1
   8dd56:	47a8      	blx	r5
	(void)mw_util_safe_strcpy(mw_all_windows[window_id].title, MW_MAX_TITLE_SIZE, title);
   8dd58:	4a6c      	ldr	r2, [pc, #432]	; (8df0c <mw_init+0x240>)
   8dd5a:	210e      	movs	r1, #14
   8dd5c:	4b6c      	ldr	r3, [pc, #432]	; (8df10 <mw_init+0x244>)
   8dd5e:	f104 0031 	add.w	r0, r4, #49	; 0x31
   8dd62:	4798      	blx	r3
	mw_all_windows[window_id].menu_bar_items = menu_bar_items;
   8dd64:	f04f 0800 	mov.w	r8, #0
	mw_all_windows[window_id].window_handle = window_handle;
   8dd68:	2301      	movs	r3, #1
	mw_all_windows[window_id].menu_bar_item_enables = MW_ALL_ITEMS_ENABLED;
   8dd6a:	f64f 7eff 	movw	lr, #65535	; 0xffff
	mw_all_windows[window_id].window_flags = window_flags | MW_WINDOW_FLAG_IS_USED;
   8dd6e:	2028      	movs	r0, #40	; 0x28
		mw_all_windows[window_id].title_bar_height = MW_TITLE_BAR_HEIGHT;
   8dd70:	2712      	movs	r7, #18
	mw_all_windows[window_id].paint_func = paint_func;
   8dd72:	4a68      	ldr	r2, [pc, #416]	; (8df14 <mw_init+0x248>)
	calculate_new_window_size_details(window_handle, rect);
   8dd74:	1d31      	adds	r1, r6, #4
	mw_all_windows[window_id].paint_func = paint_func;
   8dd76:	6062      	str	r2, [r4, #4]
	mw_all_windows[window_id].message_func = message_func;
   8dd78:	4a67      	ldr	r2, [pc, #412]	; (8df18 <mw_init+0x24c>)
	mw_all_windows[window_id].window_flags = window_flags | MW_WINDOW_FLAG_IS_USED;
   8dd7a:	60e0      	str	r0, [r4, #12]
	mw_all_windows[window_id].message_func = message_func;
   8dd7c:	60a2      	str	r2, [r4, #8]
	calculate_new_window_size_details(window_handle, rect);
   8dd7e:	4618      	mov	r0, r3
   8dd80:	4a66      	ldr	r2, [pc, #408]	; (8df1c <mw_init+0x250>)
	mw_all_windows[window_id].menu_bar_item_enables = MW_ALL_ITEMS_ENABLED;
   8dd82:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
		mw_all_windows[window_id].title_bar_height = MW_TITLE_BAR_HEIGHT;
   8dd86:	8567      	strh	r7, [r4, #42]	; 0x2a
	mw_all_windows[window_id].menu_bar_items = menu_bar_items;
   8dd88:	f8c4 8000 	str.w	r8, [r4]
	mw_all_windows[window_id].menu_bar_items_count = menu_bar_items_count;
   8dd8c:	f884 802f 	strb.w	r8, [r4, #47]	; 0x2f
	mw_all_windows[window_id].horiz_scroll_pos = 0U;
   8dd90:	f884 802d 	strb.w	r8, [r4, #45]	; 0x2d
	mw_all_windows[window_id].vert_scroll_pos = 0U;
   8dd94:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
	mw_all_windows[window_id].instance_data = instance_data;
   8dd98:	f8c4 8010 	str.w	r8, [r4, #16]
	mw_all_windows[window_id].window_handle = window_handle;
   8dd9c:	6163      	str	r3, [r4, #20]
	calculate_new_window_size_details(window_handle, rect);
   8dd9e:	4790      	blx	r2
	window_redimensioning_state = WINDOW_NOT_BEING_REDIMENSIONED;
   8dda0:	f04f 0e02 	mov.w	lr, #2
	   mw_all_windows[i].window_flags &= ~MW_WINDOW_FLAG_IS_USED;
   8dda4:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   8dda6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   8ddaa:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8ddae:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
   8ddb2:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
   8ddb6:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   8ddba:	f027 0720 	bic.w	r7, r7, #32
   8ddbe:	f020 0020 	bic.w	r0, r0, #32
   8ddc2:	f026 0620 	bic.w	r6, r6, #32
   8ddc6:	f023 0920 	bic.w	r9, r3, #32
   8ddca:	64e7      	str	r7, [r4, #76]	; 0x4c
   8ddcc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   8ddd0:	f8d4 720c 	ldr.w	r7, [r4, #524]	; 0x20c
   8ddd4:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
   8ddd8:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
   8dddc:	f021 0120 	bic.w	r1, r1, #32
   8dde0:	f022 0220 	bic.w	r2, r2, #32
   8dde4:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
   8dde8:	f8d4 624c 	ldr.w	r6, [r4, #588]	; 0x24c
   8ddec:	f023 0c20 	bic.w	ip, r3, #32
   8ddf0:	f027 0720 	bic.w	r7, r7, #32
   8ddf4:	f020 0020 	bic.w	r0, r0, #32
   8ddf8:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
   8ddfc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
   8de00:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
   8de04:	f8d4 12cc 	ldr.w	r1, [r4, #716]	; 0x2cc
   8de08:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
	mw_all_windows[MW_ROOT_WINDOW_ID].z_order = MW_ROOT_Z_ORDER;
   8de0c:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
	   mw_all_windows[i].window_flags &= ~MW_WINDOW_FLAG_IS_USED;
   8de10:	f8c4 720c 	str.w	r7, [r4, #524]	; 0x20c
   8de14:	f026 0820 	bic.w	r8, r6, #32
	window_with_focus_handle = mw_all_windows[MW_ROOT_WINDOW_ID].window_handle;
   8de18:	4f41      	ldr	r7, [pc, #260]	; (8df20 <mw_init+0x254>)
   8de1a:	6966      	ldr	r6, [r4, #20]
	   mw_all_windows[i].window_flags &= ~MW_WINDOW_FLAG_IS_USED;
   8de1c:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	window_redimensioning_state = WINDOW_NOT_BEING_REDIMENSIONED;
   8de20:	4840      	ldr	r0, [pc, #256]	; (8df24 <mw_init+0x258>)
	   mw_all_windows[i].window_flags &= ~MW_WINDOW_FLAG_IS_USED;
   8de22:	f021 0120 	bic.w	r1, r1, #32
   8de26:	f022 0220 	bic.w	r2, r2, #32
   8de2a:	f023 0320 	bic.w	r3, r3, #32
   8de2e:	f8c4 918c 	str.w	r9, [r4, #396]	; 0x18c
   8de32:	f8c4 c1cc 	str.w	ip, [r4, #460]	; 0x1cc
   8de36:	f8c4 824c 	str.w	r8, [r4, #588]	; 0x24c
   8de3a:	f8c4 12cc 	str.w	r1, [r4, #716]	; 0x2cc
   8de3e:	f8c4 230c 	str.w	r2, [r4, #780]	; 0x30c
   8de42:	f8c4 334c 	str.w	r3, [r4, #844]	; 0x34c
	window_with_focus_handle = mw_all_windows[MW_ROOT_WINDOW_ID].window_handle;
   8de46:	603e      	str	r6, [r7, #0]
	window_redimensioning_state = WINDOW_NOT_BEING_REDIMENSIONED;
   8de48:	f880 e000 	strb.w	lr, [r0]
	if (window_handle == MW_INVALID_HANDLE)
   8de4c:	2e00      	cmp	r6, #0
   8de4e:	d037      	beq.n	8dec0 <mw_init+0x1f4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8de50:	68e3      	ldr	r3, [r4, #12]
   8de52:	f003 0320 	and.w	r3, r3, #32
		if (mw_all_windows[i].window_handle == window_handle &&
   8de56:	2b00      	cmp	r3, #0
   8de58:	bf0b      	itete	eq
   8de5a:	270e      	moveq	r7, #14
   8de5c:	2700      	movne	r7, #0
   8de5e:	2000      	moveq	r0, #0
   8de60:	2001      	movne	r0, #1
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8de62:	4b28      	ldr	r3, [pc, #160]	; (8df04 <mw_init+0x238>)
   8de64:	f241 5262 	movw	r2, #5474	; 0x1562
   8de68:	492f      	ldr	r1, [pc, #188]	; (8df28 <mw_init+0x25c>)
   8de6a:	47a8      	blx	r5
	new_message.message_id = message_id;
   8de6c:	2300      	movs	r3, #0
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8de6e:	eb04 1487 	add.w	r4, r4, r7, lsl #6
   8de72:	68e2      	ldr	r2, [r4, #12]
	new_message.message_id = message_id;
   8de74:	f88d 3008 	strb.w	r3, [sp, #8]
	new_message.message_data = message_data;
   8de78:	9303      	str	r3, [sp, #12]
	new_message.message_recipient_type = recipient_type;
   8de7a:	f88d 3009 	strb.w	r3, [sp, #9]
	new_message.sender_handle = sender_handle;
   8de7e:	9300      	str	r3, [sp, #0]
	new_message.message_pointer = message_pointer;
   8de80:	9304      	str	r3, [sp, #16]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8de82:	0693      	lsls	r3, r2, #26
	new_message.recipient_handle = recipient_handle;
   8de84:	9601      	str	r6, [sp, #4]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8de86:	d502      	bpl.n	8de8e <mw_init+0x1c2>
		(void)mw_message_queue_insert(&new_message);
   8de88:	4668      	mov	r0, sp
   8de8a:	4b28      	ldr	r3, [pc, #160]	; (8df2c <mw_init+0x260>)
   8de8c:	4798      	blx	r3
	in_client_window_paint_function = false;
   8de8e:	2100      	movs	r1, #0
   8de90:	4a27      	ldr	r2, [pc, #156]	; (8df30 <mw_init+0x264>)
	mw_user_init();
   8de92:	4b28      	ldr	r3, [pc, #160]	; (8df34 <mw_init+0x268>)
	in_client_window_paint_function = false;
   8de94:	7011      	strb	r1, [r2, #0]
	mw_user_init();
   8de96:	4798      	blx	r3
	init_complete = true;
   8de98:	2201      	movs	r2, #1
   8de9a:	4b27      	ldr	r3, [pc, #156]	; (8df38 <mw_init+0x26c>)
   8de9c:	701a      	strb	r2, [r3, #0]
}
   8de9e:	b00d      	add	sp, #52	; 0x34
   8dea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		mw_touch_calibrate(&calibration_matrix);
   8dea4:	a805      	add	r0, sp, #20
   8dea6:	4b25      	ldr	r3, [pc, #148]	; (8df3c <mw_init+0x270>)
   8dea8:	4798      	blx	r3
		mw_settings_set_to_defaults();
   8deaa:	4b25      	ldr	r3, [pc, #148]	; (8df40 <mw_init+0x274>)
   8deac:	4798      	blx	r3
		mw_settings_set_calibration_matrix(&calibration_matrix);
   8deae:	a805      	add	r0, sp, #20
   8deb0:	4b24      	ldr	r3, [pc, #144]	; (8df44 <mw_init+0x278>)
   8deb2:	4798      	blx	r3
		mw_settings_set_calibrated(true);
   8deb4:	2001      	movs	r0, #1
   8deb6:	4b24      	ldr	r3, [pc, #144]	; (8df48 <mw_init+0x27c>)
   8deb8:	4798      	blx	r3
		mw_settings_save();
   8deba:	4b24      	ldr	r3, [pc, #144]	; (8df4c <mw_init+0x280>)
   8debc:	4798      	blx	r3
   8debe:	e71e      	b.n	8dcfe <mw_init+0x32>
	if (window_handle == MW_INVALID_HANDLE)
   8dec0:	270e      	movs	r7, #14
   8dec2:	4630      	mov	r0, r6
   8dec4:	e7cd      	b.n	8de62 <mw_init+0x196>
		mw_settings_set_to_defaults();
   8dec6:	4b1e      	ldr	r3, [pc, #120]	; (8df40 <mw_init+0x274>)
   8dec8:	4798      	blx	r3
    	mw_settings_save();
   8deca:	4b20      	ldr	r3, [pc, #128]	; (8df4c <mw_init+0x280>)
   8decc:	4798      	blx	r3
   8dece:	e709      	b.n	8dce4 <mw_init+0x18>
   8ded0:	00087c29 	.word	0x00087c29
   8ded4:	00084679 	.word	0x00084679
   8ded8:	00087965 	.word	0x00087965
   8dedc:	00095d09 	.word	0x00095d09
   8dee0:	00095d55 	.word	0x00095d55
   8dee4:	00095d29 	.word	0x00095d29
   8dee8:	00086e2d 	.word	0x00086e2d
   8deec:	20071800 	.word	0x20071800
   8def0:	00086e31 	.word	0x00086e31
   8def4:	00095add 	.word	0x00095add
   8def8:	000a6618 	.word	0x000a6618
   8defc:	000ab1b4 	.word	0x000ab1b4
   8df00:	20071bd8 	.word	0x20071bd8
   8df04:	000ab764 	.word	0x000ab764
   8df08:	000ab8a0 	.word	0x000ab8a0
   8df0c:	000a6c00 	.word	0x000a6c00
   8df10:	00096f31 	.word	0x00096f31
   8df14:	00087dd5 	.word	0x00087dd5
   8df18:	0008e3ed 	.word	0x0008e3ed
   8df1c:	00088621 	.word	0x00088621
   8df20:	20071fb4 	.word	0x20071fb4
   8df24:	20071fb1 	.word	0x20071fb1
   8df28:	000ab710 	.word	0x000ab710
   8df2c:	00095bc1 	.word	0x00095bc1
   8df30:	20071844 	.word	0x20071844
   8df34:	00080221 	.word	0x00080221
   8df38:	20071845 	.word	0x20071845
   8df3c:	00095f35 	.word	0x00095f35
   8df40:	00095d41 	.word	0x00095d41
   8df44:	00095d75 	.word	0x00095d75
   8df48:	00095d61 	.word	0x00095d61
   8df4c:	00095d19 	.word	0x00095d19

0008df50 <get_next_handle>:
	next_handle++;
   8df50:	4b02      	ldr	r3, [pc, #8]	; (8df5c <get_next_handle+0xc>)
   8df52:	6818      	ldr	r0, [r3, #0]
   8df54:	3001      	adds	r0, #1
   8df56:	6018      	str	r0, [r3, #0]
}
   8df58:	4770      	bx	lr
   8df5a:	bf00      	nop
   8df5c:	2007023c 	.word	0x2007023c

0008df60 <mw_find_if_any_window_slots_free>:
	    if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U)
   8df60:	4b1c      	ldr	r3, [pc, #112]	; (8dfd4 <mw_find_if_any_window_slots_free+0x74>)
   8df62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   8df64:	0690      	lsls	r0, r2, #26
   8df66:	d532      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8df68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   8df6c:	0691      	lsls	r1, r2, #26
   8df6e:	d52e      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8df70:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   8df74:	0692      	lsls	r2, r2, #26
   8df76:	d52a      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8df78:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   8df7c:	0690      	lsls	r0, r2, #26
   8df7e:	d526      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8df80:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
   8df84:	0691      	lsls	r1, r2, #26
   8df86:	d522      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8df88:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
   8df8c:	0692      	lsls	r2, r2, #26
   8df8e:	d51e      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8df90:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
   8df94:	0690      	lsls	r0, r2, #26
   8df96:	d51a      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8df98:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
   8df9c:	0691      	lsls	r1, r2, #26
   8df9e:	d516      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8dfa0:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
   8dfa4:	0692      	lsls	r2, r2, #26
   8dfa6:	d512      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8dfa8:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
   8dfac:	0690      	lsls	r0, r2, #26
   8dfae:	d50e      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8dfb0:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
   8dfb4:	0691      	lsls	r1, r2, #26
   8dfb6:	d50a      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8dfb8:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   8dfbc:	0692      	lsls	r2, r2, #26
   8dfbe:	d506      	bpl.n	8dfce <mw_find_if_any_window_slots_free+0x6e>
   8dfc0:	f8d3 034c 	ldr.w	r0, [r3, #844]	; 0x34c
   8dfc4:	f080 0020 	eor.w	r0, r0, #32
   8dfc8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   8dfcc:	4770      	bx	lr
   8dfce:	2001      	movs	r0, #1
}
   8dfd0:	4770      	bx	lr
   8dfd2:	bf00      	nop
   8dfd4:	20071bd8 	.word	0x20071bd8

0008dfd8 <mw_is_window_handle_valid>:
	if (window_handle == MW_INVALID_HANDLE)
   8dfd8:	b3d0      	cbz	r0, 8e050 <mw_is_window_handle_valid+0x78>
		if (mw_all_windows[i].window_handle == window_handle)
   8dfda:	4b1e      	ldr	r3, [pc, #120]	; (8e054 <mw_is_window_handle_valid+0x7c>)
   8dfdc:	695a      	ldr	r2, [r3, #20]
   8dfde:	4290      	cmp	r0, r2
   8dfe0:	d035      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8dfe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   8dfe4:	4290      	cmp	r0, r2
   8dfe6:	d032      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8dfe8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   8dfec:	4290      	cmp	r0, r2
   8dfee:	d02e      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8dff0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   8dff4:	4290      	cmp	r0, r2
   8dff6:	d02a      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8dff8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   8dffc:	4290      	cmp	r0, r2
   8dffe:	d026      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8e000:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   8e004:	4290      	cmp	r0, r2
   8e006:	d022      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8e008:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
   8e00c:	4290      	cmp	r0, r2
   8e00e:	d01e      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8e010:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
   8e014:	4290      	cmp	r0, r2
   8e016:	d01a      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8e018:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   8e01c:	4290      	cmp	r0, r2
   8e01e:	d016      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8e020:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
   8e024:	4290      	cmp	r0, r2
   8e026:	d012      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8e028:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   8e02c:	4290      	cmp	r0, r2
   8e02e:	d00e      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8e030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
   8e034:	4290      	cmp	r0, r2
   8e036:	d00a      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8e038:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
   8e03c:	4290      	cmp	r0, r2
   8e03e:	d006      	beq.n	8e04e <mw_is_window_handle_valid+0x76>
   8e040:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
   8e044:	1a18      	subs	r0, r3, r0
   8e046:	fab0 f080 	clz	r0, r0
   8e04a:	0940      	lsrs	r0, r0, #5
   8e04c:	4770      	bx	lr
			return (true);
   8e04e:	2001      	movs	r0, #1
}
   8e050:	4770      	bx	lr
   8e052:	bf00      	nop
   8e054:	20071bd8 	.word	0x20071bd8

0008e058 <mw_bring_window_to_front>:
{
   8e058:	b410      	push	{r4}
	if (window_handle == MW_INVALID_HANDLE)
   8e05a:	b940      	cbnz	r0, 8e06e <mw_bring_window_to_front+0x16>
		MW_ASSERT((bool)false, "Bad window handle");
   8e05c:	4cca      	ldr	r4, [pc, #808]	; (8e388 <mw_bring_window_to_front+0x330>)
   8e05e:	4bcb      	ldr	r3, [pc, #812]	; (8e38c <mw_bring_window_to_front+0x334>)
   8e060:	46a4      	mov	ip, r4
   8e062:	f241 02fe 	movw	r2, #4350	; 0x10fe
   8e066:	49ca      	ldr	r1, [pc, #808]	; (8e390 <mw_bring_window_to_front+0x338>)
   8e068:	2000      	movs	r0, #0
}
   8e06a:	bc10      	pop	{r4}
		MW_ASSERT((bool)false, "Bad window handle");
   8e06c:	4760      	bx	ip
		if (mw_all_windows[i].window_handle == window_handle &&
   8e06e:	4bc9      	ldr	r3, [pc, #804]	; (8e394 <mw_bring_window_to_front+0x33c>)
   8e070:	695a      	ldr	r2, [r3, #20]
   8e072:	4290      	cmp	r0, r2
   8e074:	d03f      	beq.n	8e0f6 <mw_bring_window_to_front+0x9e>
   8e076:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   8e078:	4290      	cmp	r0, r2
   8e07a:	d042      	beq.n	8e102 <mw_bring_window_to_front+0xaa>
   8e07c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   8e080:	4290      	cmp	r0, r2
   8e082:	d044      	beq.n	8e10e <mw_bring_window_to_front+0xb6>
   8e084:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   8e088:	4290      	cmp	r0, r2
   8e08a:	d047      	beq.n	8e11c <mw_bring_window_to_front+0xc4>
   8e08c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   8e090:	4290      	cmp	r0, r2
   8e092:	d04a      	beq.n	8e12a <mw_bring_window_to_front+0xd2>
   8e094:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   8e098:	4290      	cmp	r0, r2
   8e09a:	d04d      	beq.n	8e138 <mw_bring_window_to_front+0xe0>
   8e09c:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
   8e0a0:	4290      	cmp	r0, r2
   8e0a2:	d050      	beq.n	8e146 <mw_bring_window_to_front+0xee>
   8e0a4:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
   8e0a8:	4290      	cmp	r0, r2
   8e0aa:	f000 815c 	beq.w	8e366 <mw_bring_window_to_front+0x30e>
   8e0ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   8e0b2:	4290      	cmp	r0, r2
   8e0b4:	f000 815f 	beq.w	8e376 <mw_bring_window_to_front+0x31e>
   8e0b8:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
   8e0bc:	4290      	cmp	r0, r2
   8e0be:	f000 816d 	beq.w	8e39c <mw_bring_window_to_front+0x344>
   8e0c2:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   8e0c6:	4290      	cmp	r0, r2
   8e0c8:	f000 8170 	beq.w	8e3ac <mw_bring_window_to_front+0x354>
   8e0cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
   8e0d0:	4290      	cmp	r0, r2
   8e0d2:	f000 8173 	beq.w	8e3bc <mw_bring_window_to_front+0x364>
   8e0d6:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
   8e0da:	4290      	cmp	r0, r2
   8e0dc:	f000 8176 	beq.w	8e3cc <mw_bring_window_to_front+0x374>
   8e0e0:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   8e0e4:	4290      	cmp	r0, r2
   8e0e6:	d1b9      	bne.n	8e05c <mw_bring_window_to_front+0x4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e0e8:	f8d3 234c 	ldr.w	r2, [r3, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e0ec:	0691      	lsls	r1, r2, #26
   8e0ee:	d5b5      	bpl.n	8e05c <mw_bring_window_to_front+0x4>
   8e0f0:	210d      	movs	r1, #13
   8e0f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e0f4:	e02d      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e0f6:	68da      	ldr	r2, [r3, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8e0f8:	0694      	lsls	r4, r2, #26
   8e0fa:	d4af      	bmi.n	8e05c <mw_bring_window_to_front+0x4>
   8e0fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   8e0fe:	4290      	cmp	r0, r2
   8e100:	d1bc      	bne.n	8e07c <mw_bring_window_to_front+0x24>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e104:	0691      	lsls	r1, r2, #26
   8e106:	d5b9      	bpl.n	8e07c <mw_bring_window_to_front+0x24>
   8e108:	2101      	movs	r1, #1
   8e10a:	4610      	mov	r0, r2
   8e10c:	e021      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e10e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e112:	0694      	lsls	r4, r2, #26
   8e114:	d5b6      	bpl.n	8e084 <mw_bring_window_to_front+0x2c>
   8e116:	2102      	movs	r1, #2
   8e118:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e11a:	e01a      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e11c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8e120:	0691      	lsls	r1, r2, #26
   8e122:	d5b3      	bpl.n	8e08c <mw_bring_window_to_front+0x34>
   8e124:	2103      	movs	r1, #3
   8e126:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e128:	e013      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e12a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e12e:	0694      	lsls	r4, r2, #26
   8e130:	d5b0      	bpl.n	8e094 <mw_bring_window_to_front+0x3c>
   8e132:	2104      	movs	r1, #4
   8e134:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e136:	e00c      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e138:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e13c:	0691      	lsls	r1, r2, #26
   8e13e:	d5ad      	bpl.n	8e09c <mw_bring_window_to_front+0x44>
   8e140:	2105      	movs	r1, #5
   8e142:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e144:	e005      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e146:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e14a:	0694      	lsls	r4, r2, #26
   8e14c:	d5aa      	bpl.n	8e0a4 <mw_bring_window_to_front+0x4c>
   8e14e:	2106      	movs	r1, #6
   8e150:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_MODAL) == MW_WINDOW_FLAG_IS_MODAL &&
   8e152:	f000 0460 	and.w	r4, r0, #96	; 0x60
   8e156:	2c60      	cmp	r4, #96	; 0x60
   8e158:	f000 8142 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e15c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   8e160:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e164:	2c60      	cmp	r4, #96	; 0x60
   8e166:	f000 813b 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e16a:	f8d3 40cc 	ldr.w	r4, [r3, #204]	; 0xcc
   8e16e:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e172:	2c60      	cmp	r4, #96	; 0x60
   8e174:	f000 8134 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e178:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
   8e17c:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e180:	2c60      	cmp	r4, #96	; 0x60
   8e182:	f000 812d 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e186:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   8e18a:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e18e:	2c60      	cmp	r4, #96	; 0x60
   8e190:	f000 8126 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e194:	f8d3 418c 	ldr.w	r4, [r3, #396]	; 0x18c
   8e198:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e19c:	2c60      	cmp	r4, #96	; 0x60
   8e19e:	f000 811f 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e1a2:	f8d3 41cc 	ldr.w	r4, [r3, #460]	; 0x1cc
   8e1a6:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e1aa:	2c60      	cmp	r4, #96	; 0x60
   8e1ac:	f000 8118 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e1b0:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
   8e1b4:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e1b8:	2c60      	cmp	r4, #96	; 0x60
   8e1ba:	f000 8111 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e1be:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
   8e1c2:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e1c6:	2c60      	cmp	r4, #96	; 0x60
   8e1c8:	f000 810a 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e1cc:	f8d3 428c 	ldr.w	r4, [r3, #652]	; 0x28c
   8e1d0:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e1d4:	2c60      	cmp	r4, #96	; 0x60
   8e1d6:	f000 8103 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e1da:	f8d3 42cc 	ldr.w	r4, [r3, #716]	; 0x2cc
   8e1de:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e1e2:	2c60      	cmp	r4, #96	; 0x60
   8e1e4:	f000 80fc 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e1e8:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
   8e1ec:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e1f0:	2c60      	cmp	r4, #96	; 0x60
   8e1f2:	f000 80f5 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
   8e1f6:	f8d3 434c 	ldr.w	r4, [r3, #844]	; 0x34c
   8e1fa:	f004 0460 	and.w	r4, r4, #96	; 0x60
   8e1fe:	2c60      	cmp	r4, #96	; 0x60
   8e200:	f000 80ee 	beq.w	8e3e0 <mw_bring_window_to_front+0x388>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e204:	f000 0228 	and.w	r2, r0, #40	; 0x28
   8e208:	2a28      	cmp	r2, #40	; 0x28
   8e20a:	f040 80e7 	bne.w	8e3dc <mw_bring_window_to_front+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e20e:	06c2      	lsls	r2, r0, #27
   8e210:	f100 80e4 	bmi.w	8e3dc <mw_bring_window_to_front+0x384>
   8e214:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
   8e218:	2a00      	cmp	r2, #0
   8e21a:	bf38      	it	cc
   8e21c:	2200      	movcc	r2, #0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e21e:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
   8e222:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e226:	2c28      	cmp	r4, #40	; 0x28
   8e228:	d106      	bne.n	8e238 <mw_bring_window_to_front+0x1e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e22a:	06c4      	lsls	r4, r0, #27
   8e22c:	d404      	bmi.n	8e238 <mw_bring_window_to_front+0x1e0>
   8e22e:	f893 00ac 	ldrb.w	r0, [r3, #172]	; 0xac
   8e232:	4282      	cmp	r2, r0
   8e234:	bf38      	it	cc
   8e236:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e238:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
   8e23c:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e240:	2c28      	cmp	r4, #40	; 0x28
   8e242:	d106      	bne.n	8e252 <mw_bring_window_to_front+0x1fa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e244:	06c0      	lsls	r0, r0, #27
   8e246:	d404      	bmi.n	8e252 <mw_bring_window_to_front+0x1fa>
   8e248:	f893 00ec 	ldrb.w	r0, [r3, #236]	; 0xec
   8e24c:	4282      	cmp	r2, r0
   8e24e:	bf38      	it	cc
   8e250:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e252:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
   8e256:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e25a:	2c28      	cmp	r4, #40	; 0x28
   8e25c:	d106      	bne.n	8e26c <mw_bring_window_to_front+0x214>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e25e:	06c4      	lsls	r4, r0, #27
   8e260:	d404      	bmi.n	8e26c <mw_bring_window_to_front+0x214>
   8e262:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
   8e266:	4282      	cmp	r2, r0
   8e268:	bf38      	it	cc
   8e26a:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e26c:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   8e270:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e274:	2c28      	cmp	r4, #40	; 0x28
   8e276:	d106      	bne.n	8e286 <mw_bring_window_to_front+0x22e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e278:	06c0      	lsls	r0, r0, #27
   8e27a:	d404      	bmi.n	8e286 <mw_bring_window_to_front+0x22e>
   8e27c:	f893 016c 	ldrb.w	r0, [r3, #364]	; 0x16c
   8e280:	4282      	cmp	r2, r0
   8e282:	bf38      	it	cc
   8e284:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e286:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8e28a:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e28e:	2c28      	cmp	r4, #40	; 0x28
   8e290:	d106      	bne.n	8e2a0 <mw_bring_window_to_front+0x248>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e292:	06c4      	lsls	r4, r0, #27
   8e294:	d404      	bmi.n	8e2a0 <mw_bring_window_to_front+0x248>
   8e296:	f893 01ac 	ldrb.w	r0, [r3, #428]	; 0x1ac
   8e29a:	4282      	cmp	r2, r0
   8e29c:	bf38      	it	cc
   8e29e:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e2a0:	f8d3 01cc 	ldr.w	r0, [r3, #460]	; 0x1cc
   8e2a4:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e2a8:	2c28      	cmp	r4, #40	; 0x28
   8e2aa:	d106      	bne.n	8e2ba <mw_bring_window_to_front+0x262>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e2ac:	06c0      	lsls	r0, r0, #27
   8e2ae:	d404      	bmi.n	8e2ba <mw_bring_window_to_front+0x262>
   8e2b0:	f893 01ec 	ldrb.w	r0, [r3, #492]	; 0x1ec
   8e2b4:	4282      	cmp	r2, r0
   8e2b6:	bf38      	it	cc
   8e2b8:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e2ba:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
   8e2be:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e2c2:	2c28      	cmp	r4, #40	; 0x28
   8e2c4:	d106      	bne.n	8e2d4 <mw_bring_window_to_front+0x27c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e2c6:	06c4      	lsls	r4, r0, #27
   8e2c8:	d404      	bmi.n	8e2d4 <mw_bring_window_to_front+0x27c>
   8e2ca:	f893 022c 	ldrb.w	r0, [r3, #556]	; 0x22c
   8e2ce:	4282      	cmp	r2, r0
   8e2d0:	bf38      	it	cc
   8e2d2:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e2d4:	f8d3 024c 	ldr.w	r0, [r3, #588]	; 0x24c
   8e2d8:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e2dc:	2c28      	cmp	r4, #40	; 0x28
   8e2de:	d106      	bne.n	8e2ee <mw_bring_window_to_front+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e2e0:	06c0      	lsls	r0, r0, #27
   8e2e2:	d404      	bmi.n	8e2ee <mw_bring_window_to_front+0x296>
   8e2e4:	f893 026c 	ldrb.w	r0, [r3, #620]	; 0x26c
   8e2e8:	4282      	cmp	r2, r0
   8e2ea:	bf38      	it	cc
   8e2ec:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e2ee:	f8d3 028c 	ldr.w	r0, [r3, #652]	; 0x28c
   8e2f2:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e2f6:	2c28      	cmp	r4, #40	; 0x28
   8e2f8:	d106      	bne.n	8e308 <mw_bring_window_to_front+0x2b0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e2fa:	06c4      	lsls	r4, r0, #27
   8e2fc:	d404      	bmi.n	8e308 <mw_bring_window_to_front+0x2b0>
   8e2fe:	f893 02ac 	ldrb.w	r0, [r3, #684]	; 0x2ac
   8e302:	4282      	cmp	r2, r0
   8e304:	bf38      	it	cc
   8e306:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e308:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
   8e30c:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e310:	2c28      	cmp	r4, #40	; 0x28
   8e312:	d106      	bne.n	8e322 <mw_bring_window_to_front+0x2ca>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e314:	06c0      	lsls	r0, r0, #27
   8e316:	d404      	bmi.n	8e322 <mw_bring_window_to_front+0x2ca>
   8e318:	f893 02ec 	ldrb.w	r0, [r3, #748]	; 0x2ec
   8e31c:	4282      	cmp	r2, r0
   8e31e:	bf38      	it	cc
   8e320:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e322:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
   8e326:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e32a:	2c28      	cmp	r4, #40	; 0x28
   8e32c:	d106      	bne.n	8e33c <mw_bring_window_to_front+0x2e4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e32e:	06c4      	lsls	r4, r0, #27
   8e330:	d404      	bmi.n	8e33c <mw_bring_window_to_front+0x2e4>
   8e332:	f893 032c 	ldrb.w	r0, [r3, #812]	; 0x32c
   8e336:	4282      	cmp	r2, r0
   8e338:	bf38      	it	cc
   8e33a:	4602      	movcc	r2, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   8e33c:	f8d3 034c 	ldr.w	r0, [r3, #844]	; 0x34c
   8e340:	f000 0428 	and.w	r4, r0, #40	; 0x28
   8e344:	2c28      	cmp	r4, #40	; 0x28
   8e346:	d106      	bne.n	8e356 <mw_bring_window_to_front+0x2fe>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e348:	06c0      	lsls	r0, r0, #27
   8e34a:	d404      	bmi.n	8e356 <mw_bring_window_to_front+0x2fe>
   8e34c:	f893 036c 	ldrb.w	r0, [r3, #876]	; 0x36c
   8e350:	4282      	cmp	r2, r0
   8e352:	bf38      	it	cc
   8e354:	4602      	movcc	r2, r0
	mw_all_windows[window_id].z_order = max_existing_z_order + 1U;
   8e356:	eb03 1381 	add.w	r3, r3, r1, lsl #6
   8e35a:	3201      	adds	r2, #1
   8e35c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	rationalize_z_orders();
   8e360:	480d      	ldr	r0, [pc, #52]	; (8e398 <mw_bring_window_to_front+0x340>)
}
   8e362:	bc10      	pop	{r4}
	rationalize_z_orders();
   8e364:	4700      	bx	r0
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e366:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8e36a:	0691      	lsls	r1, r2, #26
   8e36c:	f57f ae9f 	bpl.w	8e0ae <mw_bring_window_to_front+0x56>
   8e370:	2107      	movs	r1, #7
   8e372:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e374:	e6ed      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e376:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e37a:	0694      	lsls	r4, r2, #26
   8e37c:	f57f ae9c 	bpl.w	8e0b8 <mw_bring_window_to_front+0x60>
   8e380:	2108      	movs	r1, #8
   8e382:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e384:	e6e5      	b.n	8e152 <mw_bring_window_to_front+0xfa>
   8e386:	bf00      	nop
   8e388:	00095add 	.word	0x00095add
   8e38c:	000ab764 	.word	0x000ab764
   8e390:	000ab4c4 	.word	0x000ab4c4
   8e394:	20071bd8 	.word	0x20071bd8
   8e398:	0008b995 	.word	0x0008b995
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e39c:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e3a0:	0691      	lsls	r1, r2, #26
   8e3a2:	f57f ae8e 	bpl.w	8e0c2 <mw_bring_window_to_front+0x6a>
   8e3a6:	2109      	movs	r1, #9
   8e3a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e3aa:	e6d2      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e3ac:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e3b0:	0694      	lsls	r4, r2, #26
   8e3b2:	f57f ae8b 	bpl.w	8e0cc <mw_bring_window_to_front+0x74>
   8e3b6:	210a      	movs	r1, #10
   8e3b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e3ba:	e6ca      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e3bc:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8e3c0:	0691      	lsls	r1, r2, #26
   8e3c2:	f57f ae88 	bpl.w	8e0d6 <mw_bring_window_to_front+0x7e>
   8e3c6:	210b      	movs	r1, #11
   8e3c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e3ca:	e6c2      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e3cc:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e3d0:	0694      	lsls	r4, r2, #26
   8e3d2:	f57f ae85 	bpl.w	8e0e0 <mw_bring_window_to_front+0x88>
   8e3d6:	210c      	movs	r1, #12
   8e3d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   8e3da:	e6ba      	b.n	8e152 <mw_bring_window_to_front+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8e3dc:	2200      	movs	r2, #0
   8e3de:	e71e      	b.n	8e21e <mw_bring_window_to_front+0x1c6>
	if (mw_is_any_window_modal() && (mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MODAL) == 0UL)
   8e3e0:	0652      	lsls	r2, r2, #25
   8e3e2:	f53f af0f 	bmi.w	8e204 <mw_bring_window_to_front+0x1ac>
}
   8e3e6:	bc10      	pop	{r4}
   8e3e8:	4770      	bx	lr
   8e3ea:	bf00      	nop

0008e3ec <root_message_function>:
{
   8e3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   8e3f0:	4683      	mov	fp, r0
   8e3f2:	3000      	adds	r0, #0
   8e3f4:	4bc3      	ldr	r3, [pc, #780]	; (8e704 <root_message_function+0x318>)
   8e3f6:	bf18      	it	ne
   8e3f8:	2001      	movne	r0, #1
{
   8e3fa:	b08b      	sub	sp, #44	; 0x2c
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   8e3fc:	f240 22d1 	movw	r2, #721	; 0x2d1
   8e400:	49c1      	ldr	r1, [pc, #772]	; (8e708 <root_message_function+0x31c>)
   8e402:	4fc2      	ldr	r7, [pc, #776]	; (8e70c <root_message_function+0x320>)
   8e404:	47b8      	blx	r7
	switch (message->message_id)
   8e406:	f89b 3008 	ldrb.w	r3, [fp, #8]
   8e40a:	2b14      	cmp	r3, #20
   8e40c:	d005      	beq.n	8e41a <root_message_function+0x2e>
		mw_user_root_message_function(message);
   8e40e:	4658      	mov	r0, fp
   8e410:	4bbf      	ldr	r3, [pc, #764]	; (8e710 <root_message_function+0x324>)
   8e412:	4798      	blx	r3
}
   8e414:	b00b      	add	sp, #44	; 0x2c
   8e416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		x = message->message_data >> 16U;
   8e41a:	f8db 300c 	ldr.w	r3, [fp, #12]
	r.height = MW_DESKTOP_ICON_HEIGHT;
   8e41e:	2601      	movs	r6, #1
		consumed = check_for_restore_touch((int16_t)x, (int16_t)y);
   8e420:	141a      	asrs	r2, r3, #16
   8e422:	b21b      	sxth	r3, r3
   8e424:	461c      	mov	r4, r3
	r.width = MW_DESKTOP_ICON_WIDTH;
   8e426:	4bbb      	ldr	r3, [pc, #748]	; (8e714 <root_message_function+0x328>)
		consumed = check_for_restore_touch((int16_t)x, (int16_t)y);
   8e428:	9200      	str	r2, [sp, #0]
	r.width = MW_DESKTOP_ICON_WIDTH;
   8e42a:	4798      	blx	r3
	r.height = MW_DESKTOP_ICON_HEIGHT;
   8e42c:	2318      	movs	r3, #24
   8e42e:	f8cd b004 	str.w	fp, [sp, #4]
   8e432:	46a3      	mov	fp, r4
	r.width = MW_DESKTOP_ICON_WIDTH;
   8e434:	2800      	cmp	r0, #0
   8e436:	bfb8      	it	lt
   8e438:	3003      	addlt	r0, #3
   8e43a:	1080      	asrs	r0, r0, #2
   8e43c:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8e720 <root_message_function+0x334>
	MW_ASSERT(x != (void*)0, "Null pointer argument");
   8e440:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8e704 <root_message_function+0x318>
   8e444:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 8e744 <root_message_function+0x358>
	r.width = MW_DESKTOP_ICON_WIDTH;
   8e448:	f8ad 0010 	strh.w	r0, [sp, #16]
	r.height = MW_DESKTOP_ICON_HEIGHT;
   8e44c:	f8ad 3012 	strh.w	r3, [sp, #18]
		if (minimised_windows[i] == MW_ROOT_WINDOW_ID)
   8e450:	f818 3f01 	ldrb.w	r3, [r8, #1]!
   8e454:	1e74      	subs	r4, r6, #1
   8e456:	b2e4      	uxtb	r4, r4
   8e458:	b35b      	cbz	r3, 8e4b2 <root_message_function+0xc6>
	MW_ASSERT(x != (void*)0, "Null pointer argument");
   8e45a:	4653      	mov	r3, sl
   8e45c:	f44f 7255 	mov.w	r2, #852	; 0x354
   8e460:	4649      	mov	r1, r9
   8e462:	2001      	movs	r0, #1
   8e464:	47b8      	blx	r7
	MW_ASSERT(y != (void*)0, "Null pointer argument");
   8e466:	f240 3255 	movw	r2, #853	; 0x355
   8e46a:	4649      	mov	r1, r9
   8e46c:	4653      	mov	r3, sl
   8e46e:	2001      	movs	r0, #1
   8e470:	47b8      	blx	r7
	*x = (int16_t)(((int16_t)icon_number % MW_DESKTOP_ICONS_PER_ROW) * MW_DESKTOP_ICON_WIDTH);
   8e472:	4ba8      	ldr	r3, [pc, #672]	; (8e714 <root_message_function+0x328>)
   8e474:	4798      	blx	r3
   8e476:	4605      	mov	r5, r0
	*y = (int16_t)(MW_ROOT_HEIGHT - ((1 + ((int16_t)icon_number / MW_DESKTOP_ICONS_PER_ROW)) * MW_DESKTOP_ICON_HEIGHT));
   8e478:	4ba7      	ldr	r3, [pc, #668]	; (8e718 <root_message_function+0x32c>)
   8e47a:	4798      	blx	r3
	*x = (int16_t)(((int16_t)icon_number % MW_DESKTOP_ICONS_PER_ROW) * MW_DESKTOP_ICON_WIDTH);
   8e47c:	2d00      	cmp	r5, #0
   8e47e:	bfb8      	it	lt
   8e480:	3503      	addlt	r5, #3
	*y = (int16_t)(MW_ROOT_HEIGHT - ((1 + ((int16_t)icon_number / MW_DESKTOP_ICONS_PER_ROW)) * MW_DESKTOP_ICON_HEIGHT));
   8e482:	08a3      	lsrs	r3, r4, #2
	*x = (int16_t)(((int16_t)icon_number % MW_DESKTOP_ICONS_PER_ROW) * MW_DESKTOP_ICON_WIDTH);
   8e484:	10ad      	asrs	r5, r5, #2
   8e486:	f004 0403 	and.w	r4, r4, #3
   8e48a:	fb04 f405 	mul.w	r4, r4, r5
	*y = (int16_t)(MW_ROOT_HEIGHT - ((1 + ((int16_t)icon_number / MW_DESKTOP_ICONS_PER_ROW)) * MW_DESKTOP_ICON_HEIGHT));
   8e48e:	3301      	adds	r3, #1
   8e490:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   8e494:	eba0 0ec3 	sub.w	lr, r0, r3, lsl #3
		if (mw_util_is_point_in_rect(&r, x_touch, y_touch))
   8e498:	465a      	mov	r2, fp
   8e49a:	9900      	ldr	r1, [sp, #0]
   8e49c:	a803      	add	r0, sp, #12
   8e49e:	4b9f      	ldr	r3, [pc, #636]	; (8e71c <root_message_function+0x330>)
		r.y = y;
   8e4a0:	f8ad e00e 	strh.w	lr, [sp, #14]
		r.x = x;
   8e4a4:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (mw_util_is_point_in_rect(&r, x_touch, y_touch))
   8e4a8:	4798      	blx	r3
   8e4aa:	b928      	cbnz	r0, 8e4b8 <root_message_function+0xcc>
   8e4ac:	3601      	adds	r6, #1
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e4ae:	2e0e      	cmp	r6, #14
   8e4b0:	d1ce      	bne.n	8e450 <root_message_function+0x64>
   8e4b2:	f8dd b004 	ldr.w	fp, [sp, #4]
   8e4b6:	e7aa      	b.n	8e40e <root_message_function+0x22>
			draw_min_restore_window_effect(mw_all_windows[minimised_windows[i]].window_handle);
   8e4b8:	4b99      	ldr	r3, [pc, #612]	; (8e720 <root_message_function+0x334>)
   8e4ba:	4d9a      	ldr	r5, [pc, #616]	; (8e724 <root_message_function+0x338>)
   8e4bc:	5d9b      	ldrb	r3, [r3, r6]
   8e4be:	4a9a      	ldr	r2, [pc, #616]	; (8e728 <root_message_function+0x33c>)
   8e4c0:	eb05 1383 	add.w	r3, r5, r3, lsl #6
   8e4c4:	4604      	mov	r4, r0
   8e4c6:	6958      	ldr	r0, [r3, #20]
   8e4c8:	4790      	blx	r2
			mw_all_windows[minimised_windows[i]].window_flags &= ~MW_WINDOW_FLAG_IS_MINIMISED;
   8e4ca:	4b95      	ldr	r3, [pc, #596]	; (8e720 <root_message_function+0x334>)
			mw_bring_window_to_front(mw_all_windows[minimised_windows[i]].window_handle);
   8e4cc:	4997      	ldr	r1, [pc, #604]	; (8e72c <root_message_function+0x340>)
			mw_all_windows[minimised_windows[i]].window_flags &= ~MW_WINDOW_FLAG_IS_MINIMISED;
   8e4ce:	5d9b      	ldrb	r3, [r3, r6]
   8e4d0:	eb05 1383 	add.w	r3, r5, r3, lsl #6
   8e4d4:	68da      	ldr	r2, [r3, #12]
			mw_bring_window_to_front(mw_all_windows[minimised_windows[i]].window_handle);
   8e4d6:	6958      	ldr	r0, [r3, #20]
			mw_all_windows[minimised_windows[i]].window_flags &= ~MW_WINDOW_FLAG_IS_MINIMISED;
   8e4d8:	f022 0210 	bic.w	r2, r2, #16
   8e4dc:	60da      	str	r2, [r3, #12]
			mw_bring_window_to_front(mw_all_windows[minimised_windows[i]].window_handle);
   8e4de:	4788      	blx	r1
	system_timer.system_timer_event = event;
   8e4e0:	f04f 0e01 	mov.w	lr, #1
	system_timer.data = timer_data;
   8e4e4:	2000      	movs	r0, #0
					mw_all_windows[minimised_windows[i]].window_handle,
   8e4e6:	4a8e      	ldr	r2, [pc, #568]	; (8e720 <root_message_function+0x334>)
			set_system_timer(MW_UNUSED_MESSAGE_PARAMETER,
   8e4e8:	4b91      	ldr	r3, [pc, #580]	; (8e730 <root_message_function+0x344>)
					mw_all_windows[minimised_windows[i]].window_handle,
   8e4ea:	5d91      	ldrb	r1, [r2, r6]
			set_system_timer(MW_UNUSED_MESSAGE_PARAMETER,
   8e4ec:	681a      	ldr	r2, [r3, #0]
			mw_post_message(MW_WINDOW_RESTORED_MESSAGE,
   8e4ee:	eb05 1181 	add.w	r1, r5, r1, lsl #6
	system_timer.data = timer_data;
   8e4f2:	4b90      	ldr	r3, [pc, #576]	; (8e734 <root_message_function+0x348>)
			mw_post_message(MW_WINDOW_RESTORED_MESSAGE,
   8e4f4:	f8d1 8014 	ldr.w	r8, [r1, #20]
			set_system_timer(MW_UNUSED_MESSAGE_PARAMETER,
   8e4f8:	3205      	adds	r2, #5
	system_timer.next_fire_time = fire_time;
   8e4fa:	601a      	str	r2, [r3, #0]
	system_timer.system_timer_event = event;
   8e4fc:	f883 e008 	strb.w	lr, [r3, #8]
	system_timer.data = timer_data;
   8e500:	6058      	str	r0, [r3, #4]
	if (window_handle == MW_INVALID_HANDLE)
   8e502:	f1b8 0f00 	cmp.w	r8, #0
   8e506:	d04e      	beq.n	8e5a6 <root_message_function+0x1ba>
		if (mw_all_windows[i].window_handle == window_handle &&
   8e508:	696b      	ldr	r3, [r5, #20]
   8e50a:	4598      	cmp	r8, r3
   8e50c:	f000 8129 	beq.w	8e762 <root_message_function+0x376>
   8e510:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   8e512:	4598      	cmp	r8, r3
   8e514:	f000 812b 	beq.w	8e76e <root_message_function+0x382>
   8e518:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   8e51c:	4598      	cmp	r8, r3
   8e51e:	f000 812d 	beq.w	8e77c <root_message_function+0x390>
   8e522:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   8e526:	4598      	cmp	r8, r3
   8e528:	f000 8144 	beq.w	8e7b4 <root_message_function+0x3c8>
   8e52c:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
   8e530:	4598      	cmp	r8, r3
   8e532:	f000 815d 	beq.w	8e7f0 <root_message_function+0x404>
   8e536:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   8e53a:	4598      	cmp	r8, r3
   8e53c:	f000 8150 	beq.w	8e7e0 <root_message_function+0x3f4>
   8e540:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   8e544:	4598      	cmp	r8, r3
   8e546:	f000 8163 	beq.w	8e810 <root_message_function+0x424>
   8e54a:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   8e54e:	4598      	cmp	r8, r3
   8e550:	f000 8156 	beq.w	8e800 <root_message_function+0x414>
   8e554:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
   8e558:	4598      	cmp	r8, r3
   8e55a:	f000 8177 	beq.w	8e84c <root_message_function+0x460>
   8e55e:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
   8e562:	4598      	cmp	r8, r3
   8e564:	f000 816a 	beq.w	8e83c <root_message_function+0x450>
   8e568:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
   8e56c:	4598      	cmp	r8, r3
   8e56e:	f000 8199 	beq.w	8e8a4 <root_message_function+0x4b8>
   8e572:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
   8e576:	4598      	cmp	r8, r3
   8e578:	f000 818c 	beq.w	8e894 <root_message_function+0x4a8>
   8e57c:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
   8e580:	4598      	cmp	r8, r3
   8e582:	f000 8197 	beq.w	8e8b4 <root_message_function+0x4c8>
   8e586:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
   8e58a:	4598      	cmp	r8, r3
   8e58c:	d10b      	bne.n	8e5a6 <root_message_function+0x1ba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e58e:	f8d5 334c 	ldr.w	r3, [r5, #844]	; 0x34c
   8e592:	f003 0320 	and.w	r3, r3, #32
		if (mw_all_windows[i].window_handle == window_handle &&
   8e596:	2b00      	cmp	r3, #0
   8e598:	bf06      	itte	eq
   8e59a:	2400      	moveq	r4, #0
   8e59c:	f04f 090e 	moveq.w	r9, #14
   8e5a0:	f04f 090d 	movne.w	r9, #13
   8e5a4:	e002      	b.n	8e5ac <root_message_function+0x1c0>
   8e5a6:	f04f 090e 	mov.w	r9, #14
   8e5aa:	2400      	movs	r4, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8e5ac:	4620      	mov	r0, r4
   8e5ae:	4b62      	ldr	r3, [pc, #392]	; (8e738 <root_message_function+0x34c>)
   8e5b0:	f241 5262 	movw	r2, #5474	; 0x1562
   8e5b4:	4961      	ldr	r1, [pc, #388]	; (8e73c <root_message_function+0x350>)
   8e5b6:	47b8      	blx	r7
	new_message.message_data = message_data;
   8e5b8:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   8e5ba:	2107      	movs	r1, #7
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8e5bc:	eb05 1989 	add.w	r9, r5, r9, lsl #6
   8e5c0:	f8d9 200c 	ldr.w	r2, [r9, #12]
	new_message.recipient_handle = recipient_handle;
   8e5c4:	f8cd 8018 	str.w	r8, [sp, #24]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8e5c8:	0694      	lsls	r4, r2, #26
	new_message.message_id = message_id;
   8e5ca:	f88d 101c 	strb.w	r1, [sp, #28]
	new_message.message_data = message_data;
   8e5ce:	9308      	str	r3, [sp, #32]
	new_message.message_recipient_type = recipient_type;
   8e5d0:	f88d 301d 	strb.w	r3, [sp, #29]
	new_message.sender_handle = sender_handle;
   8e5d4:	9305      	str	r3, [sp, #20]
	new_message.message_pointer = message_pointer;
   8e5d6:	9309      	str	r3, [sp, #36]	; 0x24
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8e5d8:	d502      	bpl.n	8e5e0 <root_message_function+0x1f4>
		(void)mw_message_queue_insert(&new_message);
   8e5da:	a805      	add	r0, sp, #20
   8e5dc:	4b58      	ldr	r3, [pc, #352]	; (8e740 <root_message_function+0x354>)
   8e5de:	4798      	blx	r3
			remove_minimised_window_from_list(mw_all_windows[minimised_windows[i]].window_handle);
   8e5e0:	4b4f      	ldr	r3, [pc, #316]	; (8e720 <root_message_function+0x334>)
   8e5e2:	5d9b      	ldrb	r3, [r3, r6]
   8e5e4:	eb05 1383 	add.w	r3, r5, r3, lsl #6
   8e5e8:	695b      	ldr	r3, [r3, #20]
	if (window_handle == MW_INVALID_HANDLE)
   8e5ea:	2b00      	cmp	r3, #0
   8e5ec:	f000 80ac 	beq.w	8e748 <root_message_function+0x35c>
		if (mw_all_windows[i].window_handle == window_handle &&
   8e5f0:	696a      	ldr	r2, [r5, #20]
   8e5f2:	4293      	cmp	r3, r2
   8e5f4:	f000 80af 	beq.w	8e756 <root_message_function+0x36a>
   8e5f8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   8e5fa:	4293      	cmp	r3, r2
   8e5fc:	f000 80cd 	beq.w	8e79a <root_message_function+0x3ae>
   8e600:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
   8e604:	4293      	cmp	r3, r2
   8e606:	f000 80c1 	beq.w	8e78c <root_message_function+0x3a0>
   8e60a:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
   8e60e:	4293      	cmp	r3, r2
   8e610:	f000 80c9 	beq.w	8e7a6 <root_message_function+0x3ba>
   8e614:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
   8e618:	4293      	cmp	r3, r2
   8e61a:	f000 80da 	beq.w	8e7d2 <root_message_function+0x3e6>
   8e61e:	f8d5 2154 	ldr.w	r2, [r5, #340]	; 0x154
   8e622:	4293      	cmp	r3, r2
   8e624:	f000 80ce 	beq.w	8e7c4 <root_message_function+0x3d8>
   8e628:	f8d5 2194 	ldr.w	r2, [r5, #404]	; 0x194
   8e62c:	4293      	cmp	r3, r2
   8e62e:	f000 80fe 	beq.w	8e82e <root_message_function+0x442>
   8e632:	f8d5 21d4 	ldr.w	r2, [r5, #468]	; 0x1d4
   8e636:	4293      	cmp	r3, r2
   8e638:	f000 80f2 	beq.w	8e820 <root_message_function+0x434>
   8e63c:	f8d5 2214 	ldr.w	r2, [r5, #532]	; 0x214
   8e640:	4293      	cmp	r3, r2
   8e642:	f000 8112 	beq.w	8e86a <root_message_function+0x47e>
   8e646:	f8d5 2254 	ldr.w	r2, [r5, #596]	; 0x254
   8e64a:	4293      	cmp	r3, r2
   8e64c:	f000 8106 	beq.w	8e85c <root_message_function+0x470>
   8e650:	f8d5 2294 	ldr.w	r2, [r5, #660]	; 0x294
   8e654:	4293      	cmp	r3, r2
   8e656:	f000 8116 	beq.w	8e886 <root_message_function+0x49a>
   8e65a:	f8d5 22d4 	ldr.w	r2, [r5, #724]	; 0x2d4
   8e65e:	4293      	cmp	r3, r2
   8e660:	f000 810a 	beq.w	8e878 <root_message_function+0x48c>
   8e664:	f8d5 2314 	ldr.w	r2, [r5, #788]	; 0x314
   8e668:	4293      	cmp	r3, r2
   8e66a:	f000 812b 	beq.w	8e8c4 <root_message_function+0x4d8>
   8e66e:	f8d5 2354 	ldr.w	r2, [r5, #852]	; 0x354
   8e672:	4293      	cmp	r3, r2
   8e674:	d168      	bne.n	8e748 <root_message_function+0x35c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e676:	f8d5 334c 	ldr.w	r3, [r5, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e67a:	069b      	lsls	r3, r3, #26
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e67c:	bf48      	it	mi
   8e67e:	230d      	movmi	r3, #13
		if (mw_all_windows[i].window_handle == window_handle &&
   8e680:	d562      	bpl.n	8e748 <root_message_function+0x35c>
		if (minimised_windows[i] == window_id)
   8e682:	4a27      	ldr	r2, [pc, #156]	; (8e720 <root_message_function+0x334>)
   8e684:	7852      	ldrb	r2, [r2, #1]
   8e686:	429a      	cmp	r2, r3
   8e688:	f000 8154 	beq.w	8e934 <root_message_function+0x548>
   8e68c:	4a24      	ldr	r2, [pc, #144]	; (8e720 <root_message_function+0x334>)
   8e68e:	7892      	ldrb	r2, [r2, #2]
   8e690:	429a      	cmp	r2, r3
   8e692:	f000 812e 	beq.w	8e8f2 <root_message_function+0x506>
   8e696:	4a22      	ldr	r2, [pc, #136]	; (8e720 <root_message_function+0x334>)
   8e698:	78d2      	ldrb	r2, [r2, #3]
   8e69a:	429a      	cmp	r2, r3
   8e69c:	f000 814d 	beq.w	8e93a <root_message_function+0x54e>
   8e6a0:	4a1f      	ldr	r2, [pc, #124]	; (8e720 <root_message_function+0x334>)
   8e6a2:	7912      	ldrb	r2, [r2, #4]
   8e6a4:	429a      	cmp	r2, r3
   8e6a6:	f000 8130 	beq.w	8e90a <root_message_function+0x51e>
   8e6aa:	4a1d      	ldr	r2, [pc, #116]	; (8e720 <root_message_function+0x334>)
   8e6ac:	7952      	ldrb	r2, [r2, #5]
   8e6ae:	429a      	cmp	r2, r3
   8e6b0:	f000 8137 	beq.w	8e922 <root_message_function+0x536>
   8e6b4:	4a1a      	ldr	r2, [pc, #104]	; (8e720 <root_message_function+0x334>)
   8e6b6:	7992      	ldrb	r2, [r2, #6]
   8e6b8:	429a      	cmp	r2, r3
   8e6ba:	f000 8123 	beq.w	8e904 <root_message_function+0x518>
   8e6be:	4a18      	ldr	r2, [pc, #96]	; (8e720 <root_message_function+0x334>)
   8e6c0:	79d2      	ldrb	r2, [r2, #7]
   8e6c2:	429a      	cmp	r2, r3
   8e6c4:	f000 8124 	beq.w	8e910 <root_message_function+0x524>
   8e6c8:	4a15      	ldr	r2, [pc, #84]	; (8e720 <root_message_function+0x334>)
   8e6ca:	7a12      	ldrb	r2, [r2, #8]
   8e6cc:	429a      	cmp	r2, r3
   8e6ce:	f000 8116 	beq.w	8e8fe <root_message_function+0x512>
   8e6d2:	4a13      	ldr	r2, [pc, #76]	; (8e720 <root_message_function+0x334>)
   8e6d4:	7a52      	ldrb	r2, [r2, #9]
   8e6d6:	429a      	cmp	r2, r3
   8e6d8:	f000 8129 	beq.w	8e92e <root_message_function+0x542>
   8e6dc:	4a10      	ldr	r2, [pc, #64]	; (8e720 <root_message_function+0x334>)
   8e6de:	7a92      	ldrb	r2, [r2, #10]
   8e6e0:	429a      	cmp	r2, r3
   8e6e2:	f000 8109 	beq.w	8e8f8 <root_message_function+0x50c>
   8e6e6:	4a0e      	ldr	r2, [pc, #56]	; (8e720 <root_message_function+0x334>)
   8e6e8:	7ad2      	ldrb	r2, [r2, #11]
   8e6ea:	429a      	cmp	r2, r3
   8e6ec:	f000 811c 	beq.w	8e928 <root_message_function+0x53c>
   8e6f0:	4a0b      	ldr	r2, [pc, #44]	; (8e720 <root_message_function+0x334>)
   8e6f2:	7b12      	ldrb	r2, [r2, #12]
   8e6f4:	429a      	cmp	r2, r3
   8e6f6:	f000 80ec 	beq.w	8e8d2 <root_message_function+0x4e6>
	minimised_windows[MW_MAX_WINDOW_COUNT - 1U] = MW_ROOT_WINDOW_ID;
   8e6fa:	2300      	movs	r3, #0
   8e6fc:	4a08      	ldr	r2, [pc, #32]	; (8e720 <root_message_function+0x334>)
   8e6fe:	7353      	strb	r3, [r2, #13]
   8e700:	e688      	b.n	8e414 <root_message_function+0x28>
   8e702:	bf00      	nop
   8e704:	000a6618 	.word	0x000a6618
   8e708:	000ab214 	.word	0x000ab214
   8e70c:	00095add 	.word	0x00095add
   8e710:	0008021d 	.word	0x0008021d
   8e714:	00086e2d 	.word	0x00086e2d
   8e718:	00086e31 	.word	0x00086e31
   8e71c:	00096e7d 	.word	0x00096e7d
   8e720:	20071848 	.word	0x20071848
   8e724:	20071bd8 	.word	0x20071bd8
   8e728:	00089749 	.word	0x00089749
   8e72c:	0008e059 	.word	0x0008e059
   8e730:	20072f98 	.word	0x20072f98
   8e734:	20071f64 	.word	0x20071f64
   8e738:	000ab764 	.word	0x000ab764
   8e73c:	000ab710 	.word	0x000ab710
   8e740:	00095bc1 	.word	0x00095bc1
   8e744:	000ab28c 	.word	0x000ab28c
		MW_ASSERT((bool)false, "Bad window handle");
   8e748:	4b7d      	ldr	r3, [pc, #500]	; (8e940 <root_message_function+0x554>)
   8e74a:	f240 3215 	movw	r2, #789	; 0x315
   8e74e:	497d      	ldr	r1, [pc, #500]	; (8e944 <root_message_function+0x558>)
   8e750:	2000      	movs	r0, #0
   8e752:	47b8      	blx	r7
   8e754:	e65e      	b.n	8e414 <root_message_function+0x28>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e756:	68ea      	ldr	r2, [r5, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8e758:	0690      	lsls	r0, r2, #26
   8e75a:	f57f af4d 	bpl.w	8e5f8 <root_message_function+0x20c>
   8e75e:	2300      	movs	r3, #0
   8e760:	e78f      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e762:	68eb      	ldr	r3, [r5, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8e764:	069b      	lsls	r3, r3, #26
   8e766:	f57f aed3 	bpl.w	8e510 <root_message_function+0x124>
   8e76a:	4681      	mov	r9, r0
   8e76c:	e71e      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e76e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e770:	0698      	lsls	r0, r3, #26
   8e772:	f57f aed1 	bpl.w	8e518 <root_message_function+0x12c>
   8e776:	f04f 0901 	mov.w	r9, #1
   8e77a:	e717      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e77c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e780:	0699      	lsls	r1, r3, #26
   8e782:	f57f aece 	bpl.w	8e522 <root_message_function+0x136>
   8e786:	f04f 0902 	mov.w	r9, #2
   8e78a:	e70f      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e78c:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e790:	0692      	lsls	r2, r2, #26
   8e792:	f57f af3a 	bpl.w	8e60a <root_message_function+0x21e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e796:	2302      	movs	r3, #2
   8e798:	e773      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e79a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e79c:	0691      	lsls	r1, r2, #26
   8e79e:	f57f af2f 	bpl.w	8e600 <root_message_function+0x214>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e7a2:	2301      	movs	r3, #1
   8e7a4:	e76d      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e7a6:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8e7aa:	0696      	lsls	r6, r2, #26
   8e7ac:	f57f af32 	bpl.w	8e614 <root_message_function+0x228>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e7b0:	2303      	movs	r3, #3
   8e7b2:	e766      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e7b4:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8e7b8:	069a      	lsls	r2, r3, #26
   8e7ba:	f57f aeb7 	bpl.w	8e52c <root_message_function+0x140>
   8e7be:	f04f 0903 	mov.w	r9, #3
   8e7c2:	e6f3      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e7c4:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e7c8:	0690      	lsls	r0, r2, #26
   8e7ca:	f57f af2d 	bpl.w	8e628 <root_message_function+0x23c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e7ce:	2305      	movs	r3, #5
   8e7d0:	e757      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e7d2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e7d6:	0694      	lsls	r4, r2, #26
   8e7d8:	f57f af21 	bpl.w	8e61e <root_message_function+0x232>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e7dc:	2304      	movs	r3, #4
   8e7de:	e750      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e7e0:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e7e4:	0698      	lsls	r0, r3, #26
   8e7e6:	f57f aeab 	bpl.w	8e540 <root_message_function+0x154>
   8e7ea:	f04f 0905 	mov.w	r9, #5
   8e7ee:	e6dd      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e7f0:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e7f4:	069b      	lsls	r3, r3, #26
   8e7f6:	f57f ae9e 	bpl.w	8e536 <root_message_function+0x14a>
   8e7fa:	f04f 0904 	mov.w	r9, #4
   8e7fe:	e6d5      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e800:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8e804:	069a      	lsls	r2, r3, #26
   8e806:	f57f aea5 	bpl.w	8e554 <root_message_function+0x168>
   8e80a:	f04f 0907 	mov.w	r9, #7
   8e80e:	e6cd      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e810:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e814:	0699      	lsls	r1, r3, #26
   8e816:	f57f ae98 	bpl.w	8e54a <root_message_function+0x15e>
   8e81a:	f04f 0906 	mov.w	r9, #6
   8e81e:	e6c5      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e820:	f8d5 21cc 	ldr.w	r2, [r5, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8e824:	0692      	lsls	r2, r2, #26
   8e826:	f57f af09 	bpl.w	8e63c <root_message_function+0x250>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e82a:	2307      	movs	r3, #7
   8e82c:	e729      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e82e:	f8d5 218c 	ldr.w	r2, [r5, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e832:	0691      	lsls	r1, r2, #26
   8e834:	f57f aefd 	bpl.w	8e632 <root_message_function+0x246>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e838:	2306      	movs	r3, #6
   8e83a:	e722      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e83c:	f8d5 324c 	ldr.w	r3, [r5, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e840:	0698      	lsls	r0, r3, #26
   8e842:	f57f ae91 	bpl.w	8e568 <root_message_function+0x17c>
   8e846:	f04f 0909 	mov.w	r9, #9
   8e84a:	e6af      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e84c:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e850:	069b      	lsls	r3, r3, #26
   8e852:	f57f ae84 	bpl.w	8e55e <root_message_function+0x172>
   8e856:	f04f 0908 	mov.w	r9, #8
   8e85a:	e6a7      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e85c:	f8d5 224c 	ldr.w	r2, [r5, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e860:	0694      	lsls	r4, r2, #26
   8e862:	f57f aef5 	bpl.w	8e650 <root_message_function+0x264>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e866:	2309      	movs	r3, #9
   8e868:	e70b      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e86a:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e86e:	0696      	lsls	r6, r2, #26
   8e870:	f57f aee9 	bpl.w	8e646 <root_message_function+0x25a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e874:	2308      	movs	r3, #8
   8e876:	e704      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e878:	f8d5 22cc 	ldr.w	r2, [r5, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8e87c:	0691      	lsls	r1, r2, #26
   8e87e:	f57f aef1 	bpl.w	8e664 <root_message_function+0x278>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e882:	230b      	movs	r3, #11
   8e884:	e6fd      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e886:	f8d5 228c 	ldr.w	r2, [r5, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e88a:	0690      	lsls	r0, r2, #26
   8e88c:	f57f aee5 	bpl.w	8e65a <root_message_function+0x26e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e890:	230a      	movs	r3, #10
   8e892:	e6f6      	b.n	8e682 <root_message_function+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e894:	f8d5 32cc 	ldr.w	r3, [r5, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8e898:	069a      	lsls	r2, r3, #26
   8e89a:	f57f ae6f 	bpl.w	8e57c <root_message_function+0x190>
   8e89e:	f04f 090b 	mov.w	r9, #11
   8e8a2:	e683      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e8a4:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e8a8:	0699      	lsls	r1, r3, #26
   8e8aa:	f57f ae62 	bpl.w	8e572 <root_message_function+0x186>
   8e8ae:	f04f 090a 	mov.w	r9, #10
   8e8b2:	e67b      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e8b4:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e8b8:	069b      	lsls	r3, r3, #26
   8e8ba:	f57f ae64 	bpl.w	8e586 <root_message_function+0x19a>
   8e8be:	f04f 090c 	mov.w	r9, #12
   8e8c2:	e673      	b.n	8e5ac <root_message_function+0x1c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8e8c4:	f8d5 230c 	ldr.w	r2, [r5, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8e8c8:	0692      	lsls	r2, r2, #26
   8e8ca:	f57f aed0 	bpl.w	8e66e <root_message_function+0x282>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8e8ce:	230c      	movs	r3, #12
   8e8d0:	e6d7      	b.n	8e682 <root_message_function+0x296>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e8d2:	230c      	movs	r3, #12
		if (minimised_windows[i] == window_id)
   8e8d4:	461a      	mov	r2, r3
			minimised_windows[i] = minimised_windows[i + 1U];
   8e8d6:	491c      	ldr	r1, [pc, #112]	; (8e948 <root_message_function+0x55c>)
   8e8d8:	481b      	ldr	r0, [pc, #108]	; (8e948 <root_message_function+0x55c>)
   8e8da:	4419      	add	r1, r3
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e8dc:	3301      	adds	r3, #1
			minimised_windows[i] = minimised_windows[i + 1U];
   8e8de:	7849      	ldrb	r1, [r1, #1]
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e8e0:	b2db      	uxtb	r3, r3
   8e8e2:	2b0e      	cmp	r3, #14
			minimised_windows[i] = minimised_windows[i + 1U];
   8e8e4:	5481      	strb	r1, [r0, r2]
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e8e6:	f43f af08 	beq.w	8e6fa <root_message_function+0x30e>
		if (shift && i < (MW_MAX_WINDOW_COUNT - 1U))
   8e8ea:	2b0d      	cmp	r3, #13
		if (minimised_windows[i] == window_id)
   8e8ec:	461a      	mov	r2, r3
		if (shift && i < (MW_MAX_WINDOW_COUNT - 1U))
   8e8ee:	d1f2      	bne.n	8e8d6 <root_message_function+0x4ea>
   8e8f0:	e703      	b.n	8e6fa <root_message_function+0x30e>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e8f2:	2302      	movs	r3, #2
		if (minimised_windows[i] == window_id)
   8e8f4:	461a      	mov	r2, r3
   8e8f6:	e7ee      	b.n	8e8d6 <root_message_function+0x4ea>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e8f8:	230a      	movs	r3, #10
		if (minimised_windows[i] == window_id)
   8e8fa:	461a      	mov	r2, r3
   8e8fc:	e7eb      	b.n	8e8d6 <root_message_function+0x4ea>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e8fe:	2308      	movs	r3, #8
		if (minimised_windows[i] == window_id)
   8e900:	461a      	mov	r2, r3
   8e902:	e7e8      	b.n	8e8d6 <root_message_function+0x4ea>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e904:	2306      	movs	r3, #6
		if (minimised_windows[i] == window_id)
   8e906:	461a      	mov	r2, r3
   8e908:	e7e5      	b.n	8e8d6 <root_message_function+0x4ea>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e90a:	2304      	movs	r3, #4
		if (minimised_windows[i] == window_id)
   8e90c:	461a      	mov	r2, r3
   8e90e:	e7e2      	b.n	8e8d6 <root_message_function+0x4ea>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e910:	2307      	movs	r3, #7
		if (minimised_windows[i] == window_id)
   8e912:	461a      	mov	r2, r3
			minimised_windows[i] = minimised_windows[i + 1U];
   8e914:	490c      	ldr	r1, [pc, #48]	; (8e948 <root_message_function+0x55c>)
   8e916:	480c      	ldr	r0, [pc, #48]	; (8e948 <root_message_function+0x55c>)
   8e918:	4419      	add	r1, r3
   8e91a:	7849      	ldrb	r1, [r1, #1]
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e91c:	3301      	adds	r3, #1
			minimised_windows[i] = minimised_windows[i + 1U];
   8e91e:	5481      	strb	r1, [r0, r2]
   8e920:	e7e3      	b.n	8e8ea <root_message_function+0x4fe>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e922:	2305      	movs	r3, #5
		if (minimised_windows[i] == window_id)
   8e924:	461a      	mov	r2, r3
   8e926:	e7f5      	b.n	8e914 <root_message_function+0x528>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e928:	230b      	movs	r3, #11
		if (minimised_windows[i] == window_id)
   8e92a:	461a      	mov	r2, r3
   8e92c:	e7f2      	b.n	8e914 <root_message_function+0x528>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e92e:	2309      	movs	r3, #9
		if (minimised_windows[i] == window_id)
   8e930:	461a      	mov	r2, r3
   8e932:	e7ef      	b.n	8e914 <root_message_function+0x528>
   8e934:	2301      	movs	r3, #1
   8e936:	461a      	mov	r2, r3
   8e938:	e7ec      	b.n	8e914 <root_message_function+0x528>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8e93a:	2303      	movs	r3, #3
		if (minimised_windows[i] == window_id)
   8e93c:	461a      	mov	r2, r3
   8e93e:	e7e9      	b.n	8e914 <root_message_function+0x528>
   8e940:	000ab764 	.word	0x000ab764
   8e944:	000ab248 	.word	0x000ab248
   8e948:	20071848 	.word	0x20071848

0008e94c <mw_add_window>:
{
   8e94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8e950:	b08d      	sub	sp, #52	; 0x34
   8e952:	4616      	mov	r6, r2
   8e954:	9302      	str	r3, [sp, #8]
   8e956:	461a      	mov	r2, r3
   8e958:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   8e95c:	9301      	str	r3, [sp, #4]
	if (rect == (void*)0 || paint_func == (void*)0 || message_func == (void*)0 || title == (void*)0)
   8e95e:	2800      	cmp	r0, #0
   8e960:	d067      	beq.n	8ea32 <mw_add_window+0xe6>
   8e962:	2e00      	cmp	r6, #0
   8e964:	d065      	beq.n	8ea32 <mw_add_window+0xe6>
   8e966:	2a00      	cmp	r2, #0
   8e968:	d063      	beq.n	8ea32 <mw_add_window+0xe6>
   8e96a:	4688      	mov	r8, r1
   8e96c:	2900      	cmp	r1, #0
   8e96e:	d060      	beq.n	8ea32 <mw_add_window+0xe6>
	if (in_client_window_paint_function)
   8e970:	4bb1      	ldr	r3, [pc, #708]	; (8ec38 <mw_add_window+0x2ec>)
   8e972:	f893 b000 	ldrb.w	fp, [r3]
   8e976:	f1bb 0f00 	cmp.w	fp, #0
   8e97a:	d15e      	bne.n	8ea3a <mw_add_window+0xee>
	if ((window_flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR && (!menu_bar_items || !*menu_bar_items || menu_bar_items_count == 0U))
   8e97c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8e97e:	4605      	mov	r5, r0
   8e980:	f413 7900 	ands.w	r9, r3, #512	; 0x200
   8e984:	d14a      	bne.n	8ea1c <mw_add_window+0xd0>
	    if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U)
   8e986:	4cad      	ldr	r4, [pc, #692]	; (8ec3c <mw_add_window+0x2f0>)
   8e988:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   8e98a:	069b      	lsls	r3, r3, #26
   8e98c:	d559      	bpl.n	8ea42 <mw_add_window+0xf6>
   8e98e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   8e992:	069f      	lsls	r7, r3, #26
   8e994:	f140 8247 	bpl.w	8ee26 <mw_add_window+0x4da>
   8e998:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   8e99c:	0698      	lsls	r0, r3, #26
   8e99e:	f140 8245 	bpl.w	8ee2c <mw_add_window+0x4e0>
   8e9a2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   8e9a6:	0699      	lsls	r1, r3, #26
   8e9a8:	f140 8243 	bpl.w	8ee32 <mw_add_window+0x4e6>
   8e9ac:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   8e9b0:	069a      	lsls	r2, r3, #26
   8e9b2:	f140 8241 	bpl.w	8ee38 <mw_add_window+0x4ec>
   8e9b6:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8e9ba:	069b      	lsls	r3, r3, #26
   8e9bc:	f140 823f 	bpl.w	8ee3e <mw_add_window+0x4f2>
   8e9c0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   8e9c4:	069f      	lsls	r7, r3, #26
   8e9c6:	f140 823d 	bpl.w	8ee44 <mw_add_window+0x4f8>
   8e9ca:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
   8e9ce:	0698      	lsls	r0, r3, #26
   8e9d0:	f140 823b 	bpl.w	8ee4a <mw_add_window+0x4fe>
   8e9d4:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
   8e9d8:	0699      	lsls	r1, r3, #26
   8e9da:	f140 8239 	bpl.w	8ee50 <mw_add_window+0x504>
   8e9de:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
   8e9e2:	069a      	lsls	r2, r3, #26
   8e9e4:	f140 8237 	bpl.w	8ee56 <mw_add_window+0x50a>
   8e9e8:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
   8e9ec:	069b      	lsls	r3, r3, #26
   8e9ee:	f140 8235 	bpl.w	8ee5c <mw_add_window+0x510>
   8e9f2:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   8e9f6:	069f      	lsls	r7, r3, #26
   8e9f8:	f140 8233 	bpl.w	8ee62 <mw_add_window+0x516>
   8e9fc:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
   8ea00:	0698      	lsls	r0, r3, #26
   8ea02:	f140 8231 	bpl.w	8ee68 <mw_add_window+0x51c>
		MW_ASSERT((bool)false, "No space to add window");
   8ea06:	f241 02ad 	movw	r2, #4269	; 0x10ad
   8ea0a:	4b8d      	ldr	r3, [pc, #564]	; (8ec40 <mw_add_window+0x2f4>)
		MW_ASSERT((bool)false, "Width too small");
   8ea0c:	498d      	ldr	r1, [pc, #564]	; (8ec44 <mw_add_window+0x2f8>)
   8ea0e:	2000      	movs	r0, #0
   8ea10:	4c8d      	ldr	r4, [pc, #564]	; (8ec48 <mw_add_window+0x2fc>)
   8ea12:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   8ea14:	2000      	movs	r0, #0
}
   8ea16:	b00d      	add	sp, #52	; 0x34
   8ea18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((window_flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR && (!menu_bar_items || !*menu_bar_items || menu_bar_items_count == 0U))
   8ea1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8ea1e:	b123      	cbz	r3, 8ea2a <mw_add_window+0xde>
   8ea20:	681b      	ldr	r3, [r3, #0]
   8ea22:	b113      	cbz	r3, 8ea2a <mw_add_window+0xde>
   8ea24:	9b01      	ldr	r3, [sp, #4]
   8ea26:	2b00      	cmp	r3, #0
   8ea28:	d1ad      	bne.n	8e986 <mw_add_window+0x3a>
		MW_ASSERT((bool)false, "Non-sensical arguments");
   8ea2a:	4b88      	ldr	r3, [pc, #544]	; (8ec4c <mw_add_window+0x300>)
   8ea2c:	f241 02a4 	movw	r2, #4260	; 0x10a4
   8ea30:	e7ec      	b.n	8ea0c <mw_add_window+0xc0>
		MW_ASSERT((bool)false, "Null pointer argument");
   8ea32:	4b87      	ldr	r3, [pc, #540]	; (8ec50 <mw_add_window+0x304>)
   8ea34:	f241 0296 	movw	r2, #4246	; 0x1096
   8ea38:	e7e8      	b.n	8ea0c <mw_add_window+0xc0>
		MW_ASSERT((bool)false, "Can't add window in paint function");
   8ea3a:	4b86      	ldr	r3, [pc, #536]	; (8ec54 <mw_add_window+0x308>)
   8ea3c:	f241 029d 	movw	r2, #4253	; 0x109d
   8ea40:	e7e4      	b.n	8ea0c <mw_add_window+0xc0>
	    if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U)
   8ea42:	2301      	movs	r3, #1
   8ea44:	9305      	str	r3, [sp, #20]
	if (rect->width < ((window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER ? (MW_BORDER_WIDTH * 2) + 1 : 1))
   8ea46:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8ea48:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
   8ea4c:	f013 0f01 	tst.w	r3, #1
   8ea50:	bf14      	ite	ne
   8ea52:	2303      	movne	r3, #3
   8ea54:	2301      	moveq	r3, #1
   8ea56:	4283      	cmp	r3, r0
   8ea58:	f300 80ea 	bgt.w	8ec30 <mw_add_window+0x2e4>
	if (!check_window_dimensions(rect->width,
   8ea5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   8ea5e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
   8ea62:	4b7d      	ldr	r3, [pc, #500]	; (8ec58 <mw_add_window+0x30c>)
   8ea64:	4798      	blx	r3
   8ea66:	9003      	str	r0, [sp, #12]
   8ea68:	2800      	cmp	r0, #0
   8ea6a:	f000 80d7 	beq.w	8ec1c <mw_add_window+0x2d0>
	next_handle++;
   8ea6e:	f8df e214 	ldr.w	lr, [pc, #532]	; 8ec84 <mw_add_window+0x338>
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   8ea72:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8ec48 <mw_add_window+0x2fc>
	next_handle++;
   8ea76:	f8de 1000 	ldr.w	r1, [lr]
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   8ea7a:	4b75      	ldr	r3, [pc, #468]	; (8ec50 <mw_add_window+0x304>)
	next_handle++;
   8ea7c:	3101      	adds	r1, #1
   8ea7e:	460f      	mov	r7, r1
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   8ea80:	f44f 72a8 	mov.w	r2, #336	; 0x150
	next_handle++;
   8ea84:	9104      	str	r1, [sp, #16]
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   8ea86:	2001      	movs	r0, #1
   8ea88:	4974      	ldr	r1, [pc, #464]	; (8ec5c <mw_add_window+0x310>)
	next_handle++;
   8ea8a:	f8ce 7000 	str.w	r7, [lr]
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   8ea8e:	47d0      	blx	sl
	MW_ASSERT(title != (void*)0, "Null pointer argument");
   8ea90:	4b6f      	ldr	r3, [pc, #444]	; (8ec50 <mw_add_window+0x304>)
   8ea92:	f240 1251 	movw	r2, #337	; 0x151
   8ea96:	4971      	ldr	r1, [pc, #452]	; (8ec5c <mw_add_window+0x310>)
   8ea98:	2001      	movs	r0, #1
   8ea9a:	47d0      	blx	sl
	MW_ASSERT(paint_func != (void*)0, "Null pointer argument");
   8ea9c:	4b6c      	ldr	r3, [pc, #432]	; (8ec50 <mw_add_window+0x304>)
   8ea9e:	f44f 72a9 	mov.w	r2, #338	; 0x152
   8eaa2:	496e      	ldr	r1, [pc, #440]	; (8ec5c <mw_add_window+0x310>)
   8eaa4:	2001      	movs	r0, #1
   8eaa6:	47d0      	blx	sl
	MW_ASSERT(message_func != (void*)0, "Null pointer argument");
   8eaa8:	4b69      	ldr	r3, [pc, #420]	; (8ec50 <mw_add_window+0x304>)
   8eaaa:	f240 1253 	movw	r2, #339	; 0x153
   8eaae:	496b      	ldr	r1, [pc, #428]	; (8ec5c <mw_add_window+0x310>)
   8eab0:	2001      	movs	r0, #1
   8eab2:	47d0      	blx	sl
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   8eab4:	4b6a      	ldr	r3, [pc, #424]	; (8ec60 <mw_add_window+0x314>)
   8eab6:	f44f 72aa 	mov.w	r2, #340	; 0x154
   8eaba:	4968      	ldr	r1, [pc, #416]	; (8ec5c <mw_add_window+0x310>)
   8eabc:	2001      	movs	r0, #1
   8eabe:	47d0      	blx	sl
	MW_ASSERT(window_handle != MW_INVALID_HANDLE, "Illegal handle");
   8eac0:	1c38      	adds	r0, r7, #0
   8eac2:	bf18      	it	ne
   8eac4:	2001      	movne	r0, #1
   8eac6:	4b67      	ldr	r3, [pc, #412]	; (8ec64 <mw_add_window+0x318>)
   8eac8:	f240 1255 	movw	r2, #341	; 0x155
   8eacc:	4963      	ldr	r1, [pc, #396]	; (8ec5c <mw_add_window+0x310>)
   8eace:	47d0      	blx	sl
	if ((window_flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR)
   8ead0:	f1b9 0f00 	cmp.w	r9, #0
   8ead4:	f040 8128 	bne.w	8ed28 <mw_add_window+0x3dc>
	(void)mw_util_safe_strcpy(mw_all_windows[window_id].title, MW_MAX_TITLE_SIZE, title);
   8ead8:	9b05      	ldr	r3, [sp, #20]
   8eada:	4642      	mov	r2, r8
   8eadc:	ea4f 1983 	mov.w	r9, r3, lsl #6
   8eae0:	f109 0031 	add.w	r0, r9, #49	; 0x31
   8eae4:	210e      	movs	r1, #14
   8eae6:	4b60      	ldr	r3, [pc, #384]	; (8ec68 <mw_add_window+0x31c>)
   8eae8:	4420      	add	r0, r4
   8eaea:	4798      	blx	r3
		mw_all_windows[window_id].title_bar_height = MW_TITLE_BAR_HEIGHT;
   8eaec:	9b18      	ldr	r3, [sp, #96]	; 0x60
	mw_all_windows[window_id].menu_bar_item_enables = MW_ALL_ITEMS_ENABLED;
   8eaee:	f64f 7eff 	movw	lr, #65535	; 0xffff
		mw_all_windows[window_id].title_bar_height = MW_TITLE_BAR_HEIGHT;
   8eaf2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   8eaf6:	bf14      	ite	ne
   8eaf8:	2318      	movne	r3, #24
   8eafa:	2312      	moveq	r3, #18
	mw_all_windows[window_id].horiz_scroll_pos = 0U;
   8eafc:	f04f 0800 	mov.w	r8, #0
	calculate_new_window_size_details(window_handle, rect);
   8eb00:	4629      	mov	r1, r5
	mw_all_windows[window_id].paint_func = paint_func;
   8eb02:	eb04 0509 	add.w	r5, r4, r9
   8eb06:	606e      	str	r6, [r5, #4]
	mw_all_windows[window_id].message_func = message_func;
   8eb08:	9e02      	ldr	r6, [sp, #8]
	mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED;
   8eb0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
	mw_all_windows[window_id].message_func = message_func;
   8eb0c:	60ae      	str	r6, [r5, #8]
	mw_all_windows[window_id].menu_bar_items_count = menu_bar_items_count;
   8eb0e:	f89d 6004 	ldrb.w	r6, [sp, #4]
	mw_all_windows[window_id].menu_bar_items = menu_bar_items;
   8eb12:	9816      	ldr	r0, [sp, #88]	; 0x58
	calculate_new_window_size_details(window_handle, rect);
   8eb14:	9f04      	ldr	r7, [sp, #16]
	mw_all_windows[window_id].menu_bar_items_count = menu_bar_items_count;
   8eb16:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
	mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED;
   8eb1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
	mw_all_windows[window_id].instance_data = instance_data;
   8eb1e:	9e19      	ldr	r6, [sp, #100]	; 0x64
	mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED;
   8eb20:	f042 0220 	orr.w	r2, r2, #32
	mw_all_windows[window_id].menu_bar_items = menu_bar_items;
   8eb24:	f844 0009 	str.w	r0, [r4, r9]
   8eb28:	856b      	strh	r3, [r5, #42]	; 0x2a
	calculate_new_window_size_details(window_handle, rect);
   8eb2a:	4638      	mov	r0, r7
   8eb2c:	4b4f      	ldr	r3, [pc, #316]	; (8ec6c <mw_add_window+0x320>)
	mw_all_windows[window_id].window_handle = window_handle;
   8eb2e:	616f      	str	r7, [r5, #20]
	mw_all_windows[window_id].instance_data = instance_data;
   8eb30:	612e      	str	r6, [r5, #16]
	mw_all_windows[window_id].menu_bar_item_enables = MW_ALL_ITEMS_ENABLED;
   8eb32:	f8a5 e028 	strh.w	lr, [r5, #40]	; 0x28
	mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED;
   8eb36:	60ea      	str	r2, [r5, #12]
	mw_all_windows[window_id].horiz_scroll_pos = 0U;
   8eb38:	f885 802d 	strb.w	r8, [r5, #45]	; 0x2d
	mw_all_windows[window_id].vert_scroll_pos = 0U;
   8eb3c:	f885 802e 	strb.w	r8, [r5, #46]	; 0x2e
	calculate_new_window_size_details(window_handle, rect);
   8eb40:	4798      	blx	r3
   	if ((window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED)
   8eb42:	9b18      	ldr	r3, [sp, #96]	; 0x60
		add_minimised_window_to_list(mw_all_windows[new_window_id].window_handle);
   8eb44:	6968      	ldr	r0, [r5, #20]
   	if ((window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED)
   8eb46:	06d9      	lsls	r1, r3, #27
   8eb48:	f100 809e 	bmi.w	8ec88 <mw_add_window+0x33c>
   	mw_bring_window_to_front(mw_all_windows[new_window_id].window_handle);
   8eb4c:	4b48      	ldr	r3, [pc, #288]	; (8ec70 <mw_add_window+0x324>)
   8eb4e:	4798      	blx	r3
   	mw_post_message(MW_WINDOW_CREATED_MESSAGE,
   8eb50:	eb04 0309 	add.w	r3, r4, r9
   8eb54:	695d      	ldr	r5, [r3, #20]
	if (window_handle == MW_INVALID_HANDLE)
   8eb56:	2d00      	cmp	r5, #0
   8eb58:	d043      	beq.n	8ebe2 <mw_add_window+0x296>
		if (mw_all_windows[i].window_handle == window_handle &&
   8eb5a:	6963      	ldr	r3, [r4, #20]
   8eb5c:	42ab      	cmp	r3, r5
   8eb5e:	f000 8100 	beq.w	8ed62 <mw_add_window+0x416>
   8eb62:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8eb64:	429d      	cmp	r5, r3
   8eb66:	f000 8104 	beq.w	8ed72 <mw_add_window+0x426>
   8eb6a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   8eb6e:	429d      	cmp	r5, r3
   8eb70:	f000 8105 	beq.w	8ed7e <mw_add_window+0x432>
   8eb74:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   8eb78:	429d      	cmp	r5, r3
   8eb7a:	f000 8107 	beq.w	8ed8c <mw_add_window+0x440>
   8eb7e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   8eb82:	429d      	cmp	r5, r3
   8eb84:	f000 8109 	beq.w	8ed9a <mw_add_window+0x44e>
   8eb88:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   8eb8c:	429d      	cmp	r5, r3
   8eb8e:	f000 810b 	beq.w	8eda8 <mw_add_window+0x45c>
   8eb92:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   8eb96:	429d      	cmp	r5, r3
   8eb98:	f000 810d 	beq.w	8edb6 <mw_add_window+0x46a>
   8eb9c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   8eba0:	429d      	cmp	r5, r3
   8eba2:	f000 810f 	beq.w	8edc4 <mw_add_window+0x478>
   8eba6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   8ebaa:	429d      	cmp	r5, r3
   8ebac:	f000 8111 	beq.w	8edd2 <mw_add_window+0x486>
   8ebb0:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   8ebb4:	429d      	cmp	r5, r3
   8ebb6:	f000 8113 	beq.w	8ede0 <mw_add_window+0x494>
   8ebba:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   8ebbe:	429d      	cmp	r5, r3
   8ebc0:	f000 8115 	beq.w	8edee <mw_add_window+0x4a2>
   8ebc4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   8ebc8:	429d      	cmp	r5, r3
   8ebca:	f000 8117 	beq.w	8edfc <mw_add_window+0x4b0>
   8ebce:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   8ebd2:	429d      	cmp	r5, r3
   8ebd4:	f000 8119 	beq.w	8ee0a <mw_add_window+0x4be>
   8ebd8:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   8ebdc:	429d      	cmp	r5, r3
   8ebde:	f000 811b 	beq.w	8ee18 <mw_add_window+0x4cc>
   8ebe2:	260e      	movs	r6, #14
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8ebe4:	4b1e      	ldr	r3, [pc, #120]	; (8ec60 <mw_add_window+0x314>)
   8ebe6:	f241 5262 	movw	r2, #5474	; 0x1562
   8ebea:	4658      	mov	r0, fp
   8ebec:	4921      	ldr	r1, [pc, #132]	; (8ec74 <mw_add_window+0x328>)
   8ebee:	47d0      	blx	sl
	new_message.message_id = message_id;
   8ebf0:	2300      	movs	r3, #0
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8ebf2:	eb04 1686 	add.w	r6, r4, r6, lsl #6
   8ebf6:	68f2      	ldr	r2, [r6, #12]
	new_message.message_id = message_id;
   8ebf8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	new_message.message_data = message_data;
   8ebfc:	930a      	str	r3, [sp, #40]	; 0x28
	new_message.message_recipient_type = recipient_type;
   8ebfe:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	new_message.sender_handle = sender_handle;
   8ec02:	9307      	str	r3, [sp, #28]
	new_message.message_pointer = message_pointer;
   8ec04:	930b      	str	r3, [sp, #44]	; 0x2c
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8ec06:	0693      	lsls	r3, r2, #26
	new_message.recipient_handle = recipient_handle;
   8ec08:	9508      	str	r5, [sp, #32]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8ec0a:	d502      	bpl.n	8ec12 <mw_add_window+0x2c6>
		(void)mw_message_queue_insert(&new_message);
   8ec0c:	a807      	add	r0, sp, #28
   8ec0e:	4b1a      	ldr	r3, [pc, #104]	; (8ec78 <mw_add_window+0x32c>)
   8ec10:	4798      	blx	r3
	return (mw_all_windows[new_window_id].window_handle);
   8ec12:	444c      	add	r4, r9
   8ec14:	6960      	ldr	r0, [r4, #20]
}
   8ec16:	b00d      	add	sp, #52	; 0x34
   8ec18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		MW_ASSERT((bool)false, "Window too small");
   8ec1c:	4b17      	ldr	r3, [pc, #92]	; (8ec7c <mw_add_window+0x330>)
   8ec1e:	f241 02bd 	movw	r2, #4285	; 0x10bd
   8ec22:	4908      	ldr	r1, [pc, #32]	; (8ec44 <mw_add_window+0x2f8>)
   8ec24:	4c08      	ldr	r4, [pc, #32]	; (8ec48 <mw_add_window+0x2fc>)
   8ec26:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   8ec28:	9803      	ldr	r0, [sp, #12]
}
   8ec2a:	b00d      	add	sp, #52	; 0x34
   8ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		MW_ASSERT((bool)false, "Width too small");
   8ec30:	4b13      	ldr	r3, [pc, #76]	; (8ec80 <mw_add_window+0x334>)
   8ec32:	f241 02b4 	movw	r2, #4276	; 0x10b4
   8ec36:	e6e9      	b.n	8ea0c <mw_add_window+0xc0>
   8ec38:	20071844 	.word	0x20071844
   8ec3c:	20071bd8 	.word	0x20071bd8
   8ec40:	000ab850 	.word	0x000ab850
   8ec44:	000ab4b4 	.word	0x000ab4b4
   8ec48:	00095add 	.word	0x00095add
   8ec4c:	000ab838 	.word	0x000ab838
   8ec50:	000a6618 	.word	0x000a6618
   8ec54:	000ab814 	.word	0x000ab814
   8ec58:	00087c59 	.word	0x00087c59
   8ec5c:	000ab1b4 	.word	0x000ab1b4
   8ec60:	000ab764 	.word	0x000ab764
   8ec64:	000ab8a0 	.word	0x000ab8a0
   8ec68:	00096f31 	.word	0x00096f31
   8ec6c:	00088621 	.word	0x00088621
   8ec70:	0008e059 	.word	0x0008e059
   8ec74:	000ab710 	.word	0x000ab710
   8ec78:	00095bc1 	.word	0x00095bc1
   8ec7c:	000ab878 	.word	0x000ab878
   8ec80:	000ab868 	.word	0x000ab868
   8ec84:	2007023c 	.word	0x2007023c
	if (window_handle == MW_INVALID_HANDLE)
   8ec88:	2800      	cmp	r0, #0
   8ec8a:	d043      	beq.n	8ed14 <mw_add_window+0x3c8>
		if (mw_all_windows[i].window_handle == window_handle &&
   8ec8c:	6963      	ldr	r3, [r4, #20]
   8ec8e:	4298      	cmp	r0, r3
   8ec90:	f000 8138 	beq.w	8ef04 <mw_add_window+0x5b8>
   8ec94:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8ec96:	4298      	cmp	r0, r3
   8ec98:	f000 812d 	beq.w	8eef6 <mw_add_window+0x5aa>
   8ec9c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   8eca0:	4298      	cmp	r0, r3
   8eca2:	f000 80e4 	beq.w	8ee6e <mw_add_window+0x522>
   8eca6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   8ecaa:	4298      	cmp	r0, r3
   8ecac:	f000 812e 	beq.w	8ef0c <mw_add_window+0x5c0>
   8ecb0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   8ecb4:	4298      	cmp	r0, r3
   8ecb6:	f000 8141 	beq.w	8ef3c <mw_add_window+0x5f0>
   8ecba:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   8ecbe:	4298      	cmp	r0, r3
   8ecc0:	f000 8134 	beq.w	8ef2c <mw_add_window+0x5e0>
   8ecc4:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   8ecc8:	4298      	cmp	r0, r3
   8ecca:	f000 8127 	beq.w	8ef1c <mw_add_window+0x5d0>
   8ecce:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   8ecd2:	4298      	cmp	r0, r3
   8ecd4:	f000 813a 	beq.w	8ef4c <mw_add_window+0x600>
   8ecd8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   8ecdc:	4298      	cmp	r0, r3
   8ecde:	f000 8155 	beq.w	8ef8c <mw_add_window+0x640>
   8ece2:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   8ece6:	4298      	cmp	r0, r3
   8ece8:	f000 8148 	beq.w	8ef7c <mw_add_window+0x630>
   8ecec:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   8ecf0:	4298      	cmp	r0, r3
   8ecf2:	f000 813b 	beq.w	8ef6c <mw_add_window+0x620>
   8ecf6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   8ecfa:	4298      	cmp	r0, r3
   8ecfc:	f000 812e 	beq.w	8ef5c <mw_add_window+0x610>
   8ed00:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   8ed04:	4298      	cmp	r0, r3
   8ed06:	f000 8151 	beq.w	8efac <mw_add_window+0x660>
   8ed0a:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   8ed0e:	4298      	cmp	r0, r3
   8ed10:	f000 8144 	beq.w	8ef9c <mw_add_window+0x650>
		MW_ASSERT((bool)false, "Bad window handle");
   8ed14:	4bb2      	ldr	r3, [pc, #712]	; (8efe0 <mw_add_window+0x694>)
   8ed16:	2000      	movs	r0, #0
   8ed18:	f44f 724e 	mov.w	r2, #824	; 0x338
   8ed1c:	49b1      	ldr	r1, [pc, #708]	; (8efe4 <mw_add_window+0x698>)
   8ed1e:	47d0      	blx	sl
   8ed20:	eb04 0309 	add.w	r3, r4, r9
   8ed24:	6958      	ldr	r0, [r3, #20]
   8ed26:	e711      	b.n	8eb4c <mw_add_window+0x200>
		MW_ASSERT(menu_bar_items != (void*)0, "Null pointer argument");
   8ed28:	9816      	ldr	r0, [sp, #88]	; 0x58
   8ed2a:	4baf      	ldr	r3, [pc, #700]	; (8efe8 <mw_add_window+0x69c>)
   8ed2c:	3000      	adds	r0, #0
   8ed2e:	bf18      	it	ne
   8ed30:	2001      	movne	r0, #1
   8ed32:	f44f 72ac 	mov.w	r2, #344	; 0x158
   8ed36:	49ad      	ldr	r1, [pc, #692]	; (8efec <mw_add_window+0x6a0>)
   8ed38:	47d0      	blx	sl
		MW_ASSERT(*menu_bar_items != (void*)0, "Null pointer argument");
   8ed3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8ed3c:	f240 1259 	movw	r2, #345	; 0x159
   8ed40:	6818      	ldr	r0, [r3, #0]
   8ed42:	49aa      	ldr	r1, [pc, #680]	; (8efec <mw_add_window+0x6a0>)
   8ed44:	3000      	adds	r0, #0
   8ed46:	bf18      	it	ne
   8ed48:	2001      	movne	r0, #1
   8ed4a:	4ba7      	ldr	r3, [pc, #668]	; (8efe8 <mw_add_window+0x69c>)
   8ed4c:	47d0      	blx	sl
		MW_ASSERT(menu_bar_items_count > 0U, "No menu bar items");
   8ed4e:	9801      	ldr	r0, [sp, #4]
   8ed50:	4ba7      	ldr	r3, [pc, #668]	; (8eff0 <mw_add_window+0x6a4>)
   8ed52:	3000      	adds	r0, #0
   8ed54:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   8ed58:	49a4      	ldr	r1, [pc, #656]	; (8efec <mw_add_window+0x6a0>)
   8ed5a:	bf18      	it	ne
   8ed5c:	2001      	movne	r0, #1
   8ed5e:	47d0      	blx	sl
   8ed60:	e6ba      	b.n	8ead8 <mw_add_window+0x18c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ed62:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8ed64:	0699      	lsls	r1, r3, #26
   8ed66:	f57f aefc 	bpl.w	8eb62 <mw_add_window+0x216>
   8ed6a:	2600      	movs	r6, #0
   8ed6c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8ed70:	e738      	b.n	8ebe4 <mw_add_window+0x298>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ed72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ed74:	069a      	lsls	r2, r3, #26
   8ed76:	f57f aef8 	bpl.w	8eb6a <mw_add_window+0x21e>
   8ed7a:	2601      	movs	r6, #1
   8ed7c:	e7f6      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ed7e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ed82:	069b      	lsls	r3, r3, #26
   8ed84:	f57f aef6 	bpl.w	8eb74 <mw_add_window+0x228>
   8ed88:	2602      	movs	r6, #2
   8ed8a:	e7ef      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ed8c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8ed90:	069f      	lsls	r7, r3, #26
   8ed92:	f57f aef4 	bpl.w	8eb7e <mw_add_window+0x232>
   8ed96:	2603      	movs	r6, #3
   8ed98:	e7e8      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ed9a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ed9e:	069e      	lsls	r6, r3, #26
   8eda0:	f57f aef2 	bpl.w	8eb88 <mw_add_window+0x23c>
   8eda4:	2604      	movs	r6, #4
   8eda6:	e7e1      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8eda8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8edac:	0698      	lsls	r0, r3, #26
   8edae:	f57f aef0 	bpl.w	8eb92 <mw_add_window+0x246>
   8edb2:	2605      	movs	r6, #5
   8edb4:	e7da      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8edb6:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8edba:	0699      	lsls	r1, r3, #26
   8edbc:	f57f aeee 	bpl.w	8eb9c <mw_add_window+0x250>
   8edc0:	2606      	movs	r6, #6
   8edc2:	e7d3      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8edc4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8edc8:	069a      	lsls	r2, r3, #26
   8edca:	f57f aeec 	bpl.w	8eba6 <mw_add_window+0x25a>
   8edce:	2607      	movs	r6, #7
   8edd0:	e7cc      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8edd2:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8edd6:	069b      	lsls	r3, r3, #26
   8edd8:	f57f aeea 	bpl.w	8ebb0 <mw_add_window+0x264>
   8eddc:	2608      	movs	r6, #8
   8edde:	e7c5      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ede0:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ede4:	069f      	lsls	r7, r3, #26
   8ede6:	f57f aee8 	bpl.w	8ebba <mw_add_window+0x26e>
   8edea:	2609      	movs	r6, #9
   8edec:	e7be      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8edee:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8edf2:	069e      	lsls	r6, r3, #26
   8edf4:	f57f aee6 	bpl.w	8ebc4 <mw_add_window+0x278>
   8edf8:	260a      	movs	r6, #10
   8edfa:	e7b7      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8edfc:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8ee00:	0698      	lsls	r0, r3, #26
   8ee02:	f57f aee4 	bpl.w	8ebce <mw_add_window+0x282>
   8ee06:	260b      	movs	r6, #11
   8ee08:	e7b0      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ee0a:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ee0e:	0699      	lsls	r1, r3, #26
   8ee10:	f57f aee2 	bpl.w	8ebd8 <mw_add_window+0x28c>
   8ee14:	260c      	movs	r6, #12
   8ee16:	e7a9      	b.n	8ed6c <mw_add_window+0x420>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ee18:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ee1c:	069a      	lsls	r2, r3, #26
   8ee1e:	bf48      	it	mi
   8ee20:	260d      	movmi	r6, #13
   8ee22:	d4a3      	bmi.n	8ed6c <mw_add_window+0x420>
   8ee24:	e6dd      	b.n	8ebe2 <mw_add_window+0x296>
	    if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U)
   8ee26:	2302      	movs	r3, #2
   8ee28:	9305      	str	r3, [sp, #20]
   8ee2a:	e60c      	b.n	8ea46 <mw_add_window+0xfa>
   8ee2c:	2303      	movs	r3, #3
   8ee2e:	9305      	str	r3, [sp, #20]
   8ee30:	e609      	b.n	8ea46 <mw_add_window+0xfa>
   8ee32:	2304      	movs	r3, #4
   8ee34:	9305      	str	r3, [sp, #20]
   8ee36:	e606      	b.n	8ea46 <mw_add_window+0xfa>
   8ee38:	2305      	movs	r3, #5
   8ee3a:	9305      	str	r3, [sp, #20]
   8ee3c:	e603      	b.n	8ea46 <mw_add_window+0xfa>
   8ee3e:	2306      	movs	r3, #6
   8ee40:	9305      	str	r3, [sp, #20]
   8ee42:	e600      	b.n	8ea46 <mw_add_window+0xfa>
   8ee44:	2307      	movs	r3, #7
   8ee46:	9305      	str	r3, [sp, #20]
   8ee48:	e5fd      	b.n	8ea46 <mw_add_window+0xfa>
   8ee4a:	2308      	movs	r3, #8
   8ee4c:	9305      	str	r3, [sp, #20]
   8ee4e:	e5fa      	b.n	8ea46 <mw_add_window+0xfa>
   8ee50:	2309      	movs	r3, #9
   8ee52:	9305      	str	r3, [sp, #20]
   8ee54:	e5f7      	b.n	8ea46 <mw_add_window+0xfa>
   8ee56:	230a      	movs	r3, #10
   8ee58:	9305      	str	r3, [sp, #20]
   8ee5a:	e5f4      	b.n	8ea46 <mw_add_window+0xfa>
   8ee5c:	230b      	movs	r3, #11
   8ee5e:	9305      	str	r3, [sp, #20]
   8ee60:	e5f1      	b.n	8ea46 <mw_add_window+0xfa>
   8ee62:	230c      	movs	r3, #12
   8ee64:	9305      	str	r3, [sp, #20]
   8ee66:	e5ee      	b.n	8ea46 <mw_add_window+0xfa>
   8ee68:	230d      	movs	r3, #13
   8ee6a:	9305      	str	r3, [sp, #20]
   8ee6c:	e5eb      	b.n	8ea46 <mw_add_window+0xfa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ee6e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ee72:	069e      	lsls	r6, r3, #26
   8ee74:	f57f af17 	bpl.w	8eca6 <mw_add_window+0x35a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ee78:	f04f 0802 	mov.w	r8, #2
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8ee7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
   8ee80:	2b28      	cmp	r3, #40	; 0x28
   8ee82:	f47f ae63 	bne.w	8eb4c <mw_add_window+0x200>
			if (minimised_windows[i] == MW_ROOT_WINDOW_ID)
   8ee86:	4b5b      	ldr	r3, [pc, #364]	; (8eff4 <mw_add_window+0x6a8>)
   8ee88:	785a      	ldrb	r2, [r3, #1]
   8ee8a:	2a00      	cmp	r2, #0
   8ee8c:	f000 809e 	beq.w	8efcc <mw_add_window+0x680>
   8ee90:	789a      	ldrb	r2, [r3, #2]
   8ee92:	2a00      	cmp	r2, #0
   8ee94:	f000 8098 	beq.w	8efc8 <mw_add_window+0x67c>
   8ee98:	78da      	ldrb	r2, [r3, #3]
   8ee9a:	2a00      	cmp	r2, #0
   8ee9c:	f000 8092 	beq.w	8efc4 <mw_add_window+0x678>
   8eea0:	791a      	ldrb	r2, [r3, #4]
   8eea2:	2a00      	cmp	r2, #0
   8eea4:	f000 808c 	beq.w	8efc0 <mw_add_window+0x674>
   8eea8:	795a      	ldrb	r2, [r3, #5]
   8eeaa:	2a00      	cmp	r2, #0
   8eeac:	f000 8086 	beq.w	8efbc <mw_add_window+0x670>
   8eeb0:	799a      	ldrb	r2, [r3, #6]
   8eeb2:	2a00      	cmp	r2, #0
   8eeb4:	f000 808c 	beq.w	8efd0 <mw_add_window+0x684>
   8eeb8:	79da      	ldrb	r2, [r3, #7]
   8eeba:	2a00      	cmp	r2, #0
   8eebc:	f000 808c 	beq.w	8efd8 <mw_add_window+0x68c>
   8eec0:	7a1a      	ldrb	r2, [r3, #8]
   8eec2:	2a00      	cmp	r2, #0
   8eec4:	f000 8086 	beq.w	8efd4 <mw_add_window+0x688>
   8eec8:	7a5a      	ldrb	r2, [r3, #9]
   8eeca:	2a00      	cmp	r2, #0
   8eecc:	f000 8098 	beq.w	8f000 <mw_add_window+0x6b4>
   8eed0:	7a9a      	ldrb	r2, [r3, #10]
   8eed2:	2a00      	cmp	r2, #0
   8eed4:	f000 8092 	beq.w	8effc <mw_add_window+0x6b0>
   8eed8:	7ada      	ldrb	r2, [r3, #11]
   8eeda:	2a00      	cmp	r2, #0
   8eedc:	f000 808c 	beq.w	8eff8 <mw_add_window+0x6ac>
   8eee0:	7b1a      	ldrb	r2, [r3, #12]
   8eee2:	2a00      	cmp	r2, #0
   8eee4:	d07a      	beq.n	8efdc <mw_add_window+0x690>
   8eee6:	7b5a      	ldrb	r2, [r3, #13]
   8eee8:	2a00      	cmp	r2, #0
   8eeea:	f47f ae2f 	bne.w	8eb4c <mw_add_window+0x200>
   8eeee:	220d      	movs	r2, #13
				minimised_windows[i] = window_id;
   8eef0:	f803 8002 	strb.w	r8, [r3, r2]
   8eef4:	e62a      	b.n	8eb4c <mw_add_window+0x200>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8eef6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8eef8:	069f      	lsls	r7, r3, #26
   8eefa:	f57f aecf 	bpl.w	8ec9c <mw_add_window+0x350>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8eefe:	f04f 0801 	mov.w	r8, #1
   8ef02:	e7bb      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef04:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8ef06:	069a      	lsls	r2, r3, #26
   8ef08:	d4b8      	bmi.n	8ee7c <mw_add_window+0x530>
   8ef0a:	e6c3      	b.n	8ec94 <mw_add_window+0x348>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef0c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8ef10:	069d      	lsls	r5, r3, #26
   8ef12:	f57f aecd 	bpl.w	8ecb0 <mw_add_window+0x364>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ef16:	f04f 0803 	mov.w	r8, #3
   8ef1a:	e7af      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef1c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ef20:	069f      	lsls	r7, r3, #26
   8ef22:	f57f aed4 	bpl.w	8ecce <mw_add_window+0x382>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ef26:	f04f 0806 	mov.w	r8, #6
   8ef2a:	e7a7      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef2c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ef30:	069a      	lsls	r2, r3, #26
   8ef32:	f57f aec7 	bpl.w	8ecc4 <mw_add_window+0x378>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ef36:	f04f 0805 	mov.w	r8, #5
   8ef3a:	e79f      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef3c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ef40:	0699      	lsls	r1, r3, #26
   8ef42:	f57f aeba 	bpl.w	8ecba <mw_add_window+0x36e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ef46:	f04f 0804 	mov.w	r8, #4
   8ef4a:	e797      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef4c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8ef50:	069e      	lsls	r6, r3, #26
   8ef52:	f57f aec1 	bpl.w	8ecd8 <mw_add_window+0x38c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ef56:	f04f 0807 	mov.w	r8, #7
   8ef5a:	e78f      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef5c:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8ef60:	069f      	lsls	r7, r3, #26
   8ef62:	f57f aecd 	bpl.w	8ed00 <mw_add_window+0x3b4>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ef66:	f04f 080b 	mov.w	r8, #11
   8ef6a:	e787      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef6c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ef70:	069a      	lsls	r2, r3, #26
   8ef72:	f57f aec0 	bpl.w	8ecf6 <mw_add_window+0x3aa>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ef76:	f04f 080a 	mov.w	r8, #10
   8ef7a:	e77f      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef7c:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ef80:	0699      	lsls	r1, r3, #26
   8ef82:	f57f aeb3 	bpl.w	8ecec <mw_add_window+0x3a0>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ef86:	f04f 0809 	mov.w	r8, #9
   8ef8a:	e777      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef8c:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8ef90:	069d      	lsls	r5, r3, #26
   8ef92:	f57f aea6 	bpl.w	8ece2 <mw_add_window+0x396>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8ef96:	f04f 0808 	mov.w	r8, #8
   8ef9a:	e76f      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8ef9c:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8efa0:	069d      	lsls	r5, r3, #26
   8efa2:	f57f aeb7 	bpl.w	8ed14 <mw_add_window+0x3c8>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8efa6:	f04f 080d 	mov.w	r8, #13
   8efaa:	e767      	b.n	8ee7c <mw_add_window+0x530>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8efac:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8efb0:	069e      	lsls	r6, r3, #26
   8efb2:	f57f aeaa 	bpl.w	8ed0a <mw_add_window+0x3be>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8efb6:	f04f 080c 	mov.w	r8, #12
   8efba:	e75f      	b.n	8ee7c <mw_add_window+0x530>
			if (minimised_windows[i] == MW_ROOT_WINDOW_ID)
   8efbc:	2205      	movs	r2, #5
   8efbe:	e797      	b.n	8eef0 <mw_add_window+0x5a4>
   8efc0:	2204      	movs	r2, #4
   8efc2:	e795      	b.n	8eef0 <mw_add_window+0x5a4>
   8efc4:	2203      	movs	r2, #3
   8efc6:	e793      	b.n	8eef0 <mw_add_window+0x5a4>
   8efc8:	2202      	movs	r2, #2
   8efca:	e791      	b.n	8eef0 <mw_add_window+0x5a4>
   8efcc:	2201      	movs	r2, #1
   8efce:	e78f      	b.n	8eef0 <mw_add_window+0x5a4>
   8efd0:	2206      	movs	r2, #6
   8efd2:	e78d      	b.n	8eef0 <mw_add_window+0x5a4>
   8efd4:	2208      	movs	r2, #8
   8efd6:	e78b      	b.n	8eef0 <mw_add_window+0x5a4>
   8efd8:	2207      	movs	r2, #7
   8efda:	e789      	b.n	8eef0 <mw_add_window+0x5a4>
   8efdc:	220c      	movs	r2, #12
   8efde:	e787      	b.n	8eef0 <mw_add_window+0x5a4>
   8efe0:	000ab764 	.word	0x000ab764
   8efe4:	000ab26c 	.word	0x000ab26c
   8efe8:	000a6618 	.word	0x000a6618
   8efec:	000ab1b4 	.word	0x000ab1b4
   8eff0:	000ab88c 	.word	0x000ab88c
   8eff4:	20071848 	.word	0x20071848
   8eff8:	220b      	movs	r2, #11
   8effa:	e779      	b.n	8eef0 <mw_add_window+0x5a4>
   8effc:	220a      	movs	r2, #10
   8effe:	e777      	b.n	8eef0 <mw_add_window+0x5a4>
   8f000:	2209      	movs	r2, #9
   8f002:	e775      	b.n	8eef0 <mw_add_window+0x5a4>

0008f004 <mw_set_window_visible>:
{
   8f004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8f008:	b086      	sub	sp, #24
	if (window_handle == MW_INVALID_HANDLE)
   8f00a:	b948      	cbnz	r0, 8f020 <mw_set_window_visible+0x1c>
		MW_ASSERT((bool)false, "Bad window handle");
   8f00c:	4bda      	ldr	r3, [pc, #872]	; (8f378 <mw_set_window_visible+0x374>)
   8f00e:	f241 123a 	movw	r2, #4410	; 0x113a
   8f012:	49da      	ldr	r1, [pc, #872]	; (8f37c <mw_set_window_visible+0x378>)
   8f014:	2000      	movs	r0, #0
   8f016:	4cda      	ldr	r4, [pc, #872]	; (8f380 <mw_set_window_visible+0x37c>)
   8f018:	47a0      	blx	r4
}
   8f01a:	b006      	add	sp, #24
   8f01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (mw_all_windows[i].window_handle == window_handle &&
   8f020:	4cd8      	ldr	r4, [pc, #864]	; (8f384 <mw_set_window_visible+0x380>)
   8f022:	460e      	mov	r6, r1
   8f024:	6962      	ldr	r2, [r4, #20]
   8f026:	4605      	mov	r5, r0
   8f028:	4290      	cmp	r0, r2
   8f02a:	f000 80fd 	beq.w	8f228 <mw_set_window_visible+0x224>
   8f02e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8f030:	429d      	cmp	r5, r3
   8f032:	f000 8101 	beq.w	8f238 <mw_set_window_visible+0x234>
   8f036:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   8f03a:	429d      	cmp	r5, r3
   8f03c:	f000 815c 	beq.w	8f2f8 <mw_set_window_visible+0x2f4>
   8f040:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   8f044:	429d      	cmp	r5, r3
   8f046:	f000 815e 	beq.w	8f306 <mw_set_window_visible+0x302>
   8f04a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   8f04e:	429d      	cmp	r5, r3
   8f050:	f000 8160 	beq.w	8f314 <mw_set_window_visible+0x310>
   8f054:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   8f058:	429d      	cmp	r5, r3
   8f05a:	f000 8162 	beq.w	8f322 <mw_set_window_visible+0x31e>
   8f05e:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   8f062:	429d      	cmp	r5, r3
   8f064:	f000 8164 	beq.w	8f330 <mw_set_window_visible+0x32c>
   8f068:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   8f06c:	429d      	cmp	r5, r3
   8f06e:	f000 8166 	beq.w	8f33e <mw_set_window_visible+0x33a>
   8f072:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   8f076:	429d      	cmp	r5, r3
   8f078:	f000 8168 	beq.w	8f34c <mw_set_window_visible+0x348>
   8f07c:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   8f080:	429d      	cmp	r5, r3
   8f082:	f000 816a 	beq.w	8f35a <mw_set_window_visible+0x356>
   8f086:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   8f08a:	429d      	cmp	r5, r3
   8f08c:	f000 816c 	beq.w	8f368 <mw_set_window_visible+0x364>
   8f090:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   8f094:	429d      	cmp	r5, r3
   8f096:	f000 817f 	beq.w	8f398 <mw_set_window_visible+0x394>
   8f09a:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   8f09e:	429d      	cmp	r5, r3
   8f0a0:	f000 8181 	beq.w	8f3a6 <mw_set_window_visible+0x3a2>
   8f0a4:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   8f0a8:	429d      	cmp	r5, r3
   8f0aa:	d1af      	bne.n	8f00c <mw_set_window_visible+0x8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f0ac:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f0b0:	069f      	lsls	r7, r3, #26
   8f0b2:	d5ab      	bpl.n	8f00c <mw_set_window_visible+0x8>
   8f0b4:	210d      	movs	r1, #13
	if (visible && (mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE)
   8f0b6:	2e00      	cmp	r6, #0
   8f0b8:	f040 80c6 	bne.w	8f248 <mw_set_window_visible+0x244>
	if (!visible && (mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U)
   8f0bc:	0718      	lsls	r0, r3, #28
   8f0be:	d5ac      	bpl.n	8f01a <mw_set_window_visible+0x16>
		mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_IS_VISIBLE;
   8f0c0:	f023 0008 	bic.w	r0, r3, #8
   8f0c4:	eb04 1181 	add.w	r1, r4, r1, lsl #6
   8f0c8:	60c8      	str	r0, [r1, #12]
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED)
   8f0ca:	06d8      	lsls	r0, r3, #27
   8f0cc:	f140 81ba 	bpl.w	8f444 <mw_set_window_visible+0x440>
		if (mw_all_windows[i].window_handle == window_handle &&
   8f0d0:	4295      	cmp	r5, r2
   8f0d2:	f000 826d 	beq.w	8f5b0 <mw_set_window_visible+0x5ac>
   8f0d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8f0d8:	429d      	cmp	r5, r3
   8f0da:	f000 822e 	beq.w	8f53a <mw_set_window_visible+0x536>
   8f0de:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   8f0e2:	429d      	cmp	r5, r3
   8f0e4:	f000 826a 	beq.w	8f5bc <mw_set_window_visible+0x5b8>
   8f0e8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   8f0ec:	429d      	cmp	r5, r3
   8f0ee:	f000 826c 	beq.w	8f5ca <mw_set_window_visible+0x5c6>
   8f0f2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   8f0f6:	429d      	cmp	r5, r3
   8f0f8:	f000 826e 	beq.w	8f5d8 <mw_set_window_visible+0x5d4>
   8f0fc:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   8f100:	429d      	cmp	r5, r3
   8f102:	f000 827e 	beq.w	8f602 <mw_set_window_visible+0x5fe>
   8f106:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   8f10a:	429d      	cmp	r5, r3
   8f10c:	f000 8295 	beq.w	8f63a <mw_set_window_visible+0x636>
   8f110:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   8f114:	429d      	cmp	r5, r3
   8f116:	f000 8289 	beq.w	8f62c <mw_set_window_visible+0x628>
   8f11a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   8f11e:	429d      	cmp	r5, r3
   8f120:	f000 82b6 	beq.w	8f690 <mw_set_window_visible+0x68c>
   8f124:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   8f128:	429d      	cmp	r5, r3
   8f12a:	f000 82aa 	beq.w	8f682 <mw_set_window_visible+0x67e>
   8f12e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   8f132:	429d      	cmp	r5, r3
   8f134:	f000 829e 	beq.w	8f674 <mw_set_window_visible+0x670>
   8f138:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   8f13c:	429d      	cmp	r5, r3
   8f13e:	f000 82ca 	beq.w	8f6d6 <mw_set_window_visible+0x6d2>
   8f142:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   8f146:	429d      	cmp	r5, r3
   8f148:	f000 82be 	beq.w	8f6c8 <mw_set_window_visible+0x6c4>
   8f14c:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   8f150:	429d      	cmp	r5, r3
   8f152:	f000 8287 	beq.w	8f664 <mw_set_window_visible+0x660>
		MW_ASSERT((bool)false, "Bad window handle");
   8f156:	4b88      	ldr	r3, [pc, #544]	; (8f378 <mw_set_window_visible+0x374>)
   8f158:	f240 3215 	movw	r2, #789	; 0x315
   8f15c:	498a      	ldr	r1, [pc, #552]	; (8f388 <mw_set_window_visible+0x384>)
   8f15e:	2000      	movs	r0, #0
   8f160:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8f380 <mw_set_window_visible+0x37c>
   8f164:	47c0      	blx	r8
		if (mw_all_windows[i].window_handle == window_handle &&
   8f166:	6963      	ldr	r3, [r4, #20]
   8f168:	429d      	cmp	r5, r3
   8f16a:	f000 8126 	beq.w	8f3ba <mw_set_window_visible+0x3b6>
   8f16e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8f170:	429d      	cmp	r5, r3
   8f172:	f000 8129 	beq.w	8f3c8 <mw_set_window_visible+0x3c4>
   8f176:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   8f17a:	429d      	cmp	r5, r3
   8f17c:	f000 812a 	beq.w	8f3d4 <mw_set_window_visible+0x3d0>
   8f180:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   8f184:	429d      	cmp	r5, r3
   8f186:	f000 812c 	beq.w	8f3e2 <mw_set_window_visible+0x3de>
   8f18a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   8f18e:	429d      	cmp	r5, r3
   8f190:	f000 812e 	beq.w	8f3f0 <mw_set_window_visible+0x3ec>
   8f194:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   8f198:	429d      	cmp	r5, r3
   8f19a:	f000 8130 	beq.w	8f3fe <mw_set_window_visible+0x3fa>
   8f19e:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   8f1a2:	429d      	cmp	r5, r3
   8f1a4:	f000 8132 	beq.w	8f40c <mw_set_window_visible+0x408>
   8f1a8:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   8f1ac:	429d      	cmp	r5, r3
   8f1ae:	f000 8134 	beq.w	8f41a <mw_set_window_visible+0x416>
   8f1b2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   8f1b6:	429d      	cmp	r5, r3
   8f1b8:	f000 8136 	beq.w	8f428 <mw_set_window_visible+0x424>
   8f1bc:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   8f1c0:	429d      	cmp	r5, r3
   8f1c2:	f000 8138 	beq.w	8f436 <mw_set_window_visible+0x432>
   8f1c6:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   8f1ca:	429d      	cmp	r5, r3
   8f1cc:	f000 8145 	beq.w	8f45a <mw_set_window_visible+0x456>
   8f1d0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   8f1d4:	429d      	cmp	r5, r3
   8f1d6:	f000 8147 	beq.w	8f468 <mw_set_window_visible+0x464>
   8f1da:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   8f1de:	429d      	cmp	r5, r3
   8f1e0:	f000 8149 	beq.w	8f476 <mw_set_window_visible+0x472>
   8f1e4:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   8f1e8:	429d      	cmp	r5, r3
   8f1ea:	f000 814b 	beq.w	8f484 <mw_set_window_visible+0x480>
   8f1ee:	270e      	movs	r7, #14
   8f1f0:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8f1f2:	4b61      	ldr	r3, [pc, #388]	; (8f378 <mw_set_window_visible+0x374>)
   8f1f4:	f241 5262 	movw	r2, #5474	; 0x1562
   8f1f8:	4964      	ldr	r1, [pc, #400]	; (8f38c <mw_set_window_visible+0x388>)
   8f1fa:	47c0      	blx	r8
	new_message.message_recipient_type = recipient_type;
   8f1fc:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   8f1fe:	2108      	movs	r1, #8
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8f200:	eb04 1487 	add.w	r4, r4, r7, lsl #6
   8f204:	68e2      	ldr	r2, [r4, #12]
	new_message.message_recipient_type = recipient_type;
   8f206:	f88d 300d 	strb.w	r3, [sp, #13]
	new_message.sender_handle = sender_handle;
   8f20a:	9301      	str	r3, [sp, #4]
	new_message.message_pointer = message_pointer;
   8f20c:	9305      	str	r3, [sp, #20]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8f20e:	0693      	lsls	r3, r2, #26
	new_message.message_data = message_data;
   8f210:	9604      	str	r6, [sp, #16]
	new_message.recipient_handle = recipient_handle;
   8f212:	9502      	str	r5, [sp, #8]
	new_message.message_id = message_id;
   8f214:	f88d 100c 	strb.w	r1, [sp, #12]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8f218:	f57f aeff 	bpl.w	8f01a <mw_set_window_visible+0x16>
		(void)mw_message_queue_insert(&new_message);
   8f21c:	a801      	add	r0, sp, #4
   8f21e:	4b5c      	ldr	r3, [pc, #368]	; (8f390 <mw_set_window_visible+0x38c>)
   8f220:	4798      	blx	r3
}
   8f222:	b006      	add	sp, #24
   8f224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f228:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8f22a:	069b      	lsls	r3, r3, #26
   8f22c:	f53f aeee 	bmi.w	8f00c <mw_set_window_visible+0x8>
   8f230:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8f232:	429d      	cmp	r5, r3
   8f234:	f47f aeff 	bne.w	8f036 <mw_set_window_visible+0x32>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f238:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f23a:	069f      	lsls	r7, r3, #26
   8f23c:	f57f aefb 	bpl.w	8f036 <mw_set_window_visible+0x32>
   8f240:	2101      	movs	r1, #1
	if (visible && (mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE)
   8f242:	2e00      	cmp	r6, #0
   8f244:	f43f af3a 	beq.w	8f0bc <mw_set_window_visible+0xb8>
   8f248:	f013 0008 	ands.w	r0, r3, #8
   8f24c:	f47f aee5 	bne.w	8f01a <mw_set_window_visible+0x16>
		mw_all_windows[window_id].window_flags |= MW_WINDOW_FLAG_IS_VISIBLE;
   8f250:	eb04 1181 	add.w	r1, r4, r1, lsl #6
   8f254:	f043 0708 	orr.w	r7, r3, #8
   8f258:	60cf      	str	r7, [r1, #12]
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED)
   8f25a:	06d9      	lsls	r1, r3, #27
   8f25c:	f140 80f7 	bpl.w	8f44e <mw_set_window_visible+0x44a>
		if (mw_all_windows[i].window_handle == window_handle &&
   8f260:	4295      	cmp	r5, r2
   8f262:	f000 8118 	beq.w	8f496 <mw_set_window_visible+0x492>
   8f266:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8f268:	429d      	cmp	r5, r3
   8f26a:	f000 8160 	beq.w	8f52e <mw_set_window_visible+0x52a>
   8f26e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   8f272:	429d      	cmp	r5, r3
   8f274:	f000 8150 	beq.w	8f518 <mw_set_window_visible+0x514>
   8f278:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   8f27c:	429d      	cmp	r5, r3
   8f27e:	f000 81b9 	beq.w	8f5f4 <mw_set_window_visible+0x5f0>
   8f282:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   8f286:	429d      	cmp	r5, r3
   8f288:	f000 81ad 	beq.w	8f5e6 <mw_set_window_visible+0x5e2>
   8f28c:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   8f290:	429d      	cmp	r5, r3
   8f292:	f000 81c4 	beq.w	8f61e <mw_set_window_visible+0x61a>
   8f296:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   8f29a:	429d      	cmp	r5, r3
   8f29c:	f000 81b8 	beq.w	8f610 <mw_set_window_visible+0x60c>
   8f2a0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   8f2a4:	429d      	cmp	r5, r3
   8f2a6:	f000 81cf 	beq.w	8f648 <mw_set_window_visible+0x644>
   8f2aa:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   8f2ae:	429d      	cmp	r5, r3
   8f2b0:	f000 81d1 	beq.w	8f656 <mw_set_window_visible+0x652>
   8f2b4:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   8f2b8:	429d      	cmp	r5, r3
   8f2ba:	f000 81f7 	beq.w	8f6ac <mw_set_window_visible+0x6a8>
   8f2be:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   8f2c2:	429d      	cmp	r5, r3
   8f2c4:	f000 81eb 	beq.w	8f69e <mw_set_window_visible+0x69a>
   8f2c8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   8f2cc:	429d      	cmp	r5, r3
   8f2ce:	f000 8210 	beq.w	8f6f2 <mw_set_window_visible+0x6ee>
   8f2d2:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   8f2d6:	429d      	cmp	r5, r3
   8f2d8:	f000 8204 	beq.w	8f6e4 <mw_set_window_visible+0x6e0>
   8f2dc:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   8f2e0:	429d      	cmp	r5, r3
   8f2e2:	f000 81ea 	beq.w	8f6ba <mw_set_window_visible+0x6b6>
		MW_ASSERT((bool)false, "Bad window handle");
   8f2e6:	4b24      	ldr	r3, [pc, #144]	; (8f378 <mw_set_window_visible+0x374>)
   8f2e8:	f44f 724e 	mov.w	r2, #824	; 0x338
   8f2ec:	4929      	ldr	r1, [pc, #164]	; (8f394 <mw_set_window_visible+0x390>)
   8f2ee:	2000      	movs	r0, #0
   8f2f0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8f380 <mw_set_window_visible+0x37c>
   8f2f4:	47c0      	blx	r8
   8f2f6:	e736      	b.n	8f166 <mw_set_window_visible+0x162>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f2f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f2fc:	0698      	lsls	r0, r3, #26
   8f2fe:	f57f ae9f 	bpl.w	8f040 <mw_set_window_visible+0x3c>
   8f302:	2102      	movs	r1, #2
   8f304:	e6d7      	b.n	8f0b6 <mw_set_window_visible+0xb2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f306:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f30a:	0699      	lsls	r1, r3, #26
   8f30c:	f57f ae9d 	bpl.w	8f04a <mw_set_window_visible+0x46>
   8f310:	2103      	movs	r1, #3
   8f312:	e6d0      	b.n	8f0b6 <mw_set_window_visible+0xb2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f314:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f318:	069f      	lsls	r7, r3, #26
   8f31a:	f57f ae9b 	bpl.w	8f054 <mw_set_window_visible+0x50>
   8f31e:	2104      	movs	r1, #4
   8f320:	e6c9      	b.n	8f0b6 <mw_set_window_visible+0xb2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f322:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f326:	0698      	lsls	r0, r3, #26
   8f328:	f57f ae99 	bpl.w	8f05e <mw_set_window_visible+0x5a>
   8f32c:	2105      	movs	r1, #5
   8f32e:	e6c2      	b.n	8f0b6 <mw_set_window_visible+0xb2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f330:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f334:	0699      	lsls	r1, r3, #26
   8f336:	f57f ae97 	bpl.w	8f068 <mw_set_window_visible+0x64>
   8f33a:	2106      	movs	r1, #6
   8f33c:	e6bb      	b.n	8f0b6 <mw_set_window_visible+0xb2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f33e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f342:	069f      	lsls	r7, r3, #26
   8f344:	f57f ae95 	bpl.w	8f072 <mw_set_window_visible+0x6e>
   8f348:	2107      	movs	r1, #7
   8f34a:	e6b4      	b.n	8f0b6 <mw_set_window_visible+0xb2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f34c:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f350:	0698      	lsls	r0, r3, #26
   8f352:	f57f ae93 	bpl.w	8f07c <mw_set_window_visible+0x78>
   8f356:	2108      	movs	r1, #8
   8f358:	e6ad      	b.n	8f0b6 <mw_set_window_visible+0xb2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f35a:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f35e:	0699      	lsls	r1, r3, #26
   8f360:	f57f ae91 	bpl.w	8f086 <mw_set_window_visible+0x82>
   8f364:	2109      	movs	r1, #9
   8f366:	e6a6      	b.n	8f0b6 <mw_set_window_visible+0xb2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f368:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f36c:	069f      	lsls	r7, r3, #26
   8f36e:	f57f ae8f 	bpl.w	8f090 <mw_set_window_visible+0x8c>
   8f372:	210a      	movs	r1, #10
   8f374:	e69f      	b.n	8f0b6 <mw_set_window_visible+0xb2>
   8f376:	bf00      	nop
   8f378:	000ab764 	.word	0x000ab764
   8f37c:	000ab4e0 	.word	0x000ab4e0
   8f380:	00095add 	.word	0x00095add
   8f384:	20071bd8 	.word	0x20071bd8
   8f388:	000ab248 	.word	0x000ab248
   8f38c:	000ab710 	.word	0x000ab710
   8f390:	00095bc1 	.word	0x00095bc1
   8f394:	000ab26c 	.word	0x000ab26c
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f398:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f39c:	0698      	lsls	r0, r3, #26
   8f39e:	f57f ae7c 	bpl.w	8f09a <mw_set_window_visible+0x96>
   8f3a2:	210b      	movs	r1, #11
   8f3a4:	e687      	b.n	8f0b6 <mw_set_window_visible+0xb2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f3a6:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f3aa:	0699      	lsls	r1, r3, #26
   8f3ac:	f57f ae7a 	bpl.w	8f0a4 <mw_set_window_visible+0xa0>
   8f3b0:	210c      	movs	r1, #12
   8f3b2:	e680      	b.n	8f0b6 <mw_set_window_visible+0xb2>
	mw_post_message(MW_WINDOW_VISIBILITY_CHANGED_MESSAGE,
   8f3b4:	2601      	movs	r6, #1
   8f3b6:	f8df 8390 	ldr.w	r8, [pc, #912]	; 8f748 <mw_set_window_visible+0x744>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f3ba:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8f3bc:	0698      	lsls	r0, r3, #26
   8f3be:	f57f aed6 	bpl.w	8f16e <mw_set_window_visible+0x16a>
   8f3c2:	2700      	movs	r7, #0
   8f3c4:	2001      	movs	r0, #1
   8f3c6:	e714      	b.n	8f1f2 <mw_set_window_visible+0x1ee>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f3c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f3ca:	0699      	lsls	r1, r3, #26
   8f3cc:	f57f aed3 	bpl.w	8f176 <mw_set_window_visible+0x172>
   8f3d0:	2701      	movs	r7, #1
   8f3d2:	e7f7      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f3d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f3d8:	069a      	lsls	r2, r3, #26
   8f3da:	f57f aed1 	bpl.w	8f180 <mw_set_window_visible+0x17c>
   8f3de:	2702      	movs	r7, #2
   8f3e0:	e7f0      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f3e2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f3e6:	069b      	lsls	r3, r3, #26
   8f3e8:	f57f aecf 	bpl.w	8f18a <mw_set_window_visible+0x186>
   8f3ec:	2703      	movs	r7, #3
   8f3ee:	e7e9      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f3f0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f3f4:	069f      	lsls	r7, r3, #26
   8f3f6:	f57f aecd 	bpl.w	8f194 <mw_set_window_visible+0x190>
   8f3fa:	2704      	movs	r7, #4
   8f3fc:	e7e2      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f3fe:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f402:	0698      	lsls	r0, r3, #26
   8f404:	f57f aecb 	bpl.w	8f19e <mw_set_window_visible+0x19a>
   8f408:	2705      	movs	r7, #5
   8f40a:	e7db      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f40c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f410:	0699      	lsls	r1, r3, #26
   8f412:	f57f aec9 	bpl.w	8f1a8 <mw_set_window_visible+0x1a4>
   8f416:	2706      	movs	r7, #6
   8f418:	e7d4      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f41a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f41e:	069a      	lsls	r2, r3, #26
   8f420:	f57f aec7 	bpl.w	8f1b2 <mw_set_window_visible+0x1ae>
   8f424:	2707      	movs	r7, #7
   8f426:	e7cd      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f428:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f42c:	069b      	lsls	r3, r3, #26
   8f42e:	f57f aec5 	bpl.w	8f1bc <mw_set_window_visible+0x1b8>
   8f432:	2708      	movs	r7, #8
   8f434:	e7c6      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f436:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f43a:	069f      	lsls	r7, r3, #26
   8f43c:	f57f aec3 	bpl.w	8f1c6 <mw_set_window_visible+0x1c2>
   8f440:	2709      	movs	r7, #9
   8f442:	e7bf      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
			rationalize_z_orders();
   8f444:	4bbd      	ldr	r3, [pc, #756]	; (8f73c <mw_set_window_visible+0x738>)
   8f446:	4798      	blx	r3
   8f448:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8f748 <mw_set_window_visible+0x744>
   8f44c:	e68b      	b.n	8f166 <mw_set_window_visible+0x162>
			mw_bring_window_to_front(window_handle);
   8f44e:	4628      	mov	r0, r5
   8f450:	4bbb      	ldr	r3, [pc, #748]	; (8f740 <mw_set_window_visible+0x73c>)
   8f452:	4798      	blx	r3
   8f454:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8f748 <mw_set_window_visible+0x744>
   8f458:	e685      	b.n	8f166 <mw_set_window_visible+0x162>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f45a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f45e:	0698      	lsls	r0, r3, #26
   8f460:	f57f aeb6 	bpl.w	8f1d0 <mw_set_window_visible+0x1cc>
   8f464:	270a      	movs	r7, #10
   8f466:	e7ad      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f468:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f46c:	0699      	lsls	r1, r3, #26
   8f46e:	f57f aeb4 	bpl.w	8f1da <mw_set_window_visible+0x1d6>
   8f472:	270b      	movs	r7, #11
   8f474:	e7a6      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f476:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f47a:	069a      	lsls	r2, r3, #26
   8f47c:	f57f aeb2 	bpl.w	8f1e4 <mw_set_window_visible+0x1e0>
   8f480:	270c      	movs	r7, #12
   8f482:	e79f      	b.n	8f3c4 <mw_set_window_visible+0x3c0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f484:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f488:	f013 0020 	ands.w	r0, r3, #32
   8f48c:	bf18      	it	ne
   8f48e:	270d      	movne	r7, #13
   8f490:	d198      	bne.n	8f3c4 <mw_set_window_visible+0x3c0>
   8f492:	270e      	movs	r7, #14
   8f494:	e6ad      	b.n	8f1f2 <mw_set_window_visible+0x1ee>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f496:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8f498:	069a      	lsls	r2, r3, #26
   8f49a:	f57f aee4 	bpl.w	8f266 <mw_set_window_visible+0x262>
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8f49e:	f003 0328 	and.w	r3, r3, #40	; 0x28
   8f4a2:	2b28      	cmp	r3, #40	; 0x28
   8f4a4:	d186      	bne.n	8f3b4 <mw_set_window_visible+0x3b0>
			if (minimised_windows[i] == MW_ROOT_WINDOW_ID)
   8f4a6:	4aa7      	ldr	r2, [pc, #668]	; (8f744 <mw_set_window_visible+0x740>)
   8f4a8:	7853      	ldrb	r3, [r2, #1]
   8f4aa:	2b00      	cmp	r3, #0
   8f4ac:	f000 8166 	beq.w	8f77c <mw_set_window_visible+0x778>
   8f4b0:	7893      	ldrb	r3, [r2, #2]
   8f4b2:	2b00      	cmp	r3, #0
   8f4b4:	f000 8160 	beq.w	8f778 <mw_set_window_visible+0x774>
   8f4b8:	78d3      	ldrb	r3, [r2, #3]
   8f4ba:	2b00      	cmp	r3, #0
   8f4bc:	f000 8162 	beq.w	8f784 <mw_set_window_visible+0x780>
   8f4c0:	7913      	ldrb	r3, [r2, #4]
   8f4c2:	2b00      	cmp	r3, #0
   8f4c4:	f000 816e 	beq.w	8f7a4 <mw_set_window_visible+0x7a0>
   8f4c8:	7953      	ldrb	r3, [r2, #5]
   8f4ca:	2b00      	cmp	r3, #0
   8f4cc:	f000 8168 	beq.w	8f7a0 <mw_set_window_visible+0x79c>
   8f4d0:	7993      	ldrb	r3, [r2, #6]
   8f4d2:	2b00      	cmp	r3, #0
   8f4d4:	f000 8162 	beq.w	8f79c <mw_set_window_visible+0x798>
   8f4d8:	79d3      	ldrb	r3, [r2, #7]
   8f4da:	2b00      	cmp	r3, #0
   8f4dc:	f000 815c 	beq.w	8f798 <mw_set_window_visible+0x794>
   8f4e0:	7a13      	ldrb	r3, [r2, #8]
   8f4e2:	2b00      	cmp	r3, #0
   8f4e4:	f000 8156 	beq.w	8f794 <mw_set_window_visible+0x790>
   8f4e8:	7a53      	ldrb	r3, [r2, #9]
   8f4ea:	2b00      	cmp	r3, #0
   8f4ec:	f000 8150 	beq.w	8f790 <mw_set_window_visible+0x78c>
   8f4f0:	7a93      	ldrb	r3, [r2, #10]
   8f4f2:	2b00      	cmp	r3, #0
   8f4f4:	f000 814a 	beq.w	8f78c <mw_set_window_visible+0x788>
   8f4f8:	7ad3      	ldrb	r3, [r2, #11]
   8f4fa:	2b00      	cmp	r3, #0
   8f4fc:	f000 8144 	beq.w	8f788 <mw_set_window_visible+0x784>
   8f500:	7b13      	ldrb	r3, [r2, #12]
   8f502:	2b00      	cmp	r3, #0
   8f504:	f000 813c 	beq.w	8f780 <mw_set_window_visible+0x77c>
   8f508:	7b53      	ldrb	r3, [r2, #13]
   8f50a:	2b00      	cmp	r3, #0
   8f50c:	d19c      	bne.n	8f448 <mw_set_window_visible+0x444>
   8f50e:	230d      	movs	r3, #13
				minimised_windows[i] = window_id;
   8f510:	54d0      	strb	r0, [r2, r3]
   8f512:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8f748 <mw_set_window_visible+0x744>
   8f516:	e626      	b.n	8f166 <mw_set_window_visible+0x162>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f518:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f51c:	0698      	lsls	r0, r3, #26
   8f51e:	f57f aeab 	bpl.w	8f278 <mw_set_window_visible+0x274>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f522:	2002      	movs	r0, #2
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   8f524:	f003 0328 	and.w	r3, r3, #40	; 0x28
   8f528:	2b28      	cmp	r3, #40	; 0x28
   8f52a:	d0bc      	beq.n	8f4a6 <mw_set_window_visible+0x4a2>
   8f52c:	e78c      	b.n	8f448 <mw_set_window_visible+0x444>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f52e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f530:	069f      	lsls	r7, r3, #26
   8f532:	f57f ae9c 	bpl.w	8f26e <mw_set_window_visible+0x26a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f536:	2001      	movs	r0, #1
   8f538:	e7f4      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f53a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f53c:	069a      	lsls	r2, r3, #26
   8f53e:	f57f adce 	bpl.w	8f0de <mw_set_window_visible+0xda>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f542:	2301      	movs	r3, #1
		if (minimised_windows[i] == window_id)
   8f544:	4a7f      	ldr	r2, [pc, #508]	; (8f744 <mw_set_window_visible+0x740>)
   8f546:	7851      	ldrb	r1, [r2, #1]
   8f548:	4299      	cmp	r1, r3
   8f54a:	f000 80ff 	beq.w	8f74c <mw_set_window_visible+0x748>
   8f54e:	7891      	ldrb	r1, [r2, #2]
   8f550:	4299      	cmp	r1, r3
   8f552:	f000 80ef 	beq.w	8f734 <mw_set_window_visible+0x730>
   8f556:	78d1      	ldrb	r1, [r2, #3]
   8f558:	4299      	cmp	r1, r3
   8f55a:	f000 8101 	beq.w	8f760 <mw_set_window_visible+0x75c>
   8f55e:	7911      	ldrb	r1, [r2, #4]
   8f560:	4299      	cmp	r1, r3
   8f562:	f000 80e4 	beq.w	8f72e <mw_set_window_visible+0x72a>
   8f566:	7951      	ldrb	r1, [r2, #5]
   8f568:	4299      	cmp	r1, r3
   8f56a:	f000 80f6 	beq.w	8f75a <mw_set_window_visible+0x756>
   8f56e:	7991      	ldrb	r1, [r2, #6]
   8f570:	4299      	cmp	r1, r3
   8f572:	f000 80d9 	beq.w	8f728 <mw_set_window_visible+0x724>
   8f576:	79d1      	ldrb	r1, [r2, #7]
   8f578:	4299      	cmp	r1, r3
   8f57a:	f000 80fa 	beq.w	8f772 <mw_set_window_visible+0x76e>
   8f57e:	7a11      	ldrb	r1, [r2, #8]
   8f580:	4299      	cmp	r1, r3
   8f582:	f000 80ce 	beq.w	8f722 <mw_set_window_visible+0x71e>
   8f586:	7a51      	ldrb	r1, [r2, #9]
   8f588:	4299      	cmp	r1, r3
   8f58a:	f000 80ef 	beq.w	8f76c <mw_set_window_visible+0x768>
   8f58e:	7a91      	ldrb	r1, [r2, #10]
   8f590:	4299      	cmp	r1, r3
   8f592:	f000 80c3 	beq.w	8f71c <mw_set_window_visible+0x718>
   8f596:	7ad1      	ldrb	r1, [r2, #11]
   8f598:	4299      	cmp	r1, r3
   8f59a:	f000 80e4 	beq.w	8f766 <mw_set_window_visible+0x762>
   8f59e:	7b11      	ldrb	r1, [r2, #12]
   8f5a0:	4299      	cmp	r1, r3
   8f5a2:	f000 80ad 	beq.w	8f700 <mw_set_window_visible+0x6fc>
	minimised_windows[MW_MAX_WINDOW_COUNT - 1U] = MW_ROOT_WINDOW_ID;
   8f5a6:	2300      	movs	r3, #0
   8f5a8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8f748 <mw_set_window_visible+0x744>
   8f5ac:	7353      	strb	r3, [r2, #13]
   8f5ae:	e5da      	b.n	8f166 <mw_set_window_visible+0x162>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f5b0:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8f5b2:	0699      	lsls	r1, r3, #26
   8f5b4:	f57f ad8f 	bpl.w	8f0d6 <mw_set_window_visible+0xd2>
   8f5b8:	4633      	mov	r3, r6
   8f5ba:	e7c3      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f5bc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f5c0:	069b      	lsls	r3, r3, #26
   8f5c2:	f57f ad91 	bpl.w	8f0e8 <mw_set_window_visible+0xe4>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f5c6:	2302      	movs	r3, #2
   8f5c8:	e7bc      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f5ca:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f5ce:	069f      	lsls	r7, r3, #26
   8f5d0:	f57f ad8f 	bpl.w	8f0f2 <mw_set_window_visible+0xee>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f5d4:	2303      	movs	r3, #3
   8f5d6:	e7b5      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f5d8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f5dc:	0698      	lsls	r0, r3, #26
   8f5de:	f57f ad8d 	bpl.w	8f0fc <mw_set_window_visible+0xf8>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f5e2:	2304      	movs	r3, #4
   8f5e4:	e7ae      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f5e6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f5ea:	069a      	lsls	r2, r3, #26
   8f5ec:	f57f ae4e 	bpl.w	8f28c <mw_set_window_visible+0x288>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f5f0:	2004      	movs	r0, #4
   8f5f2:	e797      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f5f4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f5f8:	0699      	lsls	r1, r3, #26
   8f5fa:	f57f ae42 	bpl.w	8f282 <mw_set_window_visible+0x27e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f5fe:	2003      	movs	r0, #3
   8f600:	e790      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f602:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f606:	0699      	lsls	r1, r3, #26
   8f608:	f57f ad7d 	bpl.w	8f106 <mw_set_window_visible+0x102>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f60c:	2305      	movs	r3, #5
   8f60e:	e799      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f610:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f614:	0698      	lsls	r0, r3, #26
   8f616:	f57f ae43 	bpl.w	8f2a0 <mw_set_window_visible+0x29c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f61a:	2006      	movs	r0, #6
   8f61c:	e782      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f61e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f622:	069f      	lsls	r7, r3, #26
   8f624:	f57f ae37 	bpl.w	8f296 <mw_set_window_visible+0x292>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f628:	2005      	movs	r0, #5
   8f62a:	e77b      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f62c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f630:	069b      	lsls	r3, r3, #26
   8f632:	f57f ad72 	bpl.w	8f11a <mw_set_window_visible+0x116>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f636:	2307      	movs	r3, #7
   8f638:	e784      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f63a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f63e:	069a      	lsls	r2, r3, #26
   8f640:	f57f ad66 	bpl.w	8f110 <mw_set_window_visible+0x10c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f644:	2306      	movs	r3, #6
   8f646:	e77d      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f648:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f64c:	0699      	lsls	r1, r3, #26
   8f64e:	f57f ae2c 	bpl.w	8f2aa <mw_set_window_visible+0x2a6>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f652:	2007      	movs	r0, #7
   8f654:	e766      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f656:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f65a:	069a      	lsls	r2, r3, #26
   8f65c:	f57f ae2a 	bpl.w	8f2b4 <mw_set_window_visible+0x2b0>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f660:	2008      	movs	r0, #8
   8f662:	e75f      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f664:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f668:	069f      	lsls	r7, r3, #26
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f66a:	bf48      	it	mi
   8f66c:	230d      	movmi	r3, #13
		if (mw_all_windows[i].window_handle == window_handle &&
   8f66e:	f53f af69 	bmi.w	8f544 <mw_set_window_visible+0x540>
   8f672:	e570      	b.n	8f156 <mw_set_window_visible+0x152>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f674:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f678:	0699      	lsls	r1, r3, #26
   8f67a:	f57f ad5d 	bpl.w	8f138 <mw_set_window_visible+0x134>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f67e:	230a      	movs	r3, #10
   8f680:	e760      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f682:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f686:	0698      	lsls	r0, r3, #26
   8f688:	f57f ad51 	bpl.w	8f12e <mw_set_window_visible+0x12a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f68c:	2309      	movs	r3, #9
   8f68e:	e759      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f690:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f694:	069f      	lsls	r7, r3, #26
   8f696:	f57f ad45 	bpl.w	8f124 <mw_set_window_visible+0x120>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f69a:	2308      	movs	r3, #8
   8f69c:	e752      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f69e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f6a2:	0698      	lsls	r0, r3, #26
   8f6a4:	f57f ae10 	bpl.w	8f2c8 <mw_set_window_visible+0x2c4>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f6a8:	200a      	movs	r0, #10
   8f6aa:	e73b      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f6ac:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f6b0:	069f      	lsls	r7, r3, #26
   8f6b2:	f57f ae04 	bpl.w	8f2be <mw_set_window_visible+0x2ba>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f6b6:	2009      	movs	r0, #9
   8f6b8:	e734      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f6ba:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f6be:	069f      	lsls	r7, r3, #26
   8f6c0:	f57f ae11 	bpl.w	8f2e6 <mw_set_window_visible+0x2e2>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f6c4:	200d      	movs	r0, #13
   8f6c6:	e72d      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f6c8:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f6cc:	069b      	lsls	r3, r3, #26
   8f6ce:	f57f ad3d 	bpl.w	8f14c <mw_set_window_visible+0x148>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f6d2:	230c      	movs	r3, #12
   8f6d4:	e736      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f6d6:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f6da:	069a      	lsls	r2, r3, #26
   8f6dc:	f57f ad31 	bpl.w	8f142 <mw_set_window_visible+0x13e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f6e0:	230b      	movs	r3, #11
   8f6e2:	e72f      	b.n	8f544 <mw_set_window_visible+0x540>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f6e4:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f6e8:	069a      	lsls	r2, r3, #26
   8f6ea:	f57f adf7 	bpl.w	8f2dc <mw_set_window_visible+0x2d8>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f6ee:	200c      	movs	r0, #12
   8f6f0:	e718      	b.n	8f524 <mw_set_window_visible+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f6f2:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f6f6:	0699      	lsls	r1, r3, #26
   8f6f8:	f57f adeb 	bpl.w	8f2d2 <mw_set_window_visible+0x2ce>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   8f6fc:	200b      	movs	r0, #11
   8f6fe:	e711      	b.n	8f524 <mw_set_window_visible+0x520>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f700:	230c      	movs	r3, #12
		if (minimised_windows[i] == window_id)
   8f702:	4619      	mov	r1, r3
			minimised_windows[i] = minimised_windows[i + 1U];
   8f704:	18d0      	adds	r0, r2, r3
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f706:	3301      	adds	r3, #1
			minimised_windows[i] = minimised_windows[i + 1U];
   8f708:	7840      	ldrb	r0, [r0, #1]
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f70a:	b2db      	uxtb	r3, r3
   8f70c:	2b0e      	cmp	r3, #14
			minimised_windows[i] = minimised_windows[i + 1U];
   8f70e:	5450      	strb	r0, [r2, r1]
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f710:	f43f af49 	beq.w	8f5a6 <mw_set_window_visible+0x5a2>
		if (shift && i < (MW_MAX_WINDOW_COUNT - 1U))
   8f714:	2b0d      	cmp	r3, #13
		if (minimised_windows[i] == window_id)
   8f716:	4619      	mov	r1, r3
		if (shift && i < (MW_MAX_WINDOW_COUNT - 1U))
   8f718:	d1f4      	bne.n	8f704 <mw_set_window_visible+0x700>
   8f71a:	e744      	b.n	8f5a6 <mw_set_window_visible+0x5a2>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f71c:	230a      	movs	r3, #10
		if (minimised_windows[i] == window_id)
   8f71e:	4619      	mov	r1, r3
   8f720:	e7f0      	b.n	8f704 <mw_set_window_visible+0x700>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f722:	2308      	movs	r3, #8
		if (minimised_windows[i] == window_id)
   8f724:	4619      	mov	r1, r3
   8f726:	e7ed      	b.n	8f704 <mw_set_window_visible+0x700>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f728:	2306      	movs	r3, #6
		if (minimised_windows[i] == window_id)
   8f72a:	4619      	mov	r1, r3
   8f72c:	e7ea      	b.n	8f704 <mw_set_window_visible+0x700>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f72e:	2304      	movs	r3, #4
		if (minimised_windows[i] == window_id)
   8f730:	4619      	mov	r1, r3
   8f732:	e7e7      	b.n	8f704 <mw_set_window_visible+0x700>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f734:	2302      	movs	r3, #2
		if (minimised_windows[i] == window_id)
   8f736:	4619      	mov	r1, r3
   8f738:	e7e4      	b.n	8f704 <mw_set_window_visible+0x700>
   8f73a:	bf00      	nop
   8f73c:	0008b995 	.word	0x0008b995
   8f740:	0008e059 	.word	0x0008e059
   8f744:	20071848 	.word	0x20071848
   8f748:	00095add 	.word	0x00095add
   8f74c:	2301      	movs	r3, #1
   8f74e:	4619      	mov	r1, r3
			minimised_windows[i] = minimised_windows[i + 1U];
   8f750:	18d0      	adds	r0, r2, r3
   8f752:	7840      	ldrb	r0, [r0, #1]
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f754:	3301      	adds	r3, #1
			minimised_windows[i] = minimised_windows[i + 1U];
   8f756:	5450      	strb	r0, [r2, r1]
   8f758:	e7dc      	b.n	8f714 <mw_set_window_visible+0x710>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f75a:	2305      	movs	r3, #5
		if (minimised_windows[i] == window_id)
   8f75c:	4619      	mov	r1, r3
   8f75e:	e7f7      	b.n	8f750 <mw_set_window_visible+0x74c>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f760:	2303      	movs	r3, #3
		if (minimised_windows[i] == window_id)
   8f762:	4619      	mov	r1, r3
   8f764:	e7f4      	b.n	8f750 <mw_set_window_visible+0x74c>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f766:	230b      	movs	r3, #11
		if (minimised_windows[i] == window_id)
   8f768:	4619      	mov	r1, r3
   8f76a:	e7f1      	b.n	8f750 <mw_set_window_visible+0x74c>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f76c:	2309      	movs	r3, #9
		if (minimised_windows[i] == window_id)
   8f76e:	4619      	mov	r1, r3
   8f770:	e7ee      	b.n	8f750 <mw_set_window_visible+0x74c>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   8f772:	2307      	movs	r3, #7
		if (minimised_windows[i] == window_id)
   8f774:	4619      	mov	r1, r3
   8f776:	e7eb      	b.n	8f750 <mw_set_window_visible+0x74c>
			if (minimised_windows[i] == MW_ROOT_WINDOW_ID)
   8f778:	2302      	movs	r3, #2
   8f77a:	e6c9      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f77c:	2301      	movs	r3, #1
   8f77e:	e6c7      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f780:	230c      	movs	r3, #12
   8f782:	e6c5      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f784:	2303      	movs	r3, #3
   8f786:	e6c3      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f788:	230b      	movs	r3, #11
   8f78a:	e6c1      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f78c:	230a      	movs	r3, #10
   8f78e:	e6bf      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f790:	2309      	movs	r3, #9
   8f792:	e6bd      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f794:	2308      	movs	r3, #8
   8f796:	e6bb      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f798:	2307      	movs	r3, #7
   8f79a:	e6b9      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f79c:	2306      	movs	r3, #6
   8f79e:	e6b7      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f7a0:	2305      	movs	r3, #5
   8f7a2:	e6b5      	b.n	8f510 <mw_set_window_visible+0x50c>
   8f7a4:	2304      	movs	r3, #4
   8f7a6:	e6b3      	b.n	8f510 <mw_set_window_visible+0x50c>

0008f7a8 <mw_reposition_window>:
{
   8f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int16_t gl_max_x = MW_GL_MAX_X;
   8f7ac:	4bb9      	ldr	r3, [pc, #740]	; (8fa94 <mw_reposition_window+0x2ec>)
{
   8f7ae:	b088      	sub	sp, #32
   8f7b0:	4604      	mov	r4, r0
   8f7b2:	4688      	mov	r8, r1
   8f7b4:	4617      	mov	r7, r2
	int16_t gl_max_x = MW_GL_MAX_X;
   8f7b6:	4798      	blx	r3
	int16_t gl_max_y = MW_GL_MAX_Y;
   8f7b8:	4bb7      	ldr	r3, [pc, #732]	; (8fa98 <mw_reposition_window+0x2f0>)
	int16_t gl_max_x = MW_GL_MAX_X;
   8f7ba:	4606      	mov	r6, r0
	int16_t gl_max_y = MW_GL_MAX_Y;
   8f7bc:	4798      	blx	r3
	if (window_handle == MW_INVALID_HANDLE)
   8f7be:	b94c      	cbnz	r4, 8f7d4 <mw_reposition_window+0x2c>
		MW_ASSERT((bool)false, "Bad window handle");
   8f7c0:	4bb6      	ldr	r3, [pc, #728]	; (8fa9c <mw_reposition_window+0x2f4>)
   8f7c2:	f241 129d 	movw	r2, #4509	; 0x119d
   8f7c6:	49b6      	ldr	r1, [pc, #728]	; (8faa0 <mw_reposition_window+0x2f8>)
   8f7c8:	2000      	movs	r0, #0
   8f7ca:	4cb6      	ldr	r4, [pc, #728]	; (8faa4 <mw_reposition_window+0x2fc>)
   8f7cc:	47a0      	blx	r4
}
   8f7ce:	b008      	add	sp, #32
   8f7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (mw_all_windows[i].window_handle == window_handle &&
   8f7d4:	4db4      	ldr	r5, [pc, #720]	; (8faa8 <mw_reposition_window+0x300>)
   8f7d6:	696b      	ldr	r3, [r5, #20]
   8f7d8:	429c      	cmp	r4, r3
   8f7da:	d041      	beq.n	8f860 <mw_reposition_window+0xb8>
   8f7dc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   8f7de:	429c      	cmp	r4, r3
   8f7e0:	d044      	beq.n	8f86c <mw_reposition_window+0xc4>
   8f7e2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   8f7e6:	429c      	cmp	r4, r3
   8f7e8:	d045      	beq.n	8f876 <mw_reposition_window+0xce>
   8f7ea:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   8f7ee:	429c      	cmp	r4, r3
   8f7f0:	d047      	beq.n	8f882 <mw_reposition_window+0xda>
   8f7f2:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
   8f7f6:	429c      	cmp	r4, r3
   8f7f8:	f000 8086 	beq.w	8f908 <mw_reposition_window+0x160>
   8f7fc:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   8f800:	429c      	cmp	r4, r3
   8f802:	f000 8088 	beq.w	8f916 <mw_reposition_window+0x16e>
   8f806:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   8f80a:	429c      	cmp	r4, r3
   8f80c:	f000 808a 	beq.w	8f924 <mw_reposition_window+0x17c>
   8f810:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   8f814:	429c      	cmp	r4, r3
   8f816:	f000 808c 	beq.w	8f932 <mw_reposition_window+0x18a>
   8f81a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
   8f81e:	429c      	cmp	r4, r3
   8f820:	f000 808e 	beq.w	8f940 <mw_reposition_window+0x198>
   8f824:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
   8f828:	429c      	cmp	r4, r3
   8f82a:	f000 8090 	beq.w	8f94e <mw_reposition_window+0x1a6>
   8f82e:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
   8f832:	429c      	cmp	r4, r3
   8f834:	f000 8092 	beq.w	8f95c <mw_reposition_window+0x1b4>
   8f838:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
   8f83c:	429c      	cmp	r4, r3
   8f83e:	f000 8094 	beq.w	8f96a <mw_reposition_window+0x1c2>
   8f842:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
   8f846:	429c      	cmp	r4, r3
   8f848:	f000 8096 	beq.w	8f978 <mw_reposition_window+0x1d0>
   8f84c:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
   8f850:	429c      	cmp	r4, r3
   8f852:	d1b5      	bne.n	8f7c0 <mw_reposition_window+0x18>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f854:	f8d5 334c 	ldr.w	r3, [r5, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f858:	069b      	lsls	r3, r3, #26
   8f85a:	d5b1      	bpl.n	8f7c0 <mw_reposition_window+0x18>
   8f85c:	230d      	movs	r3, #13
   8f85e:	e015      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f860:	68eb      	ldr	r3, [r5, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8f862:	069a      	lsls	r2, r3, #26
   8f864:	d4ac      	bmi.n	8f7c0 <mw_reposition_window+0x18>
   8f866:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   8f868:	429c      	cmp	r4, r3
   8f86a:	d1ba      	bne.n	8f7e2 <mw_reposition_window+0x3a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f86c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f86e:	069b      	lsls	r3, r3, #26
   8f870:	d5b7      	bpl.n	8f7e2 <mw_reposition_window+0x3a>
   8f872:	2301      	movs	r3, #1
   8f874:	e00a      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f876:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f87a:	0699      	lsls	r1, r3, #26
   8f87c:	d5b5      	bpl.n	8f7ea <mw_reposition_window+0x42>
   8f87e:	2302      	movs	r3, #2
   8f880:	e004      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f882:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f886:	069a      	lsls	r2, r3, #26
   8f888:	d5b3      	bpl.n	8f7f2 <mw_reposition_window+0x4a>
   8f88a:	2303      	movs	r3, #3
	int16_t gl_max_x = MW_GL_MAX_X;
   8f88c:	3e01      	subs	r6, #1
	if (new_x > gl_max_x || new_y > gl_max_y || new_x < -mw_all_windows[window_id].window_rect.width || new_y <  -mw_all_windows[window_id].window_rect.height)
   8f88e:	b236      	sxth	r6, r6
   8f890:	4546      	cmp	r6, r8
   8f892:	db9c      	blt.n	8f7ce <mw_reposition_window+0x26>
	int16_t gl_max_y = MW_GL_MAX_Y;
   8f894:	3801      	subs	r0, #1
	if (new_x > gl_max_x || new_y > gl_max_y || new_x < -mw_all_windows[window_id].window_rect.width || new_y <  -mw_all_windows[window_id].window_rect.height)
   8f896:	b200      	sxth	r0, r0
   8f898:	42b8      	cmp	r0, r7
   8f89a:	db98      	blt.n	8f7ce <mw_reposition_window+0x26>
   8f89c:	eb05 1383 	add.w	r3, r5, r3, lsl #6
   8f8a0:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   8f8a4:	4251      	negs	r1, r2
   8f8a6:	4588      	cmp	r8, r1
   8f8a8:	db91      	blt.n	8f7ce <mw_reposition_window+0x26>
   8f8aa:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
   8f8ae:	4248      	negs	r0, r1
   8f8b0:	4287      	cmp	r7, r0
   8f8b2:	db8c      	blt.n	8f7ce <mw_reposition_window+0x26>
	r.x = new_x;
   8f8b4:	f04f 0e00 	mov.w	lr, #0
   8f8b8:	4670      	mov	r0, lr
			mw_all_controls[i].control_rect.x += (new_x - mw_all_windows[window_id].window_rect.x);
   8f8ba:	461e      	mov	r6, r3
	r.x = new_x;
   8f8bc:	f362 000f 	bfi	r0, r2, #0, #16
   8f8c0:	f368 0e0f 	bfi	lr, r8, #0, #16
   8f8c4:	4b79      	ldr	r3, [pc, #484]	; (8faac <mw_reposition_window+0x304>)
   8f8c6:	f367 4e1f 	bfi	lr, r7, #16, #16
   8f8ca:	f361 401f 	bfi	r0, r1, #16, #16
   8f8ce:	f8cd e004 	str.w	lr, [sp, #4]
   8f8d2:	9002      	str	r0, [sp, #8]
   8f8d4:	f503 7240 	add.w	r2, r3, #768	; 0x300
   8f8d8:	e002      	b.n	8f8e0 <mw_reposition_window+0x138>
   8f8da:	3320      	adds	r3, #32
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   8f8dc:	4293      	cmp	r3, r2
   8f8de:	d052      	beq.n	8f986 <mw_reposition_window+0x1de>
		if (mw_all_controls[i].parent_handle == window_handle && (mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED)
   8f8e0:	6958      	ldr	r0, [r3, #20]
   8f8e2:	4284      	cmp	r4, r0
   8f8e4:	d1f9      	bne.n	8f8da <mw_reposition_window+0x132>
   8f8e6:	8b99      	ldrh	r1, [r3, #28]
   8f8e8:	0749      	lsls	r1, r1, #29
   8f8ea:	d5f6      	bpl.n	8f8da <mw_reposition_window+0x132>
			mw_all_controls[i].control_rect.x += (new_x - mw_all_windows[window_id].window_rect.x);
   8f8ec:	8b30      	ldrh	r0, [r6, #24]
   8f8ee:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
			mw_all_controls[i].control_rect.y += (new_y - mw_all_windows[window_id].window_rect.y);
   8f8f2:	8b71      	ldrh	r1, [r6, #26]
			mw_all_controls[i].control_rect.x += (new_x - mw_all_windows[window_id].window_rect.x);
   8f8f4:	eba8 0000 	sub.w	r0, r8, r0
   8f8f8:	4470      	add	r0, lr
			mw_all_controls[i].control_rect.y += (new_y - mw_all_windows[window_id].window_rect.y);
   8f8fa:	f8b3 e00e 	ldrh.w	lr, [r3, #14]
   8f8fe:	1a79      	subs	r1, r7, r1
   8f900:	4471      	add	r1, lr
			mw_all_controls[i].control_rect.x += (new_x - mw_all_windows[window_id].window_rect.x);
   8f902:	8198      	strh	r0, [r3, #12]
			mw_all_controls[i].control_rect.y += (new_y - mw_all_windows[window_id].window_rect.y);
   8f904:	81d9      	strh	r1, [r3, #14]
   8f906:	e7e8      	b.n	8f8da <mw_reposition_window+0x132>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f908:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f90c:	069b      	lsls	r3, r3, #26
   8f90e:	f57f af75 	bpl.w	8f7fc <mw_reposition_window+0x54>
   8f912:	2304      	movs	r3, #4
   8f914:	e7ba      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f916:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f91a:	0699      	lsls	r1, r3, #26
   8f91c:	f57f af73 	bpl.w	8f806 <mw_reposition_window+0x5e>
   8f920:	2305      	movs	r3, #5
   8f922:	e7b3      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f924:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f928:	069a      	lsls	r2, r3, #26
   8f92a:	f57f af71 	bpl.w	8f810 <mw_reposition_window+0x68>
   8f92e:	2306      	movs	r3, #6
   8f930:	e7ac      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f932:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f936:	069b      	lsls	r3, r3, #26
   8f938:	f57f af6f 	bpl.w	8f81a <mw_reposition_window+0x72>
   8f93c:	2307      	movs	r3, #7
   8f93e:	e7a5      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f940:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f944:	0699      	lsls	r1, r3, #26
   8f946:	f57f af6d 	bpl.w	8f824 <mw_reposition_window+0x7c>
   8f94a:	2308      	movs	r3, #8
   8f94c:	e79e      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f94e:	f8d5 324c 	ldr.w	r3, [r5, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f952:	069a      	lsls	r2, r3, #26
   8f954:	f57f af6b 	bpl.w	8f82e <mw_reposition_window+0x86>
   8f958:	2309      	movs	r3, #9
   8f95a:	e797      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f95c:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f960:	069b      	lsls	r3, r3, #26
   8f962:	f57f af69 	bpl.w	8f838 <mw_reposition_window+0x90>
   8f966:	230a      	movs	r3, #10
   8f968:	e790      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f96a:	f8d5 32cc 	ldr.w	r3, [r5, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8f96e:	0699      	lsls	r1, r3, #26
   8f970:	f57f af67 	bpl.w	8f842 <mw_reposition_window+0x9a>
   8f974:	230b      	movs	r3, #11
   8f976:	e789      	b.n	8f88c <mw_reposition_window+0xe4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8f978:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8f97c:	069a      	lsls	r2, r3, #26
   8f97e:	f57f af65 	bpl.w	8f84c <mw_reposition_window+0xa4>
   8f982:	230c      	movs	r3, #12
   8f984:	e782      	b.n	8f88c <mw_reposition_window+0xe4>
	calculate_new_window_size_details(window_handle, &r);
   8f986:	4b4a      	ldr	r3, [pc, #296]	; (8fab0 <mw_reposition_window+0x308>)
   8f988:	a901      	add	r1, sp, #4
   8f98a:	4620      	mov	r0, r4
   8f98c:	4798      	blx	r3
		if (mw_all_windows[i].window_handle == window_handle &&
   8f98e:	696b      	ldr	r3, [r5, #20]
   8f990:	429c      	cmp	r4, r3
   8f992:	d050      	beq.n	8fa36 <mw_reposition_window+0x28e>
   8f994:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   8f996:	429c      	cmp	r4, r3
   8f998:	d065      	beq.n	8fa66 <mw_reposition_window+0x2be>
   8f99a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   8f99e:	429c      	cmp	r4, r3
   8f9a0:	d05b      	beq.n	8fa5a <mw_reposition_window+0x2b2>
   8f9a2:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   8f9a6:	429c      	cmp	r4, r3
   8f9a8:	d051      	beq.n	8fa4e <mw_reposition_window+0x2a6>
   8f9aa:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
   8f9ae:	429c      	cmp	r4, r3
   8f9b0:	d047      	beq.n	8fa42 <mw_reposition_window+0x29a>
   8f9b2:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   8f9b6:	429c      	cmp	r4, r3
   8f9b8:	f000 8087 	beq.w	8faca <mw_reposition_window+0x322>
   8f9bc:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   8f9c0:	429c      	cmp	r4, r3
   8f9c2:	d07b      	beq.n	8fabc <mw_reposition_window+0x314>
   8f9c4:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   8f9c8:	429c      	cmp	r4, r3
   8f9ca:	d05d      	beq.n	8fa88 <mw_reposition_window+0x2e0>
   8f9cc:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
   8f9d0:	429c      	cmp	r4, r3
   8f9d2:	d053      	beq.n	8fa7c <mw_reposition_window+0x2d4>
   8f9d4:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
   8f9d8:	429c      	cmp	r4, r3
   8f9da:	d049      	beq.n	8fa70 <mw_reposition_window+0x2c8>
   8f9dc:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
   8f9e0:	429c      	cmp	r4, r3
   8f9e2:	d079      	beq.n	8fad8 <mw_reposition_window+0x330>
   8f9e4:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
   8f9e8:	429c      	cmp	r4, r3
   8f9ea:	f000 8081 	beq.w	8faf0 <mw_reposition_window+0x348>
   8f9ee:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
   8f9f2:	429c      	cmp	r4, r3
   8f9f4:	d076      	beq.n	8fae4 <mw_reposition_window+0x33c>
   8f9f6:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
   8f9fa:	429c      	cmp	r4, r3
   8f9fc:	d07f      	beq.n	8fafe <mw_reposition_window+0x356>
   8f9fe:	260e      	movs	r6, #14
   8fa00:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8fa02:	4b26      	ldr	r3, [pc, #152]	; (8fa9c <mw_reposition_window+0x2f4>)
   8fa04:	f241 5262 	movw	r2, #5474	; 0x1562
   8fa08:	492a      	ldr	r1, [pc, #168]	; (8fab4 <mw_reposition_window+0x30c>)
   8fa0a:	4f26      	ldr	r7, [pc, #152]	; (8faa4 <mw_reposition_window+0x2fc>)
   8fa0c:	47b8      	blx	r7
	new_message.message_data = message_data;
   8fa0e:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   8fa10:	2105      	movs	r1, #5
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8fa12:	eb05 1586 	add.w	r5, r5, r6, lsl #6
   8fa16:	68ea      	ldr	r2, [r5, #12]
	new_message.message_data = message_data;
   8fa18:	9306      	str	r3, [sp, #24]
	new_message.message_recipient_type = recipient_type;
   8fa1a:	f88d 3015 	strb.w	r3, [sp, #21]
	new_message.sender_handle = sender_handle;
   8fa1e:	9303      	str	r3, [sp, #12]
	new_message.message_pointer = message_pointer;
   8fa20:	9307      	str	r3, [sp, #28]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8fa22:	0693      	lsls	r3, r2, #26
	new_message.recipient_handle = recipient_handle;
   8fa24:	9404      	str	r4, [sp, #16]
	new_message.message_id = message_id;
   8fa26:	f88d 1014 	strb.w	r1, [sp, #20]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8fa2a:	f57f aed0 	bpl.w	8f7ce <mw_reposition_window+0x26>
		(void)mw_message_queue_insert(&new_message);
   8fa2e:	a803      	add	r0, sp, #12
   8fa30:	4b21      	ldr	r3, [pc, #132]	; (8fab8 <mw_reposition_window+0x310>)
   8fa32:	4798      	blx	r3
   8fa34:	e6cb      	b.n	8f7ce <mw_reposition_window+0x26>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fa36:	68eb      	ldr	r3, [r5, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8fa38:	069a      	lsls	r2, r3, #26
   8fa3a:	d5ab      	bpl.n	8f994 <mw_reposition_window+0x1ec>
   8fa3c:	2600      	movs	r6, #0
   8fa3e:	2001      	movs	r0, #1
   8fa40:	e7df      	b.n	8fa02 <mw_reposition_window+0x25a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fa42:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fa46:	0698      	lsls	r0, r3, #26
   8fa48:	d5b3      	bpl.n	8f9b2 <mw_reposition_window+0x20a>
   8fa4a:	2604      	movs	r6, #4
   8fa4c:	e7f7      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fa4e:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8fa52:	069e      	lsls	r6, r3, #26
   8fa54:	d5a9      	bpl.n	8f9aa <mw_reposition_window+0x202>
   8fa56:	2603      	movs	r6, #3
   8fa58:	e7f1      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fa5a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fa5e:	069f      	lsls	r7, r3, #26
   8fa60:	d59f      	bpl.n	8f9a2 <mw_reposition_window+0x1fa>
   8fa62:	2602      	movs	r6, #2
   8fa64:	e7eb      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fa66:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fa68:	069b      	lsls	r3, r3, #26
   8fa6a:	d596      	bpl.n	8f99a <mw_reposition_window+0x1f2>
   8fa6c:	2601      	movs	r6, #1
   8fa6e:	e7e6      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fa70:	f8d5 324c 	ldr.w	r3, [r5, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fa74:	069e      	lsls	r6, r3, #26
   8fa76:	d5b1      	bpl.n	8f9dc <mw_reposition_window+0x234>
   8fa78:	2609      	movs	r6, #9
   8fa7a:	e7e0      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fa7c:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fa80:	069f      	lsls	r7, r3, #26
   8fa82:	d5a7      	bpl.n	8f9d4 <mw_reposition_window+0x22c>
   8fa84:	2608      	movs	r6, #8
   8fa86:	e7da      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fa88:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8fa8c:	069b      	lsls	r3, r3, #26
   8fa8e:	d59d      	bpl.n	8f9cc <mw_reposition_window+0x224>
   8fa90:	2607      	movs	r6, #7
   8fa92:	e7d4      	b.n	8fa3e <mw_reposition_window+0x296>
   8fa94:	00086e2d 	.word	0x00086e2d
   8fa98:	00086e31 	.word	0x00086e31
   8fa9c:	000ab764 	.word	0x000ab764
   8faa0:	000ab4f8 	.word	0x000ab4f8
   8faa4:	00095add 	.word	0x00095add
   8faa8:	20071bd8 	.word	0x20071bd8
   8faac:	20071858 	.word	0x20071858
   8fab0:	00088621 	.word	0x00088621
   8fab4:	000ab710 	.word	0x000ab710
   8fab8:	00095bc1 	.word	0x00095bc1
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fabc:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fac0:	069a      	lsls	r2, r3, #26
   8fac2:	f57f af7f 	bpl.w	8f9c4 <mw_reposition_window+0x21c>
   8fac6:	2606      	movs	r6, #6
   8fac8:	e7b9      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8faca:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8face:	0699      	lsls	r1, r3, #26
   8fad0:	f57f af74 	bpl.w	8f9bc <mw_reposition_window+0x214>
   8fad4:	2605      	movs	r6, #5
   8fad6:	e7b2      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fad8:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fadc:	0698      	lsls	r0, r3, #26
   8fade:	d581      	bpl.n	8f9e4 <mw_reposition_window+0x23c>
   8fae0:	260a      	movs	r6, #10
   8fae2:	e7ac      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fae4:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fae8:	069a      	lsls	r2, r3, #26
   8faea:	d584      	bpl.n	8f9f6 <mw_reposition_window+0x24e>
   8faec:	260c      	movs	r6, #12
   8faee:	e7a6      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8faf0:	f8d5 32cc 	ldr.w	r3, [r5, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8faf4:	0699      	lsls	r1, r3, #26
   8faf6:	f57f af7a 	bpl.w	8f9ee <mw_reposition_window+0x246>
   8fafa:	260b      	movs	r6, #11
   8fafc:	e79f      	b.n	8fa3e <mw_reposition_window+0x296>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fafe:	f8d5 334c 	ldr.w	r3, [r5, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fb02:	f013 0320 	ands.w	r3, r3, #32
   8fb06:	bf18      	it	ne
   8fb08:	260d      	movne	r6, #13
   8fb0a:	d198      	bne.n	8fa3e <mw_reposition_window+0x296>
   8fb0c:	4618      	mov	r0, r3
   8fb0e:	260e      	movs	r6, #14
   8fb10:	e777      	b.n	8fa02 <mw_reposition_window+0x25a>
   8fb12:	bf00      	nop

0008fb14 <mw_resize_window>:
{
   8fb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8fb18:	b08b      	sub	sp, #44	; 0x2c
	if (window_handle == MW_INVALID_HANDLE)
   8fb1a:	b960      	cbnz	r0, 8fb36 <mw_resize_window+0x22>
		MW_ASSERT((bool)false, "Bad window handle");
   8fb1c:	4bbf      	ldr	r3, [pc, #764]	; (8fe1c <mw_resize_window+0x308>)
   8fb1e:	f241 12cf 	movw	r2, #4559	; 0x11cf
   8fb22:	49bf      	ldr	r1, [pc, #764]	; (8fe20 <mw_resize_window+0x30c>)
   8fb24:	2000      	movs	r0, #0
   8fb26:	4cbf      	ldr	r4, [pc, #764]	; (8fe24 <mw_resize_window+0x310>)
   8fb28:	47a0      	blx	r4
		return (false);
   8fb2a:	f04f 0900 	mov.w	r9, #0
}
   8fb2e:	4648      	mov	r0, r9
   8fb30:	b00b      	add	sp, #44	; 0x2c
   8fb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (mw_all_windows[i].window_handle == window_handle &&
   8fb36:	4cbc      	ldr	r4, [pc, #752]	; (8fe28 <mw_resize_window+0x314>)
   8fb38:	460e      	mov	r6, r1
   8fb3a:	6963      	ldr	r3, [r4, #20]
   8fb3c:	4617      	mov	r7, r2
   8fb3e:	4298      	cmp	r0, r3
   8fb40:	4605      	mov	r5, r0
   8fb42:	d03f      	beq.n	8fbc4 <mw_resize_window+0xb0>
   8fb44:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8fb46:	429d      	cmp	r5, r3
   8fb48:	d042      	beq.n	8fbd0 <mw_resize_window+0xbc>
   8fb4a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   8fb4e:	429d      	cmp	r5, r3
   8fb50:	d044      	beq.n	8fbdc <mw_resize_window+0xc8>
   8fb52:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   8fb56:	429d      	cmp	r5, r3
   8fb58:	d047      	beq.n	8fbea <mw_resize_window+0xd6>
   8fb5a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   8fb5e:	429d      	cmp	r5, r3
   8fb60:	d04a      	beq.n	8fbf8 <mw_resize_window+0xe4>
   8fb62:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   8fb66:	429d      	cmp	r5, r3
   8fb68:	d04d      	beq.n	8fc06 <mw_resize_window+0xf2>
   8fb6a:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   8fb6e:	429d      	cmp	r5, r3
   8fb70:	d050      	beq.n	8fc14 <mw_resize_window+0x100>
   8fb72:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   8fb76:	429d      	cmp	r5, r3
   8fb78:	f000 810d 	beq.w	8fd96 <mw_resize_window+0x282>
   8fb7c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   8fb80:	429d      	cmp	r5, r3
   8fb82:	f000 8110 	beq.w	8fda6 <mw_resize_window+0x292>
   8fb86:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   8fb8a:	429d      	cmp	r5, r3
   8fb8c:	f000 8113 	beq.w	8fdb6 <mw_resize_window+0x2a2>
   8fb90:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   8fb94:	429d      	cmp	r5, r3
   8fb96:	f000 8116 	beq.w	8fdc6 <mw_resize_window+0x2b2>
   8fb9a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   8fb9e:	429d      	cmp	r5, r3
   8fba0:	f000 8119 	beq.w	8fdd6 <mw_resize_window+0x2c2>
   8fba4:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   8fba8:	429d      	cmp	r5, r3
   8fbaa:	f000 811c 	beq.w	8fde6 <mw_resize_window+0x2d2>
   8fbae:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   8fbb2:	429d      	cmp	r5, r3
   8fbb4:	d1b2      	bne.n	8fb1c <mw_resize_window+0x8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fbb6:	f8d4 234c 	ldr.w	r2, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fbba:	0693      	lsls	r3, r2, #26
   8fbbc:	d5ae      	bpl.n	8fb1c <mw_resize_window+0x8>
   8fbbe:	f04f 080d 	mov.w	r8, #13
   8fbc2:	e02d      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fbc4:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8fbc6:	069a      	lsls	r2, r3, #26
   8fbc8:	d4a8      	bmi.n	8fb1c <mw_resize_window+0x8>
   8fbca:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8fbcc:	429d      	cmp	r5, r3
   8fbce:	d1bc      	bne.n	8fb4a <mw_resize_window+0x36>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fbd0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fbd2:	0693      	lsls	r3, r2, #26
   8fbd4:	d5b9      	bpl.n	8fb4a <mw_resize_window+0x36>
   8fbd6:	f04f 0801 	mov.w	r8, #1
   8fbda:	e021      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fbdc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fbe0:	0690      	lsls	r0, r2, #26
   8fbe2:	d5b6      	bpl.n	8fb52 <mw_resize_window+0x3e>
   8fbe4:	f04f 0802 	mov.w	r8, #2
   8fbe8:	e01a      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fbea:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8fbee:	0691      	lsls	r1, r2, #26
   8fbf0:	d5b3      	bpl.n	8fb5a <mw_resize_window+0x46>
   8fbf2:	f04f 0803 	mov.w	r8, #3
   8fbf6:	e013      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fbf8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fbfc:	0693      	lsls	r3, r2, #26
   8fbfe:	d5b0      	bpl.n	8fb62 <mw_resize_window+0x4e>
   8fc00:	f04f 0804 	mov.w	r8, #4
   8fc04:	e00c      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fc06:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fc0a:	0690      	lsls	r0, r2, #26
   8fc0c:	d5ad      	bpl.n	8fb6a <mw_resize_window+0x56>
   8fc0e:	f04f 0805 	mov.w	r8, #5
   8fc12:	e005      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fc14:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fc18:	0691      	lsls	r1, r2, #26
   8fc1a:	d5aa      	bpl.n	8fb72 <mw_resize_window+0x5e>
   8fc1c:	f04f 0806 	mov.w	r8, #6
	if (!check_window_dimensions(new_width,
   8fc20:	4639      	mov	r1, r7
   8fc22:	4630      	mov	r0, r6
   8fc24:	4b81      	ldr	r3, [pc, #516]	; (8fe2c <mw_resize_window+0x318>)
   8fc26:	4798      	blx	r3
   8fc28:	4681      	mov	r9, r0
   8fc2a:	2800      	cmp	r0, #0
   8fc2c:	f43f af7f 	beq.w	8fb2e <mw_resize_window+0x1a>
	r.width = new_width;
   8fc30:	2300      	movs	r3, #0
	r.x = mw_all_windows[window_id].window_rect.x;
   8fc32:	eb04 1888 	add.w	r8, r4, r8, lsl #6
   8fc36:	f8d8 2018 	ldr.w	r2, [r8, #24]
	r.width = new_width;
   8fc3a:	f366 030f 	bfi	r3, r6, #0, #16
	r.x = mw_all_windows[window_id].window_rect.x;
   8fc3e:	a90a      	add	r1, sp, #40	; 0x28
	r.width = new_width;
   8fc40:	f367 431f 	bfi	r3, r7, #16, #16
	r.x = mw_all_windows[window_id].window_rect.x;
   8fc44:	f841 2d1c 	str.w	r2, [r1, #-28]!
	r.width = new_width;
   8fc48:	9304      	str	r3, [sp, #16]
	calculate_new_window_size_details(window_handle, &r);
   8fc4a:	4628      	mov	r0, r5
   8fc4c:	4b78      	ldr	r3, [pc, #480]	; (8fe30 <mw_resize_window+0x31c>)
   8fc4e:	4798      	blx	r3
		if (mw_all_windows[i].window_handle == window_handle &&
   8fc50:	6963      	ldr	r3, [r4, #20]
	mw_post_message(MW_WINDOW_RESIZED_MESSAGE,
   8fc52:	ea47 4206 	orr.w	r2, r7, r6, lsl #16
		if (mw_all_windows[i].window_handle == window_handle &&
   8fc56:	429d      	cmp	r5, r3
	mw_post_message(MW_WINDOW_RESIZED_MESSAGE,
   8fc58:	9201      	str	r2, [sp, #4]
		if (mw_all_windows[i].window_handle == window_handle &&
   8fc5a:	f000 80d1 	beq.w	8fe00 <mw_resize_window+0x2ec>
   8fc5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   8fc60:	429d      	cmp	r5, r3
   8fc62:	f000 80d4 	beq.w	8fe0e <mw_resize_window+0x2fa>
   8fc66:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   8fc6a:	429d      	cmp	r5, r3
   8fc6c:	f000 80ea 	beq.w	8fe44 <mw_resize_window+0x330>
   8fc70:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   8fc74:	429d      	cmp	r5, r3
   8fc76:	f000 80ed 	beq.w	8fe54 <mw_resize_window+0x340>
   8fc7a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   8fc7e:	429d      	cmp	r5, r3
   8fc80:	f000 80f0 	beq.w	8fe64 <mw_resize_window+0x350>
   8fc84:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   8fc88:	429d      	cmp	r5, r3
   8fc8a:	f000 80f3 	beq.w	8fe74 <mw_resize_window+0x360>
   8fc8e:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   8fc92:	429d      	cmp	r5, r3
   8fc94:	f000 80f6 	beq.w	8fe84 <mw_resize_window+0x370>
   8fc98:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   8fc9c:	429d      	cmp	r5, r3
   8fc9e:	f000 80f9 	beq.w	8fe94 <mw_resize_window+0x380>
   8fca2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   8fca6:	429d      	cmp	r5, r3
   8fca8:	f000 80fb 	beq.w	8fea2 <mw_resize_window+0x38e>
   8fcac:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
   8fcb0:	429d      	cmp	r5, r3
   8fcb2:	f000 80fd 	beq.w	8feb0 <mw_resize_window+0x39c>
   8fcb6:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   8fcba:	429d      	cmp	r5, r3
   8fcbc:	f000 80ff 	beq.w	8febe <mw_resize_window+0x3aa>
   8fcc0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   8fcc4:	429d      	cmp	r5, r3
   8fcc6:	f000 8101 	beq.w	8fecc <mw_resize_window+0x3b8>
   8fcca:	f8d4 3314 	ldr.w	r3, [r4, #788]	; 0x314
   8fcce:	429d      	cmp	r5, r3
   8fcd0:	f000 8103 	beq.w	8feda <mw_resize_window+0x3c6>
   8fcd4:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
   8fcd8:	429d      	cmp	r5, r3
   8fcda:	f000 8105 	beq.w	8fee8 <mw_resize_window+0x3d4>
   8fcde:	260e      	movs	r6, #14
   8fce0:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   8fce2:	4b4e      	ldr	r3, [pc, #312]	; (8fe1c <mw_resize_window+0x308>)
   8fce4:	f241 5262 	movw	r2, #5474	; 0x1562
   8fce8:	4952      	ldr	r1, [pc, #328]	; (8fe34 <mw_resize_window+0x320>)
   8fcea:	f8df b138 	ldr.w	fp, [pc, #312]	; 8fe24 <mw_resize_window+0x310>
   8fcee:	47d8      	blx	fp
	new_message.message_recipient_type = recipient_type;
   8fcf0:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   8fcf2:	2104      	movs	r1, #4
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   8fcf4:	eb04 1486 	add.w	r4, r4, r6, lsl #6
   8fcf8:	68e2      	ldr	r2, [r4, #12]
	new_message.message_data = message_data;
   8fcfa:	9801      	ldr	r0, [sp, #4]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8fcfc:	0694      	lsls	r4, r2, #26
	new_message.message_data = message_data;
   8fcfe:	9008      	str	r0, [sp, #32]
	new_message.recipient_handle = recipient_handle;
   8fd00:	9506      	str	r5, [sp, #24]
	new_message.message_id = message_id;
   8fd02:	f88d 101c 	strb.w	r1, [sp, #28]
	new_message.message_recipient_type = recipient_type;
   8fd06:	f88d 301d 	strb.w	r3, [sp, #29]
	new_message.sender_handle = sender_handle;
   8fd0a:	9305      	str	r3, [sp, #20]
	new_message.message_pointer = message_pointer;
   8fd0c:	9309      	str	r3, [sp, #36]	; 0x24
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   8fd0e:	d502      	bpl.n	8fd16 <mw_resize_window+0x202>
		(void)mw_message_queue_insert(&new_message);
   8fd10:	a805      	add	r0, sp, #20
   8fd12:	4b49      	ldr	r3, [pc, #292]	; (8fe38 <mw_resize_window+0x324>)
   8fd14:	4798      	blx	r3
   8fd16:	f8df a128 	ldr.w	sl, [pc, #296]	; 8fe40 <mw_resize_window+0x32c>
   8fd1a:	46a8      	mov	r8, r5
   8fd1c:	4654      	mov	r4, sl
   8fd1e:	f50a 7640 	add.w	r6, sl, #768	; 0x300
   8fd22:	e003      	b.n	8fd2c <mw_resize_window+0x218>
   8fd24:	3420      	adds	r4, #32
	for (control_id = 0U; control_id < MW_MAX_CONTROL_COUNT; control_id++)
   8fd26:	42a6      	cmp	r6, r4
   8fd28:	f43f af01 	beq.w	8fb2e <mw_resize_window+0x1a>
		if ((mw_all_controls[control_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   8fd2c:	8ba3      	ldrh	r3, [r4, #28]
   8fd2e:	0758      	lsls	r0, r3, #29
   8fd30:	d5f8      	bpl.n	8fd24 <mw_resize_window+0x210>
   8fd32:	6963      	ldr	r3, [r4, #20]
   8fd34:	4598      	cmp	r8, r3
   8fd36:	d1f5      	bne.n	8fd24 <mw_resize_window+0x210>
			mw_post_message(MW_CONTROL_PARENT_WINDOW_RESIZED_MESSAGE,
   8fd38:	69a5      	ldr	r5, [r4, #24]
	if (control_handle == MW_INVALID_HANDLE)
   8fd3a:	2d00      	cmp	r5, #0
   8fd3c:	d05b      	beq.n	8fdf6 <mw_resize_window+0x2e2>
   8fd3e:	4652      	mov	r2, sl
   8fd40:	2300      	movs	r3, #0
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   8fd42:	8b91      	ldrh	r1, [r2, #28]
   8fd44:	461f      	mov	r7, r3
   8fd46:	0749      	lsls	r1, r1, #29
   8fd48:	f103 0301 	add.w	r3, r3, #1
   8fd4c:	d502      	bpl.n	8fd54 <mw_resize_window+0x240>
   8fd4e:	6991      	ldr	r1, [r2, #24]
   8fd50:	428d      	cmp	r5, r1
   8fd52:	d053      	beq.n	8fdfc <mw_resize_window+0x2e8>
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   8fd54:	2b18      	cmp	r3, #24
   8fd56:	f102 0220 	add.w	r2, r2, #32
   8fd5a:	d1f2      	bne.n	8fd42 <mw_resize_window+0x22e>
   8fd5c:	461f      	mov	r7, r3
   8fd5e:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   8fd60:	4b36      	ldr	r3, [pc, #216]	; (8fe3c <mw_resize_window+0x328>)
   8fd62:	f241 5267 	movw	r2, #5479	; 0x1567
   8fd66:	4933      	ldr	r1, [pc, #204]	; (8fe34 <mw_resize_window+0x320>)
   8fd68:	47d8      	blx	fp
	new_message.sender_handle = sender_handle;
   8fd6a:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   8fd6c:	2013      	movs	r0, #19
	new_message.message_recipient_type = recipient_type;
   8fd6e:	2101      	movs	r1, #1
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   8fd70:	4a33      	ldr	r2, [pc, #204]	; (8fe40 <mw_resize_window+0x32c>)
	new_message.sender_handle = sender_handle;
   8fd72:	9305      	str	r3, [sp, #20]
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   8fd74:	eb02 1747 	add.w	r7, r2, r7, lsl #5
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   8fd78:	8bba      	ldrh	r2, [r7, #28]
	new_message.message_data = message_data;
   8fd7a:	9f01      	ldr	r7, [sp, #4]
	new_message.message_pointer = message_pointer;
   8fd7c:	9309      	str	r3, [sp, #36]	; 0x24
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   8fd7e:	0753      	lsls	r3, r2, #29
	new_message.message_data = message_data;
   8fd80:	9708      	str	r7, [sp, #32]
	new_message.recipient_handle = recipient_handle;
   8fd82:	9506      	str	r5, [sp, #24]
	new_message.message_id = message_id;
   8fd84:	f88d 001c 	strb.w	r0, [sp, #28]
	new_message.message_recipient_type = recipient_type;
   8fd88:	f88d 101d 	strb.w	r1, [sp, #29]
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   8fd8c:	d5ca      	bpl.n	8fd24 <mw_resize_window+0x210>
		(void)mw_message_queue_insert(&new_message);
   8fd8e:	a805      	add	r0, sp, #20
   8fd90:	4b29      	ldr	r3, [pc, #164]	; (8fe38 <mw_resize_window+0x324>)
   8fd92:	4798      	blx	r3
   8fd94:	e7c6      	b.n	8fd24 <mw_resize_window+0x210>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fd96:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8fd9a:	0693      	lsls	r3, r2, #26
   8fd9c:	f57f aeee 	bpl.w	8fb7c <mw_resize_window+0x68>
   8fda0:	f04f 0807 	mov.w	r8, #7
   8fda4:	e73c      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fda6:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fdaa:	0690      	lsls	r0, r2, #26
   8fdac:	f57f aeeb 	bpl.w	8fb86 <mw_resize_window+0x72>
   8fdb0:	f04f 0808 	mov.w	r8, #8
   8fdb4:	e734      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fdb6:	f8d4 224c 	ldr.w	r2, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fdba:	0691      	lsls	r1, r2, #26
   8fdbc:	f57f aee8 	bpl.w	8fb90 <mw_resize_window+0x7c>
   8fdc0:	f04f 0809 	mov.w	r8, #9
   8fdc4:	e72c      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fdc6:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fdca:	0693      	lsls	r3, r2, #26
   8fdcc:	f57f aee5 	bpl.w	8fb9a <mw_resize_window+0x86>
   8fdd0:	f04f 080a 	mov.w	r8, #10
   8fdd4:	e724      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fdd6:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8fdda:	0690      	lsls	r0, r2, #26
   8fddc:	f57f aee2 	bpl.w	8fba4 <mw_resize_window+0x90>
   8fde0:	f04f 080b 	mov.w	r8, #11
   8fde4:	e71c      	b.n	8fc20 <mw_resize_window+0x10c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fde6:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fdea:	0691      	lsls	r1, r2, #26
   8fdec:	f57f aedf 	bpl.w	8fbae <mw_resize_window+0x9a>
   8fdf0:	f04f 080c 	mov.w	r8, #12
   8fdf4:	e714      	b.n	8fc20 <mw_resize_window+0x10c>
	if (control_handle == MW_INVALID_HANDLE)
   8fdf6:	2718      	movs	r7, #24
   8fdf8:	4628      	mov	r0, r5
   8fdfa:	e7b1      	b.n	8fd60 <mw_resize_window+0x24c>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   8fdfc:	4648      	mov	r0, r9
   8fdfe:	e7af      	b.n	8fd60 <mw_resize_window+0x24c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fe00:	68e3      	ldr	r3, [r4, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   8fe02:	069e      	lsls	r6, r3, #26
   8fe04:	f57f af2b 	bpl.w	8fc5e <mw_resize_window+0x14a>
   8fe08:	2600      	movs	r6, #0
   8fe0a:	4648      	mov	r0, r9
   8fe0c:	e769      	b.n	8fce2 <mw_resize_window+0x1ce>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fe0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fe10:	0698      	lsls	r0, r3, #26
   8fe12:	f57f af28 	bpl.w	8fc66 <mw_resize_window+0x152>
   8fe16:	2601      	movs	r6, #1
   8fe18:	4648      	mov	r0, r9
   8fe1a:	e762      	b.n	8fce2 <mw_resize_window+0x1ce>
   8fe1c:	000ab764 	.word	0x000ab764
   8fe20:	000ab510 	.word	0x000ab510
   8fe24:	00095add 	.word	0x00095add
   8fe28:	20071bd8 	.word	0x20071bd8
   8fe2c:	00087c59 	.word	0x00087c59
   8fe30:	00088621 	.word	0x00088621
   8fe34:	000ab710 	.word	0x000ab710
   8fe38:	00095bc1 	.word	0x00095bc1
   8fe3c:	000ab734 	.word	0x000ab734
   8fe40:	20071858 	.word	0x20071858
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fe44:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fe48:	0699      	lsls	r1, r3, #26
   8fe4a:	f57f af11 	bpl.w	8fc70 <mw_resize_window+0x15c>
   8fe4e:	2602      	movs	r6, #2
   8fe50:	4648      	mov	r0, r9
   8fe52:	e746      	b.n	8fce2 <mw_resize_window+0x1ce>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fe54:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   8fe58:	069a      	lsls	r2, r3, #26
   8fe5a:	f57f af0e 	bpl.w	8fc7a <mw_resize_window+0x166>
   8fe5e:	2603      	movs	r6, #3
   8fe60:	4648      	mov	r0, r9
   8fe62:	e73e      	b.n	8fce2 <mw_resize_window+0x1ce>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fe64:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fe68:	069b      	lsls	r3, r3, #26
   8fe6a:	f57f af0b 	bpl.w	8fc84 <mw_resize_window+0x170>
   8fe6e:	2604      	movs	r6, #4
   8fe70:	4648      	mov	r0, r9
   8fe72:	e736      	b.n	8fce2 <mw_resize_window+0x1ce>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fe74:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fe78:	069f      	lsls	r7, r3, #26
   8fe7a:	f57f af08 	bpl.w	8fc8e <mw_resize_window+0x17a>
   8fe7e:	2605      	movs	r6, #5
   8fe80:	4648      	mov	r0, r9
   8fe82:	e72e      	b.n	8fce2 <mw_resize_window+0x1ce>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fe84:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fe88:	069e      	lsls	r6, r3, #26
   8fe8a:	f57f af05 	bpl.w	8fc98 <mw_resize_window+0x184>
   8fe8e:	2606      	movs	r6, #6
   8fe90:	4648      	mov	r0, r9
   8fe92:	e726      	b.n	8fce2 <mw_resize_window+0x1ce>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fe94:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8fe98:	0698      	lsls	r0, r3, #26
   8fe9a:	f57f af02 	bpl.w	8fca2 <mw_resize_window+0x18e>
   8fe9e:	2607      	movs	r6, #7
   8fea0:	e7b3      	b.n	8fe0a <mw_resize_window+0x2f6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fea2:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fea6:	0699      	lsls	r1, r3, #26
   8fea8:	f57f af00 	bpl.w	8fcac <mw_resize_window+0x198>
   8feac:	2608      	movs	r6, #8
   8feae:	e7ac      	b.n	8fe0a <mw_resize_window+0x2f6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8feb0:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   8feb4:	069a      	lsls	r2, r3, #26
   8feb6:	f57f aefe 	bpl.w	8fcb6 <mw_resize_window+0x1a2>
   8feba:	2609      	movs	r6, #9
   8febc:	e7a5      	b.n	8fe0a <mw_resize_window+0x2f6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8febe:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fec2:	069b      	lsls	r3, r3, #26
   8fec4:	f57f aefc 	bpl.w	8fcc0 <mw_resize_window+0x1ac>
   8fec8:	260a      	movs	r6, #10
   8feca:	e79e      	b.n	8fe0a <mw_resize_window+0x2f6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fecc:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   8fed0:	069f      	lsls	r7, r3, #26
   8fed2:	f57f aefa 	bpl.w	8fcca <mw_resize_window+0x1b6>
   8fed6:	260b      	movs	r6, #11
   8fed8:	e797      	b.n	8fe0a <mw_resize_window+0x2f6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8feda:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   8fede:	069e      	lsls	r6, r3, #26
   8fee0:	f57f aef8 	bpl.w	8fcd4 <mw_resize_window+0x1c0>
   8fee4:	260c      	movs	r6, #12
   8fee6:	e790      	b.n	8fe0a <mw_resize_window+0x2f6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   8fee8:	f8d4 334c 	ldr.w	r3, [r4, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   8feec:	f013 0020 	ands.w	r0, r3, #32
   8fef0:	bf18      	it	ne
   8fef2:	260d      	movne	r6, #13
   8fef4:	d189      	bne.n	8fe0a <mw_resize_window+0x2f6>
   8fef6:	260e      	movs	r6, #14
   8fef8:	e6f3      	b.n	8fce2 <mw_resize_window+0x1ce>
   8fefa:	bf00      	nop

0008fefc <mw_is_any_window_modal>:
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_MODAL) == MW_WINDOW_FLAG_IS_MODAL &&
   8fefc:	4b29      	ldr	r3, [pc, #164]	; (8ffa4 <mw_is_any_window_modal+0xa8>)
   8fefe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   8ff00:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff04:	2a60      	cmp	r2, #96	; 0x60
   8ff06:	d04b      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   8ff0c:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff10:	2a60      	cmp	r2, #96	; 0x60
   8ff12:	d045      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff14:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   8ff18:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff1c:	2a60      	cmp	r2, #96	; 0x60
   8ff1e:	d03f      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff20:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   8ff24:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff28:	2a60      	cmp	r2, #96	; 0x60
   8ff2a:	d039      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff2c:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
   8ff30:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff34:	2a60      	cmp	r2, #96	; 0x60
   8ff36:	d033      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff38:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
   8ff3c:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff40:	2a60      	cmp	r2, #96	; 0x60
   8ff42:	d02d      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff44:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
   8ff48:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff4c:	2a60      	cmp	r2, #96	; 0x60
   8ff4e:	d027      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
   8ff54:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff58:	2a60      	cmp	r2, #96	; 0x60
   8ff5a:	d021      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff5c:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
   8ff60:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff64:	2a60      	cmp	r2, #96	; 0x60
   8ff66:	d01b      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff68:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
   8ff6c:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff70:	2a60      	cmp	r2, #96	; 0x60
   8ff72:	d015      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff74:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
   8ff78:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff7c:	2a60      	cmp	r2, #96	; 0x60
   8ff7e:	d00f      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff80:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   8ff84:	f002 0260 	and.w	r2, r2, #96	; 0x60
   8ff88:	2a60      	cmp	r2, #96	; 0x60
   8ff8a:	d009      	beq.n	8ffa0 <mw_is_any_window_modal+0xa4>
   8ff8c:	f8d3 034c 	ldr.w	r0, [r3, #844]	; 0x34c
   8ff90:	f000 0060 	and.w	r0, r0, #96	; 0x60
   8ff94:	f1a0 0060 	sub.w	r0, r0, #96	; 0x60
   8ff98:	fab0 f080 	clz	r0, r0
   8ff9c:	0940      	lsrs	r0, r0, #5
   8ff9e:	4770      	bx	lr
			return (true);
   8ffa0:	2001      	movs	r0, #1
}
   8ffa2:	4770      	bx	lr
   8ffa4:	20071bd8 	.word	0x20071bd8

0008ffa8 <mw_set_window_horiz_scroll_bar_enabled_state>:
	if (window_handle == MW_INVALID_HANDLE)
   8ffa8:	b948      	cbnz	r0, 8ffbe <mw_set_window_horiz_scroll_bar_enabled_state+0x16>
{
   8ffaa:	b410      	push	{r4}
		MW_ASSERT((bool)false, "Bad window handle");
   8ffac:	4c55      	ldr	r4, [pc, #340]	; (90104 <mw_set_window_horiz_scroll_bar_enabled_state+0x15c>)
   8ffae:	4b56      	ldr	r3, [pc, #344]	; (90108 <mw_set_window_horiz_scroll_bar_enabled_state+0x160>)
   8ffb0:	46a4      	mov	ip, r4
   8ffb2:	f241 226f 	movw	r2, #4719	; 0x126f
   8ffb6:	4955      	ldr	r1, [pc, #340]	; (9010c <mw_set_window_horiz_scroll_bar_enabled_state+0x164>)
   8ffb8:	2000      	movs	r0, #0
}
   8ffba:	bc10      	pop	{r4}
		MW_ASSERT((bool)false, "Bad window handle");
   8ffbc:	4760      	bx	ip
		if (mw_all_windows[i].window_handle == window_handle &&
   8ffbe:	4b54      	ldr	r3, [pc, #336]	; (90110 <mw_set_window_horiz_scroll_bar_enabled_state+0x168>)
   8ffc0:	695a      	ldr	r2, [r3, #20]
   8ffc2:	4290      	cmp	r0, r2
   8ffc4:	d03e      	beq.n	90044 <mw_set_window_horiz_scroll_bar_enabled_state+0x9c>
   8ffc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   8ffc8:	4290      	cmp	r0, r2
   8ffca:	d041      	beq.n	90050 <mw_set_window_horiz_scroll_bar_enabled_state+0xa8>
   8ffcc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   8ffd0:	4290      	cmp	r0, r2
   8ffd2:	d04a      	beq.n	9006a <mw_set_window_horiz_scroll_bar_enabled_state+0xc2>
   8ffd4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   8ffd8:	4290      	cmp	r0, r2
   8ffda:	d04d      	beq.n	90078 <mw_set_window_horiz_scroll_bar_enabled_state+0xd0>
   8ffdc:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   8ffe0:	4290      	cmp	r0, r2
   8ffe2:	d050      	beq.n	90086 <mw_set_window_horiz_scroll_bar_enabled_state+0xde>
   8ffe4:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   8ffe8:	4290      	cmp	r0, r2
   8ffea:	d053      	beq.n	90094 <mw_set_window_horiz_scroll_bar_enabled_state+0xec>
   8ffec:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
   8fff0:	4290      	cmp	r0, r2
   8fff2:	d056      	beq.n	900a2 <mw_set_window_horiz_scroll_bar_enabled_state+0xfa>
   8fff4:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
   8fff8:	4290      	cmp	r0, r2
   8fffa:	d059      	beq.n	900b0 <mw_set_window_horiz_scroll_bar_enabled_state+0x108>
   8fffc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   90000:	4290      	cmp	r0, r2
   90002:	d05c      	beq.n	900be <mw_set_window_horiz_scroll_bar_enabled_state+0x116>
   90004:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
   90008:	4290      	cmp	r0, r2
   9000a:	d05f      	beq.n	900cc <mw_set_window_horiz_scroll_bar_enabled_state+0x124>
   9000c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   90010:	4290      	cmp	r0, r2
   90012:	d062      	beq.n	900da <mw_set_window_horiz_scroll_bar_enabled_state+0x132>
   90014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
   90018:	4290      	cmp	r0, r2
   9001a:	d065      	beq.n	900e8 <mw_set_window_horiz_scroll_bar_enabled_state+0x140>
   9001c:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
   90020:	4290      	cmp	r0, r2
   90022:	d068      	beq.n	900f6 <mw_set_window_horiz_scroll_bar_enabled_state+0x14e>
   90024:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   90028:	4290      	cmp	r0, r2
   9002a:	d1be      	bne.n	8ffaa <mw_set_window_horiz_scroll_bar_enabled_state+0x2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9002c:	f8d3 234c 	ldr.w	r2, [r3, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   90030:	0690      	lsls	r0, r2, #26
   90032:	d5ba      	bpl.n	8ffaa <mw_set_window_horiz_scroll_bar_enabled_state+0x2>
   90034:	200d      	movs	r0, #13
	if (enabled)
   90036:	b991      	cbnz	r1, 9005e <mw_set_window_horiz_scroll_bar_enabled_state+0xb6>
		mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_HORIZ_SCROLL_BAR_ENABLED;
   90038:	eb03 1380 	add.w	r3, r3, r0, lsl #6
   9003c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   90040:	60da      	str	r2, [r3, #12]
   90042:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90044:	68da      	ldr	r2, [r3, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   90046:	0692      	lsls	r2, r2, #26
   90048:	d4af      	bmi.n	8ffaa <mw_set_window_horiz_scroll_bar_enabled_state+0x2>
   9004a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   9004c:	4290      	cmp	r0, r2
   9004e:	d1bd      	bne.n	8ffcc <mw_set_window_horiz_scroll_bar_enabled_state+0x24>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   90052:	f012 0f20 	tst.w	r2, #32
   90056:	d0b9      	beq.n	8ffcc <mw_set_window_horiz_scroll_bar_enabled_state+0x24>
   90058:	2001      	movs	r0, #1
	if (enabled)
   9005a:	2900      	cmp	r1, #0
   9005c:	d0ec      	beq.n	90038 <mw_set_window_horiz_scroll_bar_enabled_state+0x90>
		mw_all_windows[window_id].window_flags |= MW_WINDOW_FLAG_HORIZ_SCROLL_BAR_ENABLED;
   9005e:	eb03 1380 	add.w	r3, r3, r0, lsl #6
   90062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   90066:	60da      	str	r2, [r3, #12]
   90068:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9006a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   9006e:	f012 0f20 	tst.w	r2, #32
   90072:	d0af      	beq.n	8ffd4 <mw_set_window_horiz_scroll_bar_enabled_state+0x2c>
   90074:	2002      	movs	r0, #2
   90076:	e7de      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90078:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   9007c:	f012 0f20 	tst.w	r2, #32
   90080:	d0ac      	beq.n	8ffdc <mw_set_window_horiz_scroll_bar_enabled_state+0x34>
   90082:	2003      	movs	r0, #3
   90084:	e7d7      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90086:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   9008a:	f012 0f20 	tst.w	r2, #32
   9008e:	d0a9      	beq.n	8ffe4 <mw_set_window_horiz_scroll_bar_enabled_state+0x3c>
   90090:	2004      	movs	r0, #4
   90092:	e7d0      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90094:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   90098:	f012 0f20 	tst.w	r2, #32
   9009c:	d0a6      	beq.n	8ffec <mw_set_window_horiz_scroll_bar_enabled_state+0x44>
   9009e:	2005      	movs	r0, #5
   900a0:	e7c9      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   900a2:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   900a6:	f012 0f20 	tst.w	r2, #32
   900aa:	d0a3      	beq.n	8fff4 <mw_set_window_horiz_scroll_bar_enabled_state+0x4c>
   900ac:	2006      	movs	r0, #6
   900ae:	e7c2      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   900b0:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   900b4:	f012 0f20 	tst.w	r2, #32
   900b8:	d0a0      	beq.n	8fffc <mw_set_window_horiz_scroll_bar_enabled_state+0x54>
   900ba:	2007      	movs	r0, #7
   900bc:	e7bb      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   900be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   900c2:	f012 0f20 	tst.w	r2, #32
   900c6:	d09d      	beq.n	90004 <mw_set_window_horiz_scroll_bar_enabled_state+0x5c>
   900c8:	2008      	movs	r0, #8
   900ca:	e7b4      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   900cc:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   900d0:	f012 0f20 	tst.w	r2, #32
   900d4:	d09a      	beq.n	9000c <mw_set_window_horiz_scroll_bar_enabled_state+0x64>
   900d6:	2009      	movs	r0, #9
   900d8:	e7ad      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   900da:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   900de:	f012 0f20 	tst.w	r2, #32
   900e2:	d097      	beq.n	90014 <mw_set_window_horiz_scroll_bar_enabled_state+0x6c>
   900e4:	200a      	movs	r0, #10
   900e6:	e7a6      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   900e8:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   900ec:	f012 0f20 	tst.w	r2, #32
   900f0:	d094      	beq.n	9001c <mw_set_window_horiz_scroll_bar_enabled_state+0x74>
   900f2:	200b      	movs	r0, #11
   900f4:	e79f      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   900f6:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   900fa:	f012 0f20 	tst.w	r2, #32
   900fe:	d091      	beq.n	90024 <mw_set_window_horiz_scroll_bar_enabled_state+0x7c>
   90100:	200c      	movs	r0, #12
   90102:	e798      	b.n	90036 <mw_set_window_horiz_scroll_bar_enabled_state+0x8e>
   90104:	00095add 	.word	0x00095add
   90108:	000ab764 	.word	0x000ab764
   9010c:	000ab524 	.word	0x000ab524
   90110:	20071bd8 	.word	0x20071bd8

00090114 <mw_set_window_vert_scroll_bar_enabled_state>:
	if (window_handle == MW_INVALID_HANDLE)
   90114:	b948      	cbnz	r0, 9012a <mw_set_window_vert_scroll_bar_enabled_state+0x16>
{
   90116:	b410      	push	{r4}
		MW_ASSERT((bool)false, "Bad window handle");
   90118:	4c55      	ldr	r4, [pc, #340]	; (90270 <mw_set_window_vert_scroll_bar_enabled_state+0x15c>)
   9011a:	4b56      	ldr	r3, [pc, #344]	; (90274 <mw_set_window_vert_scroll_bar_enabled_state+0x160>)
   9011c:	46a4      	mov	ip, r4
   9011e:	f241 2287 	movw	r2, #4743	; 0x1287
   90122:	4955      	ldr	r1, [pc, #340]	; (90278 <mw_set_window_vert_scroll_bar_enabled_state+0x164>)
   90124:	2000      	movs	r0, #0
}
   90126:	bc10      	pop	{r4}
		MW_ASSERT((bool)false, "Bad window handle");
   90128:	4760      	bx	ip
		if (mw_all_windows[i].window_handle == window_handle &&
   9012a:	4b54      	ldr	r3, [pc, #336]	; (9027c <mw_set_window_vert_scroll_bar_enabled_state+0x168>)
   9012c:	695a      	ldr	r2, [r3, #20]
   9012e:	4290      	cmp	r0, r2
   90130:	d03e      	beq.n	901b0 <mw_set_window_vert_scroll_bar_enabled_state+0x9c>
   90132:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   90134:	4290      	cmp	r0, r2
   90136:	d041      	beq.n	901bc <mw_set_window_vert_scroll_bar_enabled_state+0xa8>
   90138:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   9013c:	4290      	cmp	r0, r2
   9013e:	d04a      	beq.n	901d6 <mw_set_window_vert_scroll_bar_enabled_state+0xc2>
   90140:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   90144:	4290      	cmp	r0, r2
   90146:	d04d      	beq.n	901e4 <mw_set_window_vert_scroll_bar_enabled_state+0xd0>
   90148:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   9014c:	4290      	cmp	r0, r2
   9014e:	d050      	beq.n	901f2 <mw_set_window_vert_scroll_bar_enabled_state+0xde>
   90150:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   90154:	4290      	cmp	r0, r2
   90156:	d053      	beq.n	90200 <mw_set_window_vert_scroll_bar_enabled_state+0xec>
   90158:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
   9015c:	4290      	cmp	r0, r2
   9015e:	d056      	beq.n	9020e <mw_set_window_vert_scroll_bar_enabled_state+0xfa>
   90160:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
   90164:	4290      	cmp	r0, r2
   90166:	d059      	beq.n	9021c <mw_set_window_vert_scroll_bar_enabled_state+0x108>
   90168:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   9016c:	4290      	cmp	r0, r2
   9016e:	d05c      	beq.n	9022a <mw_set_window_vert_scroll_bar_enabled_state+0x116>
   90170:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
   90174:	4290      	cmp	r0, r2
   90176:	d05f      	beq.n	90238 <mw_set_window_vert_scroll_bar_enabled_state+0x124>
   90178:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   9017c:	4290      	cmp	r0, r2
   9017e:	d062      	beq.n	90246 <mw_set_window_vert_scroll_bar_enabled_state+0x132>
   90180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
   90184:	4290      	cmp	r0, r2
   90186:	d065      	beq.n	90254 <mw_set_window_vert_scroll_bar_enabled_state+0x140>
   90188:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
   9018c:	4290      	cmp	r0, r2
   9018e:	d068      	beq.n	90262 <mw_set_window_vert_scroll_bar_enabled_state+0x14e>
   90190:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   90194:	4290      	cmp	r0, r2
   90196:	d1be      	bne.n	90116 <mw_set_window_vert_scroll_bar_enabled_state+0x2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90198:	f8d3 234c 	ldr.w	r2, [r3, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   9019c:	0690      	lsls	r0, r2, #26
   9019e:	d5ba      	bpl.n	90116 <mw_set_window_vert_scroll_bar_enabled_state+0x2>
   901a0:	200d      	movs	r0, #13
	if (enabled)
   901a2:	b991      	cbnz	r1, 901ca <mw_set_window_vert_scroll_bar_enabled_state+0xb6>
		mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_VERT_SCROLL_BAR_ENABLED;
   901a4:	eb03 1380 	add.w	r3, r3, r0, lsl #6
   901a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   901ac:	60da      	str	r2, [r3, #12]
   901ae:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   901b0:	68da      	ldr	r2, [r3, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   901b2:	0692      	lsls	r2, r2, #26
   901b4:	d4af      	bmi.n	90116 <mw_set_window_vert_scroll_bar_enabled_state+0x2>
   901b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   901b8:	4290      	cmp	r0, r2
   901ba:	d1bd      	bne.n	90138 <mw_set_window_vert_scroll_bar_enabled_state+0x24>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   901bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   901be:	f012 0f20 	tst.w	r2, #32
   901c2:	d0b9      	beq.n	90138 <mw_set_window_vert_scroll_bar_enabled_state+0x24>
   901c4:	2001      	movs	r0, #1
	if (enabled)
   901c6:	2900      	cmp	r1, #0
   901c8:	d0ec      	beq.n	901a4 <mw_set_window_vert_scroll_bar_enabled_state+0x90>
		mw_all_windows[window_id].window_flags |= MW_WINDOW_FLAG_VERT_SCROLL_BAR_ENABLED;
   901ca:	eb03 1380 	add.w	r3, r3, r0, lsl #6
   901ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   901d2:	60da      	str	r2, [r3, #12]
   901d4:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   901d6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   901da:	f012 0f20 	tst.w	r2, #32
   901de:	d0af      	beq.n	90140 <mw_set_window_vert_scroll_bar_enabled_state+0x2c>
   901e0:	2002      	movs	r0, #2
   901e2:	e7de      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   901e4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   901e8:	f012 0f20 	tst.w	r2, #32
   901ec:	d0ac      	beq.n	90148 <mw_set_window_vert_scroll_bar_enabled_state+0x34>
   901ee:	2003      	movs	r0, #3
   901f0:	e7d7      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   901f2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   901f6:	f012 0f20 	tst.w	r2, #32
   901fa:	d0a9      	beq.n	90150 <mw_set_window_vert_scroll_bar_enabled_state+0x3c>
   901fc:	2004      	movs	r0, #4
   901fe:	e7d0      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90200:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   90204:	f012 0f20 	tst.w	r2, #32
   90208:	d0a6      	beq.n	90158 <mw_set_window_vert_scroll_bar_enabled_state+0x44>
   9020a:	2005      	movs	r0, #5
   9020c:	e7c9      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9020e:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   90212:	f012 0f20 	tst.w	r2, #32
   90216:	d0a3      	beq.n	90160 <mw_set_window_vert_scroll_bar_enabled_state+0x4c>
   90218:	2006      	movs	r0, #6
   9021a:	e7c2      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9021c:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   90220:	f012 0f20 	tst.w	r2, #32
   90224:	d0a0      	beq.n	90168 <mw_set_window_vert_scroll_bar_enabled_state+0x54>
   90226:	2007      	movs	r0, #7
   90228:	e7bb      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9022a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   9022e:	f012 0f20 	tst.w	r2, #32
   90232:	d09d      	beq.n	90170 <mw_set_window_vert_scroll_bar_enabled_state+0x5c>
   90234:	2008      	movs	r0, #8
   90236:	e7b4      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90238:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   9023c:	f012 0f20 	tst.w	r2, #32
   90240:	d09a      	beq.n	90178 <mw_set_window_vert_scroll_bar_enabled_state+0x64>
   90242:	2009      	movs	r0, #9
   90244:	e7ad      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90246:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   9024a:	f012 0f20 	tst.w	r2, #32
   9024e:	d097      	beq.n	90180 <mw_set_window_vert_scroll_bar_enabled_state+0x6c>
   90250:	200a      	movs	r0, #10
   90252:	e7a6      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90254:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   90258:	f012 0f20 	tst.w	r2, #32
   9025c:	d094      	beq.n	90188 <mw_set_window_vert_scroll_bar_enabled_state+0x74>
   9025e:	200b      	movs	r0, #11
   90260:	e79f      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90262:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   90266:	f012 0f20 	tst.w	r2, #32
   9026a:	d091      	beq.n	90190 <mw_set_window_vert_scroll_bar_enabled_state+0x7c>
   9026c:	200c      	movs	r0, #12
   9026e:	e798      	b.n	901a2 <mw_set_window_vert_scroll_bar_enabled_state+0x8e>
   90270:	00095add 	.word	0x00095add
   90274:	000ab764 	.word	0x000ab764
   90278:	000ab554 	.word	0x000ab554
   9027c:	20071bd8 	.word	0x20071bd8

00090280 <mw_paint_window_frame>:
{
   90280:	b570      	push	{r4, r5, r6, lr}
   90282:	b086      	sub	sp, #24
	if (window_handle == MW_INVALID_HANDLE)
   90284:	2800      	cmp	r0, #0
   90286:	d037      	beq.n	902f8 <mw_paint_window_frame+0x78>
   90288:	4603      	mov	r3, r0
		if (mw_all_windows[i].window_handle == window_handle &&
   9028a:	4a5a      	ldr	r2, [pc, #360]	; (903f4 <mw_paint_window_frame+0x174>)
   9028c:	6950      	ldr	r0, [r2, #20]
   9028e:	4283      	cmp	r3, r0
   90290:	d03b      	beq.n	9030a <mw_paint_window_frame+0x8a>
   90292:	6d50      	ldr	r0, [r2, #84]	; 0x54
   90294:	4283      	cmp	r3, r0
   90296:	d050      	beq.n	9033a <mw_paint_window_frame+0xba>
   90298:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   9029c:	4283      	cmp	r3, r0
   9029e:	d053      	beq.n	90348 <mw_paint_window_frame+0xc8>
   902a0:	f8d2 00d4 	ldr.w	r0, [r2, #212]	; 0xd4
   902a4:	4283      	cmp	r3, r0
   902a6:	d057      	beq.n	90358 <mw_paint_window_frame+0xd8>
   902a8:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
   902ac:	4283      	cmp	r3, r0
   902ae:	d05b      	beq.n	90368 <mw_paint_window_frame+0xe8>
   902b0:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   902b4:	4283      	cmp	r3, r0
   902b6:	d05f      	beq.n	90378 <mw_paint_window_frame+0xf8>
   902b8:	f8d2 0194 	ldr.w	r0, [r2, #404]	; 0x194
   902bc:	4283      	cmp	r3, r0
   902be:	d063      	beq.n	90388 <mw_paint_window_frame+0x108>
   902c0:	f8d2 01d4 	ldr.w	r0, [r2, #468]	; 0x1d4
   902c4:	4283      	cmp	r3, r0
   902c6:	d067      	beq.n	90398 <mw_paint_window_frame+0x118>
   902c8:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
   902cc:	4283      	cmp	r3, r0
   902ce:	d06b      	beq.n	903a8 <mw_paint_window_frame+0x128>
   902d0:	f8d2 0254 	ldr.w	r0, [r2, #596]	; 0x254
   902d4:	4283      	cmp	r3, r0
   902d6:	d06f      	beq.n	903b8 <mw_paint_window_frame+0x138>
   902d8:	f8d2 0294 	ldr.w	r0, [r2, #660]	; 0x294
   902dc:	4283      	cmp	r3, r0
   902de:	d073      	beq.n	903c8 <mw_paint_window_frame+0x148>
   902e0:	f8d2 02d4 	ldr.w	r0, [r2, #724]	; 0x2d4
   902e4:	4283      	cmp	r3, r0
   902e6:	d077      	beq.n	903d8 <mw_paint_window_frame+0x158>
   902e8:	f8d2 0314 	ldr.w	r0, [r2, #788]	; 0x314
   902ec:	4283      	cmp	r3, r0
   902ee:	d07b      	beq.n	903e8 <mw_paint_window_frame+0x168>
   902f0:	f8d2 0354 	ldr.w	r0, [r2, #852]	; 0x354
   902f4:	4283      	cmp	r3, r0
   902f6:	d01b      	beq.n	90330 <mw_paint_window_frame+0xb0>
		MW_ASSERT((bool)false, "Bad window handle");
   902f8:	4b3f      	ldr	r3, [pc, #252]	; (903f8 <mw_paint_window_frame+0x178>)
   902fa:	f241 22bf 	movw	r2, #4799	; 0x12bf
   902fe:	493f      	ldr	r1, [pc, #252]	; (903fc <mw_paint_window_frame+0x17c>)
   90300:	2000      	movs	r0, #0
   90302:	4c3f      	ldr	r4, [pc, #252]	; (90400 <mw_paint_window_frame+0x180>)
   90304:	47a0      	blx	r4
}
   90306:	b006      	add	sp, #24
   90308:	bd70      	pop	{r4, r5, r6, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9030a:	68d0      	ldr	r0, [r2, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   9030c:	0680      	lsls	r0, r0, #26
   9030e:	d5c0      	bpl.n	90292 <mw_paint_window_frame+0x12>
	new_message.sender_handle = sender_handle;
   90310:	2200      	movs	r2, #0
	new_message.message_id = message_id;
   90312:	264b      	movs	r6, #75	; 0x4b
	new_message.message_recipient_type = recipient_type;
   90314:	2502      	movs	r5, #2
		(void)mw_message_queue_insert(&new_message);
   90316:	a801      	add	r0, sp, #4
   90318:	4c3a      	ldr	r4, [pc, #232]	; (90404 <mw_paint_window_frame+0x184>)
	mw_post_message(MW_WINDOW_FRAME_PAINT_MESSAGE,
   9031a:	9104      	str	r1, [sp, #16]
	new_message.recipient_handle = recipient_handle;
   9031c:	9302      	str	r3, [sp, #8]
	new_message.message_id = message_id;
   9031e:	f88d 600c 	strb.w	r6, [sp, #12]
	new_message.message_recipient_type = recipient_type;
   90322:	f88d 500d 	strb.w	r5, [sp, #13]
	new_message.sender_handle = sender_handle;
   90326:	9201      	str	r2, [sp, #4]
	new_message.message_pointer = message_pointer;
   90328:	9205      	str	r2, [sp, #20]
		(void)mw_message_queue_insert(&new_message);
   9032a:	47a0      	blx	r4
}
   9032c:	b006      	add	sp, #24
   9032e:	bd70      	pop	{r4, r5, r6, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90330:	f8d2 234c 	ldr.w	r2, [r2, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   90334:	0692      	lsls	r2, r2, #26
   90336:	d4eb      	bmi.n	90310 <mw_paint_window_frame+0x90>
   90338:	e7de      	b.n	902f8 <mw_paint_window_frame+0x78>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9033a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   9033c:	0686      	lsls	r6, r0, #26
   9033e:	d4e7      	bmi.n	90310 <mw_paint_window_frame+0x90>
   90340:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   90344:	4283      	cmp	r3, r0
   90346:	d1ab      	bne.n	902a0 <mw_paint_window_frame+0x20>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90348:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   9034c:	0685      	lsls	r5, r0, #26
   9034e:	d4df      	bmi.n	90310 <mw_paint_window_frame+0x90>
   90350:	f8d2 00d4 	ldr.w	r0, [r2, #212]	; 0xd4
   90354:	4283      	cmp	r3, r0
   90356:	d1a7      	bne.n	902a8 <mw_paint_window_frame+0x28>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90358:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   9035c:	0684      	lsls	r4, r0, #26
   9035e:	d4d7      	bmi.n	90310 <mw_paint_window_frame+0x90>
   90360:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
   90364:	4283      	cmp	r3, r0
   90366:	d1a3      	bne.n	902b0 <mw_paint_window_frame+0x30>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90368:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   9036c:	0680      	lsls	r0, r0, #26
   9036e:	d4cf      	bmi.n	90310 <mw_paint_window_frame+0x90>
   90370:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   90374:	4283      	cmp	r3, r0
   90376:	d19f      	bne.n	902b8 <mw_paint_window_frame+0x38>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90378:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   9037c:	0686      	lsls	r6, r0, #26
   9037e:	d4c7      	bmi.n	90310 <mw_paint_window_frame+0x90>
   90380:	f8d2 0194 	ldr.w	r0, [r2, #404]	; 0x194
   90384:	4283      	cmp	r3, r0
   90386:	d19b      	bne.n	902c0 <mw_paint_window_frame+0x40>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90388:	f8d2 018c 	ldr.w	r0, [r2, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   9038c:	0685      	lsls	r5, r0, #26
   9038e:	d4bf      	bmi.n	90310 <mw_paint_window_frame+0x90>
   90390:	f8d2 01d4 	ldr.w	r0, [r2, #468]	; 0x1d4
   90394:	4283      	cmp	r3, r0
   90396:	d197      	bne.n	902c8 <mw_paint_window_frame+0x48>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90398:	f8d2 01cc 	ldr.w	r0, [r2, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9039c:	0684      	lsls	r4, r0, #26
   9039e:	d4b7      	bmi.n	90310 <mw_paint_window_frame+0x90>
   903a0:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
   903a4:	4283      	cmp	r3, r0
   903a6:	d193      	bne.n	902d0 <mw_paint_window_frame+0x50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   903a8:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   903ac:	0680      	lsls	r0, r0, #26
   903ae:	d4af      	bmi.n	90310 <mw_paint_window_frame+0x90>
   903b0:	f8d2 0254 	ldr.w	r0, [r2, #596]	; 0x254
   903b4:	4283      	cmp	r3, r0
   903b6:	d18f      	bne.n	902d8 <mw_paint_window_frame+0x58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   903b8:	f8d2 024c 	ldr.w	r0, [r2, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   903bc:	0686      	lsls	r6, r0, #26
   903be:	d4a7      	bmi.n	90310 <mw_paint_window_frame+0x90>
   903c0:	f8d2 0294 	ldr.w	r0, [r2, #660]	; 0x294
   903c4:	4283      	cmp	r3, r0
   903c6:	d18b      	bne.n	902e0 <mw_paint_window_frame+0x60>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   903c8:	f8d2 028c 	ldr.w	r0, [r2, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   903cc:	0685      	lsls	r5, r0, #26
   903ce:	d49f      	bmi.n	90310 <mw_paint_window_frame+0x90>
   903d0:	f8d2 02d4 	ldr.w	r0, [r2, #724]	; 0x2d4
   903d4:	4283      	cmp	r3, r0
   903d6:	d187      	bne.n	902e8 <mw_paint_window_frame+0x68>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   903d8:	f8d2 02cc 	ldr.w	r0, [r2, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   903dc:	0684      	lsls	r4, r0, #26
   903de:	d497      	bmi.n	90310 <mw_paint_window_frame+0x90>
   903e0:	f8d2 0314 	ldr.w	r0, [r2, #788]	; 0x314
   903e4:	4283      	cmp	r3, r0
   903e6:	d183      	bne.n	902f0 <mw_paint_window_frame+0x70>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   903e8:	f8d2 030c 	ldr.w	r0, [r2, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   903ec:	0680      	lsls	r0, r0, #26
   903ee:	d48f      	bmi.n	90310 <mw_paint_window_frame+0x90>
   903f0:	e77e      	b.n	902f0 <mw_paint_window_frame+0x70>
   903f2:	bf00      	nop
   903f4:	20071bd8 	.word	0x20071bd8
   903f8:	000ab764 	.word	0x000ab764
   903fc:	000ab580 	.word	0x000ab580
   90400:	00095add 	.word	0x00095add
   90404:	00095bc1 	.word	0x00095bc1

00090408 <mw_paint_window_client>:
{
   90408:	b530      	push	{r4, r5, lr}
   9040a:	b087      	sub	sp, #28
	if (window_handle == MW_INVALID_HANDLE)
   9040c:	2800      	cmp	r0, #0
   9040e:	d037      	beq.n	90480 <mw_paint_window_client+0x78>
		if (mw_all_windows[i].window_handle == window_handle &&
   90410:	4a5a      	ldr	r2, [pc, #360]	; (9057c <mw_paint_window_client+0x174>)
   90412:	4603      	mov	r3, r0
   90414:	6951      	ldr	r1, [r2, #20]
   90416:	4288      	cmp	r0, r1
   90418:	d03b      	beq.n	90492 <mw_paint_window_client+0x8a>
   9041a:	6d51      	ldr	r1, [r2, #84]	; 0x54
   9041c:	428b      	cmp	r3, r1
   9041e:	d050      	beq.n	904c2 <mw_paint_window_client+0xba>
   90420:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
   90424:	428b      	cmp	r3, r1
   90426:	d053      	beq.n	904d0 <mw_paint_window_client+0xc8>
   90428:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
   9042c:	428b      	cmp	r3, r1
   9042e:	d057      	beq.n	904e0 <mw_paint_window_client+0xd8>
   90430:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
   90434:	428b      	cmp	r3, r1
   90436:	d05b      	beq.n	904f0 <mw_paint_window_client+0xe8>
   90438:	f8d2 1154 	ldr.w	r1, [r2, #340]	; 0x154
   9043c:	428b      	cmp	r3, r1
   9043e:	d05f      	beq.n	90500 <mw_paint_window_client+0xf8>
   90440:	f8d2 1194 	ldr.w	r1, [r2, #404]	; 0x194
   90444:	428b      	cmp	r3, r1
   90446:	d063      	beq.n	90510 <mw_paint_window_client+0x108>
   90448:	f8d2 11d4 	ldr.w	r1, [r2, #468]	; 0x1d4
   9044c:	428b      	cmp	r3, r1
   9044e:	d067      	beq.n	90520 <mw_paint_window_client+0x118>
   90450:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
   90454:	428b      	cmp	r3, r1
   90456:	d06b      	beq.n	90530 <mw_paint_window_client+0x128>
   90458:	f8d2 1254 	ldr.w	r1, [r2, #596]	; 0x254
   9045c:	428b      	cmp	r3, r1
   9045e:	d06f      	beq.n	90540 <mw_paint_window_client+0x138>
   90460:	f8d2 1294 	ldr.w	r1, [r2, #660]	; 0x294
   90464:	428b      	cmp	r3, r1
   90466:	d073      	beq.n	90550 <mw_paint_window_client+0x148>
   90468:	f8d2 12d4 	ldr.w	r1, [r2, #724]	; 0x2d4
   9046c:	428b      	cmp	r3, r1
   9046e:	d077      	beq.n	90560 <mw_paint_window_client+0x158>
   90470:	f8d2 1314 	ldr.w	r1, [r2, #788]	; 0x314
   90474:	428b      	cmp	r3, r1
   90476:	d07b      	beq.n	90570 <mw_paint_window_client+0x168>
   90478:	f8d2 1354 	ldr.w	r1, [r2, #852]	; 0x354
   9047c:	428b      	cmp	r3, r1
   9047e:	d01b      	beq.n	904b8 <mw_paint_window_client+0xb0>
		MW_ASSERT((bool)false, "Bad window handle");
   90480:	4b3f      	ldr	r3, [pc, #252]	; (90580 <mw_paint_window_client+0x178>)
   90482:	f241 22d2 	movw	r2, #4818	; 0x12d2
   90486:	493f      	ldr	r1, [pc, #252]	; (90584 <mw_paint_window_client+0x17c>)
   90488:	2000      	movs	r0, #0
   9048a:	4c3f      	ldr	r4, [pc, #252]	; (90588 <mw_paint_window_client+0x180>)
   9048c:	47a0      	blx	r4
}
   9048e:	b007      	add	sp, #28
   90490:	bd30      	pop	{r4, r5, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90492:	68d1      	ldr	r1, [r2, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   90494:	0689      	lsls	r1, r1, #26
   90496:	d5c0      	bpl.n	9041a <mw_paint_window_client+0x12>
	new_message.message_data = message_data;
   90498:	2200      	movs	r2, #0
	new_message.message_id = message_id;
   9049a:	254c      	movs	r5, #76	; 0x4c
	new_message.message_recipient_type = recipient_type;
   9049c:	2402      	movs	r4, #2
		(void)mw_message_queue_insert(&new_message);
   9049e:	a801      	add	r0, sp, #4
   904a0:	493a      	ldr	r1, [pc, #232]	; (9058c <mw_paint_window_client+0x184>)
	new_message.recipient_handle = recipient_handle;
   904a2:	9302      	str	r3, [sp, #8]
	new_message.message_id = message_id;
   904a4:	f88d 500c 	strb.w	r5, [sp, #12]
	new_message.message_data = message_data;
   904a8:	9204      	str	r2, [sp, #16]
	new_message.sender_handle = sender_handle;
   904aa:	9201      	str	r2, [sp, #4]
	new_message.message_pointer = message_pointer;
   904ac:	9205      	str	r2, [sp, #20]
	new_message.message_recipient_type = recipient_type;
   904ae:	f88d 400d 	strb.w	r4, [sp, #13]
		(void)mw_message_queue_insert(&new_message);
   904b2:	4788      	blx	r1
}
   904b4:	b007      	add	sp, #28
   904b6:	bd30      	pop	{r4, r5, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   904b8:	f8d2 234c 	ldr.w	r2, [r2, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   904bc:	0692      	lsls	r2, r2, #26
   904be:	d4eb      	bmi.n	90498 <mw_paint_window_client+0x90>
   904c0:	e7de      	b.n	90480 <mw_paint_window_client+0x78>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   904c2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   904c4:	068d      	lsls	r5, r1, #26
   904c6:	d4e7      	bmi.n	90498 <mw_paint_window_client+0x90>
   904c8:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
   904cc:	428b      	cmp	r3, r1
   904ce:	d1ab      	bne.n	90428 <mw_paint_window_client+0x20>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   904d0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   904d4:	068c      	lsls	r4, r1, #26
   904d6:	d4df      	bmi.n	90498 <mw_paint_window_client+0x90>
   904d8:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
   904dc:	428b      	cmp	r3, r1
   904de:	d1a7      	bne.n	90430 <mw_paint_window_client+0x28>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   904e0:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   904e4:	0688      	lsls	r0, r1, #26
   904e6:	d4d7      	bmi.n	90498 <mw_paint_window_client+0x90>
   904e8:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
   904ec:	428b      	cmp	r3, r1
   904ee:	d1a3      	bne.n	90438 <mw_paint_window_client+0x30>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   904f0:	f8d2 110c 	ldr.w	r1, [r2, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   904f4:	0689      	lsls	r1, r1, #26
   904f6:	d4cf      	bmi.n	90498 <mw_paint_window_client+0x90>
   904f8:	f8d2 1154 	ldr.w	r1, [r2, #340]	; 0x154
   904fc:	428b      	cmp	r3, r1
   904fe:	d19f      	bne.n	90440 <mw_paint_window_client+0x38>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90500:	f8d2 114c 	ldr.w	r1, [r2, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   90504:	068d      	lsls	r5, r1, #26
   90506:	d4c7      	bmi.n	90498 <mw_paint_window_client+0x90>
   90508:	f8d2 1194 	ldr.w	r1, [r2, #404]	; 0x194
   9050c:	428b      	cmp	r3, r1
   9050e:	d19b      	bne.n	90448 <mw_paint_window_client+0x40>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90510:	f8d2 118c 	ldr.w	r1, [r2, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   90514:	068c      	lsls	r4, r1, #26
   90516:	d4bf      	bmi.n	90498 <mw_paint_window_client+0x90>
   90518:	f8d2 11d4 	ldr.w	r1, [r2, #468]	; 0x1d4
   9051c:	428b      	cmp	r3, r1
   9051e:	d197      	bne.n	90450 <mw_paint_window_client+0x48>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90520:	f8d2 11cc 	ldr.w	r1, [r2, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   90524:	0688      	lsls	r0, r1, #26
   90526:	d4b7      	bmi.n	90498 <mw_paint_window_client+0x90>
   90528:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
   9052c:	428b      	cmp	r3, r1
   9052e:	d193      	bne.n	90458 <mw_paint_window_client+0x50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90530:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   90534:	0689      	lsls	r1, r1, #26
   90536:	d4af      	bmi.n	90498 <mw_paint_window_client+0x90>
   90538:	f8d2 1254 	ldr.w	r1, [r2, #596]	; 0x254
   9053c:	428b      	cmp	r3, r1
   9053e:	d18f      	bne.n	90460 <mw_paint_window_client+0x58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90540:	f8d2 124c 	ldr.w	r1, [r2, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   90544:	068d      	lsls	r5, r1, #26
   90546:	d4a7      	bmi.n	90498 <mw_paint_window_client+0x90>
   90548:	f8d2 1294 	ldr.w	r1, [r2, #660]	; 0x294
   9054c:	428b      	cmp	r3, r1
   9054e:	d18b      	bne.n	90468 <mw_paint_window_client+0x60>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90550:	f8d2 128c 	ldr.w	r1, [r2, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   90554:	068c      	lsls	r4, r1, #26
   90556:	d49f      	bmi.n	90498 <mw_paint_window_client+0x90>
   90558:	f8d2 12d4 	ldr.w	r1, [r2, #724]	; 0x2d4
   9055c:	428b      	cmp	r3, r1
   9055e:	d187      	bne.n	90470 <mw_paint_window_client+0x68>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90560:	f8d2 12cc 	ldr.w	r1, [r2, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   90564:	0688      	lsls	r0, r1, #26
   90566:	d497      	bmi.n	90498 <mw_paint_window_client+0x90>
   90568:	f8d2 1314 	ldr.w	r1, [r2, #788]	; 0x314
   9056c:	428b      	cmp	r3, r1
   9056e:	d183      	bne.n	90478 <mw_paint_window_client+0x70>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90570:	f8d2 130c 	ldr.w	r1, [r2, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   90574:	0689      	lsls	r1, r1, #26
   90576:	d48f      	bmi.n	90498 <mw_paint_window_client+0x90>
   90578:	e77e      	b.n	90478 <mw_paint_window_client+0x70>
   9057a:	bf00      	nop
   9057c:	20071bd8 	.word	0x20071bd8
   90580:	000ab764 	.word	0x000ab764
   90584:	000ab598 	.word	0x000ab598
   90588:	00095add 	.word	0x00095add
   9058c:	00095bc1 	.word	0x00095bc1

00090590 <mw_paint_window_client_rect>:
{
   90590:	b570      	push	{r4, r5, r6, lr}
   90592:	b086      	sub	sp, #24
	if (rect == (void*)0)
   90594:	2900      	cmp	r1, #0
   90596:	f000 80b9 	beq.w	9070c <mw_paint_window_client_rect+0x17c>
   9059a:	4603      	mov	r3, r0
	if (window_handle == MW_INVALID_HANDLE)
   9059c:	2800      	cmp	r0, #0
   9059e:	d036      	beq.n	9060e <mw_paint_window_client_rect+0x7e>
		if (mw_all_windows[i].window_handle == window_handle &&
   905a0:	4a5e      	ldr	r2, [pc, #376]	; (9071c <mw_paint_window_client_rect+0x18c>)
   905a2:	6950      	ldr	r0, [r2, #20]
   905a4:	4283      	cmp	r3, r0
   905a6:	d04f      	beq.n	90648 <mw_paint_window_client_rect+0xb8>
   905a8:	6d50      	ldr	r0, [r2, #84]	; 0x54
   905aa:	4283      	cmp	r3, r0
   905ac:	d052      	beq.n	90654 <mw_paint_window_client_rect+0xc4>
   905ae:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   905b2:	4283      	cmp	r3, r0
   905b4:	d055      	beq.n	90662 <mw_paint_window_client_rect+0xd2>
   905b6:	f8d2 00d4 	ldr.w	r0, [r2, #212]	; 0xd4
   905ba:	4283      	cmp	r3, r0
   905bc:	d059      	beq.n	90672 <mw_paint_window_client_rect+0xe2>
   905be:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
   905c2:	4283      	cmp	r3, r0
   905c4:	d05d      	beq.n	90682 <mw_paint_window_client_rect+0xf2>
   905c6:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   905ca:	4283      	cmp	r3, r0
   905cc:	d061      	beq.n	90692 <mw_paint_window_client_rect+0x102>
   905ce:	f8d2 0194 	ldr.w	r0, [r2, #404]	; 0x194
   905d2:	4283      	cmp	r3, r0
   905d4:	d065      	beq.n	906a2 <mw_paint_window_client_rect+0x112>
   905d6:	f8d2 01d4 	ldr.w	r0, [r2, #468]	; 0x1d4
   905da:	4283      	cmp	r3, r0
   905dc:	d069      	beq.n	906b2 <mw_paint_window_client_rect+0x122>
   905de:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
   905e2:	4283      	cmp	r3, r0
   905e4:	d06d      	beq.n	906c2 <mw_paint_window_client_rect+0x132>
   905e6:	f8d2 0254 	ldr.w	r0, [r2, #596]	; 0x254
   905ea:	4283      	cmp	r3, r0
   905ec:	d071      	beq.n	906d2 <mw_paint_window_client_rect+0x142>
   905ee:	f8d2 0294 	ldr.w	r0, [r2, #660]	; 0x294
   905f2:	4283      	cmp	r3, r0
   905f4:	d075      	beq.n	906e2 <mw_paint_window_client_rect+0x152>
   905f6:	f8d2 02d4 	ldr.w	r0, [r2, #724]	; 0x2d4
   905fa:	4283      	cmp	r3, r0
   905fc:	d079      	beq.n	906f2 <mw_paint_window_client_rect+0x162>
   905fe:	f8d2 0314 	ldr.w	r0, [r2, #788]	; 0x314
   90602:	4283      	cmp	r3, r0
   90604:	d07d      	beq.n	90702 <mw_paint_window_client_rect+0x172>
   90606:	f8d2 0354 	ldr.w	r0, [r2, #852]	; 0x354
   9060a:	4283      	cmp	r3, r0
   9060c:	d008      	beq.n	90620 <mw_paint_window_client_rect+0x90>
		MW_ASSERT((bool)false, "Bad window handle");
   9060e:	4b44      	ldr	r3, [pc, #272]	; (90720 <mw_paint_window_client_rect+0x190>)
   90610:	f241 22ec 	movw	r2, #4844	; 0x12ec
   90614:	4943      	ldr	r1, [pc, #268]	; (90724 <mw_paint_window_client_rect+0x194>)
   90616:	2000      	movs	r0, #0
   90618:	4c43      	ldr	r4, [pc, #268]	; (90728 <mw_paint_window_client_rect+0x198>)
   9061a:	47a0      	blx	r4
}
   9061c:	b006      	add	sp, #24
   9061e:	bd70      	pop	{r4, r5, r6, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90620:	f8d2 234c 	ldr.w	r2, [r2, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   90624:	0692      	lsls	r2, r2, #26
   90626:	d5f2      	bpl.n	9060e <mw_paint_window_client_rect+0x7e>
	new_message.message_data = message_data;
   90628:	2200      	movs	r2, #0
	new_message.message_id = message_id;
   9062a:	264d      	movs	r6, #77	; 0x4d
	new_message.message_recipient_type = recipient_type;
   9062c:	2502      	movs	r5, #2
		(void)mw_message_queue_insert(&new_message);
   9062e:	a801      	add	r0, sp, #4
   90630:	4c3e      	ldr	r4, [pc, #248]	; (9072c <mw_paint_window_client_rect+0x19c>)
	new_message.recipient_handle = recipient_handle;
   90632:	9302      	str	r3, [sp, #8]
	new_message.message_pointer = message_pointer;
   90634:	9105      	str	r1, [sp, #20]
	new_message.message_id = message_id;
   90636:	f88d 600c 	strb.w	r6, [sp, #12]
	new_message.message_data = message_data;
   9063a:	9204      	str	r2, [sp, #16]
	new_message.sender_handle = sender_handle;
   9063c:	9201      	str	r2, [sp, #4]
	new_message.message_recipient_type = recipient_type;
   9063e:	f88d 500d 	strb.w	r5, [sp, #13]
		(void)mw_message_queue_insert(&new_message);
   90642:	47a0      	blx	r4
}
   90644:	b006      	add	sp, #24
   90646:	bd70      	pop	{r4, r5, r6, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90648:	68d0      	ldr	r0, [r2, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   9064a:	0680      	lsls	r0, r0, #26
   9064c:	d4ec      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   9064e:	6d50      	ldr	r0, [r2, #84]	; 0x54
   90650:	4283      	cmp	r3, r0
   90652:	d1ac      	bne.n	905ae <mw_paint_window_client_rect+0x1e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90654:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   90656:	0686      	lsls	r6, r0, #26
   90658:	d4e6      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   9065a:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   9065e:	4283      	cmp	r3, r0
   90660:	d1a9      	bne.n	905b6 <mw_paint_window_client_rect+0x26>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90662:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   90666:	0685      	lsls	r5, r0, #26
   90668:	d4de      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   9066a:	f8d2 00d4 	ldr.w	r0, [r2, #212]	; 0xd4
   9066e:	4283      	cmp	r3, r0
   90670:	d1a5      	bne.n	905be <mw_paint_window_client_rect+0x2e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90672:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   90676:	0684      	lsls	r4, r0, #26
   90678:	d4d6      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   9067a:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
   9067e:	4283      	cmp	r3, r0
   90680:	d1a1      	bne.n	905c6 <mw_paint_window_client_rect+0x36>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90682:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   90686:	0680      	lsls	r0, r0, #26
   90688:	d4ce      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   9068a:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   9068e:	4283      	cmp	r3, r0
   90690:	d19d      	bne.n	905ce <mw_paint_window_client_rect+0x3e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90692:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   90696:	0686      	lsls	r6, r0, #26
   90698:	d4c6      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   9069a:	f8d2 0194 	ldr.w	r0, [r2, #404]	; 0x194
   9069e:	4283      	cmp	r3, r0
   906a0:	d199      	bne.n	905d6 <mw_paint_window_client_rect+0x46>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   906a2:	f8d2 018c 	ldr.w	r0, [r2, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   906a6:	0685      	lsls	r5, r0, #26
   906a8:	d4be      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   906aa:	f8d2 01d4 	ldr.w	r0, [r2, #468]	; 0x1d4
   906ae:	4283      	cmp	r3, r0
   906b0:	d195      	bne.n	905de <mw_paint_window_client_rect+0x4e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   906b2:	f8d2 01cc 	ldr.w	r0, [r2, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   906b6:	0684      	lsls	r4, r0, #26
   906b8:	d4b6      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   906ba:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
   906be:	4283      	cmp	r3, r0
   906c0:	d191      	bne.n	905e6 <mw_paint_window_client_rect+0x56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   906c2:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   906c6:	0680      	lsls	r0, r0, #26
   906c8:	d4ae      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   906ca:	f8d2 0254 	ldr.w	r0, [r2, #596]	; 0x254
   906ce:	4283      	cmp	r3, r0
   906d0:	d18d      	bne.n	905ee <mw_paint_window_client_rect+0x5e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   906d2:	f8d2 024c 	ldr.w	r0, [r2, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   906d6:	0686      	lsls	r6, r0, #26
   906d8:	d4a6      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   906da:	f8d2 0294 	ldr.w	r0, [r2, #660]	; 0x294
   906de:	4283      	cmp	r3, r0
   906e0:	d189      	bne.n	905f6 <mw_paint_window_client_rect+0x66>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   906e2:	f8d2 028c 	ldr.w	r0, [r2, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   906e6:	0685      	lsls	r5, r0, #26
   906e8:	d49e      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   906ea:	f8d2 02d4 	ldr.w	r0, [r2, #724]	; 0x2d4
   906ee:	4283      	cmp	r3, r0
   906f0:	d185      	bne.n	905fe <mw_paint_window_client_rect+0x6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   906f2:	f8d2 02cc 	ldr.w	r0, [r2, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   906f6:	0684      	lsls	r4, r0, #26
   906f8:	d496      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   906fa:	f8d2 0314 	ldr.w	r0, [r2, #788]	; 0x314
   906fe:	4283      	cmp	r3, r0
   90700:	d181      	bne.n	90606 <mw_paint_window_client_rect+0x76>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90702:	f8d2 030c 	ldr.w	r0, [r2, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   90706:	0680      	lsls	r0, r0, #26
   90708:	d48e      	bmi.n	90628 <mw_paint_window_client_rect+0x98>
   9070a:	e77c      	b.n	90606 <mw_paint_window_client_rect+0x76>
		MW_ASSERT((bool)false, "Null pointer argument");
   9070c:	4608      	mov	r0, r1
   9070e:	4b08      	ldr	r3, [pc, #32]	; (90730 <mw_paint_window_client_rect+0x1a0>)
   90710:	f241 22e5 	movw	r2, #4837	; 0x12e5
   90714:	4903      	ldr	r1, [pc, #12]	; (90724 <mw_paint_window_client_rect+0x194>)
   90716:	4c04      	ldr	r4, [pc, #16]	; (90728 <mw_paint_window_client_rect+0x198>)
   90718:	47a0      	blx	r4
		return;
   9071a:	e77f      	b.n	9061c <mw_paint_window_client_rect+0x8c>
   9071c:	20071bd8 	.word	0x20071bd8
   90720:	000ab764 	.word	0x000ab764
   90724:	000ab5b0 	.word	0x000ab5b0
   90728:	00095add 	.word	0x00095add
   9072c:	00095bc1 	.word	0x00095bc1
   90730:	000a6618 	.word	0x000a6618

00090734 <mw_get_window_client_rect>:
{
   90734:	b538      	push	{r3, r4, r5, lr}
   90736:	4604      	mov	r4, r0
	if (window_handle == MW_INVALID_HANDLE)
   90738:	b3b1      	cbz	r1, 907a8 <mw_get_window_client_rect+0x74>
		if (mw_all_windows[i].window_handle == window_handle &&
   9073a:	4b4e      	ldr	r3, [pc, #312]	; (90874 <mw_get_window_client_rect+0x140>)
   9073c:	695a      	ldr	r2, [r3, #20]
   9073e:	4291      	cmp	r1, r2
   90740:	d03e      	beq.n	907c0 <mw_get_window_client_rect+0x8c>
   90742:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   90744:	4291      	cmp	r1, r2
   90746:	d046      	beq.n	907d6 <mw_get_window_client_rect+0xa2>
   90748:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   9074c:	4291      	cmp	r1, r2
   9074e:	d047      	beq.n	907e0 <mw_get_window_client_rect+0xac>
   90750:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   90754:	4291      	cmp	r1, r2
   90756:	d049      	beq.n	907ec <mw_get_window_client_rect+0xb8>
   90758:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   9075c:	4291      	cmp	r1, r2
   9075e:	d052      	beq.n	90806 <mw_get_window_client_rect+0xd2>
   90760:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   90764:	4291      	cmp	r1, r2
   90766:	d054      	beq.n	90812 <mw_get_window_client_rect+0xde>
   90768:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
   9076c:	4291      	cmp	r1, r2
   9076e:	d056      	beq.n	9081e <mw_get_window_client_rect+0xea>
   90770:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
   90774:	4291      	cmp	r1, r2
   90776:	d058      	beq.n	9082a <mw_get_window_client_rect+0xf6>
   90778:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   9077c:	4291      	cmp	r1, r2
   9077e:	d05a      	beq.n	90836 <mw_get_window_client_rect+0x102>
   90780:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
   90784:	4291      	cmp	r1, r2
   90786:	d05c      	beq.n	90842 <mw_get_window_client_rect+0x10e>
   90788:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   9078c:	4291      	cmp	r1, r2
   9078e:	d05e      	beq.n	9084e <mw_get_window_client_rect+0x11a>
   90790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
   90794:	4291      	cmp	r1, r2
   90796:	d060      	beq.n	9085a <mw_get_window_client_rect+0x126>
   90798:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
   9079c:	4291      	cmp	r1, r2
   9079e:	d062      	beq.n	90866 <mw_get_window_client_rect+0x132>
   907a0:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   907a4:	4291      	cmp	r1, r2
   907a6:	d010      	beq.n	907ca <mw_get_window_client_rect+0x96>
		MW_ASSERT((bool)false, "Bad window handle");
   907a8:	4b33      	ldr	r3, [pc, #204]	; (90878 <mw_get_window_client_rect+0x144>)
   907aa:	f241 3254 	movw	r2, #4948	; 0x1354
   907ae:	4933      	ldr	r1, [pc, #204]	; (9087c <mw_get_window_client_rect+0x148>)
   907b0:	2000      	movs	r0, #0
   907b2:	4d33      	ldr	r5, [pc, #204]	; (90880 <mw_get_window_client_rect+0x14c>)
   907b4:	47a8      	blx	r5
		return (default_rect);
   907b6:	2300      	movs	r3, #0
   907b8:	6023      	str	r3, [r4, #0]
   907ba:	6063      	str	r3, [r4, #4]
}
   907bc:	4620      	mov	r0, r4
   907be:	bd38      	pop	{r3, r4, r5, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   907c0:	68da      	ldr	r2, [r3, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   907c2:	0690      	lsls	r0, r2, #26
   907c4:	d5bd      	bpl.n	90742 <mw_get_window_client_rect+0xe>
   907c6:	2200      	movs	r2, #0
   907c8:	e015      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   907ca:	f8d3 234c 	ldr.w	r2, [r3, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   907ce:	0692      	lsls	r2, r2, #26
   907d0:	d5ea      	bpl.n	907a8 <mw_get_window_client_rect+0x74>
   907d2:	220d      	movs	r2, #13
   907d4:	e00f      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   907d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   907d8:	0692      	lsls	r2, r2, #26
   907da:	d5b5      	bpl.n	90748 <mw_get_window_client_rect+0x14>
   907dc:	2201      	movs	r2, #1
   907de:	e00a      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   907e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   907e4:	0695      	lsls	r5, r2, #26
   907e6:	d5b3      	bpl.n	90750 <mw_get_window_client_rect+0x1c>
   907e8:	2202      	movs	r2, #2
   907ea:	e004      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   907ec:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   907f0:	0690      	lsls	r0, r2, #26
   907f2:	d5b1      	bpl.n	90758 <mw_get_window_client_rect+0x24>
   907f4:	2203      	movs	r2, #3
	return (mw_all_windows[window_id].client_rect);
   907f6:	eb03 1382 	add.w	r3, r3, r2, lsl #6
   907fa:	3320      	adds	r3, #32
   907fc:	cb03      	ldmia	r3!, {r0, r1}
   907fe:	6020      	str	r0, [r4, #0]
   90800:	6061      	str	r1, [r4, #4]
}
   90802:	4620      	mov	r0, r4
   90804:	bd38      	pop	{r3, r4, r5, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90806:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   9080a:	0692      	lsls	r2, r2, #26
   9080c:	d5a8      	bpl.n	90760 <mw_get_window_client_rect+0x2c>
   9080e:	2204      	movs	r2, #4
   90810:	e7f1      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90812:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   90816:	0695      	lsls	r5, r2, #26
   90818:	d5a6      	bpl.n	90768 <mw_get_window_client_rect+0x34>
   9081a:	2205      	movs	r2, #5
   9081c:	e7eb      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9081e:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   90822:	0690      	lsls	r0, r2, #26
   90824:	d5a4      	bpl.n	90770 <mw_get_window_client_rect+0x3c>
   90826:	2206      	movs	r2, #6
   90828:	e7e5      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9082a:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9082e:	0692      	lsls	r2, r2, #26
   90830:	d5a2      	bpl.n	90778 <mw_get_window_client_rect+0x44>
   90832:	2207      	movs	r2, #7
   90834:	e7df      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90836:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   9083a:	0695      	lsls	r5, r2, #26
   9083c:	d5a0      	bpl.n	90780 <mw_get_window_client_rect+0x4c>
   9083e:	2208      	movs	r2, #8
   90840:	e7d9      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90842:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   90846:	0690      	lsls	r0, r2, #26
   90848:	d59e      	bpl.n	90788 <mw_get_window_client_rect+0x54>
   9084a:	2209      	movs	r2, #9
   9084c:	e7d3      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9084e:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   90852:	0692      	lsls	r2, r2, #26
   90854:	d59c      	bpl.n	90790 <mw_get_window_client_rect+0x5c>
   90856:	220a      	movs	r2, #10
   90858:	e7cd      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9085a:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9085e:	0695      	lsls	r5, r2, #26
   90860:	d59a      	bpl.n	90798 <mw_get_window_client_rect+0x64>
   90862:	220b      	movs	r2, #11
   90864:	e7c7      	b.n	907f6 <mw_get_window_client_rect+0xc2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90866:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   9086a:	0690      	lsls	r0, r2, #26
   9086c:	d598      	bpl.n	907a0 <mw_get_window_client_rect+0x6c>
   9086e:	220c      	movs	r2, #12
   90870:	e7c1      	b.n	907f6 <mw_get_window_client_rect+0xc2>
   90872:	bf00      	nop
   90874:	20071bd8 	.word	0x20071bd8
   90878:	000ab764 	.word	0x000ab764
   9087c:	000ab5e0 	.word	0x000ab5e0
   90880:	00095add 	.word	0x00095add

00090884 <mw_get_window_instance_data>:
	if (window_handle == MW_INVALID_HANDLE)
   90884:	b3b0      	cbz	r0, 908f4 <mw_get_window_instance_data+0x70>
		if (mw_all_windows[i].window_handle == window_handle &&
   90886:	4b4b      	ldr	r3, [pc, #300]	; (909b4 <mw_get_window_instance_data+0x130>)
   90888:	695a      	ldr	r2, [r3, #20]
   9088a:	4290      	cmp	r0, r2
   9088c:	d03c      	beq.n	90908 <mw_get_window_instance_data+0x84>
   9088e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   90890:	4290      	cmp	r0, r2
   90892:	d044      	beq.n	9091e <mw_get_window_instance_data+0x9a>
   90894:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   90898:	4290      	cmp	r0, r2
   9089a:	d045      	beq.n	90928 <mw_get_window_instance_data+0xa4>
   9089c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   908a0:	4290      	cmp	r0, r2
   908a2:	d047      	beq.n	90934 <mw_get_window_instance_data+0xb0>
   908a4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   908a8:	4290      	cmp	r0, r2
   908aa:	d04c      	beq.n	90946 <mw_get_window_instance_data+0xc2>
   908ac:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   908b0:	4290      	cmp	r0, r2
   908b2:	d04e      	beq.n	90952 <mw_get_window_instance_data+0xce>
   908b4:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
   908b8:	4290      	cmp	r0, r2
   908ba:	d050      	beq.n	9095e <mw_get_window_instance_data+0xda>
   908bc:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
   908c0:	4290      	cmp	r0, r2
   908c2:	d052      	beq.n	9096a <mw_get_window_instance_data+0xe6>
   908c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   908c8:	4290      	cmp	r0, r2
   908ca:	d054      	beq.n	90976 <mw_get_window_instance_data+0xf2>
   908cc:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
   908d0:	4290      	cmp	r0, r2
   908d2:	d056      	beq.n	90982 <mw_get_window_instance_data+0xfe>
   908d4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   908d8:	4290      	cmp	r0, r2
   908da:	d058      	beq.n	9098e <mw_get_window_instance_data+0x10a>
   908dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
   908e0:	4290      	cmp	r0, r2
   908e2:	d05a      	beq.n	9099a <mw_get_window_instance_data+0x116>
   908e4:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
   908e8:	4290      	cmp	r0, r2
   908ea:	d05c      	beq.n	909a6 <mw_get_window_instance_data+0x122>
   908ec:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   908f0:	4290      	cmp	r0, r2
   908f2:	d00e      	beq.n	90912 <mw_get_window_instance_data+0x8e>
{
   908f4:	b510      	push	{r4, lr}
		MW_ASSERT((bool)false, "Bad window handle");
   908f6:	4b30      	ldr	r3, [pc, #192]	; (909b8 <mw_get_window_instance_data+0x134>)
   908f8:	f241 3263 	movw	r2, #4963	; 0x1363
   908fc:	492f      	ldr	r1, [pc, #188]	; (909bc <mw_get_window_instance_data+0x138>)
   908fe:	2000      	movs	r0, #0
   90900:	4c2f      	ldr	r4, [pc, #188]	; (909c0 <mw_get_window_instance_data+0x13c>)
   90902:	47a0      	blx	r4
		return NULL;
   90904:	2000      	movs	r0, #0
   90906:	bd10      	pop	{r4, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90908:	68da      	ldr	r2, [r3, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   9090a:	0691      	lsls	r1, r2, #26
   9090c:	d5bf      	bpl.n	9088e <mw_get_window_instance_data+0xa>
   9090e:	2200      	movs	r2, #0
   90910:	e015      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90912:	f8d3 234c 	ldr.w	r2, [r3, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   90916:	0692      	lsls	r2, r2, #26
   90918:	d5ec      	bpl.n	908f4 <mw_get_window_instance_data+0x70>
   9091a:	220d      	movs	r2, #13
   9091c:	e00f      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9091e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   90920:	0692      	lsls	r2, r2, #26
   90922:	d5b7      	bpl.n	90894 <mw_get_window_instance_data+0x10>
   90924:	2201      	movs	r2, #1
   90926:	e00a      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90928:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   9092c:	0691      	lsls	r1, r2, #26
   9092e:	d5b5      	bpl.n	9089c <mw_get_window_instance_data+0x18>
   90930:	2202      	movs	r2, #2
   90932:	e004      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90934:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   90938:	0692      	lsls	r2, r2, #26
   9093a:	d5b3      	bpl.n	908a4 <mw_get_window_instance_data+0x20>
   9093c:	2203      	movs	r2, #3
	return (mw_all_windows[window_id].instance_data);
   9093e:	eb03 1382 	add.w	r3, r3, r2, lsl #6
   90942:	6918      	ldr	r0, [r3, #16]
   90944:	4770      	bx	lr
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90946:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   9094a:	0691      	lsls	r1, r2, #26
   9094c:	d5ae      	bpl.n	908ac <mw_get_window_instance_data+0x28>
   9094e:	2204      	movs	r2, #4
   90950:	e7f5      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90952:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   90956:	0692      	lsls	r2, r2, #26
   90958:	d5ac      	bpl.n	908b4 <mw_get_window_instance_data+0x30>
   9095a:	2205      	movs	r2, #5
   9095c:	e7ef      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9095e:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   90962:	0691      	lsls	r1, r2, #26
   90964:	d5aa      	bpl.n	908bc <mw_get_window_instance_data+0x38>
   90966:	2206      	movs	r2, #6
   90968:	e7e9      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9096a:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9096e:	0692      	lsls	r2, r2, #26
   90970:	d5a8      	bpl.n	908c4 <mw_get_window_instance_data+0x40>
   90972:	2207      	movs	r2, #7
   90974:	e7e3      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90976:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   9097a:	0691      	lsls	r1, r2, #26
   9097c:	d5a6      	bpl.n	908cc <mw_get_window_instance_data+0x48>
   9097e:	2208      	movs	r2, #8
   90980:	e7dd      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90982:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   90986:	0692      	lsls	r2, r2, #26
   90988:	d5a4      	bpl.n	908d4 <mw_get_window_instance_data+0x50>
   9098a:	2209      	movs	r2, #9
   9098c:	e7d7      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9098e:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   90992:	0691      	lsls	r1, r2, #26
   90994:	d5a2      	bpl.n	908dc <mw_get_window_instance_data+0x58>
   90996:	220a      	movs	r2, #10
   90998:	e7d1      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9099a:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9099e:	0692      	lsls	r2, r2, #26
   909a0:	d5a0      	bpl.n	908e4 <mw_get_window_instance_data+0x60>
   909a2:	220b      	movs	r2, #11
   909a4:	e7cb      	b.n	9093e <mw_get_window_instance_data+0xba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   909a6:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   909aa:	0691      	lsls	r1, r2, #26
   909ac:	d59e      	bpl.n	908ec <mw_get_window_instance_data+0x68>
   909ae:	220c      	movs	r2, #12
   909b0:	e7c5      	b.n	9093e <mw_get_window_instance_data+0xba>
   909b2:	bf00      	nop
   909b4:	20071bd8 	.word	0x20071bd8
   909b8:	000ab764 	.word	0x000ab764
   909bc:	000ab5fc 	.word	0x000ab5fc
   909c0:	00095add 	.word	0x00095add

000909c4 <mw_add_control>:
{
   909c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   909c8:	b08b      	sub	sp, #44	; 0x2c
   909ca:	469b      	mov	fp, r3
   909cc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   909d0:	9300      	str	r3, [sp, #0]
	if (rect == (void*)0 || instance_data == (void*)0 || paint_func == (void*)0 || message_func == (void*)0)
   909d2:	2800      	cmp	r0, #0
   909d4:	d05b      	beq.n	90a8e <mw_add_control+0xca>
   909d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   909d8:	2b00      	cmp	r3, #0
   909da:	d058      	beq.n	90a8e <mw_add_control+0xca>
   909dc:	4692      	mov	sl, r2
   909de:	2a00      	cmp	r2, #0
   909e0:	d055      	beq.n	90a8e <mw_add_control+0xca>
   909e2:	f1bb 0f00 	cmp.w	fp, #0
   909e6:	d052      	beq.n	90a8e <mw_add_control+0xca>
	if (in_client_window_paint_function)
   909e8:	4bc0      	ldr	r3, [pc, #768]	; (90cec <mw_add_control+0x328>)
   909ea:	781b      	ldrb	r3, [r3, #0]
   909ec:	9301      	str	r3, [sp, #4]
   909ee:	2b00      	cmp	r3, #0
   909f0:	f040 81bb 	bne.w	90d6a <mw_add_control+0x3a6>
   909f4:	460f      	mov	r7, r1
	if (window_handle == MW_INVALID_HANDLE)
   909f6:	b919      	cbnz	r1, 90a00 <mw_add_control+0x3c>
		MW_ASSERT((bool)false, "Bad window handle");
   909f8:	4bbd      	ldr	r3, [pc, #756]	; (90cf0 <mw_add_control+0x32c>)
   909fa:	f241 32a9 	movw	r2, #5033	; 0x13a9
   909fe:	e049      	b.n	90a94 <mw_add_control+0xd0>
		if (mw_all_windows[i].window_handle == window_handle &&
   90a00:	4ebc      	ldr	r6, [pc, #752]	; (90cf4 <mw_add_control+0x330>)
   90a02:	4680      	mov	r8, r0
   90a04:	6973      	ldr	r3, [r6, #20]
   90a06:	4299      	cmp	r1, r3
   90a08:	d04c      	beq.n	90aa4 <mw_add_control+0xe0>
   90a0a:	6d73      	ldr	r3, [r6, #84]	; 0x54
   90a0c:	429f      	cmp	r7, r3
   90a0e:	d04e      	beq.n	90aae <mw_add_control+0xea>
   90a10:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   90a14:	429f      	cmp	r7, r3
   90a16:	d04f      	beq.n	90ab8 <mw_add_control+0xf4>
   90a18:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
   90a1c:	429f      	cmp	r7, r3
   90a1e:	d051      	beq.n	90ac4 <mw_add_control+0x100>
   90a20:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
   90a24:	429f      	cmp	r7, r3
   90a26:	f000 8145 	beq.w	90cb4 <mw_add_control+0x2f0>
   90a2a:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   90a2e:	429f      	cmp	r7, r3
   90a30:	f000 8147 	beq.w	90cc2 <mw_add_control+0x2fe>
   90a34:	f8d6 3194 	ldr.w	r3, [r6, #404]	; 0x194
   90a38:	429f      	cmp	r7, r3
   90a3a:	f000 8149 	beq.w	90cd0 <mw_add_control+0x30c>
   90a3e:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
   90a42:	429f      	cmp	r7, r3
   90a44:	f000 814b 	beq.w	90cde <mw_add_control+0x31a>
   90a48:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
   90a4c:	429f      	cmp	r7, r3
   90a4e:	f000 8169 	beq.w	90d24 <mw_add_control+0x360>
   90a52:	f8d6 3254 	ldr.w	r3, [r6, #596]	; 0x254
   90a56:	429f      	cmp	r7, r3
   90a58:	f000 816b 	beq.w	90d32 <mw_add_control+0x36e>
   90a5c:	f8d6 3294 	ldr.w	r3, [r6, #660]	; 0x294
   90a60:	429f      	cmp	r7, r3
   90a62:	f000 816d 	beq.w	90d40 <mw_add_control+0x37c>
   90a66:	f8d6 32d4 	ldr.w	r3, [r6, #724]	; 0x2d4
   90a6a:	429f      	cmp	r7, r3
   90a6c:	f000 816f 	beq.w	90d4e <mw_add_control+0x38a>
   90a70:	f8d6 3314 	ldr.w	r3, [r6, #788]	; 0x314
   90a74:	429f      	cmp	r7, r3
   90a76:	f000 8171 	beq.w	90d5c <mw_add_control+0x398>
   90a7a:	f8d6 3354 	ldr.w	r3, [r6, #852]	; 0x354
   90a7e:	429f      	cmp	r7, r3
   90a80:	d1ba      	bne.n	909f8 <mw_add_control+0x34>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90a82:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   90a86:	0698      	lsls	r0, r3, #26
   90a88:	d5b6      	bpl.n	909f8 <mw_add_control+0x34>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90a8a:	230d      	movs	r3, #13
   90a8c:	e01f      	b.n	90ace <mw_add_control+0x10a>
		MW_ASSERT((bool)false, "Null pointer argument");
   90a8e:	f241 329a 	movw	r2, #5018	; 0x139a
   90a92:	4b99      	ldr	r3, [pc, #612]	; (90cf8 <mw_add_control+0x334>)
		MW_ASSERT((bool)false, "No space for new control");
   90a94:	2000      	movs	r0, #0
   90a96:	4999      	ldr	r1, [pc, #612]	; (90cfc <mw_add_control+0x338>)
   90a98:	4c99      	ldr	r4, [pc, #612]	; (90d00 <mw_add_control+0x33c>)
   90a9a:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   90a9c:	2000      	movs	r0, #0
}
   90a9e:	b00b      	add	sp, #44	; 0x2c
   90aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90aa4:	68f3      	ldr	r3, [r6, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   90aa6:	069c      	lsls	r4, r3, #26
   90aa8:	d5af      	bpl.n	90a0a <mw_add_control+0x46>
   90aaa:	9b01      	ldr	r3, [sp, #4]
   90aac:	e00f      	b.n	90ace <mw_add_control+0x10a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90aae:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   90ab0:	0698      	lsls	r0, r3, #26
   90ab2:	d5ad      	bpl.n	90a10 <mw_add_control+0x4c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90ab4:	2301      	movs	r3, #1
   90ab6:	e00a      	b.n	90ace <mw_add_control+0x10a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90ab8:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   90abc:	0699      	lsls	r1, r3, #26
   90abe:	d5ab      	bpl.n	90a18 <mw_add_control+0x54>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90ac0:	2302      	movs	r3, #2
   90ac2:	e004      	b.n	90ace <mw_add_control+0x10a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90ac4:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   90ac8:	069a      	lsls	r2, r3, #26
   90aca:	d5a9      	bpl.n	90a20 <mw_add_control+0x5c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90acc:	2303      	movs	r3, #3
	if ((mw_all_windows[parent_window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U)
   90ace:	eb06 1383 	add.w	r3, r6, r3, lsl #6
   90ad2:	68dc      	ldr	r4, [r3, #12]
   90ad4:	f014 0420 	ands.w	r4, r4, #32
   90ad8:	f000 8156 	beq.w	90d88 <mw_add_control+0x3c4>
	if (rect->x < 0 || rect->y < 0)
   90adc:	f9b8 3000 	ldrsh.w	r3, [r8]
   90ae0:	2b00      	cmp	r3, #0
   90ae2:	f2c0 814d 	blt.w	90d80 <mw_add_control+0x3bc>
   90ae6:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
   90aea:	2b00      	cmp	r3, #0
   90aec:	f2c0 8148 	blt.w	90d80 <mw_add_control+0x3bc>
   90af0:	4b84      	ldr	r3, [pc, #528]	; (90d04 <mw_add_control+0x340>)
   90af2:	2500      	movs	r5, #0
   90af4:	9303      	str	r3, [sp, #12]
   90af6:	e003      	b.n	90b00 <mw_add_control+0x13c>
   90af8:	3501      	adds	r5, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   90afa:	2d18      	cmp	r5, #24
   90afc:	f000 8139 	beq.w	90d72 <mw_add_control+0x3ae>
	    if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == 0U)
   90b00:	8b9c      	ldrh	r4, [r3, #28]
   90b02:	3320      	adds	r3, #32
   90b04:	f014 0404 	ands.w	r4, r4, #4
   90b08:	d1f6      	bne.n	90af8 <mw_add_control+0x134>
	next_handle++;
   90b0a:	f8df e214 	ldr.w	lr, [pc, #532]	; 90d20 <mw_add_control+0x35c>
   90b0e:	9402      	str	r4, [sp, #8]
   90b10:	f8de 1000 	ldr.w	r1, [lr]
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   90b14:	4c7a      	ldr	r4, [pc, #488]	; (90d00 <mw_add_control+0x33c>)
   90b16:	4b78      	ldr	r3, [pc, #480]	; (90cf8 <mw_add_control+0x334>)
   90b18:	f44f 7227 	mov.w	r2, #668	; 0x29c
	next_handle++;
   90b1c:	f101 0901 	add.w	r9, r1, #1
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   90b20:	2001      	movs	r0, #1
   90b22:	4979      	ldr	r1, [pc, #484]	; (90d08 <mw_add_control+0x344>)
	next_handle++;
   90b24:	f8ce 9000 	str.w	r9, [lr]
	MW_ASSERT(rect != (void*)0, "Null pointer argument");
   90b28:	47a0      	blx	r4
	MW_ASSERT(paint_func != (void*)0, "Null pointer argument");
   90b2a:	4b73      	ldr	r3, [pc, #460]	; (90cf8 <mw_add_control+0x334>)
   90b2c:	f240 229d 	movw	r2, #669	; 0x29d
   90b30:	4975      	ldr	r1, [pc, #468]	; (90d08 <mw_add_control+0x344>)
   90b32:	2001      	movs	r0, #1
   90b34:	47a0      	blx	r4
	MW_ASSERT(message_func != (void*)0, "Null pointer argument");
   90b36:	4b70      	ldr	r3, [pc, #448]	; (90cf8 <mw_add_control+0x334>)
   90b38:	f240 229e 	movw	r2, #670	; 0x29e
   90b3c:	4972      	ldr	r1, [pc, #456]	; (90d08 <mw_add_control+0x344>)
   90b3e:	2001      	movs	r0, #1
   90b40:	47a0      	blx	r4
	MW_ASSERT(control_id < MW_MAX_CONTROL_COUNT, "Illegal control id");
   90b42:	4b72      	ldr	r3, [pc, #456]	; (90d0c <mw_add_control+0x348>)
   90b44:	f240 229f 	movw	r2, #671	; 0x29f
   90b48:	496f      	ldr	r1, [pc, #444]	; (90d08 <mw_add_control+0x344>)
   90b4a:	2001      	movs	r0, #1
   90b4c:	47a0      	blx	r4
	MW_ASSERT(instance_data != (void*)0, "Null pointer argument");
   90b4e:	4b6a      	ldr	r3, [pc, #424]	; (90cf8 <mw_add_control+0x334>)
   90b50:	f44f 7228 	mov.w	r2, #672	; 0x2a0
   90b54:	496c      	ldr	r1, [pc, #432]	; (90d08 <mw_add_control+0x344>)
   90b56:	2001      	movs	r0, #1
   90b58:	47a0      	blx	r4
		if (mw_all_windows[i].window_handle == window_handle &&
   90b5a:	6973      	ldr	r3, [r6, #20]
   90b5c:	429f      	cmp	r7, r3
   90b5e:	f000 811c 	beq.w	90d9a <mw_add_control+0x3d6>
   90b62:	6d73      	ldr	r3, [r6, #84]	; 0x54
   90b64:	429f      	cmp	r7, r3
   90b66:	f000 811e 	beq.w	90da6 <mw_add_control+0x3e2>
   90b6a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   90b6e:	429f      	cmp	r7, r3
   90b70:	f000 8120 	beq.w	90db4 <mw_add_control+0x3f0>
   90b74:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
   90b78:	429f      	cmp	r7, r3
   90b7a:	f000 8123 	beq.w	90dc4 <mw_add_control+0x400>
   90b7e:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
   90b82:	429f      	cmp	r7, r3
   90b84:	f000 8126 	beq.w	90dd4 <mw_add_control+0x410>
   90b88:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   90b8c:	429f      	cmp	r7, r3
   90b8e:	f000 8129 	beq.w	90de4 <mw_add_control+0x420>
   90b92:	f8d6 3194 	ldr.w	r3, [r6, #404]	; 0x194
   90b96:	429f      	cmp	r7, r3
   90b98:	f000 812c 	beq.w	90df4 <mw_add_control+0x430>
   90b9c:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
   90ba0:	429f      	cmp	r7, r3
   90ba2:	f000 812f 	beq.w	90e04 <mw_add_control+0x440>
   90ba6:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
   90baa:	429f      	cmp	r7, r3
   90bac:	f000 8132 	beq.w	90e14 <mw_add_control+0x450>
   90bb0:	f8d6 3254 	ldr.w	r3, [r6, #596]	; 0x254
   90bb4:	429f      	cmp	r7, r3
   90bb6:	f000 8135 	beq.w	90e24 <mw_add_control+0x460>
   90bba:	f8d6 3294 	ldr.w	r3, [r6, #660]	; 0x294
   90bbe:	429f      	cmp	r7, r3
   90bc0:	f000 8138 	beq.w	90e34 <mw_add_control+0x470>
   90bc4:	f8d6 32d4 	ldr.w	r3, [r6, #724]	; 0x2d4
   90bc8:	429f      	cmp	r7, r3
   90bca:	f000 813b 	beq.w	90e44 <mw_add_control+0x480>
   90bce:	f8d6 3314 	ldr.w	r3, [r6, #788]	; 0x314
   90bd2:	429f      	cmp	r7, r3
   90bd4:	f000 813e 	beq.w	90e54 <mw_add_control+0x490>
   90bd8:	f8d6 3354 	ldr.w	r3, [r6, #852]	; 0x354
   90bdc:	429f      	cmp	r7, r3
   90bde:	f000 8141 	beq.w	90e64 <mw_add_control+0x4a0>
   90be2:	230e      	movs	r3, #14
   90be4:	2000      	movs	r0, #0
   90be6:	9302      	str	r3, [sp, #8]
	MW_ASSERT(parent_window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   90be8:	4b41      	ldr	r3, [pc, #260]	; (90cf0 <mw_add_control+0x32c>)
   90bea:	f44f 7229 	mov.w	r2, #676	; 0x2a4
   90bee:	4946      	ldr	r1, [pc, #280]	; (90d08 <mw_add_control+0x344>)
   90bf0:	4c43      	ldr	r4, [pc, #268]	; (90d00 <mw_add_control+0x33c>)
   90bf2:	47a0      	blx	r4
	mw_all_controls[control_id].control_flags = control_flags | MW_CONTROL_FLAG_IS_USED;
   90bf4:	9b00      	ldr	r3, [sp, #0]
   90bf6:	016d      	lsls	r5, r5, #5
   90bf8:	f043 0204 	orr.w	r2, r3, #4
   90bfc:	4b41      	ldr	r3, [pc, #260]	; (90d04 <mw_add_control+0x340>)
	mw_all_controls[control_id].paint_func = paint_func;
   90bfe:	4941      	ldr	r1, [pc, #260]	; (90d04 <mw_add_control+0x340>)
	mw_all_controls[control_id].control_flags = control_flags | MW_CONTROL_FLAG_IS_USED;
   90c00:	442b      	add	r3, r5
	mw_all_controls[control_id].paint_func = paint_func;
   90c02:	f841 a005 	str.w	sl, [r1, r5]
	mw_all_controls[control_id].control_flags = control_flags | MW_CONTROL_FLAG_IS_USED;
   90c06:	839a      	strh	r2, [r3, #28]
	mw_all_controls[control_id].control_rect.x = rect->x + mw_all_windows[parent_window_id].client_rect.x;
   90c08:	9902      	ldr	r1, [sp, #8]
	mw_all_controls[control_id].instance_data = instance_data;
   90c0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
	mw_all_controls[control_id].message_func = message_func;
   90c0c:	f8c3 b004 	str.w	fp, [r3, #4]
	mw_all_controls[control_id].instance_data = instance_data;
   90c10:	609a      	str	r2, [r3, #8]
	mw_all_controls[control_id].parent_handle = parent_handle;
   90c12:	615f      	str	r7, [r3, #20]
	mw_all_controls[control_id].control_handle = control_handle;
   90c14:	f8c3 9018 	str.w	r9, [r3, #24]
	mw_all_controls[control_id].control_rect.x = rect->x + mw_all_windows[parent_window_id].client_rect.x;
   90c18:	eb06 1481 	add.w	r4, r6, r1, lsl #6
   90c1c:	8c22      	ldrh	r2, [r4, #32]
   90c1e:	f8b8 1000 	ldrh.w	r1, [r8]
	mw_all_controls[control_id].control_rect.y = rect->y + mw_all_windows[parent_window_id].client_rect.y;
   90c22:	8c60      	ldrh	r0, [r4, #34]	; 0x22
	mw_all_controls[control_id].control_rect.x = rect->x + mw_all_windows[parent_window_id].client_rect.x;
   90c24:	4411      	add	r1, r2
   90c26:	8199      	strh	r1, [r3, #12]
	mw_all_controls[control_id].control_rect.y = rect->y + mw_all_windows[parent_window_id].client_rect.y;
   90c28:	f8b8 2002 	ldrh.w	r2, [r8, #2]
   90c2c:	4402      	add	r2, r0
   90c2e:	81da      	strh	r2, [r3, #14]
	mw_all_controls[control_id].control_rect.width = rect->width;
   90c30:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
   90c34:	821a      	strh	r2, [r3, #16]
	mw_all_controls[control_id].control_rect.height = rect->height;
   90c36:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   90c3a:	825a      	strh	r2, [r3, #18]
	if (control_handle == MW_INVALID_HANDLE)
   90c3c:	f1b9 0f00 	cmp.w	r9, #0
   90c40:	f000 809b 	beq.w	90d7a <mw_add_control+0x3b6>
   90c44:	2300      	movs	r3, #0
   90c46:	4a2f      	ldr	r2, [pc, #188]	; (90d04 <mw_add_control+0x340>)
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   90c48:	8b91      	ldrh	r1, [r2, #28]
   90c4a:	461c      	mov	r4, r3
   90c4c:	0749      	lsls	r1, r1, #29
   90c4e:	f103 0301 	add.w	r3, r3, #1
   90c52:	d503      	bpl.n	90c5c <mw_add_control+0x298>
   90c54:	6991      	ldr	r1, [r2, #24]
   90c56:	4589      	cmp	r9, r1
   90c58:	f000 810c 	beq.w	90e74 <mw_add_control+0x4b0>
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   90c5c:	2b18      	cmp	r3, #24
   90c5e:	f102 0220 	add.w	r2, r2, #32
   90c62:	d1f1      	bne.n	90c48 <mw_add_control+0x284>
   90c64:	461c      	mov	r4, r3
   90c66:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   90c68:	4b29      	ldr	r3, [pc, #164]	; (90d10 <mw_add_control+0x34c>)
   90c6a:	f241 5267 	movw	r2, #5479	; 0x1567
   90c6e:	4929      	ldr	r1, [pc, #164]	; (90d14 <mw_add_control+0x350>)
   90c70:	4e23      	ldr	r6, [pc, #140]	; (90d00 <mw_add_control+0x33c>)
   90c72:	47b0      	blx	r6
	new_message.message_data = message_data;
   90c74:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   90c76:	200d      	movs	r0, #13
	new_message.message_recipient_type = recipient_type;
   90c78:	2101      	movs	r1, #1
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   90c7a:	4a22      	ldr	r2, [pc, #136]	; (90d04 <mw_add_control+0x340>)
	new_message.message_data = message_data;
   90c7c:	9308      	str	r3, [sp, #32]
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   90c7e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   90c82:	8ba2      	ldrh	r2, [r4, #28]
	new_message.sender_handle = sender_handle;
   90c84:	9305      	str	r3, [sp, #20]
	new_message.message_pointer = message_pointer;
   90c86:	9309      	str	r3, [sp, #36]	; 0x24
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   90c88:	0753      	lsls	r3, r2, #29
	new_message.recipient_handle = recipient_handle;
   90c8a:	f8cd 9018 	str.w	r9, [sp, #24]
	new_message.message_id = message_id;
   90c8e:	f88d 001c 	strb.w	r0, [sp, #28]
	new_message.message_recipient_type = recipient_type;
   90c92:	f88d 101d 	strb.w	r1, [sp, #29]
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   90c96:	d502      	bpl.n	90c9e <mw_add_control+0x2da>
		(void)mw_message_queue_insert(&new_message);
   90c98:	a805      	add	r0, sp, #20
   90c9a:	4b1f      	ldr	r3, [pc, #124]	; (90d18 <mw_add_control+0x354>)
   90c9c:	4798      	blx	r3
   	if (parent_handle == window_with_focus_handle)
   90c9e:	4b1f      	ldr	r3, [pc, #124]	; (90d1c <mw_add_control+0x358>)
   90ca0:	681b      	ldr	r3, [r3, #0]
   90ca2:	429f      	cmp	r7, r3
   90ca4:	f000 80e8 	beq.w	90e78 <mw_add_control+0x4b4>
	return (mw_all_controls[new_control_id].control_handle);
   90ca8:	4b16      	ldr	r3, [pc, #88]	; (90d04 <mw_add_control+0x340>)
   90caa:	441d      	add	r5, r3
   90cac:	69a8      	ldr	r0, [r5, #24]
}
   90cae:	b00b      	add	sp, #44	; 0x2c
   90cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90cb4:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   90cb8:	069b      	lsls	r3, r3, #26
   90cba:	f57f aeb6 	bpl.w	90a2a <mw_add_control+0x66>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90cbe:	2304      	movs	r3, #4
   90cc0:	e705      	b.n	90ace <mw_add_control+0x10a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90cc2:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   90cc6:	069d      	lsls	r5, r3, #26
   90cc8:	f57f aeb4 	bpl.w	90a34 <mw_add_control+0x70>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90ccc:	2305      	movs	r3, #5
   90cce:	e6fe      	b.n	90ace <mw_add_control+0x10a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90cd0:	f8d6 318c 	ldr.w	r3, [r6, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   90cd4:	069c      	lsls	r4, r3, #26
   90cd6:	f57f aeb2 	bpl.w	90a3e <mw_add_control+0x7a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90cda:	2306      	movs	r3, #6
   90cdc:	e6f7      	b.n	90ace <mw_add_control+0x10a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90cde:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   90ce2:	0698      	lsls	r0, r3, #26
   90ce4:	f57f aeb0 	bpl.w	90a48 <mw_add_control+0x84>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90ce8:	2307      	movs	r3, #7
   90cea:	e6f0      	b.n	90ace <mw_add_control+0x10a>
   90cec:	20071844 	.word	0x20071844
   90cf0:	000ab764 	.word	0x000ab764
   90cf4:	20071bd8 	.word	0x20071bd8
   90cf8:	000a6618 	.word	0x000a6618
   90cfc:	000ab618 	.word	0x000ab618
   90d00:	00095add 	.word	0x00095add
   90d04:	20071858 	.word	0x20071858
   90d08:	000ab1ec 	.word	0x000ab1ec
   90d0c:	000ab800 	.word	0x000ab800
   90d10:	000ab734 	.word	0x000ab734
   90d14:	000ab710 	.word	0x000ab710
   90d18:	00095bc1 	.word	0x00095bc1
   90d1c:	20071fb4 	.word	0x20071fb4
   90d20:	2007023c 	.word	0x2007023c
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90d24:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   90d28:	0699      	lsls	r1, r3, #26
   90d2a:	f57f ae92 	bpl.w	90a52 <mw_add_control+0x8e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90d2e:	2308      	movs	r3, #8
   90d30:	e6cd      	b.n	90ace <mw_add_control+0x10a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90d32:	f8d6 324c 	ldr.w	r3, [r6, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   90d36:	069a      	lsls	r2, r3, #26
   90d38:	f57f ae90 	bpl.w	90a5c <mw_add_control+0x98>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90d3c:	2309      	movs	r3, #9
   90d3e:	e6c6      	b.n	90ace <mw_add_control+0x10a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90d40:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   90d44:	069b      	lsls	r3, r3, #26
   90d46:	f57f ae8e 	bpl.w	90a66 <mw_add_control+0xa2>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90d4a:	230a      	movs	r3, #10
   90d4c:	e6bf      	b.n	90ace <mw_add_control+0x10a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90d4e:	f8d6 32cc 	ldr.w	r3, [r6, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   90d52:	069d      	lsls	r5, r3, #26
   90d54:	f57f ae8c 	bpl.w	90a70 <mw_add_control+0xac>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90d58:	230b      	movs	r3, #11
   90d5a:	e6b8      	b.n	90ace <mw_add_control+0x10a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90d5c:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   90d60:	069c      	lsls	r4, r3, #26
   90d62:	f57f ae8a 	bpl.w	90a7a <mw_add_control+0xb6>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   90d66:	230c      	movs	r3, #12
   90d68:	e6b1      	b.n	90ace <mw_add_control+0x10a>
		MW_ASSERT((bool)false, "Can't add control in paint function");
   90d6a:	4b5f      	ldr	r3, [pc, #380]	; (90ee8 <mw_add_control+0x524>)
   90d6c:	f241 32a1 	movw	r2, #5025	; 0x13a1
   90d70:	e690      	b.n	90a94 <mw_add_control+0xd0>
		MW_ASSERT((bool)false, "No space for new control");
   90d72:	4b5e      	ldr	r3, [pc, #376]	; (90eec <mw_add_control+0x528>)
   90d74:	f44f 529e 	mov.w	r2, #5056	; 0x13c0
   90d78:	e68c      	b.n	90a94 <mw_add_control+0xd0>
	if (control_handle == MW_INVALID_HANDLE)
   90d7a:	4648      	mov	r0, r9
   90d7c:	2418      	movs	r4, #24
   90d7e:	e773      	b.n	90c68 <mw_add_control+0x2a4>
		MW_ASSERT((bool)false, "Can't add control at this position");
   90d80:	4b5b      	ldr	r3, [pc, #364]	; (90ef0 <mw_add_control+0x52c>)
   90d82:	f241 32b7 	movw	r2, #5047	; 0x13b7
   90d86:	e685      	b.n	90a94 <mw_add_control+0xd0>
		MW_ASSERT((bool)false, "Can't add control to unused window");
   90d88:	4620      	mov	r0, r4
   90d8a:	4b5a      	ldr	r3, [pc, #360]	; (90ef4 <mw_add_control+0x530>)
   90d8c:	f241 32b0 	movw	r2, #5040	; 0x13b0
   90d90:	4959      	ldr	r1, [pc, #356]	; (90ef8 <mw_add_control+0x534>)
   90d92:	4d5a      	ldr	r5, [pc, #360]	; (90efc <mw_add_control+0x538>)
   90d94:	47a8      	blx	r5
		return (MW_INVALID_HANDLE);
   90d96:	4620      	mov	r0, r4
   90d98:	e681      	b.n	90a9e <mw_add_control+0xda>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90d9a:	68f3      	ldr	r3, [r6, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   90d9c:	0699      	lsls	r1, r3, #26
   90d9e:	f57f aee0 	bpl.w	90b62 <mw_add_control+0x19e>
   90da2:	2001      	movs	r0, #1
   90da4:	e720      	b.n	90be8 <mw_add_control+0x224>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90da6:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   90da8:	069a      	lsls	r2, r3, #26
   90daa:	f57f aede 	bpl.w	90b6a <mw_add_control+0x1a6>
   90dae:	2301      	movs	r3, #1
   90db0:	9302      	str	r3, [sp, #8]
   90db2:	e7f6      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90db4:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   90db8:	069b      	lsls	r3, r3, #26
   90dba:	f57f aedb 	bpl.w	90b74 <mw_add_control+0x1b0>
   90dbe:	2302      	movs	r3, #2
   90dc0:	9302      	str	r3, [sp, #8]
   90dc2:	e7ee      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90dc4:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   90dc8:	069c      	lsls	r4, r3, #26
   90dca:	f57f aed8 	bpl.w	90b7e <mw_add_control+0x1ba>
   90dce:	2303      	movs	r3, #3
   90dd0:	9302      	str	r3, [sp, #8]
   90dd2:	e7e6      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90dd4:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   90dd8:	0698      	lsls	r0, r3, #26
   90dda:	f57f aed5 	bpl.w	90b88 <mw_add_control+0x1c4>
   90dde:	2304      	movs	r3, #4
   90de0:	9302      	str	r3, [sp, #8]
   90de2:	e7de      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90de4:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   90de8:	0699      	lsls	r1, r3, #26
   90dea:	f57f aed2 	bpl.w	90b92 <mw_add_control+0x1ce>
   90dee:	2305      	movs	r3, #5
   90df0:	9302      	str	r3, [sp, #8]
   90df2:	e7d6      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90df4:	f8d6 318c 	ldr.w	r3, [r6, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   90df8:	069a      	lsls	r2, r3, #26
   90dfa:	f57f aecf 	bpl.w	90b9c <mw_add_control+0x1d8>
   90dfe:	2306      	movs	r3, #6
   90e00:	9302      	str	r3, [sp, #8]
   90e02:	e7ce      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90e04:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   90e08:	069b      	lsls	r3, r3, #26
   90e0a:	f57f aecc 	bpl.w	90ba6 <mw_add_control+0x1e2>
   90e0e:	2307      	movs	r3, #7
   90e10:	9302      	str	r3, [sp, #8]
   90e12:	e7c6      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90e14:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   90e18:	069c      	lsls	r4, r3, #26
   90e1a:	f57f aec9 	bpl.w	90bb0 <mw_add_control+0x1ec>
   90e1e:	2308      	movs	r3, #8
   90e20:	9302      	str	r3, [sp, #8]
   90e22:	e7be      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90e24:	f8d6 324c 	ldr.w	r3, [r6, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   90e28:	0698      	lsls	r0, r3, #26
   90e2a:	f57f aec6 	bpl.w	90bba <mw_add_control+0x1f6>
   90e2e:	2309      	movs	r3, #9
   90e30:	9302      	str	r3, [sp, #8]
   90e32:	e7b6      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90e34:	f8d6 328c 	ldr.w	r3, [r6, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   90e38:	0699      	lsls	r1, r3, #26
   90e3a:	f57f aec3 	bpl.w	90bc4 <mw_add_control+0x200>
   90e3e:	230a      	movs	r3, #10
   90e40:	9302      	str	r3, [sp, #8]
   90e42:	e7ae      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90e44:	f8d6 32cc 	ldr.w	r3, [r6, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   90e48:	069a      	lsls	r2, r3, #26
   90e4a:	f57f aec0 	bpl.w	90bce <mw_add_control+0x20a>
   90e4e:	230b      	movs	r3, #11
   90e50:	9302      	str	r3, [sp, #8]
   90e52:	e7a6      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90e54:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   90e58:	069b      	lsls	r3, r3, #26
   90e5a:	f57f aebd 	bpl.w	90bd8 <mw_add_control+0x214>
   90e5e:	230c      	movs	r3, #12
   90e60:	9302      	str	r3, [sp, #8]
   90e62:	e79e      	b.n	90da2 <mw_add_control+0x3de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   90e64:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   90e68:	f013 0020 	ands.w	r0, r3, #32
   90e6c:	d139      	bne.n	90ee2 <mw_add_control+0x51e>
   90e6e:	230e      	movs	r3, #14
   90e70:	9302      	str	r3, [sp, #8]
   90e72:	e6b9      	b.n	90be8 <mw_add_control+0x224>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   90e74:	2001      	movs	r0, #1
   90e76:	e6f7      	b.n	90c68 <mw_add_control+0x2a4>
   	   	mw_post_message(MW_CONTROL_GAINED_FOCUS_MESSAGE,
   90e78:	4b21      	ldr	r3, [pc, #132]	; (90f00 <mw_add_control+0x53c>)
   90e7a:	442b      	add	r3, r5
   90e7c:	699e      	ldr	r6, [r3, #24]
	if (control_handle == MW_INVALID_HANDLE)
   90e7e:	b176      	cbz	r6, 90e9e <mw_add_control+0x4da>
   90e80:	2300      	movs	r3, #0
   90e82:	9a03      	ldr	r2, [sp, #12]
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   90e84:	8b91      	ldrh	r1, [r2, #28]
   90e86:	461c      	mov	r4, r3
   90e88:	074f      	lsls	r7, r1, #29
   90e8a:	f103 0301 	add.w	r3, r3, #1
   90e8e:	d502      	bpl.n	90e96 <mw_add_control+0x4d2>
   90e90:	6991      	ldr	r1, [r2, #24]
   90e92:	428e      	cmp	r6, r1
   90e94:	d021      	beq.n	90eda <mw_add_control+0x516>
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   90e96:	2b18      	cmp	r3, #24
   90e98:	f102 0220 	add.w	r2, r2, #32
   90e9c:	d1f2      	bne.n	90e84 <mw_add_control+0x4c0>
	if (control_handle == MW_INVALID_HANDLE)
   90e9e:	2418      	movs	r4, #24
   90ea0:	9801      	ldr	r0, [sp, #4]
		MW_ASSERT(recipient_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   90ea2:	4b18      	ldr	r3, [pc, #96]	; (90f04 <mw_add_control+0x540>)
   90ea4:	f241 5267 	movw	r2, #5479	; 0x1567
   90ea8:	4917      	ldr	r1, [pc, #92]	; (90f08 <mw_add_control+0x544>)
   90eaa:	4f14      	ldr	r7, [pc, #80]	; (90efc <mw_add_control+0x538>)
   90eac:	47b8      	blx	r7
	new_message.message_id = message_id;
   90eae:	200f      	movs	r0, #15
	new_message.message_data = message_data;
   90eb0:	2300      	movs	r3, #0
	new_message.message_recipient_type = recipient_type;
   90eb2:	2101      	movs	r1, #1
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   90eb4:	4a12      	ldr	r2, [pc, #72]	; (90f00 <mw_add_control+0x53c>)
	new_message.message_id = message_id;
   90eb6:	f88d 001c 	strb.w	r0, [sp, #28]
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   90eba:	eb02 1444 	add.w	r4, r2, r4, lsl #5
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   90ebe:	8ba2      	ldrh	r2, [r4, #28]
	new_message.recipient_handle = recipient_handle;
   90ec0:	9606      	str	r6, [sp, #24]
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   90ec2:	0750      	lsls	r0, r2, #29
	new_message.message_data = message_data;
   90ec4:	9308      	str	r3, [sp, #32]
	new_message.sender_handle = sender_handle;
   90ec6:	9305      	str	r3, [sp, #20]
	new_message.message_pointer = message_pointer;
   90ec8:	9309      	str	r3, [sp, #36]	; 0x24
	new_message.message_recipient_type = recipient_type;
   90eca:	f88d 101d 	strb.w	r1, [sp, #29]
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   90ece:	f57f aeeb 	bpl.w	90ca8 <mw_add_control+0x2e4>
		(void)mw_message_queue_insert(&new_message);
   90ed2:	a805      	add	r0, sp, #20
   90ed4:	4b0d      	ldr	r3, [pc, #52]	; (90f0c <mw_add_control+0x548>)
   90ed6:	4798      	blx	r3
   90ed8:	e6e6      	b.n	90ca8 <mw_add_control+0x2e4>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   90eda:	2301      	movs	r3, #1
   90edc:	9301      	str	r3, [sp, #4]
   90ede:	4618      	mov	r0, r3
   90ee0:	e7df      	b.n	90ea2 <mw_add_control+0x4de>
		if (mw_all_windows[i].window_handle == window_handle &&
   90ee2:	230d      	movs	r3, #13
   90ee4:	9302      	str	r3, [sp, #8]
   90ee6:	e75c      	b.n	90da2 <mw_add_control+0x3de>
   90ee8:	000ab778 	.word	0x000ab778
   90eec:	000ab7e4 	.word	0x000ab7e4
   90ef0:	000ab7c0 	.word	0x000ab7c0
   90ef4:	000ab79c 	.word	0x000ab79c
   90ef8:	000ab618 	.word	0x000ab618
   90efc:	00095add 	.word	0x00095add
   90f00:	20071858 	.word	0x20071858
   90f04:	000ab734 	.word	0x000ab734
   90f08:	000ab710 	.word	0x000ab710
   90f0c:	00095bc1 	.word	0x00095bc1

00090f10 <mw_set_control_enabled>:
{
   90f10:	b470      	push	{r4, r5, r6}
	if (control_handle == MW_INVALID_HANDLE)
   90f12:	b168      	cbz	r0, 90f30 <mw_set_control_enabled+0x20>
   90f14:	4e12      	ldr	r6, [pc, #72]	; (90f60 <mw_set_control_enabled+0x50>)
   90f16:	2200      	movs	r2, #0
   90f18:	4633      	mov	r3, r6
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   90f1a:	8b9c      	ldrh	r4, [r3, #28]
   90f1c:	0765      	lsls	r5, r4, #29
   90f1e:	d502      	bpl.n	90f26 <mw_set_control_enabled+0x16>
   90f20:	699d      	ldr	r5, [r3, #24]
   90f22:	42a8      	cmp	r0, r5
   90f24:	d00d      	beq.n	90f42 <mw_set_control_enabled+0x32>
   90f26:	3201      	adds	r2, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   90f28:	2a18      	cmp	r2, #24
   90f2a:	f103 0320 	add.w	r3, r3, #32
   90f2e:	d1f4      	bne.n	90f1a <mw_set_control_enabled+0xa>
		MW_ASSERT((bool)false, "Bad control handle");
   90f30:	4c0c      	ldr	r4, [pc, #48]	; (90f64 <mw_set_control_enabled+0x54>)
   90f32:	4b0d      	ldr	r3, [pc, #52]	; (90f68 <mw_set_control_enabled+0x58>)
   90f34:	46a4      	mov	ip, r4
}
   90f36:	bc70      	pop	{r4, r5, r6}
		MW_ASSERT((bool)false, "Bad control handle");
   90f38:	f241 4230 	movw	r2, #5168	; 0x1430
   90f3c:	490b      	ldr	r1, [pc, #44]	; (90f6c <mw_set_control_enabled+0x5c>)
   90f3e:	2000      	movs	r0, #0
   90f40:	4760      	bx	ip
		if (enabled)
   90f42:	b931      	cbnz	r1, 90f52 <mw_set_control_enabled+0x42>
			mw_all_controls[control_id].control_flags &= (uint16_t)(~MW_CONTROL_FLAG_IS_ENABLED);
   90f44:	eb06 1242 	add.w	r2, r6, r2, lsl #5
   90f48:	f024 0402 	bic.w	r4, r4, #2
   90f4c:	8394      	strh	r4, [r2, #28]
}
   90f4e:	bc70      	pop	{r4, r5, r6}
   90f50:	4770      	bx	lr
			mw_all_controls[control_id].control_flags |= MW_CONTROL_FLAG_IS_ENABLED;
   90f52:	eb06 1242 	add.w	r2, r6, r2, lsl #5
   90f56:	f044 0402 	orr.w	r4, r4, #2
   90f5a:	8394      	strh	r4, [r2, #28]
}
   90f5c:	bc70      	pop	{r4, r5, r6}
   90f5e:	4770      	bx	lr
   90f60:	20071858 	.word	0x20071858
   90f64:	00095add 	.word	0x00095add
   90f68:	000ab734 	.word	0x000ab734
   90f6c:	000ab628 	.word	0x000ab628

00090f70 <mw_paint_control>:
{
   90f70:	b530      	push	{r4, r5, lr}
   90f72:	b087      	sub	sp, #28
	if (control_handle == MW_INVALID_HANDLE)
   90f74:	b160      	cbz	r0, 90f90 <mw_paint_control+0x20>
   90f76:	4604      	mov	r4, r0
   90f78:	4b12      	ldr	r3, [pc, #72]	; (90fc4 <mw_paint_control+0x54>)
   90f7a:	f503 7140 	add.w	r1, r3, #768	; 0x300
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   90f7e:	8b9a      	ldrh	r2, [r3, #28]
   90f80:	0752      	lsls	r2, r2, #29
   90f82:	d502      	bpl.n	90f8a <mw_paint_control+0x1a>
   90f84:	699a      	ldr	r2, [r3, #24]
   90f86:	4294      	cmp	r4, r2
   90f88:	d00b      	beq.n	90fa2 <mw_paint_control+0x32>
   90f8a:	3320      	adds	r3, #32
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   90f8c:	428b      	cmp	r3, r1
   90f8e:	d1f6      	bne.n	90f7e <mw_paint_control+0xe>
		MW_ASSERT((bool)false, "Bad control handle");
   90f90:	4b0d      	ldr	r3, [pc, #52]	; (90fc8 <mw_paint_control+0x58>)
   90f92:	f241 4249 	movw	r2, #5193	; 0x1449
   90f96:	490d      	ldr	r1, [pc, #52]	; (90fcc <mw_paint_control+0x5c>)
   90f98:	2000      	movs	r0, #0
   90f9a:	4c0d      	ldr	r4, [pc, #52]	; (90fd0 <mw_paint_control+0x60>)
   90f9c:	47a0      	blx	r4
}
   90f9e:	b007      	add	sp, #28
   90fa0:	bd30      	pop	{r4, r5, pc}
	new_message.message_data = message_data;
   90fa2:	2300      	movs	r3, #0
	new_message.message_recipient_type = recipient_type;
   90fa4:	2102      	movs	r1, #2
	new_message.message_id = message_id;
   90fa6:	254e      	movs	r5, #78	; 0x4e
		(void)mw_message_queue_insert(&new_message);
   90fa8:	a801      	add	r0, sp, #4
   90faa:	4a0a      	ldr	r2, [pc, #40]	; (90fd4 <mw_paint_control+0x64>)
	new_message.recipient_handle = recipient_handle;
   90fac:	9402      	str	r4, [sp, #8]
	new_message.message_id = message_id;
   90fae:	f88d 500c 	strb.w	r5, [sp, #12]
	new_message.message_data = message_data;
   90fb2:	9304      	str	r3, [sp, #16]
	new_message.sender_handle = sender_handle;
   90fb4:	9301      	str	r3, [sp, #4]
	new_message.message_pointer = message_pointer;
   90fb6:	9305      	str	r3, [sp, #20]
	new_message.message_recipient_type = recipient_type;
   90fb8:	f88d 100d 	strb.w	r1, [sp, #13]
		(void)mw_message_queue_insert(&new_message);
   90fbc:	4790      	blx	r2
}
   90fbe:	b007      	add	sp, #28
   90fc0:	bd30      	pop	{r4, r5, pc}
   90fc2:	bf00      	nop
   90fc4:	20071858 	.word	0x20071858
   90fc8:	000ab734 	.word	0x000ab734
   90fcc:	000ab640 	.word	0x000ab640
   90fd0:	00095add 	.word	0x00095add
   90fd4:	00095bc1 	.word	0x00095bc1

00090fd8 <mw_paint_control_rect>:
{
   90fd8:	b570      	push	{r4, r5, r6, lr}
   90fda:	b086      	sub	sp, #24
	if (control_handle == MW_INVALID_HANDLE)
   90fdc:	b160      	cbz	r0, 90ff8 <mw_paint_control_rect+0x20>
   90fde:	4b13      	ldr	r3, [pc, #76]	; (9102c <mw_paint_control_rect+0x54>)
   90fe0:	4604      	mov	r4, r0
   90fe2:	f503 7040 	add.w	r0, r3, #768	; 0x300
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   90fe6:	8b9a      	ldrh	r2, [r3, #28]
   90fe8:	0752      	lsls	r2, r2, #29
   90fea:	d502      	bpl.n	90ff2 <mw_paint_control_rect+0x1a>
   90fec:	699a      	ldr	r2, [r3, #24]
   90fee:	4294      	cmp	r4, r2
   90ff0:	d00b      	beq.n	9100a <mw_paint_control_rect+0x32>
   90ff2:	3320      	adds	r3, #32
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   90ff4:	4283      	cmp	r3, r0
   90ff6:	d1f6      	bne.n	90fe6 <mw_paint_control_rect+0xe>
		MW_ASSERT((bool)false, "Bad control handle");
   90ff8:	4b0d      	ldr	r3, [pc, #52]	; (91030 <mw_paint_control_rect+0x58>)
   90ffa:	f241 425c 	movw	r2, #5212	; 0x145c
   90ffe:	490d      	ldr	r1, [pc, #52]	; (91034 <mw_paint_control_rect+0x5c>)
   91000:	2000      	movs	r0, #0
   91002:	4c0d      	ldr	r4, [pc, #52]	; (91038 <mw_paint_control_rect+0x60>)
   91004:	47a0      	blx	r4
}
   91006:	b006      	add	sp, #24
   91008:	bd70      	pop	{r4, r5, r6, pc}
	new_message.message_data = message_data;
   9100a:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   9100c:	264f      	movs	r6, #79	; 0x4f
	new_message.message_recipient_type = recipient_type;
   9100e:	2502      	movs	r5, #2
		(void)mw_message_queue_insert(&new_message);
   91010:	a801      	add	r0, sp, #4
   91012:	4a0a      	ldr	r2, [pc, #40]	; (9103c <mw_paint_control_rect+0x64>)
	new_message.recipient_handle = recipient_handle;
   91014:	9402      	str	r4, [sp, #8]
	new_message.message_pointer = message_pointer;
   91016:	9105      	str	r1, [sp, #20]
	new_message.message_id = message_id;
   91018:	f88d 600c 	strb.w	r6, [sp, #12]
	new_message.message_data = message_data;
   9101c:	9304      	str	r3, [sp, #16]
	new_message.sender_handle = sender_handle;
   9101e:	9301      	str	r3, [sp, #4]
	new_message.message_recipient_type = recipient_type;
   91020:	f88d 500d 	strb.w	r5, [sp, #13]
		(void)mw_message_queue_insert(&new_message);
   91024:	4790      	blx	r2
}
   91026:	b006      	add	sp, #24
   91028:	bd70      	pop	{r4, r5, r6, pc}
   9102a:	bf00      	nop
   9102c:	20071858 	.word	0x20071858
   91030:	000ab734 	.word	0x000ab734
   91034:	000ab654 	.word	0x000ab654
   91038:	00095add 	.word	0x00095add
   9103c:	00095bc1 	.word	0x00095bc1

00091040 <mw_remove_control>:
{
   91040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   91044:	b087      	sub	sp, #28
	if (control_handle == MW_INVALID_HANDLE)
   91046:	b180      	cbz	r0, 9106a <mw_remove_control+0x2a>
   91048:	4682      	mov	sl, r0
   9104a:	f04f 0b00 	mov.w	fp, #0
   9104e:	4b57      	ldr	r3, [pc, #348]	; (911ac <mw_remove_control+0x16c>)
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   91050:	8b9a      	ldrh	r2, [r3, #28]
   91052:	0752      	lsls	r2, r2, #29
   91054:	d502      	bpl.n	9105c <mw_remove_control+0x1c>
   91056:	699a      	ldr	r2, [r3, #24]
   91058:	4592      	cmp	sl, r2
   9105a:	d010      	beq.n	9107e <mw_remove_control+0x3e>
   9105c:	f10b 0b01 	add.w	fp, fp, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   91060:	f1bb 0f18 	cmp.w	fp, #24
   91064:	f103 0320 	add.w	r3, r3, #32
   91068:	d1f2      	bne.n	91050 <mw_remove_control+0x10>
		MW_ASSERT((bool)false, "Bad control handle");
   9106a:	4b51      	ldr	r3, [pc, #324]	; (911b0 <mw_remove_control+0x170>)
   9106c:	f241 4295 	movw	r2, #5269	; 0x1495
   91070:	4950      	ldr	r1, [pc, #320]	; (911b4 <mw_remove_control+0x174>)
   91072:	2000      	movs	r0, #0
   91074:	4c50      	ldr	r4, [pc, #320]	; (911b8 <mw_remove_control+0x178>)
   91076:	47a0      	blx	r4
}
   91078:	b007      	add	sp, #28
   9107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (mw_all_timers[i].timer_handle != MW_INVALID_HANDLE &&
   9107e:	4b4f      	ldr	r3, [pc, #316]	; (911bc <mw_remove_control+0x17c>)
   91080:	689a      	ldr	r2, [r3, #8]
   91082:	b112      	cbz	r2, 9108a <mw_remove_control+0x4a>
   91084:	7b1a      	ldrb	r2, [r3, #12]
   91086:	2a01      	cmp	r2, #1
   91088:	d060      	beq.n	9114c <mw_remove_control+0x10c>
   9108a:	699a      	ldr	r2, [r3, #24]
   9108c:	b11a      	cbz	r2, 91096 <mw_remove_control+0x56>
   9108e:	7f1a      	ldrb	r2, [r3, #28]
   91090:	2a01      	cmp	r2, #1
   91092:	f000 8085 	beq.w	911a0 <mw_remove_control+0x160>
   91096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   91098:	b11a      	cbz	r2, 910a2 <mw_remove_control+0x62>
   9109a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   9109e:	2a01      	cmp	r2, #1
   910a0:	d078      	beq.n	91194 <mw_remove_control+0x154>
   910a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   910a4:	b11a      	cbz	r2, 910ae <mw_remove_control+0x6e>
   910a6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   910aa:	2a01      	cmp	r2, #1
   910ac:	d06c      	beq.n	91188 <mw_remove_control+0x148>
   910ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   910b0:	b11a      	cbz	r2, 910ba <mw_remove_control+0x7a>
   910b2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
   910b6:	2a01      	cmp	r2, #1
   910b8:	d060      	beq.n	9117c <mw_remove_control+0x13c>
   910ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   910bc:	b11a      	cbz	r2, 910c6 <mw_remove_control+0x86>
   910be:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
   910c2:	2a01      	cmp	r2, #1
   910c4:	d054      	beq.n	91170 <mw_remove_control+0x130>
   910c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   910c8:	b11a      	cbz	r2, 910d2 <mw_remove_control+0x92>
   910ca:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
   910ce:	2a01      	cmp	r2, #1
   910d0:	d048      	beq.n	91164 <mw_remove_control+0x124>
   910d2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   910d4:	b11a      	cbz	r2, 910de <mw_remove_control+0x9e>
   910d6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   910da:	2a01      	cmp	r2, #1
   910dc:	d03c      	beq.n	91158 <mw_remove_control+0x118>
	if (control_handle == MW_INVALID_HANDLE)
   910de:	2400      	movs	r4, #0
   910e0:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 911c4 <mw_remove_control+0x184>
   910e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 911b8 <mw_remove_control+0x178>
		MW_ASSERT(message != (void*)0, "Null message found in queue");
   910e8:	4f35      	ldr	r7, [pc, #212]	; (911c0 <mw_remove_control+0x180>)
   910ea:	4e32      	ldr	r6, [pc, #200]	; (911b4 <mw_remove_control+0x174>)
		message = mw_message_queue_get_ref_to_item_at_position(i);
   910ec:	b2e0      	uxtb	r0, r4
   910ee:	47c8      	blx	r9
		MW_ASSERT(message != (void*)0, "Null message found in queue");
   910f0:	4605      	mov	r5, r0
   910f2:	3000      	adds	r0, #0
   910f4:	bf18      	it	ne
   910f6:	2001      	movne	r0, #1
   910f8:	463b      	mov	r3, r7
   910fa:	f241 42aa 	movw	r2, #5290	; 0x14aa
   910fe:	4631      	mov	r1, r6
   91100:	3401      	adds	r4, #1
   91102:	47c0      	blx	r8
		if (message != (void*)0)
   91104:	b125      	cbz	r5, 91110 <mw_remove_control+0xd0>
			if (message->recipient_handle == control_handle)
   91106:	686b      	ldr	r3, [r5, #4]
   91108:	459a      	cmp	sl, r3
				message->message_recipient_type = MW_CANCELLED_MESSAGE;
   9110a:	bf04      	itt	eq
   9110c:	2303      	moveq	r3, #3
   9110e:	726b      	strbeq	r3, [r5, #9]
	for (i = 0U; i < MW_MESSAGE_QUEUE_SIZE; i++)
   91110:	2c64      	cmp	r4, #100	; 0x64
   91112:	d1eb      	bne.n	910ec <mw_remove_control+0xac>
	mw_message_t temp_message = {MW_UNUSED_MESSAGE_PARAMETER, control_handle, MW_CONTROL_REMOVED_MESSAGE, MW_CONTROL_MESSAGE, MW_UNUSED_MESSAGE_PARAMETER, NULL};
   91114:	2300      	movs	r3, #0
   91116:	2101      	movs	r1, #1
   91118:	200e      	movs	r0, #14
	mw_all_controls[control_id].message_func(&temp_message);
   9111a:	4a24      	ldr	r2, [pc, #144]	; (911ac <mw_remove_control+0x16c>)
	mw_message_t temp_message = {MW_UNUSED_MESSAGE_PARAMETER, control_handle, MW_CONTROL_REMOVED_MESSAGE, MW_CONTROL_MESSAGE, MW_UNUSED_MESSAGE_PARAMETER, NULL};
   9111c:	9301      	str	r3, [sp, #4]
	mw_all_controls[control_id].message_func(&temp_message);
   9111e:	eb02 1b4b 	add.w	fp, r2, fp, lsl #5
	mw_message_t temp_message = {MW_UNUSED_MESSAGE_PARAMETER, control_handle, MW_CONTROL_REMOVED_MESSAGE, MW_CONTROL_MESSAGE, MW_UNUSED_MESSAGE_PARAMETER, NULL};
   91122:	9304      	str	r3, [sp, #16]
   91124:	9305      	str	r3, [sp, #20]
   91126:	f88d 000c 	strb.w	r0, [sp, #12]
   9112a:	f8cd a008 	str.w	sl, [sp, #8]
	mw_all_controls[control_id].message_func(&temp_message);
   9112e:	f8db 2004 	ldr.w	r2, [fp, #4]
	mw_message_t temp_message = {MW_UNUSED_MESSAGE_PARAMETER, control_handle, MW_CONTROL_REMOVED_MESSAGE, MW_CONTROL_MESSAGE, MW_UNUSED_MESSAGE_PARAMETER, NULL};
   91132:	f88d 100d 	strb.w	r1, [sp, #13]
	mw_all_controls[control_id].message_func(&temp_message);
   91136:	a801      	add	r0, sp, #4
   91138:	4790      	blx	r2
   	mw_all_controls[control_id].control_flags &= (uint16_t)(~MW_CONTROL_FLAG_IS_USED);
   9113a:	f8bb 301c 	ldrh.w	r3, [fp, #28]
   9113e:	f023 0304 	bic.w	r3, r3, #4
   91142:	f8ab 301c 	strh.w	r3, [fp, #28]
}
   91146:	b007      	add	sp, #28
   91148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				mw_all_timers[i].recipient_type == MW_CONTROL_MESSAGE &&
   9114c:	685a      	ldr	r2, [r3, #4]
   9114e:	4592      	cmp	sl, r2
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   91150:	bf04      	itt	eq
   91152:	2200      	moveq	r2, #0
   91154:	609a      	streq	r2, [r3, #8]
   91156:	e798      	b.n	9108a <mw_remove_control+0x4a>
				mw_all_timers[i].recipient_type == MW_CONTROL_MESSAGE &&
   91158:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   9115a:	4592      	cmp	sl, r2
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   9115c:	bf04      	itt	eq
   9115e:	2200      	moveq	r2, #0
   91160:	679a      	streq	r2, [r3, #120]	; 0x78
   91162:	e7bc      	b.n	910de <mw_remove_control+0x9e>
				mw_all_timers[i].recipient_type == MW_CONTROL_MESSAGE &&
   91164:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   91166:	4592      	cmp	sl, r2
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   91168:	bf04      	itt	eq
   9116a:	2200      	moveq	r2, #0
   9116c:	669a      	streq	r2, [r3, #104]	; 0x68
   9116e:	e7b0      	b.n	910d2 <mw_remove_control+0x92>
				mw_all_timers[i].recipient_type == MW_CONTROL_MESSAGE &&
   91170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   91172:	4592      	cmp	sl, r2
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   91174:	bf04      	itt	eq
   91176:	2200      	moveq	r2, #0
   91178:	659a      	streq	r2, [r3, #88]	; 0x58
   9117a:	e7a4      	b.n	910c6 <mw_remove_control+0x86>
				mw_all_timers[i].recipient_type == MW_CONTROL_MESSAGE &&
   9117c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   9117e:	4592      	cmp	sl, r2
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   91180:	bf04      	itt	eq
   91182:	2200      	moveq	r2, #0
   91184:	649a      	streq	r2, [r3, #72]	; 0x48
   91186:	e798      	b.n	910ba <mw_remove_control+0x7a>
				mw_all_timers[i].recipient_type == MW_CONTROL_MESSAGE &&
   91188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   9118a:	4592      	cmp	sl, r2
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   9118c:	bf04      	itt	eq
   9118e:	2200      	moveq	r2, #0
   91190:	639a      	streq	r2, [r3, #56]	; 0x38
   91192:	e78c      	b.n	910ae <mw_remove_control+0x6e>
				mw_all_timers[i].recipient_type == MW_CONTROL_MESSAGE &&
   91194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   91196:	4592      	cmp	sl, r2
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   91198:	bf04      	itt	eq
   9119a:	2200      	moveq	r2, #0
   9119c:	629a      	streq	r2, [r3, #40]	; 0x28
   9119e:	e780      	b.n	910a2 <mw_remove_control+0x62>
				mw_all_timers[i].recipient_type == MW_CONTROL_MESSAGE &&
   911a0:	695a      	ldr	r2, [r3, #20]
   911a2:	4592      	cmp	sl, r2
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   911a4:	bf04      	itt	eq
   911a6:	2200      	moveq	r2, #0
   911a8:	619a      	streq	r2, [r3, #24]
   911aa:	e774      	b.n	91096 <mw_remove_control+0x56>
   911ac:	20071858 	.word	0x20071858
   911b0:	000ab734 	.word	0x000ab734
   911b4:	000ab66c 	.word	0x000ab66c
   911b8:	00095add 	.word	0x00095add
   911bc:	20071b58 	.word	0x20071b58
   911c0:	000ab910 	.word	0x000ab910
   911c4:	00095cd5 	.word	0x00095cd5

000911c8 <mw_remove_window>:
	if (reentered)
   911c8:	4ba6      	ldr	r3, [pc, #664]	; (91464 <mw_remove_window+0x29c>)
   911ca:	781b      	ldrb	r3, [r3, #0]
   911cc:	b9a3      	cbnz	r3, 911f8 <mw_remove_window+0x30>
	reentered = true;
   911ce:	2301      	movs	r3, #1
{
   911d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	reentered = true;
   911d4:	4aa3      	ldr	r2, [pc, #652]	; (91464 <mw_remove_window+0x29c>)
{
   911d6:	b089      	sub	sp, #36	; 0x24
   911d8:	4606      	mov	r6, r0
	reentered = true;
   911da:	7013      	strb	r3, [r2, #0]
	if (window_handle == MW_INVALID_HANDLE)
   911dc:	b968      	cbnz	r0, 911fa <mw_remove_window+0x32>
		MW_ASSERT((bool)false, "Bad window handle");
   911de:	4ba2      	ldr	r3, [pc, #648]	; (91468 <mw_remove_window+0x2a0>)
   911e0:	f241 320c 	movw	r2, #4876	; 0x130c
   911e4:	49a1      	ldr	r1, [pc, #644]	; (9146c <mw_remove_window+0x2a4>)
   911e6:	2000      	movs	r0, #0
   911e8:	4ca1      	ldr	r4, [pc, #644]	; (91470 <mw_remove_window+0x2a8>)
   911ea:	47a0      	blx	r4
		reentered = false;
   911ec:	2300      	movs	r3, #0
   911ee:	4a9d      	ldr	r2, [pc, #628]	; (91464 <mw_remove_window+0x29c>)
   911f0:	7013      	strb	r3, [r2, #0]
}
   911f2:	b009      	add	sp, #36	; 0x24
   911f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   911f8:	4770      	bx	lr
		if (mw_all_windows[i].window_handle == window_handle &&
   911fa:	f8df b288 	ldr.w	fp, [pc, #648]	; 91484 <mw_remove_window+0x2bc>
   911fe:	f8db 3014 	ldr.w	r3, [fp, #20]
   91202:	4298      	cmp	r0, r3
   91204:	f000 80d8 	beq.w	913b8 <mw_remove_window+0x1f0>
   91208:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
   9120c:	429e      	cmp	r6, r3
   9120e:	f000 80e1 	beq.w	913d4 <mw_remove_window+0x20c>
   91212:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
   91216:	429e      	cmp	r6, r3
   91218:	f000 80d4 	beq.w	913c4 <mw_remove_window+0x1fc>
   9121c:	f8db 30d4 	ldr.w	r3, [fp, #212]	; 0xd4
   91220:	429e      	cmp	r6, r3
   91222:	f000 80e7 	beq.w	913f4 <mw_remove_window+0x22c>
   91226:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
   9122a:	429e      	cmp	r6, r3
   9122c:	f000 80da 	beq.w	913e4 <mw_remove_window+0x21c>
   91230:	f8db 3154 	ldr.w	r3, [fp, #340]	; 0x154
   91234:	429e      	cmp	r6, r3
   91236:	f000 80e5 	beq.w	91404 <mw_remove_window+0x23c>
   9123a:	f8db 3194 	ldr.w	r3, [fp, #404]	; 0x194
   9123e:	429e      	cmp	r6, r3
   91240:	f000 80e8 	beq.w	91414 <mw_remove_window+0x24c>
   91244:	f8db 31d4 	ldr.w	r3, [fp, #468]	; 0x1d4
   91248:	429e      	cmp	r6, r3
   9124a:	f000 80f3 	beq.w	91434 <mw_remove_window+0x26c>
   9124e:	f8db 3214 	ldr.w	r3, [fp, #532]	; 0x214
   91252:	429e      	cmp	r6, r3
   91254:	f000 80e6 	beq.w	91424 <mw_remove_window+0x25c>
   91258:	f8db 3254 	ldr.w	r3, [fp, #596]	; 0x254
   9125c:	429e      	cmp	r6, r3
   9125e:	f000 80f1 	beq.w	91444 <mw_remove_window+0x27c>
   91262:	f8db 3294 	ldr.w	r3, [fp, #660]	; 0x294
   91266:	429e      	cmp	r6, r3
   91268:	f000 80f4 	beq.w	91454 <mw_remove_window+0x28c>
   9126c:	f8db 32d4 	ldr.w	r3, [fp, #724]	; 0x2d4
   91270:	429e      	cmp	r6, r3
   91272:	f000 8115 	beq.w	914a0 <mw_remove_window+0x2d8>
   91276:	f8db 3314 	ldr.w	r3, [fp, #788]	; 0x314
   9127a:	429e      	cmp	r6, r3
   9127c:	f000 8108 	beq.w	91490 <mw_remove_window+0x2c8>
   91280:	f8db 3354 	ldr.w	r3, [fp, #852]	; 0x354
   91284:	429e      	cmp	r6, r3
   91286:	d1aa      	bne.n	911de <mw_remove_window+0x16>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91288:	f8db 334c 	ldr.w	r3, [fp, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   9128c:	0698      	lsls	r0, r3, #26
   9128e:	d5a6      	bpl.n	911de <mw_remove_window+0x16>
   91290:	230d      	movs	r3, #13
   91292:	9301      	str	r3, [sp, #4]
   91294:	4c77      	ldr	r4, [pc, #476]	; (91474 <mw_remove_window+0x2ac>)
			mw_remove_control(mw_all_controls[i].control_handle);
   91296:	4f78      	ldr	r7, [pc, #480]	; (91478 <mw_remove_window+0x2b0>)
   91298:	f504 7540 	add.w	r5, r4, #768	; 0x300
   9129c:	e002      	b.n	912a4 <mw_remove_window+0xdc>
   9129e:	3420      	adds	r4, #32
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   912a0:	42a5      	cmp	r5, r4
   912a2:	d007      	beq.n	912b4 <mw_remove_window+0xec>
		if (mw_all_controls[i].parent_handle == window_handle)
   912a4:	6963      	ldr	r3, [r4, #20]
   912a6:	429e      	cmp	r6, r3
   912a8:	d1f9      	bne.n	9129e <mw_remove_window+0xd6>
			mw_remove_control(mw_all_controls[i].control_handle);
   912aa:	69a0      	ldr	r0, [r4, #24]
   912ac:	3420      	adds	r4, #32
   912ae:	47b8      	blx	r7
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   912b0:	42a5      	cmp	r5, r4
   912b2:	d1f7      	bne.n	912a4 <mw_remove_window+0xdc>
		if (mw_all_timers[i].timer_handle != MW_INVALID_HANDLE &&
   912b4:	4b71      	ldr	r3, [pc, #452]	; (9147c <mw_remove_window+0x2b4>)
   912b6:	689a      	ldr	r2, [r3, #8]
   912b8:	b12a      	cbz	r2, 912c6 <mw_remove_window+0xfe>
   912ba:	7b1a      	ldrb	r2, [r3, #12]
   912bc:	b91a      	cbnz	r2, 912c6 <mw_remove_window+0xfe>
				mw_all_timers[i].recipient_type == MW_WINDOW_MESSAGE &&
   912be:	6859      	ldr	r1, [r3, #4]
   912c0:	428e      	cmp	r6, r1
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   912c2:	bf08      	it	eq
   912c4:	609a      	streq	r2, [r3, #8]
		if (mw_all_timers[i].timer_handle != MW_INVALID_HANDLE &&
   912c6:	699a      	ldr	r2, [r3, #24]
   912c8:	b12a      	cbz	r2, 912d6 <mw_remove_window+0x10e>
   912ca:	7f1a      	ldrb	r2, [r3, #28]
   912cc:	b91a      	cbnz	r2, 912d6 <mw_remove_window+0x10e>
				mw_all_timers[i].recipient_type == MW_WINDOW_MESSAGE &&
   912ce:	6959      	ldr	r1, [r3, #20]
   912d0:	428e      	cmp	r6, r1
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   912d2:	bf08      	it	eq
   912d4:	619a      	streq	r2, [r3, #24]
		if (mw_all_timers[i].timer_handle != MW_INVALID_HANDLE &&
   912d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   912d8:	b132      	cbz	r2, 912e8 <mw_remove_window+0x120>
   912da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   912de:	b91a      	cbnz	r2, 912e8 <mw_remove_window+0x120>
				mw_all_timers[i].recipient_type == MW_WINDOW_MESSAGE &&
   912e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
   912e2:	428e      	cmp	r6, r1
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   912e4:	bf08      	it	eq
   912e6:	629a      	streq	r2, [r3, #40]	; 0x28
		if (mw_all_timers[i].timer_handle != MW_INVALID_HANDLE &&
   912e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   912ea:	b132      	cbz	r2, 912fa <mw_remove_window+0x132>
   912ec:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   912f0:	b91a      	cbnz	r2, 912fa <mw_remove_window+0x132>
				mw_all_timers[i].recipient_type == MW_WINDOW_MESSAGE &&
   912f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
   912f4:	428e      	cmp	r6, r1
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   912f6:	bf08      	it	eq
   912f8:	639a      	streq	r2, [r3, #56]	; 0x38
		if (mw_all_timers[i].timer_handle != MW_INVALID_HANDLE &&
   912fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   912fc:	b132      	cbz	r2, 9130c <mw_remove_window+0x144>
   912fe:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
   91302:	b91a      	cbnz	r2, 9130c <mw_remove_window+0x144>
				mw_all_timers[i].recipient_type == MW_WINDOW_MESSAGE &&
   91304:	6c59      	ldr	r1, [r3, #68]	; 0x44
   91306:	428e      	cmp	r6, r1
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   91308:	bf08      	it	eq
   9130a:	649a      	streq	r2, [r3, #72]	; 0x48
		if (mw_all_timers[i].timer_handle != MW_INVALID_HANDLE &&
   9130c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   9130e:	b132      	cbz	r2, 9131e <mw_remove_window+0x156>
   91310:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
   91314:	b91a      	cbnz	r2, 9131e <mw_remove_window+0x156>
				mw_all_timers[i].recipient_type == MW_WINDOW_MESSAGE &&
   91316:	6d59      	ldr	r1, [r3, #84]	; 0x54
   91318:	428e      	cmp	r6, r1
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   9131a:	bf08      	it	eq
   9131c:	659a      	streq	r2, [r3, #88]	; 0x58
		if (mw_all_timers[i].timer_handle != MW_INVALID_HANDLE &&
   9131e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   91320:	b132      	cbz	r2, 91330 <mw_remove_window+0x168>
   91322:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
   91326:	b91a      	cbnz	r2, 91330 <mw_remove_window+0x168>
				mw_all_timers[i].recipient_type == MW_WINDOW_MESSAGE &&
   91328:	6e59      	ldr	r1, [r3, #100]	; 0x64
   9132a:	428e      	cmp	r6, r1
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   9132c:	bf08      	it	eq
   9132e:	669a      	streq	r2, [r3, #104]	; 0x68
		if (mw_all_timers[i].timer_handle != MW_INVALID_HANDLE &&
   91330:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   91332:	b132      	cbz	r2, 91342 <mw_remove_window+0x17a>
   91334:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   91338:	b91a      	cbnz	r2, 91342 <mw_remove_window+0x17a>
				mw_all_timers[i].recipient_type == MW_WINDOW_MESSAGE &&
   9133a:	6f59      	ldr	r1, [r3, #116]	; 0x74
   9133c:	428e      	cmp	r6, r1
			mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   9133e:	bf08      	it	eq
   91340:	679a      	streq	r2, [r3, #120]	; 0x78
{
   91342:	2400      	movs	r4, #0
   91344:	4f4a      	ldr	r7, [pc, #296]	; (91470 <mw_remove_window+0x2a8>)
   91346:	f8df a140 	ldr.w	sl, [pc, #320]	; 91488 <mw_remove_window+0x2c0>
		MW_ASSERT(message, "Null message found in queue");
   9134a:	f8df 9140 	ldr.w	r9, [pc, #320]	; 9148c <mw_remove_window+0x2c4>
   9134e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 9146c <mw_remove_window+0x2a4>
		message = mw_message_queue_get_ref_to_item_at_position(i);
   91352:	b2e0      	uxtb	r0, r4
   91354:	47d0      	blx	sl
		MW_ASSERT(message, "Null message found in queue");
   91356:	4605      	mov	r5, r0
   91358:	3000      	adds	r0, #0
   9135a:	bf18      	it	ne
   9135c:	2001      	movne	r0, #1
   9135e:	464b      	mov	r3, r9
   91360:	f241 322b 	movw	r2, #4907	; 0x132b
   91364:	4641      	mov	r1, r8
   91366:	3401      	adds	r4, #1
   91368:	47b8      	blx	r7
		if (message != NULL)
   9136a:	b125      	cbz	r5, 91376 <mw_remove_window+0x1ae>
			if (message->recipient_handle == window_handle)
   9136c:	686b      	ldr	r3, [r5, #4]
   9136e:	429e      	cmp	r6, r3
				message->message_recipient_type = MW_CANCELLED_MESSAGE;
   91370:	bf04      	itt	eq
   91372:	2303      	moveq	r3, #3
   91374:	726b      	strbeq	r3, [r5, #9]
	for (i = 0U; i < MW_MESSAGE_QUEUE_SIZE; i++)
   91376:	2c64      	cmp	r4, #100	; 0x64
   91378:	d1eb      	bne.n	91352 <mw_remove_window+0x18a>
	mw_message_t temp_message = {MW_UNUSED_MESSAGE_PARAMETER, window_handle, MW_WINDOW_REMOVED_MESSAGE, MW_WINDOW_MESSAGE, MW_UNUSED_MESSAGE_PARAMETER, NULL};
   9137a:	2400      	movs	r4, #0
   9137c:	2201      	movs	r2, #1
	mw_all_windows[window_id].message_func(&temp_message);
   9137e:	9b01      	ldr	r3, [sp, #4]
	mw_message_t temp_message = {MW_UNUSED_MESSAGE_PARAMETER, window_handle, MW_WINDOW_REMOVED_MESSAGE, MW_WINDOW_MESSAGE, MW_UNUSED_MESSAGE_PARAMETER, NULL};
   91380:	f88d 2014 	strb.w	r2, [sp, #20]
	mw_all_windows[window_id].message_func(&temp_message);
   91384:	eb0b 1583 	add.w	r5, fp, r3, lsl #6
   91388:	68ab      	ldr	r3, [r5, #8]
	mw_message_t temp_message = {MW_UNUSED_MESSAGE_PARAMETER, window_handle, MW_WINDOW_REMOVED_MESSAGE, MW_WINDOW_MESSAGE, MW_UNUSED_MESSAGE_PARAMETER, NULL};
   9138a:	9604      	str	r6, [sp, #16]
   9138c:	9403      	str	r4, [sp, #12]
   9138e:	f88d 4015 	strb.w	r4, [sp, #21]
   91392:	9406      	str	r4, [sp, #24]
   91394:	9407      	str	r4, [sp, #28]
	mw_all_windows[window_id].message_func(&temp_message);
   91396:	a803      	add	r0, sp, #12
   91398:	4798      	blx	r3
	mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_IS_USED;
   9139a:	68eb      	ldr	r3, [r5, #12]
   9139c:	f023 0220 	bic.w	r2, r3, #32
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED)
   913a0:	06d9      	lsls	r1, r3, #27
	mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_IS_USED;
   913a2:	60ea      	str	r2, [r5, #12]
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED)
   913a4:	f100 8084 	bmi.w	914b0 <mw_remove_window+0x2e8>
	rationalize_z_orders();
   913a8:	4b35      	ldr	r3, [pc, #212]	; (91480 <mw_remove_window+0x2b8>)
   913aa:	4798      	blx	r3
	reentered = false;
   913ac:	2300      	movs	r3, #0
   913ae:	4a2d      	ldr	r2, [pc, #180]	; (91464 <mw_remove_window+0x29c>)
   913b0:	7013      	strb	r3, [r2, #0]
}
   913b2:	b009      	add	sp, #36	; 0x24
   913b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   913b8:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   913bc:	0699      	lsls	r1, r3, #26
   913be:	f53f af0e 	bmi.w	911de <mw_remove_window+0x16>
   913c2:	e721      	b.n	91208 <mw_remove_window+0x40>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   913c4:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   913c8:	069b      	lsls	r3, r3, #26
   913ca:	f57f af27 	bpl.w	9121c <mw_remove_window+0x54>
   913ce:	2302      	movs	r3, #2
   913d0:	9301      	str	r3, [sp, #4]
   913d2:	e75f      	b.n	91294 <mw_remove_window+0xcc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   913d4:	f8db 304c 	ldr.w	r3, [fp, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   913d8:	069a      	lsls	r2, r3, #26
   913da:	f57f af1a 	bpl.w	91212 <mw_remove_window+0x4a>
   913de:	2301      	movs	r3, #1
   913e0:	9301      	str	r3, [sp, #4]
   913e2:	e757      	b.n	91294 <mw_remove_window+0xcc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   913e4:	f8db 310c 	ldr.w	r3, [fp, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   913e8:	069d      	lsls	r5, r3, #26
   913ea:	f57f af21 	bpl.w	91230 <mw_remove_window+0x68>
   913ee:	2304      	movs	r3, #4
   913f0:	9301      	str	r3, [sp, #4]
   913f2:	e74f      	b.n	91294 <mw_remove_window+0xcc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   913f4:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   913f8:	069f      	lsls	r7, r3, #26
   913fa:	f57f af14 	bpl.w	91226 <mw_remove_window+0x5e>
   913fe:	2303      	movs	r3, #3
   91400:	9301      	str	r3, [sp, #4]
   91402:	e747      	b.n	91294 <mw_remove_window+0xcc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91404:	f8db 314c 	ldr.w	r3, [fp, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   91408:	069c      	lsls	r4, r3, #26
   9140a:	f57f af16 	bpl.w	9123a <mw_remove_window+0x72>
   9140e:	2305      	movs	r3, #5
   91410:	9301      	str	r3, [sp, #4]
   91412:	e73f      	b.n	91294 <mw_remove_window+0xcc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91414:	f8db 318c 	ldr.w	r3, [fp, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   91418:	0698      	lsls	r0, r3, #26
   9141a:	f57f af13 	bpl.w	91244 <mw_remove_window+0x7c>
   9141e:	2306      	movs	r3, #6
   91420:	9301      	str	r3, [sp, #4]
   91422:	e737      	b.n	91294 <mw_remove_window+0xcc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91424:	f8db 320c 	ldr.w	r3, [fp, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   91428:	069a      	lsls	r2, r3, #26
   9142a:	f57f af15 	bpl.w	91258 <mw_remove_window+0x90>
   9142e:	2308      	movs	r3, #8
   91430:	9301      	str	r3, [sp, #4]
   91432:	e72f      	b.n	91294 <mw_remove_window+0xcc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91434:	f8db 31cc 	ldr.w	r3, [fp, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   91438:	0699      	lsls	r1, r3, #26
   9143a:	f57f af08 	bpl.w	9124e <mw_remove_window+0x86>
   9143e:	2307      	movs	r3, #7
   91440:	9301      	str	r3, [sp, #4]
   91442:	e727      	b.n	91294 <mw_remove_window+0xcc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91444:	f8db 324c 	ldr.w	r3, [fp, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   91448:	069b      	lsls	r3, r3, #26
   9144a:	f57f af0a 	bpl.w	91262 <mw_remove_window+0x9a>
   9144e:	2309      	movs	r3, #9
   91450:	9301      	str	r3, [sp, #4]
   91452:	e71f      	b.n	91294 <mw_remove_window+0xcc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91454:	f8db 328c 	ldr.w	r3, [fp, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   91458:	069f      	lsls	r7, r3, #26
   9145a:	f57f af07 	bpl.w	9126c <mw_remove_window+0xa4>
   9145e:	230a      	movs	r3, #10
   91460:	9301      	str	r3, [sp, #4]
   91462:	e717      	b.n	91294 <mw_remove_window+0xcc>
   91464:	20071f60 	.word	0x20071f60
   91468:	000ab764 	.word	0x000ab764
   9146c:	000ab5cc 	.word	0x000ab5cc
   91470:	00095add 	.word	0x00095add
   91474:	20071858 	.word	0x20071858
   91478:	00091041 	.word	0x00091041
   9147c:	20071b58 	.word	0x20071b58
   91480:	0008b995 	.word	0x0008b995
   91484:	20071bd8 	.word	0x20071bd8
   91488:	00095cd5 	.word	0x00095cd5
   9148c:	000ab910 	.word	0x000ab910
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91490:	f8db 330c 	ldr.w	r3, [fp, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   91494:	069c      	lsls	r4, r3, #26
   91496:	f57f aef3 	bpl.w	91280 <mw_remove_window+0xb8>
   9149a:	230c      	movs	r3, #12
   9149c:	9301      	str	r3, [sp, #4]
   9149e:	e6f9      	b.n	91294 <mw_remove_window+0xcc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   914a0:	f8db 32cc 	ldr.w	r3, [fp, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   914a4:	069d      	lsls	r5, r3, #26
   914a6:	f57f aee6 	bpl.w	91276 <mw_remove_window+0xae>
   914aa:	230b      	movs	r3, #11
   914ac:	9301      	str	r3, [sp, #4]
   914ae:	e6f1      	b.n	91294 <mw_remove_window+0xcc>
		remove_minimised_window_from_list(mw_all_windows[window_id].window_handle);
   914b0:	696b      	ldr	r3, [r5, #20]
	if (window_handle == MW_INVALID_HANDLE)
   914b2:	2b00      	cmp	r3, #0
   914b4:	d03d      	beq.n	91532 <mw_remove_window+0x36a>
		if (mw_all_windows[i].window_handle == window_handle &&
   914b6:	f8db 2014 	ldr.w	r2, [fp, #20]
   914ba:	4293      	cmp	r3, r2
   914bc:	d07c      	beq.n	915b8 <mw_remove_window+0x3f0>
   914be:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
   914c2:	4293      	cmp	r3, r2
   914c4:	d072      	beq.n	915ac <mw_remove_window+0x3e4>
   914c6:	f8db 2094 	ldr.w	r2, [fp, #148]	; 0x94
   914ca:	4293      	cmp	r3, r2
   914cc:	f000 8085 	beq.w	915da <mw_remove_window+0x412>
   914d0:	f8db 20d4 	ldr.w	r2, [fp, #212]	; 0xd4
   914d4:	4293      	cmp	r3, r2
   914d6:	d07a      	beq.n	915ce <mw_remove_window+0x406>
   914d8:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
   914dc:	4293      	cmp	r3, r2
   914de:	f000 80b1 	beq.w	91644 <mw_remove_window+0x47c>
   914e2:	f8db 2154 	ldr.w	r2, [fp, #340]	; 0x154
   914e6:	4293      	cmp	r3, r2
   914e8:	f000 80a5 	beq.w	91636 <mw_remove_window+0x46e>
   914ec:	f8db 2194 	ldr.w	r2, [fp, #404]	; 0x194
   914f0:	4293      	cmp	r3, r2
   914f2:	f000 8099 	beq.w	91628 <mw_remove_window+0x460>
   914f6:	f8db 21d4 	ldr.w	r2, [fp, #468]	; 0x1d4
   914fa:	4293      	cmp	r3, r2
   914fc:	f000 808d 	beq.w	9161a <mw_remove_window+0x452>
   91500:	f8db 2214 	ldr.w	r2, [fp, #532]	; 0x214
   91504:	4293      	cmp	r3, r2
   91506:	f000 8081 	beq.w	9160c <mw_remove_window+0x444>
   9150a:	f8db 2254 	ldr.w	r2, [fp, #596]	; 0x254
   9150e:	4293      	cmp	r3, r2
   91510:	d076      	beq.n	91600 <mw_remove_window+0x438>
   91512:	f8db 2294 	ldr.w	r2, [fp, #660]	; 0x294
   91516:	4293      	cmp	r3, r2
   91518:	d06c      	beq.n	915f4 <mw_remove_window+0x42c>
   9151a:	f8db 22d4 	ldr.w	r2, [fp, #724]	; 0x2d4
   9151e:	4293      	cmp	r3, r2
   91520:	d062      	beq.n	915e8 <mw_remove_window+0x420>
   91522:	f8db 2314 	ldr.w	r2, [fp, #788]	; 0x314
   91526:	4293      	cmp	r3, r2
   91528:	d04b      	beq.n	915c2 <mw_remove_window+0x3fa>
   9152a:	f8db 2354 	ldr.w	r2, [fp, #852]	; 0x354
   9152e:	4293      	cmp	r3, r2
   91530:	d006      	beq.n	91540 <mw_remove_window+0x378>
		MW_ASSERT((bool)false, "Bad window handle");
   91532:	4b61      	ldr	r3, [pc, #388]	; (916b8 <mw_remove_window+0x4f0>)
   91534:	f240 3215 	movw	r2, #789	; 0x315
   91538:	4960      	ldr	r1, [pc, #384]	; (916bc <mw_remove_window+0x4f4>)
   9153a:	2000      	movs	r0, #0
   9153c:	47b8      	blx	r7
   9153e:	e733      	b.n	913a8 <mw_remove_window+0x1e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91540:	f8db 334c 	ldr.w	r3, [fp, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   91544:	069b      	lsls	r3, r3, #26
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   91546:	bf48      	it	mi
   91548:	240d      	movmi	r4, #13
		if (mw_all_windows[i].window_handle == window_handle &&
   9154a:	d5f2      	bpl.n	91532 <mw_remove_window+0x36a>
		if (minimised_windows[i] == window_id)
   9154c:	4a5c      	ldr	r2, [pc, #368]	; (916c0 <mw_remove_window+0x4f8>)
   9154e:	7853      	ldrb	r3, [r2, #1]
   91550:	42a3      	cmp	r3, r4
   91552:	f000 80a1 	beq.w	91698 <mw_remove_window+0x4d0>
   91556:	7893      	ldrb	r3, [r2, #2]
   91558:	42a3      	cmp	r3, r4
   9155a:	f000 8093 	beq.w	91684 <mw_remove_window+0x4bc>
   9155e:	78d3      	ldrb	r3, [r2, #3]
   91560:	42a3      	cmp	r3, r4
   91562:	f000 8092 	beq.w	9168a <mw_remove_window+0x4c2>
   91566:	7913      	ldrb	r3, [r2, #4]
   91568:	42a3      	cmp	r3, r4
   9156a:	f000 8088 	beq.w	9167e <mw_remove_window+0x4b6>
   9156e:	7953      	ldrb	r3, [r2, #5]
   91570:	42a3      	cmp	r3, r4
   91572:	f000 8097 	beq.w	916a4 <mw_remove_window+0x4dc>
   91576:	7993      	ldrb	r3, [r2, #6]
   91578:	42a3      	cmp	r3, r4
   9157a:	d07d      	beq.n	91678 <mw_remove_window+0x4b0>
   9157c:	79d3      	ldrb	r3, [r2, #7]
   9157e:	42a3      	cmp	r3, r4
   91580:	f000 808d 	beq.w	9169e <mw_remove_window+0x4d6>
   91584:	7a13      	ldrb	r3, [r2, #8]
   91586:	42a3      	cmp	r3, r4
   91588:	d073      	beq.n	91672 <mw_remove_window+0x4aa>
   9158a:	7a53      	ldrb	r3, [r2, #9]
   9158c:	42a3      	cmp	r3, r4
   9158e:	f000 808f 	beq.w	916b0 <mw_remove_window+0x4e8>
   91592:	7a93      	ldrb	r3, [r2, #10]
   91594:	42a3      	cmp	r3, r4
   91596:	d069      	beq.n	9166c <mw_remove_window+0x4a4>
   91598:	7ad3      	ldrb	r3, [r2, #11]
   9159a:	42a3      	cmp	r3, r4
   9159c:	f000 8085 	beq.w	916aa <mw_remove_window+0x4e2>
   915a0:	7b13      	ldrb	r3, [r2, #12]
   915a2:	42a3      	cmp	r3, r4
   915a4:	d055      	beq.n	91652 <mw_remove_window+0x48a>
	minimised_windows[MW_MAX_WINDOW_COUNT - 1U] = MW_ROOT_WINDOW_ID;
   915a6:	2300      	movs	r3, #0
   915a8:	7353      	strb	r3, [r2, #13]
   915aa:	e6fd      	b.n	913a8 <mw_remove_window+0x1e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   915ac:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   915b0:	0696      	lsls	r6, r2, #26
   915b2:	d588      	bpl.n	914c6 <mw_remove_window+0x2fe>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   915b4:	2401      	movs	r4, #1
   915b6:	e7c9      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   915b8:	f8db 200c 	ldr.w	r2, [fp, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   915bc:	0692      	lsls	r2, r2, #26
   915be:	d4c5      	bmi.n	9154c <mw_remove_window+0x384>
   915c0:	e77d      	b.n	914be <mw_remove_window+0x2f6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   915c2:	f8db 230c 	ldr.w	r2, [fp, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   915c6:	0692      	lsls	r2, r2, #26
   915c8:	d5af      	bpl.n	9152a <mw_remove_window+0x362>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   915ca:	240c      	movs	r4, #12
   915cc:	e7be      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   915ce:	f8db 20cc 	ldr.w	r2, [fp, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   915d2:	0694      	lsls	r4, r2, #26
   915d4:	d580      	bpl.n	914d8 <mw_remove_window+0x310>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   915d6:	2403      	movs	r4, #3
   915d8:	e7b8      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   915da:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   915de:	0695      	lsls	r5, r2, #26
   915e0:	f57f af76 	bpl.w	914d0 <mw_remove_window+0x308>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   915e4:	2402      	movs	r4, #2
   915e6:	e7b1      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   915e8:	f8db 22cc 	ldr.w	r2, [fp, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   915ec:	0691      	lsls	r1, r2, #26
   915ee:	d598      	bpl.n	91522 <mw_remove_window+0x35a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   915f0:	240b      	movs	r4, #11
   915f2:	e7ab      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   915f4:	f8db 228c 	ldr.w	r2, [fp, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   915f8:	0690      	lsls	r0, r2, #26
   915fa:	d58e      	bpl.n	9151a <mw_remove_window+0x352>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   915fc:	240a      	movs	r4, #10
   915fe:	e7a5      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91600:	f8db 224c 	ldr.w	r2, [fp, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   91604:	0694      	lsls	r4, r2, #26
   91606:	d584      	bpl.n	91512 <mw_remove_window+0x34a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   91608:	2409      	movs	r4, #9
   9160a:	e79f      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9160c:	f8db 220c 	ldr.w	r2, [fp, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   91610:	0695      	lsls	r5, r2, #26
   91612:	f57f af7a 	bpl.w	9150a <mw_remove_window+0x342>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   91616:	2408      	movs	r4, #8
   91618:	e798      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9161a:	f8db 21cc 	ldr.w	r2, [fp, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9161e:	0696      	lsls	r6, r2, #26
   91620:	f57f af6e 	bpl.w	91500 <mw_remove_window+0x338>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   91624:	2407      	movs	r4, #7
   91626:	e791      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91628:	f8db 218c 	ldr.w	r2, [fp, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   9162c:	0692      	lsls	r2, r2, #26
   9162e:	f57f af62 	bpl.w	914f6 <mw_remove_window+0x32e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   91632:	2406      	movs	r4, #6
   91634:	e78a      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91636:	f8db 214c 	ldr.w	r2, [fp, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   9163a:	0691      	lsls	r1, r2, #26
   9163c:	f57f af56 	bpl.w	914ec <mw_remove_window+0x324>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   91640:	2405      	movs	r4, #5
   91642:	e783      	b.n	9154c <mw_remove_window+0x384>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91644:	f8db 210c 	ldr.w	r2, [fp, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   91648:	0690      	lsls	r0, r2, #26
   9164a:	f57f af4a 	bpl.w	914e2 <mw_remove_window+0x31a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9164e:	2404      	movs	r4, #4
   91650:	e77c      	b.n	9154c <mw_remove_window+0x384>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   91652:	230c      	movs	r3, #12
		if (minimised_windows[i] == window_id)
   91654:	4619      	mov	r1, r3
			minimised_windows[i] = minimised_windows[i + 1U];
   91656:	18d0      	adds	r0, r2, r3
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   91658:	3301      	adds	r3, #1
			minimised_windows[i] = minimised_windows[i + 1U];
   9165a:	7840      	ldrb	r0, [r0, #1]
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   9165c:	b2db      	uxtb	r3, r3
   9165e:	2b0e      	cmp	r3, #14
			minimised_windows[i] = minimised_windows[i + 1U];
   91660:	5450      	strb	r0, [r2, r1]
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   91662:	d0a0      	beq.n	915a6 <mw_remove_window+0x3de>
		if (shift && i < (MW_MAX_WINDOW_COUNT - 1U))
   91664:	2b0d      	cmp	r3, #13
		if (minimised_windows[i] == window_id)
   91666:	4619      	mov	r1, r3
		if (shift && i < (MW_MAX_WINDOW_COUNT - 1U))
   91668:	d1f5      	bne.n	91656 <mw_remove_window+0x48e>
   9166a:	e79c      	b.n	915a6 <mw_remove_window+0x3de>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   9166c:	230a      	movs	r3, #10
		if (minimised_windows[i] == window_id)
   9166e:	4619      	mov	r1, r3
   91670:	e7f1      	b.n	91656 <mw_remove_window+0x48e>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   91672:	2308      	movs	r3, #8
		if (minimised_windows[i] == window_id)
   91674:	4619      	mov	r1, r3
   91676:	e7ee      	b.n	91656 <mw_remove_window+0x48e>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   91678:	2306      	movs	r3, #6
		if (minimised_windows[i] == window_id)
   9167a:	4619      	mov	r1, r3
   9167c:	e7eb      	b.n	91656 <mw_remove_window+0x48e>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   9167e:	2304      	movs	r3, #4
		if (minimised_windows[i] == window_id)
   91680:	4619      	mov	r1, r3
   91682:	e7e8      	b.n	91656 <mw_remove_window+0x48e>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   91684:	2302      	movs	r3, #2
		if (minimised_windows[i] == window_id)
   91686:	4619      	mov	r1, r3
   91688:	e7e5      	b.n	91656 <mw_remove_window+0x48e>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   9168a:	2303      	movs	r3, #3
		if (minimised_windows[i] == window_id)
   9168c:	4619      	mov	r1, r3
			minimised_windows[i] = minimised_windows[i + 1U];
   9168e:	18d0      	adds	r0, r2, r3
   91690:	7840      	ldrb	r0, [r0, #1]
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   91692:	3301      	adds	r3, #1
			minimised_windows[i] = minimised_windows[i + 1U];
   91694:	5450      	strb	r0, [r2, r1]
   91696:	e7e5      	b.n	91664 <mw_remove_window+0x49c>
		if (minimised_windows[i] == window_id)
   91698:	2301      	movs	r3, #1
   9169a:	4619      	mov	r1, r3
   9169c:	e7f7      	b.n	9168e <mw_remove_window+0x4c6>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   9169e:	2307      	movs	r3, #7
		if (minimised_windows[i] == window_id)
   916a0:	4619      	mov	r1, r3
   916a2:	e7f4      	b.n	9168e <mw_remove_window+0x4c6>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   916a4:	2305      	movs	r3, #5
		if (minimised_windows[i] == window_id)
   916a6:	4619      	mov	r1, r3
   916a8:	e7f1      	b.n	9168e <mw_remove_window+0x4c6>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   916aa:	230b      	movs	r3, #11
		if (minimised_windows[i] == window_id)
   916ac:	4619      	mov	r1, r3
   916ae:	e7ee      	b.n	9168e <mw_remove_window+0x4c6>
	for (i = 1U; i < MW_MAX_WINDOW_COUNT; i++)
   916b0:	2309      	movs	r3, #9
		if (minimised_windows[i] == window_id)
   916b2:	4619      	mov	r1, r3
   916b4:	e7eb      	b.n	9168e <mw_remove_window+0x4c6>
   916b6:	bf00      	nop
   916b8:	000ab764 	.word	0x000ab764
   916bc:	000ab248 	.word	0x000ab248
   916c0:	20071848 	.word	0x20071848

000916c4 <mw_get_control_rect>:
{
   916c4:	b538      	push	{r3, r4, r5, lr}
   916c6:	4605      	mov	r5, r0
	if (control_handle == MW_INVALID_HANDLE)
   916c8:	b169      	cbz	r1, 916e6 <mw_get_control_rect+0x22>
   916ca:	4c11      	ldr	r4, [pc, #68]	; (91710 <mw_get_control_rect+0x4c>)
   916cc:	2200      	movs	r2, #0
   916ce:	4623      	mov	r3, r4
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   916d0:	8b98      	ldrh	r0, [r3, #28]
   916d2:	0740      	lsls	r0, r0, #29
   916d4:	d502      	bpl.n	916dc <mw_get_control_rect+0x18>
   916d6:	6998      	ldr	r0, [r3, #24]
   916d8:	4281      	cmp	r1, r0
   916da:	d010      	beq.n	916fe <mw_get_control_rect+0x3a>
   916dc:	3201      	adds	r2, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   916de:	2a18      	cmp	r2, #24
   916e0:	f103 0320 	add.w	r3, r3, #32
   916e4:	d1f4      	bne.n	916d0 <mw_get_control_rect+0xc>
		MW_ASSERT((bool)false, "Bad control handle");
   916e6:	4b0b      	ldr	r3, [pc, #44]	; (91714 <mw_get_control_rect+0x50>)
   916e8:	f241 42c8 	movw	r2, #5320	; 0x14c8
   916ec:	490a      	ldr	r1, [pc, #40]	; (91718 <mw_get_control_rect+0x54>)
   916ee:	2000      	movs	r0, #0
   916f0:	4c0a      	ldr	r4, [pc, #40]	; (9171c <mw_get_control_rect+0x58>)
   916f2:	47a0      	blx	r4
		return (default_rect);
   916f4:	2300      	movs	r3, #0
   916f6:	602b      	str	r3, [r5, #0]
   916f8:	606b      	str	r3, [r5, #4]
}
   916fa:	4628      	mov	r0, r5
   916fc:	bd38      	pop	{r3, r4, r5, pc}
	return (mw_all_controls[control_id].control_rect);
   916fe:	eb04 1242 	add.w	r2, r4, r2, lsl #5
   91702:	320c      	adds	r2, #12
   91704:	ca03      	ldmia	r2!, {r0, r1}
   91706:	6028      	str	r0, [r5, #0]
   91708:	6069      	str	r1, [r5, #4]
}
   9170a:	4628      	mov	r0, r5
   9170c:	bd38      	pop	{r3, r4, r5, pc}
   9170e:	bf00      	nop
   91710:	20071858 	.word	0x20071858
   91714:	000ab734 	.word	0x000ab734
   91718:	000ab680 	.word	0x000ab680
   9171c:	00095add 	.word	0x00095add

00091720 <mw_get_control_parent_window_handle>:
{
   91720:	b510      	push	{r4, lr}
	if (control_handle == MW_INVALID_HANDLE)
   91722:	b168      	cbz	r0, 91740 <mw_get_control_parent_window_handle+0x20>
   91724:	4c0d      	ldr	r4, [pc, #52]	; (9175c <mw_get_control_parent_window_handle+0x3c>)
   91726:	2200      	movs	r2, #0
   91728:	4623      	mov	r3, r4
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   9172a:	8b99      	ldrh	r1, [r3, #28]
   9172c:	0749      	lsls	r1, r1, #29
   9172e:	d502      	bpl.n	91736 <mw_get_control_parent_window_handle+0x16>
   91730:	6999      	ldr	r1, [r3, #24]
   91732:	4288      	cmp	r0, r1
   91734:	d00d      	beq.n	91752 <mw_get_control_parent_window_handle+0x32>
   91736:	3201      	adds	r2, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   91738:	2a18      	cmp	r2, #24
   9173a:	f103 0320 	add.w	r3, r3, #32
   9173e:	d1f4      	bne.n	9172a <mw_get_control_parent_window_handle+0xa>
		MW_ASSERT((bool)false, "Bad control handle");
   91740:	4b07      	ldr	r3, [pc, #28]	; (91760 <mw_get_control_parent_window_handle+0x40>)
   91742:	f241 42d7 	movw	r2, #5335	; 0x14d7
   91746:	4907      	ldr	r1, [pc, #28]	; (91764 <mw_get_control_parent_window_handle+0x44>)
   91748:	2000      	movs	r0, #0
   9174a:	4c07      	ldr	r4, [pc, #28]	; (91768 <mw_get_control_parent_window_handle+0x48>)
   9174c:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   9174e:	2000      	movs	r0, #0
   91750:	bd10      	pop	{r4, pc}
	return (mw_all_controls[control_id].parent_handle);
   91752:	eb04 1242 	add.w	r2, r4, r2, lsl #5
   91756:	6950      	ldr	r0, [r2, #20]
}
   91758:	bd10      	pop	{r4, pc}
   9175a:	bf00      	nop
   9175c:	20071858 	.word	0x20071858
   91760:	000ab734 	.word	0x000ab734
   91764:	000ab694 	.word	0x000ab694
   91768:	00095add 	.word	0x00095add

0009176c <mw_get_control_instance_data>:
{
   9176c:	b510      	push	{r4, lr}
	if (control_handle == MW_INVALID_HANDLE)
   9176e:	b168      	cbz	r0, 9178c <mw_get_control_instance_data+0x20>
   91770:	4c0d      	ldr	r4, [pc, #52]	; (917a8 <mw_get_control_instance_data+0x3c>)
   91772:	2200      	movs	r2, #0
   91774:	4623      	mov	r3, r4
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   91776:	8b99      	ldrh	r1, [r3, #28]
   91778:	0749      	lsls	r1, r1, #29
   9177a:	d502      	bpl.n	91782 <mw_get_control_instance_data+0x16>
   9177c:	6999      	ldr	r1, [r3, #24]
   9177e:	4288      	cmp	r0, r1
   91780:	d00d      	beq.n	9179e <mw_get_control_instance_data+0x32>
   91782:	3201      	adds	r2, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   91784:	2a18      	cmp	r2, #24
   91786:	f103 0320 	add.w	r3, r3, #32
   9178a:	d1f4      	bne.n	91776 <mw_get_control_instance_data+0xa>
		MW_ASSERT((bool)false, "Bad control handle");
   9178c:	4b07      	ldr	r3, [pc, #28]	; (917ac <mw_get_control_instance_data+0x40>)
   9178e:	f241 42e6 	movw	r2, #5350	; 0x14e6
   91792:	4907      	ldr	r1, [pc, #28]	; (917b0 <mw_get_control_instance_data+0x44>)
   91794:	2000      	movs	r0, #0
   91796:	4c07      	ldr	r4, [pc, #28]	; (917b4 <mw_get_control_instance_data+0x48>)
   91798:	47a0      	blx	r4
		return NULL;
   9179a:	2000      	movs	r0, #0
   9179c:	bd10      	pop	{r4, pc}
	return (mw_all_controls[control_id].instance_data);
   9179e:	eb04 1242 	add.w	r2, r4, r2, lsl #5
   917a2:	6890      	ldr	r0, [r2, #8]
}
   917a4:	bd10      	pop	{r4, pc}
   917a6:	bf00      	nop
   917a8:	20071858 	.word	0x20071858
   917ac:	000ab734 	.word	0x000ab734
   917b0:	000ab6b8 	.word	0x000ab6b8
   917b4:	00095add 	.word	0x00095add

000917b8 <mw_get_control_flags>:
{
   917b8:	b510      	push	{r4, lr}
	if (control_handle == MW_INVALID_HANDLE)
   917ba:	b158      	cbz	r0, 917d4 <mw_get_control_flags+0x1c>
   917bc:	4b0a      	ldr	r3, [pc, #40]	; (917e8 <mw_get_control_flags+0x30>)
   917be:	f503 7140 	add.w	r1, r3, #768	; 0x300
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   917c2:	8b9a      	ldrh	r2, [r3, #28]
   917c4:	0754      	lsls	r4, r2, #29
   917c6:	d502      	bpl.n	917ce <mw_get_control_flags+0x16>
   917c8:	699c      	ldr	r4, [r3, #24]
   917ca:	42a0      	cmp	r0, r4
   917cc:	d00a      	beq.n	917e4 <mw_get_control_flags+0x2c>
   917ce:	3320      	adds	r3, #32
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   917d0:	428b      	cmp	r3, r1
   917d2:	d1f6      	bne.n	917c2 <mw_get_control_flags+0xa>
		MW_ASSERT((bool)false, "Bad control handle");
   917d4:	f241 42f5 	movw	r2, #5365	; 0x14f5
   917d8:	4b04      	ldr	r3, [pc, #16]	; (917ec <mw_get_control_flags+0x34>)
   917da:	4905      	ldr	r1, [pc, #20]	; (917f0 <mw_get_control_flags+0x38>)
   917dc:	2000      	movs	r0, #0
   917de:	4c05      	ldr	r4, [pc, #20]	; (917f4 <mw_get_control_flags+0x3c>)
   917e0:	47a0      	blx	r4
		return (0U);
   917e2:	2200      	movs	r2, #0
}
   917e4:	4610      	mov	r0, r2
   917e6:	bd10      	pop	{r4, pc}
   917e8:	20071858 	.word	0x20071858
   917ec:	000ab734 	.word	0x000ab734
   917f0:	000ab6d8 	.word	0x000ab6d8
   917f4:	00095add 	.word	0x00095add

000917f8 <mw_set_timer>:
{
   917f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fire_time <= mw_tick_counter)
   917fa:	4b1e      	ldr	r3, [pc, #120]	; (91874 <mw_set_timer+0x7c>)
   917fc:	681b      	ldr	r3, [r3, #0]
   917fe:	4283      	cmp	r3, r0
   91800:	d21a      	bcs.n	91838 <mw_set_timer+0x40>
	if (recipient_type != MW_WINDOW_MESSAGE && recipient_type != MW_CONTROL_MESSAGE)
   91802:	2a01      	cmp	r2, #1
   91804:	4604      	mov	r4, r0
   91806:	d819      	bhi.n	9183c <mw_set_timer+0x44>
		if (mw_all_timers[i].timer_handle == MW_INVALID_HANDLE)
   91808:	4b1b      	ldr	r3, [pc, #108]	; (91878 <mw_set_timer+0x80>)
   9180a:	6898      	ldr	r0, [r3, #8]
   9180c:	b1d8      	cbz	r0, 91846 <mw_set_timer+0x4e>
   9180e:	6998      	ldr	r0, [r3, #24]
   91810:	b320      	cbz	r0, 9185c <mw_set_timer+0x64>
   91812:	6a98      	ldr	r0, [r3, #40]	; 0x28
   91814:	b320      	cbz	r0, 91860 <mw_set_timer+0x68>
   91816:	6b98      	ldr	r0, [r3, #56]	; 0x38
   91818:	b320      	cbz	r0, 91864 <mw_set_timer+0x6c>
   9181a:	6c98      	ldr	r0, [r3, #72]	; 0x48
   9181c:	b320      	cbz	r0, 91868 <mw_set_timer+0x70>
   9181e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   91820:	b320      	cbz	r0, 9186c <mw_set_timer+0x74>
   91822:	6e98      	ldr	r0, [r3, #104]	; 0x68
   91824:	b170      	cbz	r0, 91844 <mw_set_timer+0x4c>
   91826:	6f98      	ldr	r0, [r3, #120]	; 0x78
   91828:	b310      	cbz	r0, 91870 <mw_set_timer+0x78>
	MW_ASSERT((bool)false, "No space to add timer");
   9182a:	f241 5229 	movw	r2, #5417	; 0x1529
   9182e:	4b13      	ldr	r3, [pc, #76]	; (9187c <mw_set_timer+0x84>)
   91830:	4913      	ldr	r1, [pc, #76]	; (91880 <mw_set_timer+0x88>)
   91832:	2000      	movs	r0, #0
   91834:	4c13      	ldr	r4, [pc, #76]	; (91884 <mw_set_timer+0x8c>)
   91836:	47a0      	blx	r4
	return (MW_INVALID_HANDLE);
   91838:	2000      	movs	r0, #0
   9183a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MW_ASSERT((bool)false, "Illegal timer recipient type");
   9183c:	4b12      	ldr	r3, [pc, #72]	; (91888 <mw_set_timer+0x90>)
   9183e:	f241 5209 	movw	r2, #5385	; 0x1509
   91842:	e7f5      	b.n	91830 <mw_set_timer+0x38>
		if (mw_all_timers[i].timer_handle == MW_INVALID_HANDLE)
   91844:	2006      	movs	r0, #6
	next_handle++;
   91846:	4f11      	ldr	r7, [pc, #68]	; (9188c <mw_set_timer+0x94>)
			mw_all_timers[i].next_fire_time = fire_time;
   91848:	0105      	lsls	r5, r0, #4
	next_handle++;
   9184a:	6838      	ldr	r0, [r7, #0]
			mw_all_timers[i].next_fire_time = fire_time;
   9184c:	195e      	adds	r6, r3, r5
	next_handle++;
   9184e:	3001      	adds	r0, #1
			mw_all_timers[i].next_fire_time = fire_time;
   91850:	515c      	str	r4, [r3, r5]
			mw_all_timers[i].recipient_handle = recipient_handle;
   91852:	6071      	str	r1, [r6, #4]
			mw_all_timers[i].recipient_type = recipient_type;
   91854:	7332      	strb	r2, [r6, #12]
			mw_all_timers[i].timer_handle = get_next_handle();
   91856:	60b0      	str	r0, [r6, #8]
	next_handle++;
   91858:	6038      	str	r0, [r7, #0]
			return (mw_all_timers[i].timer_handle);
   9185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (mw_all_timers[i].timer_handle == MW_INVALID_HANDLE)
   9185c:	2001      	movs	r0, #1
   9185e:	e7f2      	b.n	91846 <mw_set_timer+0x4e>
   91860:	2002      	movs	r0, #2
   91862:	e7f0      	b.n	91846 <mw_set_timer+0x4e>
   91864:	2003      	movs	r0, #3
   91866:	e7ee      	b.n	91846 <mw_set_timer+0x4e>
   91868:	2004      	movs	r0, #4
   9186a:	e7ec      	b.n	91846 <mw_set_timer+0x4e>
   9186c:	2005      	movs	r0, #5
   9186e:	e7ea      	b.n	91846 <mw_set_timer+0x4e>
   91870:	2007      	movs	r0, #7
   91872:	e7e8      	b.n	91846 <mw_set_timer+0x4e>
   91874:	20072f98 	.word	0x20072f98
   91878:	20071b58 	.word	0x20071b58
   9187c:	000ab94c 	.word	0x000ab94c
   91880:	000ab6f0 	.word	0x000ab6f0
   91884:	00095add 	.word	0x00095add
   91888:	000ab92c 	.word	0x000ab92c
   9188c:	2007023c 	.word	0x2007023c

00091890 <mw_cancel_timer>:
	if (timer_handle == MW_INVALID_HANDLE)
   91890:	2800      	cmp	r0, #0
   91892:	d045      	beq.n	91920 <mw_cancel_timer+0x90>
		if (mw_all_timers[i].timer_handle == timer_handle)
   91894:	4b2a      	ldr	r3, [pc, #168]	; (91940 <mw_cancel_timer+0xb0>)
   91896:	689a      	ldr	r2, [r3, #8]
   91898:	4290      	cmp	r0, r2
   9189a:	d042      	beq.n	91922 <mw_cancel_timer+0x92>
   9189c:	699a      	ldr	r2, [r3, #24]
   9189e:	4290      	cmp	r0, r2
   918a0:	d043      	beq.n	9192a <mw_cancel_timer+0x9a>
   918a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   918a4:	4290      	cmp	r0, r2
   918a6:	d03e      	beq.n	91926 <mw_cancel_timer+0x96>
   918a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   918aa:	4290      	cmp	r0, r2
   918ac:	d03f      	beq.n	9192e <mw_cancel_timer+0x9e>
   918ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   918b0:	4290      	cmp	r0, r2
   918b2:	d02f      	beq.n	91914 <mw_cancel_timer+0x84>
   918b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   918b6:	4290      	cmp	r0, r2
   918b8:	d03b      	beq.n	91932 <mw_cancel_timer+0xa2>
   918ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   918bc:	4290      	cmp	r0, r2
   918be:	d03a      	beq.n	91936 <mw_cancel_timer+0xa6>
   918c0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   918c2:	4290      	cmp	r0, r2
   918c4:	d039      	beq.n	9193a <mw_cancel_timer+0xaa>
{
   918c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   918ca:	4682      	mov	sl, r0
		if (mw_all_timers[i].timer_handle == timer_handle)
   918cc:	2400      	movs	r4, #0
   918ce:	f8df 907c 	ldr.w	r9, [pc, #124]	; 9194c <mw_cancel_timer+0xbc>
   918d2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 91950 <mw_cancel_timer+0xc0>
		MW_ASSERT(message != (void*)0, "Null message found in queue");
   918d6:	4f1b      	ldr	r7, [pc, #108]	; (91944 <mw_cancel_timer+0xb4>)
   918d8:	4e1b      	ldr	r6, [pc, #108]	; (91948 <mw_cancel_timer+0xb8>)
   918da:	e001      	b.n	918e0 <mw_cancel_timer+0x50>
	for (i = 0U; i < MW_MESSAGE_QUEUE_SIZE; i++)
   918dc:	2c64      	cmp	r4, #100	; 0x64
   918de:	d017      	beq.n	91910 <mw_cancel_timer+0x80>
		message = mw_message_queue_get_ref_to_item_at_position(i);
   918e0:	b2e0      	uxtb	r0, r4
   918e2:	47c8      	blx	r9
		MW_ASSERT(message != (void*)0, "Null message found in queue");
   918e4:	4605      	mov	r5, r0
   918e6:	3000      	adds	r0, #0
   918e8:	bf18      	it	ne
   918ea:	2001      	movne	r0, #1
   918ec:	463b      	mov	r3, r7
   918ee:	f241 5247 	movw	r2, #5447	; 0x1547
   918f2:	4631      	mov	r1, r6
   918f4:	3401      	adds	r4, #1
   918f6:	47c0      	blx	r8
		if (message != (void*)0)
   918f8:	2d00      	cmp	r5, #0
   918fa:	d0ef      	beq.n	918dc <mw_cancel_timer+0x4c>
			if (message->message_id == MW_TIMER_MESSAGE && message->message_data == timer_handle)
   918fc:	7a2b      	ldrb	r3, [r5, #8]
   918fe:	2b19      	cmp	r3, #25
   91900:	d1ec      	bne.n	918dc <mw_cancel_timer+0x4c>
   91902:	68eb      	ldr	r3, [r5, #12]
   91904:	459a      	cmp	sl, r3
				message->message_recipient_type = MW_CANCELLED_MESSAGE;
   91906:	bf04      	itt	eq
   91908:	2303      	moveq	r3, #3
   9190a:	726b      	strbeq	r3, [r5, #9]
	for (i = 0U; i < MW_MESSAGE_QUEUE_SIZE; i++)
   9190c:	2c64      	cmp	r4, #100	; 0x64
   9190e:	d1e7      	bne.n	918e0 <mw_cancel_timer+0x50>
   91910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (mw_all_timers[i].timer_handle == timer_handle)
   91914:	2104      	movs	r1, #4
		mw_all_timers[timer_id].timer_handle = MW_INVALID_HANDLE;
   91916:	2200      	movs	r2, #0
   91918:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   9191c:	609a      	str	r2, [r3, #8]
		return;
   9191e:	4770      	bx	lr
   91920:	4770      	bx	lr
		if (mw_all_timers[i].timer_handle == timer_handle)
   91922:	2100      	movs	r1, #0
   91924:	e7f7      	b.n	91916 <mw_cancel_timer+0x86>
   91926:	2102      	movs	r1, #2
   91928:	e7f5      	b.n	91916 <mw_cancel_timer+0x86>
   9192a:	2101      	movs	r1, #1
   9192c:	e7f3      	b.n	91916 <mw_cancel_timer+0x86>
   9192e:	2103      	movs	r1, #3
   91930:	e7f1      	b.n	91916 <mw_cancel_timer+0x86>
   91932:	2105      	movs	r1, #5
   91934:	e7ef      	b.n	91916 <mw_cancel_timer+0x86>
   91936:	2106      	movs	r1, #6
   91938:	e7ed      	b.n	91916 <mw_cancel_timer+0x86>
   9193a:	2107      	movs	r1, #7
   9193c:	e7eb      	b.n	91916 <mw_cancel_timer+0x86>
   9193e:	bf00      	nop
   91940:	20071b58 	.word	0x20071b58
   91944:	000ab910 	.word	0x000ab910
   91948:	000ab700 	.word	0x000ab700
   9194c:	00095cd5 	.word	0x00095cd5
   91950:	00095add 	.word	0x00095add

00091954 <mw_post_message>:
{
   91954:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   91958:	b086      	sub	sp, #24
   9195a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
   9195e:	4681      	mov	r9, r0
   91960:	460f      	mov	r7, r1
   91962:	4614      	mov	r4, r2
   91964:	4698      	mov	r8, r3
	if (recipient_type == MW_WINDOW_MESSAGE)
   91966:	b9f6      	cbnz	r6, 919a6 <mw_post_message+0x52>
	if (window_handle == MW_INVALID_HANDLE)
   91968:	2a00      	cmp	r2, #0
   9196a:	d12f      	bne.n	919cc <mw_post_message+0x78>
   9196c:	260e      	movs	r6, #14
   9196e:	4610      	mov	r0, r2
   91970:	4d78      	ldr	r5, [pc, #480]	; (91b54 <mw_post_message+0x200>)
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   91972:	4b79      	ldr	r3, [pc, #484]	; (91b58 <mw_post_message+0x204>)
   91974:	f241 5262 	movw	r2, #5474	; 0x1562
   91978:	4978      	ldr	r1, [pc, #480]	; (91b5c <mw_post_message+0x208>)
   9197a:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 91b6c <mw_post_message+0x218>
   9197e:	47d8      	blx	fp
	new_message.message_recipient_type = recipient_type;
   91980:	2200      	movs	r2, #0
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   91982:	eb05 1586 	add.w	r5, r5, r6, lsl #6
   91986:	68eb      	ldr	r3, [r5, #12]
	new_message.message_pointer = message_pointer;
   91988:	990e      	ldr	r1, [sp, #56]	; 0x38
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   9198a:	0698      	lsls	r0, r3, #26
	new_message.message_id = message_id;
   9198c:	f88d 900c 	strb.w	r9, [sp, #12]
	new_message.message_data = message_data;
   91990:	f8cd 8010 	str.w	r8, [sp, #16]
	new_message.recipient_handle = recipient_handle;
   91994:	9402      	str	r4, [sp, #8]
	new_message.sender_handle = sender_handle;
   91996:	9701      	str	r7, [sp, #4]
	new_message.message_pointer = message_pointer;
   91998:	9105      	str	r1, [sp, #20]
	new_message.message_recipient_type = recipient_type;
   9199a:	f88d 200d 	strb.w	r2, [sp, #13]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   9199e:	d40f      	bmi.n	919c0 <mw_post_message+0x6c>
}
   919a0:	b006      	add	sp, #24
   919a2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	else if (recipient_type == MW_CONTROL_MESSAGE)
   919a6:	2e01      	cmp	r6, #1
   919a8:	d04a      	beq.n	91a40 <mw_post_message+0xec>
	new_message.message_data = message_data;
   919aa:	9304      	str	r3, [sp, #16]
	new_message.message_pointer = message_pointer;
   919ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   919ae:	2e02      	cmp	r6, #2
	new_message.message_id = message_id;
   919b0:	f88d 000c 	strb.w	r0, [sp, #12]
	new_message.message_recipient_type = recipient_type;
   919b4:	f88d 600d 	strb.w	r6, [sp, #13]
	new_message.recipient_handle = recipient_handle;
   919b8:	9202      	str	r2, [sp, #8]
	new_message.sender_handle = sender_handle;
   919ba:	9101      	str	r1, [sp, #4]
	new_message.message_pointer = message_pointer;
   919bc:	9305      	str	r3, [sp, #20]
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   919be:	d102      	bne.n	919c6 <mw_post_message+0x72>
		(void)mw_message_queue_insert(&new_message);
   919c0:	a801      	add	r0, sp, #4
   919c2:	4b67      	ldr	r3, [pc, #412]	; (91b60 <mw_post_message+0x20c>)
   919c4:	4798      	blx	r3
}
   919c6:	b006      	add	sp, #24
   919c8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		if (mw_all_windows[i].window_handle == window_handle &&
   919cc:	4d61      	ldr	r5, [pc, #388]	; (91b54 <mw_post_message+0x200>)
   919ce:	696b      	ldr	r3, [r5, #20]
   919d0:	429a      	cmp	r2, r3
   919d2:	d04a      	beq.n	91a6a <mw_post_message+0x116>
   919d4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   919d6:	429c      	cmp	r4, r3
   919d8:	d04c      	beq.n	91a74 <mw_post_message+0x120>
   919da:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   919de:	429c      	cmp	r4, r3
   919e0:	d04d      	beq.n	91a7e <mw_post_message+0x12a>
   919e2:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   919e6:	429c      	cmp	r4, r3
   919e8:	d04f      	beq.n	91a8a <mw_post_message+0x136>
   919ea:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
   919ee:	429c      	cmp	r4, r3
   919f0:	d051      	beq.n	91a96 <mw_post_message+0x142>
   919f2:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   919f6:	429c      	cmp	r4, r3
   919f8:	d053      	beq.n	91aa2 <mw_post_message+0x14e>
   919fa:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
   919fe:	429c      	cmp	r4, r3
   91a00:	d055      	beq.n	91aae <mw_post_message+0x15a>
   91a02:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   91a06:	429c      	cmp	r4, r3
   91a08:	d057      	beq.n	91aba <mw_post_message+0x166>
   91a0a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
   91a0e:	429c      	cmp	r4, r3
   91a10:	d059      	beq.n	91ac6 <mw_post_message+0x172>
   91a12:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
   91a16:	429c      	cmp	r4, r3
   91a18:	d05b      	beq.n	91ad2 <mw_post_message+0x17e>
   91a1a:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
   91a1e:	429c      	cmp	r4, r3
   91a20:	d05d      	beq.n	91ade <mw_post_message+0x18a>
   91a22:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
   91a26:	429c      	cmp	r4, r3
   91a28:	d05f      	beq.n	91aea <mw_post_message+0x196>
   91a2a:	f8d5 3314 	ldr.w	r3, [r5, #788]	; 0x314
   91a2e:	429c      	cmp	r4, r3
   91a30:	d061      	beq.n	91af6 <mw_post_message+0x1a2>
   91a32:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
   91a36:	429c      	cmp	r4, r3
   91a38:	d063      	beq.n	91b02 <mw_post_message+0x1ae>
   91a3a:	260e      	movs	r6, #14
   91a3c:	2000      	movs	r0, #0
   91a3e:	e798      	b.n	91972 <mw_post_message+0x1e>
	if (control_handle == MW_INVALID_HANDLE)
   91a40:	2a00      	cmp	r2, #0
   91a42:	d067      	beq.n	91b14 <mw_post_message+0x1c0>
   91a44:	4e47      	ldr	r6, [pc, #284]	; (91b64 <mw_post_message+0x210>)
   91a46:	2300      	movs	r3, #0
   91a48:	4632      	mov	r2, r6
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   91a4a:	8b91      	ldrh	r1, [r2, #28]
   91a4c:	461d      	mov	r5, r3
   91a4e:	0749      	lsls	r1, r1, #29
   91a50:	f103 0301 	add.w	r3, r3, #1
   91a54:	d502      	bpl.n	91a5c <mw_post_message+0x108>
   91a56:	6991      	ldr	r1, [r2, #24]
   91a58:	428c      	cmp	r4, r1
   91a5a:	d079      	beq.n	91b50 <mw_post_message+0x1fc>
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   91a5c:	2b18      	cmp	r3, #24
   91a5e:	f102 0220 	add.w	r2, r2, #32
   91a62:	d1f2      	bne.n	91a4a <mw_post_message+0xf6>
   91a64:	461d      	mov	r5, r3
   91a66:	2000      	movs	r0, #0
   91a68:	e057      	b.n	91b1a <mw_post_message+0x1c6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91a6a:	68eb      	ldr	r3, [r5, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   91a6c:	069a      	lsls	r2, r3, #26
   91a6e:	d5b1      	bpl.n	919d4 <mw_post_message+0x80>
   91a70:	2001      	movs	r0, #1
   91a72:	e77e      	b.n	91972 <mw_post_message+0x1e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91a74:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   91a76:	069b      	lsls	r3, r3, #26
   91a78:	d5af      	bpl.n	919da <mw_post_message+0x86>
   91a7a:	2601      	movs	r6, #1
   91a7c:	e7f8      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91a7e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   91a82:	069e      	lsls	r6, r3, #26
   91a84:	d5ad      	bpl.n	919e2 <mw_post_message+0x8e>
   91a86:	2602      	movs	r6, #2
   91a88:	e7f2      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91a8a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   91a8e:	0698      	lsls	r0, r3, #26
   91a90:	d5ab      	bpl.n	919ea <mw_post_message+0x96>
   91a92:	2603      	movs	r6, #3
   91a94:	e7ec      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91a96:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   91a9a:	0699      	lsls	r1, r3, #26
   91a9c:	d5a9      	bpl.n	919f2 <mw_post_message+0x9e>
   91a9e:	2604      	movs	r6, #4
   91aa0:	e7e6      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91aa2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   91aa6:	069a      	lsls	r2, r3, #26
   91aa8:	d5a7      	bpl.n	919fa <mw_post_message+0xa6>
   91aaa:	2605      	movs	r6, #5
   91aac:	e7e0      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91aae:	f8d5 318c 	ldr.w	r3, [r5, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   91ab2:	069b      	lsls	r3, r3, #26
   91ab4:	d5a5      	bpl.n	91a02 <mw_post_message+0xae>
   91ab6:	2606      	movs	r6, #6
   91ab8:	e7da      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91aba:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   91abe:	069e      	lsls	r6, r3, #26
   91ac0:	d5a3      	bpl.n	91a0a <mw_post_message+0xb6>
   91ac2:	2607      	movs	r6, #7
   91ac4:	e7d4      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91ac6:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   91aca:	0698      	lsls	r0, r3, #26
   91acc:	d5a1      	bpl.n	91a12 <mw_post_message+0xbe>
   91ace:	2608      	movs	r6, #8
   91ad0:	e7ce      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91ad2:	f8d5 324c 	ldr.w	r3, [r5, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   91ad6:	0699      	lsls	r1, r3, #26
   91ad8:	d59f      	bpl.n	91a1a <mw_post_message+0xc6>
   91ada:	2609      	movs	r6, #9
   91adc:	e7c8      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91ade:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   91ae2:	069a      	lsls	r2, r3, #26
   91ae4:	d59d      	bpl.n	91a22 <mw_post_message+0xce>
   91ae6:	260a      	movs	r6, #10
   91ae8:	e7c2      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91aea:	f8d5 32cc 	ldr.w	r3, [r5, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   91aee:	069b      	lsls	r3, r3, #26
   91af0:	d59b      	bpl.n	91a2a <mw_post_message+0xd6>
   91af2:	260b      	movs	r6, #11
   91af4:	e7bc      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91af6:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   91afa:	069e      	lsls	r6, r3, #26
   91afc:	d599      	bpl.n	91a32 <mw_post_message+0xde>
   91afe:	260c      	movs	r6, #12
   91b00:	e7b6      	b.n	91a70 <mw_post_message+0x11c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   91b02:	f8d5 034c 	ldr.w	r0, [r5, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   91b06:	f010 0020 	ands.w	r0, r0, #32
   91b0a:	bf18      	it	ne
   91b0c:	260d      	movne	r6, #13
   91b0e:	d1af      	bne.n	91a70 <mw_post_message+0x11c>
   91b10:	260e      	movs	r6, #14
   91b12:	e72e      	b.n	91972 <mw_post_message+0x1e>
	if (control_handle == MW_INVALID_HANDLE)
   91b14:	2518      	movs	r5, #24
   91b16:	4610      	mov	r0, r2
   91b18:	4e12      	ldr	r6, [pc, #72]	; (91b64 <mw_post_message+0x210>)
		MW_ASSERT(recipient_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   91b1a:	4b13      	ldr	r3, [pc, #76]	; (91b68 <mw_post_message+0x214>)
   91b1c:	f241 5267 	movw	r2, #5479	; 0x1567
   91b20:	490e      	ldr	r1, [pc, #56]	; (91b5c <mw_post_message+0x208>)
   91b22:	f8df b048 	ldr.w	fp, [pc, #72]	; 91b6c <mw_post_message+0x218>
   91b26:	47d8      	blx	fp
	new_message.message_recipient_type = recipient_type;
   91b28:	2201      	movs	r2, #1
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   91b2a:	eb06 1545 	add.w	r5, r6, r5, lsl #5
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   91b2e:	8bab      	ldrh	r3, [r5, #28]
	new_message.message_pointer = message_pointer;
   91b30:	990e      	ldr	r1, [sp, #56]	; 0x38
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   91b32:	075b      	lsls	r3, r3, #29
	new_message.message_id = message_id;
   91b34:	f88d 900c 	strb.w	r9, [sp, #12]
	new_message.message_data = message_data;
   91b38:	f8cd 8010 	str.w	r8, [sp, #16]
	new_message.recipient_handle = recipient_handle;
   91b3c:	9402      	str	r4, [sp, #8]
	new_message.sender_handle = sender_handle;
   91b3e:	9701      	str	r7, [sp, #4]
	new_message.message_pointer = message_pointer;
   91b40:	9105      	str	r1, [sp, #20]
	new_message.message_recipient_type = recipient_type;
   91b42:	f88d 200d 	strb.w	r2, [sp, #13]
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   91b46:	f53f af3b 	bmi.w	919c0 <mw_post_message+0x6c>
}
   91b4a:	b006      	add	sp, #24
   91b4c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   91b50:	2001      	movs	r0, #1
   91b52:	e7e2      	b.n	91b1a <mw_post_message+0x1c6>
   91b54:	20071bd8 	.word	0x20071bd8
   91b58:	000ab764 	.word	0x000ab764
   91b5c:	000ab710 	.word	0x000ab710
   91b60:	00095bc1 	.word	0x00095bc1
   91b64:	20071858 	.word	0x20071858
   91b68:	000ab734 	.word	0x000ab734
   91b6c:	00095add 	.word	0x00095add

00091b70 <mw_process_message>:

bool mw_process_message(void)
{
   91b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MW_ASSERT(touch_message != (void*)0, "Null pointer");
   91b74:	4bbb      	ldr	r3, [pc, #748]	; (91e64 <mw_process_message+0x2f4>)
{
   91b76:	b097      	sub	sp, #92	; 0x5c
	MW_ASSERT(touch_message != (void*)0, "Null pointer");
   91b78:	f8df 9324 	ldr.w	r9, [pc, #804]	; 91ea0 <mw_process_message+0x330>
   91b7c:	f640 32bd 	movw	r2, #3005	; 0xbbd
   91b80:	49b9      	ldr	r1, [pc, #740]	; (91e68 <mw_process_message+0x2f8>)
   91b82:	2001      	movs	r0, #1
   91b84:	47c8      	blx	r9
	MW_ASSERT(touch_x != (void*)0, "Null pointer");
   91b86:	4bb7      	ldr	r3, [pc, #732]	; (91e64 <mw_process_message+0x2f4>)
   91b88:	f640 32be 	movw	r2, #3006	; 0xbbe
   91b8c:	49b6      	ldr	r1, [pc, #728]	; (91e68 <mw_process_message+0x2f8>)
   91b8e:	2001      	movs	r0, #1
   91b90:	47c8      	blx	r9
	MW_ASSERT(touch_y != (void*)0, "Null pointer");
   91b92:	4bb4      	ldr	r3, [pc, #720]	; (91e64 <mw_process_message+0x2f4>)
   91b94:	f640 32bf 	movw	r2, #3007	; 0xbbf
   91b98:	49b3      	ldr	r1, [pc, #716]	; (91e68 <mw_process_message+0x2f8>)
   91b9a:	2001      	movs	r0, #1
   91b9c:	47c8      	blx	r9
	if (mw_tick_counter - previous_process_time < MW_TOUCH_INTERVAL_TICKS)
   91b9e:	f8df b304 	ldr.w	fp, [pc, #772]	; 91ea4 <mw_process_message+0x334>
   91ba2:	4ab2      	ldr	r2, [pc, #712]	; (91e6c <mw_process_message+0x2fc>)
   91ba4:	f8db 3000 	ldr.w	r3, [fp]
   91ba8:	6811      	ldr	r1, [r2, #0]
   91baa:	1a5b      	subs	r3, r3, r1
   91bac:	2b01      	cmp	r3, #1
   91bae:	f240 811f 	bls.w	91df0 <mw_process_message+0x280>
	previous_process_time = mw_tick_counter;
   91bb2:	f8db 4000 	ldr.w	r4, [fp]
	touch_state = mw_touch_get_display_touch(touch_x, touch_y);
   91bb6:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
   91bba:	a80b      	add	r0, sp, #44	; 0x2c
   91bbc:	4bac      	ldr	r3, [pc, #688]	; (91e70 <mw_process_message+0x300>)
	previous_process_time = mw_tick_counter;
   91bbe:	6014      	str	r4, [r2, #0]
	touch_state = mw_touch_get_display_touch(touch_x, touch_y);
   91bc0:	4798      	blx	r3
	if (touch_state == MW_HAL_TOUCH_STATE_DOWN && previous_touch_state == MW_HAL_TOUCH_STATE_UP)
   91bc2:	2800      	cmp	r0, #0
   91bc4:	f040 80f4 	bne.w	91db0 <mw_process_message+0x240>
   91bc8:	4daa      	ldr	r5, [pc, #680]	; (91e74 <mw_process_message+0x304>)
   91bca:	782b      	ldrb	r3, [r5, #0]
   91bcc:	2b01      	cmp	r3, #1
   91bce:	f000 8219 	beq.w	92004 <mw_process_message+0x494>
		difference_x = *touch_x - previous_touch_x;
   91bd2:	4fa9      	ldr	r7, [pc, #676]	; (91e78 <mw_process_message+0x308>)
   91bd4:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   91bd8:	883c      	ldrh	r4, [r7, #0]
		difference_y = *touch_y - previous_touch_y;
   91bda:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 91ea8 <mw_process_message+0x338>
		difference_x = *touch_x - previous_touch_x;
   91bde:	1b0c      	subs	r4, r1, r4
   91be0:	b2a4      	uxth	r4, r4
		abs_difference_x = (int16_t)abs((int16_t)difference_x);
   91be2:	b222      	sxth	r2, r4
   91be4:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   91be8:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
		difference_y = *touch_y - previous_touch_y;
   91bec:	f8be 6000 	ldrh.w	r6, [lr]
   91bf0:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
		if (abs_difference_x > MW_DRAG_THRESHOLD_PIXELS || abs_difference_y > MW_DRAG_THRESHOLD_PIXELS)
   91bf4:	b21b      	sxth	r3, r3
		difference_y = *touch_y - previous_touch_y;
   91bf6:	1b96      	subs	r6, r2, r6
		if (abs_difference_x > MW_DRAG_THRESHOLD_PIXELS || abs_difference_y > MW_DRAG_THRESHOLD_PIXELS)
   91bf8:	2b02      	cmp	r3, #2
	previous_touch_state = touch_state;
   91bfa:	7028      	strb	r0, [r5, #0]
		difference_y = *touch_y - previous_touch_y;
   91bfc:	b2b6      	uxth	r6, r6
		if (abs_difference_x > MW_DRAG_THRESHOLD_PIXELS || abs_difference_y > MW_DRAG_THRESHOLD_PIXELS)
   91bfe:	f340 8571 	ble.w	926e4 <mw_process_message+0xb74>
		if (window_redimensioning_state == WINDOW_BEING_MOVED)
   91c02:	4d9e      	ldr	r5, [pc, #632]	; (91e7c <mw_process_message+0x30c>)
			previous_touch_x = *touch_x;
   91c04:	8039      	strh	r1, [r7, #0]
		if (window_redimensioning_state == WINDOW_BEING_MOVED)
   91c06:	782f      	ldrb	r7, [r5, #0]
			previous_touch_y = *touch_y;
   91c08:	f8ae 2000 	strh.w	r2, [lr]
		if (window_redimensioning_state == WINDOW_BEING_MOVED)
   91c0c:	2f01      	cmp	r7, #1
   91c0e:	f001 86fd 	beq.w	93a0c <mw_process_message+0x1e9c>
		if (window_redimensioning_state == WINDOW_BEING_RESIZED)
   91c12:	2f00      	cmp	r7, #0
   91c14:	f001 83ea 	beq.w	933ec <mw_process_message+0x187c>
		*touch_message = MW_TOUCH_DRAG_MESSAGE;
   91c18:	2317      	movs	r3, #23
   91c1a:	9302      	str	r3, [sp, #8]
	if (touch_message_target.touch_down_recipient_handle != MW_INVALID_HANDLE)
   91c1c:	4c98      	ldr	r4, [pc, #608]	; (91e80 <mw_process_message+0x310>)
   91c1e:	6863      	ldr	r3, [r4, #4]
   91c20:	2b00      	cmp	r3, #0
   91c22:	f000 81e9 	beq.w	91ff8 <mw_process_message+0x488>
		if (touch_message_target.touch_down_recipient_type == TOUCH_DOWN_RECIPIENT_TYPE_WINDOW_CLIENT)
   91c26:	7827      	ldrb	r7, [r4, #0]
   91c28:	2f00      	cmp	r7, #0
   91c2a:	f040 84db 	bne.w	925e4 <mw_process_message+0xa74>
		if (mw_all_windows[i].window_handle == window_handle &&
   91c2e:	f8df a25c 	ldr.w	sl, [pc, #604]	; 91e8c <mw_process_message+0x31c>
   91c32:	f8da 0014 	ldr.w	r0, [sl, #20]
   91c36:	4283      	cmp	r3, r0
   91c38:	f001 84f2 	beq.w	93620 <mw_process_message+0x1ab0>
   91c3c:	f8da 7054 	ldr.w	r7, [sl, #84]	; 0x54
   91c40:	42bb      	cmp	r3, r7
   91c42:	f001 85ba 	beq.w	937ba <mw_process_message+0x1c4a>
   91c46:	f8da 7094 	ldr.w	r7, [sl, #148]	; 0x94
   91c4a:	42bb      	cmp	r3, r7
   91c4c:	f001 85ca 	beq.w	937e4 <mw_process_message+0x1c74>
   91c50:	f8da 70d4 	ldr.w	r7, [sl, #212]	; 0xd4
   91c54:	42bb      	cmp	r3, r7
   91c56:	f001 85cd 	beq.w	937f4 <mw_process_message+0x1c84>
   91c5a:	f8da 7114 	ldr.w	r7, [sl, #276]	; 0x114
   91c5e:	42bb      	cmp	r3, r7
   91c60:	f001 85d0 	beq.w	93804 <mw_process_message+0x1c94>
   91c64:	f8da 7154 	ldr.w	r7, [sl, #340]	; 0x154
   91c68:	42bb      	cmp	r3, r7
   91c6a:	f001 85d3 	beq.w	93814 <mw_process_message+0x1ca4>
   91c6e:	f8da 7194 	ldr.w	r7, [sl, #404]	; 0x194
   91c72:	42bb      	cmp	r3, r7
   91c74:	f001 85d6 	beq.w	93824 <mw_process_message+0x1cb4>
   91c78:	f8da 71d4 	ldr.w	r7, [sl, #468]	; 0x1d4
   91c7c:	42bb      	cmp	r3, r7
   91c7e:	f001 85d9 	beq.w	93834 <mw_process_message+0x1cc4>
   91c82:	f8da 7214 	ldr.w	r7, [sl, #532]	; 0x214
   91c86:	42bb      	cmp	r3, r7
   91c88:	f001 85df 	beq.w	9384a <mw_process_message+0x1cda>
   91c8c:	f8da 7254 	ldr.w	r7, [sl, #596]	; 0x254
   91c90:	42bb      	cmp	r3, r7
   91c92:	f001 85e2 	beq.w	9385a <mw_process_message+0x1cea>
   91c96:	f8da 7294 	ldr.w	r7, [sl, #660]	; 0x294
   91c9a:	42bb      	cmp	r3, r7
   91c9c:	f001 85e5 	beq.w	9386a <mw_process_message+0x1cfa>
   91ca0:	f8da 72d4 	ldr.w	r7, [sl, #724]	; 0x2d4
   91ca4:	42bb      	cmp	r3, r7
   91ca6:	f001 85e8 	beq.w	9387a <mw_process_message+0x1d0a>
   91caa:	f8da 7314 	ldr.w	r7, [sl, #788]	; 0x314
   91cae:	42bb      	cmp	r3, r7
   91cb0:	f001 85f0 	beq.w	93894 <mw_process_message+0x1d24>
   91cb4:	f8da 7354 	ldr.w	r7, [sl, #852]	; 0x354
   91cb8:	42bb      	cmp	r3, r7
   91cba:	f001 85f3 	beq.w	938a4 <mw_process_message+0x1d34>
   91cbe:	ae10      	add	r6, sp, #64	; 0x40
		touch_message_target.touch_down_recipient_handle = MW_INVALID_HANDLE;
   91cc0:	2300      	movs	r3, #0
   91cc2:	6063      	str	r3, [r4, #4]
   91cc4:	782b      	ldrb	r3, [r5, #0]

	/* handle any outstanding touch screen events */
	process_touch();

	/* only process timer event if not redimensioning a window */
	if (window_redimensioning_state == WINDOW_NOT_BEING_REDIMENSIONED)
   91cc6:	2b02      	cmp	r3, #2
   91cc8:	d17b      	bne.n	91dc2 <mw_process_message+0x252>
	{
		/* process system timer */
		if ((mw_tick_counter >= system_timer.next_fire_time) && (system_timer.next_fire_time > 0U))
   91cca:	4c6e      	ldr	r4, [pc, #440]	; (91e84 <mw_process_message+0x314>)
   91ccc:	f8db 1000 	ldr.w	r1, [fp]
   91cd0:	6822      	ldr	r2, [r4, #0]
   91cd2:	428a      	cmp	r2, r1
   91cd4:	f240 8153 	bls.w	91f7e <mw_process_message+0x40e>
   91cd8:	4c6b      	ldr	r4, [pc, #428]	; (91e88 <mw_process_message+0x318>)
					}
				}
				else
				{
					/* bad recipient type */
					MW_ASSERT((bool)false, "Illegal timer recipient type");
   91cda:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 91eac <mw_process_message+0x33c>
   91cde:	f104 0580 	add.w	r5, r4, #128	; 0x80
			if (mw_tick_counter >= mw_all_timers[i].next_fire_time && mw_all_timers[i].timer_handle != MW_INVALID_HANDLE)
   91ce2:	f8db 3000 	ldr.w	r3, [fp]
   91ce6:	6822      	ldr	r2, [r4, #0]
   91ce8:	429a      	cmp	r2, r3
   91cea:	d855      	bhi.n	91d98 <mw_process_message+0x228>
   91cec:	68a3      	ldr	r3, [r4, #8]
   91cee:	2b00      	cmp	r3, #0
   91cf0:	d052      	beq.n	91d98 <mw_process_message+0x228>
				if (mw_all_timers[i].recipient_type == MW_WINDOW_MESSAGE)
   91cf2:	7b22      	ldrb	r2, [r4, #12]
   91cf4:	2a00      	cmp	r2, #0
   91cf6:	d17f      	bne.n	91df8 <mw_process_message+0x288>
					window_id = get_window_id_for_handle(mw_all_timers[i].recipient_handle);
   91cf8:	6863      	ldr	r3, [r4, #4]
	if (window_handle == MW_INVALID_HANDLE)
   91cfa:	2b00      	cmp	r3, #0
   91cfc:	d044      	beq.n	91d88 <mw_process_message+0x218>
		if (mw_all_windows[i].window_handle == window_handle &&
   91cfe:	4f63      	ldr	r7, [pc, #396]	; (91e8c <mw_process_message+0x31c>)
   91d00:	6979      	ldr	r1, [r7, #20]
   91d02:	428b      	cmp	r3, r1
   91d04:	f001 838d 	beq.w	93422 <mw_process_message+0x18b2>
   91d08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   91d0a:	4293      	cmp	r3, r2
   91d0c:	f001 8390 	beq.w	93430 <mw_process_message+0x18c0>
   91d10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   91d14:	4293      	cmp	r3, r2
   91d16:	f001 8393 	beq.w	93440 <mw_process_message+0x18d0>
   91d1a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
   91d1e:	4293      	cmp	r3, r2
   91d20:	f001 8397 	beq.w	93452 <mw_process_message+0x18e2>
   91d24:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   91d28:	4293      	cmp	r3, r2
   91d2a:	f001 839b 	beq.w	93464 <mw_process_message+0x18f4>
   91d2e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
   91d32:	4293      	cmp	r3, r2
   91d34:	f001 839f 	beq.w	93476 <mw_process_message+0x1906>
   91d38:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
   91d3c:	4293      	cmp	r3, r2
   91d3e:	f001 83a3 	beq.w	93488 <mw_process_message+0x1918>
   91d42:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
   91d46:	4293      	cmp	r3, r2
   91d48:	f001 83a7 	beq.w	9349a <mw_process_message+0x192a>
   91d4c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
   91d50:	4293      	cmp	r3, r2
   91d52:	f001 83ab 	beq.w	934ac <mw_process_message+0x193c>
   91d56:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
   91d5a:	4293      	cmp	r3, r2
   91d5c:	f001 83af 	beq.w	934be <mw_process_message+0x194e>
   91d60:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
   91d64:	4293      	cmp	r3, r2
   91d66:	f001 83b3 	beq.w	934d0 <mw_process_message+0x1960>
   91d6a:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
   91d6e:	4293      	cmp	r3, r2
   91d70:	f001 83b7 	beq.w	934e2 <mw_process_message+0x1972>
   91d74:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
   91d78:	4293      	cmp	r3, r2
   91d7a:	f001 83bb 	beq.w	934f4 <mw_process_message+0x1984>
   91d7e:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
   91d82:	4293      	cmp	r3, r2
   91d84:	f000 84ca 	beq.w	9271c <mw_process_message+0xbac>
					MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   91d88:	4b41      	ldr	r3, [pc, #260]	; (91e90 <mw_process_message+0x320>)
   91d8a:	f241 52bc 	movw	r2, #5564	; 0x15bc
   91d8e:	4651      	mov	r1, sl
   91d90:	2000      	movs	r0, #0
   91d92:	47c8      	blx	r9
				}

				/* timers are one shot so mark this timer as unused again */
				mw_all_timers[i].timer_handle = MW_INVALID_HANDLE;
   91d94:	2300      	movs	r3, #0
   91d96:	60a3      	str	r3, [r4, #8]
   91d98:	3410      	adds	r4, #16
		for (i = 0U; i < MW_MAX_TIMER_COUNT; i++)
   91d9a:	42a5      	cmp	r5, r4
   91d9c:	d1a1      	bne.n	91ce2 <mw_process_message+0x172>
			}
		}
	}

	/* handle next window message in the message queue if there is one */
	if (mw_message_queue_remove(&message))
   91d9e:	4630      	mov	r0, r6
   91da0:	4b3c      	ldr	r3, [pc, #240]	; (91e94 <mw_process_message+0x324>)
   91da2:	4798      	blx	r3
   91da4:	4683      	mov	fp, r0
   91da6:	b990      	cbnz	r0, 91dce <mw_process_message+0x25e>
	}
	else
	{
		return (false);
	}
}
   91da8:	4658      	mov	r0, fp
   91daa:	b017      	add	sp, #92	; 0x5c
   91dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (touch_state == MW_HAL_TOUCH_STATE_UP && previous_touch_state == MW_HAL_TOUCH_STATE_DOWN)
   91db0:	2801      	cmp	r0, #1
   91db2:	4b30      	ldr	r3, [pc, #192]	; (91e74 <mw_process_message+0x304>)
   91db4:	d02a      	beq.n	91e0c <mw_process_message+0x29c>
   91db6:	4a31      	ldr	r2, [pc, #196]	; (91e7c <mw_process_message+0x30c>)
	previous_touch_state = touch_state;
   91db8:	7018      	strb	r0, [r3, #0]
   91dba:	7813      	ldrb	r3, [r2, #0]
   91dbc:	ae10      	add	r6, sp, #64	; 0x40
	if (window_redimensioning_state == WINDOW_NOT_BEING_REDIMENSIONED)
   91dbe:	2b02      	cmp	r3, #2
   91dc0:	d083      	beq.n	91cca <mw_process_message+0x15a>
	if (mw_message_queue_remove(&message))
   91dc2:	4630      	mov	r0, r6
   91dc4:	4b33      	ldr	r3, [pc, #204]	; (91e94 <mw_process_message+0x324>)
   91dc6:	4798      	blx	r3
   91dc8:	4683      	mov	fp, r0
   91dca:	2800      	cmp	r0, #0
   91dcc:	d0ec      	beq.n	91da8 <mw_process_message+0x238>
		switch (message.message_recipient_type)
   91dce:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   91dd2:	2b03      	cmp	r3, #3
   91dd4:	f200 83ba 	bhi.w	9254c <mw_process_message+0x9dc>
   91dd8:	a201      	add	r2, pc, #4	; (adr r2, 91de0 <mw_process_message+0x270>)
   91dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91dde:	bf00      	nop
   91de0:	00091ee1 	.word	0x00091ee1
   91de4:	00091eb1 	.word	0x00091eb1
   91de8:	00091e47 	.word	0x00091e47
   91dec:	00091da9 	.word	0x00091da9
   91df0:	4b22      	ldr	r3, [pc, #136]	; (91e7c <mw_process_message+0x30c>)
   91df2:	ae10      	add	r6, sp, #64	; 0x40
   91df4:	781b      	ldrb	r3, [r3, #0]
   91df6:	e7e2      	b.n	91dbe <mw_process_message+0x24e>
				else if (mw_all_timers[i].recipient_type == MW_CONTROL_MESSAGE)
   91df8:	2a01      	cmp	r2, #1
   91dfa:	f000 80db 	beq.w	91fb4 <mw_process_message+0x444>
					MW_ASSERT((bool)false, "Illegal timer recipient type");
   91dfe:	4b26      	ldr	r3, [pc, #152]	; (91e98 <mw_process_message+0x328>)
   91e00:	f241 52e8 	movw	r2, #5608	; 0x15e8
   91e04:	4651      	mov	r1, sl
   91e06:	2000      	movs	r0, #0
   91e08:	47c8      	blx	r9
   91e0a:	e7c3      	b.n	91d94 <mw_process_message+0x224>
	else if (touch_state == MW_HAL_TOUCH_STATE_UP && previous_touch_state == MW_HAL_TOUCH_STATE_DOWN)
   91e0c:	781a      	ldrb	r2, [r3, #0]
   91e0e:	2a00      	cmp	r2, #0
   91e10:	d1d1      	bne.n	91db6 <mw_process_message+0x246>
		if (window_redimensioning_state != WINDOW_NOT_BEING_REDIMENSIONED)
   91e12:	4d1a      	ldr	r5, [pc, #104]	; (91e7c <mw_process_message+0x30c>)
	previous_touch_state = touch_state;
   91e14:	7018      	strb	r0, [r3, #0]
		if (window_redimensioning_state != WINDOW_NOT_BEING_REDIMENSIONED)
   91e16:	782b      	ldrb	r3, [r5, #0]
   91e18:	2b02      	cmp	r3, #2
   91e1a:	f000 8471 	beq.w	92700 <mw_process_message+0xb90>
			window_redimensioning_state = WINDOW_NOT_BEING_REDIMENSIONED;
   91e1e:	2302      	movs	r3, #2
	new_message.sender_handle = sender_handle;
   91e20:	2700      	movs	r7, #0
   91e22:	f04f 0800 	mov.w	r8, #0
	new_message.message_id = message_id;
   91e26:	214a      	movs	r1, #74	; 0x4a
		(void)mw_message_queue_insert(&new_message);
   91e28:	ae10      	add	r6, sp, #64	; 0x40
			window_redimensioning_state = WINDOW_NOT_BEING_REDIMENSIONED;
   91e2a:	702b      	strb	r3, [r5, #0]
	new_message.message_recipient_type = recipient_type;
   91e2c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		(void)mw_message_queue_insert(&new_message);
   91e30:	4630      	mov	r0, r6
   91e32:	4b1a      	ldr	r3, [pc, #104]	; (91e9c <mw_process_message+0x32c>)
	new_message.sender_handle = sender_handle;
   91e34:	e9cd 7810 	strd	r7, r8, [sp, #64]	; 0x40
	new_message.message_data = message_data;
   91e38:	9213      	str	r2, [sp, #76]	; 0x4c
	new_message.message_pointer = message_pointer;
   91e3a:	9214      	str	r2, [sp, #80]	; 0x50
	new_message.message_id = message_id;
   91e3c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
		(void)mw_message_queue_insert(&new_message);
   91e40:	4798      	blx	r3
   91e42:	782b      	ldrb	r3, [r5, #0]
   91e44:	e7bb      	b.n	91dbe <mw_process_message+0x24e>
			switch (message.message_id)
   91e46:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   91e4a:	3b4a      	subs	r3, #74	; 0x4a
   91e4c:	2b05      	cmp	r3, #5
   91e4e:	f201 85b5 	bhi.w	939bc <mw_process_message+0x1e4c>
   91e52:	e8df f013 	tbh	[pc, r3, lsl #1]
   91e56:	0782      	.short	0x0782
   91e58:	0713077b 	.word	0x0713077b
   91e5c:	060c0611 	.word	0x060c0611
   91e60:	0606      	.short	0x0606
   91e62:	bf00      	nop
   91e64:	000a64a0 	.word	0x000a64a0
   91e68:	000ab454 	.word	0x000ab454
   91e6c:	20071f58 	.word	0x20071f58
   91e70:	00095e81 	.word	0x00095e81
   91e74:	20070240 	.word	0x20070240
   91e78:	20071f5c 	.word	0x20071f5c
   91e7c:	20071fb1 	.word	0x20071fb1
   91e80:	20071f70 	.word	0x20071f70
   91e84:	20071f64 	.word	0x20071f64
   91e88:	20071b58 	.word	0x20071b58
   91e8c:	20071bd8 	.word	0x20071bd8
   91e90:	000ab764 	.word	0x000ab764
   91e94:	00095c59 	.word	0x00095c59
   91e98:	000ab92c 	.word	0x000ab92c
   91e9c:	00095bc1 	.word	0x00095bc1
   91ea0:	00095add 	.word	0x00095add
   91ea4:	20072f98 	.word	0x20072f98
   91ea8:	20071f5e 	.word	0x20071f5e
   91eac:	000ab720 	.word	0x000ab720
			control_id = get_control_id_for_handle(message.recipient_handle);
   91eb0:	9811      	ldr	r0, [sp, #68]	; 0x44
	if (control_handle == MW_INVALID_HANDLE)
   91eb2:	2800      	cmp	r0, #0
   91eb4:	f000 83f5 	beq.w	926a2 <mw_process_message+0xb32>
   91eb8:	4fbd      	ldr	r7, [pc, #756]	; (921b0 <mw_process_message+0x640>)
   91eba:	2300      	movs	r3, #0
   91ebc:	463a      	mov	r2, r7
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   91ebe:	8b91      	ldrh	r1, [r2, #28]
   91ec0:	461c      	mov	r4, r3
   91ec2:	0749      	lsls	r1, r1, #29
   91ec4:	f103 0301 	add.w	r3, r3, #1
   91ec8:	d503      	bpl.n	91ed2 <mw_process_message+0x362>
   91eca:	6991      	ldr	r1, [r2, #24]
   91ecc:	4288      	cmp	r0, r1
   91ece:	f001 84b9 	beq.w	93844 <mw_process_message+0x1cd4>
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   91ed2:	2b18      	cmp	r3, #24
   91ed4:	f102 0220 	add.w	r2, r2, #32
   91ed8:	d1f1      	bne.n	91ebe <mw_process_message+0x34e>
   91eda:	461c      	mov	r4, r3
   91edc:	2000      	movs	r0, #0
   91ede:	e3e2      	b.n	926a6 <mw_process_message+0xb36>
			window_id = get_window_id_for_handle(message.recipient_handle);
   91ee0:	9811      	ldr	r0, [sp, #68]	; 0x44
	if (window_handle == MW_INVALID_HANDLE)
   91ee2:	2800      	cmp	r0, #0
   91ee4:	f000 83ed 	beq.w	926c2 <mw_process_message+0xb52>
		if (mw_all_windows[i].window_handle == window_handle &&
   91ee8:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 921c8 <mw_process_message+0x658>
   91eec:	f8da 3014 	ldr.w	r3, [sl, #20]
   91ef0:	4298      	cmp	r0, r3
   91ef2:	f000 87d7 	beq.w	92ea4 <mw_process_message+0x1334>
   91ef6:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   91efa:	4298      	cmp	r0, r3
   91efc:	f001 803b 	beq.w	92f76 <mw_process_message+0x1406>
   91f00:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   91f04:	4298      	cmp	r0, r3
   91f06:	f001 803f 	beq.w	92f88 <mw_process_message+0x1418>
   91f0a:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   91f0e:	4298      	cmp	r0, r3
   91f10:	f001 8043 	beq.w	92f9a <mw_process_message+0x142a>
   91f14:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   91f18:	4298      	cmp	r0, r3
   91f1a:	f001 8053 	beq.w	92fc4 <mw_process_message+0x1454>
   91f1e:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   91f22:	4298      	cmp	r0, r3
   91f24:	f001 8057 	beq.w	92fd6 <mw_process_message+0x1466>
   91f28:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   91f2c:	4298      	cmp	r0, r3
   91f2e:	f001 805b 	beq.w	92fe8 <mw_process_message+0x1478>
   91f32:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   91f36:	4298      	cmp	r0, r3
   91f38:	f001 805f 	beq.w	92ffa <mw_process_message+0x148a>
   91f3c:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   91f40:	4298      	cmp	r0, r3
   91f42:	f001 8063 	beq.w	9300c <mw_process_message+0x149c>
   91f46:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   91f4a:	4298      	cmp	r0, r3
   91f4c:	f001 8070 	beq.w	93030 <mw_process_message+0x14c0>
   91f50:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   91f54:	4298      	cmp	r0, r3
   91f56:	f001 8062 	beq.w	9301e <mw_process_message+0x14ae>
   91f5a:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   91f5e:	4298      	cmp	r0, r3
   91f60:	f001 806f 	beq.w	93042 <mw_process_message+0x14d2>
   91f64:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   91f68:	4298      	cmp	r0, r3
   91f6a:	f001 8073 	beq.w	93054 <mw_process_message+0x14e4>
   91f6e:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   91f72:	4298      	cmp	r0, r3
   91f74:	f001 8077 	beq.w	93066 <mw_process_message+0x14f6>
   91f78:	240e      	movs	r4, #14
   91f7a:	2000      	movs	r0, #0
   91f7c:	e3a4      	b.n	926c8 <mw_process_message+0xb58>
		if ((mw_tick_counter >= system_timer.next_fire_time) && (system_timer.next_fire_time > 0U))
   91f7e:	2a00      	cmp	r2, #0
   91f80:	f43f aeaa 	beq.w	91cd8 <mw_process_message+0x168>
			system_timer.next_fire_time = 0U;
   91f84:	2100      	movs	r1, #0
			switch (system_timer.system_timer_event)
   91f86:	7a25      	ldrb	r5, [r4, #8]
			system_timer.next_fire_time = 0U;
   91f88:	6021      	str	r1, [r4, #0]
			switch (system_timer.system_timer_event)
   91f8a:	2d00      	cmp	r5, #0
   91f8c:	f000 845a 	beq.w	92844 <mw_process_message+0xcd4>
   91f90:	2d01      	cmp	r5, #1
   91f92:	f47f aea1 	bne.w	91cd8 <mw_process_message+0x168>
	new_message.sender_handle = sender_handle;
   91f96:	2400      	movs	r4, #0
   91f98:	2500      	movs	r5, #0
	new_message.message_id = message_id;
   91f9a:	224a      	movs	r2, #74	; 0x4a
	new_message.message_recipient_type = recipient_type;
   91f9c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		(void)mw_message_queue_insert(&new_message);
   91fa0:	4630      	mov	r0, r6
   91fa2:	4b84      	ldr	r3, [pc, #528]	; (921b4 <mw_process_message+0x644>)
	new_message.sender_handle = sender_handle;
   91fa4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
	new_message.message_data = message_data;
   91fa8:	9113      	str	r1, [sp, #76]	; 0x4c
	new_message.message_pointer = message_pointer;
   91faa:	9114      	str	r1, [sp, #80]	; 0x50
	new_message.message_id = message_id;
   91fac:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		(void)mw_message_queue_insert(&new_message);
   91fb0:	4798      	blx	r3
   91fb2:	e691      	b.n	91cd8 <mw_process_message+0x168>
					control_id = get_control_id_for_handle(mw_all_timers[i].recipient_handle);
   91fb4:	6861      	ldr	r1, [r4, #4]
	if (control_handle == MW_INVALID_HANDLE)
   91fb6:	b191      	cbz	r1, 91fde <mw_process_message+0x46e>
   91fb8:	4f7d      	ldr	r7, [pc, #500]	; (921b0 <mw_process_message+0x640>)
   91fba:	f04f 0800 	mov.w	r8, #0
   91fbe:	463b      	mov	r3, r7
   91fc0:	9702      	str	r7, [sp, #8]
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   91fc2:	8b9a      	ldrh	r2, [r3, #28]
   91fc4:	0750      	lsls	r0, r2, #29
   91fc6:	d503      	bpl.n	91fd0 <mw_process_message+0x460>
   91fc8:	699a      	ldr	r2, [r3, #24]
   91fca:	4291      	cmp	r1, r2
   91fcc:	f000 82c8 	beq.w	92560 <mw_process_message+0x9f0>
   91fd0:	f108 0801 	add.w	r8, r8, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   91fd4:	f1b8 0f18 	cmp.w	r8, #24
   91fd8:	f103 0320 	add.w	r3, r3, #32
   91fdc:	d1f1      	bne.n	91fc2 <mw_process_message+0x452>
					MW_ASSERT(control_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   91fde:	4651      	mov	r1, sl
   91fe0:	4b75      	ldr	r3, [pc, #468]	; (921b8 <mw_process_message+0x648>)
   91fe2:	f241 52d0 	movw	r2, #5584	; 0x15d0
   91fe6:	2000      	movs	r0, #0
   91fe8:	47c8      	blx	r9
						MW_ASSERT((bool)false, "Illegal timer recipient control id");
   91fea:	4b74      	ldr	r3, [pc, #464]	; (921bc <mw_process_message+0x64c>)
   91fec:	f241 52e2 	movw	r2, #5602	; 0x15e2
   91ff0:	4651      	mov	r1, sl
   91ff2:	2000      	movs	r0, #0
   91ff4:	47c8      	blx	r9
   91ff6:	e6cd      	b.n	91d94 <mw_process_message+0x224>
   91ff8:	ae10      	add	r6, sp, #64	; 0x40
	if (touch_message_id == MW_TOUCH_UP_MESSAGE)
   91ffa:	9b02      	ldr	r3, [sp, #8]
   91ffc:	2b16      	cmp	r3, #22
   91ffe:	f47f ae61 	bne.w	91cc4 <mw_process_message+0x154>
   92002:	e65d      	b.n	91cc0 <mw_process_message+0x150>
		previous_touch_y = *touch_y;
   92004:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92008:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 921c8 <mw_process_message+0x658>
		previous_touch_y = *touch_y;
   9200c:	4616      	mov	r6, r2
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9200e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		previous_touch_x = *touch_x;
   92012:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
   92016:	4c6a      	ldr	r4, [pc, #424]	; (921c0 <mw_process_message+0x650>)
		previous_touch_y = *touch_y;
   92018:	9202      	str	r2, [sp, #8]
   9201a:	496a      	ldr	r1, [pc, #424]	; (921c4 <mw_process_message+0x654>)
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9201c:	f003 0228 	and.w	r2, r3, #40	; 0x28
   92020:	2a28      	cmp	r2, #40	; 0x28
	previous_touch_state = touch_state;
   92022:	7028      	strb	r0, [r5, #0]
		previous_touch_x = *touch_x;
   92024:	f8a4 8000 	strh.w	r8, [r4]
		previous_touch_y = *touch_y;
   92028:	800e      	strh	r6, [r1, #0]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9202a:	d102      	bne.n	92032 <mw_process_message+0x4c2>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   9202c:	06d9      	lsls	r1, r3, #27
   9202e:	f141 8035 	bpl.w	9309c <mw_process_message+0x152c>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   92032:	4605      	mov	r5, r0
   92034:	4604      	mov	r4, r0
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92036:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
   9203a:	f003 0228 	and.w	r2, r3, #40	; 0x28
   9203e:	2a28      	cmp	r2, #40	; 0x28
   92040:	d102      	bne.n	92048 <mw_process_message+0x4d8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92042:	06da      	lsls	r2, r3, #27
   92044:	f141 801a 	bpl.w	9307c <mw_process_message+0x150c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92048:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
   9204c:	f003 0228 	and.w	r2, r3, #40	; 0x28
   92050:	2a28      	cmp	r2, #40	; 0x28
   92052:	d102      	bne.n	9205a <mw_process_message+0x4ea>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92054:	06db      	lsls	r3, r3, #27
   92056:	f141 80a1 	bpl.w	9319c <mw_process_message+0x162c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9205a:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
   9205e:	f003 0228 	and.w	r2, r3, #40	; 0x28
   92062:	2a28      	cmp	r2, #40	; 0x28
   92064:	d102      	bne.n	9206c <mw_process_message+0x4fc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92066:	06df      	lsls	r7, r3, #27
   92068:	f141 8088 	bpl.w	9317c <mw_process_message+0x160c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9206c:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
   92070:	f003 0228 	and.w	r2, r3, #40	; 0x28
   92074:	2a28      	cmp	r2, #40	; 0x28
   92076:	d102      	bne.n	9207e <mw_process_message+0x50e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92078:	06de      	lsls	r6, r3, #27
   9207a:	f141 806f 	bpl.w	9315c <mw_process_message+0x15ec>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9207e:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
   92082:	f003 0228 	and.w	r2, r3, #40	; 0x28
   92086:	2a28      	cmp	r2, #40	; 0x28
   92088:	d102      	bne.n	92090 <mw_process_message+0x520>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   9208a:	06d8      	lsls	r0, r3, #27
   9208c:	f141 8056 	bpl.w	9313c <mw_process_message+0x15cc>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92090:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
   92094:	f003 0228 	and.w	r2, r3, #40	; 0x28
   92098:	2a28      	cmp	r2, #40	; 0x28
   9209a:	d102      	bne.n	920a2 <mw_process_message+0x532>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   9209c:	06d9      	lsls	r1, r3, #27
   9209e:	f141 803d 	bpl.w	9311c <mw_process_message+0x15ac>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   920a2:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
   920a6:	f003 0228 	and.w	r2, r3, #40	; 0x28
   920aa:	2a28      	cmp	r2, #40	; 0x28
   920ac:	d102      	bne.n	920b4 <mw_process_message+0x544>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   920ae:	06da      	lsls	r2, r3, #27
   920b0:	f141 8024 	bpl.w	930fc <mw_process_message+0x158c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   920b4:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
   920b8:	f003 0228 	and.w	r2, r3, #40	; 0x28
   920bc:	2a28      	cmp	r2, #40	; 0x28
   920be:	d102      	bne.n	920c6 <mw_process_message+0x556>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   920c0:	06db      	lsls	r3, r3, #27
   920c2:	f141 800b 	bpl.w	930dc <mw_process_message+0x156c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   920c6:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
   920ca:	f003 0228 	and.w	r2, r3, #40	; 0x28
   920ce:	2a28      	cmp	r2, #40	; 0x28
   920d0:	d102      	bne.n	920d8 <mw_process_message+0x568>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   920d2:	06df      	lsls	r7, r3, #27
   920d4:	f140 87f2 	bpl.w	930bc <mw_process_message+0x154c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   920d8:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
   920dc:	f003 0228 	and.w	r2, r3, #40	; 0x28
   920e0:	2a28      	cmp	r2, #40	; 0x28
   920e2:	d102      	bne.n	920ea <mw_process_message+0x57a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   920e4:	06de      	lsls	r6, r3, #27
   920e6:	f141 8088 	bpl.w	931fa <mw_process_message+0x168a>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   920ea:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
   920ee:	f003 0228 	and.w	r2, r3, #40	; 0x28
   920f2:	2a28      	cmp	r2, #40	; 0x28
   920f4:	d102      	bne.n	920fc <mw_process_message+0x58c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   920f6:	06d8      	lsls	r0, r3, #27
   920f8:	f141 806f 	bpl.w	931da <mw_process_message+0x166a>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   920fc:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
   92100:	f003 0228 	and.w	r2, r3, #40	; 0x28
   92104:	2a28      	cmp	r2, #40	; 0x28
   92106:	d102      	bne.n	9210e <mw_process_message+0x59e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92108:	06d9      	lsls	r1, r3, #27
   9210a:	f141 8057 	bpl.w	931bc <mw_process_message+0x164c>
	return (mw_all_windows[window_id].window_handle);
   9210e:	eb0a 1484 	add.w	r4, sl, r4, lsl #6
   92112:	6963      	ldr	r3, [r4, #20]
	if (window_handle == MW_INVALID_HANDLE)
   92114:	2b00      	cmp	r3, #0
   92116:	d059      	beq.n	921cc <mw_process_message+0x65c>
		if (mw_all_windows[i].window_handle == window_handle &&
   92118:	f8da 7014 	ldr.w	r7, [sl, #20]
   9211c:	42bb      	cmp	r3, r7
   9211e:	f001 80bb 	beq.w	93298 <mw_process_message+0x1728>
   92122:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   92126:	429a      	cmp	r2, r3
   92128:	f001 8698 	beq.w	93e5c <mw_process_message+0x22ec>
   9212c:	f8da 2094 	ldr.w	r2, [sl, #148]	; 0x94
   92130:	429a      	cmp	r2, r3
   92132:	f001 868a 	beq.w	93e4a <mw_process_message+0x22da>
   92136:	f8da 20d4 	ldr.w	r2, [sl, #212]	; 0xd4
   9213a:	429a      	cmp	r2, r3
   9213c:	f001 867c 	beq.w	93e38 <mw_process_message+0x22c8>
   92140:	f8da 2114 	ldr.w	r2, [sl, #276]	; 0x114
   92144:	429a      	cmp	r2, r3
   92146:	f001 8692 	beq.w	93e6e <mw_process_message+0x22fe>
   9214a:	f8da 2154 	ldr.w	r2, [sl, #340]	; 0x154
   9214e:	429a      	cmp	r2, r3
   92150:	f001 869f 	beq.w	93e92 <mw_process_message+0x2322>
   92154:	f8da 2194 	ldr.w	r2, [sl, #404]	; 0x194
   92158:	429a      	cmp	r2, r3
   9215a:	f001 8691 	beq.w	93e80 <mw_process_message+0x2310>
   9215e:	f8da 21d4 	ldr.w	r2, [sl, #468]	; 0x1d4
   92162:	429a      	cmp	r2, r3
   92164:	f001 86aa 	beq.w	93ebc <mw_process_message+0x234c>
   92168:	f8da 2214 	ldr.w	r2, [sl, #532]	; 0x214
   9216c:	4293      	cmp	r3, r2
   9216e:	f001 869c 	beq.w	93eaa <mw_process_message+0x233a>
   92172:	f8da 2254 	ldr.w	r2, [sl, #596]	; 0x254
   92176:	4293      	cmp	r3, r2
   92178:	f001 86bb 	beq.w	93ef2 <mw_process_message+0x2382>
   9217c:	f8da 2294 	ldr.w	r2, [sl, #660]	; 0x294
   92180:	4293      	cmp	r3, r2
   92182:	f001 86ad 	beq.w	93ee0 <mw_process_message+0x2370>
   92186:	f8da 22d4 	ldr.w	r2, [sl, #724]	; 0x2d4
   9218a:	4293      	cmp	r3, r2
   9218c:	f001 869f 	beq.w	93ece <mw_process_message+0x235e>
   92190:	f8da 2314 	ldr.w	r2, [sl, #788]	; 0x314
   92194:	4293      	cmp	r3, r2
   92196:	f001 86b5 	beq.w	93f04 <mw_process_message+0x2394>
   9219a:	f8da 2354 	ldr.w	r2, [sl, #852]	; 0x354
   9219e:	4293      	cmp	r3, r2
   921a0:	d114      	bne.n	921cc <mw_process_message+0x65c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   921a2:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   921a6:	0699      	lsls	r1, r3, #26
   921a8:	d510      	bpl.n	921cc <mw_process_message+0x65c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   921aa:	230d      	movs	r3, #13
   921ac:	9303      	str	r3, [sp, #12]
   921ae:	e00f      	b.n	921d0 <mw_process_message+0x660>
   921b0:	20071858 	.word	0x20071858
   921b4:	00095bc1 	.word	0x00095bc1
   921b8:	000ab734 	.word	0x000ab734
   921bc:	000ab8ec 	.word	0x000ab8ec
   921c0:	20071f5c 	.word	0x20071f5c
   921c4:	20071f5e 	.word	0x20071f5e
   921c8:	20071bd8 	.word	0x20071bd8
		if (mw_all_windows[i].window_handle == window_handle &&
   921cc:	230e      	movs	r3, #14
   921ce:	9303      	str	r3, [sp, #12]
	if (mw_all_windows[window_id].window_handle != window_with_focus_handle)
   921d0:	019b      	lsls	r3, r3, #6
   921d2:	49d4      	ldr	r1, [pc, #848]	; (92524 <mw_process_message+0x9b4>)
   921d4:	9304      	str	r3, [sp, #16]
   921d6:	4453      	add	r3, sl
   921d8:	695a      	ldr	r2, [r3, #20]
   921da:	680e      	ldr	r6, [r1, #0]
   921dc:	42b2      	cmp	r2, r6
   921de:	f001 801c 	beq.w	9321a <mw_process_message+0x16aa>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_MODAL) == MW_WINDOW_FLAG_IS_MODAL &&
   921e2:	f8da 104c 	ldr.w	r1, [sl, #76]	; 0x4c
   921e6:	f001 0360 	and.w	r3, r1, #96	; 0x60
   921ea:	2b60      	cmp	r3, #96	; 0x60
   921ec:	f001 834d 	beq.w	9388a <mw_process_message+0x1d1a>
   921f0:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
   921f4:	f002 0360 	and.w	r3, r2, #96	; 0x60
   921f8:	2b60      	cmp	r3, #96	; 0x60
   921fa:	f001 8346 	beq.w	9388a <mw_process_message+0x1d1a>
   921fe:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
   92202:	f003 0060 	and.w	r0, r3, #96	; 0x60
   92206:	2860      	cmp	r0, #96	; 0x60
   92208:	f001 833f 	beq.w	9388a <mw_process_message+0x1d1a>
   9220c:	f8da 410c 	ldr.w	r4, [sl, #268]	; 0x10c
   92210:	f004 0060 	and.w	r0, r4, #96	; 0x60
   92214:	2860      	cmp	r0, #96	; 0x60
   92216:	f001 8338 	beq.w	9388a <mw_process_message+0x1d1a>
   9221a:	f8da 014c 	ldr.w	r0, [sl, #332]	; 0x14c
   9221e:	f000 0560 	and.w	r5, r0, #96	; 0x60
   92222:	2d60      	cmp	r5, #96	; 0x60
   92224:	f001 8331 	beq.w	9388a <mw_process_message+0x1d1a>
   92228:	f8da e18c 	ldr.w	lr, [sl, #396]	; 0x18c
   9222c:	f00e 0560 	and.w	r5, lr, #96	; 0x60
   92230:	2d60      	cmp	r5, #96	; 0x60
   92232:	f001 832a 	beq.w	9388a <mw_process_message+0x1d1a>
   92236:	f8da c1cc 	ldr.w	ip, [sl, #460]	; 0x1cc
   9223a:	f00c 0560 	and.w	r5, ip, #96	; 0x60
   9223e:	2d60      	cmp	r5, #96	; 0x60
   92240:	f001 8323 	beq.w	9388a <mw_process_message+0x1d1a>
   92244:	f8da 520c 	ldr.w	r5, [sl, #524]	; 0x20c
   92248:	f005 0760 	and.w	r7, r5, #96	; 0x60
   9224c:	2f60      	cmp	r7, #96	; 0x60
   9224e:	f001 831c 	beq.w	9388a <mw_process_message+0x1d1a>
   92252:	f8da 724c 	ldr.w	r7, [sl, #588]	; 0x24c
   92256:	9708      	str	r7, [sp, #32]
   92258:	f007 0760 	and.w	r7, r7, #96	; 0x60
   9225c:	2f60      	cmp	r7, #96	; 0x60
   9225e:	f001 8314 	beq.w	9388a <mw_process_message+0x1d1a>
   92262:	f8da 728c 	ldr.w	r7, [sl, #652]	; 0x28c
   92266:	9707      	str	r7, [sp, #28]
   92268:	f007 0760 	and.w	r7, r7, #96	; 0x60
   9226c:	2f60      	cmp	r7, #96	; 0x60
   9226e:	f001 830c 	beq.w	9388a <mw_process_message+0x1d1a>
   92272:	f8da 72cc 	ldr.w	r7, [sl, #716]	; 0x2cc
   92276:	9706      	str	r7, [sp, #24]
   92278:	f007 0760 	and.w	r7, r7, #96	; 0x60
   9227c:	2f60      	cmp	r7, #96	; 0x60
   9227e:	f001 8304 	beq.w	9388a <mw_process_message+0x1d1a>
   92282:	f8da 730c 	ldr.w	r7, [sl, #780]	; 0x30c
   92286:	9705      	str	r7, [sp, #20]
   92288:	f007 0760 	and.w	r7, r7, #96	; 0x60
   9228c:	2f60      	cmp	r7, #96	; 0x60
   9228e:	f001 82fc 	beq.w	9388a <mw_process_message+0x1d1a>
   92292:	f8da 734c 	ldr.w	r7, [sl, #844]	; 0x34c
   92296:	9709      	str	r7, [sp, #36]	; 0x24
   92298:	f007 0760 	and.w	r7, r7, #96	; 0x60
   9229c:	2f60      	cmp	r7, #96	; 0x60
   9229e:	f001 82f4 	beq.w	9388a <mw_process_message+0x1d1a>
	if (window_handle == MW_INVALID_HANDLE)
   922a2:	2e00      	cmp	r6, #0
   922a4:	f042 8276 	bne.w	94794 <mw_process_message+0x2c24>
		MW_ASSERT((bool)false, "Bad window handle");
   922a8:	4b9f      	ldr	r3, [pc, #636]	; (92528 <mw_process_message+0x9b8>)
   922aa:	f241 22bf 	movw	r2, #4799	; 0x12bf
   922ae:	499f      	ldr	r1, [pc, #636]	; (9252c <mw_process_message+0x9bc>)
   922b0:	2000      	movs	r0, #0
   922b2:	47c8      	blx	r9
   922b4:	ae10      	add	r6, sp, #64	; 0x40
		is_window_overlapped = find_if_window_is_overlapped(mw_all_windows[window_id].window_handle);
   922b6:	9b04      	ldr	r3, [sp, #16]
   922b8:	4453      	add	r3, sl
   922ba:	6958      	ldr	r0, [r3, #20]
	if (window_handle == MW_INVALID_HANDLE)
   922bc:	2800      	cmp	r0, #0
   922be:	f002 8506 	beq.w	94cce <mw_process_message+0x315e>
   922c2:	4b9b      	ldr	r3, [pc, #620]	; (92530 <mw_process_message+0x9c0>)
   922c4:	4798      	blx	r3
   922c6:	280d      	cmp	r0, #13
   922c8:	4604      	mov	r4, r0
   922ca:	bf8c      	ite	hi
   922cc:	2000      	movhi	r0, #0
   922ce:	2001      	movls	r0, #1
		if (mw_util_do_rects_coincide(&mw_all_windows[i].window_rect, &mw_all_windows[window_id].window_rect))
   922d0:	01a4      	lsls	r4, r4, #6
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   922d2:	4b95      	ldr	r3, [pc, #596]	; (92528 <mw_process_message+0x9b8>)
   922d4:	f240 527c 	movw	r2, #1404	; 0x57c
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   922d8:	eb0a 0504 	add.w	r5, sl, r4
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   922dc:	4995      	ldr	r1, [pc, #596]	; (92534 <mw_process_message+0x9c4>)
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   922de:	9505      	str	r5, [sp, #20]
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   922e0:	47c8      	blx	r9
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   922e2:	68eb      	ldr	r3, [r5, #12]
		if (mw_util_do_rects_coincide(&mw_all_windows[i].window_rect, &mw_all_windows[window_id].window_rect))
   922e4:	f104 0718 	add.w	r7, r4, #24
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   922e8:	f003 0228 	and.w	r2, r3, #40	; 0x28
   922ec:	2a28      	cmp	r2, #40	; 0x28
		if (mw_util_do_rects_coincide(&mw_all_windows[i].window_rect, &mw_all_windows[window_id].window_rect))
   922ee:	4457      	add	r7, sl
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   922f0:	f042 8426 	bne.w	94b40 <mw_process_message+0x2fd0>
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   922f4:	06da      	lsls	r2, r3, #27
   922f6:	d406      	bmi.n	92306 <mw_process_message+0x796>
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   922f8:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   922fc:	f89a 302c 	ldrb.w	r3, [sl, #44]	; 0x2c
   92300:	429a      	cmp	r2, r3
   92302:	f243 8370 	bls.w	959e6 <mw_process_message+0x3e76>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92306:	eb0a 0304 	add.w	r3, sl, r4
   9230a:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   9230c:	06db      	lsls	r3, r3, #27
   9230e:	d408      	bmi.n	92322 <mw_process_message+0x7b2>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   92310:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   92314:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   92318:	f89a 306c 	ldrb.w	r3, [sl, #108]	; 0x6c
   9231c:	429a      	cmp	r2, r3
   9231e:	f242 8407 	bls.w	94b30 <mw_process_message+0x2fc0>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92322:	eb0a 0304 	add.w	r3, sl, r4
   92326:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92328:	06dd      	lsls	r5, r3, #27
   9232a:	d408      	bmi.n	9233e <mw_process_message+0x7ce>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   9232c:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   92330:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   92334:	f89a 30ac 	ldrb.w	r3, [sl, #172]	; 0xac
   92338:	429a      	cmp	r2, r3
   9233a:	f243 837b 	bls.w	95a34 <mw_process_message+0x3ec4>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9233e:	eb0a 0304 	add.w	r3, sl, r4
   92342:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92344:	06d8      	lsls	r0, r3, #27
   92346:	d408      	bmi.n	9235a <mw_process_message+0x7ea>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   92348:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   9234c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   92350:	f89a 30ec 	ldrb.w	r3, [sl, #236]	; 0xec
   92354:	429a      	cmp	r2, r3
   92356:	f243 82cf 	bls.w	958f8 <mw_process_message+0x3d88>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9235a:	eb0a 0304 	add.w	r3, sl, r4
   9235e:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92360:	06d9      	lsls	r1, r3, #27
   92362:	d408      	bmi.n	92376 <mw_process_message+0x806>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   92364:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   92368:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   9236c:	f89a 312c 	ldrb.w	r3, [sl, #300]	; 0x12c
   92370:	429a      	cmp	r2, r3
   92372:	f243 82cb 	bls.w	9590c <mw_process_message+0x3d9c>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92376:	eb0a 0304 	add.w	r3, sl, r4
   9237a:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   9237c:	06da      	lsls	r2, r3, #27
   9237e:	d408      	bmi.n	92392 <mw_process_message+0x822>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   92380:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   92384:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   92388:	f89a 316c 	ldrb.w	r3, [sl, #364]	; 0x16c
   9238c:	429a      	cmp	r2, r3
   9238e:	f243 82e6 	bls.w	9595e <mw_process_message+0x3dee>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92392:	eb0a 0304 	add.w	r3, sl, r4
   92396:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92398:	06db      	lsls	r3, r3, #27
   9239a:	d408      	bmi.n	923ae <mw_process_message+0x83e>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   9239c:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   923a0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   923a4:	f89a 31ac 	ldrb.w	r3, [sl, #428]	; 0x1ac
   923a8:	429a      	cmp	r2, r3
   923aa:	f243 82e2 	bls.w	95972 <mw_process_message+0x3e02>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   923ae:	eb0a 0304 	add.w	r3, sl, r4
   923b2:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   923b4:	06dd      	lsls	r5, r3, #27
   923b6:	d408      	bmi.n	923ca <mw_process_message+0x85a>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   923b8:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   923bc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   923c0:	f89a 31ec 	ldrb.w	r3, [sl, #492]	; 0x1ec
   923c4:	429a      	cmp	r2, r3
   923c6:	f243 82dd 	bls.w	95984 <mw_process_message+0x3e14>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   923ca:	eb0a 0304 	add.w	r3, sl, r4
   923ce:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   923d0:	06d8      	lsls	r0, r3, #27
   923d2:	d408      	bmi.n	923e6 <mw_process_message+0x876>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   923d4:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   923d8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   923dc:	f89a 322c 	ldrb.w	r3, [sl, #556]	; 0x22c
   923e0:	429a      	cmp	r2, r3
   923e2:	f243 82d9 	bls.w	95998 <mw_process_message+0x3e28>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   923e6:	eb0a 0304 	add.w	r3, sl, r4
   923ea:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   923ec:	06d9      	lsls	r1, r3, #27
   923ee:	d408      	bmi.n	92402 <mw_process_message+0x892>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   923f0:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   923f4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   923f8:	f89a 326c 	ldrb.w	r3, [sl, #620]	; 0x26c
   923fc:	429a      	cmp	r2, r3
   923fe:	f243 82d4 	bls.w	959aa <mw_process_message+0x3e3a>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92402:	eb0a 0304 	add.w	r3, sl, r4
   92406:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92408:	06da      	lsls	r2, r3, #27
   9240a:	d408      	bmi.n	9241e <mw_process_message+0x8ae>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   9240c:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   92410:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   92414:	f89a 32ac 	ldrb.w	r3, [sl, #684]	; 0x2ac
   92418:	429a      	cmp	r2, r3
   9241a:	f243 82d0 	bls.w	959be <mw_process_message+0x3e4e>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9241e:	eb0a 0304 	add.w	r3, sl, r4
   92422:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92424:	06db      	lsls	r3, r3, #27
   92426:	d408      	bmi.n	9243a <mw_process_message+0x8ca>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   92428:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   9242c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   92430:	f89a 32ec 	ldrb.w	r3, [sl, #748]	; 0x2ec
   92434:	429a      	cmp	r2, r3
   92436:	f243 80ce 	bls.w	955d6 <mw_process_message+0x3a66>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9243a:	eb0a 0304 	add.w	r3, sl, r4
   9243e:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92440:	06dd      	lsls	r5, r3, #27
   92442:	d408      	bmi.n	92456 <mw_process_message+0x8e6>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   92444:	eb0a 0304 	add.w	r3, sl, r4
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   92448:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   9244c:	f89a 332c 	ldrb.w	r3, [sl, #812]	; 0x32c
   92450:	429a      	cmp	r2, r3
   92452:	f243 80ca 	bls.w	955ea <mw_process_message+0x3a7a>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92456:	eb0a 0304 	add.w	r3, sl, r4
   9245a:	68db      	ldr	r3, [r3, #12]
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   9245c:	06d8      	lsls	r0, r3, #27
   9245e:	d407      	bmi.n	92470 <mw_process_message+0x900>
				mw_all_windows[i].z_order < mw_all_windows[window_id].z_order)
   92460:	4454      	add	r4, sl
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   92462:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   92466:	f89a 236c 	ldrb.w	r2, [sl, #876]	; 0x36c
   9246a:	429a      	cmp	r2, r3
   9246c:	f083 82d3 	bcs.w	95a16 <mw_process_message+0x3ea6>
	return (false);
   92470:	2500      	movs	r5, #0
		mw_bring_window_to_front(mw_all_windows[window_id].window_handle);
   92472:	9b04      	ldr	r3, [sp, #16]
   92474:	eb0a 0403 	add.w	r4, sl, r3
   92478:	6960      	ldr	r0, [r4, #20]
   9247a:	4b2f      	ldr	r3, [pc, #188]	; (92538 <mw_process_message+0x9c8>)
   9247c:	4798      	blx	r3
		mw_paint_window_frame(mw_all_windows[window_id].window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   9247e:	6963      	ldr	r3, [r4, #20]
	if (window_handle == MW_INVALID_HANDLE)
   92480:	2b00      	cmp	r3, #0
   92482:	d045      	beq.n	92510 <mw_process_message+0x9a0>
		if (mw_all_windows[i].window_handle == window_handle &&
   92484:	f8da 2014 	ldr.w	r2, [sl, #20]
   92488:	4293      	cmp	r3, r2
   9248a:	f003 8077 	beq.w	9557c <mw_process_message+0x3a0c>
   9248e:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   92492:	4293      	cmp	r3, r2
   92494:	f003 806c 	beq.w	95570 <mw_process_message+0x3a00>
   92498:	f8da 2094 	ldr.w	r2, [sl, #148]	; 0x94
   9249c:	4293      	cmp	r3, r2
   9249e:	f003 8061 	beq.w	95564 <mw_process_message+0x39f4>
   924a2:	f8da 20d4 	ldr.w	r2, [sl, #212]	; 0xd4
   924a6:	4293      	cmp	r3, r2
   924a8:	f003 8056 	beq.w	95558 <mw_process_message+0x39e8>
   924ac:	f8da 2114 	ldr.w	r2, [sl, #276]	; 0x114
   924b0:	4293      	cmp	r3, r2
   924b2:	f003 804b 	beq.w	9554c <mw_process_message+0x39dc>
   924b6:	f8da 2154 	ldr.w	r2, [sl, #340]	; 0x154
   924ba:	4293      	cmp	r3, r2
   924bc:	f003 8040 	beq.w	95540 <mw_process_message+0x39d0>
   924c0:	f8da 2194 	ldr.w	r2, [sl, #404]	; 0x194
   924c4:	4293      	cmp	r3, r2
   924c6:	f003 8035 	beq.w	95534 <mw_process_message+0x39c4>
   924ca:	f8da 21d4 	ldr.w	r2, [sl, #468]	; 0x1d4
   924ce:	4293      	cmp	r3, r2
   924d0:	f003 802a 	beq.w	95528 <mw_process_message+0x39b8>
   924d4:	f8da 2214 	ldr.w	r2, [sl, #532]	; 0x214
   924d8:	4293      	cmp	r3, r2
   924da:	f003 801f 	beq.w	9551c <mw_process_message+0x39ac>
   924de:	f8da 2254 	ldr.w	r2, [sl, #596]	; 0x254
   924e2:	4293      	cmp	r3, r2
   924e4:	f003 8014 	beq.w	95510 <mw_process_message+0x39a0>
   924e8:	f8da 2294 	ldr.w	r2, [sl, #660]	; 0x294
   924ec:	4293      	cmp	r3, r2
   924ee:	f003 8009 	beq.w	95504 <mw_process_message+0x3994>
   924f2:	f8da 22d4 	ldr.w	r2, [sl, #724]	; 0x2d4
   924f6:	4293      	cmp	r3, r2
   924f8:	f002 87fe 	beq.w	954f8 <mw_process_message+0x3988>
   924fc:	f8da 2314 	ldr.w	r2, [sl, #788]	; 0x314
   92500:	4293      	cmp	r3, r2
   92502:	f002 87f3 	beq.w	954ec <mw_process_message+0x397c>
   92506:	f8da 2354 	ldr.w	r2, [sl, #852]	; 0x354
   9250a:	4293      	cmp	r3, r2
   9250c:	f002 87d8 	beq.w	954c0 <mw_process_message+0x3950>
		MW_ASSERT((bool)false, "Bad window handle");
   92510:	4b05      	ldr	r3, [pc, #20]	; (92528 <mw_process_message+0x9b8>)
   92512:	f241 22bf 	movw	r2, #4799	; 0x12bf
   92516:	4905      	ldr	r1, [pc, #20]	; (9252c <mw_process_message+0x9bc>)
   92518:	2000      	movs	r0, #0
   9251a:	47c8      	blx	r9
		if (is_window_overlapped)
   9251c:	2d00      	cmp	r5, #0
   9251e:	f042 863f 	bne.w	951a0 <mw_process_message+0x3630>
   92522:	e00b      	b.n	9253c <mw_process_message+0x9cc>
   92524:	20071fb4 	.word	0x20071fb4
   92528:	000ab764 	.word	0x000ab764
   9252c:	000ab580 	.word	0x000ab580
   92530:	00088121 	.word	0x00088121
   92534:	000ab308 	.word	0x000ab308
   92538:	0008e059 	.word	0x0008e059
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_TOUCH_FOCUS_AND_EVENT) == 0U)
   9253c:	9b04      	ldr	r3, [sp, #16]
   9253e:	4453      	add	r3, sl
   92540:	68db      	ldr	r3, [r3, #12]
   92542:	0458      	lsls	r0, r3, #17
   92544:	f100 866b 	bmi.w	9321e <mw_process_message+0x16ae>
   92548:	f000 bea2 	b.w	93290 <mw_process_message+0x1720>
			MW_ASSERT((bool)false, "Illegal message recipient type");
   9254c:	4bb2      	ldr	r3, [pc, #712]	; (92818 <mw_process_message+0xca8>)
   9254e:	f241 6239 	movw	r2, #5689	; 0x1639
   92552:	49b2      	ldr	r1, [pc, #712]	; (9281c <mw_process_message+0xcac>)
   92554:	2000      	movs	r0, #0
   92556:	47c8      	blx	r9
}
   92558:	4658      	mov	r0, fp
   9255a:	b017      	add	sp, #92	; 0x5c
   9255c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					MW_ASSERT(control_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   92560:	4baf      	ldr	r3, [pc, #700]	; (92820 <mw_process_message+0xcb0>)
   92562:	f241 52d0 	movw	r2, #5584	; 0x15d0
   92566:	4651      	mov	r1, sl
   92568:	2001      	movs	r0, #1
   9256a:	47c8      	blx	r9
						if ((mw_all_controls[control_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED)
   9256c:	9b02      	ldr	r3, [sp, #8]
   9256e:	eb03 1848 	add.w	r8, r3, r8, lsl #5
   92572:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   92576:	075b      	lsls	r3, r3, #29
   92578:	f57f ac0c 	bpl.w	91d94 <mw_process_message+0x224>
							mw_post_message(MW_TIMER_MESSAGE,
   9257c:	6863      	ldr	r3, [r4, #4]
   9257e:	68a2      	ldr	r2, [r4, #8]
   92580:	4619      	mov	r1, r3
   92582:	9303      	str	r3, [sp, #12]
   92584:	9204      	str	r2, [sp, #16]
	if (control_handle == MW_INVALID_HANDLE)
   92586:	2b00      	cmp	r3, #0
   92588:	f001 82c8 	beq.w	93b1c <mw_process_message+0x1fac>
   9258c:	2300      	movs	r3, #0
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   9258e:	8bba      	ldrh	r2, [r7, #28]
   92590:	4698      	mov	r8, r3
   92592:	0752      	lsls	r2, r2, #29
   92594:	f103 0301 	add.w	r3, r3, #1
   92598:	d503      	bpl.n	925a2 <mw_process_message+0xa32>
   9259a:	69ba      	ldr	r2, [r7, #24]
   9259c:	4291      	cmp	r1, r2
   9259e:	f001 85cb 	beq.w	94138 <mw_process_message+0x25c8>
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   925a2:	2b18      	cmp	r3, #24
   925a4:	f107 0720 	add.w	r7, r7, #32
   925a8:	d1f1      	bne.n	9258e <mw_process_message+0xa1e>
   925aa:	4698      	mov	r8, r3
   925ac:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   925ae:	4b9c      	ldr	r3, [pc, #624]	; (92820 <mw_process_message+0xcb0>)
   925b0:	f241 5267 	movw	r2, #5479	; 0x1567
   925b4:	499b      	ldr	r1, [pc, #620]	; (92824 <mw_process_message+0xcb4>)
   925b6:	47c8      	blx	r9
	new_message.sender_handle = sender_handle;
   925b8:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   925ba:	2019      	movs	r0, #25
	new_message.message_recipient_type = recipient_type;
   925bc:	2101      	movs	r1, #1
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   925be:	9a02      	ldr	r2, [sp, #8]
	new_message.message_data = message_data;
   925c0:	9f04      	ldr	r7, [sp, #16]
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   925c2:	eb02 1848 	add.w	r8, r2, r8, lsl #5
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   925c6:	f8b8 201c 	ldrh.w	r2, [r8, #28]
	new_message.message_data = message_data;
   925ca:	9713      	str	r7, [sp, #76]	; 0x4c
	new_message.recipient_handle = recipient_handle;
   925cc:	9f03      	ldr	r7, [sp, #12]
	new_message.message_id = message_id;
   925ce:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
	new_message.recipient_handle = recipient_handle;
   925d2:	9711      	str	r7, [sp, #68]	; 0x44
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   925d4:	0757      	lsls	r7, r2, #29
	new_message.message_recipient_type = recipient_type;
   925d6:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
	new_message.sender_handle = sender_handle;
   925da:	9310      	str	r3, [sp, #64]	; 0x40
	new_message.message_pointer = message_pointer;
   925dc:	9314      	str	r3, [sp, #80]	; 0x50
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   925de:	f57f abd9 	bpl.w	91d94 <mw_process_message+0x224>
   925e2:	e114      	b.n	9280e <mw_process_message+0xc9e>
		else if (touch_message_target.touch_down_recipient_type == TOUCH_DOWN_RECIPIENT_TYPE_CONTROL)
   925e4:	2f02      	cmp	r7, #2
   925e6:	f000 878e 	beq.w	93506 <mw_process_message+0x1996>
		else if (touch_message_target.touch_down_recipient_type == TOUCH_DOWN_RECIPIENT_TYPE_HORIZ_WINDOW_SCROLL_BAR)
   925ea:	2f03      	cmp	r7, #3
   925ec:	f000 8462 	beq.w	92eb4 <mw_process_message+0x1344>
		else if (touch_message_target.touch_down_recipient_type == TOUCH_DOWN_RECIPIENT_TYPE_VERT_WINDOW_SCROLL_BAR)
   925f0:	2f04      	cmp	r7, #4
   925f2:	f47f ad01 	bne.w	91ff8 <mw_process_message+0x488>
		if (mw_all_windows[i].window_handle == window_handle &&
   925f6:	f8df a248 	ldr.w	sl, [pc, #584]	; 92840 <mw_process_message+0xcd0>
   925fa:	f8da 0014 	ldr.w	r0, [sl, #20]
   925fe:	4283      	cmp	r3, r0
   92600:	f001 86af 	beq.w	94362 <mw_process_message+0x27f2>
   92604:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
   92608:	4283      	cmp	r3, r0
   9260a:	f001 86a2 	beq.w	94352 <mw_process_message+0x27e2>
   9260e:	f8da 0094 	ldr.w	r0, [sl, #148]	; 0x94
   92612:	4283      	cmp	r3, r0
   92614:	f001 8695 	beq.w	94342 <mw_process_message+0x27d2>
   92618:	f8da 00d4 	ldr.w	r0, [sl, #212]	; 0xd4
   9261c:	4283      	cmp	r3, r0
   9261e:	f001 8688 	beq.w	94332 <mw_process_message+0x27c2>
   92622:	f8da 0114 	ldr.w	r0, [sl, #276]	; 0x114
   92626:	4283      	cmp	r3, r0
   92628:	f001 867b 	beq.w	94322 <mw_process_message+0x27b2>
   9262c:	f8da 0154 	ldr.w	r0, [sl, #340]	; 0x154
   92630:	4283      	cmp	r3, r0
   92632:	f001 866e 	beq.w	94312 <mw_process_message+0x27a2>
   92636:	f8da 0194 	ldr.w	r0, [sl, #404]	; 0x194
   9263a:	4283      	cmp	r3, r0
   9263c:	f001 872a 	beq.w	94494 <mw_process_message+0x2924>
   92640:	f8da 01d4 	ldr.w	r0, [sl, #468]	; 0x1d4
   92644:	4283      	cmp	r3, r0
   92646:	f001 871d 	beq.w	94484 <mw_process_message+0x2914>
   9264a:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
   9264e:	4283      	cmp	r3, r0
   92650:	f001 86f8 	beq.w	94444 <mw_process_message+0x28d4>
   92654:	f8da 0254 	ldr.w	r0, [sl, #596]	; 0x254
   92658:	4283      	cmp	r3, r0
   9265a:	f001 86eb 	beq.w	94434 <mw_process_message+0x28c4>
   9265e:	f8da 0294 	ldr.w	r0, [sl, #660]	; 0x294
   92662:	4283      	cmp	r3, r0
   92664:	f001 86de 	beq.w	94424 <mw_process_message+0x28b4>
   92668:	f8da 02d4 	ldr.w	r0, [sl, #724]	; 0x2d4
   9266c:	4283      	cmp	r3, r0
   9266e:	f001 86d1 	beq.w	94414 <mw_process_message+0x28a4>
   92672:	f8da 0314 	ldr.w	r0, [sl, #788]	; 0x314
   92676:	4283      	cmp	r3, r0
   92678:	f001 86fc 	beq.w	94474 <mw_process_message+0x2904>
   9267c:	f8da 0354 	ldr.w	r0, [sl, #852]	; 0x354
   92680:	4283      	cmp	r3, r0
   92682:	f47f ab1c 	bne.w	91cbe <mw_process_message+0x14e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92686:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   9268a:	069b      	lsls	r3, r3, #26
   9268c:	f57f ab17 	bpl.w	91cbe <mw_process_message+0x14e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   92690:	200d      	movs	r0, #13
			if (touch_message_id == MW_TOUCH_DRAG_MESSAGE || touch_message_id == MW_TOUCH_UP_MESSAGE)
   92692:	9b02      	ldr	r3, [sp, #8]
   92694:	3b16      	subs	r3, #22
   92696:	2b01      	cmp	r3, #1
   92698:	f242 831c 	bls.w	94cd4 <mw_process_message+0x3164>
   9269c:	ae10      	add	r6, sp, #64	; 0x40
   9269e:	f7ff bb11 	b.w	91cc4 <mw_process_message+0x154>
	if (control_handle == MW_INVALID_HANDLE)
   926a2:	2418      	movs	r4, #24
   926a4:	4f60      	ldr	r7, [pc, #384]	; (92828 <mw_process_message+0xcb8>)
			MW_ASSERT(control_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   926a6:	f241 6201 	movw	r2, #5633	; 0x1601
   926aa:	495c      	ldr	r1, [pc, #368]	; (9281c <mw_process_message+0xcac>)
   926ac:	4b5c      	ldr	r3, [pc, #368]	; (92820 <mw_process_message+0xcb0>)
			mw_all_controls[control_id].message_func(&message);
   926ae:	eb07 1744 	add.w	r7, r7, r4, lsl #5
			MW_ASSERT(control_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   926b2:	47c8      	blx	r9
			mw_all_controls[control_id].message_func(&message);
   926b4:	4630      	mov	r0, r6
   926b6:	687b      	ldr	r3, [r7, #4]
   926b8:	4798      	blx	r3
}
   926ba:	4658      	mov	r0, fp
   926bc:	b017      	add	sp, #92	; 0x5c
   926be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (window_handle == MW_INVALID_HANDLE)
   926c2:	240e      	movs	r4, #14
   926c4:	f8df a178 	ldr.w	sl, [pc, #376]	; 92840 <mw_process_message+0xcd0>
			MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   926c8:	f241 52fa 	movw	r2, #5626	; 0x15fa
   926cc:	4953      	ldr	r1, [pc, #332]	; (9281c <mw_process_message+0xcac>)
   926ce:	4b57      	ldr	r3, [pc, #348]	; (9282c <mw_process_message+0xcbc>)
			mw_all_windows[window_id].message_func(&message);
   926d0:	eb0a 1484 	add.w	r4, sl, r4, lsl #6
			MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   926d4:	47c8      	blx	r9
			mw_all_windows[window_id].message_func(&message);
   926d6:	4630      	mov	r0, r6
   926d8:	68a3      	ldr	r3, [r4, #8]
   926da:	4798      	blx	r3
}
   926dc:	4658      	mov	r0, fp
   926de:	b017      	add	sp, #92	; 0x5c
   926e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		abs_difference_y = (int16_t)abs((int16_t)difference_y);
   926e4:	b230      	sxth	r0, r6
   926e6:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
   926ea:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
		if (abs_difference_x > MW_DRAG_THRESHOLD_PIXELS || abs_difference_y > MW_DRAG_THRESHOLD_PIXELS)
   926ee:	b21b      	sxth	r3, r3
   926f0:	2b02      	cmp	r3, #2
   926f2:	f73f aa86 	bgt.w	91c02 <mw_process_message+0x92>
		*touch_message = MW_TOUCH_HOLD_DOWN_MESSAGE;
   926f6:	2315      	movs	r3, #21
   926f8:	4d4d      	ldr	r5, [pc, #308]	; (92830 <mw_process_message+0xcc0>)
   926fa:	9302      	str	r3, [sp, #8]
   926fc:	f7ff ba8e 	b.w	91c1c <mw_process_message+0xac>
		*touch_x = previous_touch_x;
   92700:	4a4c      	ldr	r2, [pc, #304]	; (92834 <mw_process_message+0xcc4>)
		*touch_y = previous_touch_y;
   92702:	4b4d      	ldr	r3, [pc, #308]	; (92838 <mw_process_message+0xcc8>)
		*touch_x = previous_touch_x;
   92704:	f9b2 1000 	ldrsh.w	r1, [r2]
		*touch_y = previous_touch_y;
   92708:	f9b3 2000 	ldrsh.w	r2, [r3]
		*touch_message = MW_TOUCH_UP_MESSAGE;
   9270c:	2316      	movs	r3, #22
		*touch_x = previous_touch_x;
   9270e:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
		*touch_y = previous_touch_y;
   92712:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
		*touch_message = MW_TOUCH_UP_MESSAGE;
   92716:	9302      	str	r3, [sp, #8]
   92718:	f7ff ba80 	b.w	91c1c <mw_process_message+0xac>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9271c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   92720:	069a      	lsls	r2, r3, #26
   92722:	f57f ab31 	bpl.w	91d88 <mw_process_message+0x218>
   92726:	f04f 080d 	mov.w	r8, #13
					MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   9272a:	4b40      	ldr	r3, [pc, #256]	; (9282c <mw_process_message+0xcbc>)
   9272c:	f241 52bc 	movw	r2, #5564	; 0x15bc
   92730:	4651      	mov	r1, sl
   92732:	2001      	movs	r0, #1
   92734:	47c8      	blx	r9
						if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92736:	eb07 1288 	add.w	r2, r7, r8, lsl #6
   9273a:	68d3      	ldr	r3, [r2, #12]
   9273c:	069a      	lsls	r2, r3, #26
   9273e:	f57f ab29 	bpl.w	91d94 <mw_process_message+0x224>
							mw_post_message(MW_TIMER_MESSAGE,
   92742:	68a3      	ldr	r3, [r4, #8]
   92744:	f8d4 8004 	ldr.w	r8, [r4, #4]
   92748:	9303      	str	r3, [sp, #12]
	if (window_handle == MW_INVALID_HANDLE)
   9274a:	f1b8 0f00 	cmp.w	r8, #0
   9274e:	d043      	beq.n	927d8 <mw_process_message+0xc68>
		if (mw_all_windows[i].window_handle == window_handle &&
   92750:	697b      	ldr	r3, [r7, #20]
   92752:	4598      	cmp	r8, r3
   92754:	f001 8415 	beq.w	93f82 <mw_process_message+0x2412>
   92758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   9275a:	4598      	cmp	r8, r3
   9275c:	f001 841a 	beq.w	93f94 <mw_process_message+0x2424>
   92760:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   92764:	4598      	cmp	r8, r3
   92766:	f001 8438 	beq.w	93fda <mw_process_message+0x246a>
   9276a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   9276e:	4598      	cmp	r8, r3
   92770:	f001 8429 	beq.w	93fc6 <mw_process_message+0x2456>
   92774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   92778:	4598      	cmp	r8, r3
   9277a:	f001 8438 	beq.w	93fee <mw_process_message+0x247e>
   9277e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   92782:	4598      	cmp	r8, r3
   92784:	f001 8463 	beq.w	9404e <mw_process_message+0x24de>
   92788:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
   9278c:	4598      	cmp	r8, r3
   9278e:	f001 844a 	beq.w	94026 <mw_process_message+0x24b6>
   92792:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
   92796:	4598      	cmp	r8, r3
   92798:	f001 843b 	beq.w	94012 <mw_process_message+0x24a2>
   9279c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
   927a0:	4598      	cmp	r8, r3
   927a2:	f001 844a 	beq.w	9403a <mw_process_message+0x24ca>
   927a6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
   927aa:	4598      	cmp	r8, r3
   927ac:	f001 8486 	beq.w	940bc <mw_process_message+0x254c>
   927b0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
   927b4:	4598      	cmp	r8, r3
   927b6:	f001 8495 	beq.w	940e4 <mw_process_message+0x2574>
   927ba:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
   927be:	4598      	cmp	r8, r3
   927c0:	f001 8486 	beq.w	940d0 <mw_process_message+0x2560>
   927c4:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
   927c8:	4598      	cmp	r8, r3
   927ca:	f001 84ab 	beq.w	94124 <mw_process_message+0x25b4>
   927ce:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
   927d2:	4598      	cmp	r8, r3
   927d4:	f001 8498 	beq.w	94108 <mw_process_message+0x2598>
   927d8:	230e      	movs	r3, #14
   927da:	2000      	movs	r0, #0
   927dc:	9302      	str	r3, [sp, #8]
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   927de:	4b13      	ldr	r3, [pc, #76]	; (9282c <mw_process_message+0xcbc>)
   927e0:	f241 5262 	movw	r2, #5474	; 0x1562
   927e4:	490f      	ldr	r1, [pc, #60]	; (92824 <mw_process_message+0xcb4>)
   927e6:	47c8      	blx	r9
	new_message.message_recipient_type = recipient_type;
   927e8:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   927ea:	2119      	movs	r1, #25
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   927ec:	9a02      	ldr	r2, [sp, #8]
	new_message.message_data = message_data;
   927ee:	9803      	ldr	r0, [sp, #12]
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   927f0:	eb07 1782 	add.w	r7, r7, r2, lsl #6
   927f4:	68fa      	ldr	r2, [r7, #12]
	new_message.message_data = message_data;
   927f6:	9013      	str	r0, [sp, #76]	; 0x4c
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   927f8:	0697      	lsls	r7, r2, #26
	new_message.recipient_handle = recipient_handle;
   927fa:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
	new_message.message_id = message_id;
   927fe:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
	new_message.message_recipient_type = recipient_type;
   92802:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	new_message.sender_handle = sender_handle;
   92806:	9310      	str	r3, [sp, #64]	; 0x40
	new_message.message_pointer = message_pointer;
   92808:	9314      	str	r3, [sp, #80]	; 0x50
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   9280a:	f57f aac3 	bpl.w	91d94 <mw_process_message+0x224>
		(void)mw_message_queue_insert(&new_message);
   9280e:	4630      	mov	r0, r6
   92810:	4b0a      	ldr	r3, [pc, #40]	; (9283c <mw_process_message+0xccc>)
   92812:	4798      	blx	r3
   92814:	f7ff babe 	b.w	91d94 <mw_process_message+0x224>
   92818:	000ab8cc 	.word	0x000ab8cc
   9281c:	000ab720 	.word	0x000ab720
   92820:	000ab734 	.word	0x000ab734
   92824:	000ab710 	.word	0x000ab710
   92828:	20071858 	.word	0x20071858
   9282c:	000ab764 	.word	0x000ab764
   92830:	20071fb1 	.word	0x20071fb1
   92834:	20071f5c 	.word	0x20071f5c
   92838:	20071f5e 	.word	0x20071f5e
   9283c:	00095bc1 	.word	0x00095bc1
   92840:	20071bd8 	.word	0x20071bd8
				window_id = get_window_id_for_handle(system_timer.data);
   92844:	6860      	ldr	r0, [r4, #4]
	if (window_handle == MW_INVALID_HANDLE)
   92846:	2800      	cmp	r0, #0
   92848:	f001 8259 	beq.w	93cfe <mw_process_message+0x218e>
		if (mw_all_windows[i].window_handle == window_handle &&
   9284c:	f8df a428 	ldr.w	sl, [pc, #1064]	; 92c78 <mw_process_message+0x1108>
   92850:	f8da 3014 	ldr.w	r3, [sl, #20]
   92854:	4298      	cmp	r0, r3
   92856:	f001 8556 	beq.w	94306 <mw_process_message+0x2796>
   9285a:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   9285e:	4298      	cmp	r0, r3
   92860:	f001 854a 	beq.w	942f8 <mw_process_message+0x2788>
   92864:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   92868:	4298      	cmp	r0, r3
   9286a:	f001 853e 	beq.w	942ea <mw_process_message+0x277a>
   9286e:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   92872:	4298      	cmp	r0, r3
   92874:	f001 8530 	beq.w	942d8 <mw_process_message+0x2768>
   92878:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   9287c:	4298      	cmp	r0, r3
   9287e:	f001 85a2 	beq.w	943c6 <mw_process_message+0x2856>
   92882:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   92886:	4298      	cmp	r0, r3
   92888:	f001 8596 	beq.w	943b8 <mw_process_message+0x2848>
   9288c:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   92890:	4298      	cmp	r0, r3
   92892:	f001 858a 	beq.w	943aa <mw_process_message+0x283a>
   92896:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   9289a:	4298      	cmp	r0, r3
   9289c:	f001 857e 	beq.w	9439c <mw_process_message+0x282c>
   928a0:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   928a4:	4298      	cmp	r0, r3
   928a6:	f001 8572 	beq.w	9438e <mw_process_message+0x281e>
   928aa:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   928ae:	4298      	cmp	r0, r3
   928b0:	f001 8566 	beq.w	94380 <mw_process_message+0x2810>
   928b4:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   928b8:	4298      	cmp	r0, r3
   928ba:	f001 855a 	beq.w	94372 <mw_process_message+0x2802>
   928be:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   928c2:	4298      	cmp	r0, r3
   928c4:	f001 86e3 	beq.w	9468e <mw_process_message+0x2b1e>
   928c8:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   928cc:	4298      	cmp	r0, r3
   928ce:	f001 86b4 	beq.w	9463a <mw_process_message+0x2aca>
   928d2:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   928d6:	4298      	cmp	r0, r3
   928d8:	f001 86a4 	beq.w	94624 <mw_process_message+0x2ab4>
   928dc:	250e      	movs	r5, #14
   928de:	2000      	movs	r0, #0
				MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   928e0:	4bda      	ldr	r3, [pc, #872]	; (92c4c <mw_process_message+0x10dc>)
   928e2:	f241 5298 	movw	r2, #5528	; 0x1598
   928e6:	49da      	ldr	r1, [pc, #872]	; (92c50 <mw_process_message+0x10e0>)
   928e8:	47c8      	blx	r9
				mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED;
   928ea:	eb0a 1385 	add.w	r3, sl, r5, lsl #6
   928ee:	68da      	ldr	r2, [r3, #12]
				mw_post_message(MW_MENU_BAR_ITEM_PRESSED_MESSAGE,
   928f0:	6865      	ldr	r5, [r4, #4]
				mw_all_windows[window_id].window_flags &= ~MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED;
   928f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   928f6:	60da      	str	r2, [r3, #12]
				mw_post_message(MW_MENU_BAR_ITEM_PRESSED_MESSAGE,
   928f8:	f893 7030 	ldrb.w	r7, [r3, #48]	; 0x30
	if (window_handle == MW_INVALID_HANDLE)
   928fc:	2d00      	cmp	r5, #0
   928fe:	d045      	beq.n	9298c <mw_process_message+0xe1c>
		if (mw_all_windows[i].window_handle == window_handle &&
   92900:	f8da 3014 	ldr.w	r3, [sl, #20]
   92904:	429d      	cmp	r5, r3
   92906:	f001 84df 	beq.w	942c8 <mw_process_message+0x2758>
   9290a:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   9290e:	429d      	cmp	r5, r3
   92910:	f001 84d2 	beq.w	942b8 <mw_process_message+0x2748>
   92914:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   92918:	429d      	cmp	r5, r3
   9291a:	f001 84c5 	beq.w	942a8 <mw_process_message+0x2738>
   9291e:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   92922:	429d      	cmp	r5, r3
   92924:	f001 84b6 	beq.w	94294 <mw_process_message+0x2724>
   92928:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   9292c:	429d      	cmp	r5, r3
   9292e:	f001 8612 	beq.w	94556 <mw_process_message+0x29e6>
   92932:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   92936:	429d      	cmp	r5, r3
   92938:	f001 8605 	beq.w	94546 <mw_process_message+0x29d6>
   9293c:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   92940:	429d      	cmp	r5, r3
   92942:	f001 85f8 	beq.w	94536 <mw_process_message+0x29c6>
   92946:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   9294a:	429d      	cmp	r5, r3
   9294c:	f001 85eb 	beq.w	94526 <mw_process_message+0x29b6>
   92950:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   92954:	429d      	cmp	r5, r3
   92956:	f001 8616 	beq.w	94586 <mw_process_message+0x2a16>
   9295a:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   9295e:	429d      	cmp	r5, r3
   92960:	f001 8609 	beq.w	94576 <mw_process_message+0x2a06>
   92964:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   92968:	429d      	cmp	r5, r3
   9296a:	f001 85fc 	beq.w	94566 <mw_process_message+0x29f6>
   9296e:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   92972:	429d      	cmp	r5, r3
   92974:	f001 8627 	beq.w	945c6 <mw_process_message+0x2a56>
   92978:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   9297c:	429d      	cmp	r5, r3
   9297e:	f001 867e 	beq.w	9467e <mw_process_message+0x2b0e>
   92982:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   92986:	429d      	cmp	r5, r3
   92988:	f001 866b 	beq.w	94662 <mw_process_message+0x2af2>
   9298c:	f04f 080e 	mov.w	r8, #14
   92990:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   92992:	4bae      	ldr	r3, [pc, #696]	; (92c4c <mw_process_message+0x10dc>)
   92994:	f241 5262 	movw	r2, #5474	; 0x1562
   92998:	49ae      	ldr	r1, [pc, #696]	; (92c54 <mw_process_message+0x10e4>)
   9299a:	47c8      	blx	r9
	new_message.message_recipient_type = recipient_type;
   9299c:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   9299e:	2118      	movs	r1, #24
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   929a0:	eb0a 1288 	add.w	r2, sl, r8, lsl #6
   929a4:	68d2      	ldr	r2, [r2, #12]
	new_message.recipient_handle = recipient_handle;
   929a6:	9511      	str	r5, [sp, #68]	; 0x44
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   929a8:	0695      	lsls	r5, r2, #26
	new_message.message_data = message_data;
   929aa:	9713      	str	r7, [sp, #76]	; 0x4c
	new_message.message_id = message_id;
   929ac:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
	new_message.message_recipient_type = recipient_type;
   929b0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	new_message.sender_handle = sender_handle;
   929b4:	9310      	str	r3, [sp, #64]	; 0x40
	new_message.message_pointer = message_pointer;
   929b6:	9314      	str	r3, [sp, #80]	; 0x50
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   929b8:	d502      	bpl.n	929c0 <mw_process_message+0xe50>
		(void)mw_message_queue_insert(&new_message);
   929ba:	4630      	mov	r0, r6
   929bc:	4ba6      	ldr	r3, [pc, #664]	; (92c58 <mw_process_message+0x10e8>)
   929be:	4798      	blx	r3
				mw_paint_window_frame(system_timer.data, MW_WINDOW_FRAME_COMPONENT_MENU_BAR);
   929c0:	6863      	ldr	r3, [r4, #4]
	if (window_handle == MW_INVALID_HANDLE)
   929c2:	2b00      	cmp	r3, #0
   929c4:	d045      	beq.n	92a52 <mw_process_message+0xee2>
		if (mw_all_windows[i].window_handle == window_handle &&
   929c6:	f8da 2014 	ldr.w	r2, [sl, #20]
   929ca:	4293      	cmp	r3, r2
   929cc:	f001 845c 	beq.w	94288 <mw_process_message+0x2718>
   929d0:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   929d4:	4293      	cmp	r3, r2
   929d6:	f001 8451 	beq.w	9427c <mw_process_message+0x270c>
   929da:	f8da 2094 	ldr.w	r2, [sl, #148]	; 0x94
   929de:	4293      	cmp	r3, r2
   929e0:	f001 8446 	beq.w	94270 <mw_process_message+0x2700>
   929e4:	f8da 20d4 	ldr.w	r2, [sl, #212]	; 0xd4
   929e8:	4293      	cmp	r3, r2
   929ea:	f001 842b 	beq.w	94244 <mw_process_message+0x26d4>
   929ee:	f8da 2114 	ldr.w	r2, [sl, #276]	; 0x114
   929f2:	4293      	cmp	r3, r2
   929f4:	f001 8590 	beq.w	94518 <mw_process_message+0x29a8>
   929f8:	f8da 2154 	ldr.w	r2, [sl, #340]	; 0x154
   929fc:	4293      	cmp	r3, r2
   929fe:	f001 8584 	beq.w	9450a <mw_process_message+0x299a>
   92a02:	f8da 2194 	ldr.w	r2, [sl, #404]	; 0x194
   92a06:	4293      	cmp	r3, r2
   92a08:	f001 8578 	beq.w	944fc <mw_process_message+0x298c>
   92a0c:	f8da 21d4 	ldr.w	r2, [sl, #468]	; 0x1d4
   92a10:	4293      	cmp	r3, r2
   92a12:	f001 856c 	beq.w	944ee <mw_process_message+0x297e>
   92a16:	f8da 2214 	ldr.w	r2, [sl, #532]	; 0x214
   92a1a:	4293      	cmp	r3, r2
   92a1c:	f001 8560 	beq.w	944e0 <mw_process_message+0x2970>
   92a20:	f8da 2254 	ldr.w	r2, [sl, #596]	; 0x254
   92a24:	4293      	cmp	r3, r2
   92a26:	f001 8554 	beq.w	944d2 <mw_process_message+0x2962>
   92a2a:	f8da 2294 	ldr.w	r2, [sl, #660]	; 0x294
   92a2e:	4293      	cmp	r3, r2
   92a30:	f001 8548 	beq.w	944c4 <mw_process_message+0x2954>
   92a34:	f8da 22d4 	ldr.w	r2, [sl, #724]	; 0x2d4
   92a38:	4293      	cmp	r3, r2
   92a3a:	f001 85ec 	beq.w	94616 <mw_process_message+0x2aa6>
   92a3e:	f8da 2314 	ldr.w	r2, [sl, #788]	; 0x314
   92a42:	4293      	cmp	r3, r2
   92a44:	f001 8606 	beq.w	94654 <mw_process_message+0x2ae4>
   92a48:	f8da 2354 	ldr.w	r2, [sl, #852]	; 0x354
   92a4c:	4293      	cmp	r3, r2
   92a4e:	f001 85fb 	beq.w	94648 <mw_process_message+0x2ad8>
		MW_ASSERT((bool)false, "Bad window handle");
   92a52:	4b7e      	ldr	r3, [pc, #504]	; (92c4c <mw_process_message+0x10dc>)
   92a54:	f241 22bf 	movw	r2, #4799	; 0x12bf
   92a58:	4980      	ldr	r1, [pc, #512]	; (92c5c <mw_process_message+0x10ec>)
   92a5a:	2000      	movs	r0, #0
   92a5c:	47c8      	blx	r9
   92a5e:	f7ff b93b 	b.w	91cd8 <mw_process_message+0x168>
				do_paint_control_rect(message.recipient_handle, (mw_util_rect_t *)message.message_pointer);
   92a62:	9914      	ldr	r1, [sp, #80]	; 0x50
   92a64:	9811      	ldr	r0, [sp, #68]	; 0x44
   92a66:	4b7e      	ldr	r3, [pc, #504]	; (92c60 <mw_process_message+0x10f0>)
   92a68:	4798      	blx	r3
				break;
   92a6a:	f7ff b99d 	b.w	91da8 <mw_process_message+0x238>
				do_paint_control(message.recipient_handle);
   92a6e:	9811      	ldr	r0, [sp, #68]	; 0x44
   92a70:	4b7c      	ldr	r3, [pc, #496]	; (92c64 <mw_process_message+0x10f4>)
   92a72:	4798      	blx	r3
				break;
   92a74:	f7ff b998 	b.w	91da8 <mw_process_message+0x238>
				do_paint_window_client_rect(message.recipient_handle, (mw_util_rect_t *)message.message_pointer);
   92a78:	9d14      	ldr	r5, [sp, #80]	; 0x50
   92a7a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
	MW_ASSERT(invalid_rect != (void*)0, "Null pointer argument");
   92a7e:	1c28      	adds	r0, r5, #0
   92a80:	bf18      	it	ne
   92a82:	2001      	movne	r0, #1
   92a84:	4b78      	ldr	r3, [pc, #480]	; (92c68 <mw_process_message+0x10f8>)
   92a86:	f640 1249 	movw	r2, #2377	; 0x949
   92a8a:	4978      	ldr	r1, [pc, #480]	; (92c6c <mw_process_message+0x10fc>)
   92a8c:	47c8      	blx	r9
	if (window_handle == MW_INVALID_HANDLE)
   92a8e:	f1b8 0f00 	cmp.w	r8, #0
   92a92:	f001 81ca 	beq.w	93e2a <mw_process_message+0x22ba>
		if (mw_all_windows[i].window_handle == window_handle &&
   92a96:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 92c78 <mw_process_message+0x1108>
   92a9a:	f8da 3014 	ldr.w	r3, [sl, #20]
   92a9e:	4598      	cmp	r8, r3
   92aa0:	f001 8644 	beq.w	9472c <mw_process_message+0x2bbc>
   92aa4:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   92aa8:	4598      	cmp	r8, r3
   92aaa:	f001 8701 	beq.w	948b0 <mw_process_message+0x2d40>
   92aae:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   92ab2:	4598      	cmp	r8, r3
   92ab4:	f001 86f2 	beq.w	9489c <mw_process_message+0x2d2c>
   92ab8:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   92abc:	4598      	cmp	r8, r3
   92abe:	f001 8729 	beq.w	94914 <mw_process_message+0x2da4>
   92ac2:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   92ac6:	4598      	cmp	r8, r3
   92ac8:	f001 871a 	beq.w	94900 <mw_process_message+0x2d90>
   92acc:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   92ad0:	4598      	cmp	r8, r3
   92ad2:	f001 8747 	beq.w	94964 <mw_process_message+0x2df4>
   92ad6:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   92ada:	4598      	cmp	r8, r3
   92adc:	f001 8738 	beq.w	94950 <mw_process_message+0x2de0>
   92ae0:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   92ae4:	4598      	cmp	r8, r3
   92ae6:	f001 8729 	beq.w	9493c <mw_process_message+0x2dcc>
   92aea:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   92aee:	4598      	cmp	r8, r3
   92af0:	f001 871a 	beq.w	94928 <mw_process_message+0x2db8>
   92af4:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   92af8:	4598      	cmp	r8, r3
   92afa:	f001 879d 	beq.w	94a38 <mw_process_message+0x2ec8>
   92afe:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   92b02:	4598      	cmp	r8, r3
   92b04:	f001 878e 	beq.w	94a24 <mw_process_message+0x2eb4>
   92b08:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   92b0c:	4598      	cmp	r8, r3
   92b0e:	f001 877f 	beq.w	94a10 <mw_process_message+0x2ea0>
   92b12:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   92b16:	4598      	cmp	r8, r3
   92b18:	f001 8770 	beq.w	949fc <mw_process_message+0x2e8c>
   92b1c:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   92b20:	4598      	cmp	r8, r3
   92b22:	f001 85f9 	beq.w	94718 <mw_process_message+0x2ba8>
   92b26:	230e      	movs	r3, #14
   92b28:	2000      	movs	r0, #0
		return (MW_MAX_WINDOW_COUNT);
   92b2a:	461c      	mov	r4, r3
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92b2c:	019b      	lsls	r3, r3, #6
   92b2e:	461e      	mov	r6, r3
   92b30:	9302      	str	r3, [sp, #8]
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   92b32:	f640 124d 	movw	r2, #2381	; 0x94d
   92b36:	4b45      	ldr	r3, [pc, #276]	; (92c4c <mw_process_message+0x10dc>)
   92b38:	494c      	ldr	r1, [pc, #304]	; (92c6c <mw_process_message+0x10fc>)
   92b3a:	47c8      	blx	r9
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   92b3c:	eb0a 0306 	add.w	r3, sl, r6
   92b40:	68da      	ldr	r2, [r3, #12]
   92b42:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92b46:	2928      	cmp	r1, #40	; 0x28
   92b48:	d104      	bne.n	92b54 <mw_process_message+0xfe4>
			(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   92b4a:	06d1      	lsls	r1, r2, #27
   92b4c:	d402      	bmi.n	92b54 <mw_process_message+0xfe4>
			(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MINIMISED) == MW_WINDOW_FLAG_IS_MINIMISED ||
   92b4e:	2c00      	cmp	r4, #0
   92b50:	f042 80dc 	bne.w	94d0c <mw_process_message+0x319c>
		  		paint_all_controls_in_window_rect(message.recipient_handle, (mw_util_rect_t *)message.message_pointer);
   92b54:	9d11      	ldr	r5, [sp, #68]	; 0x44
   92b56:	9e14      	ldr	r6, [sp, #80]	; 0x50
	if (window_handle == MW_INVALID_HANDLE)
   92b58:	2d00      	cmp	r5, #0
   92b5a:	d045      	beq.n	92be8 <mw_process_message+0x1078>
		if (mw_all_windows[i].window_handle == window_handle &&
   92b5c:	f8da 3014 	ldr.w	r3, [sl, #20]
   92b60:	429d      	cmp	r5, r3
   92b62:	f001 85d0 	beq.w	94706 <mw_process_message+0x2b96>
   92b66:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   92b6a:	429d      	cmp	r5, r3
   92b6c:	f001 85c2 	beq.w	946f4 <mw_process_message+0x2b84>
   92b70:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   92b74:	429d      	cmp	r5, r3
   92b76:	f001 85b4 	beq.w	946e2 <mw_process_message+0x2b72>
   92b7a:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   92b7e:	429d      	cmp	r5, r3
   92b80:	f001 871e 	beq.w	949c0 <mw_process_message+0x2e50>
   92b84:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   92b88:	429d      	cmp	r5, r3
   92b8a:	f001 8710 	beq.w	949ae <mw_process_message+0x2e3e>
   92b8e:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   92b92:	429d      	cmp	r5, r3
   92b94:	f001 8702 	beq.w	9499c <mw_process_message+0x2e2c>
   92b98:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   92b9c:	429d      	cmp	r5, r3
   92b9e:	f001 86f4 	beq.w	9498a <mw_process_message+0x2e1a>
   92ba2:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   92ba6:	429d      	cmp	r5, r3
   92ba8:	f001 86e6 	beq.w	94978 <mw_process_message+0x2e08>
   92bac:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   92bb0:	429d      	cmp	r5, r3
   92bb2:	f001 8766 	beq.w	94a82 <mw_process_message+0x2f12>
   92bb6:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   92bba:	429d      	cmp	r5, r3
   92bbc:	f001 8758 	beq.w	94a70 <mw_process_message+0x2f00>
   92bc0:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   92bc4:	429d      	cmp	r5, r3
   92bc6:	f001 874a 	beq.w	94a5e <mw_process_message+0x2eee>
   92bca:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   92bce:	429d      	cmp	r5, r3
   92bd0:	f001 873c 	beq.w	94a4c <mw_process_message+0x2edc>
   92bd4:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   92bd8:	429d      	cmp	r5, r3
   92bda:	f001 8673 	beq.w	948c4 <mw_process_message+0x2d54>
   92bde:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   92be2:	429d      	cmp	r5, r3
   92be4:	f001 864e 	beq.w	94884 <mw_process_message+0x2d14>
   92be8:	270e      	movs	r7, #14
   92bea:	2000      	movs	r0, #0
   92bec:	4c20      	ldr	r4, [pc, #128]	; (92c70 <mw_process_message+0x1100>)
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   92bee:	4b17      	ldr	r3, [pc, #92]	; (92c4c <mw_process_message+0x10dc>)
   92bf0:	f640 220a 	movw	r2, #2570	; 0xa0a
   92bf4:	491f      	ldr	r1, [pc, #124]	; (92c74 <mw_process_message+0x1104>)
			invalid_rect_copy.y = invalid_rect->y + mw_all_windows[window_id].client_rect.y;
   92bf6:	eb0a 1a87 	add.w	sl, sl, r7, lsl #6
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   92bfa:	47c8      	blx	r9
			do_paint_control_rect(mw_all_controls[i].control_handle, &invalid_rect_copy);
   92bfc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 92c60 <mw_process_message+0x10f0>
   92c00:	f504 7740 	add.w	r7, r4, #768	; 0x300
   92c04:	e003      	b.n	92c0e <mw_process_message+0x109e>
   92c06:	3420      	adds	r4, #32
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   92c08:	42a7      	cmp	r7, r4
   92c0a:	f43f a8cd 	beq.w	91da8 <mw_process_message+0x238>
		if (mw_all_controls[i].parent_handle == window_handle &&
   92c0e:	6963      	ldr	r3, [r4, #20]
   92c10:	429d      	cmp	r5, r3
   92c12:	d1f8      	bne.n	92c06 <mw_process_message+0x1096>
				(mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   92c14:	8ba3      	ldrh	r3, [r4, #28]
   92c16:	f003 0305 	and.w	r3, r3, #5
   92c1a:	2b05      	cmp	r3, #5
   92c1c:	d1f3      	bne.n	92c06 <mw_process_message+0x1096>
			invalid_rect_copy.y = invalid_rect->y + mw_all_windows[window_id].client_rect.y;
   92c1e:	8872      	ldrh	r2, [r6, #2]
   92c20:	f8ba 1022 	ldrh.w	r1, [sl, #34]	; 0x22
			invalid_rect_copy.x = invalid_rect->x + mw_all_windows[window_id].client_rect.x;
   92c24:	8833      	ldrh	r3, [r6, #0]
			invalid_rect_copy.y = invalid_rect->y + mw_all_windows[window_id].client_rect.y;
   92c26:	440a      	add	r2, r1
			invalid_rect_copy.x = invalid_rect->x + mw_all_windows[window_id].client_rect.x;
   92c28:	f8ba 1020 	ldrh.w	r1, [sl, #32]
			invalid_rect_copy.y -= mw_all_controls[i].control_rect.y;
   92c2c:	89e0      	ldrh	r0, [r4, #14]
			invalid_rect_copy.x = invalid_rect->x + mw_all_windows[window_id].client_rect.x;
   92c2e:	440b      	add	r3, r1
			invalid_rect_copy.x -= mw_all_controls[i].control_rect.x;
   92c30:	89a1      	ldrh	r1, [r4, #12]
			invalid_rect_copy.y -= mw_all_controls[i].control_rect.y;
   92c32:	1a12      	subs	r2, r2, r0
			invalid_rect_copy.x -= mw_all_controls[i].control_rect.x;
   92c34:	1a5b      	subs	r3, r3, r1
			invalid_rect_copy.y -= mw_all_controls[i].control_rect.y;
   92c36:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
			invalid_rect_copy.x -= mw_all_controls[i].control_rect.x;
   92c3a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
			invalid_rect_copy.width = invalid_rect->width;
   92c3e:	6873      	ldr	r3, [r6, #4]
			do_paint_control_rect(mw_all_controls[i].control_handle, &invalid_rect_copy);
   92c40:	a90e      	add	r1, sp, #56	; 0x38
   92c42:	69a0      	ldr	r0, [r4, #24]
			invalid_rect_copy.width = invalid_rect->width;
   92c44:	930f      	str	r3, [sp, #60]	; 0x3c
			do_paint_control_rect(mw_all_controls[i].control_handle, &invalid_rect_copy);
   92c46:	47c0      	blx	r8
   92c48:	e7dd      	b.n	92c06 <mw_process_message+0x1096>
   92c4a:	bf00      	nop
   92c4c:	000ab764 	.word	0x000ab764
   92c50:	000ab720 	.word	0x000ab720
   92c54:	000ab710 	.word	0x000ab710
   92c58:	00095bc1 	.word	0x00095bc1
   92c5c:	000ab580 	.word	0x000ab580
   92c60:	0008ab91 	.word	0x0008ab91
   92c64:	00089e55 	.word	0x00089e55
   92c68:	000a6618 	.word	0x000a6618
   92c6c:	000ab3d0 	.word	0x000ab3d0
   92c70:	20071858 	.word	0x20071858
   92c74:	000ab404 	.word	0x000ab404
   92c78:	20071bd8 	.word	0x20071bd8
				do_paint_window_client(message.recipient_handle);
   92c7c:	9811      	ldr	r0, [sp, #68]	; 0x44
   92c7e:	4bcb      	ldr	r3, [pc, #812]	; (92fac <mw_process_message+0x143c>)
   92c80:	4798      	blx	r3
			  	paint_all_controls_in_window(message.recipient_handle);
   92c82:	9d11      	ldr	r5, [sp, #68]	; 0x44
	if (window_handle == MW_INVALID_HANDLE)
   92c84:	2d00      	cmp	r5, #0
   92c86:	f43f a88f 	beq.w	91da8 <mw_process_message+0x238>
		if (mw_all_windows[i].window_handle == window_handle &&
   92c8a:	f8df a330 	ldr.w	sl, [pc, #816]	; 92fbc <mw_process_message+0x144c>
   92c8e:	f8da 3014 	ldr.w	r3, [sl, #20]
   92c92:	429d      	cmp	r5, r3
   92c94:	f001 85ef 	beq.w	94876 <mw_process_message+0x2d06>
   92c98:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   92c9c:	429d      	cmp	r5, r3
   92c9e:	f001 85e3 	beq.w	94868 <mw_process_message+0x2cf8>
   92ca2:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   92ca6:	429d      	cmp	r5, r3
   92ca8:	f001 85d7 	beq.w	9485a <mw_process_message+0x2cea>
   92cac:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   92cb0:	429d      	cmp	r5, r3
   92cb2:	f001 8610 	beq.w	948d6 <mw_process_message+0x2d66>
   92cb6:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   92cba:	429d      	cmp	r5, r3
   92cbc:	f001 8619 	beq.w	948f2 <mw_process_message+0x2d82>
   92cc0:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   92cc4:	429d      	cmp	r5, r3
   92cc6:	f001 860d 	beq.w	948e4 <mw_process_message+0x2d74>
   92cca:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   92cce:	429d      	cmp	r5, r3
   92cd0:	f001 86f5 	beq.w	94abe <mw_process_message+0x2f4e>
   92cd4:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   92cd8:	429d      	cmp	r5, r3
   92cda:	f001 86e9 	beq.w	94ab0 <mw_process_message+0x2f40>
   92cde:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   92ce2:	429d      	cmp	r5, r3
   92ce4:	f001 86dd 	beq.w	94aa2 <mw_process_message+0x2f32>
   92ce8:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   92cec:	429d      	cmp	r5, r3
   92cee:	f001 86d1 	beq.w	94a94 <mw_process_message+0x2f24>
   92cf2:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   92cf6:	429d      	cmp	r5, r3
   92cf8:	f001 8672 	beq.w	949e0 <mw_process_message+0x2e70>
   92cfc:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   92d00:	429d      	cmp	r5, r3
   92d02:	f001 8666 	beq.w	949d2 <mw_process_message+0x2e62>
   92d06:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   92d0a:	429d      	cmp	r5, r3
   92d0c:	f001 866f 	beq.w	949ee <mw_process_message+0x2e7e>
   92d10:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   92d14:	429d      	cmp	r5, r3
   92d16:	f47f a847 	bne.w	91da8 <mw_process_message+0x238>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92d1a:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   92d1e:	0699      	lsls	r1, r3, #26
   92d20:	f57f a842 	bpl.w	91da8 <mw_process_message+0x238>
   92d24:	4ca2      	ldr	r4, [pc, #648]	; (92fb0 <mw_process_message+0x1440>)
			do_paint_control(mw_all_controls[i].control_handle);
   92d26:	4fa3      	ldr	r7, [pc, #652]	; (92fb4 <mw_process_message+0x1444>)
   92d28:	f504 7640 	add.w	r6, r4, #768	; 0x300
   92d2c:	e003      	b.n	92d36 <mw_process_message+0x11c6>
   92d2e:	3420      	adds	r4, #32
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   92d30:	42a6      	cmp	r6, r4
   92d32:	f43f a839 	beq.w	91da8 <mw_process_message+0x238>
		if (mw_all_controls[i].parent_handle == window_handle &&
   92d36:	6963      	ldr	r3, [r4, #20]
   92d38:	429d      	cmp	r5, r3
   92d3a:	d1f8      	bne.n	92d2e <mw_process_message+0x11be>
				(mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   92d3c:	8ba3      	ldrh	r3, [r4, #28]
   92d3e:	f003 0305 	and.w	r3, r3, #5
   92d42:	2b05      	cmp	r3, #5
   92d44:	d1f3      	bne.n	92d2e <mw_process_message+0x11be>
			do_paint_control(mw_all_controls[i].control_handle);
   92d46:	69a0      	ldr	r0, [r4, #24]
   92d48:	47b8      	blx	r7
   92d4a:	e7f0      	b.n	92d2e <mw_process_message+0x11be>
				do_paint_window_frame(message.recipient_handle, (uint8_t)message.message_data);
   92d4c:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   92d50:	9811      	ldr	r0, [sp, #68]	; 0x44
   92d52:	4b99      	ldr	r3, [pc, #612]	; (92fb8 <mw_process_message+0x1448>)
   92d54:	4798      	blx	r3
				break;
   92d56:	f7ff b827 	b.w	91da8 <mw_process_message+0x238>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92d5a:	f8df a260 	ldr.w	sl, [pc, #608]	; 92fbc <mw_process_message+0x144c>
   92d5e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
   92d62:	f003 0228 	and.w	r2, r3, #40	; 0x28
   92d66:	2a28      	cmp	r2, #40	; 0x28
   92d68:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92d6c:	bf08      	it	eq
   92d6e:	f083 0310 	eoreq.w	r3, r3, #16
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92d72:	f002 0128 	and.w	r1, r2, #40	; 0x28
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92d76:	bf0c      	ite	eq
   92d78:	f3c3 1300 	ubfxeq	r3, r3, #4, #1
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92d7c:	2300      	movne	r3, #0
   92d7e:	2928      	cmp	r1, #40	; 0x28
   92d80:	d102      	bne.n	92d88 <mw_process_message+0x1218>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92d82:	06d7      	lsls	r7, r2, #27
			displayed_windows++;
   92d84:	bf58      	it	pl
   92d86:	3301      	addpl	r3, #1
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92d88:	f8da 20cc 	ldr.w	r2, [sl, #204]	; 0xcc
   92d8c:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92d90:	2928      	cmp	r1, #40	; 0x28
   92d92:	d103      	bne.n	92d9c <mw_process_message+0x122c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92d94:	06d6      	lsls	r6, r2, #27
			displayed_windows++;
   92d96:	bf5c      	itt	pl
   92d98:	3301      	addpl	r3, #1
   92d9a:	b2db      	uxtbpl	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92d9c:	f8da 210c 	ldr.w	r2, [sl, #268]	; 0x10c
   92da0:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92da4:	2928      	cmp	r1, #40	; 0x28
   92da6:	d103      	bne.n	92db0 <mw_process_message+0x1240>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92da8:	06d5      	lsls	r5, r2, #27
			displayed_windows++;
   92daa:	bf5c      	itt	pl
   92dac:	3301      	addpl	r3, #1
   92dae:	b2db      	uxtbpl	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92db0:	f8da 214c 	ldr.w	r2, [sl, #332]	; 0x14c
   92db4:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92db8:	2928      	cmp	r1, #40	; 0x28
   92dba:	d103      	bne.n	92dc4 <mw_process_message+0x1254>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92dbc:	06d4      	lsls	r4, r2, #27
			displayed_windows++;
   92dbe:	bf5c      	itt	pl
   92dc0:	3301      	addpl	r3, #1
   92dc2:	b2db      	uxtbpl	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92dc4:	f8da 218c 	ldr.w	r2, [sl, #396]	; 0x18c
   92dc8:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92dcc:	2928      	cmp	r1, #40	; 0x28
   92dce:	d103      	bne.n	92dd8 <mw_process_message+0x1268>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92dd0:	06d0      	lsls	r0, r2, #27
			displayed_windows++;
   92dd2:	bf5c      	itt	pl
   92dd4:	3301      	addpl	r3, #1
   92dd6:	b2db      	uxtbpl	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92dd8:	f8da 21cc 	ldr.w	r2, [sl, #460]	; 0x1cc
   92ddc:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92de0:	2928      	cmp	r1, #40	; 0x28
   92de2:	d103      	bne.n	92dec <mw_process_message+0x127c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92de4:	06d1      	lsls	r1, r2, #27
			displayed_windows++;
   92de6:	bf5c      	itt	pl
   92de8:	3301      	addpl	r3, #1
   92dea:	b2db      	uxtbpl	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92dec:	f8da 220c 	ldr.w	r2, [sl, #524]	; 0x20c
   92df0:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92df4:	2928      	cmp	r1, #40	; 0x28
   92df6:	d103      	bne.n	92e00 <mw_process_message+0x1290>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92df8:	06d2      	lsls	r2, r2, #27
			displayed_windows++;
   92dfa:	bf5c      	itt	pl
   92dfc:	3301      	addpl	r3, #1
   92dfe:	b2db      	uxtbpl	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92e00:	f8da 224c 	ldr.w	r2, [sl, #588]	; 0x24c
   92e04:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92e08:	2928      	cmp	r1, #40	; 0x28
   92e0a:	d103      	bne.n	92e14 <mw_process_message+0x12a4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92e0c:	06d7      	lsls	r7, r2, #27
			displayed_windows++;
   92e0e:	bf5c      	itt	pl
   92e10:	3301      	addpl	r3, #1
   92e12:	b2db      	uxtbpl	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92e14:	f8da 228c 	ldr.w	r2, [sl, #652]	; 0x28c
   92e18:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92e1c:	2928      	cmp	r1, #40	; 0x28
   92e1e:	d103      	bne.n	92e28 <mw_process_message+0x12b8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92e20:	06d6      	lsls	r6, r2, #27
			displayed_windows++;
   92e22:	bf5c      	itt	pl
   92e24:	3301      	addpl	r3, #1
   92e26:	b2db      	uxtbpl	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92e28:	f8da 22cc 	ldr.w	r2, [sl, #716]	; 0x2cc
   92e2c:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92e30:	2928      	cmp	r1, #40	; 0x28
   92e32:	d103      	bne.n	92e3c <mw_process_message+0x12cc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92e34:	06d5      	lsls	r5, r2, #27
			displayed_windows++;
   92e36:	bf5c      	itt	pl
   92e38:	3301      	addpl	r3, #1
   92e3a:	b2db      	uxtbpl	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92e3c:	f8da 230c 	ldr.w	r2, [sl, #780]	; 0x30c
   92e40:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92e44:	2928      	cmp	r1, #40	; 0x28
   92e46:	d103      	bne.n	92e50 <mw_process_message+0x12e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92e48:	06d4      	lsls	r4, r2, #27
   92e4a:	d401      	bmi.n	92e50 <mw_process_message+0x12e0>
			displayed_windows++;
   92e4c:	3301      	adds	r3, #1
   92e4e:	b2db      	uxtb	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92e50:	f8da 234c 	ldr.w	r2, [sl, #844]	; 0x34c
   92e54:	f002 0128 	and.w	r1, r2, #40	; 0x28
   92e58:	2928      	cmp	r1, #40	; 0x28
   92e5a:	d103      	bne.n	92e64 <mw_process_message+0x12f4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92e5c:	06d0      	lsls	r0, r2, #27
			displayed_windows++;
   92e5e:	bf5c      	itt	pl
   92e60:	3301      	addpl	r3, #1
   92e62:	b2db      	uxtbpl	r3, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92e64:	2700      	movs	r7, #0
   92e66:	463c      	mov	r4, r7
	visible_windows = find_number_of_displayed_windows() + 1U;
   92e68:	3301      	adds	r3, #1
				do_paint_window_frame(mw_all_windows[window_id].window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   92e6a:	4d53      	ldr	r5, [pc, #332]	; (92fb8 <mw_process_message+0x1448>)
			do_paint_control(mw_all_controls[i].control_handle);
   92e6c:	4e51      	ldr	r6, [pc, #324]	; (92fb4 <mw_process_message+0x1444>)
	visible_windows = find_number_of_displayed_windows() + 1U;
   92e6e:	fa5f f883 	uxtb.w	r8, r3
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92e72:	2200      	movs	r2, #0
   92e74:	4b51      	ldr	r3, [pc, #324]	; (92fbc <mw_process_message+0x144c>)
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == MW_WINDOW_FLAG_IS_VISIBLE &&
   92e76:	68d9      	ldr	r1, [r3, #12]
   92e78:	f001 0028 	and.w	r0, r1, #40	; 0x28
   92e7c:	2828      	cmp	r0, #40	; 0x28
   92e7e:	d106      	bne.n	92e8e <mw_process_message+0x131e>
				(mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED &&
   92e80:	06c9      	lsls	r1, r1, #27
   92e82:	d404      	bmi.n	92e8e <mw_process_message+0x131e>
			if (mw_all_windows[window_id].z_order == z_order)
   92e84:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
   92e88:	42a1      	cmp	r1, r4
   92e8a:	f000 864c 	beq.w	93b26 <mw_process_message+0x1fb6>
   92e8e:	3201      	adds	r2, #1
	for (window_id = MW_ROOT_WINDOW_ID; window_id < MW_MAX_WINDOW_COUNT; window_id++)
   92e90:	2a0e      	cmp	r2, #14
   92e92:	f103 0340 	add.w	r3, r3, #64	; 0x40
   92e96:	d1ee      	bne.n	92e76 <mw_process_message+0x1306>
   92e98:	3701      	adds	r7, #1
	while (windows_painted < visible_windows)
   92e9a:	b2fc      	uxtb	r4, r7
   92e9c:	4544      	cmp	r4, r8
   92e9e:	d3e8      	bcc.n	92e72 <mw_process_message+0x1302>
   92ea0:	f7fe bf82 	b.w	91da8 <mw_process_message+0x238>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92ea4:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   92ea8:	069c      	lsls	r4, r3, #26
   92eaa:	f57f a824 	bpl.w	91ef6 <mw_process_message+0x386>
   92eae:	2400      	movs	r4, #0
   92eb0:	4658      	mov	r0, fp
   92eb2:	e409      	b.n	926c8 <mw_process_message+0xb58>
   92eb4:	f8df a104 	ldr.w	sl, [pc, #260]	; 92fbc <mw_process_message+0x144c>
   92eb8:	f8da 0014 	ldr.w	r0, [sl, #20]
   92ebc:	4283      	cmp	r3, r0
   92ebe:	f001 8146 	beq.w	9414e <mw_process_message+0x25de>
   92ec2:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
   92ec6:	4283      	cmp	r3, r0
   92ec8:	f001 8139 	beq.w	9413e <mw_process_message+0x25ce>
   92ecc:	f8da 0094 	ldr.w	r0, [sl, #148]	; 0x94
   92ed0:	4283      	cmp	r3, r0
   92ed2:	f001 814c 	beq.w	9416e <mw_process_message+0x25fe>
   92ed6:	f8da 00d4 	ldr.w	r0, [sl, #212]	; 0xd4
   92eda:	4283      	cmp	r3, r0
   92edc:	f001 813f 	beq.w	9415e <mw_process_message+0x25ee>
   92ee0:	f8da 0114 	ldr.w	r0, [sl, #276]	; 0x114
   92ee4:	4283      	cmp	r3, r0
   92ee6:	f001 8152 	beq.w	9418e <mw_process_message+0x261e>
   92eea:	f8da 0154 	ldr.w	r0, [sl, #340]	; 0x154
   92eee:	4283      	cmp	r3, r0
   92ef0:	f001 8145 	beq.w	9417e <mw_process_message+0x260e>
   92ef4:	f8da 0194 	ldr.w	r0, [sl, #404]	; 0x194
   92ef8:	4283      	cmp	r3, r0
   92efa:	f001 8158 	beq.w	941ae <mw_process_message+0x263e>
   92efe:	f8da 01d4 	ldr.w	r0, [sl, #468]	; 0x1d4
   92f02:	4283      	cmp	r3, r0
   92f04:	f001 814b 	beq.w	9419e <mw_process_message+0x262e>
   92f08:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
   92f0c:	4283      	cmp	r3, r0
   92f0e:	f001 8166 	beq.w	941de <mw_process_message+0x266e>
   92f12:	f8da 0254 	ldr.w	r0, [sl, #596]	; 0x254
   92f16:	4283      	cmp	r3, r0
   92f18:	f001 8159 	beq.w	941ce <mw_process_message+0x265e>
   92f1c:	f8da 0294 	ldr.w	r0, [sl, #660]	; 0x294
   92f20:	4283      	cmp	r3, r0
   92f22:	f001 814c 	beq.w	941be <mw_process_message+0x264e>
   92f26:	f8da 02d4 	ldr.w	r0, [sl, #724]	; 0x2d4
   92f2a:	4283      	cmp	r3, r0
   92f2c:	f001 815f 	beq.w	941ee <mw_process_message+0x267e>
   92f30:	f8da 0314 	ldr.w	r0, [sl, #788]	; 0x314
   92f34:	4283      	cmp	r3, r0
   92f36:	f001 8162 	beq.w	941fe <mw_process_message+0x268e>
   92f3a:	f8da 0354 	ldr.w	r0, [sl, #852]	; 0x354
   92f3e:	4283      	cmp	r3, r0
   92f40:	f47e aebd 	bne.w	91cbe <mw_process_message+0x14e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92f44:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   92f48:	069e      	lsls	r6, r3, #26
   92f4a:	f57e aeb8 	bpl.w	91cbe <mw_process_message+0x14e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   92f4e:	200d      	movs	r0, #13
			if (touch_message_id == MW_TOUCH_DRAG_MESSAGE || touch_message_id == MW_TOUCH_UP_MESSAGE)
   92f50:	9b02      	ldr	r3, [sp, #8]
   92f52:	3b16      	subs	r3, #22
   92f54:	2b01      	cmp	r3, #1
   92f56:	f63f aba1 	bhi.w	9269c <mw_process_message+0xb2c>
				if (check_and_process_touch_on_horiz_window_scroll_bar(window_to_receive_message_id, touch_x, touch_y, touch_message_id, false))
   92f5a:	2300      	movs	r3, #0
   92f5c:	4f18      	ldr	r7, [pc, #96]	; (92fc0 <mw_process_message+0x1450>)
   92f5e:	9300      	str	r3, [sp, #0]
   92f60:	9b02      	ldr	r3, [sp, #8]
   92f62:	47b8      	blx	r7
   92f64:	2800      	cmp	r0, #0
   92f66:	f43f a847 	beq.w	91ff8 <mw_process_message+0x488>
					if (touch_message_id == MW_TOUCH_UP_MESSAGE)
   92f6a:	9b02      	ldr	r3, [sp, #8]
   92f6c:	2b16      	cmp	r3, #22
   92f6e:	f47f ab95 	bne.w	9269c <mw_process_message+0xb2c>
   92f72:	f7fe bea4 	b.w	91cbe <mw_process_message+0x14e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92f76:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   92f7a:	0699      	lsls	r1, r3, #26
   92f7c:	f57e afc0 	bpl.w	91f00 <mw_process_message+0x390>
   92f80:	2401      	movs	r4, #1
   92f82:	4658      	mov	r0, fp
   92f84:	f7ff bba0 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92f88:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   92f8c:	069a      	lsls	r2, r3, #26
   92f8e:	f57e afbc 	bpl.w	91f0a <mw_process_message+0x39a>
   92f92:	2402      	movs	r4, #2
   92f94:	4658      	mov	r0, fp
   92f96:	f7ff bb97 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92f9a:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   92f9e:	069b      	lsls	r3, r3, #26
   92fa0:	f57e afb8 	bpl.w	91f14 <mw_process_message+0x3a4>
   92fa4:	2403      	movs	r4, #3
   92fa6:	4658      	mov	r0, fp
   92fa8:	f7ff bb8e 	b.w	926c8 <mw_process_message+0xb58>
   92fac:	00088879 	.word	0x00088879
   92fb0:	20071858 	.word	0x20071858
   92fb4:	00089e55 	.word	0x00089e55
   92fb8:	0008c9c9 	.word	0x0008c9c9
   92fbc:	20071bd8 	.word	0x20071bd8
   92fc0:	0008d0e9 	.word	0x0008d0e9
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92fc4:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   92fc8:	069f      	lsls	r7, r3, #26
   92fca:	f57e afa8 	bpl.w	91f1e <mw_process_message+0x3ae>
   92fce:	2404      	movs	r4, #4
   92fd0:	4658      	mov	r0, fp
   92fd2:	f7ff bb79 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92fd6:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   92fda:	069d      	lsls	r5, r3, #26
   92fdc:	f57e afa4 	bpl.w	91f28 <mw_process_message+0x3b8>
   92fe0:	2405      	movs	r4, #5
   92fe2:	4658      	mov	r0, fp
   92fe4:	f7ff bb70 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92fe8:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   92fec:	069c      	lsls	r4, r3, #26
   92fee:	f57e afa0 	bpl.w	91f32 <mw_process_message+0x3c2>
   92ff2:	2406      	movs	r4, #6
   92ff4:	4658      	mov	r0, fp
   92ff6:	f7ff bb67 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   92ffa:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   92ffe:	0699      	lsls	r1, r3, #26
   93000:	f57e af9c 	bpl.w	91f3c <mw_process_message+0x3cc>
   93004:	2407      	movs	r4, #7
   93006:	4658      	mov	r0, fp
   93008:	f7ff bb5e 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9300c:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   93010:	069a      	lsls	r2, r3, #26
   93012:	f57e af98 	bpl.w	91f46 <mw_process_message+0x3d6>
   93016:	2408      	movs	r4, #8
   93018:	4658      	mov	r0, fp
   9301a:	f7ff bb55 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9301e:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   93022:	069f      	lsls	r7, r3, #26
   93024:	f57e af99 	bpl.w	91f5a <mw_process_message+0x3ea>
   93028:	240a      	movs	r4, #10
   9302a:	4658      	mov	r0, fp
   9302c:	f7ff bb4c 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93030:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   93034:	069b      	lsls	r3, r3, #26
   93036:	f57e af8b 	bpl.w	91f50 <mw_process_message+0x3e0>
   9303a:	2409      	movs	r4, #9
   9303c:	4658      	mov	r0, fp
   9303e:	f7ff bb43 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93042:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   93046:	069d      	lsls	r5, r3, #26
   93048:	f57e af8c 	bpl.w	91f64 <mw_process_message+0x3f4>
   9304c:	240b      	movs	r4, #11
   9304e:	4658      	mov	r0, fp
   93050:	f7ff bb3a 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93054:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   93058:	069c      	lsls	r4, r3, #26
   9305a:	f57e af88 	bpl.w	91f6e <mw_process_message+0x3fe>
   9305e:	240c      	movs	r4, #12
   93060:	4658      	mov	r0, fp
   93062:	f7ff bb31 	b.w	926c8 <mw_process_message+0xb58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93066:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   9306a:	f013 0020 	ands.w	r0, r3, #32
   9306e:	bf18      	it	ne
   93070:	240d      	movne	r4, #13
   93072:	f47f af1d 	bne.w	92eb0 <mw_process_message+0x1340>
   93076:	240e      	movs	r4, #14
   93078:	f7ff bb26 	b.w	926c8 <mw_process_message+0xb58>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   9307c:	9a02      	ldr	r2, [sp, #8]
   9307e:	4641      	mov	r1, r8
   93080:	48b8      	ldr	r0, [pc, #736]	; (93364 <mw_process_message+0x17f4>)
   93082:	4bb9      	ldr	r3, [pc, #740]	; (93368 <mw_process_message+0x17f8>)
   93084:	4798      	blx	r3
   93086:	2800      	cmp	r0, #0
   93088:	f43e afde 	beq.w	92048 <mw_process_message+0x4d8>
			if (mw_all_windows[i].z_order > highest_z_order)
   9308c:	f89a 30ac 	ldrb.w	r3, [sl, #172]	; 0xac
   93090:	429d      	cmp	r5, r3
   93092:	bf3c      	itt	cc
   93094:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   93096:	2402      	movcc	r4, #2
   93098:	f7fe bfd6 	b.w	92048 <mw_process_message+0x4d8>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   9309c:	4632      	mov	r2, r6
   9309e:	4641      	mov	r1, r8
   930a0:	f10a 0058 	add.w	r0, sl, #88	; 0x58
   930a4:	4bb0      	ldr	r3, [pc, #704]	; (93368 <mw_process_message+0x17f8>)
   930a6:	4798      	blx	r3
   930a8:	2800      	cmp	r0, #0
   930aa:	f43e afc2 	beq.w	92032 <mw_process_message+0x4c2>
			if (mw_all_windows[i].z_order > highest_z_order)
   930ae:	f89a 506c 	ldrb.w	r5, [sl, #108]	; 0x6c
   930b2:	1c2c      	adds	r4, r5, #0
   930b4:	bf18      	it	ne
   930b6:	2401      	movne	r4, #1
   930b8:	f7fe bfbd 	b.w	92036 <mw_process_message+0x4c6>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   930bc:	9a02      	ldr	r2, [sp, #8]
   930be:	4641      	mov	r1, r8
   930c0:	48aa      	ldr	r0, [pc, #680]	; (9336c <mw_process_message+0x17fc>)
   930c2:	4ba9      	ldr	r3, [pc, #676]	; (93368 <mw_process_message+0x17f8>)
   930c4:	4798      	blx	r3
   930c6:	2800      	cmp	r0, #0
   930c8:	f43f a806 	beq.w	920d8 <mw_process_message+0x568>
			if (mw_all_windows[i].z_order > highest_z_order)
   930cc:	f89a 32ac 	ldrb.w	r3, [sl, #684]	; 0x2ac
   930d0:	429d      	cmp	r5, r3
   930d2:	bf3c      	itt	cc
   930d4:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   930d6:	240a      	movcc	r4, #10
   930d8:	f7fe bffe 	b.w	920d8 <mw_process_message+0x568>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   930dc:	9a02      	ldr	r2, [sp, #8]
   930de:	4641      	mov	r1, r8
   930e0:	48a3      	ldr	r0, [pc, #652]	; (93370 <mw_process_message+0x1800>)
   930e2:	4ba1      	ldr	r3, [pc, #644]	; (93368 <mw_process_message+0x17f8>)
   930e4:	4798      	blx	r3
   930e6:	2800      	cmp	r0, #0
   930e8:	f43e afed 	beq.w	920c6 <mw_process_message+0x556>
			if (mw_all_windows[i].z_order > highest_z_order)
   930ec:	f89a 326c 	ldrb.w	r3, [sl, #620]	; 0x26c
   930f0:	429d      	cmp	r5, r3
   930f2:	bf3c      	itt	cc
   930f4:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   930f6:	2409      	movcc	r4, #9
   930f8:	f7fe bfe5 	b.w	920c6 <mw_process_message+0x556>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   930fc:	9a02      	ldr	r2, [sp, #8]
   930fe:	4641      	mov	r1, r8
   93100:	489c      	ldr	r0, [pc, #624]	; (93374 <mw_process_message+0x1804>)
   93102:	4b99      	ldr	r3, [pc, #612]	; (93368 <mw_process_message+0x17f8>)
   93104:	4798      	blx	r3
   93106:	2800      	cmp	r0, #0
   93108:	f43e afd4 	beq.w	920b4 <mw_process_message+0x544>
			if (mw_all_windows[i].z_order > highest_z_order)
   9310c:	f89a 322c 	ldrb.w	r3, [sl, #556]	; 0x22c
   93110:	429d      	cmp	r5, r3
   93112:	bf3c      	itt	cc
   93114:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   93116:	2408      	movcc	r4, #8
   93118:	f7fe bfcc 	b.w	920b4 <mw_process_message+0x544>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   9311c:	9a02      	ldr	r2, [sp, #8]
   9311e:	4641      	mov	r1, r8
   93120:	4895      	ldr	r0, [pc, #596]	; (93378 <mw_process_message+0x1808>)
   93122:	4b91      	ldr	r3, [pc, #580]	; (93368 <mw_process_message+0x17f8>)
   93124:	4798      	blx	r3
   93126:	2800      	cmp	r0, #0
   93128:	f43e afbb 	beq.w	920a2 <mw_process_message+0x532>
			if (mw_all_windows[i].z_order > highest_z_order)
   9312c:	f89a 31ec 	ldrb.w	r3, [sl, #492]	; 0x1ec
   93130:	429d      	cmp	r5, r3
   93132:	bf3c      	itt	cc
   93134:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   93136:	2407      	movcc	r4, #7
   93138:	f7fe bfb3 	b.w	920a2 <mw_process_message+0x532>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   9313c:	9a02      	ldr	r2, [sp, #8]
   9313e:	4641      	mov	r1, r8
   93140:	488e      	ldr	r0, [pc, #568]	; (9337c <mw_process_message+0x180c>)
   93142:	4b89      	ldr	r3, [pc, #548]	; (93368 <mw_process_message+0x17f8>)
   93144:	4798      	blx	r3
   93146:	2800      	cmp	r0, #0
   93148:	f43e afa2 	beq.w	92090 <mw_process_message+0x520>
			if (mw_all_windows[i].z_order > highest_z_order)
   9314c:	f89a 31ac 	ldrb.w	r3, [sl, #428]	; 0x1ac
   93150:	429d      	cmp	r5, r3
   93152:	bf3c      	itt	cc
   93154:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   93156:	2406      	movcc	r4, #6
   93158:	f7fe bf9a 	b.w	92090 <mw_process_message+0x520>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   9315c:	9a02      	ldr	r2, [sp, #8]
   9315e:	4641      	mov	r1, r8
   93160:	4887      	ldr	r0, [pc, #540]	; (93380 <mw_process_message+0x1810>)
   93162:	4b81      	ldr	r3, [pc, #516]	; (93368 <mw_process_message+0x17f8>)
   93164:	4798      	blx	r3
   93166:	2800      	cmp	r0, #0
   93168:	f43e af89 	beq.w	9207e <mw_process_message+0x50e>
			if (mw_all_windows[i].z_order > highest_z_order)
   9316c:	f89a 316c 	ldrb.w	r3, [sl, #364]	; 0x16c
   93170:	429d      	cmp	r5, r3
   93172:	bf3c      	itt	cc
   93174:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   93176:	2405      	movcc	r4, #5
   93178:	f7fe bf81 	b.w	9207e <mw_process_message+0x50e>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   9317c:	9a02      	ldr	r2, [sp, #8]
   9317e:	4641      	mov	r1, r8
   93180:	4880      	ldr	r0, [pc, #512]	; (93384 <mw_process_message+0x1814>)
   93182:	4b79      	ldr	r3, [pc, #484]	; (93368 <mw_process_message+0x17f8>)
   93184:	4798      	blx	r3
   93186:	2800      	cmp	r0, #0
   93188:	f43e af70 	beq.w	9206c <mw_process_message+0x4fc>
			if (mw_all_windows[i].z_order > highest_z_order)
   9318c:	f89a 312c 	ldrb.w	r3, [sl, #300]	; 0x12c
   93190:	429d      	cmp	r5, r3
   93192:	bf3c      	itt	cc
   93194:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   93196:	2404      	movcc	r4, #4
   93198:	f7fe bf68 	b.w	9206c <mw_process_message+0x4fc>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   9319c:	9a02      	ldr	r2, [sp, #8]
   9319e:	4641      	mov	r1, r8
   931a0:	4879      	ldr	r0, [pc, #484]	; (93388 <mw_process_message+0x1818>)
   931a2:	4b71      	ldr	r3, [pc, #452]	; (93368 <mw_process_message+0x17f8>)
   931a4:	4798      	blx	r3
   931a6:	2800      	cmp	r0, #0
   931a8:	f43e af57 	beq.w	9205a <mw_process_message+0x4ea>
			if (mw_all_windows[i].z_order > highest_z_order)
   931ac:	f89a 30ec 	ldrb.w	r3, [sl, #236]	; 0xec
   931b0:	429d      	cmp	r5, r3
   931b2:	bf3c      	itt	cc
   931b4:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   931b6:	2403      	movcc	r4, #3
   931b8:	f7fe bf4f 	b.w	9205a <mw_process_message+0x4ea>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   931bc:	9a02      	ldr	r2, [sp, #8]
   931be:	4641      	mov	r1, r8
   931c0:	4872      	ldr	r0, [pc, #456]	; (9338c <mw_process_message+0x181c>)
   931c2:	4b69      	ldr	r3, [pc, #420]	; (93368 <mw_process_message+0x17f8>)
   931c4:	4798      	blx	r3
   931c6:	2800      	cmp	r0, #0
   931c8:	f43e afa1 	beq.w	9210e <mw_process_message+0x59e>
			if (mw_all_windows[i].z_order > highest_z_order)
   931cc:	f89a 336c 	ldrb.w	r3, [sl, #876]	; 0x36c
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   931d0:	42ab      	cmp	r3, r5
   931d2:	bf88      	it	hi
   931d4:	240d      	movhi	r4, #13
   931d6:	f7fe bf9a 	b.w	9210e <mw_process_message+0x59e>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   931da:	9a02      	ldr	r2, [sp, #8]
   931dc:	4641      	mov	r1, r8
   931de:	486c      	ldr	r0, [pc, #432]	; (93390 <mw_process_message+0x1820>)
   931e0:	4b61      	ldr	r3, [pc, #388]	; (93368 <mw_process_message+0x17f8>)
   931e2:	4798      	blx	r3
   931e4:	2800      	cmp	r0, #0
   931e6:	f43e af89 	beq.w	920fc <mw_process_message+0x58c>
			if (mw_all_windows[i].z_order > highest_z_order)
   931ea:	f89a 332c 	ldrb.w	r3, [sl, #812]	; 0x32c
   931ee:	429d      	cmp	r5, r3
   931f0:	bf3c      	itt	cc
   931f2:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   931f4:	240c      	movcc	r4, #12
   931f6:	f7fe bf81 	b.w	920fc <mw_process_message+0x58c>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   931fa:	9a02      	ldr	r2, [sp, #8]
   931fc:	4641      	mov	r1, r8
   931fe:	4865      	ldr	r0, [pc, #404]	; (93394 <mw_process_message+0x1824>)
   93200:	4b59      	ldr	r3, [pc, #356]	; (93368 <mw_process_message+0x17f8>)
   93202:	4798      	blx	r3
   93204:	2800      	cmp	r0, #0
   93206:	f43e af70 	beq.w	920ea <mw_process_message+0x57a>
			if (mw_all_windows[i].z_order > highest_z_order)
   9320a:	f89a 32ec 	ldrb.w	r3, [sl, #748]	; 0x2ec
   9320e:	429d      	cmp	r5, r3
   93210:	bf3c      	itt	cc
   93212:	461d      	movcc	r5, r3
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   93214:	240b      	movcc	r4, #11
   93216:	f7fe bf68 	b.w	920ea <mw_process_message+0x57a>
   9321a:	68db      	ldr	r3, [r3, #12]
   9321c:	ae10      	add	r6, sp, #64	; 0x40
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_BORDER) == MW_WINDOW_FLAG_HAS_BORDER)
   9321e:	07d9      	lsls	r1, r3, #31
   93220:	d51d      	bpl.n	9325e <mw_process_message+0x16ee>
		if (touch_y >= mw_all_windows[window_id].window_rect.y +
   93222:	9a04      	ldr	r2, [sp, #16]
   93224:	9c02      	ldr	r4, [sp, #8]
   93226:	eb0a 0102 	add.w	r1, sl, r2
   9322a:	f9b1 001a 	ldrsh.w	r0, [r1, #26]
				mw_all_windows[window_id].window_rect.height - MW_BORDER_WIDTH)
   9322e:	f9b1 201e 	ldrsh.w	r2, [r1, #30]
		if (touch_y >= mw_all_windows[window_id].window_rect.y +
   93232:	4402      	add	r2, r0
				mw_all_windows[window_id].window_rect.height - MW_BORDER_WIDTH)
   93234:	3a01      	subs	r2, #1
		if (touch_y >= mw_all_windows[window_id].window_rect.y +
   93236:	4294      	cmp	r4, r2
   93238:	da2a      	bge.n	93290 <mw_process_message+0x1720>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   9323a:	079a      	lsls	r2, r3, #30
   9323c:	f140 87e7 	bpl.w	9420e <mw_process_message+0x269e>
			if (touch_x < mw_all_windows[window_id].window_rect.x + MW_BORDER_WIDTH &&
   93240:	f9b1 0018 	ldrsh.w	r0, [r1, #24]
   93244:	4580      	cmp	r8, r0
   93246:	dd05      	ble.n	93254 <mw_process_message+0x16e4>
					mw_all_windows[window_id].window_rect.width - MW_BORDER_WIDTH) &&
   93248:	f9b1 201c 	ldrsh.w	r2, [r1, #28]
			if ((touch_x >= mw_all_windows[window_id].window_rect.x +
   9324c:	4402      	add	r2, r0
					mw_all_windows[window_id].window_rect.width - MW_BORDER_WIDTH) &&
   9324e:	3a01      	subs	r2, #1
			if ((touch_x >= mw_all_windows[window_id].window_rect.x +
   93250:	4590      	cmp	r8, r2
   93252:	db04      	blt.n	9325e <mw_process_message+0x16ee>
					mw_all_windows[window_id].window_rect.width - MW_BORDER_WIDTH) &&
   93254:	f9b1 202a 	ldrsh.w	r2, [r1, #42]	; 0x2a
   93258:	9902      	ldr	r1, [sp, #8]
   9325a:	428a      	cmp	r2, r1
   9325c:	db18      	blt.n	93290 <mw_process_message+0x1720>
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR) == MW_WINDOW_FLAG_HAS_VERT_SCROLL_BAR &&
   9325e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   93262:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   93266:	f040 85b2 	bne.w	93dce <mw_process_message+0x225e>
		if (touch_x > mw_all_windows[window_id].client_rect.x + mw_all_windows[window_id].client_rect.width &&
   9326a:	9b04      	ldr	r3, [sp, #16]
   9326c:	4453      	add	r3, sl
   9326e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
   93272:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
   93276:	440a      	add	r2, r1
   93278:	4590      	cmp	r8, r2
   9327a:	f340 85a8 	ble.w	93dce <mw_process_message+0x225e>
				touch_y > mw_all_windows[window_id].client_rect.y +	mw_all_windows[window_id].client_rect.height)
   9327e:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
   93282:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
   93286:	4413      	add	r3, r2
		if (touch_x > mw_all_windows[window_id].client_rect.x + mw_all_windows[window_id].client_rect.width &&
   93288:	9a02      	ldr	r2, [sp, #8]
   9328a:	429a      	cmp	r2, r3
   9328c:	f340 859f 	ble.w	93dce <mw_process_message+0x225e>
   93290:	4d41      	ldr	r5, [pc, #260]	; (93398 <mw_process_message+0x1828>)
   93292:	4c42      	ldr	r4, [pc, #264]	; (9339c <mw_process_message+0x182c>)
   93294:	f7fe bd14 	b.w	91cc0 <mw_process_message+0x150>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93298:	f8da 200c 	ldr.w	r2, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   9329c:	0692      	lsls	r2, r2, #26
   9329e:	f57e af40 	bpl.w	92122 <mw_process_message+0x5b2>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_MODAL) == MW_WINDOW_FLAG_IS_MODAL &&
   932a2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
   932a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
   932aa:	2b60      	cmp	r3, #96	; 0x60
   932ac:	f000 87c7 	beq.w	9423e <mw_process_message+0x26ce>
   932b0:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
   932b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
   932b8:	2b60      	cmp	r3, #96	; 0x60
   932ba:	f000 87c0 	beq.w	9423e <mw_process_message+0x26ce>
   932be:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
   932c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
   932c6:	2b60      	cmp	r3, #96	; 0x60
   932c8:	f000 87b9 	beq.w	9423e <mw_process_message+0x26ce>
   932cc:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
   932d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
   932d4:	2b60      	cmp	r3, #96	; 0x60
   932d6:	f000 87b2 	beq.w	9423e <mw_process_message+0x26ce>
   932da:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
   932de:	f003 0360 	and.w	r3, r3, #96	; 0x60
   932e2:	2b60      	cmp	r3, #96	; 0x60
   932e4:	f000 87ab 	beq.w	9423e <mw_process_message+0x26ce>
   932e8:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
   932ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
   932f0:	2b60      	cmp	r3, #96	; 0x60
   932f2:	f000 87a4 	beq.w	9423e <mw_process_message+0x26ce>
   932f6:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
   932fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
   932fe:	2b60      	cmp	r3, #96	; 0x60
   93300:	f000 879d 	beq.w	9423e <mw_process_message+0x26ce>
   93304:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
   93308:	f003 0360 	and.w	r3, r3, #96	; 0x60
   9330c:	2b60      	cmp	r3, #96	; 0x60
   9330e:	f000 8796 	beq.w	9423e <mw_process_message+0x26ce>
   93312:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
   93316:	f003 0360 	and.w	r3, r3, #96	; 0x60
   9331a:	2b60      	cmp	r3, #96	; 0x60
   9331c:	f000 878f 	beq.w	9423e <mw_process_message+0x26ce>
   93320:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
   93324:	f003 0360 	and.w	r3, r3, #96	; 0x60
   93328:	2b60      	cmp	r3, #96	; 0x60
   9332a:	f000 8788 	beq.w	9423e <mw_process_message+0x26ce>
   9332e:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
   93332:	f003 0360 	and.w	r3, r3, #96	; 0x60
   93336:	2b60      	cmp	r3, #96	; 0x60
   93338:	f000 8781 	beq.w	9423e <mw_process_message+0x26ce>
   9333c:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
   93340:	f003 0360 	and.w	r3, r3, #96	; 0x60
   93344:	2b60      	cmp	r3, #96	; 0x60
   93346:	f000 877a 	beq.w	9423e <mw_process_message+0x26ce>
   9334a:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
   9334e:	f003 0360 	and.w	r3, r3, #96	; 0x60
   93352:	2b60      	cmp	r3, #96	; 0x60
   93354:	f000 8773 	beq.w	9423e <mw_process_message+0x26ce>
   93358:	4c11      	ldr	r4, [pc, #68]	; (933a0 <mw_process_message+0x1830>)
   9335a:	2517      	movs	r5, #23
   9335c:	f5a4 7640 	sub.w	r6, r4, #768	; 0x300
   93360:	e026      	b.n	933b0 <mw_process_message+0x1840>
   93362:	bf00      	nop
   93364:	20071c70 	.word	0x20071c70
   93368:	00096e7d 	.word	0x00096e7d
   9336c:	20071e70 	.word	0x20071e70
   93370:	20071e30 	.word	0x20071e30
   93374:	20071df0 	.word	0x20071df0
   93378:	20071db0 	.word	0x20071db0
   9337c:	20071d70 	.word	0x20071d70
   93380:	20071d30 	.word	0x20071d30
   93384:	20071cf0 	.word	0x20071cf0
   93388:	20071cb0 	.word	0x20071cb0
   9338c:	20071f30 	.word	0x20071f30
   93390:	20071ef0 	.word	0x20071ef0
   93394:	20071eb0 	.word	0x20071eb0
   93398:	20071fb1 	.word	0x20071fb1
   9339c:	20071f70 	.word	0x20071f70
   933a0:	20071b44 	.word	0x20071b44
   933a4:	3c20      	subs	r4, #32
	for (i = (int16_t)MW_MAX_CONTROL_COUNT - 1; i >= 0; i--)
   933a6:	42a6      	cmp	r6, r4
   933a8:	f105 35ff 	add.w	r5, r5, #4294967295
   933ac:	f000 8429 	beq.w	93c02 <mw_process_message+0x2092>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == 0U ||
   933b0:	8a23      	ldrh	r3, [r4, #16]
   933b2:	075a      	lsls	r2, r3, #29
   933b4:	d5f6      	bpl.n	933a4 <mw_process_message+0x1834>
   933b6:	68a3      	ldr	r3, [r4, #8]
   933b8:	42bb      	cmp	r3, r7
   933ba:	d1f3      	bne.n	933a4 <mw_process_message+0x1834>
		if (mw_util_is_point_in_rect(&mw_all_controls[i].control_rect, point_x, point_y) &&
   933bc:	9a02      	ldr	r2, [sp, #8]
   933be:	4641      	mov	r1, r8
   933c0:	4620      	mov	r0, r4
   933c2:	4b8e      	ldr	r3, [pc, #568]	; (935fc <mw_process_message+0x1a8c>)
   933c4:	4798      	blx	r3
   933c6:	2800      	cmp	r0, #0
   933c8:	d0ec      	beq.n	933a4 <mw_process_message+0x1834>
   933ca:	8a23      	ldrh	r3, [r4, #16]
   933cc:	07db      	lsls	r3, r3, #31
   933ce:	d5e9      	bpl.n	933a4 <mw_process_message+0x1834>
			control_found = mw_all_controls[i].control_handle;
   933d0:	4f8b      	ldr	r7, [pc, #556]	; (93600 <mw_process_message+0x1a90>)
   933d2:	eb07 1545 	add.w	r5, r7, r5, lsl #5
			if (find_control_point_is_in(mw_all_windows[MW_ROOT_WINDOW_ID].window_handle, touch_x, touch_y) != MW_INVALID_HANDLE)
   933d6:	69ab      	ldr	r3, [r5, #24]
   933d8:	2b00      	cmp	r3, #0
   933da:	f000 8412 	beq.w	93c02 <mw_process_message+0x2092>
   933de:	2300      	movs	r3, #0
   933e0:	ae10      	add	r6, sp, #64	; 0x40
   933e2:	9303      	str	r3, [sp, #12]
   933e4:	9304      	str	r3, [sp, #16]
   933e6:	f8da 300c 	ldr.w	r3, [sl, #12]
   933ea:	e718      	b.n	9321e <mw_process_message+0x16ae>
			if (mw_resize_window(mw_all_windows[window_being_redimensioned_id].window_handle,
   933ec:	f8df 8224 	ldr.w	r8, [pc, #548]	; 93614 <mw_process_message+0x1aa4>
					mw_all_windows[window_being_redimensioned_id].window_rect.height -
   933f0:	f8df a224 	ldr.w	sl, [pc, #548]	; 93618 <mw_process_message+0x1aa8>
			if (mw_resize_window(mw_all_windows[window_being_redimensioned_id].window_handle,
   933f4:	f898 3000 	ldrb.w	r3, [r8]
   933f8:	f8df b220 	ldr.w	fp, [pc, #544]	; 9361c <mw_process_message+0x1aac>
					mw_all_windows[window_being_redimensioned_id].window_rect.height -
   933fc:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
   93400:	8bda      	ldrh	r2, [r3, #30]
					mw_all_windows[window_being_redimensioned_id].window_rect.width -
   93402:	8b99      	ldrh	r1, [r3, #28]
					mw_all_windows[window_being_redimensioned_id].window_rect.height -
   93404:	1b92      	subs	r2, r2, r6
					mw_all_windows[window_being_redimensioned_id].window_rect.width -
   93406:	1b09      	subs	r1, r1, r4
			if (mw_resize_window(mw_all_windows[window_being_redimensioned_id].window_handle,
   93408:	b212      	sxth	r2, r2
   9340a:	b209      	sxth	r1, r1
   9340c:	6958      	ldr	r0, [r3, #20]
   9340e:	47d8      	blx	fp
   93410:	4683      	mov	fp, r0
   93412:	2800      	cmp	r0, #0
   93414:	f040 824e 	bne.w	938b4 <mw_process_message+0x1d44>
			window_redimensioning_state = WINDOW_BEING_RESIZED;
   93418:	2300      	movs	r3, #0
   9341a:	ae10      	add	r6, sp, #64	; 0x40
   9341c:	702b      	strb	r3, [r5, #0]
   9341e:	f7fe bcd0 	b.w	91dc2 <mw_process_message+0x252>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93422:	68f9      	ldr	r1, [r7, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   93424:	0689      	lsls	r1, r1, #26
   93426:	f57e ac6f 	bpl.w	91d08 <mw_process_message+0x198>
   9342a:	4690      	mov	r8, r2
   9342c:	f7ff b97d 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   93432:	0692      	lsls	r2, r2, #26
   93434:	f57e ac6c 	bpl.w	91d10 <mw_process_message+0x1a0>
   93438:	f04f 0801 	mov.w	r8, #1
   9343c:	f7ff b975 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93440:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   93444:	0690      	lsls	r0, r2, #26
   93446:	f57e ac68 	bpl.w	91d1a <mw_process_message+0x1aa>
   9344a:	f04f 0802 	mov.w	r8, #2
   9344e:	f7ff b96c 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93452:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   93456:	0691      	lsls	r1, r2, #26
   93458:	f57e ac64 	bpl.w	91d24 <mw_process_message+0x1b4>
   9345c:	f04f 0803 	mov.w	r8, #3
   93460:	f7ff b963 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93464:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   93468:	0692      	lsls	r2, r2, #26
   9346a:	f57e ac60 	bpl.w	91d2e <mw_process_message+0x1be>
   9346e:	f04f 0804 	mov.w	r8, #4
   93472:	f7ff b95a 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93476:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   9347a:	0690      	lsls	r0, r2, #26
   9347c:	f57e ac5c 	bpl.w	91d38 <mw_process_message+0x1c8>
   93480:	f04f 0805 	mov.w	r8, #5
   93484:	f7ff b951 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93488:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   9348c:	0691      	lsls	r1, r2, #26
   9348e:	f57e ac58 	bpl.w	91d42 <mw_process_message+0x1d2>
   93492:	f04f 0806 	mov.w	r8, #6
   93496:	f7ff b948 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9349a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9349e:	0692      	lsls	r2, r2, #26
   934a0:	f57e ac54 	bpl.w	91d4c <mw_process_message+0x1dc>
   934a4:	f04f 0807 	mov.w	r8, #7
   934a8:	f7ff b93f 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   934ac:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   934b0:	0690      	lsls	r0, r2, #26
   934b2:	f57e ac50 	bpl.w	91d56 <mw_process_message+0x1e6>
   934b6:	f04f 0808 	mov.w	r8, #8
   934ba:	f7ff b936 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   934be:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   934c2:	0691      	lsls	r1, r2, #26
   934c4:	f57e ac4c 	bpl.w	91d60 <mw_process_message+0x1f0>
   934c8:	f04f 0809 	mov.w	r8, #9
   934cc:	f7ff b92d 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   934d0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   934d4:	0692      	lsls	r2, r2, #26
   934d6:	f57e ac48 	bpl.w	91d6a <mw_process_message+0x1fa>
   934da:	f04f 080a 	mov.w	r8, #10
   934de:	f7ff b924 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   934e2:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   934e6:	0690      	lsls	r0, r2, #26
   934e8:	f57e ac44 	bpl.w	91d74 <mw_process_message+0x204>
   934ec:	f04f 080b 	mov.w	r8, #11
   934f0:	f7ff b91b 	b.w	9272a <mw_process_message+0xbba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   934f4:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   934f8:	0691      	lsls	r1, r2, #26
   934fa:	f57e ac40 	bpl.w	91d7e <mw_process_message+0x20e>
   934fe:	f04f 080c 	mov.w	r8, #12
   93502:	f7ff b912 	b.w	9272a <mw_process_message+0xbba>
   93506:	4e3e      	ldr	r6, [pc, #248]	; (93600 <mw_process_message+0x1a90>)
		else if (touch_message_target.touch_down_recipient_type == TOUCH_DOWN_RECIPIENT_TYPE_CONTROL)
   93508:	f04f 0c00 	mov.w	ip, #0
   9350c:	4637      	mov	r7, r6
   9350e:	46b6      	mov	lr, r6
   93510:	e007      	b.n	93522 <mw_process_message+0x19b2>
   93512:	f10c 0c01 	add.w	ip, ip, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   93516:	f1bc 0f18 	cmp.w	ip, #24
   9351a:	f10e 0e20 	add.w	lr, lr, #32
   9351e:	f43e abce 	beq.w	91cbe <mw_process_message+0x14e>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   93522:	f8be 001c 	ldrh.w	r0, [lr, #28]
   93526:	0740      	lsls	r0, r0, #29
   93528:	d5f3      	bpl.n	93512 <mw_process_message+0x19a2>
   9352a:	f8de 0018 	ldr.w	r0, [lr, #24]
   9352e:	4283      	cmp	r3, r0
   93530:	d1ef      	bne.n	93512 <mw_process_message+0x19a2>
			client_x = touch_x - mw_all_controls[get_control_id_for_handle(touch_message_target.touch_down_recipient_handle)].control_rect.x;
   93532:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   93536:	4467      	add	r7, ip
   93538:	89b8      	ldrh	r0, [r7, #12]
			client_y = touch_y - mw_all_controls[get_control_id_for_handle(touch_message_target.touch_down_recipient_handle)].control_rect.y;
   9353a:	4f31      	ldr	r7, [pc, #196]	; (93600 <mw_process_message+0x1a90>)
			client_x = touch_x - mw_all_controls[get_control_id_for_handle(touch_message_target.touch_down_recipient_handle)].control_rect.x;
   9353c:	1a09      	subs	r1, r1, r0
			client_y = touch_y - mw_all_controls[get_control_id_for_handle(touch_message_target.touch_down_recipient_handle)].control_rect.y;
   9353e:	f04f 0e00 	mov.w	lr, #0
   93542:	4638      	mov	r0, r7
			client_x = touch_x - mw_all_controls[get_control_id_for_handle(touch_message_target.touch_down_recipient_handle)].control_rect.x;
   93544:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
			client_y = touch_y - mw_all_controls[get_control_id_for_handle(touch_message_target.touch_down_recipient_handle)].control_rect.y;
   93548:	b292      	uxth	r2, r2
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   9354a:	8b81      	ldrh	r1, [r0, #28]
   9354c:	0749      	lsls	r1, r1, #29
   9354e:	d502      	bpl.n	93556 <mw_process_message+0x19e6>
   93550:	6981      	ldr	r1, [r0, #24]
   93552:	428b      	cmp	r3, r1
   93554:	d006      	beq.n	93564 <mw_process_message+0x19f4>
   93556:	f10e 0e01 	add.w	lr, lr, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   9355a:	f1be 0f18 	cmp.w	lr, #24
   9355e:	f100 0020 	add.w	r0, r0, #32
   93562:	d1f2      	bne.n	9354a <mw_process_message+0x19da>
			client_y = touch_y - mw_all_controls[get_control_id_for_handle(touch_message_target.touch_down_recipient_handle)].control_rect.y;
   93564:	eb07 1e4e 	add.w	lr, r7, lr, lsl #5
   93568:	f8be 300e 	ldrh.w	r3, [lr, #14]
   9356c:	a916      	add	r1, sp, #88	; 0x58
   9356e:	1ad3      	subs	r3, r2, r3
			mw_util_limit_point_to_rect_size(&client_x, &client_y, &mw_all_controls[control_to_receive_message_id].control_rect);
   93570:	f10c 0c0c 	add.w	ip, ip, #12
			client_y = touch_y - mw_all_controls[get_control_id_for_handle(touch_message_target.touch_down_recipient_handle)].control_rect.y;
   93574:	f821 3d20 	strh.w	r3, [r1, #-32]!
			mw_util_limit_point_to_rect_size(&client_x, &client_y, &mw_all_controls[control_to_receive_message_id].control_rect);
   93578:	eb07 020c 	add.w	r2, r7, ip
   9357c:	4b21      	ldr	r3, [pc, #132]	; (93604 <mw_process_message+0x1a94>)
   9357e:	a80c      	add	r0, sp, #48	; 0x30
   93580:	4798      	blx	r3
					(((uint32_t)client_x) << 16) | (uint32_t)client_y,
   93582:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   93586:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
			mw_post_message(touch_message_id,
   9358a:	f8d4 a004 	ldr.w	sl, [r4, #4]
   9358e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   93592:	9303      	str	r3, [sp, #12]
	if (control_handle == MW_INVALID_HANDLE)
   93594:	f1ba 0f00 	cmp.w	sl, #0
   93598:	f000 84ce 	beq.w	93f38 <mw_process_message+0x23c8>
   9359c:	2300      	movs	r3, #0
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   9359e:	8bb2      	ldrh	r2, [r6, #28]
   935a0:	4698      	mov	r8, r3
   935a2:	0752      	lsls	r2, r2, #29
   935a4:	f103 0301 	add.w	r3, r3, #1
   935a8:	d503      	bpl.n	935b2 <mw_process_message+0x1a42>
   935aa:	69b2      	ldr	r2, [r6, #24]
   935ac:	4592      	cmp	sl, r2
   935ae:	f001 828d 	beq.w	94acc <mw_process_message+0x2f5c>
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   935b2:	2b18      	cmp	r3, #24
   935b4:	f106 0620 	add.w	r6, r6, #32
   935b8:	d1f1      	bne.n	9359e <mw_process_message+0x1a2e>
   935ba:	4698      	mov	r8, r3
   935bc:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   935be:	4b12      	ldr	r3, [pc, #72]	; (93608 <mw_process_message+0x1a98>)
   935c0:	f241 5267 	movw	r2, #5479	; 0x1567
   935c4:	4911      	ldr	r1, [pc, #68]	; (9360c <mw_process_message+0x1a9c>)
   935c6:	47c8      	blx	r9
	new_message.sender_handle = sender_handle;
   935c8:	2300      	movs	r3, #0
	new_message.message_recipient_type = recipient_type;
   935ca:	2101      	movs	r1, #1
	new_message.message_id = message_id;
   935cc:	f89d 0008 	ldrb.w	r0, [sp, #8]
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   935d0:	eb07 1748 	add.w	r7, r7, r8, lsl #5
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   935d4:	8bba      	ldrh	r2, [r7, #28]
	new_message.message_id = message_id;
   935d6:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
	new_message.message_data = message_data;
   935da:	9803      	ldr	r0, [sp, #12]
	new_message.sender_handle = sender_handle;
   935dc:	9310      	str	r3, [sp, #64]	; 0x40
	new_message.message_pointer = message_pointer;
   935de:	9314      	str	r3, [sp, #80]	; 0x50
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   935e0:	0753      	lsls	r3, r2, #29
	new_message.message_data = message_data;
   935e2:	9013      	str	r0, [sp, #76]	; 0x4c
	new_message.recipient_handle = recipient_handle;
   935e4:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
	new_message.message_recipient_type = recipient_type;
   935e8:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		(void)mw_message_queue_insert(&new_message);
   935ec:	ae10      	add	r6, sp, #64	; 0x40
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   935ee:	f57e ad04 	bpl.w	91ffa <mw_process_message+0x48a>
		(void)mw_message_queue_insert(&new_message);
   935f2:	4630      	mov	r0, r6
   935f4:	4b06      	ldr	r3, [pc, #24]	; (93610 <mw_process_message+0x1aa0>)
   935f6:	4798      	blx	r3
   935f8:	f7fe bcff 	b.w	91ffa <mw_process_message+0x48a>
   935fc:	00096e7d 	.word	0x00096e7d
   93600:	20071858 	.word	0x20071858
   93604:	000971d1 	.word	0x000971d1
   93608:	000ab734 	.word	0x000ab734
   9360c:	000ab710 	.word	0x000ab710
   93610:	00095bc1 	.word	0x00095bc1
   93614:	20071fb0 	.word	0x20071fb0
   93618:	20071bd8 	.word	0x20071bd8
   9361c:	0008fb15 	.word	0x0008fb15
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93620:	f8da 600c 	ldr.w	r6, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   93624:	06b6      	lsls	r6, r6, #26
   93626:	f57e ab09 	bpl.w	91c3c <mw_process_message+0xcc>
   9362a:	46be      	mov	lr, r7
			client_x = touch_x - mw_all_windows[get_window_id_for_handle(touch_message_target.touch_down_recipient_handle)].client_rect.x;
   9362c:	f8ba 0020 	ldrh.w	r0, [sl, #32]
			client_y = touch_y - mw_all_windows[get_window_id_for_handle(touch_message_target.touch_down_recipient_handle)].client_rect.y;
   93630:	b292      	uxth	r2, r2
			client_x = touch_x - mw_all_windows[get_window_id_for_handle(touch_message_target.touch_down_recipient_handle)].client_rect.x;
   93632:	1a09      	subs	r1, r1, r0
   93634:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93638:	f8da 100c 	ldr.w	r1, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   9363c:	0689      	lsls	r1, r1, #26
   9363e:	f101 85bc 	bmi.w	951ba <mw_process_message+0x364a>
   93642:	f8da 1054 	ldr.w	r1, [sl, #84]	; 0x54
   93646:	428b      	cmp	r3, r1
   93648:	f000 8352 	beq.w	93cf0 <mw_process_message+0x2180>
   9364c:	f8da 1094 	ldr.w	r1, [sl, #148]	; 0x94
   93650:	428b      	cmp	r3, r1
   93652:	f000 8346 	beq.w	93ce2 <mw_process_message+0x2172>
   93656:	f8da 10d4 	ldr.w	r1, [sl, #212]	; 0xd4
   9365a:	428b      	cmp	r3, r1
   9365c:	f000 8354 	beq.w	93d08 <mw_process_message+0x2198>
   93660:	f8da 1114 	ldr.w	r1, [sl, #276]	; 0x114
   93664:	428b      	cmp	r3, r1
   93666:	f000 8356 	beq.w	93d16 <mw_process_message+0x21a6>
   9366a:	f8da 1154 	ldr.w	r1, [sl, #340]	; 0x154
   9366e:	428b      	cmp	r3, r1
   93670:	f000 8358 	beq.w	93d24 <mw_process_message+0x21b4>
   93674:	f8da 1194 	ldr.w	r1, [sl, #404]	; 0x194
   93678:	428b      	cmp	r3, r1
   9367a:	f000 8361 	beq.w	93d40 <mw_process_message+0x21d0>
   9367e:	f8da 11d4 	ldr.w	r1, [sl, #468]	; 0x1d4
   93682:	428b      	cmp	r3, r1
   93684:	f000 8355 	beq.w	93d32 <mw_process_message+0x21c2>
   93688:	f8da 1214 	ldr.w	r1, [sl, #532]	; 0x214
   9368c:	428b      	cmp	r3, r1
   9368e:	f000 8389 	beq.w	93da4 <mw_process_message+0x2234>
   93692:	f8da 1254 	ldr.w	r1, [sl, #596]	; 0x254
   93696:	428b      	cmp	r3, r1
   93698:	f000 8359 	beq.w	93d4e <mw_process_message+0x21de>
   9369c:	f8da 1294 	ldr.w	r1, [sl, #660]	; 0x294
   936a0:	428b      	cmp	r3, r1
   936a2:	f000 838d 	beq.w	93dc0 <mw_process_message+0x2250>
   936a6:	f8da 12d4 	ldr.w	r1, [sl, #724]	; 0x2d4
   936aa:	428b      	cmp	r3, r1
   936ac:	f000 8381 	beq.w	93db2 <mw_process_message+0x2242>
   936b0:	f8da 1314 	ldr.w	r1, [sl, #788]	; 0x314
   936b4:	428b      	cmp	r3, r1
   936b6:	f000 839f 	beq.w	93df8 <mw_process_message+0x2288>
   936ba:	f8da 1354 	ldr.w	r1, [sl, #852]	; 0x354
   936be:	428b      	cmp	r3, r1
   936c0:	f000 83a1 	beq.w	93e06 <mw_process_message+0x2296>
   936c4:	230e      	movs	r3, #14
			client_y = touch_y - mw_all_windows[get_window_id_for_handle(touch_message_target.touch_down_recipient_handle)].client_rect.y;
   936c6:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
   936ca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   936cc:	a916      	add	r1, sp, #88	; 0x58
   936ce:	1ad2      	subs	r2, r2, r3
			mw_util_limit_point_to_rect_size(&client_x, &client_y, &mw_all_windows[window_to_receive_message_id].window_rect);
   936d0:	f10e 0e18 	add.w	lr, lr, #24
			client_y = touch_y - mw_all_windows[get_window_id_for_handle(touch_message_target.touch_down_recipient_handle)].client_rect.y;
   936d4:	f821 2d20 	strh.w	r2, [r1, #-32]!
			mw_util_limit_point_to_rect_size(&client_x, &client_y, &mw_all_windows[window_to_receive_message_id].window_rect);
   936d8:	4bbc      	ldr	r3, [pc, #752]	; (939cc <mw_process_message+0x1e5c>)
   936da:	eb0a 020e 	add.w	r2, sl, lr
   936de:	a80c      	add	r0, sp, #48	; 0x30
   936e0:	4798      	blx	r3
					(((uint32_t)client_x) << 16) | (uint32_t)client_y,
   936e2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   936e6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
			mw_post_message(touch_message_id,
   936ea:	6867      	ldr	r7, [r4, #4]
   936ec:	ea42 4603 	orr.w	r6, r2, r3, lsl #16
	if (window_handle == MW_INVALID_HANDLE)
   936f0:	2f00      	cmp	r7, #0
   936f2:	d045      	beq.n	93780 <mw_process_message+0x1c10>
		if (mw_all_windows[i].window_handle == window_handle &&
   936f4:	f8da 3014 	ldr.w	r3, [sl, #20]
   936f8:	429f      	cmp	r7, r3
   936fa:	f000 8415 	beq.w	93f28 <mw_process_message+0x23b8>
   936fe:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   93702:	429f      	cmp	r7, r3
   93704:	f000 8407 	beq.w	93f16 <mw_process_message+0x23a6>
   93708:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   9370c:	429f      	cmp	r7, r3
   9370e:	f000 8420 	beq.w	93f52 <mw_process_message+0x23e2>
   93712:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   93716:	429f      	cmp	r7, r3
   93718:	f000 8413 	beq.w	93f42 <mw_process_message+0x23d2>
   9371c:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   93720:	429f      	cmp	r7, r3
   93722:	f000 8426 	beq.w	93f72 <mw_process_message+0x2402>
   93726:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   9372a:	429f      	cmp	r7, r3
   9372c:	f000 8419 	beq.w	93f62 <mw_process_message+0x23f2>
   93730:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   93734:	429f      	cmp	r7, r3
   93736:	f000 843e 	beq.w	93fb6 <mw_process_message+0x2446>
   9373a:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   9373e:	429f      	cmp	r7, r3
   93740:	f000 8431 	beq.w	93fa6 <mw_process_message+0x2436>
   93744:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   93748:	429f      	cmp	r7, r3
   9374a:	f000 845a 	beq.w	94002 <mw_process_message+0x2492>
   9374e:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   93752:	429f      	cmp	r7, r3
   93754:	f000 8485 	beq.w	94062 <mw_process_message+0x24f2>
   93758:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   9375c:	429f      	cmp	r7, r3
   9375e:	f000 8490 	beq.w	94082 <mw_process_message+0x2512>
   93762:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   93766:	429f      	cmp	r7, r3
   93768:	f000 8483 	beq.w	94072 <mw_process_message+0x2502>
   9376c:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   93770:	429f      	cmp	r7, r3
   93772:	f000 849b 	beq.w	940ac <mw_process_message+0x253c>
   93776:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   9377a:	429f      	cmp	r7, r3
   9377c:	f000 8489 	beq.w	94092 <mw_process_message+0x2522>
   93780:	f04f 080e 	mov.w	r8, #14
   93784:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   93786:	4b92      	ldr	r3, [pc, #584]	; (939d0 <mw_process_message+0x1e60>)
   93788:	f241 5262 	movw	r2, #5474	; 0x1562
   9378c:	4991      	ldr	r1, [pc, #580]	; (939d4 <mw_process_message+0x1e64>)
   9378e:	47c8      	blx	r9
	new_message.message_recipient_type = recipient_type;
   93790:	2300      	movs	r3, #0
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   93792:	eb0a 1888 	add.w	r8, sl, r8, lsl #6
   93796:	f8d8 200c 	ldr.w	r2, [r8, #12]
	new_message.message_id = message_id;
   9379a:	f89d 1008 	ldrb.w	r1, [sp, #8]
	new_message.recipient_handle = recipient_handle;
   9379e:	9711      	str	r7, [sp, #68]	; 0x44
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   937a0:	0697      	lsls	r7, r2, #26
	new_message.message_data = message_data;
   937a2:	9613      	str	r6, [sp, #76]	; 0x4c
	new_message.message_id = message_id;
   937a4:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
	new_message.message_recipient_type = recipient_type;
   937a8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	new_message.sender_handle = sender_handle;
   937ac:	9310      	str	r3, [sp, #64]	; 0x40
	new_message.message_pointer = message_pointer;
   937ae:	9314      	str	r3, [sp, #80]	; 0x50
		(void)mw_message_queue_insert(&new_message);
   937b0:	ae10      	add	r6, sp, #64	; 0x40
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   937b2:	f53f af1e 	bmi.w	935f2 <mw_process_message+0x1a82>
   937b6:	f7fe bc20 	b.w	91ffa <mw_process_message+0x48a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   937ba:	f8da 704c 	ldr.w	r7, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   937be:	06be      	lsls	r6, r7, #26
   937c0:	f57e aa41 	bpl.w	91c46 <mw_process_message+0xd6>
   937c4:	f04f 0e01 	mov.w	lr, #1
			client_x = touch_x - mw_all_windows[get_window_id_for_handle(touch_message_target.touch_down_recipient_handle)].client_rect.x;
   937c8:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
   937cc:	eb0a 070e 	add.w	r7, sl, lr
   937d0:	8c3f      	ldrh	r7, [r7, #32]
		if (mw_all_windows[i].window_handle == window_handle &&
   937d2:	4283      	cmp	r3, r0
			client_x = touch_x - mw_all_windows[get_window_id_for_handle(touch_message_target.touch_down_recipient_handle)].client_rect.x;
   937d4:	eba1 0107 	sub.w	r1, r1, r7
			client_y = touch_y - mw_all_windows[get_window_id_for_handle(touch_message_target.touch_down_recipient_handle)].client_rect.y;
   937d8:	b292      	uxth	r2, r2
			client_x = touch_x - mw_all_windows[get_window_id_for_handle(touch_message_target.touch_down_recipient_handle)].client_rect.x;
   937da:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
		if (mw_all_windows[i].window_handle == window_handle &&
   937de:	f47f af30 	bne.w	93642 <mw_process_message+0x1ad2>
   937e2:	e729      	b.n	93638 <mw_process_message+0x1ac8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   937e4:	f8da 708c 	ldr.w	r7, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   937e8:	06bf      	lsls	r7, r7, #26
   937ea:	f57e aa31 	bpl.w	91c50 <mw_process_message+0xe0>
   937ee:	f04f 0e02 	mov.w	lr, #2
   937f2:	e7e9      	b.n	937c8 <mw_process_message+0x1c58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   937f4:	f8da 70cc 	ldr.w	r7, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   937f8:	06be      	lsls	r6, r7, #26
   937fa:	f57e aa2e 	bpl.w	91c5a <mw_process_message+0xea>
   937fe:	f04f 0e03 	mov.w	lr, #3
   93802:	e7e1      	b.n	937c8 <mw_process_message+0x1c58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93804:	f8da 710c 	ldr.w	r7, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   93808:	06bf      	lsls	r7, r7, #26
   9380a:	f57e aa2b 	bpl.w	91c64 <mw_process_message+0xf4>
   9380e:	f04f 0e04 	mov.w	lr, #4
   93812:	e7d9      	b.n	937c8 <mw_process_message+0x1c58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93814:	f8da 714c 	ldr.w	r7, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   93818:	06be      	lsls	r6, r7, #26
   9381a:	f57e aa28 	bpl.w	91c6e <mw_process_message+0xfe>
   9381e:	f04f 0e05 	mov.w	lr, #5
   93822:	e7d1      	b.n	937c8 <mw_process_message+0x1c58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93824:	f8da 718c 	ldr.w	r7, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   93828:	06bf      	lsls	r7, r7, #26
   9382a:	f57e aa25 	bpl.w	91c78 <mw_process_message+0x108>
   9382e:	f04f 0e06 	mov.w	lr, #6
   93832:	e7c9      	b.n	937c8 <mw_process_message+0x1c58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93834:	f8da 71cc 	ldr.w	r7, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   93838:	06be      	lsls	r6, r7, #26
   9383a:	f57e aa22 	bpl.w	91c82 <mw_process_message+0x112>
   9383e:	f04f 0e07 	mov.w	lr, #7
   93842:	e7c1      	b.n	937c8 <mw_process_message+0x1c58>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   93844:	4658      	mov	r0, fp
   93846:	f7fe bf2e 	b.w	926a6 <mw_process_message+0xb36>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9384a:	f8da 720c 	ldr.w	r7, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   9384e:	06bf      	lsls	r7, r7, #26
   93850:	f57e aa1c 	bpl.w	91c8c <mw_process_message+0x11c>
   93854:	f04f 0e08 	mov.w	lr, #8
   93858:	e7b6      	b.n	937c8 <mw_process_message+0x1c58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9385a:	f8da 724c 	ldr.w	r7, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   9385e:	06be      	lsls	r6, r7, #26
   93860:	f57e aa19 	bpl.w	91c96 <mw_process_message+0x126>
   93864:	f04f 0e09 	mov.w	lr, #9
   93868:	e7ae      	b.n	937c8 <mw_process_message+0x1c58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9386a:	f8da 728c 	ldr.w	r7, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   9386e:	06bf      	lsls	r7, r7, #26
   93870:	f57e aa16 	bpl.w	91ca0 <mw_process_message+0x130>
   93874:	f04f 0e0a 	mov.w	lr, #10
   93878:	e7a6      	b.n	937c8 <mw_process_message+0x1c58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9387a:	f8da 72cc 	ldr.w	r7, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9387e:	06be      	lsls	r6, r7, #26
   93880:	f57e aa13 	bpl.w	91caa <mw_process_message+0x13a>
   93884:	f04f 0e0b 	mov.w	lr, #11
   93888:	e79e      	b.n	937c8 <mw_process_message+0x1c58>
   9388a:	4d53      	ldr	r5, [pc, #332]	; (939d8 <mw_process_message+0x1e68>)
   9388c:	ae10      	add	r6, sp, #64	; 0x40
   9388e:	4c53      	ldr	r4, [pc, #332]	; (939dc <mw_process_message+0x1e6c>)
   93890:	f7fe ba16 	b.w	91cc0 <mw_process_message+0x150>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93894:	f8da 730c 	ldr.w	r7, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   93898:	06bf      	lsls	r7, r7, #26
   9389a:	f57e aa0b 	bpl.w	91cb4 <mw_process_message+0x144>
   9389e:	f04f 0e0c 	mov.w	lr, #12
   938a2:	e791      	b.n	937c8 <mw_process_message+0x1c58>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   938a4:	f8da 734c 	ldr.w	r7, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   938a8:	06be      	lsls	r6, r7, #26
   938aa:	f57e aa08 	bpl.w	91cbe <mw_process_message+0x14e>
   938ae:	f04f 0e0d 	mov.w	lr, #13
   938b2:	e789      	b.n	937c8 <mw_process_message+0x1c58>
				mw_reposition_window(mw_all_windows[window_being_redimensioned_id].window_handle,
   938b4:	f898 0000 	ldrb.w	r0, [r8]
   938b8:	4b49      	ldr	r3, [pc, #292]	; (939e0 <mw_process_message+0x1e70>)
						mw_all_windows[window_being_redimensioned_id].window_rect.y +
   938ba:	eb0a 1080 	add.w	r0, sl, r0, lsl #6
   938be:	8b42      	ldrh	r2, [r0, #26]
						mw_all_windows[window_being_redimensioned_id].window_rect.x +
   938c0:	8b01      	ldrh	r1, [r0, #24]
						mw_all_windows[window_being_redimensioned_id].window_rect.y +
   938c2:	4432      	add	r2, r6
						mw_all_windows[window_being_redimensioned_id].window_rect.x +
   938c4:	4421      	add	r1, r4
				mw_reposition_window(mw_all_windows[window_being_redimensioned_id].window_handle,
   938c6:	b212      	sxth	r2, r2
   938c8:	b209      	sxth	r1, r1
   938ca:	6940      	ldr	r0, [r0, #20]
   938cc:	4798      	blx	r3
				draw_redimensioning_window_outline(mw_all_windows[window_being_redimensioned_id].window_handle);
   938ce:	f898 3000 	ldrb.w	r3, [r8]
   938d2:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
   938d6:	695b      	ldr	r3, [r3, #20]
	if (window_handle == MW_INVALID_HANDLE)
   938d8:	2b00      	cmp	r3, #0
   938da:	f000 82e3 	beq.w	93ea4 <mw_process_message+0x2334>
		if (mw_all_windows[i].window_handle == window_handle &&
   938de:	f8da 2014 	ldr.w	r2, [sl, #20]
   938e2:	4293      	cmp	r3, r2
   938e4:	f000 84a4 	beq.w	94230 <mw_process_message+0x26c0>
   938e8:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   938ec:	4293      	cmp	r3, r2
   938ee:	f000 85b9 	beq.w	94464 <mw_process_message+0x28f4>
   938f2:	f8da 2094 	ldr.w	r2, [sl, #148]	; 0x94
   938f6:	4293      	cmp	r3, r2
   938f8:	f000 85ac 	beq.w	94454 <mw_process_message+0x28e4>
   938fc:	f8da 20d4 	ldr.w	r2, [sl, #212]	; 0xd4
   93900:	4293      	cmp	r3, r2
   93902:	f000 857f 	beq.w	94404 <mw_process_message+0x2894>
   93906:	f8da 2114 	ldr.w	r2, [sl, #276]	; 0x114
   9390a:	4293      	cmp	r3, r2
   9390c:	f000 8572 	beq.w	943f4 <mw_process_message+0x2884>
   93910:	f8da 2154 	ldr.w	r2, [sl, #340]	; 0x154
   93914:	4293      	cmp	r3, r2
   93916:	f000 8565 	beq.w	943e4 <mw_process_message+0x2874>
   9391a:	f8da 2194 	ldr.w	r2, [sl, #404]	; 0x194
   9391e:	4293      	cmp	r3, r2
   93920:	f000 8558 	beq.w	943d4 <mw_process_message+0x2864>
   93924:	f8da 21d4 	ldr.w	r2, [sl, #468]	; 0x1d4
   93928:	4293      	cmp	r3, r2
   9392a:	f000 85c3 	beq.w	944b4 <mw_process_message+0x2944>
   9392e:	f8da 2214 	ldr.w	r2, [sl, #532]	; 0x214
   93932:	4293      	cmp	r3, r2
   93934:	f000 85b6 	beq.w	944a4 <mw_process_message+0x2934>
   93938:	f8da 2254 	ldr.w	r2, [sl, #596]	; 0x254
   9393c:	4293      	cmp	r3, r2
   9393e:	f000 8662 	beq.w	94606 <mw_process_message+0x2a96>
   93942:	f8da 2294 	ldr.w	r2, [sl, #660]	; 0x294
   93946:	4293      	cmp	r3, r2
   93948:	f000 8655 	beq.w	945f6 <mw_process_message+0x2a86>
   9394c:	f8da 22d4 	ldr.w	r2, [sl, #724]	; 0x2d4
   93950:	4293      	cmp	r3, r2
   93952:	f000 8648 	beq.w	945e6 <mw_process_message+0x2a76>
   93956:	f8da 2314 	ldr.w	r2, [sl, #788]	; 0x314
   9395a:	4293      	cmp	r3, r2
   9395c:	f000 863b 	beq.w	945d6 <mw_process_message+0x2a66>
   93960:	f8da 2354 	ldr.w	r2, [sl, #852]	; 0x354
   93964:	4293      	cmp	r3, r2
   93966:	f000 8619 	beq.w	9459c <mw_process_message+0x2a2c>
   9396a:	270e      	movs	r7, #14
   9396c:	f04f 0b00 	mov.w	fp, #0
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   93970:	f640 72fd 	movw	r2, #4093	; 0xffd
   93974:	491b      	ldr	r1, [pc, #108]	; (939e4 <mw_process_message+0x1e74>)
   93976:	4658      	mov	r0, fp
   93978:	4b15      	ldr	r3, [pc, #84]	; (939d0 <mw_process_message+0x1e60>)
   9397a:	47c8      	blx	r9
	mw_gl_set_fill(MW_GL_NO_FILL);
   9397c:	2000      	movs	r0, #0
   9397e:	4b1a      	ldr	r3, [pc, #104]	; (939e8 <mw_process_message+0x1e78>)
   93980:	4798      	blx	r3
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   93982:	2000      	movs	r0, #0
   93984:	4b19      	ldr	r3, [pc, #100]	; (939ec <mw_process_message+0x1e7c>)
   93986:	4798      	blx	r3
	mw_gl_set_bg_colour(MW_HAL_LCD_WHITE);
   93988:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   9398c:	4b18      	ldr	r3, [pc, #96]	; (939f0 <mw_process_message+0x1e80>)
   9398e:	4798      	blx	r3
	mw_gl_set_line(MW_GL_EQUAL_LARGE_DASH);
   93990:	f44f 407f 	mov.w	r0, #65280	; 0xff00
   93994:	4b17      	ldr	r3, [pc, #92]	; (939f4 <mw_process_message+0x1e84>)
   93996:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_NOT_TRANSPARENT);
   93998:	2001      	movs	r0, #1
   9399a:	4b17      	ldr	r3, [pc, #92]	; (939f8 <mw_process_message+0x1e88>)
   9399c:	4798      	blx	r3
	mw_gl_rectangle(&draw_info_root,
   9399e:	eb0a 1087 	add.w	r0, sl, r7, lsl #6
   939a2:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   939a6:	f9b0 201a 	ldrsh.w	r2, [r0, #26]
   939aa:	f9b0 1018 	ldrsh.w	r1, [r0, #24]
   939ae:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
   939b2:	4c12      	ldr	r4, [pc, #72]	; (939fc <mw_process_message+0x1e8c>)
   939b4:	9000      	str	r0, [sp, #0]
   939b6:	4812      	ldr	r0, [pc, #72]	; (93a00 <mw_process_message+0x1e90>)
   939b8:	47a0      	blx	r4
   939ba:	e52d      	b.n	93418 <mw_process_message+0x18a8>
				MW_ASSERT((bool)false, "Illegal system message type");
   939bc:	4b11      	ldr	r3, [pc, #68]	; (93a04 <mw_process_message+0x1e94>)
   939be:	f241 622f 	movw	r2, #5679	; 0x162f
   939c2:	4911      	ldr	r1, [pc, #68]	; (93a08 <mw_process_message+0x1e98>)
   939c4:	2000      	movs	r0, #0
   939c6:	47c8      	blx	r9
				break;
   939c8:	f7fe b9ee 	b.w	91da8 <mw_process_message+0x238>
   939cc:	000971d1 	.word	0x000971d1
   939d0:	000ab764 	.word	0x000ab764
   939d4:	000ab710 	.word	0x000ab710
   939d8:	20071fb1 	.word	0x20071fb1
   939dc:	20071f70 	.word	0x20071f70
   939e0:	0008f7a9 	.word	0x0008f7a9
   939e4:	000ab490 	.word	0x000ab490
   939e8:	000846fd 	.word	0x000846fd
   939ec:	000846b1 	.word	0x000846b1
   939f0:	000846bd 	.word	0x000846bd
   939f4:	000846d5 	.word	0x000846d5
   939f8:	00084709 	.word	0x00084709
   939fc:	000850e1 	.word	0x000850e1
   93a00:	20071800 	.word	0x20071800
   93a04:	000ab8b0 	.word	0x000ab8b0
   93a08:	000ab720 	.word	0x000ab720
			mw_reposition_window(mw_all_windows[window_being_redimensioned_id].window_handle,
   93a0c:	4fd3      	ldr	r7, [pc, #844]	; (93d5c <mw_process_message+0x21ec>)
					mw_all_windows[window_being_redimensioned_id].window_rect.y +
   93a0e:	f8df a38c 	ldr.w	sl, [pc, #908]	; 93d9c <mw_process_message+0x222c>
			mw_reposition_window(mw_all_windows[window_being_redimensioned_id].window_handle,
   93a12:	783b      	ldrb	r3, [r7, #0]
   93a14:	f8df 8388 	ldr.w	r8, [pc, #904]	; 93da0 <mw_process_message+0x2230>
					mw_all_windows[window_being_redimensioned_id].window_rect.y +
   93a18:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
   93a1c:	8b5a      	ldrh	r2, [r3, #26]
					mw_all_windows[window_being_redimensioned_id].window_rect.x +
   93a1e:	8b19      	ldrh	r1, [r3, #24]
					mw_all_windows[window_being_redimensioned_id].window_rect.y +
   93a20:	4432      	add	r2, r6
					mw_all_windows[window_being_redimensioned_id].window_rect.x +
   93a22:	4421      	add	r1, r4
			mw_reposition_window(mw_all_windows[window_being_redimensioned_id].window_handle,
   93a24:	6958      	ldr	r0, [r3, #20]
   93a26:	b212      	sxth	r2, r2
   93a28:	b209      	sxth	r1, r1
   93a2a:	47c0      	blx	r8
			draw_redimensioning_window_outline(mw_all_windows[window_being_redimensioned_id].window_handle);
   93a2c:	783b      	ldrb	r3, [r7, #0]
   93a2e:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
   93a32:	6958      	ldr	r0, [r3, #20]
	if (window_handle == MW_INVALID_HANDLE)
   93a34:	2800      	cmp	r0, #0
   93a36:	f000 81f6 	beq.w	93e26 <mw_process_message+0x22b6>
		if (mw_all_windows[i].window_handle == window_handle &&
   93a3a:	f8da 3014 	ldr.w	r3, [sl, #20]
   93a3e:	4298      	cmp	r0, r3
   93a40:	f000 85b8 	beq.w	945b4 <mw_process_message+0x2a44>
   93a44:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   93a48:	4298      	cmp	r0, r3
   93a4a:	f000 862e 	beq.w	946aa <mw_process_message+0x2b3a>
   93a4e:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   93a52:	4298      	cmp	r0, r3
   93a54:	f000 8622 	beq.w	9469c <mw_process_message+0x2b2c>
   93a58:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   93a5c:	4298      	cmp	r0, r3
   93a5e:	f000 8639 	beq.w	946d4 <mw_process_message+0x2b64>
   93a62:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   93a66:	4298      	cmp	r0, r3
   93a68:	f000 862d 	beq.w	946c6 <mw_process_message+0x2b56>
   93a6c:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   93a70:	4298      	cmp	r0, r3
   93a72:	f000 8621 	beq.w	946b8 <mw_process_message+0x2b48>
   93a76:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   93a7a:	4298      	cmp	r0, r3
   93a7c:	f000 86e6 	beq.w	9484c <mw_process_message+0x2cdc>
   93a80:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   93a84:	4298      	cmp	r0, r3
   93a86:	f000 8677 	beq.w	94778 <mw_process_message+0x2c08>
   93a8a:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   93a8e:	4298      	cmp	r0, r3
   93a90:	f000 866b 	beq.w	9476a <mw_process_message+0x2bfa>
   93a94:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   93a98:	4298      	cmp	r0, r3
   93a9a:	f000 8674 	beq.w	94786 <mw_process_message+0x2c16>
   93a9e:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   93aa2:	4298      	cmp	r0, r3
   93aa4:	f000 864c 	beq.w	94740 <mw_process_message+0x2bd0>
   93aa8:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   93aac:	4298      	cmp	r0, r3
   93aae:	f000 8655 	beq.w	9475c <mw_process_message+0x2bec>
   93ab2:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   93ab6:	4298      	cmp	r0, r3
   93ab8:	f000 8649 	beq.w	9474e <mw_process_message+0x2bde>
   93abc:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   93ac0:	4298      	cmp	r0, r3
   93ac2:	f000 81a8 	beq.w	93e16 <mw_process_message+0x22a6>
   93ac6:	240e      	movs	r4, #14
   93ac8:	2000      	movs	r0, #0
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   93aca:	f640 72fd 	movw	r2, #4093	; 0xffd
   93ace:	49a4      	ldr	r1, [pc, #656]	; (93d60 <mw_process_message+0x21f0>)
   93ad0:	4ba4      	ldr	r3, [pc, #656]	; (93d64 <mw_process_message+0x21f4>)
   93ad2:	47c8      	blx	r9
	mw_gl_set_fill(MW_GL_NO_FILL);
   93ad4:	2000      	movs	r0, #0
   93ad6:	4ba4      	ldr	r3, [pc, #656]	; (93d68 <mw_process_message+0x21f8>)
   93ad8:	4798      	blx	r3
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   93ada:	2000      	movs	r0, #0
   93adc:	4ba3      	ldr	r3, [pc, #652]	; (93d6c <mw_process_message+0x21fc>)
   93ade:	4798      	blx	r3
	mw_gl_set_bg_colour(MW_HAL_LCD_WHITE);
   93ae0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   93ae4:	4ba2      	ldr	r3, [pc, #648]	; (93d70 <mw_process_message+0x2200>)
   93ae6:	4798      	blx	r3
	mw_gl_set_line(MW_GL_EQUAL_LARGE_DASH);
   93ae8:	f44f 407f 	mov.w	r0, #65280	; 0xff00
   93aec:	4ba1      	ldr	r3, [pc, #644]	; (93d74 <mw_process_message+0x2204>)
   93aee:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_NOT_TRANSPARENT);
   93af0:	2001      	movs	r0, #1
   93af2:	4ba1      	ldr	r3, [pc, #644]	; (93d78 <mw_process_message+0x2208>)
   93af4:	4798      	blx	r3
	mw_gl_rectangle(&draw_info_root,
   93af6:	eb0a 1084 	add.w	r0, sl, r4, lsl #6
   93afa:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   93afe:	f9b0 201a 	ldrsh.w	r2, [r0, #26]
   93b02:	f9b0 1018 	ldrsh.w	r1, [r0, #24]
   93b06:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
   93b0a:	4c9c      	ldr	r4, [pc, #624]	; (93d7c <mw_process_message+0x220c>)
   93b0c:	9000      	str	r0, [sp, #0]
   93b0e:	489c      	ldr	r0, [pc, #624]	; (93d80 <mw_process_message+0x2210>)
   93b10:	47a0      	blx	r4
			window_redimensioning_state = WINDOW_BEING_MOVED;
   93b12:	2301      	movs	r3, #1
   93b14:	ae10      	add	r6, sp, #64	; 0x40
   93b16:	702b      	strb	r3, [r5, #0]
   93b18:	f7fe b953 	b.w	91dc2 <mw_process_message+0x252>
   93b1c:	4618      	mov	r0, r3
	if (control_handle == MW_INVALID_HANDLE)
   93b1e:	f04f 0818 	mov.w	r8, #24
   93b22:	f7fe bd44 	b.w	925ae <mw_process_message+0xa3e>
				do_paint_window_frame(mw_all_windows[window_id].window_handle, MW_WINDOW_FRAME_COMPONENT_ALL);
   93b26:	eb0a 1482 	add.w	r4, sl, r2, lsl #6
   93b2a:	6960      	ldr	r0, [r4, #20]
   93b2c:	211f      	movs	r1, #31
   93b2e:	47a8      	blx	r5
				do_paint_window_client(mw_all_windows[window_id].window_handle);
   93b30:	6960      	ldr	r0, [r4, #20]
   93b32:	4b94      	ldr	r3, [pc, #592]	; (93d84 <mw_process_message+0x2214>)
   93b34:	4798      	blx	r3
			  	paint_all_controls_in_window(mw_all_windows[window_id].window_handle);
   93b36:	f8d4 9014 	ldr.w	r9, [r4, #20]
	if (window_handle == MW_INVALID_HANDLE)
   93b3a:	f1b9 0f00 	cmp.w	r9, #0
   93b3e:	f43f a9ab 	beq.w	92e98 <mw_process_message+0x1328>
		if (mw_all_windows[i].window_handle == window_handle &&
   93b42:	f8da 3014 	ldr.w	r3, [sl, #20]
   93b46:	454b      	cmp	r3, r9
   93b48:	f000 87d8 	beq.w	94afc <mw_process_message+0x2f8c>
   93b4c:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   93b50:	4599      	cmp	r9, r3
   93b52:	f000 87cc 	beq.w	94aee <mw_process_message+0x2f7e>
   93b56:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   93b5a:	4599      	cmp	r9, r3
   93b5c:	f000 87c0 	beq.w	94ae0 <mw_process_message+0x2f70>
   93b60:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   93b64:	454b      	cmp	r3, r9
   93b66:	f000 87b4 	beq.w	94ad2 <mw_process_message+0x2f62>
   93b6a:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   93b6e:	454b      	cmp	r3, r9
   93b70:	f001 8050 	beq.w	94c14 <mw_process_message+0x30a4>
   93b74:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   93b78:	454b      	cmp	r3, r9
   93b7a:	f001 8044 	beq.w	94c06 <mw_process_message+0x3096>
   93b7e:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   93b82:	454b      	cmp	r3, r9
   93b84:	f001 8038 	beq.w	94bf8 <mw_process_message+0x3088>
   93b88:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   93b8c:	454b      	cmp	r3, r9
   93b8e:	f001 802c 	beq.w	94bea <mw_process_message+0x307a>
   93b92:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   93b96:	4599      	cmp	r9, r3
   93b98:	f001 8020 	beq.w	94bdc <mw_process_message+0x306c>
   93b9c:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   93ba0:	4599      	cmp	r9, r3
   93ba2:	f001 8014 	beq.w	94bce <mw_process_message+0x305e>
   93ba6:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   93baa:	4599      	cmp	r9, r3
   93bac:	f001 8008 	beq.w	94bc0 <mw_process_message+0x3050>
   93bb0:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   93bb4:	4599      	cmp	r9, r3
   93bb6:	f000 87f5 	beq.w	94ba4 <mw_process_message+0x3034>
   93bba:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   93bbe:	4599      	cmp	r9, r3
   93bc0:	f000 87a3 	beq.w	94b0a <mw_process_message+0x2f9a>
   93bc4:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   93bc8:	4599      	cmp	r9, r3
   93bca:	f47f a965 	bne.w	92e98 <mw_process_message+0x1328>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93bce:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   93bd2:	0699      	lsls	r1, r3, #26
   93bd4:	f57f a960 	bpl.w	92e98 <mw_process_message+0x1328>
   93bd8:	4c6b      	ldr	r4, [pc, #428]	; (93d88 <mw_process_message+0x2218>)
   93bda:	f504 7240 	add.w	r2, r4, #768	; 0x300
   93bde:	e003      	b.n	93be8 <mw_process_message+0x2078>
   93be0:	3420      	adds	r4, #32
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   93be2:	4294      	cmp	r4, r2
   93be4:	f43f a958 	beq.w	92e98 <mw_process_message+0x1328>
		if (mw_all_controls[i].parent_handle == window_handle &&
   93be8:	6963      	ldr	r3, [r4, #20]
   93bea:	4599      	cmp	r9, r3
   93bec:	d1f8      	bne.n	93be0 <mw_process_message+0x2070>
				(mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   93bee:	8ba3      	ldrh	r3, [r4, #28]
   93bf0:	f003 0305 	and.w	r3, r3, #5
   93bf4:	2b05      	cmp	r3, #5
   93bf6:	d1f3      	bne.n	93be0 <mw_process_message+0x2070>
			do_paint_control(mw_all_controls[i].control_handle);
   93bf8:	69a0      	ldr	r0, [r4, #24]
   93bfa:	9202      	str	r2, [sp, #8]
   93bfc:	47b0      	blx	r6
   93bfe:	9a02      	ldr	r2, [sp, #8]
   93c00:	e7ee      	b.n	93be0 <mw_process_message+0x2070>
			mw_post_message(touch_message,
   93c02:	f8da 4014 	ldr.w	r4, [sl, #20]
	if (window_handle == MW_INVALID_HANDLE)
   93c06:	2c00      	cmp	r4, #0
   93c08:	d045      	beq.n	93c96 <mw_process_message+0x2126>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93c0a:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   93c0e:	069f      	lsls	r7, r3, #26
   93c10:	f101 83b5 	bmi.w	9537e <mw_process_message+0x380e>
   93c14:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
   93c18:	429c      	cmp	r4, r3
   93c1a:	f001 8019 	beq.w	94c50 <mw_process_message+0x30e0>
   93c1e:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   93c22:	429c      	cmp	r4, r3
   93c24:	f001 800d 	beq.w	94c42 <mw_process_message+0x30d2>
   93c28:	f8da 30d4 	ldr.w	r3, [sl, #212]	; 0xd4
   93c2c:	429c      	cmp	r4, r3
   93c2e:	f001 8001 	beq.w	94c34 <mw_process_message+0x30c4>
   93c32:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   93c36:	429c      	cmp	r4, r3
   93c38:	f000 87f3 	beq.w	94c22 <mw_process_message+0x30b2>
   93c3c:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   93c40:	429c      	cmp	r4, r3
   93c42:	f001 800c 	beq.w	94c5e <mw_process_message+0x30ee>
   93c46:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   93c4a:	429c      	cmp	r4, r3
   93c4c:	f001 8015 	beq.w	94c7a <mw_process_message+0x310a>
   93c50:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   93c54:	429c      	cmp	r4, r3
   93c56:	f001 8009 	beq.w	94c6c <mw_process_message+0x30fc>
   93c5a:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   93c5e:	429c      	cmp	r4, r3
   93c60:	f001 8027 	beq.w	94cb2 <mw_process_message+0x3142>
   93c64:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   93c68:	429c      	cmp	r4, r3
   93c6a:	f001 801b 	beq.w	94ca4 <mw_process_message+0x3134>
   93c6e:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   93c72:	429c      	cmp	r4, r3
   93c74:	f001 800f 	beq.w	94c96 <mw_process_message+0x3126>
   93c78:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   93c7c:	429c      	cmp	r4, r3
   93c7e:	f001 8003 	beq.w	94c88 <mw_process_message+0x3118>
   93c82:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   93c86:	429c      	cmp	r4, r3
   93c88:	f001 801a 	beq.w	94cc0 <mw_process_message+0x3150>
   93c8c:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   93c90:	429c      	cmp	r4, r3
   93c92:	f000 8741 	beq.w	94b18 <mw_process_message+0x2fa8>
   93c96:	250e      	movs	r5, #14
   93c98:	2000      	movs	r0, #0
		MW_ASSERT(recipient_id < MW_MAX_WINDOW_COUNT , "Bad window handle");
   93c9a:	4b32      	ldr	r3, [pc, #200]	; (93d64 <mw_process_message+0x21f4>)
   93c9c:	f241 5262 	movw	r2, #5474	; 0x1562
   93ca0:	493a      	ldr	r1, [pc, #232]	; (93d8c <mw_process_message+0x221c>)
   93ca2:	47c8      	blx	r9
	new_message.message_recipient_type = recipient_type;
   93ca4:	2200      	movs	r2, #0
	new_message.message_id = message_id;
   93ca6:	2114      	movs	r1, #20
			(mw_all_windows[recipient_id].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED) ||
   93ca8:	eb0a 1385 	add.w	r3, sl, r5, lsl #6
   93cac:	68db      	ldr	r3, [r3, #12]
			mw_post_message(touch_message,
   93cae:	9802      	ldr	r0, [sp, #8]
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   93cb0:	069b      	lsls	r3, r3, #26
			mw_post_message(touch_message,
   93cb2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
	new_message.message_data = message_data;
   93cb6:	9013      	str	r0, [sp, #76]	; 0x4c
	new_message.recipient_handle = recipient_handle;
   93cb8:	9411      	str	r4, [sp, #68]	; 0x44
	new_message.message_id = message_id;
   93cba:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
	new_message.message_recipient_type = recipient_type;
   93cbe:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	new_message.sender_handle = sender_handle;
   93cc2:	9210      	str	r2, [sp, #64]	; 0x40
	new_message.message_pointer = message_pointer;
   93cc4:	9214      	str	r2, [sp, #80]	; 0x50
		(void)mw_message_queue_insert(&new_message);
   93cc6:	ae10      	add	r6, sp, #64	; 0x40
	if ((new_message.message_recipient_type == MW_WINDOW_MESSAGE &&
   93cc8:	d502      	bpl.n	93cd0 <mw_process_message+0x2160>
		(void)mw_message_queue_insert(&new_message);
   93cca:	4630      	mov	r0, r6
   93ccc:	4b30      	ldr	r3, [pc, #192]	; (93d90 <mw_process_message+0x2220>)
   93cce:	4798      	blx	r3
   93cd0:	f8da 1014 	ldr.w	r1, [sl, #20]
			touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_WINDOW_CLIENT;
   93cd4:	2200      	movs	r2, #0
			touch_message_target.touch_down_recipient_handle = mw_all_windows[MW_ROOT_WINDOW_ID].window_handle;
   93cd6:	4b2f      	ldr	r3, [pc, #188]	; (93d94 <mw_process_message+0x2224>)
   93cd8:	4d2f      	ldr	r5, [pc, #188]	; (93d98 <mw_process_message+0x2228>)
   93cda:	6059      	str	r1, [r3, #4]
			touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_WINDOW_CLIENT;
   93cdc:	701a      	strb	r2, [r3, #0]
   93cde:	f7fd bff1 	b.w	91cc4 <mw_process_message+0x154>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93ce2:	f8da 108c 	ldr.w	r1, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   93ce6:	068e      	lsls	r6, r1, #26
   93ce8:	f57f acb5 	bpl.w	93656 <mw_process_message+0x1ae6>
   93cec:	2302      	movs	r3, #2
   93cee:	e4ea      	b.n	936c6 <mw_process_message+0x1b56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93cf0:	f8da 104c 	ldr.w	r1, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   93cf4:	068f      	lsls	r7, r1, #26
   93cf6:	f57f aca9 	bpl.w	9364c <mw_process_message+0x1adc>
   93cfa:	2301      	movs	r3, #1
   93cfc:	e4e3      	b.n	936c6 <mw_process_message+0x1b56>
	if (window_handle == MW_INVALID_HANDLE)
   93cfe:	250e      	movs	r5, #14
   93d00:	f8df a098 	ldr.w	sl, [pc, #152]	; 93d9c <mw_process_message+0x222c>
   93d04:	f7fe bdec 	b.w	928e0 <mw_process_message+0xd70>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93d08:	f8da 10cc 	ldr.w	r1, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   93d0c:	0688      	lsls	r0, r1, #26
   93d0e:	f57f aca7 	bpl.w	93660 <mw_process_message+0x1af0>
   93d12:	2303      	movs	r3, #3
   93d14:	e4d7      	b.n	936c6 <mw_process_message+0x1b56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93d16:	f8da 110c 	ldr.w	r1, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   93d1a:	0689      	lsls	r1, r1, #26
   93d1c:	f57f aca5 	bpl.w	9366a <mw_process_message+0x1afa>
   93d20:	2304      	movs	r3, #4
   93d22:	e4d0      	b.n	936c6 <mw_process_message+0x1b56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93d24:	f8da 114c 	ldr.w	r1, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   93d28:	068f      	lsls	r7, r1, #26
   93d2a:	f57f aca3 	bpl.w	93674 <mw_process_message+0x1b04>
   93d2e:	2305      	movs	r3, #5
   93d30:	e4c9      	b.n	936c6 <mw_process_message+0x1b56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93d32:	f8da 11cc 	ldr.w	r1, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   93d36:	0688      	lsls	r0, r1, #26
   93d38:	f57f aca6 	bpl.w	93688 <mw_process_message+0x1b18>
   93d3c:	2307      	movs	r3, #7
   93d3e:	e4c2      	b.n	936c6 <mw_process_message+0x1b56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93d40:	f8da 118c 	ldr.w	r1, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   93d44:	068e      	lsls	r6, r1, #26
   93d46:	f57f ac9a 	bpl.w	9367e <mw_process_message+0x1b0e>
   93d4a:	2306      	movs	r3, #6
   93d4c:	e4bb      	b.n	936c6 <mw_process_message+0x1b56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93d4e:	f8da 124c 	ldr.w	r1, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   93d52:	068f      	lsls	r7, r1, #26
   93d54:	f57f aca2 	bpl.w	9369c <mw_process_message+0x1b2c>
   93d58:	2309      	movs	r3, #9
   93d5a:	e4b4      	b.n	936c6 <mw_process_message+0x1b56>
   93d5c:	20071fb0 	.word	0x20071fb0
   93d60:	000ab490 	.word	0x000ab490
   93d64:	000ab764 	.word	0x000ab764
   93d68:	000846fd 	.word	0x000846fd
   93d6c:	000846b1 	.word	0x000846b1
   93d70:	000846bd 	.word	0x000846bd
   93d74:	000846d5 	.word	0x000846d5
   93d78:	00084709 	.word	0x00084709
   93d7c:	000850e1 	.word	0x000850e1
   93d80:	20071800 	.word	0x20071800
   93d84:	00088879 	.word	0x00088879
   93d88:	20071858 	.word	0x20071858
   93d8c:	000ab710 	.word	0x000ab710
   93d90:	00095bc1 	.word	0x00095bc1
   93d94:	20071f70 	.word	0x20071f70
   93d98:	20071fb1 	.word	0x20071fb1
   93d9c:	20071bd8 	.word	0x20071bd8
   93da0:	0008f7a9 	.word	0x0008f7a9
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93da4:	f8da 120c 	ldr.w	r1, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   93da8:	0689      	lsls	r1, r1, #26
   93daa:	f57f ac72 	bpl.w	93692 <mw_process_message+0x1b22>
   93dae:	2308      	movs	r3, #8
   93db0:	e489      	b.n	936c6 <mw_process_message+0x1b56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93db2:	f8da 12cc 	ldr.w	r1, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   93db6:	0688      	lsls	r0, r1, #26
   93db8:	f57f ac7a 	bpl.w	936b0 <mw_process_message+0x1b40>
   93dbc:	230b      	movs	r3, #11
   93dbe:	e482      	b.n	936c6 <mw_process_message+0x1b56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93dc0:	f8da 128c 	ldr.w	r1, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   93dc4:	068e      	lsls	r6, r1, #26
   93dc6:	f57f ac6e 	bpl.w	936a6 <mw_process_message+0x1b36>
   93dca:	230a      	movs	r3, #10
   93dcc:	e47b      	b.n	936c6 <mw_process_message+0x1b56>
		if (check_and_process_touch_on_vert_window_scroll_bar(window_to_receive_message_id, touch_x, touch_y, touch_message_id, true))
   93dce:	2401      	movs	r4, #1
   93dd0:	2314      	movs	r3, #20
   93dd2:	9400      	str	r4, [sp, #0]
   93dd4:	9a02      	ldr	r2, [sp, #8]
   93dd6:	4641      	mov	r1, r8
   93dd8:	9803      	ldr	r0, [sp, #12]
   93dda:	4dc7      	ldr	r5, [pc, #796]	; (940f8 <mw_process_message+0x2588>)
   93ddc:	47a8      	blx	r5
   93dde:	2800      	cmp	r0, #0
   93de0:	f000 8787 	beq.w	94cf2 <mw_process_message+0x3182>
			touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_VERT_WINDOW_SCROLL_BAR;
   93de4:	2204      	movs	r2, #4
			touch_message_target.touch_down_recipient_handle = mw_all_windows[window_to_receive_message_id].window_handle;
   93de6:	9b04      	ldr	r3, [sp, #16]
   93de8:	4dc4      	ldr	r5, [pc, #784]	; (940fc <mw_process_message+0x258c>)
   93dea:	4453      	add	r3, sl
   93dec:	6959      	ldr	r1, [r3, #20]
			touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_HORIZ_WINDOW_SCROLL_BAR;
   93dee:	4bc4      	ldr	r3, [pc, #784]	; (94100 <mw_process_message+0x2590>)
			touch_message_target.touch_down_recipient_handle = mw_all_windows[window_to_receive_message_id].window_handle;
   93df0:	6059      	str	r1, [r3, #4]
			touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_HORIZ_WINDOW_SCROLL_BAR;
   93df2:	701a      	strb	r2, [r3, #0]
   93df4:	f7fd bf66 	b.w	91cc4 <mw_process_message+0x154>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93df8:	f8da 130c 	ldr.w	r1, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   93dfc:	0689      	lsls	r1, r1, #26
   93dfe:	f57f ac5c 	bpl.w	936ba <mw_process_message+0x1b4a>
   93e02:	230c      	movs	r3, #12
   93e04:	e45f      	b.n	936c6 <mw_process_message+0x1b56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93e06:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   93e0a:	f013 0f20 	tst.w	r3, #32
   93e0e:	bf0c      	ite	eq
   93e10:	230e      	moveq	r3, #14
   93e12:	230d      	movne	r3, #13
   93e14:	e457      	b.n	936c6 <mw_process_message+0x1b56>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93e16:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   93e1a:	f013 0020 	ands.w	r0, r3, #32
   93e1e:	bf18      	it	ne
   93e20:	240d      	movne	r4, #13
   93e22:	f040 83cd 	bne.w	945c0 <mw_process_message+0x2a50>
   93e26:	240e      	movs	r4, #14
   93e28:	e64f      	b.n	93aca <mw_process_message+0x1f5a>
	if (window_handle == MW_INVALID_HANDLE)
   93e2a:	230e      	movs	r3, #14
   93e2c:	4640      	mov	r0, r8
		return (MW_MAX_WINDOW_COUNT);
   93e2e:	461c      	mov	r4, r3
   93e30:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 94104 <mw_process_message+0x2594>
   93e34:	f7fe be7a 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93e38:	f8da 20cc 	ldr.w	r2, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   93e3c:	0695      	lsls	r5, r2, #26
   93e3e:	f57e a97f 	bpl.w	92140 <mw_process_message+0x5d0>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93e42:	2303      	movs	r3, #3
   93e44:	9303      	str	r3, [sp, #12]
   93e46:	f7fe b9c3 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93e4a:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   93e4e:	0696      	lsls	r6, r2, #26
   93e50:	f57e a971 	bpl.w	92136 <mw_process_message+0x5c6>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93e54:	2302      	movs	r3, #2
   93e56:	9303      	str	r3, [sp, #12]
   93e58:	f7fe b9ba 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93e5c:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   93e60:	0697      	lsls	r7, r2, #26
   93e62:	f57e a963 	bpl.w	9212c <mw_process_message+0x5bc>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93e66:	2301      	movs	r3, #1
   93e68:	9303      	str	r3, [sp, #12]
   93e6a:	f7fe b9b1 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93e6e:	f8da 210c 	ldr.w	r2, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   93e72:	0694      	lsls	r4, r2, #26
   93e74:	f57e a969 	bpl.w	9214a <mw_process_message+0x5da>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93e78:	2304      	movs	r3, #4
   93e7a:	9303      	str	r3, [sp, #12]
   93e7c:	f7fe b9a8 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93e80:	f8da 218c 	ldr.w	r2, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   93e84:	0691      	lsls	r1, r2, #26
   93e86:	f57e a96a 	bpl.w	9215e <mw_process_message+0x5ee>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93e8a:	2306      	movs	r3, #6
   93e8c:	9303      	str	r3, [sp, #12]
   93e8e:	f7fe b99f 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93e92:	f8da 214c 	ldr.w	r2, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   93e96:	0690      	lsls	r0, r2, #26
   93e98:	f57e a95c 	bpl.w	92154 <mw_process_message+0x5e4>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93e9c:	2305      	movs	r3, #5
   93e9e:	9303      	str	r3, [sp, #12]
   93ea0:	f7fe b996 	b.w	921d0 <mw_process_message+0x660>
	if (window_handle == MW_INVALID_HANDLE)
   93ea4:	469b      	mov	fp, r3
   93ea6:	270e      	movs	r7, #14
   93ea8:	e562      	b.n	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93eaa:	f8da 220c 	ldr.w	r2, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   93eae:	0697      	lsls	r7, r2, #26
   93eb0:	f57e a95f 	bpl.w	92172 <mw_process_message+0x602>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93eb4:	2308      	movs	r3, #8
   93eb6:	9303      	str	r3, [sp, #12]
   93eb8:	f7fe b98a 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93ebc:	f8da 21cc 	ldr.w	r2, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   93ec0:	0692      	lsls	r2, r2, #26
   93ec2:	f57e a951 	bpl.w	92168 <mw_process_message+0x5f8>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93ec6:	2307      	movs	r3, #7
   93ec8:	9303      	str	r3, [sp, #12]
   93eca:	f7fe b981 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93ece:	f8da 22cc 	ldr.w	r2, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   93ed2:	0694      	lsls	r4, r2, #26
   93ed4:	f57e a95c 	bpl.w	92190 <mw_process_message+0x620>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93ed8:	230b      	movs	r3, #11
   93eda:	9303      	str	r3, [sp, #12]
   93edc:	f7fe b978 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93ee0:	f8da 228c 	ldr.w	r2, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   93ee4:	0695      	lsls	r5, r2, #26
   93ee6:	f57e a94e 	bpl.w	92186 <mw_process_message+0x616>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93eea:	230a      	movs	r3, #10
   93eec:	9303      	str	r3, [sp, #12]
   93eee:	f7fe b96f 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93ef2:	f8da 224c 	ldr.w	r2, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   93ef6:	0696      	lsls	r6, r2, #26
   93ef8:	f57e a940 	bpl.w	9217c <mw_process_message+0x60c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93efc:	2309      	movs	r3, #9
   93efe:	9303      	str	r3, [sp, #12]
   93f00:	f7fe b966 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93f04:	f8da 230c 	ldr.w	r2, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   93f08:	0690      	lsls	r0, r2, #26
   93f0a:	f57e a946 	bpl.w	9219a <mw_process_message+0x62a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   93f0e:	230c      	movs	r3, #12
   93f10:	9303      	str	r3, [sp, #12]
   93f12:	f7fe b95d 	b.w	921d0 <mw_process_message+0x660>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93f16:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   93f1a:	0698      	lsls	r0, r3, #26
   93f1c:	f57f abf4 	bpl.w	93708 <mw_process_message+0x1b98>
   93f20:	f04f 0801 	mov.w	r8, #1
   93f24:	2001      	movs	r0, #1
   93f26:	e42e      	b.n	93786 <mw_process_message+0x1c16>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93f28:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   93f2c:	069b      	lsls	r3, r3, #26
   93f2e:	f57f abe6 	bpl.w	936fe <mw_process_message+0x1b8e>
   93f32:	f04f 0800 	mov.w	r8, #0
   93f36:	e7f5      	b.n	93f24 <mw_process_message+0x23b4>
	if (control_handle == MW_INVALID_HANDLE)
   93f38:	f04f 0818 	mov.w	r8, #24
   93f3c:	4650      	mov	r0, sl
   93f3e:	f7ff bb3e 	b.w	935be <mw_process_message+0x1a4e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93f42:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   93f46:	069a      	lsls	r2, r3, #26
   93f48:	f57f abe8 	bpl.w	9371c <mw_process_message+0x1bac>
   93f4c:	f04f 0803 	mov.w	r8, #3
   93f50:	e7e8      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93f52:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   93f56:	0699      	lsls	r1, r3, #26
   93f58:	f57f abdb 	bpl.w	93712 <mw_process_message+0x1ba2>
   93f5c:	f04f 0802 	mov.w	r8, #2
   93f60:	e7e0      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93f62:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   93f66:	0698      	lsls	r0, r3, #26
   93f68:	f57f abe2 	bpl.w	93730 <mw_process_message+0x1bc0>
   93f6c:	f04f 0805 	mov.w	r8, #5
   93f70:	e7d8      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93f72:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   93f76:	069b      	lsls	r3, r3, #26
   93f78:	f57f abd5 	bpl.w	93726 <mw_process_message+0x1bb6>
   93f7c:	f04f 0804 	mov.w	r8, #4
   93f80:	e7d0      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93f82:	68fb      	ldr	r3, [r7, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   93f84:	069b      	lsls	r3, r3, #26
   93f86:	f57e abe7 	bpl.w	92758 <mw_process_message+0xbe8>
   93f8a:	2300      	movs	r3, #0
   93f8c:	2001      	movs	r0, #1
   93f8e:	9302      	str	r3, [sp, #8]
   93f90:	f7fe bc25 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   93f96:	0699      	lsls	r1, r3, #26
   93f98:	f57e abe2 	bpl.w	92760 <mw_process_message+0xbf0>
   93f9c:	2301      	movs	r3, #1
   93f9e:	9302      	str	r3, [sp, #8]
   93fa0:	4618      	mov	r0, r3
   93fa2:	f7fe bc1c 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93fa6:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   93faa:	069a      	lsls	r2, r3, #26
   93fac:	f57f abca 	bpl.w	93744 <mw_process_message+0x1bd4>
   93fb0:	f04f 0807 	mov.w	r8, #7
   93fb4:	e7b6      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93fb6:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   93fba:	0699      	lsls	r1, r3, #26
   93fbc:	f57f abbd 	bpl.w	9373a <mw_process_message+0x1bca>
   93fc0:	f04f 0806 	mov.w	r8, #6
   93fc4:	e7ae      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93fc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   93fca:	069b      	lsls	r3, r3, #26
   93fcc:	f57e abd2 	bpl.w	92774 <mw_process_message+0xc04>
   93fd0:	2303      	movs	r3, #3
   93fd2:	2001      	movs	r0, #1
   93fd4:	9302      	str	r3, [sp, #8]
   93fd6:	f7fe bc02 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   93fde:	069a      	lsls	r2, r3, #26
   93fe0:	f57e abc3 	bpl.w	9276a <mw_process_message+0xbfa>
   93fe4:	2302      	movs	r3, #2
   93fe6:	2001      	movs	r0, #1
   93fe8:	9302      	str	r3, [sp, #8]
   93fea:	f7fe bbf8 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   93fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   93ff2:	0699      	lsls	r1, r3, #26
   93ff4:	f57e abc3 	bpl.w	9277e <mw_process_message+0xc0e>
   93ff8:	2304      	movs	r3, #4
   93ffa:	2001      	movs	r0, #1
   93ffc:	9302      	str	r3, [sp, #8]
   93ffe:	f7fe bbee 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94002:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   94006:	069b      	lsls	r3, r3, #26
   94008:	f57f aba1 	bpl.w	9374e <mw_process_message+0x1bde>
   9400c:	f04f 0808 	mov.w	r8, #8
   94010:	e788      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94012:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94016:	0699      	lsls	r1, r3, #26
   94018:	f57e abc0 	bpl.w	9279c <mw_process_message+0xc2c>
   9401c:	2307      	movs	r3, #7
   9401e:	2001      	movs	r0, #1
   94020:	9302      	str	r3, [sp, #8]
   94022:	f7fe bbdc 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94026:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   9402a:	069b      	lsls	r3, r3, #26
   9402c:	f57e abb1 	bpl.w	92792 <mw_process_message+0xc22>
   94030:	2306      	movs	r3, #6
   94032:	2001      	movs	r0, #1
   94034:	9302      	str	r3, [sp, #8]
   94036:	f7fe bbd2 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9403a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   9403e:	069a      	lsls	r2, r3, #26
   94040:	f57e abb1 	bpl.w	927a6 <mw_process_message+0xc36>
   94044:	2308      	movs	r3, #8
   94046:	2001      	movs	r0, #1
   94048:	9302      	str	r3, [sp, #8]
   9404a:	f7fe bbc8 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9404e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   94052:	069a      	lsls	r2, r3, #26
   94054:	f57e ab98 	bpl.w	92788 <mw_process_message+0xc18>
   94058:	2305      	movs	r3, #5
   9405a:	2001      	movs	r0, #1
   9405c:	9302      	str	r3, [sp, #8]
   9405e:	f7fe bbbe 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94062:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   94066:	0698      	lsls	r0, r3, #26
   94068:	f57f ab76 	bpl.w	93758 <mw_process_message+0x1be8>
   9406c:	f04f 0809 	mov.w	r8, #9
   94070:	e758      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94072:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94076:	069a      	lsls	r2, r3, #26
   94078:	f57f ab78 	bpl.w	9376c <mw_process_message+0x1bfc>
   9407c:	f04f 080b 	mov.w	r8, #11
   94080:	e750      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94082:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   94086:	0699      	lsls	r1, r3, #26
   94088:	f57f ab6b 	bpl.w	93762 <mw_process_message+0x1bf2>
   9408c:	f04f 080a 	mov.w	r8, #10
   94090:	e748      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94092:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   94096:	f013 0020 	ands.w	r0, r3, #32
   9409a:	bf18      	it	ne
   9409c:	f04f 080d 	movne.w	r8, #13
   940a0:	f47f af40 	bne.w	93f24 <mw_process_message+0x23b4>
   940a4:	f04f 080e 	mov.w	r8, #14
   940a8:	f7ff bb6d 	b.w	93786 <mw_process_message+0x1c16>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   940ac:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   940b0:	069b      	lsls	r3, r3, #26
   940b2:	f57f ab60 	bpl.w	93776 <mw_process_message+0x1c06>
   940b6:	f04f 080c 	mov.w	r8, #12
   940ba:	e733      	b.n	93f24 <mw_process_message+0x23b4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   940bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   940c0:	069b      	lsls	r3, r3, #26
   940c2:	f57e ab75 	bpl.w	927b0 <mw_process_message+0xc40>
   940c6:	2309      	movs	r3, #9
   940c8:	2001      	movs	r0, #1
   940ca:	9302      	str	r3, [sp, #8]
   940cc:	f7fe bb87 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   940d0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   940d4:	069a      	lsls	r2, r3, #26
   940d6:	f57e ab75 	bpl.w	927c4 <mw_process_message+0xc54>
   940da:	230b      	movs	r3, #11
   940dc:	2001      	movs	r0, #1
   940de:	9302      	str	r3, [sp, #8]
   940e0:	f7fe bb7d 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   940e4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   940e8:	0699      	lsls	r1, r3, #26
   940ea:	f57e ab66 	bpl.w	927ba <mw_process_message+0xc4a>
   940ee:	230a      	movs	r3, #10
   940f0:	2001      	movs	r0, #1
   940f2:	9302      	str	r3, [sp, #8]
   940f4:	f7fe bb73 	b.w	927de <mw_process_message+0xc6e>
   940f8:	0008d5e5 	.word	0x0008d5e5
   940fc:	20071fb1 	.word	0x20071fb1
   94100:	20071f70 	.word	0x20071f70
   94104:	20071bd8 	.word	0x20071bd8
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94108:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   9410c:	f003 0320 	and.w	r3, r3, #32
		if (mw_all_windows[i].window_handle == window_handle &&
   94110:	2b00      	cmp	r3, #0
   94112:	bf0a      	itet	eq
   94114:	230e      	moveq	r3, #14
   94116:	230d      	movne	r3, #13
   94118:	2000      	moveq	r0, #0
   9411a:	9302      	str	r3, [sp, #8]
   9411c:	bf18      	it	ne
   9411e:	2001      	movne	r0, #1
   94120:	f7fe bb5d 	b.w	927de <mw_process_message+0xc6e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94124:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   94128:	069b      	lsls	r3, r3, #26
   9412a:	f57e ab50 	bpl.w	927ce <mw_process_message+0xc5e>
   9412e:	230c      	movs	r3, #12
   94130:	2001      	movs	r0, #1
   94132:	9302      	str	r3, [sp, #8]
   94134:	f7fe bb53 	b.w	927de <mw_process_message+0xc6e>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   94138:	2001      	movs	r0, #1
   9413a:	f7fe ba38 	b.w	925ae <mw_process_message+0xa3e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9413e:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   94142:	0686      	lsls	r6, r0, #26
   94144:	f57e aec2 	bpl.w	92ecc <mw_process_message+0x135c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94148:	2001      	movs	r0, #1
   9414a:	f7fe bf01 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9414e:	f8da 000c 	ldr.w	r0, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   94152:	0687      	lsls	r7, r0, #26
   94154:	f57e aeb5 	bpl.w	92ec2 <mw_process_message+0x1352>
   94158:	2000      	movs	r0, #0
   9415a:	f7fe bef9 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9415e:	f8da 00cc 	ldr.w	r0, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   94162:	0687      	lsls	r7, r0, #26
   94164:	f57e aebc 	bpl.w	92ee0 <mw_process_message+0x1370>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94168:	2003      	movs	r0, #3
   9416a:	f7fe bef1 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9416e:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   94172:	0680      	lsls	r0, r0, #26
   94174:	f57e aeaf 	bpl.w	92ed6 <mw_process_message+0x1366>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94178:	2002      	movs	r0, #2
   9417a:	f7fe bee9 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9417e:	f8da 014c 	ldr.w	r0, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   94182:	0680      	lsls	r0, r0, #26
   94184:	f57e aeb6 	bpl.w	92ef4 <mw_process_message+0x1384>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94188:	2005      	movs	r0, #5
   9418a:	f7fe bee1 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9418e:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   94192:	0686      	lsls	r6, r0, #26
   94194:	f57e aea9 	bpl.w	92eea <mw_process_message+0x137a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94198:	2004      	movs	r0, #4
   9419a:	f7fe bed9 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9419e:	f8da 01cc 	ldr.w	r0, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   941a2:	0686      	lsls	r6, r0, #26
   941a4:	f57e aeb0 	bpl.w	92f08 <mw_process_message+0x1398>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   941a8:	2007      	movs	r0, #7
   941aa:	f7fe bed1 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   941ae:	f8da 018c 	ldr.w	r0, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   941b2:	0687      	lsls	r7, r0, #26
   941b4:	f57e aea3 	bpl.w	92efe <mw_process_message+0x138e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   941b8:	2006      	movs	r0, #6
   941ba:	f7fe bec9 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   941be:	f8da 028c 	ldr.w	r0, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   941c2:	0686      	lsls	r6, r0, #26
   941c4:	f57e aeaf 	bpl.w	92f26 <mw_process_message+0x13b6>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   941c8:	200a      	movs	r0, #10
   941ca:	f7fe bec1 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   941ce:	f8da 024c 	ldr.w	r0, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   941d2:	0687      	lsls	r7, r0, #26
   941d4:	f57e aea2 	bpl.w	92f1c <mw_process_message+0x13ac>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   941d8:	2009      	movs	r0, #9
   941da:	f7fe beb9 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   941de:	f8da 020c 	ldr.w	r0, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   941e2:	0680      	lsls	r0, r0, #26
   941e4:	f57e ae95 	bpl.w	92f12 <mw_process_message+0x13a2>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   941e8:	2008      	movs	r0, #8
   941ea:	f7fe beb1 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   941ee:	f8da 02cc 	ldr.w	r0, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   941f2:	0680      	lsls	r0, r0, #26
   941f4:	f57e ae9c 	bpl.w	92f30 <mw_process_message+0x13c0>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   941f8:	200b      	movs	r0, #11
   941fa:	f7fe bea9 	b.w	92f50 <mw_process_message+0x13e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   941fe:	f8da 030c 	ldr.w	r0, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   94202:	0687      	lsls	r7, r0, #26
   94204:	f57e ae99 	bpl.w	92f3a <mw_process_message+0x13ca>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94208:	200c      	movs	r0, #12
   9420a:	f7fe bea1 	b.w	92f50 <mw_process_message+0x13e0>
			if (touch_y < mw_all_windows[window_id].window_rect.y + MW_BORDER_WIDTH)
   9420e:	4284      	cmp	r4, r0
   94210:	f77f a83e 	ble.w	93290 <mw_process_message+0x1720>
			if (touch_x < mw_all_windows[window_id].window_rect.x + MW_BORDER_WIDTH)
   94214:	f9b1 0018 	ldrsh.w	r0, [r1, #24]
   94218:	4580      	cmp	r8, r0
   9421a:	f77f a839 	ble.w	93290 <mw_process_message+0x1720>
					mw_all_windows[window_id].window_rect.width - MW_BORDER_WIDTH)
   9421e:	f9b1 201c 	ldrsh.w	r2, [r1, #28]
			if (touch_x >= mw_all_windows[window_id].window_rect.x +
   94222:	4402      	add	r2, r0
					mw_all_windows[window_id].window_rect.width - MW_BORDER_WIDTH)
   94224:	3a01      	subs	r2, #1
			if (touch_x >= mw_all_windows[window_id].window_rect.x +
   94226:	4590      	cmp	r8, r2
   94228:	f6ff a819 	blt.w	9325e <mw_process_message+0x16ee>
   9422c:	f7ff b830 	b.w	93290 <mw_process_message+0x1720>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94230:	f8da 200c 	ldr.w	r2, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   94234:	0696      	lsls	r6, r2, #26
   94236:	f53f ab9b 	bmi.w	93970 <mw_process_message+0x1e00>
   9423a:	f7ff bb55 	b.w	938e8 <mw_process_message+0x1d78>
   9423e:	ae10      	add	r6, sp, #64	; 0x40
   94240:	4639      	mov	r1, r7
   94242:	e547      	b.n	93cd4 <mw_process_message+0x2164>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94244:	f8da 20cc 	ldr.w	r2, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   94248:	0692      	lsls	r2, r2, #26
   9424a:	f57e abd0 	bpl.w	929ee <mw_process_message+0xe7e>
	new_message.sender_handle = sender_handle;
   9424e:	2200      	movs	r2, #0
	new_message.message_id = message_id;
   94250:	254b      	movs	r5, #75	; 0x4b
	new_message.message_data = message_data;
   94252:	2404      	movs	r4, #4
	new_message.message_recipient_type = recipient_type;
   94254:	2102      	movs	r1, #2
	new_message.recipient_handle = recipient_handle;
   94256:	9311      	str	r3, [sp, #68]	; 0x44
		(void)mw_message_queue_insert(&new_message);
   94258:	4630      	mov	r0, r6
   9425a:	4bcf      	ldr	r3, [pc, #828]	; (94598 <mw_process_message+0x2a28>)
	new_message.message_id = message_id;
   9425c:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
	new_message.message_data = message_data;
   94260:	9413      	str	r4, [sp, #76]	; 0x4c
	new_message.message_recipient_type = recipient_type;
   94262:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
	new_message.sender_handle = sender_handle;
   94266:	9210      	str	r2, [sp, #64]	; 0x40
	new_message.message_pointer = message_pointer;
   94268:	9214      	str	r2, [sp, #80]	; 0x50
		(void)mw_message_queue_insert(&new_message);
   9426a:	4798      	blx	r3
   9426c:	f7fd bd34 	b.w	91cd8 <mw_process_message+0x168>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94270:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   94274:	0691      	lsls	r1, r2, #26
   94276:	d4ea      	bmi.n	9424e <mw_process_message+0x26de>
   94278:	f7fe bbb4 	b.w	929e4 <mw_process_message+0xe74>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9427c:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   94280:	0690      	lsls	r0, r2, #26
   94282:	d4e4      	bmi.n	9424e <mw_process_message+0x26de>
   94284:	f7fe bba9 	b.w	929da <mw_process_message+0xe6a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94288:	f8da 200c 	ldr.w	r2, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   9428c:	0694      	lsls	r4, r2, #26
   9428e:	d4de      	bmi.n	9424e <mw_process_message+0x26de>
   94290:	f7fe bb9e 	b.w	929d0 <mw_process_message+0xe60>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94294:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   94298:	069a      	lsls	r2, r3, #26
   9429a:	f57e ab45 	bpl.w	92928 <mw_process_message+0xdb8>
   9429e:	f04f 0803 	mov.w	r8, #3
   942a2:	2001      	movs	r0, #1
   942a4:	f7fe bb75 	b.w	92992 <mw_process_message+0xe22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   942a8:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   942ac:	0699      	lsls	r1, r3, #26
   942ae:	f57e ab36 	bpl.w	9291e <mw_process_message+0xdae>
   942b2:	f04f 0802 	mov.w	r8, #2
   942b6:	e7f4      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   942b8:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   942bc:	0698      	lsls	r0, r3, #26
   942be:	f57e ab29 	bpl.w	92914 <mw_process_message+0xda4>
   942c2:	f04f 0801 	mov.w	r8, #1
   942c6:	e7ec      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   942c8:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   942cc:	069b      	lsls	r3, r3, #26
   942ce:	f57e ab1c 	bpl.w	9290a <mw_process_message+0xd9a>
   942d2:	f04f 0800 	mov.w	r8, #0
   942d6:	e7e4      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   942d8:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   942dc:	069b      	lsls	r3, r3, #26
   942de:	f57e aacb 	bpl.w	92878 <mw_process_message+0xd08>
   942e2:	2503      	movs	r5, #3
   942e4:	2001      	movs	r0, #1
   942e6:	f7fe bafb 	b.w	928e0 <mw_process_message+0xd70>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   942ea:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   942ee:	069a      	lsls	r2, r3, #26
   942f0:	f57e aabd 	bpl.w	9286e <mw_process_message+0xcfe>
   942f4:	2502      	movs	r5, #2
   942f6:	e7f5      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   942f8:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   942fc:	0699      	lsls	r1, r3, #26
   942fe:	f57e aab1 	bpl.w	92864 <mw_process_message+0xcf4>
   94302:	2501      	movs	r5, #1
   94304:	e7ee      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94306:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   9430a:	069f      	lsls	r7, r3, #26
   9430c:	d4ea      	bmi.n	942e4 <mw_process_message+0x2774>
   9430e:	f7fe baa4 	b.w	9285a <mw_process_message+0xcea>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94312:	f8da 014c 	ldr.w	r0, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   94316:	0686      	lsls	r6, r0, #26
   94318:	f57e a98d 	bpl.w	92636 <mw_process_message+0xac6>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9431c:	2005      	movs	r0, #5
   9431e:	f7fe b9b8 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94322:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   94326:	0687      	lsls	r7, r0, #26
   94328:	f57e a980 	bpl.w	9262c <mw_process_message+0xabc>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9432c:	2004      	movs	r0, #4
   9432e:	f7fe b9b0 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94332:	f8da 00cc 	ldr.w	r0, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   94336:	0680      	lsls	r0, r0, #26
   94338:	f57e a973 	bpl.w	92622 <mw_process_message+0xab2>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9433c:	2003      	movs	r0, #3
   9433e:	f7fe b9a8 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94342:	f8da 008c 	ldr.w	r0, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   94346:	0686      	lsls	r6, r0, #26
   94348:	f57e a966 	bpl.w	92618 <mw_process_message+0xaa8>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9434c:	2002      	movs	r0, #2
   9434e:	f7fe b9a0 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94352:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   94356:	0687      	lsls	r7, r0, #26
   94358:	f57e a959 	bpl.w	9260e <mw_process_message+0xa9e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9435c:	2001      	movs	r0, #1
   9435e:	f7fe b998 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94362:	f8da 000c 	ldr.w	r0, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   94366:	0680      	lsls	r0, r0, #26
   94368:	f57e a94c 	bpl.w	92604 <mw_process_message+0xa94>
   9436c:	2000      	movs	r0, #0
   9436e:	f7fe b990 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94372:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   94376:	069d      	lsls	r5, r3, #26
   94378:	f57e aaa1 	bpl.w	928be <mw_process_message+0xd4e>
   9437c:	250a      	movs	r5, #10
   9437e:	e7b1      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94380:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   94384:	069f      	lsls	r7, r3, #26
   94386:	f57e aa95 	bpl.w	928b4 <mw_process_message+0xd44>
   9438a:	2509      	movs	r5, #9
   9438c:	e7aa      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9438e:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   94392:	069b      	lsls	r3, r3, #26
   94394:	f57e aa89 	bpl.w	928aa <mw_process_message+0xd3a>
   94398:	2508      	movs	r5, #8
   9439a:	e7a3      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9439c:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   943a0:	069a      	lsls	r2, r3, #26
   943a2:	f57e aa7d 	bpl.w	928a0 <mw_process_message+0xd30>
   943a6:	2507      	movs	r5, #7
   943a8:	e79c      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   943aa:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   943ae:	0699      	lsls	r1, r3, #26
   943b0:	f57e aa71 	bpl.w	92896 <mw_process_message+0xd26>
   943b4:	2506      	movs	r5, #6
   943b6:	e795      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   943b8:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   943bc:	069d      	lsls	r5, r3, #26
   943be:	f57e aa65 	bpl.w	9288c <mw_process_message+0xd1c>
   943c2:	2505      	movs	r5, #5
   943c4:	e78e      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   943c6:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   943ca:	069f      	lsls	r7, r3, #26
   943cc:	f57e aa59 	bpl.w	92882 <mw_process_message+0xd12>
   943d0:	2504      	movs	r5, #4
   943d2:	e787      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   943d4:	f8da 218c 	ldr.w	r2, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   943d8:	0694      	lsls	r4, r2, #26
   943da:	f57f aaa3 	bpl.w	93924 <mw_process_message+0x1db4>
   943de:	2706      	movs	r7, #6
   943e0:	f7ff bac6 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   943e4:	f8da 214c 	ldr.w	r2, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   943e8:	0696      	lsls	r6, r2, #26
   943ea:	f57f aa96 	bpl.w	9391a <mw_process_message+0x1daa>
   943ee:	2705      	movs	r7, #5
   943f0:	f7ff babe 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   943f4:	f8da 210c 	ldr.w	r2, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   943f8:	0692      	lsls	r2, r2, #26
   943fa:	f57f aa89 	bpl.w	93910 <mw_process_message+0x1da0>
   943fe:	2704      	movs	r7, #4
   94400:	f7ff bab6 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94404:	f8da 20cc 	ldr.w	r2, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   94408:	0691      	lsls	r1, r2, #26
   9440a:	f57f aa7c 	bpl.w	93906 <mw_process_message+0x1d96>
   9440e:	2703      	movs	r7, #3
   94410:	f7ff baae 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94414:	f8da 02cc 	ldr.w	r0, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94418:	0686      	lsls	r6, r0, #26
   9441a:	f57e a92a 	bpl.w	92672 <mw_process_message+0xb02>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9441e:	200b      	movs	r0, #11
   94420:	f7fe b937 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94424:	f8da 028c 	ldr.w	r0, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   94428:	0687      	lsls	r7, r0, #26
   9442a:	f57e a91d 	bpl.w	92668 <mw_process_message+0xaf8>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9442e:	200a      	movs	r0, #10
   94430:	f7fe b92f 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94434:	f8da 024c 	ldr.w	r0, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   94438:	0680      	lsls	r0, r0, #26
   9443a:	f57e a910 	bpl.w	9265e <mw_process_message+0xaee>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9443e:	2009      	movs	r0, #9
   94440:	f7fe b927 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94444:	f8da 020c 	ldr.w	r0, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   94448:	0686      	lsls	r6, r0, #26
   9444a:	f57e a903 	bpl.w	92654 <mw_process_message+0xae4>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9444e:	2008      	movs	r0, #8
   94450:	f7fe b91f 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94454:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   94458:	0690      	lsls	r0, r2, #26
   9445a:	f57f aa4f 	bpl.w	938fc <mw_process_message+0x1d8c>
   9445e:	2702      	movs	r7, #2
   94460:	f7ff ba86 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94464:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   94468:	0694      	lsls	r4, r2, #26
   9446a:	f57f aa42 	bpl.w	938f2 <mw_process_message+0x1d82>
   9446e:	2701      	movs	r7, #1
   94470:	f7ff ba7e 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94474:	f8da 030c 	ldr.w	r0, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   94478:	0680      	lsls	r0, r0, #26
   9447a:	f57e a8ff 	bpl.w	9267c <mw_process_message+0xb0c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9447e:	200c      	movs	r0, #12
   94480:	f7fe b907 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94484:	f8da 01cc 	ldr.w	r0, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94488:	0687      	lsls	r7, r0, #26
   9448a:	f57e a8de 	bpl.w	9264a <mw_process_message+0xada>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9448e:	2007      	movs	r0, #7
   94490:	f7fe b8ff 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94494:	f8da 018c 	ldr.w	r0, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   94498:	0680      	lsls	r0, r0, #26
   9449a:	f57e a8d1 	bpl.w	92640 <mw_process_message+0xad0>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9449e:	2006      	movs	r0, #6
   944a0:	f7fe b8f7 	b.w	92692 <mw_process_message+0xb22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   944a4:	f8da 220c 	ldr.w	r2, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   944a8:	0691      	lsls	r1, r2, #26
   944aa:	f57f aa45 	bpl.w	93938 <mw_process_message+0x1dc8>
   944ae:	2708      	movs	r7, #8
   944b0:	f7ff ba5e 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   944b4:	f8da 21cc 	ldr.w	r2, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   944b8:	0690      	lsls	r0, r2, #26
   944ba:	f57f aa38 	bpl.w	9392e <mw_process_message+0x1dbe>
   944be:	2707      	movs	r7, #7
   944c0:	f7ff ba56 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   944c4:	f8da 228c 	ldr.w	r2, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   944c8:	0697      	lsls	r7, r2, #26
   944ca:	f53f aec0 	bmi.w	9424e <mw_process_message+0x26de>
   944ce:	f7fe bab1 	b.w	92a34 <mw_process_message+0xec4>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   944d2:	f8da 224c 	ldr.w	r2, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   944d6:	0692      	lsls	r2, r2, #26
   944d8:	f53f aeb9 	bmi.w	9424e <mw_process_message+0x26de>
   944dc:	f7fe baa5 	b.w	92a2a <mw_process_message+0xeba>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   944e0:	f8da 220c 	ldr.w	r2, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   944e4:	0691      	lsls	r1, r2, #26
   944e6:	f53f aeb2 	bmi.w	9424e <mw_process_message+0x26de>
   944ea:	f7fe ba99 	b.w	92a20 <mw_process_message+0xeb0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   944ee:	f8da 21cc 	ldr.w	r2, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   944f2:	0690      	lsls	r0, r2, #26
   944f4:	f53f aeab 	bmi.w	9424e <mw_process_message+0x26de>
   944f8:	f7fe ba8d 	b.w	92a16 <mw_process_message+0xea6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   944fc:	f8da 218c 	ldr.w	r2, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   94500:	0694      	lsls	r4, r2, #26
   94502:	f53f aea4 	bmi.w	9424e <mw_process_message+0x26de>
   94506:	f7fe ba81 	b.w	92a0c <mw_process_message+0xe9c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9450a:	f8da 214c 	ldr.w	r2, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   9450e:	0695      	lsls	r5, r2, #26
   94510:	f53f ae9d 	bmi.w	9424e <mw_process_message+0x26de>
   94514:	f7fe ba75 	b.w	92a02 <mw_process_message+0xe92>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94518:	f8da 210c 	ldr.w	r2, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   9451c:	0697      	lsls	r7, r2, #26
   9451e:	f53f ae96 	bmi.w	9424e <mw_process_message+0x26de>
   94522:	f7fe ba69 	b.w	929f8 <mw_process_message+0xe88>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94526:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9452a:	069a      	lsls	r2, r3, #26
   9452c:	f57e aa10 	bpl.w	92950 <mw_process_message+0xde0>
   94530:	f04f 0807 	mov.w	r8, #7
   94534:	e6b5      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94536:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   9453a:	0699      	lsls	r1, r3, #26
   9453c:	f57e aa03 	bpl.w	92946 <mw_process_message+0xdd6>
   94540:	f04f 0806 	mov.w	r8, #6
   94544:	e6ad      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94546:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   9454a:	0698      	lsls	r0, r3, #26
   9454c:	f57e a9f6 	bpl.w	9293c <mw_process_message+0xdcc>
   94550:	f04f 0805 	mov.w	r8, #5
   94554:	e6a5      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94556:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   9455a:	069b      	lsls	r3, r3, #26
   9455c:	f57e a9e9 	bpl.w	92932 <mw_process_message+0xdc2>
   94560:	f04f 0804 	mov.w	r8, #4
   94564:	e69d      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94566:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   9456a:	0699      	lsls	r1, r3, #26
   9456c:	f57e a9ff 	bpl.w	9296e <mw_process_message+0xdfe>
   94570:	f04f 080a 	mov.w	r8, #10
   94574:	e695      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94576:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   9457a:	0698      	lsls	r0, r3, #26
   9457c:	f57e a9f2 	bpl.w	92964 <mw_process_message+0xdf4>
   94580:	f04f 0809 	mov.w	r8, #9
   94584:	e68d      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94586:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   9458a:	069b      	lsls	r3, r3, #26
   9458c:	f57e a9e5 	bpl.w	9295a <mw_process_message+0xdea>
   94590:	f04f 0808 	mov.w	r8, #8
   94594:	e685      	b.n	942a2 <mw_process_message+0x2732>
   94596:	bf00      	nop
   94598:	00095bc1 	.word	0x00095bc1
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9459c:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
   945a0:	f003 0320 	and.w	r3, r3, #32
		if (mw_all_windows[i].window_handle == window_handle &&
   945a4:	2b00      	cmp	r3, #0
   945a6:	bf06      	itte	eq
   945a8:	f04f 0b00 	moveq.w	fp, #0
   945ac:	270e      	moveq	r7, #14
   945ae:	270d      	movne	r7, #13
   945b0:	f7ff b9de 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   945b4:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   945b8:	069f      	lsls	r7, r3, #26
   945ba:	f57f aa43 	bpl.w	93a44 <mw_process_message+0x1ed4>
   945be:	2400      	movs	r4, #0
   945c0:	2001      	movs	r0, #1
   945c2:	f7ff ba82 	b.w	93aca <mw_process_message+0x1f5a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   945c6:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   945ca:	069a      	lsls	r2, r3, #26
   945cc:	f57e a9d4 	bpl.w	92978 <mw_process_message+0xe08>
   945d0:	f04f 080b 	mov.w	r8, #11
   945d4:	e665      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   945d6:	f8da 230c 	ldr.w	r2, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   945da:	0690      	lsls	r0, r2, #26
   945dc:	f57f a9c0 	bpl.w	93960 <mw_process_message+0x1df0>
   945e0:	270c      	movs	r7, #12
   945e2:	f7ff b9c5 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   945e6:	f8da 22cc 	ldr.w	r2, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   945ea:	0694      	lsls	r4, r2, #26
   945ec:	f57f a9b3 	bpl.w	93956 <mw_process_message+0x1de6>
   945f0:	270b      	movs	r7, #11
   945f2:	f7ff b9bd 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   945f6:	f8da 228c 	ldr.w	r2, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   945fa:	0696      	lsls	r6, r2, #26
   945fc:	f57f a9a6 	bpl.w	9394c <mw_process_message+0x1ddc>
   94600:	270a      	movs	r7, #10
   94602:	f7ff b9b5 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94606:	f8da 224c 	ldr.w	r2, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   9460a:	0692      	lsls	r2, r2, #26
   9460c:	f57f a999 	bpl.w	93942 <mw_process_message+0x1dd2>
   94610:	2709      	movs	r7, #9
   94612:	f7ff b9ad 	b.w	93970 <mw_process_message+0x1e00>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94616:	f8da 22cc 	ldr.w	r2, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9461a:	0695      	lsls	r5, r2, #26
   9461c:	f53f ae17 	bmi.w	9424e <mw_process_message+0x26de>
   94620:	f7fe ba0d 	b.w	92a3e <mw_process_message+0xece>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94624:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   94628:	f013 0020 	ands.w	r0, r3, #32
   9462c:	bf18      	it	ne
   9462e:	250d      	movne	r5, #13
   94630:	f47f ae58 	bne.w	942e4 <mw_process_message+0x2774>
   94634:	250e      	movs	r5, #14
   94636:	f7fe b953 	b.w	928e0 <mw_process_message+0xd70>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9463a:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   9463e:	069a      	lsls	r2, r3, #26
   94640:	f57e a947 	bpl.w	928d2 <mw_process_message+0xd62>
   94644:	250c      	movs	r5, #12
   94646:	e64d      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94648:	f8da 234c 	ldr.w	r2, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   9464c:	0690      	lsls	r0, r2, #26
   9464e:	f57e aa00 	bpl.w	92a52 <mw_process_message+0xee2>
   94652:	e5fc      	b.n	9424e <mw_process_message+0x26de>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94654:	f8da 230c 	ldr.w	r2, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   94658:	0694      	lsls	r4, r2, #26
   9465a:	f53f adf8 	bmi.w	9424e <mw_process_message+0x26de>
   9465e:	f7fe b9f3 	b.w	92a48 <mw_process_message+0xed8>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94662:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   94666:	f013 0320 	ands.w	r3, r3, #32
   9466a:	bf18      	it	ne
   9466c:	f04f 080d 	movne.w	r8, #13
   94670:	f47f ae17 	bne.w	942a2 <mw_process_message+0x2732>
   94674:	4618      	mov	r0, r3
   94676:	f04f 080e 	mov.w	r8, #14
   9467a:	f7fe b98a 	b.w	92992 <mw_process_message+0xe22>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9467e:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   94682:	069b      	lsls	r3, r3, #26
   94684:	f57e a97d 	bpl.w	92982 <mw_process_message+0xe12>
   94688:	f04f 080c 	mov.w	r8, #12
   9468c:	e609      	b.n	942a2 <mw_process_message+0x2732>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9468e:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94692:	0699      	lsls	r1, r3, #26
   94694:	f57e a918 	bpl.w	928c8 <mw_process_message+0xd58>
   94698:	250b      	movs	r5, #11
   9469a:	e623      	b.n	942e4 <mw_process_message+0x2774>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9469c:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   946a0:	069c      	lsls	r4, r3, #26
   946a2:	f57f a9d9 	bpl.w	93a58 <mw_process_message+0x1ee8>
   946a6:	2402      	movs	r4, #2
   946a8:	e78a      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   946aa:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   946ae:	069e      	lsls	r6, r3, #26
   946b0:	f57f a9cd 	bpl.w	93a4e <mw_process_message+0x1ede>
   946b4:	2401      	movs	r4, #1
   946b6:	e783      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   946b8:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   946bc:	069b      	lsls	r3, r3, #26
   946be:	f57f a9da 	bpl.w	93a76 <mw_process_message+0x1f06>
   946c2:	2405      	movs	r4, #5
   946c4:	e77c      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   946c6:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   946ca:	069a      	lsls	r2, r3, #26
   946cc:	f57f a9ce 	bpl.w	93a6c <mw_process_message+0x1efc>
   946d0:	2404      	movs	r4, #4
   946d2:	e775      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   946d4:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   946d8:	0699      	lsls	r1, r3, #26
   946da:	f57f a9c2 	bpl.w	93a62 <mw_process_message+0x1ef2>
   946de:	2403      	movs	r4, #3
   946e0:	e76e      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   946e2:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   946e6:	069a      	lsls	r2, r3, #26
   946e8:	f57e aa47 	bpl.w	92b7a <mw_process_message+0x100a>
   946ec:	2702      	movs	r7, #2
   946ee:	4658      	mov	r0, fp
   946f0:	f7fe ba7c 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   946f4:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   946f8:	0699      	lsls	r1, r3, #26
   946fa:	f57e aa39 	bpl.w	92b70 <mw_process_message+0x1000>
   946fe:	2701      	movs	r7, #1
   94700:	4658      	mov	r0, fp
   94702:	f7fe ba73 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94706:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   9470a:	0698      	lsls	r0, r3, #26
   9470c:	f57e aa2b 	bpl.w	92b66 <mw_process_message+0xff6>
   94710:	2700      	movs	r7, #0
   94712:	4658      	mov	r0, fp
   94714:	f7fe ba6a 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94718:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   9471c:	f013 0020 	ands.w	r0, r3, #32
   94720:	f041 8183 	bne.w	95a2a <mw_process_message+0x3eba>
   94724:	230e      	movs	r3, #14
		return (MW_MAX_WINDOW_COUNT);
   94726:	461c      	mov	r4, r3
   94728:	f7fe ba00 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9472c:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   94730:	069a      	lsls	r2, r3, #26
   94732:	f57e a9b7 	bpl.w	92aa4 <mw_process_message+0xf34>
   94736:	2400      	movs	r4, #0
		return (MW_MAX_WINDOW_COUNT);
   94738:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   9473a:	4623      	mov	r3, r4
   9473c:	f7fe b9f6 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94740:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   94744:	069a      	lsls	r2, r3, #26
   94746:	f57f a9af 	bpl.w	93aa8 <mw_process_message+0x1f38>
   9474a:	240a      	movs	r4, #10
   9474c:	e738      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9474e:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   94752:	069f      	lsls	r7, r3, #26
   94754:	f57f a9b2 	bpl.w	93abc <mw_process_message+0x1f4c>
   94758:	240c      	movs	r4, #12
   9475a:	e731      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9475c:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94760:	069b      	lsls	r3, r3, #26
   94762:	f57f a9a6 	bpl.w	93ab2 <mw_process_message+0x1f42>
   94766:	240b      	movs	r4, #11
   94768:	e72a      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9476a:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   9476e:	069c      	lsls	r4, r3, #26
   94770:	f57f a990 	bpl.w	93a94 <mw_process_message+0x1f24>
   94774:	2408      	movs	r4, #8
   94776:	e723      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94778:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9477c:	069e      	lsls	r6, r3, #26
   9477e:	f57f a984 	bpl.w	93a8a <mw_process_message+0x1f1a>
   94782:	2407      	movs	r4, #7
   94784:	e71c      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94786:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   9478a:	0699      	lsls	r1, r3, #26
   9478c:	f57f a987 	bpl.w	93a9e <mw_process_message+0x1f2e>
   94790:	2409      	movs	r4, #9
   94792:	e715      	b.n	945c0 <mw_process_message+0x2a50>
   94794:	f8da 7014 	ldr.w	r7, [sl, #20]
   94798:	42be      	cmp	r6, r7
   9479a:	f000 84fa 	beq.w	95192 <mw_process_message+0x3622>
   9479e:	f8da 7054 	ldr.w	r7, [sl, #84]	; 0x54
   947a2:	42be      	cmp	r6, r7
   947a4:	f000 84f0 	beq.w	95188 <mw_process_message+0x3618>
   947a8:	f8da 1094 	ldr.w	r1, [sl, #148]	; 0x94
   947ac:	428e      	cmp	r6, r1
   947ae:	f000 84e6 	beq.w	9517e <mw_process_message+0x360e>
   947b2:	f8da 20d4 	ldr.w	r2, [sl, #212]	; 0xd4
   947b6:	4296      	cmp	r6, r2
   947b8:	f000 84dc 	beq.w	95174 <mw_process_message+0x3604>
   947bc:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
   947c0:	429e      	cmp	r6, r3
   947c2:	f000 84c9 	beq.w	95158 <mw_process_message+0x35e8>
   947c6:	f8da 3154 	ldr.w	r3, [sl, #340]	; 0x154
   947ca:	429e      	cmp	r6, r3
   947cc:	f000 84bf 	beq.w	9514e <mw_process_message+0x35de>
   947d0:	f8da 3194 	ldr.w	r3, [sl, #404]	; 0x194
   947d4:	429e      	cmp	r6, r3
   947d6:	f000 84b4 	beq.w	95142 <mw_process_message+0x35d2>
   947da:	f8da 31d4 	ldr.w	r3, [sl, #468]	; 0x1d4
   947de:	429e      	cmp	r6, r3
   947e0:	f000 84e5 	beq.w	951ae <mw_process_message+0x363e>
   947e4:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
   947e8:	429e      	cmp	r6, r3
   947ea:	f000 85c3 	beq.w	95374 <mw_process_message+0x3804>
   947ee:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
   947f2:	429e      	cmp	r6, r3
   947f4:	f000 85b8 	beq.w	95368 <mw_process_message+0x37f8>
   947f8:	f8da 3294 	ldr.w	r3, [sl, #660]	; 0x294
   947fc:	429e      	cmp	r6, r3
   947fe:	f000 85ad 	beq.w	9535c <mw_process_message+0x37ec>
   94802:	f8da 32d4 	ldr.w	r3, [sl, #724]	; 0x2d4
   94806:	429e      	cmp	r6, r3
   94808:	f000 85a2 	beq.w	95350 <mw_process_message+0x37e0>
   9480c:	f8da 3314 	ldr.w	r3, [sl, #788]	; 0x314
   94810:	429e      	cmp	r6, r3
   94812:	f000 84d5 	beq.w	951c0 <mw_process_message+0x3650>
   94816:	f8da 3354 	ldr.w	r3, [sl, #852]	; 0x354
   9481a:	429e      	cmp	r6, r3
   9481c:	f47d ad44 	bne.w	922a8 <mw_process_message+0x738>
   94820:	9b09      	ldr	r3, [sp, #36]	; 0x24
   94822:	0699      	lsls	r1, r3, #26
   94824:	f57d ad40 	bpl.w	922a8 <mw_process_message+0x738>
	new_message.message_id = message_id;
   94828:	204b      	movs	r0, #75	; 0x4b
	new_message.message_recipient_type = recipient_type;
   9482a:	2202      	movs	r2, #2
	new_message.sender_handle = sender_handle;
   9482c:	2300      	movs	r3, #0
	new_message.message_data = message_data;
   9482e:	211f      	movs	r1, #31
	new_message.recipient_handle = recipient_handle;
   94830:	9611      	str	r6, [sp, #68]	; 0x44
		(void)mw_message_queue_insert(&new_message);
   94832:	ae10      	add	r6, sp, #64	; 0x40
	new_message.message_id = message_id;
   94834:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
	new_message.message_recipient_type = recipient_type;
   94838:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		(void)mw_message_queue_insert(&new_message);
   9483c:	4630      	mov	r0, r6
   9483e:	4add      	ldr	r2, [pc, #884]	; (94bb4 <mw_process_message+0x3044>)
	new_message.message_data = message_data;
   94840:	9113      	str	r1, [sp, #76]	; 0x4c
	new_message.sender_handle = sender_handle;
   94842:	9310      	str	r3, [sp, #64]	; 0x40
	new_message.message_pointer = message_pointer;
   94844:	9314      	str	r3, [sp, #80]	; 0x50
		(void)mw_message_queue_insert(&new_message);
   94846:	4790      	blx	r2
   94848:	f7fd bd35 	b.w	922b6 <mw_process_message+0x746>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9484c:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   94850:	069f      	lsls	r7, r3, #26
   94852:	f57f a915 	bpl.w	93a80 <mw_process_message+0x1f10>
   94856:	2406      	movs	r4, #6
   94858:	e6b2      	b.n	945c0 <mw_process_message+0x2a50>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9485a:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   9485e:	069f      	lsls	r7, r3, #26
   94860:	f53e aa60 	bmi.w	92d24 <mw_process_message+0x11b4>
   94864:	f7fe ba22 	b.w	92cac <mw_process_message+0x113c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94868:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   9486c:	069b      	lsls	r3, r3, #26
   9486e:	f53e aa59 	bmi.w	92d24 <mw_process_message+0x11b4>
   94872:	f7fe ba16 	b.w	92ca2 <mw_process_message+0x1132>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94876:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   9487a:	069a      	lsls	r2, r3, #26
   9487c:	f53e aa52 	bmi.w	92d24 <mw_process_message+0x11b4>
   94880:	f7fe ba0a 	b.w	92c98 <mw_process_message+0x1128>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94884:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   94888:	f013 0320 	ands.w	r3, r3, #32
   9488c:	bf18      	it	ne
   9488e:	270d      	movne	r7, #13
   94890:	f47f af2d 	bne.w	946ee <mw_process_message+0x2b7e>
   94894:	4618      	mov	r0, r3
   94896:	270e      	movs	r7, #14
   94898:	f7fe b9a8 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9489c:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   948a0:	069f      	lsls	r7, r3, #26
   948a2:	f57e a909 	bpl.w	92ab8 <mw_process_message+0xf48>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   948a6:	2402      	movs	r4, #2
		return (MW_MAX_WINDOW_COUNT);
   948a8:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   948aa:	4623      	mov	r3, r4
   948ac:	f7fe b93e 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   948b0:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   948b4:	069b      	lsls	r3, r3, #26
   948b6:	f57e a8fa 	bpl.w	92aae <mw_process_message+0xf3e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   948ba:	2401      	movs	r4, #1
		return (MW_MAX_WINDOW_COUNT);
   948bc:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   948be:	4623      	mov	r3, r4
   948c0:	f7fe b934 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   948c4:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   948c8:	0698      	lsls	r0, r3, #26
   948ca:	f57e a988 	bpl.w	92bde <mw_process_message+0x106e>
   948ce:	270c      	movs	r7, #12
   948d0:	4658      	mov	r0, fp
   948d2:	f7fe b98b 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   948d6:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   948da:	069e      	lsls	r6, r3, #26
   948dc:	f53e aa22 	bmi.w	92d24 <mw_process_message+0x11b4>
   948e0:	f7fe b9e9 	b.w	92cb6 <mw_process_message+0x1146>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   948e4:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   948e8:	0698      	lsls	r0, r3, #26
   948ea:	f53e aa1b 	bmi.w	92d24 <mw_process_message+0x11b4>
   948ee:	f7fe b9ec 	b.w	92cca <mw_process_message+0x115a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   948f2:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   948f6:	069c      	lsls	r4, r3, #26
   948f8:	f53e aa14 	bmi.w	92d24 <mw_process_message+0x11b4>
   948fc:	f7fe b9e0 	b.w	92cc0 <mw_process_message+0x1150>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94900:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   94904:	069c      	lsls	r4, r3, #26
   94906:	f57e a8e1 	bpl.w	92acc <mw_process_message+0xf5c>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9490a:	2404      	movs	r4, #4
		return (MW_MAX_WINDOW_COUNT);
   9490c:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   9490e:	4623      	mov	r3, r4
   94910:	f7fe b90c 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94914:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   94918:	069e      	lsls	r6, r3, #26
   9491a:	f57e a8d2 	bpl.w	92ac2 <mw_process_message+0xf52>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9491e:	2403      	movs	r4, #3
		return (MW_MAX_WINDOW_COUNT);
   94920:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   94922:	4623      	mov	r3, r4
   94924:	f7fe b902 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94928:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   9492c:	069b      	lsls	r3, r3, #26
   9492e:	f57e a8e1 	bpl.w	92af4 <mw_process_message+0xf84>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94932:	2408      	movs	r4, #8
		return (MW_MAX_WINDOW_COUNT);
   94934:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   94936:	4623      	mov	r3, r4
   94938:	f7fe b8f8 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9493c:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94940:	069a      	lsls	r2, r3, #26
   94942:	f57e a8d2 	bpl.w	92aea <mw_process_message+0xf7a>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94946:	2407      	movs	r4, #7
		return (MW_MAX_WINDOW_COUNT);
   94948:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   9494a:	4623      	mov	r3, r4
   9494c:	f7fe b8ee 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94950:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   94954:	0699      	lsls	r1, r3, #26
   94956:	f57e a8c3 	bpl.w	92ae0 <mw_process_message+0xf70>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9495a:	2406      	movs	r4, #6
		return (MW_MAX_WINDOW_COUNT);
   9495c:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   9495e:	4623      	mov	r3, r4
   94960:	f7fe b8e4 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94964:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   94968:	0698      	lsls	r0, r3, #26
   9496a:	f57e a8b4 	bpl.w	92ad6 <mw_process_message+0xf66>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   9496e:	2405      	movs	r4, #5
		return (MW_MAX_WINDOW_COUNT);
   94970:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   94972:	4623      	mov	r3, r4
   94974:	f7fe b8da 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94978:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9497c:	0699      	lsls	r1, r3, #26
   9497e:	f57e a915 	bpl.w	92bac <mw_process_message+0x103c>
   94982:	2707      	movs	r7, #7
   94984:	4658      	mov	r0, fp
   94986:	f7fe b931 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9498a:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   9498e:	0698      	lsls	r0, r3, #26
   94990:	f57e a907 	bpl.w	92ba2 <mw_process_message+0x1032>
   94994:	2706      	movs	r7, #6
   94996:	4658      	mov	r0, fp
   94998:	f7fe b928 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9499c:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   949a0:	069c      	lsls	r4, r3, #26
   949a2:	f57e a8f9 	bpl.w	92b98 <mw_process_message+0x1028>
   949a6:	2705      	movs	r7, #5
   949a8:	4658      	mov	r0, fp
   949aa:	f7fe b91f 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   949ae:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   949b2:	069f      	lsls	r7, r3, #26
   949b4:	f57e a8eb 	bpl.w	92b8e <mw_process_message+0x101e>
   949b8:	2704      	movs	r7, #4
   949ba:	4658      	mov	r0, fp
   949bc:	f7fe b916 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   949c0:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   949c4:	069b      	lsls	r3, r3, #26
   949c6:	f57e a8dd 	bpl.w	92b84 <mw_process_message+0x1014>
   949ca:	2703      	movs	r7, #3
   949cc:	4658      	mov	r0, fp
   949ce:	f7fe b90d 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   949d2:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   949d6:	069c      	lsls	r4, r3, #26
   949d8:	f53e a9a4 	bmi.w	92d24 <mw_process_message+0x11b4>
   949dc:	f7fe b993 	b.w	92d06 <mw_process_message+0x1196>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   949e0:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   949e4:	069e      	lsls	r6, r3, #26
   949e6:	f53e a99d 	bmi.w	92d24 <mw_process_message+0x11b4>
   949ea:	f7fe b987 	b.w	92cfc <mw_process_message+0x118c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   949ee:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   949f2:	0698      	lsls	r0, r3, #26
   949f4:	f53e a996 	bmi.w	92d24 <mw_process_message+0x11b4>
   949f8:	f7fe b98a 	b.w	92d10 <mw_process_message+0x11a0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   949fc:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   94a00:	0698      	lsls	r0, r3, #26
   94a02:	f57e a88b 	bpl.w	92b1c <mw_process_message+0xfac>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94a06:	240c      	movs	r4, #12
		return (MW_MAX_WINDOW_COUNT);
   94a08:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   94a0a:	4623      	mov	r3, r4
   94a0c:	f7fe b88e 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94a10:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94a14:	069c      	lsls	r4, r3, #26
   94a16:	f57e a87c 	bpl.w	92b12 <mw_process_message+0xfa2>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94a1a:	240b      	movs	r4, #11
		return (MW_MAX_WINDOW_COUNT);
   94a1c:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   94a1e:	4623      	mov	r3, r4
   94a20:	f7fe b884 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94a24:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   94a28:	069e      	lsls	r6, r3, #26
   94a2a:	f57e a86d 	bpl.w	92b08 <mw_process_message+0xf98>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94a2e:	240a      	movs	r4, #10
		return (MW_MAX_WINDOW_COUNT);
   94a30:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   94a32:	4623      	mov	r3, r4
   94a34:	f7fe b87a 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94a38:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   94a3c:	069f      	lsls	r7, r3, #26
   94a3e:	f57e a85e 	bpl.w	92afe <mw_process_message+0xf8e>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   94a42:	2409      	movs	r4, #9
		return (MW_MAX_WINDOW_COUNT);
   94a44:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   94a46:	4623      	mov	r3, r4
   94a48:	f7fe b870 	b.w	92b2c <mw_process_message+0xfbc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94a4c:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94a50:	069c      	lsls	r4, r3, #26
   94a52:	f57e a8bf 	bpl.w	92bd4 <mw_process_message+0x1064>
   94a56:	270b      	movs	r7, #11
   94a58:	4658      	mov	r0, fp
   94a5a:	f7fe b8c7 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94a5e:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   94a62:	069f      	lsls	r7, r3, #26
   94a64:	f57e a8b1 	bpl.w	92bca <mw_process_message+0x105a>
   94a68:	270a      	movs	r7, #10
   94a6a:	4658      	mov	r0, fp
   94a6c:	f7fe b8be 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94a70:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   94a74:	069b      	lsls	r3, r3, #26
   94a76:	f57e a8a3 	bpl.w	92bc0 <mw_process_message+0x1050>
   94a7a:	2709      	movs	r7, #9
   94a7c:	4658      	mov	r0, fp
   94a7e:	f7fe b8b5 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94a82:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   94a86:	069a      	lsls	r2, r3, #26
   94a88:	f57e a895 	bpl.w	92bb6 <mw_process_message+0x1046>
   94a8c:	2708      	movs	r7, #8
   94a8e:	4658      	mov	r0, fp
   94a90:	f7fe b8ac 	b.w	92bec <mw_process_message+0x107c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94a94:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   94a98:	069f      	lsls	r7, r3, #26
   94a9a:	f53e a943 	bmi.w	92d24 <mw_process_message+0x11b4>
   94a9e:	f7fe b928 	b.w	92cf2 <mw_process_message+0x1182>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94aa2:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   94aa6:	069b      	lsls	r3, r3, #26
   94aa8:	f53e a93c 	bmi.w	92d24 <mw_process_message+0x11b4>
   94aac:	f7fe b91c 	b.w	92ce8 <mw_process_message+0x1178>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94ab0:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94ab4:	069a      	lsls	r2, r3, #26
   94ab6:	f53e a935 	bmi.w	92d24 <mw_process_message+0x11b4>
   94aba:	f7fe b910 	b.w	92cde <mw_process_message+0x116e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94abe:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   94ac2:	0699      	lsls	r1, r3, #26
   94ac4:	f53e a92e 	bmi.w	92d24 <mw_process_message+0x11b4>
   94ac8:	f7fe b904 	b.w	92cd4 <mw_process_message+0x1164>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   94acc:	2001      	movs	r0, #1
   94ace:	f7fe bd76 	b.w	935be <mw_process_message+0x1a4e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94ad2:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   94ad6:	0699      	lsls	r1, r3, #26
   94ad8:	f53f a87e 	bmi.w	93bd8 <mw_process_message+0x2068>
   94adc:	f7ff b845 	b.w	93b6a <mw_process_message+0x1ffa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94ae0:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   94ae4:	0698      	lsls	r0, r3, #26
   94ae6:	f53f a877 	bmi.w	93bd8 <mw_process_message+0x2068>
   94aea:	f7ff b839 	b.w	93b60 <mw_process_message+0x1ff0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94aee:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   94af2:	069c      	lsls	r4, r3, #26
   94af4:	f53f a870 	bmi.w	93bd8 <mw_process_message+0x2068>
   94af8:	f7ff b82d 	b.w	93b56 <mw_process_message+0x1fe6>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94afc:	f8da 300c 	ldr.w	r3, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   94b00:	069b      	lsls	r3, r3, #26
   94b02:	f57f a823 	bpl.w	93b4c <mw_process_message+0x1fdc>
   94b06:	f7ff b867 	b.w	93bd8 <mw_process_message+0x2068>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94b0a:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   94b0e:	0698      	lsls	r0, r3, #26
   94b10:	f53f a862 	bmi.w	93bd8 <mw_process_message+0x2068>
   94b14:	f7ff b856 	b.w	93bc4 <mw_process_message+0x2054>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94b18:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   94b1c:	f013 0320 	ands.w	r3, r3, #32
   94b20:	bf18      	it	ne
   94b22:	250d      	movne	r5, #13
   94b24:	f040 8083 	bne.w	94c2e <mw_process_message+0x30be>
   94b28:	4618      	mov	r0, r3
   94b2a:	250e      	movs	r5, #14
   94b2c:	f7ff b8b5 	b.w	93c9a <mw_process_message+0x212a>
		if (mw_util_do_rects_coincide(&mw_all_windows[i].window_rect, &mw_all_windows[window_id].window_rect))
   94b30:	4639      	mov	r1, r7
   94b32:	4821      	ldr	r0, [pc, #132]	; (94bb8 <mw_process_message+0x3048>)
   94b34:	4b21      	ldr	r3, [pc, #132]	; (94bbc <mw_process_message+0x304c>)
   94b36:	4798      	blx	r3
   94b38:	4605      	mov	r5, r0
   94b3a:	2800      	cmp	r0, #0
   94b3c:	f47d ac99 	bne.w	92472 <mw_process_message+0x902>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94b40:	eb0a 0304 	add.w	r3, sl, r4
   94b44:	68db      	ldr	r3, [r3, #12]
   94b46:	f003 0228 	and.w	r2, r3, #40	; 0x28
   94b4a:	2a28      	cmp	r2, #40	; 0x28
   94b4c:	f43d abec 	beq.w	92328 <mw_process_message+0x7b8>
   94b50:	eb0a 0304 	add.w	r3, sl, r4
   94b54:	68db      	ldr	r3, [r3, #12]
   94b56:	f003 0228 	and.w	r2, r3, #40	; 0x28
   94b5a:	2a28      	cmp	r2, #40	; 0x28
   94b5c:	f43d ac00 	beq.w	92360 <mw_process_message+0x7f0>
   94b60:	eb0a 0304 	add.w	r3, sl, r4
   94b64:	68db      	ldr	r3, [r3, #12]
   94b66:	f003 0228 	and.w	r2, r3, #40	; 0x28
   94b6a:	2a28      	cmp	r2, #40	; 0x28
   94b6c:	f43d ac14 	beq.w	92398 <mw_process_message+0x828>
   94b70:	eb0a 0304 	add.w	r3, sl, r4
   94b74:	68db      	ldr	r3, [r3, #12]
   94b76:	f003 0228 	and.w	r2, r3, #40	; 0x28
   94b7a:	2a28      	cmp	r2, #40	; 0x28
   94b7c:	f43d ac28 	beq.w	923d0 <mw_process_message+0x860>
   94b80:	eb0a 0304 	add.w	r3, sl, r4
   94b84:	68db      	ldr	r3, [r3, #12]
   94b86:	f003 0228 	and.w	r2, r3, #40	; 0x28
   94b8a:	2a28      	cmp	r2, #40	; 0x28
   94b8c:	f43d ac3c 	beq.w	92408 <mw_process_message+0x898>
   94b90:	eb0a 0304 	add.w	r3, sl, r4
   94b94:	68db      	ldr	r3, [r3, #12]
   94b96:	f003 0228 	and.w	r2, r3, #40	; 0x28
   94b9a:	2a28      	cmp	r2, #40	; 0x28
   94b9c:	f47d ac68 	bne.w	92470 <mw_process_message+0x900>
   94ba0:	f7fd bc4e 	b.w	92440 <mw_process_message+0x8d0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94ba4:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94ba8:	069c      	lsls	r4, r3, #26
   94baa:	f53f a815 	bmi.w	93bd8 <mw_process_message+0x2068>
   94bae:	f7ff b804 	b.w	93bba <mw_process_message+0x204a>
   94bb2:	bf00      	nop
   94bb4:	00095bc1 	.word	0x00095bc1
   94bb8:	20071c30 	.word	0x20071c30
   94bbc:	00096ecd 	.word	0x00096ecd
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94bc0:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   94bc4:	069b      	lsls	r3, r3, #26
   94bc6:	f53f a807 	bmi.w	93bd8 <mw_process_message+0x2068>
   94bca:	f7fe bff1 	b.w	93bb0 <mw_process_message+0x2040>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94bce:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   94bd2:	069a      	lsls	r2, r3, #26
   94bd4:	f53f a800 	bmi.w	93bd8 <mw_process_message+0x2068>
   94bd8:	f7fe bfe5 	b.w	93ba6 <mw_process_message+0x2036>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94bdc:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   94be0:	0699      	lsls	r1, r3, #26
   94be2:	f53e aff9 	bmi.w	93bd8 <mw_process_message+0x2068>
   94be6:	f7fe bfd9 	b.w	93b9c <mw_process_message+0x202c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94bea:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94bee:	0698      	lsls	r0, r3, #26
   94bf0:	f53e aff2 	bmi.w	93bd8 <mw_process_message+0x2068>
   94bf4:	f7fe bfcd 	b.w	93b92 <mw_process_message+0x2022>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94bf8:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   94bfc:	069c      	lsls	r4, r3, #26
   94bfe:	f53e afeb 	bmi.w	93bd8 <mw_process_message+0x2068>
   94c02:	f7fe bfc1 	b.w	93b88 <mw_process_message+0x2018>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c06:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   94c0a:	069b      	lsls	r3, r3, #26
   94c0c:	f53e afe4 	bmi.w	93bd8 <mw_process_message+0x2068>
   94c10:	f7fe bfb5 	b.w	93b7e <mw_process_message+0x200e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c14:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   94c18:	069a      	lsls	r2, r3, #26
   94c1a:	f53e afdd 	bmi.w	93bd8 <mw_process_message+0x2068>
   94c1e:	f7fe bfa9 	b.w	93b74 <mw_process_message+0x2004>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c22:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   94c26:	0699      	lsls	r1, r3, #26
   94c28:	f57f a808 	bpl.w	93c3c <mw_process_message+0x20cc>
   94c2c:	2504      	movs	r5, #4
   94c2e:	2001      	movs	r0, #1
   94c30:	f7ff b833 	b.w	93c9a <mw_process_message+0x212a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c34:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   94c38:	0698      	lsls	r0, r3, #26
   94c3a:	f57e affa 	bpl.w	93c32 <mw_process_message+0x20c2>
   94c3e:	2503      	movs	r5, #3
   94c40:	e7f5      	b.n	94c2e <mw_process_message+0x30be>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c42:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   94c46:	069d      	lsls	r5, r3, #26
   94c48:	f57e afee 	bpl.w	93c28 <mw_process_message+0x20b8>
   94c4c:	2502      	movs	r5, #2
   94c4e:	e7ee      	b.n	94c2e <mw_process_message+0x30be>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c50:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   94c54:	069e      	lsls	r6, r3, #26
   94c56:	f57e afe2 	bpl.w	93c1e <mw_process_message+0x20ae>
   94c5a:	2501      	movs	r5, #1
   94c5c:	e7e7      	b.n	94c2e <mw_process_message+0x30be>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c5e:	f8da 314c 	ldr.w	r3, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   94c62:	069a      	lsls	r2, r3, #26
   94c64:	f57e afef 	bpl.w	93c46 <mw_process_message+0x20d6>
   94c68:	2505      	movs	r5, #5
   94c6a:	e7e0      	b.n	94c2e <mw_process_message+0x30be>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c6c:	f8da 31cc 	ldr.w	r3, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94c70:	069f      	lsls	r7, r3, #26
   94c72:	f57e aff2 	bpl.w	93c5a <mw_process_message+0x20ea>
   94c76:	2507      	movs	r5, #7
   94c78:	e7d9      	b.n	94c2e <mw_process_message+0x30be>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c7a:	f8da 318c 	ldr.w	r3, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   94c7e:	069b      	lsls	r3, r3, #26
   94c80:	f57e afe6 	bpl.w	93c50 <mw_process_message+0x20e0>
   94c84:	2506      	movs	r5, #6
   94c86:	e7d2      	b.n	94c2e <mw_process_message+0x30be>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c88:	f8da 32cc 	ldr.w	r3, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   94c8c:	0699      	lsls	r1, r3, #26
   94c8e:	f57e aff8 	bpl.w	93c82 <mw_process_message+0x2112>
   94c92:	250b      	movs	r5, #11
   94c94:	e7cb      	b.n	94c2e <mw_process_message+0x30be>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94c96:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   94c9a:	0698      	lsls	r0, r3, #26
   94c9c:	f57e afec 	bpl.w	93c78 <mw_process_message+0x2108>
   94ca0:	250a      	movs	r5, #10
   94ca2:	e7c4      	b.n	94c2e <mw_process_message+0x30be>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94ca4:	f8da 324c 	ldr.w	r3, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   94ca8:	069d      	lsls	r5, r3, #26
   94caa:	f57e afe0 	bpl.w	93c6e <mw_process_message+0x20fe>
   94cae:	2509      	movs	r5, #9
   94cb0:	e7bd      	b.n	94c2e <mw_process_message+0x30be>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94cb2:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   94cb6:	069e      	lsls	r6, r3, #26
   94cb8:	f57e afd4 	bpl.w	93c64 <mw_process_message+0x20f4>
   94cbc:	2508      	movs	r5, #8
   94cbe:	e7b6      	b.n	94c2e <mw_process_message+0x30be>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   94cc0:	f8da 330c 	ldr.w	r3, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   94cc4:	069a      	lsls	r2, r3, #26
   94cc6:	f57e afe1 	bpl.w	93c8c <mw_process_message+0x211c>
   94cca:	250c      	movs	r5, #12
   94ccc:	e7af      	b.n	94c2e <mw_process_message+0x30be>
	if (window_handle == MW_INVALID_HANDLE)
   94cce:	240e      	movs	r4, #14
   94cd0:	f7fd bafe 	b.w	922d0 <mw_process_message+0x760>
				if (check_and_process_touch_on_vert_window_scroll_bar(window_to_receive_message_id, touch_x, touch_y, touch_message_id, false))
   94cd4:	2300      	movs	r3, #0
   94cd6:	4f52      	ldr	r7, [pc, #328]	; (94e20 <mw_process_message+0x32b0>)
   94cd8:	9300      	str	r3, [sp, #0]
   94cda:	9b02      	ldr	r3, [sp, #8]
   94cdc:	47b8      	blx	r7
   94cde:	2800      	cmp	r0, #0
   94ce0:	f43d a98a 	beq.w	91ff8 <mw_process_message+0x488>
					if (touch_message_id == MW_TOUCH_UP_MESSAGE)
   94ce4:	9b02      	ldr	r3, [sp, #8]
   94ce6:	ae10      	add	r6, sp, #64	; 0x40
   94ce8:	2b16      	cmp	r3, #22
   94cea:	f47c afeb 	bne.w	91cc4 <mw_process_message+0x154>
   94cee:	f7fc bfe7 	b.w	91cc0 <mw_process_message+0x150>
		if (check_and_process_touch_on_horiz_window_scroll_bar(window_to_receive_message_id, touch_x, touch_y, touch_message_id, true))
   94cf2:	9400      	str	r4, [sp, #0]
   94cf4:	9803      	ldr	r0, [sp, #12]
   94cf6:	2314      	movs	r3, #20
   94cf8:	9a02      	ldr	r2, [sp, #8]
   94cfa:	4641      	mov	r1, r8
   94cfc:	4c49      	ldr	r4, [pc, #292]	; (94e24 <mw_process_message+0x32b4>)
   94cfe:	47a0      	blx	r4
   94d00:	2800      	cmp	r0, #0
   94d02:	f000 833e 	beq.w	95382 <mw_process_message+0x3812>
			touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_HORIZ_WINDOW_SCROLL_BAR;
   94d06:	2203      	movs	r2, #3
   94d08:	f7ff b86d 	b.w	93de6 <mw_process_message+0x2276>
	(void)memcpy((&invalid_rect_copy), (invalid_rect), (sizeof(mw_util_rect_t)));
   94d0c:	6828      	ldr	r0, [r5, #0]
   94d0e:	6869      	ldr	r1, [r5, #4]
   94d10:	aa0e      	add	r2, sp, #56	; 0x38
   94d12:	c203      	stmia	r2!, {r0, r1}
	invalid_rect_copy.x += mw_all_windows[window_id].client_rect.x;
   94d14:	f9b3 4020 	ldrsh.w	r4, [r3, #32]
	invalid_rect_copy.y += mw_all_windows[window_id].client_rect.y;
   94d18:	f9b3 1022 	ldrsh.w	r1, [r3, #34]	; 0x22
	invalid_rect_copy.x += mw_all_windows[window_id].client_rect.x;
   94d1c:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
	invalid_rect_copy.y += mw_all_windows[window_id].client_rect.y;
   94d20:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
	invalid_rect_copy.x += mw_all_windows[window_id].client_rect.x;
   94d24:	b2a3      	uxth	r3, r4
	invalid_rect_copy.y += mw_all_windows[window_id].client_rect.y;
   94d26:	b28a      	uxth	r2, r1
	invalid_rect_copy.x += mw_all_windows[window_id].client_rect.x;
   94d28:	18f7      	adds	r7, r6, r3
   94d2a:	b23f      	sxth	r7, r7
	invalid_rect_copy.y += mw_all_windows[window_id].client_rect.y;
   94d2c:	1885      	adds	r5, r0, r2
   94d2e:	b22d      	sxth	r5, r5
	if (invalid_rect_copy.x < mw_all_windows[window_id].client_rect.x)
   94d30:	42bc      	cmp	r4, r7
	invalid_rect_copy.x += mw_all_windows[window_id].client_rect.x;
   94d32:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
	invalid_rect_copy.y += mw_all_windows[window_id].client_rect.y;
   94d36:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
	if (invalid_rect_copy.x < mw_all_windows[window_id].client_rect.x)
   94d3a:	dd06      	ble.n	94d4a <mw_process_message+0x31da>
		invalid_rect_copy.width -= overlap;
   94d3c:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
		invalid_rect_copy.x = mw_all_windows[window_id].client_rect.x;
   94d40:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
		invalid_rect_copy.width -= overlap;
   94d44:	443e      	add	r6, r7
   94d46:	f8ad 603c 	strh.w	r6, [sp, #60]	; 0x3c
	if (invalid_rect_copy.y < mw_all_windows[window_id].client_rect.y)
   94d4a:	42a9      	cmp	r1, r5
   94d4c:	dd06      	ble.n	94d5c <mw_process_message+0x31ec>
		invalid_rect_copy.height -= overlap;
   94d4e:	f8bd 503e 	ldrh.w	r5, [sp, #62]	; 0x3e
		invalid_rect_copy.y = mw_all_windows[window_id].client_rect.y;
   94d52:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
		invalid_rect_copy.height -= overlap;
   94d56:	4428      	add	r0, r5
   94d58:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
			mw_all_windows[window_id].client_rect.width)
   94d5c:	9802      	ldr	r0, [sp, #8]
	if (invalid_rect_copy.x + invalid_rect_copy.width > mw_all_windows[window_id].client_rect.x +
   94d5e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
			mw_all_windows[window_id].client_rect.width)
   94d62:	4450      	add	r0, sl
   94d64:	f9b0 5024 	ldrsh.w	r5, [r0, #36]	; 0x24
	if (invalid_rect_copy.x + invalid_rect_copy.width > mw_all_windows[window_id].client_rect.x +
   94d68:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
   94d6c:	442c      	add	r4, r5
   94d6e:	1987      	adds	r7, r0, r6
   94d70:	42a7      	cmp	r7, r4
   94d72:	dd04      	ble.n	94d7e <mw_process_message+0x320e>
		invalid_rect_copy.width -= overlap;
   94d74:	442b      	add	r3, r5
   94d76:	1b9b      	subs	r3, r3, r6
   94d78:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   94d7c:	b218      	sxth	r0, r3
	if (invalid_rect_copy.y + invalid_rect_copy.height > mw_all_windows[window_id].client_rect.y + mw_all_windows[window_id].client_rect.width)
   94d7e:	f9bd 403a 	ldrsh.w	r4, [sp, #58]	; 0x3a
   94d82:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
   94d86:	4429      	add	r1, r5
   94d88:	4423      	add	r3, r4
   94d8a:	428b      	cmp	r3, r1
   94d8c:	dd06      	ble.n	94d9c <mw_process_message+0x322c>
					(mw_all_windows[window_id].client_rect.y + mw_all_windows[window_id].client_rect.height);
   94d8e:	9b02      	ldr	r3, [sp, #8]
   94d90:	4453      	add	r3, sl
			invalid_rect_copy.height -= overlap;
   94d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   94d94:	4413      	add	r3, r2
   94d96:	1b1b      	subs	r3, r3, r4
   94d98:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	if (invalid_rect_copy.width == 0 || invalid_rect_copy.height == 0)
   94d9c:	2800      	cmp	r0, #0
   94d9e:	f43d aed9 	beq.w	92b54 <mw_process_message+0xfe4>
   94da2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
   94da6:	2b00      	cmp	r3, #0
   94da8:	f43d aed4 	beq.w	92b54 <mw_process_message+0xfe4>
	int16_t root_width = MW_ROOT_WIDTH;
   94dac:	4b1e      	ldr	r3, [pc, #120]	; (94e28 <mw_process_message+0x32b8>)
   94dae:	4798      	blx	r3
	int16_t root_height = MW_ROOT_HEIGHT;
   94db0:	4b1e      	ldr	r3, [pc, #120]	; (94e2c <mw_process_message+0x32bc>)
	int16_t root_width = MW_ROOT_WIDTH;
   94db2:	4604      	mov	r4, r0
	int16_t root_height = MW_ROOT_HEIGHT;
   94db4:	4798      	blx	r3
	return (rect->x >= 0 &&
   94db6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
			rect->x + rect->width <= root_width &&
   94dba:	2900      	cmp	r1, #0
   94dbc:	db0e      	blt.n	94ddc <mw_process_message+0x326c>
			rect->y >= 0 &&
   94dbe:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
	return (rect->x >= 0 &&
   94dc2:	2a00      	cmp	r2, #0
   94dc4:	db0a      	blt.n	94ddc <mw_process_message+0x326c>
			rect->x + rect->width <= root_width &&
   94dc6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
   94dca:	440b      	add	r3, r1
			rect->y >= 0 &&
   94dcc:	42a3      	cmp	r3, r4
   94dce:	dc05      	bgt.n	94ddc <mw_process_message+0x326c>
			rect->y + rect->height <= root_height);
   94dd0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
   94dd4:	4413      	add	r3, r2
			rect->x + rect->width <= root_width &&
   94dd6:	4283      	cmp	r3, r0
   94dd8:	f340 85fa 	ble.w	959d0 <mw_process_message+0x3e60>
		find_rect_window_intersections(&invalid_rect_copy, &horiz_edges_count, &vert_edges_count);
   94ddc:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
   94de0:	a80e      	add	r0, sp, #56	; 0x38
   94de2:	a90b      	add	r1, sp, #44	; 0x2c
   94de4:	4b12      	ldr	r3, [pc, #72]	; (94e30 <mw_process_message+0x32c0>)
   94de6:	4798      	blx	r3
		for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   94de8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   94dec:	2a01      	cmp	r2, #1
   94dee:	f43d aeb1 	beq.w	92b54 <mw_process_message+0xfe4>
   94df2:	2300      	movs	r3, #0
   94df4:	4618      	mov	r0, r3
   94df6:	9304      	str	r3, [sp, #16]
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   94df8:	f8cd 8018 	str.w	r8, [sp, #24]
			rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   94dfc:	490d      	ldr	r1, [pc, #52]	; (94e34 <mw_process_message+0x32c4>)
   94dfe:	3301      	adds	r3, #1
   94e00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			rect_current.y = horizontal_edges[horizontal_edge_counter];
   94e04:	f931 7010 	ldrsh.w	r7, [r1, r0, lsl #1]
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   94e08:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
			rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   94e0c:	1bdb      	subs	r3, r3, r7
   94e0e:	b21b      	sxth	r3, r3
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   94e10:	2901      	cmp	r1, #1
			rect_current.height = (horizontal_edges[horizontal_edge_counter + 1U] - rect_current.y);
   94e12:	9307      	str	r3, [sp, #28]
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   94e14:	f000 818a 	beq.w	9512c <mw_process_message+0x35bc>
   94e18:	2300      	movs	r3, #0
   94e1a:	461d      	mov	r5, r3
   94e1c:	9303      	str	r3, [sp, #12]
   94e1e:	e018      	b.n	94e52 <mw_process_message+0x32e2>
   94e20:	0008d5e5 	.word	0x0008d5e5
   94e24:	0008d0e9 	.word	0x0008d0e9
   94e28:	00086e2d 	.word	0x00086e2d
   94e2c:	00086e31 	.word	0x00086e31
   94e30:	00087e11 	.word	0x00087e11
   94e34:	2007180c 	.word	0x2007180c
					if (rect_waiting_to_be_painted)
   94e38:	9b03      	ldr	r3, [sp, #12]
   94e3a:	2b00      	cmp	r3, #0
   94e3c:	f040 8167 	bne.w	9510e <mw_process_message+0x359e>
			for (vertical_edge_counter = 0U; vertical_edge_counter < vert_edges_count - 1U; vertical_edge_counter++)
   94e40:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   94e44:	3501      	adds	r5, #1
   94e46:	b2ad      	uxth	r5, r5
   94e48:	3a01      	subs	r2, #1
   94e4a:	4295      	cmp	r5, r2
   94e4c:	462b      	mov	r3, r5
   94e4e:	f080 8165 	bcs.w	9511c <mw_process_message+0x35ac>
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   94e52:	48c4      	ldr	r0, [pc, #784]	; (95164 <mw_process_message+0x35f4>)
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94e54:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   94e58:	3301      	adds	r3, #1
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94e5a:	f002 0128 	and.w	r1, r2, #40	; 0x28
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   94e5e:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94e62:	2928      	cmp	r1, #40	; 0x28
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   94e64:	9305      	str	r3, [sp, #20]
				rect_current.x = vertical_edges[vertical_edge_counter];
   94e66:	f930 6015 	ldrsh.w	r6, [r0, r5, lsl #1]
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94e6a:	d102      	bne.n	94e72 <mw_process_message+0x3302>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94e6c:	06d2      	lsls	r2, r2, #27
   94e6e:	f140 81ad 	bpl.w	951cc <mw_process_message+0x365c>
	uint8_t highest_z_order = 0U;
   94e72:	f04f 0800 	mov.w	r8, #0
	uint8_t window_id = MW_ROOT_WINDOW_ID;
   94e76:	4644      	mov	r4, r8
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94e78:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
   94e7c:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94e80:	2928      	cmp	r1, #40	; 0x28
   94e82:	d102      	bne.n	94e8a <mw_process_message+0x331a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94e84:	06d3      	lsls	r3, r2, #27
   94e86:	f140 81b0 	bpl.w	951ea <mw_process_message+0x367a>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94e8a:	f8da 20cc 	ldr.w	r2, [sl, #204]	; 0xcc
   94e8e:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94e92:	2928      	cmp	r1, #40	; 0x28
   94e94:	d102      	bne.n	94e9c <mw_process_message+0x332c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94e96:	06d0      	lsls	r0, r2, #27
   94e98:	f140 81c4 	bpl.w	95224 <mw_process_message+0x36b4>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94e9c:	f8da 210c 	ldr.w	r2, [sl, #268]	; 0x10c
   94ea0:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94ea4:	2928      	cmp	r1, #40	; 0x28
   94ea6:	d102      	bne.n	94eae <mw_process_message+0x333e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94ea8:	06d1      	lsls	r1, r2, #27
   94eaa:	f140 81ca 	bpl.w	95242 <mw_process_message+0x36d2>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94eae:	f8da 214c 	ldr.w	r2, [sl, #332]	; 0x14c
   94eb2:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94eb6:	2928      	cmp	r1, #40	; 0x28
   94eb8:	d102      	bne.n	94ec0 <mw_process_message+0x3350>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94eba:	06d2      	lsls	r2, r2, #27
   94ebc:	f140 81d0 	bpl.w	95260 <mw_process_message+0x36f0>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94ec0:	f8da 218c 	ldr.w	r2, [sl, #396]	; 0x18c
   94ec4:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94ec8:	2928      	cmp	r1, #40	; 0x28
   94eca:	d102      	bne.n	94ed2 <mw_process_message+0x3362>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94ecc:	06d3      	lsls	r3, r2, #27
   94ece:	f140 81d6 	bpl.w	9527e <mw_process_message+0x370e>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94ed2:	f8da 21cc 	ldr.w	r2, [sl, #460]	; 0x1cc
   94ed6:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94eda:	2928      	cmp	r1, #40	; 0x28
   94edc:	d102      	bne.n	94ee4 <mw_process_message+0x3374>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94ede:	06d0      	lsls	r0, r2, #27
   94ee0:	f140 81dc 	bpl.w	9529c <mw_process_message+0x372c>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94ee4:	f8da 220c 	ldr.w	r2, [sl, #524]	; 0x20c
   94ee8:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94eec:	2928      	cmp	r1, #40	; 0x28
   94eee:	d102      	bne.n	94ef6 <mw_process_message+0x3386>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94ef0:	06d1      	lsls	r1, r2, #27
   94ef2:	f140 81e2 	bpl.w	952ba <mw_process_message+0x374a>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94ef6:	f8da 224c 	ldr.w	r2, [sl, #588]	; 0x24c
   94efa:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94efe:	2928      	cmp	r1, #40	; 0x28
   94f00:	d102      	bne.n	94f08 <mw_process_message+0x3398>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94f02:	06d2      	lsls	r2, r2, #27
   94f04:	f140 81e8 	bpl.w	952d8 <mw_process_message+0x3768>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94f08:	f8da 228c 	ldr.w	r2, [sl, #652]	; 0x28c
   94f0c:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94f10:	2928      	cmp	r1, #40	; 0x28
   94f12:	d102      	bne.n	94f1a <mw_process_message+0x33aa>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94f14:	06d3      	lsls	r3, r2, #27
   94f16:	f140 81ee 	bpl.w	952f6 <mw_process_message+0x3786>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94f1a:	f8da 22cc 	ldr.w	r2, [sl, #716]	; 0x2cc
   94f1e:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94f22:	2928      	cmp	r1, #40	; 0x28
   94f24:	d102      	bne.n	94f2c <mw_process_message+0x33bc>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94f26:	06d0      	lsls	r0, r2, #27
   94f28:	f140 81f4 	bpl.w	95314 <mw_process_message+0x37a4>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94f2c:	f8da 230c 	ldr.w	r2, [sl, #780]	; 0x30c
   94f30:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94f34:	2928      	cmp	r1, #40	; 0x28
   94f36:	d102      	bne.n	94f3e <mw_process_message+0x33ce>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94f38:	06d1      	lsls	r1, r2, #27
   94f3a:	f140 81fa 	bpl.w	95332 <mw_process_message+0x37c2>
		if ((mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   94f3e:	f8da 234c 	ldr.w	r2, [sl, #844]	; 0x34c
   94f42:	f002 0128 	and.w	r1, r2, #40	; 0x28
   94f46:	2928      	cmp	r1, #40	; 0x28
   94f48:	d102      	bne.n	94f50 <mw_process_message+0x33e0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_VISIBLE) == 0U ||
   94f4a:	06d2      	lsls	r2, r2, #27
   94f4c:	f140 815c 	bpl.w	95208 <mw_process_message+0x3698>
	return (mw_all_windows[window_id].window_handle);
   94f50:	eb0a 1484 	add.w	r4, sl, r4, lsl #6
   94f54:	6960      	ldr	r0, [r4, #20]
	if (window_handle == MW_INVALID_HANDLE)
   94f56:	2800      	cmp	r0, #0
   94f58:	d068      	beq.n	9502c <mw_process_message+0x34bc>
		if (mw_all_windows[i].window_handle == window_handle &&
   94f5a:	f8da 2014 	ldr.w	r2, [sl, #20]
   94f5e:	4282      	cmp	r2, r0
   94f60:	f000 8085 	beq.w	9506e <mw_process_message+0x34fe>
   94f64:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   94f68:	4282      	cmp	r2, r0
   94f6a:	d079      	beq.n	95060 <mw_process_message+0x34f0>
   94f6c:	f8da 2094 	ldr.w	r2, [sl, #148]	; 0x94
   94f70:	4290      	cmp	r0, r2
   94f72:	d06e      	beq.n	95052 <mw_process_message+0x34e2>
   94f74:	f8da 20d4 	ldr.w	r2, [sl, #212]	; 0xd4
   94f78:	4282      	cmp	r2, r0
   94f7a:	d063      	beq.n	95044 <mw_process_message+0x34d4>
   94f7c:	f8da 2114 	ldr.w	r2, [sl, #276]	; 0x114
   94f80:	4282      	cmp	r2, r0
   94f82:	d058      	beq.n	95036 <mw_process_message+0x34c6>
   94f84:	f8da 2154 	ldr.w	r2, [sl, #340]	; 0x154
   94f88:	4282      	cmp	r2, r0
   94f8a:	f000 8095 	beq.w	950b8 <mw_process_message+0x3548>
   94f8e:	f8da 2194 	ldr.w	r2, [sl, #404]	; 0x194
   94f92:	4282      	cmp	r2, r0
   94f94:	f000 80a0 	beq.w	950d8 <mw_process_message+0x3568>
   94f98:	f8da 21d4 	ldr.w	r2, [sl, #468]	; 0x1d4
   94f9c:	4282      	cmp	r2, r0
   94f9e:	f000 8093 	beq.w	950c8 <mw_process_message+0x3558>
   94fa2:	f8da 2214 	ldr.w	r2, [sl, #532]	; 0x214
   94fa6:	4282      	cmp	r2, r0
   94fa8:	d07e      	beq.n	950a8 <mw_process_message+0x3538>
   94faa:	f8da 2254 	ldr.w	r2, [sl, #596]	; 0x254
   94fae:	4282      	cmp	r2, r0
   94fb0:	d073      	beq.n	9509a <mw_process_message+0x352a>
   94fb2:	f8da 2294 	ldr.w	r2, [sl, #660]	; 0x294
   94fb6:	4282      	cmp	r2, r0
   94fb8:	d068      	beq.n	9508c <mw_process_message+0x351c>
   94fba:	f8da 22d4 	ldr.w	r2, [sl, #724]	; 0x2d4
   94fbe:	4282      	cmp	r2, r0
   94fc0:	d05d      	beq.n	9507e <mw_process_message+0x350e>
   94fc2:	f8da 2314 	ldr.w	r2, [sl, #788]	; 0x314
   94fc6:	4282      	cmp	r2, r0
   94fc8:	f000 8099 	beq.w	950fe <mw_process_message+0x358e>
   94fcc:	f8da 2354 	ldr.w	r2, [sl, #852]	; 0x354
   94fd0:	4290      	cmp	r0, r2
   94fd2:	f000 8089 	beq.w	950e8 <mw_process_message+0x3578>
   94fd6:	240e      	movs	r4, #14
   94fd8:	2000      	movs	r0, #0
	MW_ASSERT(window_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   94fda:	4b63      	ldr	r3, [pc, #396]	; (95168 <mw_process_message+0x35f8>)
   94fdc:	f240 5252 	movw	r2, #1362	; 0x552
   94fe0:	4962      	ldr	r1, [pc, #392]	; (9516c <mw_process_message+0x35fc>)
   94fe2:	47c8      	blx	r9
				if (find_highest_z_order_at_point(rect_current.x, rect_current.y) > mw_all_windows[window_id].z_order)
   94fe4:	9b02      	ldr	r3, [sp, #8]
	return (mw_all_windows[window_id].z_order);
   94fe6:	eb0a 1484 	add.w	r4, sl, r4, lsl #6
				if (find_highest_z_order_at_point(rect_current.x, rect_current.y) > mw_all_windows[window_id].z_order)
   94fea:	4453      	add	r3, sl
   94fec:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   94ff0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   94ff4:	4293      	cmp	r3, r2
   94ff6:	f4ff af1f 	bcc.w	94e38 <mw_process_message+0x32c8>
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   94ffa:	9b05      	ldr	r3, [sp, #20]
				(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   94ffc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   95000:	1b9b      	subs	r3, r3, r6
				if (rect_waiting_to_be_painted)
   95002:	9803      	ldr	r0, [sp, #12]
				rect_current.width = (vertical_edges[vertical_edge_counter + 1U] - rect_current.x);
   95004:	b29b      	uxth	r3, r3
				(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   95006:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
				previous_rect_width = rect_previous.width;
   9500a:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
				previous_rect_left = rect_previous.x;
   9500e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
				(void)memcpy((&rect_previous), (&rect_current), (sizeof(mw_util_rect_t)));
   95012:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
   95016:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   9501a:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
				if (rect_waiting_to_be_painted)
   9501e:	b138      	cbz	r0, 95030 <mw_process_message+0x34c0>
					rect_previous.width += previous_rect_width;
   95020:	440b      	add	r3, r1
   95022:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
					rect_previous.x = previous_rect_left;
   95026:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   9502a:	e709      	b.n	94e40 <mw_process_message+0x32d0>
	if (window_handle == MW_INVALID_HANDLE)
   9502c:	240e      	movs	r4, #14
   9502e:	e7d4      	b.n	94fda <mw_process_message+0x346a>
				rect_waiting_to_be_painted = true;
   95030:	f8cd b00c 	str.w	fp, [sp, #12]
   95034:	e704      	b.n	94e40 <mw_process_message+0x32d0>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95036:	f8da 210c 	ldr.w	r2, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   9503a:	0691      	lsls	r1, r2, #26
   9503c:	d5a2      	bpl.n	94f84 <mw_process_message+0x3414>
   9503e:	4658      	mov	r0, fp
   95040:	2404      	movs	r4, #4
   95042:	e7ca      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95044:	f8da 20cc 	ldr.w	r2, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   95048:	0693      	lsls	r3, r2, #26
   9504a:	d597      	bpl.n	94f7c <mw_process_message+0x340c>
   9504c:	4658      	mov	r0, fp
   9504e:	2403      	movs	r4, #3
   95050:	e7c3      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95052:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   95056:	0692      	lsls	r2, r2, #26
   95058:	d58c      	bpl.n	94f74 <mw_process_message+0x3404>
   9505a:	4658      	mov	r0, fp
   9505c:	2402      	movs	r4, #2
   9505e:	e7bc      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95060:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   95064:	0691      	lsls	r1, r2, #26
   95066:	d581      	bpl.n	94f6c <mw_process_message+0x33fc>
   95068:	4658      	mov	r0, fp
   9506a:	2401      	movs	r4, #1
   9506c:	e7b5      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9506e:	f8da 200c 	ldr.w	r2, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   95072:	0693      	lsls	r3, r2, #26
   95074:	f57f af76 	bpl.w	94f64 <mw_process_message+0x33f4>
   95078:	4658      	mov	r0, fp
   9507a:	2400      	movs	r4, #0
   9507c:	e7ad      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9507e:	f8da 22cc 	ldr.w	r2, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   95082:	0692      	lsls	r2, r2, #26
   95084:	d59d      	bpl.n	94fc2 <mw_process_message+0x3452>
   95086:	4658      	mov	r0, fp
   95088:	240b      	movs	r4, #11
   9508a:	e7a6      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9508c:	f8da 228c 	ldr.w	r2, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   95090:	0691      	lsls	r1, r2, #26
   95092:	d592      	bpl.n	94fba <mw_process_message+0x344a>
   95094:	4658      	mov	r0, fp
   95096:	240a      	movs	r4, #10
   95098:	e79f      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9509a:	f8da 224c 	ldr.w	r2, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   9509e:	0693      	lsls	r3, r2, #26
   950a0:	d587      	bpl.n	94fb2 <mw_process_message+0x3442>
   950a2:	4658      	mov	r0, fp
   950a4:	2409      	movs	r4, #9
   950a6:	e798      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   950a8:	f8da 220c 	ldr.w	r2, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   950ac:	0692      	lsls	r2, r2, #26
   950ae:	f57f af7c 	bpl.w	94faa <mw_process_message+0x343a>
   950b2:	4658      	mov	r0, fp
   950b4:	2408      	movs	r4, #8
   950b6:	e790      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   950b8:	f8da 214c 	ldr.w	r2, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   950bc:	0692      	lsls	r2, r2, #26
   950be:	f57f af66 	bpl.w	94f8e <mw_process_message+0x341e>
   950c2:	4658      	mov	r0, fp
   950c4:	2405      	movs	r4, #5
   950c6:	e788      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   950c8:	f8da 21cc 	ldr.w	r2, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   950cc:	0691      	lsls	r1, r2, #26
   950ce:	f57f af68 	bpl.w	94fa2 <mw_process_message+0x3432>
   950d2:	4658      	mov	r0, fp
   950d4:	2407      	movs	r4, #7
   950d6:	e780      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   950d8:	f8da 218c 	ldr.w	r2, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   950dc:	0693      	lsls	r3, r2, #26
   950de:	f57f af5b 	bpl.w	94f98 <mw_process_message+0x3428>
   950e2:	4658      	mov	r0, fp
   950e4:	2406      	movs	r4, #6
   950e6:	e778      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   950e8:	f8da 334c 	ldr.w	r3, [sl, #844]	; 0x34c
   950ec:	f003 0320 	and.w	r3, r3, #32
		if (mw_all_windows[i].window_handle == window_handle &&
   950f0:	2b00      	cmp	r3, #0
   950f2:	bf13      	iteet	ne
   950f4:	4658      	movne	r0, fp
   950f6:	2000      	moveq	r0, #0
   950f8:	240e      	moveq	r4, #14
   950fa:	240d      	movne	r4, #13
   950fc:	e76d      	b.n	94fda <mw_process_message+0x346a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   950fe:	f8da 230c 	ldr.w	r2, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   95102:	0693      	lsls	r3, r2, #26
   95104:	f57f af62 	bpl.w	94fcc <mw_process_message+0x345c>
   95108:	4658      	mov	r0, fp
   9510a:	240c      	movs	r4, #12
   9510c:	e765      	b.n	94fda <mw_process_message+0x346a>
						do_paint_window_client2(window_handle, &rect_previous);
   9510e:	4b18      	ldr	r3, [pc, #96]	; (95170 <mw_process_message+0x3600>)
   95110:	a90c      	add	r1, sp, #48	; 0x30
   95112:	9806      	ldr	r0, [sp, #24]
   95114:	4798      	blx	r3
						rect_waiting_to_be_painted = false;
   95116:	2300      	movs	r3, #0
   95118:	9303      	str	r3, [sp, #12]
   9511a:	e691      	b.n	94e40 <mw_process_message+0x32d0>
			if (rect_waiting_to_be_painted)
   9511c:	9b03      	ldr	r3, [sp, #12]
   9511e:	b11b      	cbz	r3, 95128 <mw_process_message+0x35b8>
				do_paint_window_client2(window_handle, &rect_previous);
   95120:	a90c      	add	r1, sp, #48	; 0x30
   95122:	9806      	ldr	r0, [sp, #24]
   95124:	4b12      	ldr	r3, [pc, #72]	; (95170 <mw_process_message+0x3600>)
   95126:	4798      	blx	r3
   95128:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		for (horizontal_edge_counter = 0U; horizontal_edge_counter < horiz_edges_count - 1U; horizontal_edge_counter++)
   9512c:	9b04      	ldr	r3, [sp, #16]
   9512e:	1e51      	subs	r1, r2, #1
   95130:	3301      	adds	r3, #1
   95132:	b29b      	uxth	r3, r3
   95134:	428b      	cmp	r3, r1
   95136:	4618      	mov	r0, r3
   95138:	9304      	str	r3, [sp, #16]
   9513a:	f4ff ae5f 	bcc.w	94dfc <mw_process_message+0x328c>
   9513e:	f7fd bd09 	b.w	92b54 <mw_process_message+0xfe4>
		if (mw_all_windows[i].window_handle == window_handle &&
   95142:	f01e 0f20 	tst.w	lr, #32
   95146:	f43f ab48 	beq.w	947da <mw_process_message+0x2c6a>
   9514a:	f7ff bb6d 	b.w	94828 <mw_process_message+0x2cb8>
   9514e:	0682      	lsls	r2, r0, #26
   95150:	f53f ab6a 	bmi.w	94828 <mw_process_message+0x2cb8>
   95154:	f7ff bb3c 	b.w	947d0 <mw_process_message+0x2c60>
   95158:	06a1      	lsls	r1, r4, #26
   9515a:	f53f ab65 	bmi.w	94828 <mw_process_message+0x2cb8>
   9515e:	f7ff bb32 	b.w	947c6 <mw_process_message+0x2c56>
   95162:	bf00      	nop
   95164:	20071f78 	.word	0x20071f78
   95168:	000ab764 	.word	0x000ab764
   9516c:	000ab2e8 	.word	0x000ab2e8
   95170:	00088241 	.word	0x00088241
   95174:	069f      	lsls	r7, r3, #26
   95176:	f53f ab57 	bmi.w	94828 <mw_process_message+0x2cb8>
   9517a:	f7ff bb1f 	b.w	947bc <mw_process_message+0x2c4c>
   9517e:	0692      	lsls	r2, r2, #26
   95180:	f53f ab52 	bmi.w	94828 <mw_process_message+0x2cb8>
   95184:	f7ff bb15 	b.w	947b2 <mw_process_message+0x2c42>
   95188:	0689      	lsls	r1, r1, #26
   9518a:	f53f ab4d 	bmi.w	94828 <mw_process_message+0x2cb8>
   9518e:	f7ff bb0b 	b.w	947a8 <mw_process_message+0x2c38>
   95192:	f8da 700c 	ldr.w	r7, [sl, #12]
   95196:	06bf      	lsls	r7, r7, #26
   95198:	f53f ab46 	bmi.w	94828 <mw_process_message+0x2cb8>
   9519c:	f7ff baff 	b.w	9479e <mw_process_message+0x2c2e>
			mw_paint_window_client(mw_all_windows[window_id].window_handle);
   951a0:	9b04      	ldr	r3, [sp, #16]
   951a2:	4453      	add	r3, sl
   951a4:	6958      	ldr	r0, [r3, #20]
   951a6:	4bb1      	ldr	r3, [pc, #708]	; (9546c <mw_process_message+0x38fc>)
   951a8:	4798      	blx	r3
   951aa:	f7fd b9c7 	b.w	9253c <mw_process_message+0x9cc>
		if (mw_all_windows[i].window_handle == window_handle &&
   951ae:	f01c 0f20 	tst.w	ip, #32
   951b2:	f43f ab17 	beq.w	947e4 <mw_process_message+0x2c74>
   951b6:	f7ff bb37 	b.w	94828 <mw_process_message+0x2cb8>
   951ba:	2300      	movs	r3, #0
   951bc:	f7fe ba83 	b.w	936c6 <mw_process_message+0x1b56>
   951c0:	9b05      	ldr	r3, [sp, #20]
   951c2:	0698      	lsls	r0, r3, #26
   951c4:	f53f ab30 	bmi.w	94828 <mw_process_message+0x2cb8>
   951c8:	f7ff bb25 	b.w	94816 <mw_process_message+0x2ca6>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   951cc:	463a      	mov	r2, r7
   951ce:	4631      	mov	r1, r6
   951d0:	48a7      	ldr	r0, [pc, #668]	; (95470 <mw_process_message+0x3900>)
   951d2:	4ba8      	ldr	r3, [pc, #672]	; (95474 <mw_process_message+0x3904>)
   951d4:	4798      	blx	r3
   951d6:	2800      	cmp	r0, #0
   951d8:	f43f ae4b 	beq.w	94e72 <mw_process_message+0x3302>
			if (mw_all_windows[i].z_order > highest_z_order)
   951dc:	f89a 806c 	ldrb.w	r8, [sl, #108]	; 0x6c
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   951e0:	f118 0400 	adds.w	r4, r8, #0
   951e4:	bf18      	it	ne
   951e6:	2401      	movne	r4, #1
   951e8:	e646      	b.n	94e78 <mw_process_message+0x3308>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   951ea:	463a      	mov	r2, r7
   951ec:	4631      	mov	r1, r6
   951ee:	48a2      	ldr	r0, [pc, #648]	; (95478 <mw_process_message+0x3908>)
   951f0:	4ba0      	ldr	r3, [pc, #640]	; (95474 <mw_process_message+0x3904>)
   951f2:	4798      	blx	r3
   951f4:	2800      	cmp	r0, #0
   951f6:	f43f ae48 	beq.w	94e8a <mw_process_message+0x331a>
			if (mw_all_windows[i].z_order > highest_z_order)
   951fa:	f89a 20ac 	ldrb.w	r2, [sl, #172]	; 0xac
   951fe:	4590      	cmp	r8, r2
   95200:	bf3c      	itt	cc
   95202:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   95204:	2402      	movcc	r4, #2
   95206:	e640      	b.n	94e8a <mw_process_message+0x331a>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   95208:	463a      	mov	r2, r7
   9520a:	4631      	mov	r1, r6
   9520c:	489b      	ldr	r0, [pc, #620]	; (9547c <mw_process_message+0x390c>)
   9520e:	4b99      	ldr	r3, [pc, #612]	; (95474 <mw_process_message+0x3904>)
   95210:	4798      	blx	r3
   95212:	2800      	cmp	r0, #0
   95214:	f43f ae9c 	beq.w	94f50 <mw_process_message+0x33e0>
			if (mw_all_windows[i].z_order > highest_z_order)
   95218:	f89a 236c 	ldrb.w	r2, [sl, #876]	; 0x36c
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   9521c:	4542      	cmp	r2, r8
   9521e:	bf88      	it	hi
   95220:	240d      	movhi	r4, #13
   95222:	e695      	b.n	94f50 <mw_process_message+0x33e0>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   95224:	463a      	mov	r2, r7
   95226:	4631      	mov	r1, r6
   95228:	4895      	ldr	r0, [pc, #596]	; (95480 <mw_process_message+0x3910>)
   9522a:	4b92      	ldr	r3, [pc, #584]	; (95474 <mw_process_message+0x3904>)
   9522c:	4798      	blx	r3
   9522e:	2800      	cmp	r0, #0
   95230:	f43f ae34 	beq.w	94e9c <mw_process_message+0x332c>
			if (mw_all_windows[i].z_order > highest_z_order)
   95234:	f89a 20ec 	ldrb.w	r2, [sl, #236]	; 0xec
   95238:	4590      	cmp	r8, r2
   9523a:	bf3c      	itt	cc
   9523c:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   9523e:	2403      	movcc	r4, #3
   95240:	e62c      	b.n	94e9c <mw_process_message+0x332c>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   95242:	463a      	mov	r2, r7
   95244:	4631      	mov	r1, r6
   95246:	488f      	ldr	r0, [pc, #572]	; (95484 <mw_process_message+0x3914>)
   95248:	4b8a      	ldr	r3, [pc, #552]	; (95474 <mw_process_message+0x3904>)
   9524a:	4798      	blx	r3
   9524c:	2800      	cmp	r0, #0
   9524e:	f43f ae2e 	beq.w	94eae <mw_process_message+0x333e>
			if (mw_all_windows[i].z_order > highest_z_order)
   95252:	f89a 212c 	ldrb.w	r2, [sl, #300]	; 0x12c
   95256:	4590      	cmp	r8, r2
   95258:	bf3c      	itt	cc
   9525a:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   9525c:	2404      	movcc	r4, #4
   9525e:	e626      	b.n	94eae <mw_process_message+0x333e>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   95260:	463a      	mov	r2, r7
   95262:	4631      	mov	r1, r6
   95264:	4888      	ldr	r0, [pc, #544]	; (95488 <mw_process_message+0x3918>)
   95266:	4b83      	ldr	r3, [pc, #524]	; (95474 <mw_process_message+0x3904>)
   95268:	4798      	blx	r3
   9526a:	2800      	cmp	r0, #0
   9526c:	f43f ae28 	beq.w	94ec0 <mw_process_message+0x3350>
			if (mw_all_windows[i].z_order > highest_z_order)
   95270:	f89a 216c 	ldrb.w	r2, [sl, #364]	; 0x16c
   95274:	4590      	cmp	r8, r2
   95276:	bf3c      	itt	cc
   95278:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   9527a:	2405      	movcc	r4, #5
   9527c:	e620      	b.n	94ec0 <mw_process_message+0x3350>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   9527e:	463a      	mov	r2, r7
   95280:	4631      	mov	r1, r6
   95282:	4882      	ldr	r0, [pc, #520]	; (9548c <mw_process_message+0x391c>)
   95284:	4b7b      	ldr	r3, [pc, #492]	; (95474 <mw_process_message+0x3904>)
   95286:	4798      	blx	r3
   95288:	2800      	cmp	r0, #0
   9528a:	f43f ae22 	beq.w	94ed2 <mw_process_message+0x3362>
			if (mw_all_windows[i].z_order > highest_z_order)
   9528e:	f89a 21ac 	ldrb.w	r2, [sl, #428]	; 0x1ac
   95292:	4590      	cmp	r8, r2
   95294:	bf3c      	itt	cc
   95296:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   95298:	2406      	movcc	r4, #6
   9529a:	e61a      	b.n	94ed2 <mw_process_message+0x3362>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   9529c:	463a      	mov	r2, r7
   9529e:	4631      	mov	r1, r6
   952a0:	487b      	ldr	r0, [pc, #492]	; (95490 <mw_process_message+0x3920>)
   952a2:	4b74      	ldr	r3, [pc, #464]	; (95474 <mw_process_message+0x3904>)
   952a4:	4798      	blx	r3
   952a6:	2800      	cmp	r0, #0
   952a8:	f43f ae1c 	beq.w	94ee4 <mw_process_message+0x3374>
			if (mw_all_windows[i].z_order > highest_z_order)
   952ac:	f89a 21ec 	ldrb.w	r2, [sl, #492]	; 0x1ec
   952b0:	4590      	cmp	r8, r2
   952b2:	bf3c      	itt	cc
   952b4:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   952b6:	2407      	movcc	r4, #7
   952b8:	e614      	b.n	94ee4 <mw_process_message+0x3374>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   952ba:	463a      	mov	r2, r7
   952bc:	4631      	mov	r1, r6
   952be:	4875      	ldr	r0, [pc, #468]	; (95494 <mw_process_message+0x3924>)
   952c0:	4b6c      	ldr	r3, [pc, #432]	; (95474 <mw_process_message+0x3904>)
   952c2:	4798      	blx	r3
   952c4:	2800      	cmp	r0, #0
   952c6:	f43f ae16 	beq.w	94ef6 <mw_process_message+0x3386>
			if (mw_all_windows[i].z_order > highest_z_order)
   952ca:	f89a 222c 	ldrb.w	r2, [sl, #556]	; 0x22c
   952ce:	4590      	cmp	r8, r2
   952d0:	bf3c      	itt	cc
   952d2:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   952d4:	2408      	movcc	r4, #8
   952d6:	e60e      	b.n	94ef6 <mw_process_message+0x3386>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   952d8:	463a      	mov	r2, r7
   952da:	4631      	mov	r1, r6
   952dc:	486e      	ldr	r0, [pc, #440]	; (95498 <mw_process_message+0x3928>)
   952de:	4b65      	ldr	r3, [pc, #404]	; (95474 <mw_process_message+0x3904>)
   952e0:	4798      	blx	r3
   952e2:	2800      	cmp	r0, #0
   952e4:	f43f ae10 	beq.w	94f08 <mw_process_message+0x3398>
			if (mw_all_windows[i].z_order > highest_z_order)
   952e8:	f89a 226c 	ldrb.w	r2, [sl, #620]	; 0x26c
   952ec:	4590      	cmp	r8, r2
   952ee:	bf3c      	itt	cc
   952f0:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   952f2:	2409      	movcc	r4, #9
   952f4:	e608      	b.n	94f08 <mw_process_message+0x3398>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   952f6:	463a      	mov	r2, r7
   952f8:	4631      	mov	r1, r6
   952fa:	4868      	ldr	r0, [pc, #416]	; (9549c <mw_process_message+0x392c>)
   952fc:	4b5d      	ldr	r3, [pc, #372]	; (95474 <mw_process_message+0x3904>)
   952fe:	4798      	blx	r3
   95300:	2800      	cmp	r0, #0
   95302:	f43f ae0a 	beq.w	94f1a <mw_process_message+0x33aa>
			if (mw_all_windows[i].z_order > highest_z_order)
   95306:	f89a 22ac 	ldrb.w	r2, [sl, #684]	; 0x2ac
   9530a:	4590      	cmp	r8, r2
   9530c:	bf3c      	itt	cc
   9530e:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   95310:	240a      	movcc	r4, #10
   95312:	e602      	b.n	94f1a <mw_process_message+0x33aa>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   95314:	463a      	mov	r2, r7
   95316:	4631      	mov	r1, r6
   95318:	4861      	ldr	r0, [pc, #388]	; (954a0 <mw_process_message+0x3930>)
   9531a:	4b56      	ldr	r3, [pc, #344]	; (95474 <mw_process_message+0x3904>)
   9531c:	4798      	blx	r3
   9531e:	2800      	cmp	r0, #0
   95320:	f43f ae04 	beq.w	94f2c <mw_process_message+0x33bc>
			if (mw_all_windows[i].z_order > highest_z_order)
   95324:	f89a 22ec 	ldrb.w	r2, [sl, #748]	; 0x2ec
   95328:	4590      	cmp	r8, r2
   9532a:	bf3c      	itt	cc
   9532c:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   9532e:	240b      	movcc	r4, #11
   95330:	e5fc      	b.n	94f2c <mw_process_message+0x33bc>
		if (mw_util_is_point_in_rect(&mw_all_windows[i].window_rect, touch_x, touch_y))
   95332:	463a      	mov	r2, r7
   95334:	4631      	mov	r1, r6
   95336:	485b      	ldr	r0, [pc, #364]	; (954a4 <mw_process_message+0x3934>)
   95338:	4b4e      	ldr	r3, [pc, #312]	; (95474 <mw_process_message+0x3904>)
   9533a:	4798      	blx	r3
   9533c:	2800      	cmp	r0, #0
   9533e:	f43f adfe 	beq.w	94f3e <mw_process_message+0x33ce>
			if (mw_all_windows[i].z_order > highest_z_order)
   95342:	f89a 232c 	ldrb.w	r2, [sl, #812]	; 0x32c
   95346:	4590      	cmp	r8, r2
   95348:	bf3c      	itt	cc
   9534a:	4690      	movcc	r8, r2
	for (i = MW_FIRST_USER_WINDOW_ID; i < MW_MAX_WINDOW_COUNT; i++)
   9534c:	240c      	movcc	r4, #12
   9534e:	e5f6      	b.n	94f3e <mw_process_message+0x33ce>
		if (mw_all_windows[i].window_handle == window_handle &&
   95350:	9b06      	ldr	r3, [sp, #24]
   95352:	069c      	lsls	r4, r3, #26
   95354:	f53f aa68 	bmi.w	94828 <mw_process_message+0x2cb8>
   95358:	f7ff ba58 	b.w	9480c <mw_process_message+0x2c9c>
   9535c:	9b07      	ldr	r3, [sp, #28]
   9535e:	069d      	lsls	r5, r3, #26
   95360:	f53f aa62 	bmi.w	94828 <mw_process_message+0x2cb8>
   95364:	f7ff ba4d 	b.w	94802 <mw_process_message+0x2c92>
   95368:	9b08      	ldr	r3, [sp, #32]
   9536a:	069f      	lsls	r7, r3, #26
   9536c:	f53f aa5c 	bmi.w	94828 <mw_process_message+0x2cb8>
   95370:	f7ff ba42 	b.w	947f8 <mw_process_message+0x2c88>
   95374:	06ab      	lsls	r3, r5, #26
   95376:	f53f aa57 	bmi.w	94828 <mw_process_message+0x2cb8>
   9537a:	f7ff ba38 	b.w	947ee <mw_process_message+0x2c7e>
   9537e:	2500      	movs	r5, #0
   95380:	e455      	b.n	94c2e <mw_process_message+0x30be>
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR)
   95382:	9c04      	ldr	r4, [sp, #16]
   95384:	eb0a 0204 	add.w	r2, sl, r4
   95388:	68d3      	ldr	r3, [r2, #12]
		if (touch_y < mw_all_windows[window_id].client_rect.y &&
   9538a:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_MENU_BAR) == MW_WINDOW_FLAG_HAS_MENU_BAR)
   9538e:	059f      	lsls	r7, r3, #22
   95390:	f140 813d 	bpl.w	9560e <mw_process_message+0x3a9e>
		if (touch_y < mw_all_windows[window_id].client_rect.y &&
   95394:	9d02      	ldr	r5, [sp, #8]
   95396:	4295      	cmp	r5, r2
   95398:	4629      	mov	r1, r5
   9539a:	f280 8143 	bge.w	95624 <mw_process_message+0x3ab4>
				touch_y > (mw_all_windows[window_id].client_rect.y - MW_MENU_BAR_HEIGHT) &&
   9539e:	3a0d      	subs	r2, #13
		if (touch_y < mw_all_windows[window_id].client_rect.y &&
   953a0:	42aa      	cmp	r2, r5
   953a2:	f300 80f1 	bgt.w	95588 <mw_process_message+0x3a18>
				touch_y > (mw_all_windows[window_id].client_rect.y - MW_MENU_BAR_HEIGHT) &&
   953a6:	055d      	lsls	r5, r3, #21
   953a8:	f140 80ee 	bpl.w	95588 <mw_process_message+0x3a18>
   953ac:	9003      	str	r0, [sp, #12]
   953ae:	9002      	str	r0, [sp, #8]
								next_menu_item_text_left_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) +
   953b0:	4f3d      	ldr	r7, [pc, #244]	; (954a8 <mw_process_message+0x3938>)
   953b2:	e00f      	b.n	953d4 <mw_process_message+0x3864>
					next_menu_item_text_left_pos += (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) + (int16_t)mw_gl_get_string_width_pixels("  ");
   953b4:	f85a 3004 	ldr.w	r3, [sl, r4]
   953b8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   953bc:	47b8      	blx	r7
   953be:	4605      	mov	r5, r0
   953c0:	483a      	ldr	r0, [pc, #232]	; (954ac <mw_process_message+0x393c>)
   953c2:	47b8      	blx	r7
   953c4:	9a02      	ldr	r2, [sp, #8]
   953c6:	182b      	adds	r3, r5, r0
   953c8:	4413      	add	r3, r2
   953ca:	9a03      	ldr	r2, [sp, #12]
   953cc:	b21b      	sxth	r3, r3
   953ce:	3201      	adds	r2, #1
   953d0:	9203      	str	r2, [sp, #12]
   953d2:	9302      	str	r3, [sp, #8]
				for (i = 0U; i < mw_all_windows[window_id].menu_bar_items_count; i++)
   953d4:	eb0a 0304 	add.w	r3, sl, r4
   953d8:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
   953dc:	f89d 500c 	ldrb.w	r5, [sp, #12]
   953e0:	42aa      	cmp	r2, r5
   953e2:	f67d af55 	bls.w	93290 <mw_process_message+0x1720>
					if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   953e6:	68d8      	ldr	r0, [r3, #12]
					    mw_gl_set_font(MW_GL_FONT_9);
   953e8:	4b31      	ldr	r3, [pc, #196]	; (954b0 <mw_process_message+0x3940>)
					if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   953ea:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
					    mw_gl_set_font(MW_GL_TITLE_FONT);
   953ee:	bf18      	it	ne
   953f0:	2005      	movne	r0, #5
					    mw_gl_set_font(MW_GL_FONT_9);
   953f2:	4798      	blx	r3
					if ((touch_x - mw_all_windows[window_id].client_rect.x) <
   953f4:	eb0a 0104 	add.w	r1, sl, r4
								next_menu_item_text_left_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) +
   953f8:	f85a 3004 	ldr.w	r3, [sl, r4]
					if ((touch_x - mw_all_windows[window_id].client_rect.x) <
   953fc:	f9b1 2020 	ldrsh.w	r2, [r1, #32]
								next_menu_item_text_left_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) +
   95400:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
					if ((touch_x - mw_all_windows[window_id].client_rect.x) <
   95404:	eba8 0202 	sub.w	r2, r8, r2
   95408:	9205      	str	r2, [sp, #20]
   9540a:	9106      	str	r1, [sp, #24]
								next_menu_item_text_left_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) +
   9540c:	47b8      	blx	r7
   9540e:	9b02      	ldr	r3, [sp, #8]
   95410:	18c3      	adds	r3, r0, r3
								(int16_t)mw_gl_get_string_width_pixels("  ") &&
   95412:	4826      	ldr	r0, [pc, #152]	; (954ac <mw_process_message+0x393c>)
								next_menu_item_text_left_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) +
   95414:	9304      	str	r3, [sp, #16]
								(int16_t)mw_gl_get_string_width_pixels("  ") &&
   95416:	47b8      	blx	r7
								next_menu_item_text_left_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) +
   95418:	9b04      	ldr	r3, [sp, #16]
					if ((touch_x - mw_all_windows[window_id].client_rect.x) <
   9541a:	9a05      	ldr	r2, [sp, #20]
								next_menu_item_text_left_pos + (int16_t)mw_gl_get_string_width_pixels(mw_all_windows[window_id].menu_bar_items[i]) +
   9541c:	4403      	add	r3, r0
					if ((touch_x - mw_all_windows[window_id].client_rect.x) <
   9541e:	429a      	cmp	r2, r3
   95420:	dac8      	bge.n	953b4 <mw_process_message+0x3844>
								(touch_x - mw_all_windows[window_id].client_rect.x) >= next_menu_item_text_left_pos)
   95422:	9906      	ldr	r1, [sp, #24]
								(int16_t)mw_gl_get_string_width_pixels("  ") &&
   95424:	9a02      	ldr	r2, [sp, #8]
								(touch_x - mw_all_windows[window_id].client_rect.x) >= next_menu_item_text_left_pos)
   95426:	f9b1 3020 	ldrsh.w	r3, [r1, #32]
   9542a:	eba8 0303 	sub.w	r3, r8, r3
								(int16_t)mw_gl_get_string_width_pixels("  ") &&
   9542e:	429a      	cmp	r2, r3
   95430:	dcc0      	bgt.n	953b4 <mw_process_message+0x3844>
   95432:	460c      	mov	r4, r1
						if (mw_util_get_bit(mw_all_windows[window_id].menu_bar_item_enables, i))
   95434:	4b1f      	ldr	r3, [pc, #124]	; (954b4 <mw_process_message+0x3944>)
   95436:	4629      	mov	r1, r5
   95438:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   9543a:	4798      	blx	r3
   9543c:	2800      	cmp	r0, #0
   9543e:	f43d af27 	beq.w	93290 <mw_process_message+0x1720>
							mw_all_windows[window_id].window_flags |= MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED;
   95442:	68e3      	ldr	r3, [r4, #12]
							mw_paint_window_frame(mw_all_windows[window_id].window_handle,
   95444:	2104      	movs	r1, #4
							mw_all_windows[window_id].window_flags |= MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED;
   95446:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
							mw_paint_window_frame(mw_all_windows[window_id].window_handle,
   9544a:	6960      	ldr	r0, [r4, #20]
   9544c:	4a1a      	ldr	r2, [pc, #104]	; (954b8 <mw_process_message+0x3948>)
							mw_all_windows[window_id].window_flags |= MW_WINDOW_FLAG_MENU_BAR_ITEM_IS_SELECTED;
   9544e:	60e3      	str	r3, [r4, #12]
							mw_all_windows[window_id].menu_bar_selected_item = i;
   95450:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
							mw_paint_window_frame(mw_all_windows[window_id].window_handle,
   95454:	4790      	blx	r2
	system_timer.system_timer_event = event;
   95456:	2100      	movs	r1, #0
							set_system_timer(mw_all_windows[window_id].window_handle,
   95458:	f8db 2000 	ldr.w	r2, [fp]
	system_timer.data = timer_data;
   9545c:	4b17      	ldr	r3, [pc, #92]	; (954bc <mw_process_message+0x394c>)
   9545e:	6960      	ldr	r0, [r4, #20]
							set_system_timer(mw_all_windows[window_id].window_handle,
   95460:	3204      	adds	r2, #4
	system_timer.data = timer_data;
   95462:	6058      	str	r0, [r3, #4]
	system_timer.system_timer_event = event;
   95464:	7219      	strb	r1, [r3, #8]
	system_timer.next_fire_time = fire_time;
   95466:	601a      	str	r2, [r3, #0]
   95468:	f7fd bf12 	b.w	93290 <mw_process_message+0x1720>
   9546c:	00090409 	.word	0x00090409
   95470:	20071c30 	.word	0x20071c30
   95474:	00096e7d 	.word	0x00096e7d
   95478:	20071c70 	.word	0x20071c70
   9547c:	20071f30 	.word	0x20071f30
   95480:	20071cb0 	.word	0x20071cb0
   95484:	20071cf0 	.word	0x20071cf0
   95488:	20071d30 	.word	0x20071d30
   9548c:	20071d70 	.word	0x20071d70
   95490:	20071db0 	.word	0x20071db0
   95494:	20071df0 	.word	0x20071df0
   95498:	20071e30 	.word	0x20071e30
   9549c:	20071e70 	.word	0x20071e70
   954a0:	20071eb0 	.word	0x20071eb0
   954a4:	20071ef0 	.word	0x20071ef0
   954a8:	00086165 	.word	0x00086165
   954ac:	000ab75c 	.word	0x000ab75c
   954b0:	00084715 	.word	0x00084715
   954b4:	00097029 	.word	0x00097029
   954b8:	00090281 	.word	0x00090281
   954bc:	20071f64 	.word	0x20071f64
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   954c0:	f8da 234c 	ldr.w	r2, [sl, #844]	; 0x34c
		if (mw_all_windows[i].window_handle == window_handle &&
   954c4:	0694      	lsls	r4, r2, #26
   954c6:	f57d a823 	bpl.w	92510 <mw_process_message+0x9a0>
	new_message.message_data = message_data;
   954ca:	201f      	movs	r0, #31
	new_message.sender_handle = sender_handle;
   954cc:	2200      	movs	r2, #0
	new_message.message_id = message_id;
   954ce:	244b      	movs	r4, #75	; 0x4b
	new_message.message_recipient_type = recipient_type;
   954d0:	2102      	movs	r1, #2
	new_message.recipient_handle = recipient_handle;
   954d2:	9311      	str	r3, [sp, #68]	; 0x44
	new_message.message_data = message_data;
   954d4:	9013      	str	r0, [sp, #76]	; 0x4c
		(void)mw_message_queue_insert(&new_message);
   954d6:	4bb3      	ldr	r3, [pc, #716]	; (957a4 <mw_process_message+0x3c34>)
   954d8:	4630      	mov	r0, r6
	new_message.message_id = message_id;
   954da:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
	new_message.message_recipient_type = recipient_type;
   954de:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
	new_message.sender_handle = sender_handle;
   954e2:	9210      	str	r2, [sp, #64]	; 0x40
	new_message.message_pointer = message_pointer;
   954e4:	9214      	str	r2, [sp, #80]	; 0x50
		(void)mw_message_queue_insert(&new_message);
   954e6:	4798      	blx	r3
   954e8:	f7fd b818 	b.w	9251c <mw_process_message+0x9ac>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   954ec:	f8da 230c 	ldr.w	r2, [sl, #780]	; 0x30c
		if (mw_all_windows[i].window_handle == window_handle &&
   954f0:	0697      	lsls	r7, r2, #26
   954f2:	d4ea      	bmi.n	954ca <mw_process_message+0x395a>
   954f4:	f7fd b807 	b.w	92506 <mw_process_message+0x996>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   954f8:	f8da 22cc 	ldr.w	r2, [sl, #716]	; 0x2cc
		if (mw_all_windows[i].window_handle == window_handle &&
   954fc:	0692      	lsls	r2, r2, #26
   954fe:	d4e4      	bmi.n	954ca <mw_process_message+0x395a>
   95500:	f7fc bffc 	b.w	924fc <mw_process_message+0x98c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95504:	f8da 228c 	ldr.w	r2, [sl, #652]	; 0x28c
		if (mw_all_windows[i].window_handle == window_handle &&
   95508:	0691      	lsls	r1, r2, #26
   9550a:	d4de      	bmi.n	954ca <mw_process_message+0x395a>
   9550c:	f7fc bff1 	b.w	924f2 <mw_process_message+0x982>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95510:	f8da 224c 	ldr.w	r2, [sl, #588]	; 0x24c
		if (mw_all_windows[i].window_handle == window_handle &&
   95514:	0690      	lsls	r0, r2, #26
   95516:	d4d8      	bmi.n	954ca <mw_process_message+0x395a>
   95518:	f7fc bfe6 	b.w	924e8 <mw_process_message+0x978>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9551c:	f8da 220c 	ldr.w	r2, [sl, #524]	; 0x20c
		if (mw_all_windows[i].window_handle == window_handle &&
   95520:	0694      	lsls	r4, r2, #26
   95522:	d4d2      	bmi.n	954ca <mw_process_message+0x395a>
   95524:	f7fc bfdb 	b.w	924de <mw_process_message+0x96e>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95528:	f8da 21cc 	ldr.w	r2, [sl, #460]	; 0x1cc
		if (mw_all_windows[i].window_handle == window_handle &&
   9552c:	0697      	lsls	r7, r2, #26
   9552e:	d4cc      	bmi.n	954ca <mw_process_message+0x395a>
   95530:	f7fc bfd0 	b.w	924d4 <mw_process_message+0x964>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95534:	f8da 218c 	ldr.w	r2, [sl, #396]	; 0x18c
		if (mw_all_windows[i].window_handle == window_handle &&
   95538:	0692      	lsls	r2, r2, #26
   9553a:	d4c6      	bmi.n	954ca <mw_process_message+0x395a>
   9553c:	f7fc bfc5 	b.w	924ca <mw_process_message+0x95a>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95540:	f8da 214c 	ldr.w	r2, [sl, #332]	; 0x14c
		if (mw_all_windows[i].window_handle == window_handle &&
   95544:	0691      	lsls	r1, r2, #26
   95546:	d4c0      	bmi.n	954ca <mw_process_message+0x395a>
   95548:	f7fc bfba 	b.w	924c0 <mw_process_message+0x950>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9554c:	f8da 210c 	ldr.w	r2, [sl, #268]	; 0x10c
		if (mw_all_windows[i].window_handle == window_handle &&
   95550:	0690      	lsls	r0, r2, #26
   95552:	d4ba      	bmi.n	954ca <mw_process_message+0x395a>
   95554:	f7fc bfaf 	b.w	924b6 <mw_process_message+0x946>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95558:	f8da 20cc 	ldr.w	r2, [sl, #204]	; 0xcc
		if (mw_all_windows[i].window_handle == window_handle &&
   9555c:	0694      	lsls	r4, r2, #26
   9555e:	d4b4      	bmi.n	954ca <mw_process_message+0x395a>
   95560:	f7fc bfa4 	b.w	924ac <mw_process_message+0x93c>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95564:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
		if (mw_all_windows[i].window_handle == window_handle &&
   95568:	0697      	lsls	r7, r2, #26
   9556a:	d4ae      	bmi.n	954ca <mw_process_message+0x395a>
   9556c:	f7fc bf99 	b.w	924a2 <mw_process_message+0x932>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   95570:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
		if (mw_all_windows[i].window_handle == window_handle &&
   95574:	0692      	lsls	r2, r2, #26
   95576:	d4a8      	bmi.n	954ca <mw_process_message+0x395a>
   95578:	f7fc bf8e 	b.w	92498 <mw_process_message+0x928>
				(mw_all_windows[i].window_flags & MW_WINDOW_FLAG_IS_USED) == MW_WINDOW_FLAG_IS_USED)
   9557c:	f8da 200c 	ldr.w	r2, [sl, #12]
		if (mw_all_windows[i].window_handle == window_handle &&
   95580:	0691      	lsls	r1, r2, #26
   95582:	d4a2      	bmi.n	954ca <mw_process_message+0x395a>
   95584:	f7fc bf83 	b.w	9248e <mw_process_message+0x91e>
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   95588:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
		icon_size = MW_TITLE_BAR_ICON_SIZE_LARGE;
   9558c:	2a00      	cmp	r2, #0
   9558e:	bf0b      	itete	eq
   95590:	200e      	moveq	r0, #14
   95592:	2014      	movne	r0, #20
   95594:	2110      	moveq	r1, #16
   95596:	2117      	movne	r1, #23
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_HAS_TITLE_BAR) == MW_WINDOW_FLAG_HAS_TITLE_BAR)
   95598:	079c      	lsls	r4, r3, #30
   9559a:	d512      	bpl.n	955c2 <mw_process_message+0x3a52>
			if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_MODAL) == 0U)
   9559c:	f013 0540 	ands.w	r5, r3, #64	; 0x40
   955a0:	f040 8120 	bne.w	957e4 <mw_process_message+0x3c74>
				if (touch_x > (mw_all_windows[window_id].window_rect.x +
   955a4:	9a04      	ldr	r2, [sp, #16]
   955a6:	eb0a 0402 	add.w	r4, sl, r2
   955aa:	f9b4 7018 	ldrsh.w	r7, [r4, #24]
						mw_all_windows[window_id].window_rect.width) - icon_offset)
   955ae:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
				if (touch_x > (mw_all_windows[window_id].window_rect.x +
   955b2:	443a      	add	r2, r7
						mw_all_windows[window_id].window_rect.width) - icon_offset)
   955b4:	1a52      	subs	r2, r2, r1
				if (touch_x > (mw_all_windows[window_id].window_rect.x +
   955b6:	4590      	cmp	r8, r2
   955b8:	f340 80b5 	ble.w	95726 <mw_process_message+0x3bb6>
						if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_CAN_BE_CLOSED) == MW_WINDOW_FLAG_CAN_BE_CLOSED)
   955bc:	075a      	lsls	r2, r3, #29
   955be:	f100 80dc 	bmi.w	9577a <mw_process_message+0x3c0a>
   955c2:	4d79      	ldr	r5, [pc, #484]	; (957a8 <mw_process_message+0x3c38>)
			touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_WINDOW_TITLE_BAR;
   955c4:	2201      	movs	r2, #1
			touch_message_target.touch_down_recipient_handle = mw_all_windows[window_to_receive_message_id].window_handle;
   955c6:	9b04      	ldr	r3, [sp, #16]
   955c8:	4453      	add	r3, sl
   955ca:	6959      	ldr	r1, [r3, #20]
			touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_WINDOW_TITLE_BAR;
   955cc:	4b77      	ldr	r3, [pc, #476]	; (957ac <mw_process_message+0x3c3c>)
			touch_message_target.touch_down_recipient_handle = mw_all_windows[window_to_receive_message_id].window_handle;
   955ce:	6059      	str	r1, [r3, #4]
			touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_WINDOW_TITLE_BAR;
   955d0:	701a      	strb	r2, [r3, #0]
   955d2:	f7fc bb77 	b.w	91cc4 <mw_process_message+0x154>
		if (mw_util_do_rects_coincide(&mw_all_windows[i].window_rect, &mw_all_windows[window_id].window_rect))
   955d6:	4639      	mov	r1, r7
   955d8:	4875      	ldr	r0, [pc, #468]	; (957b0 <mw_process_message+0x3c40>)
   955da:	4b76      	ldr	r3, [pc, #472]	; (957b4 <mw_process_message+0x3c44>)
   955dc:	4798      	blx	r3
   955de:	4605      	mov	r5, r0
   955e0:	2800      	cmp	r0, #0
   955e2:	f43f aad5 	beq.w	94b90 <mw_process_message+0x3020>
   955e6:	f7fc bf44 	b.w	92472 <mw_process_message+0x902>
   955ea:	4639      	mov	r1, r7
   955ec:	4872      	ldr	r0, [pc, #456]	; (957b8 <mw_process_message+0x3c48>)
   955ee:	4b71      	ldr	r3, [pc, #452]	; (957b4 <mw_process_message+0x3c44>)
   955f0:	4798      	blx	r3
   955f2:	4605      	mov	r5, r0
   955f4:	2800      	cmp	r0, #0
   955f6:	f47c af3c 	bne.w	92472 <mw_process_message+0x902>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   955fa:	eb0a 0304 	add.w	r3, sl, r4
   955fe:	68db      	ldr	r3, [r3, #12]
   95600:	f003 0228 	and.w	r2, r3, #40	; 0x28
   95604:	2a28      	cmp	r2, #40	; 0x28
   95606:	f43c af29 	beq.w	9245c <mw_process_message+0x8ec>
   9560a:	f7fc bf31 	b.w	92470 <mw_process_message+0x900>
	if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_LARGE_SIZE) == MW_WINDOW_FLAG_LARGE_SIZE)
   9560e:	f403 4100 	and.w	r1, r3, #32768	; 0x8000
	if (touch_y < mw_all_windows[window_id].client_rect.y)
   95612:	9c02      	ldr	r4, [sp, #8]
		icon_offset = MW_TITLE_BAR_ICON_OFFSET;
   95614:	2900      	cmp	r1, #0
   95616:	bf15      	itete	ne
   95618:	2117      	movne	r1, #23
   9561a:	2110      	moveq	r1, #16
   9561c:	2014      	movne	r0, #20
   9561e:	200e      	moveq	r0, #14
	if (touch_y < mw_all_windows[window_id].client_rect.y)
   95620:	42a2      	cmp	r2, r4
   95622:	dcb9      	bgt.n	95598 <mw_process_message+0x3a28>
		control_to_receive_message_id = get_control_id_for_handle(
   95624:	9b04      	ldr	r3, [sp, #16]
   95626:	4d65      	ldr	r5, [pc, #404]	; (957bc <mw_process_message+0x3c4c>)
   95628:	4453      	add	r3, sl
   9562a:	695b      	ldr	r3, [r3, #20]
   9562c:	2417      	movs	r4, #23
   9562e:	9303      	str	r3, [sp, #12]
		if (mw_util_is_point_in_rect(&mw_all_controls[i].control_rect, point_x, point_y) &&
   95630:	4f63      	ldr	r7, [pc, #396]	; (957c0 <mw_process_message+0x3c50>)
   95632:	e005      	b.n	95640 <mw_process_message+0x3ad0>
   95634:	3c01      	subs	r4, #1
	for (i = (int16_t)MW_MAX_CONTROL_COUNT - 1; i >= 0; i--)
   95636:	1c61      	adds	r1, r4, #1
   95638:	f1a5 0520 	sub.w	r5, r5, #32
   9563c:	f000 80e9 	beq.w	95812 <mw_process_message+0x3ca2>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == 0U ||
   95640:	8a2b      	ldrh	r3, [r5, #16]
   95642:	075b      	lsls	r3, r3, #29
   95644:	d5f6      	bpl.n	95634 <mw_process_message+0x3ac4>
   95646:	68ab      	ldr	r3, [r5, #8]
   95648:	9a03      	ldr	r2, [sp, #12]
   9564a:	429a      	cmp	r2, r3
   9564c:	d1f2      	bne.n	95634 <mw_process_message+0x3ac4>
		if (mw_util_is_point_in_rect(&mw_all_controls[i].control_rect, point_x, point_y) &&
   9564e:	9a02      	ldr	r2, [sp, #8]
   95650:	4641      	mov	r1, r8
   95652:	4628      	mov	r0, r5
   95654:	47b8      	blx	r7
   95656:	2800      	cmp	r0, #0
   95658:	d0ec      	beq.n	95634 <mw_process_message+0x3ac4>
   9565a:	8a2b      	ldrh	r3, [r5, #16]
   9565c:	07d8      	lsls	r0, r3, #31
   9565e:	d5e9      	bpl.n	95634 <mw_process_message+0x3ac4>
			control_found = mw_all_controls[i].control_handle;
   95660:	4f58      	ldr	r7, [pc, #352]	; (957c4 <mw_process_message+0x3c54>)
   95662:	eb07 1444 	add.w	r4, r7, r4, lsl #5
   95666:	69a4      	ldr	r4, [r4, #24]
	if (control_handle == MW_INVALID_HANDLE)
   95668:	2c00      	cmp	r4, #0
   9566a:	f000 80d2 	beq.w	95812 <mw_process_message+0x3ca2>
   9566e:	4639      	mov	r1, r7
   95670:	2500      	movs	r5, #0
   95672:	463b      	mov	r3, r7
   95674:	e005      	b.n	95682 <mw_process_message+0x3b12>
   95676:	3501      	adds	r5, #1
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   95678:	2d18      	cmp	r5, #24
   9567a:	f103 0320 	add.w	r3, r3, #32
   9567e:	f000 80c8 	beq.w	95812 <mw_process_message+0x3ca2>
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   95682:	8b98      	ldrh	r0, [r3, #28]
   95684:	0742      	lsls	r2, r0, #29
   95686:	d5f6      	bpl.n	95676 <mw_process_message+0x3b06>
   95688:	699a      	ldr	r2, [r3, #24]
   9568a:	4294      	cmp	r4, r2
   9568c:	d1f3      	bne.n	95676 <mw_process_message+0x3b06>
			if ((mw_all_controls[control_to_receive_message_id].control_flags & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   9568e:	0782      	lsls	r2, r0, #30
   95690:	f57d adfe 	bpl.w	93290 <mw_process_message+0x1720>
				mw_post_message(touch_message_id,
   95694:	2200      	movs	r2, #0
				client_x = touch_x - mw_all_controls[control_to_receive_message_id].control_rect.x;
   95696:	016d      	lsls	r5, r5, #5
   95698:	197b      	adds	r3, r7, r5
   9569a:	8998      	ldrh	r0, [r3, #12]
				client_y = touch_y - mw_all_controls[control_to_receive_message_id].control_rect.y;
   9569c:	89db      	ldrh	r3, [r3, #14]
				client_x = touch_x - mw_all_controls[control_to_receive_message_id].control_rect.x;
   9569e:	eba8 0e00 	sub.w	lr, r8, r0
				client_y = touch_y - mw_all_controls[control_to_receive_message_id].control_rect.y;
   956a2:	9802      	ldr	r0, [sp, #8]
   956a4:	1ac3      	subs	r3, r0, r3
   956a6:	b21b      	sxth	r3, r3
				client_x = touch_x - mw_all_controls[control_to_receive_message_id].control_rect.x;
   956a8:	fa0f f08e 	sxth.w	r0, lr
   956ac:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
				client_y = touch_y - mw_all_controls[control_to_receive_message_id].control_rect.y;
   956b0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
				mw_post_message(touch_message_id,
   956b4:	ea43 4a00 	orr.w	sl, r3, r0, lsl #16
		if ((mw_all_controls[i].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED &&
   956b8:	8b8b      	ldrh	r3, [r1, #28]
   956ba:	fa5f f882 	uxtb.w	r8, r2
   956be:	075b      	lsls	r3, r3, #29
   956c0:	f102 0201 	add.w	r2, r2, #1
   956c4:	d502      	bpl.n	956cc <mw_process_message+0x3b5c>
   956c6:	698b      	ldr	r3, [r1, #24]
   956c8:	429c      	cmp	r4, r3
   956ca:	d004      	beq.n	956d6 <mw_process_message+0x3b66>
	for (i = 0U; i < MW_MAX_CONTROL_COUNT; i++)
   956cc:	2a18      	cmp	r2, #24
   956ce:	f101 0120 	add.w	r1, r1, #32
   956d2:	d1f1      	bne.n	956b8 <mw_process_message+0x3b48>
	return (MW_MAX_CONTROL_COUNT);
   956d4:	4690      	mov	r8, r2
		MW_ASSERT(recipient_id < MW_MAX_CONTROL_COUNT, "Bad control handle");
   956d6:	f1b8 0f17 	cmp.w	r8, #23
   956da:	bf8c      	ite	hi
   956dc:	2000      	movhi	r0, #0
   956de:	2001      	movls	r0, #1
   956e0:	4b39      	ldr	r3, [pc, #228]	; (957c8 <mw_process_message+0x3c58>)
   956e2:	f241 5267 	movw	r2, #5479	; 0x1567
   956e6:	4939      	ldr	r1, [pc, #228]	; (957cc <mw_process_message+0x3c5c>)
   956e8:	47c8      	blx	r9
	new_message.sender_handle = sender_handle;
   956ea:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   956ec:	2014      	movs	r0, #20
	new_message.message_recipient_type = recipient_type;
   956ee:	2101      	movs	r1, #1
				(mw_all_controls[recipient_id].control_flags & MW_CONTROL_FLAG_IS_USED) == MW_CONTROL_FLAG_IS_USED) ||
   956f0:	eb07 1848 	add.w	r8, r7, r8, lsl #5
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   956f4:	f8b8 201c 	ldrh.w	r2, [r8, #28]
	new_message.sender_handle = sender_handle;
   956f8:	9310      	str	r3, [sp, #64]	; 0x40
	new_message.message_pointer = message_pointer;
   956fa:	9314      	str	r3, [sp, #80]	; 0x50
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   956fc:	0753      	lsls	r3, r2, #29
	new_message.message_data = message_data;
   956fe:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
	new_message.recipient_handle = recipient_handle;
   95702:	9411      	str	r4, [sp, #68]	; 0x44
	new_message.message_id = message_id;
   95704:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
	new_message.message_recipient_type = recipient_type;
   95708:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		(new_message.message_recipient_type == MW_CONTROL_MESSAGE &&
   9570c:	d502      	bpl.n	95714 <mw_process_message+0x3ba4>
		(void)mw_message_queue_insert(&new_message);
   9570e:	4630      	mov	r0, r6
   95710:	4b24      	ldr	r3, [pc, #144]	; (957a4 <mw_process_message+0x3c34>)
   95712:	4798      	blx	r3
				touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_CONTROL;
   95714:	2202      	movs	r2, #2
				touch_message_target.touch_down_recipient_handle = mw_all_controls[control_to_receive_message_id].control_handle;
   95716:	443d      	add	r5, r7
   95718:	69a9      	ldr	r1, [r5, #24]
				touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_CONTROL;
   9571a:	4b24      	ldr	r3, [pc, #144]	; (957ac <mw_process_message+0x3c3c>)
   9571c:	4d22      	ldr	r5, [pc, #136]	; (957a8 <mw_process_message+0x3c38>)
				touch_message_target.touch_down_recipient_handle = mw_all_controls[control_to_receive_message_id].control_handle;
   9571e:	6059      	str	r1, [r3, #4]
				touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_CONTROL;
   95720:	701a      	strb	r2, [r3, #0]
   95722:	f7fc bacf 	b.w	91cc4 <mw_process_message+0x154>
						mw_all_windows[window_id].window_rect.width) - (2 * icon_offset))
   95726:	1a52      	subs	r2, r2, r1
				else if (touch_x > (mw_all_windows[window_id].window_rect.x +
   95728:	4590      	cmp	r8, r2
   9572a:	f340 8094 	ble.w	95856 <mw_process_message+0x3ce6>
						if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_FIXED_SIZE) == 0UL)
   9572e:	f413 3580 	ands.w	r5, r3, #65536	; 0x10000
   95732:	f47f af46 	bne.w	955c2 <mw_process_message+0x3a52>
							(void)mw_resize_window(mw_all_windows[window_id].window_handle,
   95736:	4b26      	ldr	r3, [pc, #152]	; (957d0 <mw_process_message+0x3c60>)
   95738:	f8d4 8014 	ldr.w	r8, [r4, #20]
   9573c:	4798      	blx	r3
   9573e:	4b25      	ldr	r3, [pc, #148]	; (957d4 <mw_process_message+0x3c64>)
   95740:	4607      	mov	r7, r0
   95742:	4798      	blx	r3
   95744:	4639      	mov	r1, r7
   95746:	4602      	mov	r2, r0
   95748:	4b23      	ldr	r3, [pc, #140]	; (957d8 <mw_process_message+0x3c68>)
   9574a:	4640      	mov	r0, r8
   9574c:	4798      	blx	r3
							mw_reposition_window(mw_all_windows[window_id].window_handle, 0, 0);
   9574e:	462a      	mov	r2, r5
   95750:	4629      	mov	r1, r5
   95752:	6960      	ldr	r0, [r4, #20]
   95754:	4b21      	ldr	r3, [pc, #132]	; (957dc <mw_process_message+0x3c6c>)
   95756:	4798      	blx	r3
	new_message.sender_handle = sender_handle;
   95758:	2200      	movs	r2, #0
   9575a:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   9575c:	274a      	movs	r7, #74	; 0x4a
	new_message.message_recipient_type = recipient_type;
   9575e:	2402      	movs	r4, #2
		(void)mw_message_queue_insert(&new_message);
   95760:	4630      	mov	r0, r6
   95762:	4910      	ldr	r1, [pc, #64]	; (957a4 <mw_process_message+0x3c34>)
	new_message.sender_handle = sender_handle;
   95764:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	new_message.message_data = message_data;
   95768:	9513      	str	r5, [sp, #76]	; 0x4c
	new_message.message_pointer = message_pointer;
   9576a:	9514      	str	r5, [sp, #80]	; 0x50
	new_message.message_id = message_id;
   9576c:	f88d 7048 	strb.w	r7, [sp, #72]	; 0x48
	new_message.message_recipient_type = recipient_type;
   95770:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
   95774:	4d0c      	ldr	r5, [pc, #48]	; (957a8 <mw_process_message+0x3c38>)
		(void)mw_message_queue_insert(&new_message);
   95776:	4788      	blx	r1
   95778:	e724      	b.n	955c4 <mw_process_message+0x3a54>
							mw_remove_window(mw_all_windows[window_id].window_handle);
   9577a:	6960      	ldr	r0, [r4, #20]
   9577c:	4b18      	ldr	r3, [pc, #96]	; (957e0 <mw_process_message+0x3c70>)
   9577e:	4798      	blx	r3
	new_message.message_id = message_id;
   95780:	204a      	movs	r0, #74	; 0x4a
	new_message.message_recipient_type = recipient_type;
   95782:	2102      	movs	r1, #2
	new_message.sender_handle = sender_handle;
   95784:	2200      	movs	r2, #0
   95786:	2300      	movs	r3, #0
	new_message.message_id = message_id;
   95788:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
	new_message.message_recipient_type = recipient_type;
   9578c:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		(void)mw_message_queue_insert(&new_message);
   95790:	4630      	mov	r0, r6
   95792:	4904      	ldr	r1, [pc, #16]	; (957a4 <mw_process_message+0x3c34>)
	new_message.sender_handle = sender_handle;
   95794:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	new_message.message_data = message_data;
   95798:	9513      	str	r5, [sp, #76]	; 0x4c
	new_message.message_pointer = message_pointer;
   9579a:	9514      	str	r5, [sp, #80]	; 0x50
   9579c:	4d02      	ldr	r5, [pc, #8]	; (957a8 <mw_process_message+0x3c38>)
		(void)mw_message_queue_insert(&new_message);
   9579e:	4788      	blx	r1
   957a0:	e710      	b.n	955c4 <mw_process_message+0x3a54>
   957a2:	bf00      	nop
   957a4:	00095bc1 	.word	0x00095bc1
   957a8:	20071fb1 	.word	0x20071fb1
   957ac:	20071f70 	.word	0x20071f70
   957b0:	20071eb0 	.word	0x20071eb0
   957b4:	00096ecd 	.word	0x00096ecd
   957b8:	20071ef0 	.word	0x20071ef0
   957bc:	20071b44 	.word	0x20071b44
   957c0:	00096e7d 	.word	0x00096e7d
   957c4:	20071858 	.word	0x20071858
   957c8:	000ab734 	.word	0x000ab734
   957cc:	000ab710 	.word	0x000ab710
   957d0:	00086e2d 	.word	0x00086e2d
   957d4:	00086e31 	.word	0x00086e31
   957d8:	0008fb15 	.word	0x0008fb15
   957dc:	0008f7a9 	.word	0x0008f7a9
   957e0:	000911c9 	.word	0x000911c9
					window_redimensioning_state = WINDOW_BEING_MOVED;
   957e4:	2201      	movs	r2, #1
					window_being_redimensioned_id = get_window_id_for_handle(mw_all_windows[window_id].window_handle);
   957e6:	9b04      	ldr	r3, [sp, #16]
					window_redimensioning_state = WINDOW_BEING_MOVED;
   957e8:	4d98      	ldr	r5, [pc, #608]	; (95a4c <mw_process_message+0x3edc>)
					window_being_redimensioned_id = get_window_id_for_handle(mw_all_windows[window_id].window_handle);
   957ea:	4453      	add	r3, sl
   957ec:	6958      	ldr	r0, [r3, #20]
					window_redimensioning_state = WINDOW_BEING_MOVED;
   957ee:	702a      	strb	r2, [r5, #0]
	if (window_handle == MW_INVALID_HANDLE)
   957f0:	2800      	cmp	r0, #0
   957f2:	d02e      	beq.n	95852 <mw_process_message+0x3ce2>
   957f4:	4b96      	ldr	r3, [pc, #600]	; (95a50 <mw_process_message+0x3ee0>)
   957f6:	4798      	blx	r3
   957f8:	4601      	mov	r1, r0
					window_being_redimensioned_id = get_window_id_for_handle(mw_all_windows[window_id].window_handle);
   957fa:	4c96      	ldr	r4, [pc, #600]	; (95a54 <mw_process_message+0x3ee4>)
					MW_ASSERT(window_being_redimensioned_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   957fc:	290d      	cmp	r1, #13
					window_being_redimensioned_id = get_window_id_for_handle(mw_all_windows[window_id].window_handle);
   957fe:	7021      	strb	r1, [r4, #0]
					MW_ASSERT(window_being_redimensioned_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   95800:	bf8c      	ite	hi
   95802:	2000      	movhi	r0, #0
   95804:	2001      	movls	r0, #1
   95806:	4b94      	ldr	r3, [pc, #592]	; (95a58 <mw_process_message+0x3ee8>)
   95808:	f640 7256 	movw	r2, #3926	; 0xf56
   9580c:	4993      	ldr	r1, [pc, #588]	; (95a5c <mw_process_message+0x3eec>)
   9580e:	47c8      	blx	r9
   95810:	e6d8      	b.n	955c4 <mw_process_message+0x3a54>
		client_x = touch_x - mw_all_windows[window_to_receive_message_id].client_rect.x;
   95812:	9b04      	ldr	r3, [sp, #16]
		client_y = touch_y - mw_all_windows[window_to_receive_message_id].client_rect.y;
   95814:	9a02      	ldr	r2, [sp, #8]
		client_x = touch_x - mw_all_windows[window_to_receive_message_id].client_rect.x;
   95816:	449a      	add	sl, r3
   95818:	f8ba 5020 	ldrh.w	r5, [sl, #32]
		client_y = touch_y - mw_all_windows[window_to_receive_message_id].client_rect.y;
   9581c:	f8ba 3022 	ldrh.w	r3, [sl, #34]	; 0x22
		client_x = touch_x - mw_all_windows[window_to_receive_message_id].client_rect.x;
   95820:	eba8 0505 	sub.w	r5, r8, r5
		client_y = touch_y - mw_all_windows[window_to_receive_message_id].client_rect.y;
   95824:	1ad3      	subs	r3, r2, r3
   95826:	b21b      	sxth	r3, r3
		client_x = touch_x - mw_all_windows[window_to_receive_message_id].client_rect.x;
   95828:	b22d      	sxth	r5, r5
		mw_post_message(touch_message_id,
   9582a:	ea43 4205 	orr.w	r2, r3, r5, lsl #16
   9582e:	f8da 1014 	ldr.w	r1, [sl, #20]
		client_x = touch_x - mw_all_windows[window_to_receive_message_id].client_rect.x;
   95832:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
		mw_post_message(touch_message_id,
   95836:	2014      	movs	r0, #20
   95838:	4d89      	ldr	r5, [pc, #548]	; (95a60 <mw_process_message+0x3ef0>)
		client_y = touch_y - mw_all_windows[window_to_receive_message_id].client_rect.y;
   9583a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		mw_post_message(touch_message_id,
   9583e:	47a8      	blx	r5
		touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_WINDOW_CLIENT;
   95840:	2200      	movs	r2, #0
   95842:	4b88      	ldr	r3, [pc, #544]	; (95a64 <mw_process_message+0x3ef4>)
		touch_message_target.touch_down_recipient_handle = mw_all_windows[window_to_receive_message_id].window_handle;
   95844:	f8da 1014 	ldr.w	r1, [sl, #20]
   95848:	4d80      	ldr	r5, [pc, #512]	; (95a4c <mw_process_message+0x3edc>)
   9584a:	6059      	str	r1, [r3, #4]
		touch_message_target.touch_down_recipient_type = TOUCH_DOWN_RECIPIENT_TYPE_WINDOW_CLIENT;
   9584c:	701a      	strb	r2, [r3, #0]
   9584e:	f7fc ba39 	b.w	91cc4 <mw_process_message+0x154>
		return (MW_MAX_WINDOW_COUNT);
   95852:	210e      	movs	r1, #14
   95854:	e7d1      	b.n	957fa <mw_process_message+0x3c8a>
						mw_all_windows[window_id].window_rect.width) - (3 * icon_offset))
   95856:	1a52      	subs	r2, r2, r1
				else if (touch_x > (mw_all_windows[window_id].window_rect.x +
   95858:	4590      	cmp	r8, r2
   9585a:	dd1a      	ble.n	95892 <mw_process_message+0x3d22>
	system_timer.system_timer_event = event;
   9585c:	2701      	movs	r7, #1
						add_minimised_window_to_list(mw_all_windows[window_id].window_handle);
   9585e:	6960      	ldr	r0, [r4, #20]
   95860:	4b81      	ldr	r3, [pc, #516]	; (95a68 <mw_process_message+0x3ef8>)
   95862:	4798      	blx	r3
						draw_min_restore_window_effect(mw_all_windows[window_id].window_handle);
   95864:	6960      	ldr	r0, [r4, #20]
   95866:	4b81      	ldr	r3, [pc, #516]	; (95a6c <mw_process_message+0x3efc>)
   95868:	4798      	blx	r3
						mw_all_windows[window_id].window_flags |= MW_WINDOW_FLAG_IS_MINIMISED;
   9586a:	68e3      	ldr	r3, [r4, #12]
						set_focus();
   9586c:	4a80      	ldr	r2, [pc, #512]	; (95a70 <mw_process_message+0x3f00>)
						mw_all_windows[window_id].window_flags |= MW_WINDOW_FLAG_IS_MINIMISED;
   9586e:	f043 0310 	orr.w	r3, r3, #16
   95872:	60e3      	str	r3, [r4, #12]
						set_focus();
   95874:	4790      	blx	r2
						set_system_timer(MW_UNUSED_MESSAGE_PARAMETER,
   95876:	f8db 2000 	ldr.w	r2, [fp]
	system_timer.data = timer_data;
   9587a:	4b7e      	ldr	r3, [pc, #504]	; (95a74 <mw_process_message+0x3f04>)
						set_system_timer(MW_UNUSED_MESSAGE_PARAMETER,
   9587c:	3205      	adds	r2, #5
	system_timer.next_fire_time = fire_time;
   9587e:	601a      	str	r2, [r3, #0]
	system_timer.data = timer_data;
   95880:	605d      	str	r5, [r3, #4]
						mw_post_message(MW_WINDOW_MINIMISED_MESSAGE,
   95882:	462a      	mov	r2, r5
	system_timer.system_timer_event = event;
   95884:	721f      	strb	r7, [r3, #8]
						mw_post_message(MW_WINDOW_MINIMISED_MESSAGE,
   95886:	6961      	ldr	r1, [r4, #20]
   95888:	2006      	movs	r0, #6
   9588a:	4b75      	ldr	r3, [pc, #468]	; (95a60 <mw_process_message+0x3ef0>)
   9588c:	4798      	blx	r3
   9588e:	4d6f      	ldr	r5, [pc, #444]	; (95a4c <mw_process_message+0x3edc>)
   95890:	e698      	b.n	955c4 <mw_process_message+0x3a54>
				else if (touch_x - mw_all_windows[window_id].window_rect.x < icon_size)
   95892:	eba8 0207 	sub.w	r2, r8, r7
   95896:	4282      	cmp	r2, r0
   95898:	da18      	bge.n	958cc <mw_process_message+0x3d5c>
						if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_FIXED_SIZE) == 0UL)
   9589a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   9589e:	f47f ae90 	bne.w	955c2 <mw_process_message+0x3a52>
							window_redimensioning_state = WINDOW_BEING_RESIZED;
   958a2:	4d6a      	ldr	r5, [pc, #424]	; (95a4c <mw_process_message+0x3edc>)
							window_being_redimensioned_id = get_window_id_for_handle(mw_all_windows[window_id].window_handle);
   958a4:	6960      	ldr	r0, [r4, #20]
							window_redimensioning_state = WINDOW_BEING_RESIZED;
   958a6:	702b      	strb	r3, [r5, #0]
	if (window_handle == MW_INVALID_HANDLE)
   958a8:	b170      	cbz	r0, 958c8 <mw_process_message+0x3d58>
   958aa:	4b69      	ldr	r3, [pc, #420]	; (95a50 <mw_process_message+0x3ee0>)
   958ac:	4798      	blx	r3
   958ae:	4601      	mov	r1, r0
							window_being_redimensioned_id = get_window_id_for_handle(mw_all_windows[window_id].window_handle);
   958b0:	4c68      	ldr	r4, [pc, #416]	; (95a54 <mw_process_message+0x3ee4>)
							MW_ASSERT(window_being_redimensioned_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   958b2:	290d      	cmp	r1, #13
							window_being_redimensioned_id = get_window_id_for_handle(mw_all_windows[window_id].window_handle);
   958b4:	7021      	strb	r1, [r4, #0]
							MW_ASSERT(window_being_redimensioned_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   958b6:	bf8c      	ite	hi
   958b8:	2000      	movhi	r0, #0
   958ba:	2001      	movls	r0, #1
   958bc:	4b66      	ldr	r3, [pc, #408]	; (95a58 <mw_process_message+0x3ee8>)
   958be:	f640 723e 	movw	r2, #3902	; 0xf3e
   958c2:	4966      	ldr	r1, [pc, #408]	; (95a5c <mw_process_message+0x3eec>)
   958c4:	47c8      	blx	r9
   958c6:	e67d      	b.n	955c4 <mw_process_message+0x3a54>
		return (MW_MAX_WINDOW_COUNT);
   958c8:	210e      	movs	r1, #14
   958ca:	e7f1      	b.n	958b0 <mw_process_message+0x3d40>
						window_redimensioning_state = WINDOW_BEING_MOVED;
   958cc:	2301      	movs	r3, #1
   958ce:	4d5f      	ldr	r5, [pc, #380]	; (95a4c <mw_process_message+0x3edc>)
						window_being_redimensioned_id = get_window_id_for_handle(mw_all_windows[window_id].window_handle);
   958d0:	6960      	ldr	r0, [r4, #20]
						window_redimensioning_state = WINDOW_BEING_MOVED;
   958d2:	702b      	strb	r3, [r5, #0]
	if (window_handle == MW_INVALID_HANDLE)
   958d4:	2800      	cmp	r0, #0
   958d6:	f000 80b6 	beq.w	95a46 <mw_process_message+0x3ed6>
   958da:	4b5d      	ldr	r3, [pc, #372]	; (95a50 <mw_process_message+0x3ee0>)
   958dc:	4798      	blx	r3
   958de:	4601      	mov	r1, r0
						window_being_redimensioned_id = get_window_id_for_handle(mw_all_windows[window_id].window_handle);
   958e0:	4c5c      	ldr	r4, [pc, #368]	; (95a54 <mw_process_message+0x3ee4>)
						MW_ASSERT(window_being_redimensioned_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   958e2:	290d      	cmp	r1, #13
						window_being_redimensioned_id = get_window_id_for_handle(mw_all_windows[window_id].window_handle);
   958e4:	7021      	strb	r1, [r4, #0]
						MW_ASSERT(window_being_redimensioned_id < MW_MAX_WINDOW_COUNT, "Bad window handle");
   958e6:	bf8c      	ite	hi
   958e8:	2000      	movhi	r0, #0
   958ea:	2001      	movls	r0, #1
   958ec:	4b5a      	ldr	r3, [pc, #360]	; (95a58 <mw_process_message+0x3ee8>)
   958ee:	f640 724a 	movw	r2, #3914	; 0xf4a
   958f2:	495a      	ldr	r1, [pc, #360]	; (95a5c <mw_process_message+0x3eec>)
   958f4:	47c8      	blx	r9
   958f6:	e665      	b.n	955c4 <mw_process_message+0x3a54>
		if (mw_util_do_rects_coincide(&mw_all_windows[i].window_rect, &mw_all_windows[window_id].window_rect))
   958f8:	4639      	mov	r1, r7
   958fa:	485f      	ldr	r0, [pc, #380]	; (95a78 <mw_process_message+0x3f08>)
   958fc:	4b5f      	ldr	r3, [pc, #380]	; (95a7c <mw_process_message+0x3f0c>)
   958fe:	4798      	blx	r3
   95900:	4605      	mov	r5, r0
   95902:	2800      	cmp	r0, #0
   95904:	f43f a924 	beq.w	94b50 <mw_process_message+0x2fe0>
   95908:	f7fc bdb3 	b.w	92472 <mw_process_message+0x902>
   9590c:	4639      	mov	r1, r7
   9590e:	485c      	ldr	r0, [pc, #368]	; (95a80 <mw_process_message+0x3f10>)
   95910:	4b5a      	ldr	r3, [pc, #360]	; (95a7c <mw_process_message+0x3f0c>)
   95912:	4798      	blx	r3
   95914:	4605      	mov	r5, r0
   95916:	2800      	cmp	r0, #0
   95918:	f47c adab 	bne.w	92472 <mw_process_message+0x902>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   9591c:	eb0a 0304 	add.w	r3, sl, r4
   95920:	68db      	ldr	r3, [r3, #12]
   95922:	f003 0228 	and.w	r2, r3, #40	; 0x28
   95926:	2a28      	cmp	r2, #40	; 0x28
   95928:	f43c ad28 	beq.w	9237c <mw_process_message+0x80c>
   9592c:	eb0a 0304 	add.w	r3, sl, r4
   95930:	68db      	ldr	r3, [r3, #12]
   95932:	f003 0228 	and.w	r2, r3, #40	; 0x28
   95936:	2a28      	cmp	r2, #40	; 0x28
   95938:	f43c ad3c 	beq.w	923b4 <mw_process_message+0x844>
   9593c:	eb0a 0304 	add.w	r3, sl, r4
   95940:	68db      	ldr	r3, [r3, #12]
   95942:	f003 0228 	and.w	r2, r3, #40	; 0x28
   95946:	2a28      	cmp	r2, #40	; 0x28
   95948:	f43c ad50 	beq.w	923ec <mw_process_message+0x87c>
   9594c:	eb0a 0304 	add.w	r3, sl, r4
   95950:	68db      	ldr	r3, [r3, #12]
   95952:	f003 0228 	and.w	r2, r3, #40	; 0x28
   95956:	2a28      	cmp	r2, #40	; 0x28
   95958:	f43c ad64 	beq.w	92424 <mw_process_message+0x8b4>
   9595c:	e64d      	b.n	955fa <mw_process_message+0x3a8a>
		if (mw_util_do_rects_coincide(&mw_all_windows[i].window_rect, &mw_all_windows[window_id].window_rect))
   9595e:	4639      	mov	r1, r7
   95960:	4848      	ldr	r0, [pc, #288]	; (95a84 <mw_process_message+0x3f14>)
   95962:	4b46      	ldr	r3, [pc, #280]	; (95a7c <mw_process_message+0x3f0c>)
   95964:	4798      	blx	r3
   95966:	4605      	mov	r5, r0
   95968:	2800      	cmp	r0, #0
   9596a:	f43f a8f9 	beq.w	94b60 <mw_process_message+0x2ff0>
   9596e:	f7fc bd80 	b.w	92472 <mw_process_message+0x902>
   95972:	4639      	mov	r1, r7
   95974:	4844      	ldr	r0, [pc, #272]	; (95a88 <mw_process_message+0x3f18>)
   95976:	4b41      	ldr	r3, [pc, #260]	; (95a7c <mw_process_message+0x3f0c>)
   95978:	4798      	blx	r3
   9597a:	4605      	mov	r5, r0
   9597c:	2800      	cmp	r0, #0
   9597e:	d0d5      	beq.n	9592c <mw_process_message+0x3dbc>
   95980:	f7fc bd77 	b.w	92472 <mw_process_message+0x902>
   95984:	4639      	mov	r1, r7
   95986:	4841      	ldr	r0, [pc, #260]	; (95a8c <mw_process_message+0x3f1c>)
   95988:	4b3c      	ldr	r3, [pc, #240]	; (95a7c <mw_process_message+0x3f0c>)
   9598a:	4798      	blx	r3
   9598c:	4605      	mov	r5, r0
   9598e:	2800      	cmp	r0, #0
   95990:	f43f a8ee 	beq.w	94b70 <mw_process_message+0x3000>
   95994:	f7fc bd6d 	b.w	92472 <mw_process_message+0x902>
   95998:	4639      	mov	r1, r7
   9599a:	483d      	ldr	r0, [pc, #244]	; (95a90 <mw_process_message+0x3f20>)
   9599c:	4b37      	ldr	r3, [pc, #220]	; (95a7c <mw_process_message+0x3f0c>)
   9599e:	4798      	blx	r3
   959a0:	4605      	mov	r5, r0
   959a2:	2800      	cmp	r0, #0
   959a4:	d0ca      	beq.n	9593c <mw_process_message+0x3dcc>
   959a6:	f7fc bd64 	b.w	92472 <mw_process_message+0x902>
   959aa:	4639      	mov	r1, r7
   959ac:	4839      	ldr	r0, [pc, #228]	; (95a94 <mw_process_message+0x3f24>)
   959ae:	4b33      	ldr	r3, [pc, #204]	; (95a7c <mw_process_message+0x3f0c>)
   959b0:	4798      	blx	r3
   959b2:	4605      	mov	r5, r0
   959b4:	2800      	cmp	r0, #0
   959b6:	f43f a8e3 	beq.w	94b80 <mw_process_message+0x3010>
   959ba:	f7fc bd5a 	b.w	92472 <mw_process_message+0x902>
   959be:	4639      	mov	r1, r7
   959c0:	4835      	ldr	r0, [pc, #212]	; (95a98 <mw_process_message+0x3f28>)
   959c2:	4b2e      	ldr	r3, [pc, #184]	; (95a7c <mw_process_message+0x3f0c>)
   959c4:	4798      	blx	r3
   959c6:	4605      	mov	r5, r0
   959c8:	2800      	cmp	r0, #0
   959ca:	d0bf      	beq.n	9594c <mw_process_message+0x3ddc>
   959cc:	f7fc bd51 	b.w	92472 <mw_process_message+0x902>
	if (find_if_rect_is_completely_on_screen(&invalid_rect_copy) && window_handle == window_with_focus_handle)
   959d0:	4b32      	ldr	r3, [pc, #200]	; (95a9c <mw_process_message+0x3f2c>)
   959d2:	681b      	ldr	r3, [r3, #0]
   959d4:	4598      	cmp	r8, r3
   959d6:	f47f aa01 	bne.w	94ddc <mw_process_message+0x326c>
		do_paint_window_client2(window_handle, &invalid_rect_copy);
   959da:	a90e      	add	r1, sp, #56	; 0x38
   959dc:	4640      	mov	r0, r8
   959de:	4b30      	ldr	r3, [pc, #192]	; (95aa0 <mw_process_message+0x3f30>)
   959e0:	4798      	blx	r3
   959e2:	f7fd b8b7 	b.w	92b54 <mw_process_message+0xfe4>
		if (mw_util_do_rects_coincide(&mw_all_windows[i].window_rect, &mw_all_windows[window_id].window_rect))
   959e6:	4639      	mov	r1, r7
   959e8:	482e      	ldr	r0, [pc, #184]	; (95aa4 <mw_process_message+0x3f34>)
   959ea:	4b24      	ldr	r3, [pc, #144]	; (95a7c <mw_process_message+0x3f0c>)
   959ec:	4798      	blx	r3
   959ee:	4605      	mov	r5, r0
   959f0:	2800      	cmp	r0, #0
   959f2:	f47c ad3e 	bne.w	92472 <mw_process_message+0x902>
		if ((mw_all_windows[window_id].window_flags & MW_WINDOW_FLAG_IS_USED) == 0U ||
   959f6:	9b05      	ldr	r3, [sp, #20]
   959f8:	68db      	ldr	r3, [r3, #12]
   959fa:	f003 0228 	and.w	r2, r3, #40	; 0x28
   959fe:	2a28      	cmp	r2, #40	; 0x28
   95a00:	f43c ac84 	beq.w	9230c <mw_process_message+0x79c>
   95a04:	eb0a 0304 	add.w	r3, sl, r4
   95a08:	68db      	ldr	r3, [r3, #12]
   95a0a:	f003 0228 	and.w	r2, r3, #40	; 0x28
   95a0e:	2a28      	cmp	r2, #40	; 0x28
   95a10:	f43c ac98 	beq.w	92344 <mw_process_message+0x7d4>
   95a14:	e782      	b.n	9591c <mw_process_message+0x3dac>
		if (mw_util_do_rects_coincide(&mw_all_windows[i].window_rect, &mw_all_windows[window_id].window_rect))
   95a16:	4639      	mov	r1, r7
   95a18:	4823      	ldr	r0, [pc, #140]	; (95aa8 <mw_process_message+0x3f38>)
   95a1a:	4b18      	ldr	r3, [pc, #96]	; (95a7c <mw_process_message+0x3f0c>)
   95a1c:	4798      	blx	r3
   95a1e:	4605      	mov	r5, r0
   95a20:	2800      	cmp	r0, #0
   95a22:	f43c ad25 	beq.w	92470 <mw_process_message+0x900>
   95a26:	f7fc bd24 	b.w	92472 <mw_process_message+0x902>
	for (i = 0U; i < MW_MAX_WINDOW_COUNT; i++)
   95a2a:	240d      	movs	r4, #13
		return (MW_MAX_WINDOW_COUNT);
   95a2c:	4658      	mov	r0, fp
		if (mw_all_windows[i].window_handle == window_handle &&
   95a2e:	4623      	mov	r3, r4
   95a30:	f7fd b87c 	b.w	92b2c <mw_process_message+0xfbc>
		if (mw_util_do_rects_coincide(&mw_all_windows[i].window_rect, &mw_all_windows[window_id].window_rect))
   95a34:	4639      	mov	r1, r7
   95a36:	481d      	ldr	r0, [pc, #116]	; (95aac <mw_process_message+0x3f3c>)
   95a38:	4b10      	ldr	r3, [pc, #64]	; (95a7c <mw_process_message+0x3f0c>)
   95a3a:	4798      	blx	r3
   95a3c:	4605      	mov	r5, r0
   95a3e:	2800      	cmp	r0, #0
   95a40:	d0e0      	beq.n	95a04 <mw_process_message+0x3e94>
   95a42:	f7fc bd16 	b.w	92472 <mw_process_message+0x902>
		return (MW_MAX_WINDOW_COUNT);
   95a46:	210e      	movs	r1, #14
   95a48:	e74a      	b.n	958e0 <mw_process_message+0x3d70>
   95a4a:	bf00      	nop
   95a4c:	20071fb1 	.word	0x20071fb1
   95a50:	00088121 	.word	0x00088121
   95a54:	20071fb0 	.word	0x20071fb0
   95a58:	000ab764 	.word	0x000ab764
   95a5c:	000ab468 	.word	0x000ab468
   95a60:	000896c5 	.word	0x000896c5
   95a64:	20071f70 	.word	0x20071f70
   95a68:	0008dae1 	.word	0x0008dae1
   95a6c:	00089749 	.word	0x00089749
   95a70:	0008b351 	.word	0x0008b351
   95a74:	20071f64 	.word	0x20071f64
   95a78:	20071cb0 	.word	0x20071cb0
   95a7c:	00096ecd 	.word	0x00096ecd
   95a80:	20071cf0 	.word	0x20071cf0
   95a84:	20071d30 	.word	0x20071d30
   95a88:	20071d70 	.word	0x20071d70
   95a8c:	20071db0 	.word	0x20071db0
   95a90:	20071df0 	.word	0x20071df0
   95a94:	20071e30 	.word	0x20071e30
   95a98:	20071e70 	.word	0x20071e70
   95a9c:	20071fb4 	.word	0x20071fb4
   95aa0:	00088241 	.word	0x00088241
   95aa4:	20071bf0 	.word	0x20071bf0
   95aa8:	20071f30 	.word	0x20071f30
   95aac:	20071c70 	.word	0x20071c70

00095ab0 <mw_paint_all>:

void mw_paint_all(void)
{
   95ab0:	b570      	push	{r4, r5, r6, lr}
	new_message.sender_handle = sender_handle;
   95ab2:	2400      	movs	r4, #0
   95ab4:	2500      	movs	r5, #0
	new_message.message_data = message_data;
   95ab6:	2300      	movs	r3, #0
	new_message.message_recipient_type = recipient_type;
   95ab8:	2102      	movs	r1, #2
	new_message.message_id = message_id;
   95aba:	264a      	movs	r6, #74	; 0x4a
{
   95abc:	b086      	sub	sp, #24
		(void)mw_message_queue_insert(&new_message);
   95abe:	4668      	mov	r0, sp
   95ac0:	4a05      	ldr	r2, [pc, #20]	; (95ad8 <mw_paint_all+0x28>)
	new_message.sender_handle = sender_handle;
   95ac2:	e9cd 4500 	strd	r4, r5, [sp]
	new_message.message_id = message_id;
   95ac6:	f88d 6008 	strb.w	r6, [sp, #8]
	new_message.message_data = message_data;
   95aca:	9303      	str	r3, [sp, #12]
	new_message.message_pointer = message_pointer;
   95acc:	9304      	str	r3, [sp, #16]
	new_message.message_recipient_type = recipient_type;
   95ace:	f88d 1009 	strb.w	r1, [sp, #9]
		(void)mw_message_queue_insert(&new_message);
   95ad2:	4790      	blx	r2
			MW_UNUSED_MESSAGE_PARAMETER,
			MW_UNUSED_MESSAGE_PARAMETER,
			MW_UNUSED_MESSAGE_PARAMETER,
			NULL,
			MW_SYSTEM_MESSAGE);
}
   95ad4:	b006      	add	sp, #24
   95ad6:	bd70      	pop	{r4, r5, r6, pc}
   95ad8:	00095bc1 	.word	0x00095bc1

00095adc <mw_debug_print_assert>:
***********************/

#ifndef NDEBUG

void mw_debug_print_assert(bool expression, const char *function_name, int32_t line_number, const char *message)
{
   95adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mw_gl_draw_info_t draw_info = {0};
   95ae0:	2500      	movs	r5, #0
{
   95ae2:	b08d      	sub	sp, #52	; 0x34
    draw_info.clip_rect.width = MW_ROOT_WIDTH;
   95ae4:	4e2a      	ldr	r6, [pc, #168]	; (95b90 <mw_debug_print_assert+0xb4>)
{
   95ae6:	4689      	mov	r9, r1
   95ae8:	4690      	mov	r8, r2
   95aea:	461f      	mov	r7, r3
    mw_gl_draw_info_t draw_info = {0};
   95aec:	9505      	str	r5, [sp, #20]
   95aee:	9506      	str	r5, [sp, #24]
   95af0:	9507      	str	r5, [sp, #28]
{
   95af2:	4604      	mov	r4, r0
    draw_info.clip_rect.width = MW_ROOT_WIDTH;
   95af4:	47b0      	blx	r6
    draw_info.clip_rect.height = MW_ROOT_HEIGHT;
   95af6:	4d27      	ldr	r5, [pc, #156]	; (95b94 <mw_debug_print_assert+0xb8>)
    draw_info.clip_rect.width = MW_ROOT_WIDTH;
   95af8:	f8ad 001c 	strh.w	r0, [sp, #28]
    draw_info.clip_rect.height = MW_ROOT_HEIGHT;
   95afc:	47a8      	blx	r5
   95afe:	f8ad 001e 	strh.w	r0, [sp, #30]

    char number_buffer[15];

    if (expression)
   95b02:	b114      	cbz	r4, 95b0a <mw_debug_print_assert+0x2e>
	mw_gl_string(&draw_info, 0, 3 * ((int16_t)mw_gl_get_font_height() + 1), message);

	while (true)
	{
	}
}
   95b04:	b00d      	add	sp, #52	; 0x34
   95b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mw_hal_lcd_filled_rectangle(0,
   95b0a:	47b0      	blx	r6
   95b0c:	4606      	mov	r6, r0
   95b0e:	47a8      	blx	r5
   95b10:	21ff      	movs	r1, #255	; 0xff
   95b12:	4632      	mov	r2, r6
   95b14:	4603      	mov	r3, r0
   95b16:	9100      	str	r1, [sp, #0]
   95b18:	4620      	mov	r0, r4
   95b1a:	4621      	mov	r1, r4
   95b1c:	4d1e      	ldr	r5, [pc, #120]	; (95b98 <mw_debug_print_assert+0xbc>)
   95b1e:	47a8      	blx	r5
	mw_gl_set_fg_colour(MW_HAL_LCD_YELLOW);
   95b20:	481e      	ldr	r0, [pc, #120]	; (95b9c <mw_debug_print_assert+0xc0>)
   95b22:	4b1f      	ldr	r3, [pc, #124]	; (95ba0 <mw_debug_print_assert+0xc4>)
   95b24:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   95b26:	4620      	mov	r0, r4
   95b28:	4b1e      	ldr	r3, [pc, #120]	; (95ba4 <mw_debug_print_assert+0xc8>)
   95b2a:	4798      	blx	r3
	mw_gl_set_font(MW_GL_FONT_9);
   95b2c:	4620      	mov	r0, r4
   95b2e:	4b1e      	ldr	r3, [pc, #120]	; (95ba8 <mw_debug_print_assert+0xcc>)
   95b30:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   95b32:	4620      	mov	r0, r4
   95b34:	4b1d      	ldr	r3, [pc, #116]	; (95bac <mw_debug_print_assert+0xd0>)
   95b36:	4798      	blx	r3
	mw_gl_string(&draw_info, 0, 0, "ASSERT FAILED");
   95b38:	4d1d      	ldr	r5, [pc, #116]	; (95bb0 <mw_debug_print_assert+0xd4>)
   95b3a:	4b1e      	ldr	r3, [pc, #120]	; (95bb4 <mw_debug_print_assert+0xd8>)
   95b3c:	4622      	mov	r2, r4
   95b3e:	4621      	mov	r1, r4
	mw_gl_string(&draw_info, 0, (int16_t)mw_gl_get_font_height() + 1, function_name);
   95b40:	4e1d      	ldr	r6, [pc, #116]	; (95bb8 <mw_debug_print_assert+0xdc>)
	mw_gl_string(&draw_info, 0, 0, "ASSERT FAILED");
   95b42:	a805      	add	r0, sp, #20
   95b44:	47a8      	blx	r5
	mw_gl_string(&draw_info, 0, (int16_t)mw_gl_get_font_height() + 1, function_name);
   95b46:	47b0      	blx	r6
   95b48:	1c42      	adds	r2, r0, #1
   95b4a:	b212      	sxth	r2, r2
   95b4c:	464b      	mov	r3, r9
   95b4e:	4621      	mov	r1, r4
   95b50:	a805      	add	r0, sp, #20
   95b52:	47a8      	blx	r5
	(void)mw_util_safe_itoa(line_number, number_buffer, 15, 10, false, 0, ' ');
   95b54:	2320      	movs	r3, #32
   95b56:	220f      	movs	r2, #15
   95b58:	eb0d 0103 	add.w	r1, sp, r3
   95b5c:	4640      	mov	r0, r8
   95b5e:	9302      	str	r3, [sp, #8]
   95b60:	9401      	str	r4, [sp, #4]
   95b62:	230a      	movs	r3, #10
   95b64:	9400      	str	r4, [sp, #0]
   95b66:	f8df 8054 	ldr.w	r8, [pc, #84]	; 95bbc <mw_debug_print_assert+0xe0>
   95b6a:	47c0      	blx	r8
	mw_gl_string(&draw_info, 0, 2 * ((int16_t)mw_gl_get_font_height() + 1), number_buffer);
   95b6c:	47b0      	blx	r6
   95b6e:	1c42      	adds	r2, r0, #1
   95b70:	0052      	lsls	r2, r2, #1
   95b72:	b212      	sxth	r2, r2
   95b74:	ab08      	add	r3, sp, #32
   95b76:	4621      	mov	r1, r4
   95b78:	a805      	add	r0, sp, #20
   95b7a:	47a8      	blx	r5
	mw_gl_string(&draw_info, 0, 3 * ((int16_t)mw_gl_get_font_height() + 1), message);
   95b7c:	47b0      	blx	r6
   95b7e:	3001      	adds	r0, #1
   95b80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   95b84:	b202      	sxth	r2, r0
   95b86:	463b      	mov	r3, r7
   95b88:	4621      	mov	r1, r4
   95b8a:	a805      	add	r0, sp, #20
   95b8c:	47a8      	blx	r5
   95b8e:	e7fe      	b.n	95b8e <mw_debug_print_assert+0xb2>
   95b90:	00086e2d 	.word	0x00086e2d
   95b94:	00086e31 	.word	0x00086e31
   95b98:	00086f31 	.word	0x00086f31
   95b9c:	00ffff00 	.word	0x00ffff00
   95ba0:	000846b1 	.word	0x000846b1
   95ba4:	00084709 	.word	0x00084709
   95ba8:	00084715 	.word	0x00084715
   95bac:	00084745 	.word	0x00084745
   95bb0:	00085f1d 	.word	0x00085f1d
   95bb4:	000ab980 	.word	0x000ab980
   95bb8:	000847a9 	.word	0x000847a9
   95bbc:	0009723d 	.word	0x0009723d

00095bc0 <mw_message_queue_insert>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

bool mw_message_queue_insert(const mw_message_t *incoming_message)
{
   95bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* check pointer */
	MW_ASSERT(incoming_message != (void*)0, "Null pointer argument");
   95bc2:	4607      	mov	r7, r0

	/* check for space in the queue */
	MW_ASSERT(items_in_queue < MW_MESSAGE_QUEUE_SIZE, "Message queue full");
   95bc4:	4e1c      	ldr	r6, [pc, #112]	; (95c38 <mw_message_queue_insert+0x78>)
	MW_ASSERT(incoming_message != (void*)0, "Null pointer argument");
   95bc6:	3000      	adds	r0, #0
   95bc8:	bf18      	it	ne
   95bca:	2001      	movne	r0, #1
   95bcc:	4c1b      	ldr	r4, [pc, #108]	; (95c3c <mw_message_queue_insert+0x7c>)
   95bce:	4b1c      	ldr	r3, [pc, #112]	; (95c40 <mw_message_queue_insert+0x80>)
   95bd0:	224c      	movs	r2, #76	; 0x4c
   95bd2:	491c      	ldr	r1, [pc, #112]	; (95c44 <mw_message_queue_insert+0x84>)
   95bd4:	47a0      	blx	r4
	MW_ASSERT(items_in_queue < MW_MESSAGE_QUEUE_SIZE, "Message queue full");
   95bd6:	7830      	ldrb	r0, [r6, #0]
   95bd8:	4b1b      	ldr	r3, [pc, #108]	; (95c48 <mw_message_queue_insert+0x88>)
   95bda:	2863      	cmp	r0, #99	; 0x63
   95bdc:	bf8c      	ite	hi
   95bde:	2000      	movhi	r0, #0
   95be0:	2001      	movls	r0, #1
   95be2:	224f      	movs	r2, #79	; 0x4f
   95be4:	4917      	ldr	r1, [pc, #92]	; (95c44 <mw_message_queue_insert+0x84>)
   95be6:	47a0      	blx	r4

	/* there's space so copy in the new message */
	(void)memcpy((&message_queue[next_write_slot]), (incoming_message), (sizeof(mw_message_t)));
   95be8:	f8df e068 	ldr.w	lr, [pc, #104]	; 95c54 <mw_message_queue_insert+0x94>
   95bec:	4c17      	ldr	r4, [pc, #92]	; (95c4c <mw_message_queue_insert+0x8c>)
   95bee:	f89e 5000 	ldrb.w	r5, [lr]
   95bf2:	68fb      	ldr	r3, [r7, #12]
   95bf4:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
	next_write_slot++;
   95bf8:	3501      	adds	r5, #1
	(void)memcpy((&message_queue[next_write_slot]), (incoming_message), (sizeof(mw_message_t)));
   95bfa:	6838      	ldr	r0, [r7, #0]
   95bfc:	6879      	ldr	r1, [r7, #4]
   95bfe:	68ba      	ldr	r2, [r7, #8]
	next_write_slot++;
   95c00:	b2ed      	uxtb	r5, r5
	if (next_write_slot == MW_MESSAGE_QUEUE_SIZE)
   95c02:	2d64      	cmp	r5, #100	; 0x64
	(void)memcpy((&message_queue[next_write_slot]), (incoming_message), (sizeof(mw_message_t)));
   95c04:	eb04 048c 	add.w	r4, r4, ip, lsl #2
   95c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	{
		next_write_slot = 0U;
   95c0a:	bf08      	it	eq
   95c0c:	2300      	moveq	r3, #0

	items_in_queue++;

	/* keep a record of how full the queue becomes in debug mode */
#ifndef NDEBUG
	if (items_in_queue > max_queue_usage)
   95c0e:	4a10      	ldr	r2, [pc, #64]	; (95c50 <mw_message_queue_insert+0x90>)
		next_write_slot = 0U;
   95c10:	bf08      	it	eq
   95c12:	f88e 3000 	strbeq.w	r3, [lr]
	items_in_queue++;
   95c16:	7833      	ldrb	r3, [r6, #0]
	if (items_in_queue > max_queue_usage)
   95c18:	7811      	ldrb	r1, [r2, #0]
	items_in_queue++;
   95c1a:	f103 0301 	add.w	r3, r3, #1
   95c1e:	b2db      	uxtb	r3, r3
	(void)memcpy((&message_queue[next_write_slot]), (incoming_message), (sizeof(mw_message_t)));
   95c20:	6938      	ldr	r0, [r7, #16]
	next_write_slot++;
   95c22:	bf18      	it	ne
   95c24:	f88e 5000 	strbne.w	r5, [lr]
	if (items_in_queue > max_queue_usage)
   95c28:	4299      	cmp	r1, r3
	(void)memcpy((&message_queue[next_write_slot]), (incoming_message), (sizeof(mw_message_t)));
   95c2a:	6020      	str	r0, [r4, #0]
	items_in_queue++;
   95c2c:	7033      	strb	r3, [r6, #0]
	{
		max_queue_usage = items_in_queue;
   95c2e:	bf38      	it	cc
   95c30:	7013      	strbcc	r3, [r2, #0]
	}
#endif

	return (true);
}
   95c32:	2001      	movs	r0, #1
   95c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   95c36:	bf00      	nop
   95c38:	20071fb8 	.word	0x20071fb8
   95c3c:	00095add 	.word	0x00095add
   95c40:	000a6618 	.word	0x000a6618
   95c44:	000ab990 	.word	0x000ab990
   95c48:	000aba18 	.word	0x000aba18
   95c4c:	20071fbc 	.word	0x20071fbc
   95c50:	20071fb9 	.word	0x20071fb9
   95c54:	2007278d 	.word	0x2007278d

00095c58 <mw_message_queue_remove>:

bool mw_message_queue_remove(mw_message_t *outgoing_message)
{
   95c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MW_ASSERT(outgoing_message != (void*)0, "Null pointer argument");
   95c5a:	4607      	mov	r7, r0
   95c5c:	3000      	adds	r0, #0
   95c5e:	4c17      	ldr	r4, [pc, #92]	; (95cbc <mw_message_queue_remove+0x64>)
   95c60:	4b17      	ldr	r3, [pc, #92]	; (95cc0 <mw_message_queue_remove+0x68>)
   95c62:	bf18      	it	ne
   95c64:	2001      	movne	r0, #1
   95c66:	2268      	movs	r2, #104	; 0x68
   95c68:	4916      	ldr	r1, [pc, #88]	; (95cc4 <mw_message_queue_remove+0x6c>)
   95c6a:	47a0      	blx	r4

	/* check if there is anything in the queue */
	if (items_in_queue == 0U)
   95c6c:	f8df e05c 	ldr.w	lr, [pc, #92]	; 95ccc <mw_message_queue_remove+0x74>
   95c70:	f89e 4000 	ldrb.w	r4, [lr]
   95c74:	b90c      	cbnz	r4, 95c7a <mw_message_queue_remove+0x22>
	{
		return (false);
   95c76:	4620      	mov	r0, r4
	}

	items_in_queue--;

	return (true);
}
   95c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)memcpy((outgoing_message), (&message_queue[next_read_slot]), (sizeof(mw_message_t)));
   95c7a:	f8df c054 	ldr.w	ip, [pc, #84]	; 95cd0 <mw_message_queue_remove+0x78>
   95c7e:	4d12      	ldr	r5, [pc, #72]	; (95cc8 <mw_message_queue_remove+0x70>)
   95c80:	f89c 6000 	ldrb.w	r6, [ip]
	items_in_queue--;
   95c84:	3c01      	subs	r4, #1
	(void)memcpy((outgoing_message), (&message_queue[next_read_slot]), (sizeof(mw_message_t)));
   95c86:	eb06 0386 	add.w	r3, r6, r6, lsl #2
	next_read_slot++;
   95c8a:	3601      	adds	r6, #1
   95c8c:	b2f6      	uxtb	r6, r6
	if (next_read_slot == MW_MESSAGE_QUEUE_SIZE)
   95c8e:	2e64      	cmp	r6, #100	; 0x64
	(void)memcpy((outgoing_message), (&message_queue[next_read_slot]), (sizeof(mw_message_t)));
   95c90:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   95c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   95c96:	60fb      	str	r3, [r7, #12]
		next_read_slot = 0U;
   95c98:	bf08      	it	eq
   95c9a:	2300      	moveq	r3, #0
	(void)memcpy((outgoing_message), (&message_queue[next_read_slot]), (sizeof(mw_message_t)));
   95c9c:	6038      	str	r0, [r7, #0]
   95c9e:	6079      	str	r1, [r7, #4]
   95ca0:	60ba      	str	r2, [r7, #8]
   95ca2:	6828      	ldr	r0, [r5, #0]
	next_read_slot++;
   95ca4:	bf18      	it	ne
   95ca6:	f88c 6000 	strbne.w	r6, [ip]
	(void)memcpy((outgoing_message), (&message_queue[next_read_slot]), (sizeof(mw_message_t)));
   95caa:	6138      	str	r0, [r7, #16]
		next_read_slot = 0U;
   95cac:	bf08      	it	eq
   95cae:	f88c 3000 	strbeq.w	r3, [ip]
	items_in_queue--;
   95cb2:	f88e 4000 	strb.w	r4, [lr]
	return (true);
   95cb6:	2001      	movs	r0, #1
   95cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   95cba:	bf00      	nop
   95cbc:	00095add 	.word	0x00095add
   95cc0:	000a6618 	.word	0x000a6618
   95cc4:	000ab9a8 	.word	0x000ab9a8
   95cc8:	20071fbc 	.word	0x20071fbc
   95ccc:	20071fb8 	.word	0x20071fb8
   95cd0:	2007278c 	.word	0x2007278c

00095cd4 <mw_message_queue_get_ref_to_item_at_position>:

mw_message_t *mw_message_queue_get_ref_to_item_at_position(uint8_t position)
{
   95cd4:	b538      	push	{r3, r4, r5, lr}
   95cd6:	4604      	mov	r4, r0
	MW_ASSERT(position < MW_MESSAGE_QUEUE_SIZE, "Out of bounds message queue position");
   95cd8:	2863      	cmp	r0, #99	; 0x63
   95cda:	bf8c      	ite	hi
   95cdc:	2000      	movhi	r0, #0
   95cde:	2001      	movls	r0, #1
   95ce0:	4b05      	ldr	r3, [pc, #20]	; (95cf8 <mw_message_queue_get_ref_to_item_at_position+0x24>)
   95ce2:	227f      	movs	r2, #127	; 0x7f
   95ce4:	4905      	ldr	r1, [pc, #20]	; (95cfc <mw_message_queue_get_ref_to_item_at_position+0x28>)
   95ce6:	4d06      	ldr	r5, [pc, #24]	; (95d00 <mw_message_queue_get_ref_to_item_at_position+0x2c>)
   95ce8:	47a8      	blx	r5

	return (&message_queue[position]);
   95cea:	4806      	ldr	r0, [pc, #24]	; (95d04 <mw_message_queue_get_ref_to_item_at_position+0x30>)
   95cec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
}
   95cf0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   95cf4:	bd38      	pop	{r3, r4, r5, pc}
   95cf6:	bf00      	nop
   95cf8:	000ab9f0 	.word	0x000ab9f0
   95cfc:	000ab9c0 	.word	0x000ab9c0
   95d00:	00095add 	.word	0x00095add
   95d04:	20071fbc 	.word	0x20071fbc

00095d08 <mw_settings_load>:
*** GLOBAL FUNCTIONS ***
***********************/

void mw_settings_load(void)
{
	mw_hal_non_vol_load((uint8_t *)&settings, (uint16_t)sizeof(settings));
   95d08:	2124      	movs	r1, #36	; 0x24
   95d0a:	4801      	ldr	r0, [pc, #4]	; (95d10 <mw_settings_load+0x8>)
   95d0c:	4b01      	ldr	r3, [pc, #4]	; (95d14 <mw_settings_load+0xc>)
   95d0e:	4718      	bx	r3
   95d10:	20072790 	.word	0x20072790
   95d14:	00087825 	.word	0x00087825

00095d18 <mw_settings_save>:
}

void mw_settings_save(void)
{
	mw_hal_non_vol_save((uint8_t *)&settings, (uint16_t)sizeof(settings));
   95d18:	2124      	movs	r1, #36	; 0x24
   95d1a:	4801      	ldr	r0, [pc, #4]	; (95d20 <mw_settings_save+0x8>)
   95d1c:	4b01      	ldr	r3, [pc, #4]	; (95d24 <mw_settings_save+0xc>)
   95d1e:	4718      	bx	r3
   95d20:	20072790 	.word	0x20072790
   95d24:	00087835 	.word	0x00087835

00095d28 <mw_settings_is_initialised>:
}

bool mw_settings_is_initialised(void)
{
	return (settings.init_flag == SETTINGS_INIT_FLAG);
   95d28:	4a03      	ldr	r2, [pc, #12]	; (95d38 <mw_settings_is_initialised+0x10>)
   95d2a:	4b04      	ldr	r3, [pc, #16]	; (95d3c <mw_settings_is_initialised+0x14>)
   95d2c:	6810      	ldr	r0, [r2, #0]
}
   95d2e:	1ac0      	subs	r0, r0, r3
   95d30:	fab0 f080 	clz	r0, r0
   95d34:	0940      	lsrs	r0, r0, #5
   95d36:	4770      	bx	lr
   95d38:	20072790 	.word	0x20072790
   95d3c:	badd10de 	.word	0xbadd10de

00095d40 <mw_settings_set_to_defaults>:

void mw_settings_set_to_defaults(void)
{
	settings.init_flag = SETTINGS_INIT_FLAG;
	settings.is_calibrated = false;
   95d40:	2100      	movs	r1, #0
	settings.init_flag = SETTINGS_INIT_FLAG;
   95d42:	4b02      	ldr	r3, [pc, #8]	; (95d4c <mw_settings_set_to_defaults+0xc>)
   95d44:	4a02      	ldr	r2, [pc, #8]	; (95d50 <mw_settings_set_to_defaults+0x10>)
	settings.is_calibrated = false;
   95d46:	7119      	strb	r1, [r3, #4]
	settings.init_flag = SETTINGS_INIT_FLAG;
   95d48:	601a      	str	r2, [r3, #0]
   95d4a:	4770      	bx	lr
   95d4c:	20072790 	.word	0x20072790
   95d50:	badd10de 	.word	0xbadd10de

00095d54 <mw_settings_is_calibrated>:
}

bool mw_settings_is_calibrated(void)
{
	return (settings.is_calibrated);
   95d54:	4b01      	ldr	r3, [pc, #4]	; (95d5c <mw_settings_is_calibrated+0x8>)
}
   95d56:	7918      	ldrb	r0, [r3, #4]
   95d58:	4770      	bx	lr
   95d5a:	bf00      	nop
   95d5c:	20072790 	.word	0x20072790

00095d60 <mw_settings_set_calibrated>:

void mw_settings_set_calibrated(bool calibrated)
{
	settings.is_calibrated = calibrated;
   95d60:	4b01      	ldr	r3, [pc, #4]	; (95d68 <mw_settings_set_calibrated+0x8>)
   95d62:	7118      	strb	r0, [r3, #4]
   95d64:	4770      	bx	lr
   95d66:	bf00      	nop
   95d68:	20072790 	.word	0x20072790

00095d6c <mw_settings_get_calibration_matrix>:
}

MATRIX_CAL *mw_settings_get_calibration_matrix(void)
{
	return (&settings.calibration_matrix);
}
   95d6c:	4800      	ldr	r0, [pc, #0]	; (95d70 <mw_settings_get_calibration_matrix+0x4>)
   95d6e:	4770      	bx	lr
   95d70:	20072798 	.word	0x20072798

00095d74 <mw_settings_set_calibration_matrix>:

void mw_settings_set_calibration_matrix(const MATRIX_CAL *new_calibration_matrix)
{
   95d74:	b538      	push	{r3, r4, r5, lr}
	MW_ASSERT(new_calibration_matrix != (void*)0, "Null pointer argument");
   95d76:	4605      	mov	r5, r0
   95d78:	3000      	adds	r0, #0
   95d7a:	4b09      	ldr	r3, [pc, #36]	; (95da0 <mw_settings_set_calibration_matrix+0x2c>)
   95d7c:	bf18      	it	ne
   95d7e:	2001      	movne	r0, #1
   95d80:	2275      	movs	r2, #117	; 0x75
   95d82:	4908      	ldr	r1, [pc, #32]	; (95da4 <mw_settings_set_calibration_matrix+0x30>)
   95d84:	4c08      	ldr	r4, [pc, #32]	; (95da8 <mw_settings_set_calibration_matrix+0x34>)
   95d86:	47a0      	blx	r4

	(void)memcpy((&settings.calibration_matrix), (new_calibration_matrix), (sizeof(MATRIX_CAL)));
   95d88:	6828      	ldr	r0, [r5, #0]
   95d8a:	6869      	ldr	r1, [r5, #4]
   95d8c:	68aa      	ldr	r2, [r5, #8]
   95d8e:	68eb      	ldr	r3, [r5, #12]
   95d90:	4c06      	ldr	r4, [pc, #24]	; (95dac <mw_settings_set_calibration_matrix+0x38>)
   95d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   95d94:	6928      	ldr	r0, [r5, #16]
   95d96:	6969      	ldr	r1, [r5, #20]
   95d98:	69aa      	ldr	r2, [r5, #24]
   95d9a:	c407      	stmia	r4!, {r0, r1, r2}
   95d9c:	bd38      	pop	{r3, r4, r5, pc}
   95d9e:	bf00      	nop
   95da0:	000a6618 	.word	0x000a6618
   95da4:	000aba2c 	.word	0x000aba2c
   95da8:	00095add 	.word	0x00095add
   95dac:	20072798 	.word	0x20072798

00095db0 <draw_cross>:
 * @param X coordinate of centre of cross 
 * @param Y y coordinate of centre of cross
 * @param length Length of each cross arm
 */
static void draw_cross(int16_t x, int16_t y, int16_t length)
{
   95db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_gl_draw_info_t draw_info_root = {0};
   95db4:	2400      	movs	r4, #0
{
   95db6:	b087      	sub	sp, #28
	draw_info_root.clip_rect.width = MW_ROOT_WIDTH;
   95db8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 95e78 <draw_cross+0xc8>
{
   95dbc:	4615      	mov	r5, r2
   95dbe:	460e      	mov	r6, r1
   95dc0:	4682      	mov	sl, r0
	mw_gl_draw_info_t draw_info_root = {0};
   95dc2:	9403      	str	r4, [sp, #12]
   95dc4:	9404      	str	r4, [sp, #16]
   95dc6:	9405      	str	r4, [sp, #20]
	draw_info_root.clip_rect.width = MW_ROOT_WIDTH;
   95dc8:	47c0      	blx	r8
	draw_info_root.clip_rect.height = MW_ROOT_HEIGHT;
   95dca:	4f24      	ldr	r7, [pc, #144]	; (95e5c <draw_cross+0xac>)
	draw_info_root.clip_rect.width = MW_ROOT_WIDTH;
   95dcc:	f8ad 0014 	strh.w	r0, [sp, #20]
	draw_info_root.clip_rect.height = MW_ROOT_HEIGHT;
   95dd0:	47b8      	blx	r7
   95dd2:	f8ad 0016 	strh.w	r0, [sp, #22]

	mw_hal_lcd_filled_rectangle(0, 0, MW_ROOT_WIDTH, MW_ROOT_HEIGHT, MW_HAL_LCD_WHITE);
   95dd6:	47c0      	blx	r8
   95dd8:	4681      	mov	r9, r0
   95dda:	47b8      	blx	r7
   95ddc:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
   95de0:	4603      	mov	r3, r0
   95de2:	f8cd e000 	str.w	lr, [sp]
   95de6:	464a      	mov	r2, r9
   95de8:	4621      	mov	r1, r4
   95dea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 95e7c <draw_cross+0xcc>
   95dee:	4620      	mov	r0, r4
   95df0:	47c8      	blx	r9
	mw_hal_lcd_filled_rectangle(x - length / 2, y, length, 1, MW_HAL_LCD_BLACK);
   95df2:	eb05 71d5 	add.w	r1, r5, r5, lsr #31
   95df6:	f3c1 0b4f 	ubfx	fp, r1, #1, #16
   95dfa:	ebaa 000b 	sub.w	r0, sl, fp
   95dfe:	9400      	str	r4, [sp, #0]
   95e00:	462a      	mov	r2, r5
   95e02:	4631      	mov	r1, r6
   95e04:	b200      	sxth	r0, r0
   95e06:	2301      	movs	r3, #1
   95e08:	47c8      	blx	r9
	mw_hal_lcd_filled_rectangle(x, y - length / 2, 1, length, MW_HAL_LCD_BLACK);
   95e0a:	eba6 010b 	sub.w	r1, r6, fp
   95e0e:	b209      	sxth	r1, r1
   95e10:	2201      	movs	r2, #1
   95e12:	9400      	str	r4, [sp, #0]
   95e14:	462b      	mov	r3, r5
   95e16:	4650      	mov	r0, sl
   95e18:	47c8      	blx	r9
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   95e1a:	4620      	mov	r0, r4
   95e1c:	4b10      	ldr	r3, [pc, #64]	; (95e60 <draw_cross+0xb0>)
   95e1e:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   95e20:	4620      	mov	r0, r4
   95e22:	4b10      	ldr	r3, [pc, #64]	; (95e64 <draw_cross+0xb4>)
   95e24:	4798      	blx	r3
	mw_gl_set_font(MW_GL_TITLE_FONT);
   95e26:	4b10      	ldr	r3, [pc, #64]	; (95e68 <draw_cross+0xb8>)
   95e28:	2005      	movs	r0, #5
   95e2a:	4798      	blx	r3
	mw_gl_string(&draw_info_root,
			(MW_ROOT_WIDTH - (int16_t)mw_gl_get_string_width_pixels(MW_CALIBRATE_TEXT)) / 2,
   95e2c:	47c0      	blx	r8
   95e2e:	4d0f      	ldr	r5, [pc, #60]	; (95e6c <draw_cross+0xbc>)
   95e30:	4604      	mov	r4, r0
   95e32:	4b0f      	ldr	r3, [pc, #60]	; (95e70 <draw_cross+0xc0>)
   95e34:	4628      	mov	r0, r5
   95e36:	4798      	blx	r3
   95e38:	4606      	mov	r6, r0
			MW_ROOT_HEIGHT / 2,
   95e3a:	47b8      	blx	r7
			(MW_ROOT_WIDTH - (int16_t)mw_gl_get_string_width_pixels(MW_CALIBRATE_TEXT)) / 2,
   95e3c:	1ba1      	subs	r1, r4, r6
	mw_gl_string(&draw_info_root,
   95e3e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
			(MW_ROOT_WIDTH - (int16_t)mw_gl_get_string_width_pixels(MW_CALIBRATE_TEXT)) / 2,
   95e42:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
	mw_gl_string(&draw_info_root,
   95e46:	f340 024f 	sbfx	r2, r0, #1, #16
   95e4a:	f341 014f 	sbfx	r1, r1, #1, #16
   95e4e:	462b      	mov	r3, r5
   95e50:	a803      	add	r0, sp, #12
   95e52:	4c08      	ldr	r4, [pc, #32]	; (95e74 <draw_cross+0xc4>)
   95e54:	47a0      	blx	r4
			MW_CALIBRATE_TEXT);
}
   95e56:	b007      	add	sp, #28
   95e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   95e5c:	00086e31 	.word	0x00086e31
   95e60:	000846b1 	.word	0x000846b1
   95e64:	00084709 	.word	0x00084709
   95e68:	00084715 	.word	0x00084715
   95e6c:	000aba80 	.word	0x000aba80
   95e70:	00086165 	.word	0x00086165
   95e74:	00085f1d 	.word	0x00085f1d
   95e78:	00086e2d 	.word	0x00086e2d
   95e7c:	00086f31 	.word	0x00086f31

00095e80 <mw_touch_get_display_touch>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

mw_hal_touch_state_t mw_touch_get_display_touch(int16_t* x, int16_t* y)
{
   95e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   95e82:	460d      	mov	r5, r1
	POINT_T raw_point;
	POINT_T display_point;
	uint16_t raw_x;
	uint16_t raw_y;

	MW_ASSERT(x != (void*)0, "Null pointer argument");
   95e84:	4606      	mov	r6, r0
   95e86:	3000      	adds	r0, #0
{
   95e88:	b087      	sub	sp, #28
	MW_ASSERT(x != (void*)0, "Null pointer argument");
   95e8a:	bf18      	it	ne
   95e8c:	2001      	movne	r0, #1
   95e8e:	4b21      	ldr	r3, [pc, #132]	; (95f14 <mw_touch_get_display_touch+0x94>)
   95e90:	2265      	movs	r2, #101	; 0x65
   95e92:	4921      	ldr	r1, [pc, #132]	; (95f18 <mw_touch_get_display_touch+0x98>)
   95e94:	4c21      	ldr	r4, [pc, #132]	; (95f1c <mw_touch_get_display_touch+0x9c>)
   95e96:	47a0      	blx	r4
	MW_ASSERT(y != (void*)0, "Null pointer argument");
   95e98:	1c28      	adds	r0, r5, #0
   95e9a:	bf18      	it	ne
   95e9c:	2001      	movne	r0, #1
   95e9e:	4b1d      	ldr	r3, [pc, #116]	; (95f14 <mw_touch_get_display_touch+0x94>)
   95ea0:	491d      	ldr	r1, [pc, #116]	; (95f18 <mw_touch_get_display_touch+0x98>)
   95ea2:	2266      	movs	r2, #102	; 0x66
   95ea4:	47a0      	blx	r4

	/* read touch point and check if valid */
	if (!mw_hal_touch_get_point(&raw_x, &raw_y))
   95ea6:	f10d 0106 	add.w	r1, sp, #6
   95eaa:	a801      	add	r0, sp, #4
   95eac:	4b1c      	ldr	r3, [pc, #112]	; (95f20 <mw_touch_get_display_touch+0xa0>)
   95eae:	4798      	blx	r3
   95eb0:	b910      	cbnz	r0, 95eb8 <mw_touch_get_display_touch+0x38>
	{
		/* no valid point to read */
		return (MW_HAL_TOUCH_STATE_UP);
   95eb2:	2001      	movs	r0, #1

	*x = (int16_t)display_point.x;
	*y = (int16_t)display_point.y;

	return (MW_HAL_TOUCH_STATE_DOWN);
}
   95eb4:	b007      	add	sp, #28
   95eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	raw_point.x = (INT_32)raw_x;
   95eb8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	raw_point.y = (INT_32)raw_y;
   95ebc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	(void)getDisplayPoint(&display_point, &raw_point, mw_settings_get_calibration_matrix());
   95ec0:	4b18      	ldr	r3, [pc, #96]	; (95f24 <mw_touch_get_display_touch+0xa4>)
	raw_point.x = (INT_32)raw_x;
   95ec2:	9102      	str	r1, [sp, #8]
	raw_point.y = (INT_32)raw_y;
   95ec4:	9203      	str	r2, [sp, #12]
	(void)getDisplayPoint(&display_point, &raw_point, mw_settings_get_calibration_matrix());
   95ec6:	4798      	blx	r3
	if (display_point.x >= (INT_32)mw_hal_lcd_get_display_width())
   95ec8:	4c17      	ldr	r4, [pc, #92]	; (95f28 <mw_touch_get_display_touch+0xa8>)
	(void)getDisplayPoint(&display_point, &raw_point, mw_settings_get_calibration_matrix());
   95eca:	4602      	mov	r2, r0
   95ecc:	a902      	add	r1, sp, #8
   95ece:	4b17      	ldr	r3, [pc, #92]	; (95f2c <mw_touch_get_display_touch+0xac>)
   95ed0:	a804      	add	r0, sp, #16
   95ed2:	4798      	blx	r3
	if (display_point.x >= (INT_32)mw_hal_lcd_get_display_width())
   95ed4:	9f04      	ldr	r7, [sp, #16]
   95ed6:	47a0      	blx	r4
   95ed8:	4287      	cmp	r7, r0
   95eda:	da0f      	bge.n	95efc <mw_touch_get_display_touch+0x7c>
	if (display_point.y >= (INT_32)mw_hal_lcd_get_display_height())
   95edc:	4c14      	ldr	r4, [pc, #80]	; (95f30 <mw_touch_get_display_touch+0xb0>)
   95ede:	9f05      	ldr	r7, [sp, #20]
   95ee0:	47a0      	blx	r4
   95ee2:	4287      	cmp	r7, r0
   95ee4:	da12      	bge.n	95f0c <mw_touch_get_display_touch+0x8c>
   95ee6:	9b05      	ldr	r3, [sp, #20]
	return (MW_HAL_TOUCH_STATE_DOWN);
   95ee8:	2000      	movs	r0, #0
	*x = (int16_t)display_point.x;
   95eea:	9a04      	ldr	r2, [sp, #16]
	*y = (int16_t)display_point.y;
   95eec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	*x = (int16_t)display_point.x;
   95ef0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   95ef4:	8032      	strh	r2, [r6, #0]
	*y = (int16_t)display_point.y;
   95ef6:	802b      	strh	r3, [r5, #0]
}
   95ef8:	b007      	add	sp, #28
   95efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		display_point.x = (INT_32)mw_hal_lcd_get_display_width() - 1;
   95efc:	47a0      	blx	r4
	if (display_point.y >= (INT_32)mw_hal_lcd_get_display_height())
   95efe:	4c0c      	ldr	r4, [pc, #48]	; (95f30 <mw_touch_get_display_touch+0xb0>)
		display_point.x = (INT_32)mw_hal_lcd_get_display_width() - 1;
   95f00:	3801      	subs	r0, #1
	if (display_point.y >= (INT_32)mw_hal_lcd_get_display_height())
   95f02:	9f05      	ldr	r7, [sp, #20]
		display_point.x = (INT_32)mw_hal_lcd_get_display_width() - 1;
   95f04:	9004      	str	r0, [sp, #16]
	if (display_point.y >= (INT_32)mw_hal_lcd_get_display_height())
   95f06:	47a0      	blx	r4
   95f08:	4287      	cmp	r7, r0
   95f0a:	dbec      	blt.n	95ee6 <mw_touch_get_display_touch+0x66>
		display_point.y = (INT_32)mw_hal_lcd_get_display_height() - 1;
   95f0c:	47a0      	blx	r4
   95f0e:	1e43      	subs	r3, r0, #1
   95f10:	e7ea      	b.n	95ee8 <mw_touch_get_display_touch+0x68>
   95f12:	bf00      	nop
   95f14:	000a6618 	.word	0x000a6618
   95f18:	000aba50 	.word	0x000aba50
   95f1c:	00095add 	.word	0x00095add
   95f20:	00087985 	.word	0x00087985
   95f24:	00095d6d 	.word	0x00095d6d
   95f28:	00086e2d 	.word	0x00086e2d
   95f2c:	00081bf1 	.word	0x00081bf1
   95f30:	00086e31 	.word	0x00086e31

00095f34 <mw_touch_calibrate>:

void mw_touch_calibrate(MATRIX_CAL *matrix)
{
   95f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int16_t minimum_screen_dimension = MW_ROOT_WIDTH < MW_ROOT_HEIGHT ? MW_ROOT_WIDTH : MW_ROOT_HEIGHT;
   95f38:	4c3c      	ldr	r4, [pc, #240]	; (9602c <mw_touch_calibrate+0xf8>)
{
   95f3a:	b08e      	sub	sp, #56	; 0x38
   95f3c:	4680      	mov	r8, r0
	int16_t minimum_screen_dimension = MW_ROOT_WIDTH < MW_ROOT_HEIGHT ? MW_ROOT_WIDTH : MW_ROOT_HEIGHT;
   95f3e:	47a0      	blx	r4
   95f40:	4d3b      	ldr	r5, [pc, #236]	; (96030 <mw_touch_calibrate+0xfc>)
   95f42:	4606      	mov	r6, r0
   95f44:	47a8      	blx	r5
   95f46:	4286      	cmp	r6, r0
   95f48:	da6e      	bge.n	96028 <mw_touch_calibrate+0xf4>
   95f4a:	47a0      	blx	r4
	int16_t touch_cross_size = minimum_screen_dimension / 6;
   95f4c:	4e39      	ldr	r6, [pc, #228]	; (96034 <mw_touch_calibrate+0x100>)
	uint16_t y;

	MW_ASSERT(matrix != (void*)0, "Null pointer argument");

    /* first point */
	draw_cross((int16_t)display_points[0].x, (int16_t)display_points[0].y, touch_cross_size);
   95f4e:	4f3a      	ldr	r7, [pc, #232]	; (96038 <mw_touch_calibrate+0x104>)
	int16_t touch_cross_size = minimum_screen_dimension / 6;
   95f50:	fb86 3600 	smull	r3, r6, r6, r0
   95f54:	eba6 76e0 	sub.w	r6, r6, r0, asr #31
   95f58:	b236      	sxth	r6, r6
	display_points[0].x = touch_cross_size;
   95f5a:	9608      	str	r6, [sp, #32]
	display_points[0].y = touch_cross_size;
   95f5c:	9609      	str	r6, [sp, #36]	; 0x24
	display_points[1].x = MW_ROOT_WIDTH - (INT_32)touch_cross_size;
   95f5e:	47a0      	blx	r4
   95f60:	1b80      	subs	r0, r0, r6
   95f62:	900a      	str	r0, [sp, #40]	; 0x28
	display_points[1].y = touch_cross_size;
   95f64:	960b      	str	r6, [sp, #44]	; 0x2c
	display_points[2].x = MW_ROOT_WIDTH - (INT_32)touch_cross_size;
   95f66:	47a0      	blx	r4
   95f68:	1b80      	subs	r0, r0, r6
   95f6a:	900c      	str	r0, [sp, #48]	; 0x30
	display_points[2].y = MW_ROOT_HEIGHT - (INT_32)touch_cross_size;
   95f6c:	47a8      	blx	r5
   95f6e:	1b84      	subs	r4, r0, r6
	MW_ASSERT(matrix != (void*)0, "Null pointer argument");
   95f70:	f118 0000 	adds.w	r0, r8, #0
   95f74:	bf18      	it	ne
   95f76:	2001      	movne	r0, #1
   95f78:	4b30      	ldr	r3, [pc, #192]	; (9603c <mw_touch_calibrate+0x108>)
   95f7a:	22a7      	movs	r2, #167	; 0xa7
   95f7c:	4930      	ldr	r1, [pc, #192]	; (96040 <mw_touch_calibrate+0x10c>)
	display_points[2].y = MW_ROOT_HEIGHT - (INT_32)touch_cross_size;
   95f7e:	940d      	str	r4, [sp, #52]	; 0x34
	MW_ASSERT(matrix != (void*)0, "Null pointer argument");
   95f80:	4c30      	ldr	r4, [pc, #192]	; (96044 <mw_touch_calibrate+0x110>)
   95f82:	47a0      	blx	r4
	draw_cross((int16_t)display_points[0].x, (int16_t)display_points[0].y, touch_cross_size);
   95f84:	4632      	mov	r2, r6
   95f86:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
   95f8a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
   95f8e:	47b8      	blx	r7
   95f90:	4c2d      	ldr	r4, [pc, #180]	; (96048 <mw_touch_calibrate+0x114>)
	while (mw_hal_touch_get_state() == MW_HAL_TOUCH_STATE_UP)
   95f92:	47a0      	blx	r4
   95f94:	2801      	cmp	r0, #1
   95f96:	d0fc      	beq.n	95f92 <mw_touch_calibrate+0x5e>
   95f98:	4d2c      	ldr	r5, [pc, #176]	; (9604c <mw_touch_calibrate+0x118>)
	{
	}
	while (!mw_hal_touch_get_point(&x, &y))
   95f9a:	f10d 0106 	add.w	r1, sp, #6
   95f9e:	a801      	add	r0, sp, #4
   95fa0:	47a8      	blx	r5
   95fa2:	2800      	cmp	r0, #0
   95fa4:	d0f9      	beq.n	95f9a <mw_touch_calibrate+0x66>
	{
	}
	raw_points[0].x = (INT_32)x;
   95fa6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	raw_points[0].y = (INT_32)y;
   95faa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	raw_points[0].x = (INT_32)x;
   95fae:	9202      	str	r2, [sp, #8]
	raw_points[0].y = (INT_32)y;
   95fb0:	9303      	str	r3, [sp, #12]
	while (mw_hal_touch_get_state() == MW_HAL_TOUCH_STATE_DOWN)
   95fb2:	47a0      	blx	r4
   95fb4:	2800      	cmp	r0, #0
   95fb6:	d0fc      	beq.n	95fb2 <mw_touch_calibrate+0x7e>
	{
	}

    /* second point */
	draw_cross((int16_t)display_points[1].x, (int16_t)display_points[1].y, touch_cross_size);
   95fb8:	4632      	mov	r2, r6
   95fba:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   95fbe:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   95fc2:	47b8      	blx	r7
	while (mw_hal_touch_get_state() == MW_HAL_TOUCH_STATE_UP)
   95fc4:	47a0      	blx	r4
   95fc6:	2801      	cmp	r0, #1
   95fc8:	d0fc      	beq.n	95fc4 <mw_touch_calibrate+0x90>
	{
	}
	while (!mw_hal_touch_get_point(&x, &y))
   95fca:	f10d 0106 	add.w	r1, sp, #6
   95fce:	a801      	add	r0, sp, #4
   95fd0:	47a8      	blx	r5
   95fd2:	2800      	cmp	r0, #0
   95fd4:	d0f9      	beq.n	95fca <mw_touch_calibrate+0x96>
	{
	}
	raw_points[1].x = (INT_32)x;
   95fd6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	raw_points[1].y = (INT_32)y;
   95fda:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	raw_points[1].x = (INT_32)x;
   95fde:	9204      	str	r2, [sp, #16]
	raw_points[1].y = (INT_32)y;
   95fe0:	9305      	str	r3, [sp, #20]
	while (mw_hal_touch_get_state() == MW_HAL_TOUCH_STATE_DOWN)
   95fe2:	47a0      	blx	r4
   95fe4:	2800      	cmp	r0, #0
   95fe6:	d0fc      	beq.n	95fe2 <mw_touch_calibrate+0xae>
	{
	}

    /* third point */
	draw_cross((int16_t)display_points[2].x, (int16_t)display_points[2].y, touch_cross_size);
   95fe8:	4632      	mov	r2, r6
   95fea:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
   95fee:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
   95ff2:	47b8      	blx	r7
	while (mw_hal_touch_get_state() == MW_HAL_TOUCH_STATE_UP)
   95ff4:	47a0      	blx	r4
   95ff6:	2801      	cmp	r0, #1
   95ff8:	d0fc      	beq.n	95ff4 <mw_touch_calibrate+0xc0>
	{
	}
	while (!mw_hal_touch_get_point(&x, &y))
   95ffa:	f10d 0106 	add.w	r1, sp, #6
   95ffe:	a801      	add	r0, sp, #4
   96000:	47a8      	blx	r5
   96002:	2800      	cmp	r0, #0
   96004:	d0f9      	beq.n	95ffa <mw_touch_calibrate+0xc6>
	{
	}
	raw_points[2].x = (INT_32)x;
   96006:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	raw_points[2].y = (INT_32)y;
   9600a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	raw_points[2].x = (INT_32)x;
   9600e:	9206      	str	r2, [sp, #24]
	raw_points[2].y = (INT_32)y;
   96010:	9307      	str	r3, [sp, #28]
	while (mw_hal_touch_get_state() == MW_HAL_TOUCH_STATE_DOWN)
   96012:	47a0      	blx	r4
   96014:	2800      	cmp	r0, #0
   96016:	d0fc      	beq.n	96012 <mw_touch_calibrate+0xde>
	{
	}

	(void)setCalibrationMatrix(display_points, raw_points, matrix);
   96018:	4642      	mov	r2, r8
   9601a:	a902      	add	r1, sp, #8
   9601c:	a808      	add	r0, sp, #32
   9601e:	4b0c      	ldr	r3, [pc, #48]	; (96050 <mw_touch_calibrate+0x11c>)
   96020:	4798      	blx	r3
}
   96022:	b00e      	add	sp, #56	; 0x38
   96024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int16_t minimum_screen_dimension = MW_ROOT_WIDTH < MW_ROOT_HEIGHT ? MW_ROOT_WIDTH : MW_ROOT_HEIGHT;
   96028:	47a8      	blx	r5
   9602a:	e78f      	b.n	95f4c <mw_touch_calibrate+0x18>
   9602c:	00086e2d 	.word	0x00086e2d
   96030:	00086e31 	.word	0x00086e31
   96034:	2aaaaaab 	.word	0x2aaaaaab
   96038:	00095db1 	.word	0x00095db1
   9603c:	000a6618 	.word	0x000a6618
   96040:	000aba6c 	.word	0x000aba6c
   96044:	00095add 	.word	0x00095add
   96048:	00087975 	.word	0x00087975
   9604c:	00087985 	.word	0x00087985
   96050:	00081acd 	.word	0x00081acd

00096054 <mw_tree_container_init>:
		char *root_folder_path,
		uint8_t root_node_flags,
		uint8_t tree_flags,
		mw_tree_container_no_space_callback_t *no_space_callback,
		char folder_separator)
{
   96054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   96058:	b082      	sub	sp, #8
   9605a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   9605e:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
   96062:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	/* check pointers aren't null */
	if (tree == NULL || root_folder_path == NULL || nodes_array == NULL || nodes_array_size == 0U)
   96066:	b1a0      	cbz	r0, 96092 <mw_tree_container_init+0x3e>
   96068:	461d      	mov	r5, r3
   9606a:	b193      	cbz	r3, 96092 <mw_tree_container_init+0x3e>
   9606c:	b189      	cbz	r1, 96092 <mw_tree_container_init+0x3e>
   9606e:	b182      	cbz	r2, 96092 <mw_tree_container_init+0x3e>

		return MW_INVALID_HANDLE;
	}

	/* check tree flags */
	if (((tree_flags & MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY) == MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY && (tree_flags & MW_TREE_CONTAINER_FILE_SELECT_ONLY) == MW_TREE_CONTAINER_FILE_SELECT_ONLY) ||
   96070:	f007 0318 	and.w	r3, r7, #24
   96074:	2b18      	cmp	r3, #24
   96076:	d009      	beq.n	9608c <mw_tree_container_init+0x38>
   96078:	f007 030c 	and.w	r3, r7, #12
   9607c:	2b0c      	cmp	r3, #12
   9607e:	d005      	beq.n	9608c <mw_tree_container_init+0x38>
			((tree_flags & MW_TREE_CONTAINER_FOLDER_SELECT_ONLY) == MW_TREE_CONTAINER_FOLDER_SELECT_ONLY && (tree_flags & MW_TREE_CONTAINER_FILE_SELECT_ONLY) == MW_TREE_CONTAINER_FILE_SELECT_ONLY) ||
   96080:	07fb      	lsls	r3, r7, #31
   96082:	4604      	mov	r4, r0
   96084:	d50f      	bpl.n	960a6 <mw_tree_container_init+0x52>
			((tree_flags & MW_TREE_CONTAINER_NO_SELECT) == MW_TREE_CONTAINER_NO_SELECT && ((tree_flags & MW_TREE_CONTAINER_SINGLE_SELECT_ONLY) == MW_TREE_CONTAINER_SINGLE_SELECT_ONLY || (tree_flags & MW_TREE_CONTAINER_FOLDER_SELECT_ONLY) == MW_TREE_CONTAINER_FOLDER_SELECT_ONLY || (tree_flags & MW_TREE_CONTAINER_FILE_SELECT_ONLY) == MW_TREE_CONTAINER_FILE_SELECT_ONLY)))
   96086:	f017 0f0e 	tst.w	r7, #14
   9608a:	d00c      	beq.n	960a6 <mw_tree_container_init+0x52>
	{
		MW_ASSERT((bool)false, "Bad tree flags");
   9608c:	4b27      	ldr	r3, [pc, #156]	; (9612c <mw_tree_container_init+0xd8>)
   9608e:	22ba      	movs	r2, #186	; 0xba
   96090:	e001      	b.n	96096 <mw_tree_container_init+0x42>
		MW_ASSERT((bool)false, "Null pointer");
   96092:	22b0      	movs	r2, #176	; 0xb0
   96094:	4b26      	ldr	r3, [pc, #152]	; (96130 <mw_tree_container_init+0xdc>)
	}

	/* check that root folder label ends in folder separator character */
	if (root_folder_path[strlen(root_folder_path) - (size_t)1] != folder_separator)
	{
		MW_ASSERT((bool)false, "Bad format tree root folder path");
   96096:	2000      	movs	r0, #0
   96098:	4926      	ldr	r1, [pc, #152]	; (96134 <mw_tree_container_init+0xe0>)
   9609a:	4c27      	ldr	r4, [pc, #156]	; (96138 <mw_tree_container_init+0xe4>)
   9609c:	47a0      	blx	r4

		return MW_INVALID_HANDLE;
   9609e:	2000      	movs	r0, #0
	tree->root_folder_label[strlen(tree->root_folder_label) - (size_t)1] = '\0';

	mw_tree_container_empty(tree);

	return tree->nodes_array[ROOT_FOLDER_ID].handle;
}
   960a0:	b002      	add	sp, #8
   960a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (strlen(root_folder_path) < (size_t)1)
   960a6:	782e      	ldrb	r6, [r5, #0]
   960a8:	2e00      	cmp	r6, #0
   960aa:	d03b      	beq.n	96124 <mw_tree_container_init+0xd0>
	if (root_folder_path[strlen(root_folder_path) - (size_t)1] != folder_separator)
   960ac:	4628      	mov	r0, r5
   960ae:	4e23      	ldr	r6, [pc, #140]	; (9613c <mw_tree_container_init+0xe8>)
   960b0:	e88d 0006 	stmia.w	sp, {r1, r2}
   960b4:	47b0      	blx	r6
   960b6:	e89d 0006 	ldmia.w	sp, {r1, r2}
   960ba:	4428      	add	r0, r5
   960bc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   960c0:	4543      	cmp	r3, r8
   960c2:	d002      	beq.n	960ca <mw_tree_container_init+0x76>
		MW_ASSERT((bool)false, "Bad format tree root folder path");
   960c4:	4b1e      	ldr	r3, [pc, #120]	; (96140 <mw_tree_container_init+0xec>)
   960c6:	22ca      	movs	r2, #202	; 0xca
   960c8:	e7e5      	b.n	96096 <mw_tree_container_init+0x42>
	tree->folder_separator[1] = '\0';
   960ca:	f04f 0a00 	mov.w	sl, #0
	tree->nodes_array[ROOT_FOLDER_ID].node_flags = MW_TREE_CONTAINER_NODE_IS_FOLDER | root_node_flags;
   960ce:	f049 0902 	orr.w	r9, r9, #2
	tree->nodes_array = nodes_array;
   960d2:	6061      	str	r1, [r4, #4]
	tree->nodes_array_size = nodes_array_size;
   960d4:	8022      	strh	r2, [r4, #0]
	tree->tree_flags = tree_flags;
   960d6:	7327      	strb	r7, [r4, #12]
	tree->folder_separator[0] = folder_separator;
   960d8:	f884 800d 	strb.w	r8, [r4, #13]
	tree->folder_separator[1] = '\0';
   960dc:	f884 a00e 	strb.w	sl, [r4, #14]
	tree->nodes_array[ROOT_FOLDER_ID].node_flags = MW_TREE_CONTAINER_NODE_IS_FOLDER | root_node_flags;
   960e0:	f881 9016 	strb.w	r9, [r1, #22]
	(void)mw_util_safe_strcpy(tree->nodes_array[ROOT_FOLDER_ID].label, (size_t)MW_TREE_CONTAINER_NODE_LABEL_MAX_SIZE, root_folder_path);
   960e4:	6860      	ldr	r0, [r4, #4]
   960e6:	462a      	mov	r2, r5
   960e8:	2110      	movs	r1, #16
   960ea:	4f16      	ldr	r7, [pc, #88]	; (96144 <mw_tree_container_init+0xf0>)
   960ec:	3006      	adds	r0, #6
   960ee:	47b8      	blx	r7
	tree->nodes_array[ROOT_FOLDER_ID].level = 0U;
   960f0:	6862      	ldr	r2, [r4, #4]
	tree->nodes_array[ROOT_FOLDER_ID].handle = get_next_handle();
   960f2:	4b15      	ldr	r3, [pc, #84]	; (96148 <mw_tree_container_init+0xf4>)
	tree->nodes_array[ROOT_FOLDER_ID].level = 0U;
   960f4:	f8a2 a004 	strh.w	sl, [r2, #4]
	tree->nodes_array[ROOT_FOLDER_ID].handle = get_next_handle();
   960f8:	6865      	ldr	r5, [r4, #4]
   960fa:	4798      	blx	r3
   960fc:	6028      	str	r0, [r5, #0]
	tree->no_space_callback = no_space_callback;
   960fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			tree->nodes_array[ROOT_FOLDER_ID].label);
   96100:	6862      	ldr	r2, [r4, #4]
	(void)mw_util_safe_strcpy(tree->root_folder_label,
   96102:	f104 050f 	add.w	r5, r4, #15
	tree->no_space_callback = no_space_callback;
   96106:	60a3      	str	r3, [r4, #8]
	(void)mw_util_safe_strcpy(tree->root_folder_label,
   96108:	3206      	adds	r2, #6
   9610a:	2110      	movs	r1, #16
   9610c:	4628      	mov	r0, r5
   9610e:	47b8      	blx	r7
	tree->root_folder_label[strlen(tree->root_folder_label) - (size_t)1] = '\0';
   96110:	4628      	mov	r0, r5
   96112:	47b0      	blx	r6
		MW_ASSERT((bool)false, "Null pointer");

		return;
	}

	tree->node_count = 1U;
   96114:	2201      	movs	r2, #1
	tree->root_folder_label[strlen(tree->root_folder_label) - (size_t)1] = '\0';
   96116:	4420      	add	r0, r4
   96118:	f880 a00e 	strb.w	sl, [r0, #14]
	return tree->nodes_array[ROOT_FOLDER_ID].handle;
   9611c:	6863      	ldr	r3, [r4, #4]
	tree->node_count = 1U;
   9611e:	8062      	strh	r2, [r4, #2]
	return tree->nodes_array[ROOT_FOLDER_ID].handle;
   96120:	6818      	ldr	r0, [r3, #0]
   96122:	e7bd      	b.n	960a0 <mw_tree_container_init+0x4c>
		MW_ASSERT((bool)false, "Bad format tree root folder path");
   96124:	4b06      	ldr	r3, [pc, #24]	; (96140 <mw_tree_container_init+0xec>)
   96126:	22c2      	movs	r2, #194	; 0xc2
   96128:	e7b5      	b.n	96096 <mw_tree_container_init+0x42>
   9612a:	bf00      	nop
   9612c:	000abd74 	.word	0x000abd74
   96130:	000a64a0 	.word	0x000a64a0
   96134:	000aba98 	.word	0x000aba98
   96138:	00095add 	.word	0x00095add
   9613c:	000a5e79 	.word	0x000a5e79
   96140:	000abd84 	.word	0x000abd84
   96144:	00096f31 	.word	0x00096f31
   96148:	0008df51 	.word	0x0008df51

0009614c <mw_tree_container_get_size_node_array>:
}

uint16_t mw_tree_container_get_size_node_array(struct mw_tree_container_t *tree)
{
   9614c:	b538      	push	{r3, r4, r5, lr}
	if (tree == NULL)
   9614e:	4604      	mov	r4, r0
   96150:	b108      	cbz	r0, 96156 <mw_tree_container_get_size_node_array+0xa>
		MW_ASSERT((bool)false, "Null pointer");

		return 0U;
	}

	return (tree->nodes_array_size);
   96152:	8800      	ldrh	r0, [r0, #0]
}
   96154:	bd38      	pop	{r3, r4, r5, pc}
		MW_ASSERT((bool)false, "Null pointer");
   96156:	4b03      	ldr	r3, [pc, #12]	; (96164 <mw_tree_container_get_size_node_array+0x18>)
   96158:	22f5      	movs	r2, #245	; 0xf5
   9615a:	4903      	ldr	r1, [pc, #12]	; (96168 <mw_tree_container_get_size_node_array+0x1c>)
   9615c:	4d03      	ldr	r5, [pc, #12]	; (9616c <mw_tree_container_get_size_node_array+0x20>)
   9615e:	47a8      	blx	r5
		return 0U;
   96160:	4620      	mov	r0, r4
   96162:	bd38      	pop	{r3, r4, r5, pc}
   96164:	000a64a0 	.word	0x000a64a0
   96168:	000abab0 	.word	0x000abab0
   9616c:	00095add 	.word	0x00095add

00096170 <mw_tree_container_get_node_array>:

mw_tree_container_node_t *mw_tree_container_get_node_array(struct mw_tree_container_t *tree)
{
   96170:	b538      	push	{r3, r4, r5, lr}
	if (tree == NULL)
   96172:	4604      	mov	r4, r0
   96174:	b108      	cbz	r0, 9617a <mw_tree_container_get_node_array+0xa>
		MW_ASSERT((bool)false, "Null pointer");

		return NULL;
	}

	return (tree->nodes_array);
   96176:	6840      	ldr	r0, [r0, #4]
}
   96178:	bd38      	pop	{r3, r4, r5, pc}
		MW_ASSERT((bool)false, "Null pointer");
   9617a:	4b04      	ldr	r3, [pc, #16]	; (9618c <mw_tree_container_get_node_array+0x1c>)
   9617c:	f240 1201 	movw	r2, #257	; 0x101
   96180:	4903      	ldr	r1, [pc, #12]	; (96190 <mw_tree_container_get_node_array+0x20>)
   96182:	4d04      	ldr	r5, [pc, #16]	; (96194 <mw_tree_container_get_node_array+0x24>)
   96184:	47a8      	blx	r5
		return NULL;
   96186:	4620      	mov	r0, r4
   96188:	bd38      	pop	{r3, r4, r5, pc}
   9618a:	bf00      	nop
   9618c:	000a64a0 	.word	0x000a64a0
   96190:	000abad8 	.word	0x000abad8
   96194:	00095add 	.word	0x00095add

00096198 <mw_tree_container_set_new_node_array>:

void mw_tree_container_set_new_node_array(struct mw_tree_container_t *tree, mw_tree_container_node_t *new_node_array, uint16_t new_node_array_size)
{
   96198:	b410      	push	{r4}
	if (tree == NULL || new_node_array == NULL)
   9619a:	b190      	cbz	r0, 961c2 <mw_tree_container_set_new_node_array+0x2a>
   9619c:	b189      	cbz	r1, 961c2 <mw_tree_container_set_new_node_array+0x2a>
		MW_ASSERT((bool)false, "Null pointer");

		return;
	}

	if (new_node_array_size < 1U)
   9619e:	b13a      	cbz	r2, 961b0 <mw_tree_container_set_new_node_array+0x18>
	}

	tree->nodes_array = new_node_array;
	tree->nodes_array_size = new_node_array_size;

	if (tree->nodes_array_size < tree->node_count)
   961a0:	8843      	ldrh	r3, [r0, #2]
	tree->nodes_array = new_node_array;
   961a2:	6041      	str	r1, [r0, #4]
	if (tree->nodes_array_size < tree->node_count)
   961a4:	4293      	cmp	r3, r2
	tree->nodes_array_size = new_node_array_size;
   961a6:	8002      	strh	r2, [r0, #0]
	{
		tree->node_count = tree->nodes_array_size;
   961a8:	bf88      	it	hi
   961aa:	8042      	strhhi	r2, [r0, #2]
	}
}
   961ac:	bc10      	pop	{r4}
   961ae:	4770      	bx	lr
		MW_ASSERT((bool)false, "Bad parameter");
   961b0:	4c08      	ldr	r4, [pc, #32]	; (961d4 <mw_tree_container_set_new_node_array+0x3c>)
   961b2:	4610      	mov	r0, r2
   961b4:	46a4      	mov	ip, r4
   961b6:	4b08      	ldr	r3, [pc, #32]	; (961d8 <mw_tree_container_set_new_node_array+0x40>)
   961b8:	f44f 728a 	mov.w	r2, #276	; 0x114
   961bc:	4907      	ldr	r1, [pc, #28]	; (961dc <mw_tree_container_set_new_node_array+0x44>)
}
   961be:	bc10      	pop	{r4}
		MW_ASSERT((bool)false, "Bad parameter");
   961c0:	4760      	bx	ip
		MW_ASSERT((bool)false, "Null pointer");
   961c2:	4c04      	ldr	r4, [pc, #16]	; (961d4 <mw_tree_container_set_new_node_array+0x3c>)
   961c4:	4b06      	ldr	r3, [pc, #24]	; (961e0 <mw_tree_container_set_new_node_array+0x48>)
   961c6:	46a4      	mov	ip, r4
   961c8:	f240 120d 	movw	r2, #269	; 0x10d
   961cc:	4903      	ldr	r1, [pc, #12]	; (961dc <mw_tree_container_set_new_node_array+0x44>)
   961ce:	2000      	movs	r0, #0
}
   961d0:	bc10      	pop	{r4}
		MW_ASSERT((bool)false, "Null pointer");
   961d2:	4760      	bx	ip
   961d4:	00095add 	.word	0x00095add
   961d8:	000abda8 	.word	0x000abda8
   961dc:	000abafc 	.word	0x000abafc
   961e0:	000a64a0 	.word	0x000a64a0

000961e4 <mw_tree_container_add_node>:

mw_handle_t mw_tree_container_add_node(struct mw_tree_container_t *tree, mw_handle_t parent_folder_handle, char *label, uint8_t node_flags)
{
   961e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t i;
	uint16_t parent_folder_id;
	uint16_t new_node_id;

	/* check pointers for non null */
	if (tree == NULL || label == NULL)
   961e8:	2800      	cmp	r0, #0
   961ea:	f000 80a7 	beq.w	9633c <mw_tree_container_add_node+0x158>
   961ee:	4690      	mov	r8, r2
   961f0:	2a00      	cmp	r2, #0
   961f2:	f000 80a3 	beq.w	9633c <mw_tree_container_add_node+0x158>
   961f6:	4699      	mov	r9, r3

		return MW_INVALID_HANDLE;
	}

	/* check there is space for a new node */
	if (tree->node_count == tree->nodes_array_size)
   961f8:	8807      	ldrh	r7, [r0, #0]
   961fa:	8843      	ldrh	r3, [r0, #2]
   961fc:	460d      	mov	r5, r1
   961fe:	42bb      	cmp	r3, r7
   96200:	4606      	mov	r6, r0
   96202:	f000 8087 	beq.w	96314 <mw_tree_container_add_node+0x130>
	if (tree->nodes_array[cached_id].handle == handle)
   96206:	4854      	ldr	r0, [pc, #336]	; (96358 <mw_tree_container_add_node+0x174>)
   96208:	6874      	ldr	r4, [r6, #4]
   9620a:	f8b0 e000 	ldrh.w	lr, [r0]
   9620e:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
   96212:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
   96216:	4295      	cmp	r5, r2
   96218:	d01f      	beq.n	9625a <mw_tree_container_add_node+0x76>
	for (i = 0U; i < tree->node_count; i++)
   9621a:	b183      	cbz	r3, 9623e <mw_tree_container_add_node+0x5a>
		if (tree->nodes_array[i].handle == handle)
   9621c:	6822      	ldr	r2, [r4, #0]
   9621e:	4295      	cmp	r5, r2
   96220:	d017      	beq.n	96252 <mw_tree_container_add_node+0x6e>
   96222:	4622      	mov	r2, r4
   96224:	f04f 0e00 	mov.w	lr, #0
   96228:	e003      	b.n	96232 <mw_tree_container_add_node+0x4e>
   9622a:	f852 1f18 	ldr.w	r1, [r2, #24]!
   9622e:	428d      	cmp	r5, r1
   96230:	d011      	beq.n	96256 <mw_tree_container_add_node+0x72>
	for (i = 0U; i < tree->node_count; i++)
   96232:	f10e 0e01 	add.w	lr, lr, #1
   96236:	fa1f fe8e 	uxth.w	lr, lr
   9623a:	459e      	cmp	lr, r3
   9623c:	d1f5      	bne.n	9622a <mw_tree_container_add_node+0x46>
	/* check that parent folder really is a folder node */
	if (parent_folder_id == tree->nodes_array_size ||
			(tree->nodes_array[parent_folder_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U)
	{
		/* it isn't */
		MW_ASSERT((bool)false, "Invalid parent folder");
   9623e:	f240 1255 	movw	r2, #341	; 0x155
   96242:	4b46      	ldr	r3, [pc, #280]	; (9635c <mw_tree_container_add_node+0x178>)
   96244:	4946      	ldr	r1, [pc, #280]	; (96360 <mw_tree_container_add_node+0x17c>)
   96246:	2000      	movs	r0, #0
   96248:	4c46      	ldr	r4, [pc, #280]	; (96364 <mw_tree_container_add_node+0x180>)
   9624a:	47a0      	blx	r4

		return MW_INVALID_HANDLE;
   9624c:	2000      	movs	r0, #0
   9624e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (tree->nodes_array[i].handle == handle)
   96252:	f04f 0e00 	mov.w	lr, #0
			cached_id = i;
   96256:	f8a0 e000 	strh.w	lr, [r0]
	if (parent_folder_id == tree->nodes_array_size ||
   9625a:	45be      	cmp	lr, r7
   9625c:	d0ef      	beq.n	9623e <mw_tree_container_add_node+0x5a>
			(tree->nodes_array[parent_folder_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U)
   9625e:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
   96262:	00ff      	lsls	r7, r7, #3
   96264:	19e2      	adds	r2, r4, r7
	if (parent_folder_id == tree->nodes_array_size ||
   96266:	7d91      	ldrb	r1, [r2, #22]
   96268:	0789      	lsls	r1, r1, #30
   9626a:	d5e8      	bpl.n	9623e <mw_tree_container_add_node+0x5a>
	}

	/* need to find where to put the new node - start off with parent node position + 1 */
	new_node_id = parent_folder_id + 1U;
   9626c:	f10e 0e01 	add.w	lr, lr, #1
   96270:	fa1f fe8e 	uxth.w	lr, lr

	/* need to add new node after all existing nodes after parent with level equal to parent level + 1 so keep
	 * incrementing while the level of the next node is parent level + 1
	 */
	while (tree->nodes_array[new_node_id].level == tree->nodes_array[parent_folder_id].level + 1U &&
   96274:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   96278:	00ed      	lsls	r5, r5, #3
   9627a:	8892      	ldrh	r2, [r2, #4]
   9627c:	1960      	adds	r0, r4, r5
   9627e:	8881      	ldrh	r1, [r0, #4]
   96280:	3201      	adds	r2, #1
   96282:	4291      	cmp	r1, r2
   96284:	d00b      	beq.n	9629e <mw_tree_container_add_node+0xba>
   96286:	e00c      	b.n	962a2 <mw_tree_container_add_node+0xbe>
			new_node_id < tree->node_count)
	{
		new_node_id++;
   96288:	f10e 0e01 	add.w	lr, lr, #1
   9628c:	fa1f fe8e 	uxth.w	lr, lr
	while (tree->nodes_array[new_node_id].level == tree->nodes_array[parent_folder_id].level + 1U &&
   96290:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   96294:	00ed      	lsls	r5, r5, #3
   96296:	1960      	adds	r0, r4, r5
   96298:	8882      	ldrh	r2, [r0, #4]
   9629a:	428a      	cmp	r2, r1
   9629c:	d101      	bne.n	962a2 <mw_tree_container_add_node+0xbe>
   9629e:	459e      	cmp	lr, r3
   962a0:	d3f2      	bcc.n	96288 <mw_tree_container_add_node+0xa4>
	}

	/* now have slot for new node so move everything after it to end of current array
	 * size down by one
	 */
	for (i = tree->node_count - 1U; i >= new_node_id; i--)
   962a2:	f103 3cff 	add.w	ip, r3, #4294967295
   962a6:	fa1f fc8c 	uxth.w	ip, ip
   962aa:	45f4      	cmp	ip, lr
   962ac:	d201      	bcs.n	962b2 <mw_tree_container_add_node+0xce>
   962ae:	e017      	b.n	962e0 <mw_tree_container_add_node+0xfc>
   962b0:	6874      	ldr	r4, [r6, #4]
	{
		tree->nodes_array[i + 1U] = tree->nodes_array[i];
   962b2:	f10c 0301 	add.w	r3, ip, #1
   962b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   962ba:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   962be:	f1a4 0a18 	sub.w	sl, r4, #24
   962c2:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   962c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	for (i = tree->node_count - 1U; i >= new_node_id; i--)
   962c8:	f10c 3cff 	add.w	ip, ip, #4294967295
   962cc:	fa1f fc8c 	uxth.w	ip, ip
   962d0:	45f4      	cmp	ip, lr
		tree->nodes_array[i + 1U] = tree->nodes_array[i];
   962d2:	e89a 0003 	ldmia.w	sl, {r0, r1}
   962d6:	e884 0003 	stmia.w	r4, {r0, r1}
	for (i = tree->node_count - 1U; i >= new_node_id; i--)
   962da:	d2e9      	bcs.n	962b0 <mw_tree_container_add_node+0xcc>
   962dc:	6870      	ldr	r0, [r6, #4]
   962de:	4428      	add	r0, r5
	}

	/* now fill in details of new node at found position */
	(void)mw_util_safe_strcpy(tree->nodes_array[new_node_id].label, (size_t)MW_TREE_CONTAINER_NODE_LABEL_MAX_SIZE, label);
   962e0:	4642      	mov	r2, r8
   962e2:	2110      	movs	r1, #16
   962e4:	4b20      	ldr	r3, [pc, #128]	; (96368 <mw_tree_container_add_node+0x184>)
   962e6:	3006      	adds	r0, #6
   962e8:	4798      	blx	r3
	tree->nodes_array[new_node_id].node_flags = node_flags;
   962ea:	6873      	ldr	r3, [r6, #4]
	tree->nodes_array[new_node_id].level = tree->nodes_array[parent_folder_id].level + 1U;
	tree->nodes_array[new_node_id].handle = get_next_handle();
   962ec:	491f      	ldr	r1, [pc, #124]	; (9636c <mw_tree_container_add_node+0x188>)
	tree->nodes_array[new_node_id].node_flags = node_flags;
   962ee:	442b      	add	r3, r5
   962f0:	f883 9016 	strb.w	r9, [r3, #22]
	tree->nodes_array[new_node_id].level = tree->nodes_array[parent_folder_id].level + 1U;
   962f4:	6873      	ldr	r3, [r6, #4]
   962f6:	441f      	add	r7, r3
   962f8:	88ba      	ldrh	r2, [r7, #4]
   962fa:	442b      	add	r3, r5
   962fc:	3201      	adds	r2, #1
   962fe:	809a      	strh	r2, [r3, #4]
	tree->nodes_array[new_node_id].handle = get_next_handle();
   96300:	6874      	ldr	r4, [r6, #4]
   96302:	4788      	blx	r1
   96304:	5160      	str	r0, [r4, r5]

	/* increment current array size as have added a new node */
	tree->node_count++;
   96306:	8873      	ldrh	r3, [r6, #2]

	/* return new node handle */
	return tree->nodes_array[new_node_id].handle;
   96308:	6872      	ldr	r2, [r6, #4]
	tree->node_count++;
   9630a:	3301      	adds	r3, #1
   9630c:	8073      	strh	r3, [r6, #2]
	return tree->nodes_array[new_node_id].handle;
   9630e:	5950      	ldr	r0, [r2, r5]
}
   96310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (tree->no_space_callback == NULL)
   96314:	6884      	ldr	r4, [r0, #8]
   96316:	b1ac      	cbz	r4, 96344 <mw_tree_container_add_node+0x160>
			tree->no_space_callback(tree);
   96318:	47a0      	blx	r4
			if (tree->node_count >= tree->nodes_array_size)
   9631a:	8873      	ldrh	r3, [r6, #2]
   9631c:	8837      	ldrh	r7, [r6, #0]
   9631e:	42bb      	cmp	r3, r7
   96320:	f4ff af71 	bcc.w	96206 <mw_tree_container_add_node+0x22>
				MW_ASSERT((bool)false, "No space in tree");
   96324:	4b12      	ldr	r3, [pc, #72]	; (96370 <mw_tree_container_add_node+0x18c>)
   96326:	f44f 72a2 	mov.w	r2, #324	; 0x144
   9632a:	490d      	ldr	r1, [pc, #52]	; (96360 <mw_tree_container_add_node+0x17c>)
   9632c:	2000      	movs	r0, #0
   9632e:	4c0d      	ldr	r4, [pc, #52]	; (96364 <mw_tree_container_add_node+0x180>)
   96330:	47a0      	blx	r4
				tree->node_count = tree->nodes_array_size;
   96332:	8833      	ldrh	r3, [r6, #0]
				return MW_INVALID_HANDLE;
   96334:	2000      	movs	r0, #0
				tree->node_count = tree->nodes_array_size;
   96336:	8073      	strh	r3, [r6, #2]
				return MW_INVALID_HANDLE;
   96338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		MW_ASSERT((bool)false, "Null pointer");
   9633c:	4b0d      	ldr	r3, [pc, #52]	; (96374 <mw_tree_container_add_node+0x190>)
   9633e:	f240 122b 	movw	r2, #299	; 0x12b
   96342:	e77f      	b.n	96244 <mw_tree_container_add_node+0x60>
			MW_ASSERT((bool)false, "No space in tree");
   96344:	4620      	mov	r0, r4
   96346:	4b0a      	ldr	r3, [pc, #40]	; (96370 <mw_tree_container_add_node+0x18c>)
   96348:	f240 1237 	movw	r2, #311	; 0x137
   9634c:	4904      	ldr	r1, [pc, #16]	; (96360 <mw_tree_container_add_node+0x17c>)
   9634e:	4d05      	ldr	r5, [pc, #20]	; (96364 <mw_tree_container_add_node+0x180>)
   96350:	47a8      	blx	r5
			return MW_INVALID_HANDLE;
   96352:	4620      	mov	r0, r4
   96354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   96358:	200727b4 	.word	0x200727b4
   9635c:	000abce4 	.word	0x000abce4
   96360:	000abb24 	.word	0x000abb24
   96364:	00095add 	.word	0x00095add
   96368:	00096f31 	.word	0x00096f31
   9636c:	0008df51 	.word	0x0008df51
   96370:	000abcd0 	.word	0x000abcd0
   96374:	000a64a0 	.word	0x000a64a0

00096378 <mw_tree_container_get_all_children>:
void mw_tree_container_get_all_children(struct mw_tree_container_t *tree,
		mw_handle_t parent_folder_handle,
		bool selected_only,
		mw_tree_container_next_child_callback_t *callback,
		void *callback_data)
{
   96378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   9637c:	9f08      	ldr	r7, [sp, #32]
	uint16_t i;
	uint16_t parent_folder_id;
	uint16_t parent_folder_level;
	uint16_t skip_level;

	if (tree == NULL)
   9637e:	2800      	cmp	r0, #0
   96380:	f000 80a5 	beq.w	964ce <mw_tree_container_get_all_children+0x156>
   96384:	4606      	mov	r6, r0
	if (tree->nodes_array[cached_id].handle == handle)
   96386:	f8df 9168 	ldr.w	r9, [pc, #360]	; 964f0 <mw_tree_container_get_all_children+0x178>
   9638a:	6840      	ldr	r0, [r0, #4]
   9638c:	f8b9 4000 	ldrh.w	r4, [r9]
   96390:	f8b6 8000 	ldrh.w	r8, [r6]
   96394:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   96398:	f850 5035 	ldr.w	r5, [r0, r5, lsl #3]
   9639c:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   963a0:	42a9      	cmp	r1, r5
   963a2:	d01d      	beq.n	963e0 <mw_tree_container_get_all_children+0x68>
	for (i = 0U; i < tree->node_count; i++)
   963a4:	f1be 0f00 	cmp.w	lr, #0
   963a8:	d00d      	beq.n	963c6 <mw_tree_container_get_all_children+0x4e>
		if (tree->nodes_array[i].handle == handle)
   963aa:	6804      	ldr	r4, [r0, #0]
   963ac:	42a1      	cmp	r1, r4
   963ae:	d014      	beq.n	963da <mw_tree_container_get_all_children+0x62>
   963b0:	4605      	mov	r5, r0
   963b2:	2400      	movs	r4, #0
   963b4:	e003      	b.n	963be <mw_tree_container_get_all_children+0x46>
   963b6:	f855 cf18 	ldr.w	ip, [r5, #24]!
   963ba:	4561      	cmp	r1, ip
   963bc:	d00e      	beq.n	963dc <mw_tree_container_get_all_children+0x64>
	for (i = 0U; i < tree->node_count; i++)
   963be:	3401      	adds	r4, #1
   963c0:	b2a4      	uxth	r4, r4
   963c2:	45a6      	cmp	lr, r4
   963c4:	d1f7      	bne.n	963b6 <mw_tree_container_get_all_children+0x3e>
	}

	parent_folder_id = get_id_from_handle(tree, parent_folder_handle);
	if (parent_folder_id >= tree->nodes_array_size)
	{
		MW_ASSERT((bool)false, "Bad node handle");
   963c6:	4c45      	ldr	r4, [pc, #276]	; (964dc <mw_tree_container_get_all_children+0x164>)
   963c8:	4b45      	ldr	r3, [pc, #276]	; (964e0 <mw_tree_container_get_all_children+0x168>)
   963ca:	46a4      	mov	ip, r4
		if (callback(tree, tree->nodes_array[i].handle, callback_data) == false)
		{
			break;
		}
	}
}
   963cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		MW_ASSERT((bool)false, "Bad node handle");
   963d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   963d4:	4943      	ldr	r1, [pc, #268]	; (964e4 <mw_tree_container_get_all_children+0x16c>)
   963d6:	2000      	movs	r0, #0
   963d8:	4760      	bx	ip
		if (tree->nodes_array[i].handle == handle)
   963da:	2400      	movs	r4, #0
			cached_id = i;
   963dc:	f8a9 4000 	strh.w	r4, [r9]
	if (parent_folder_id >= tree->nodes_array_size)
   963e0:	45a0      	cmp	r8, r4
   963e2:	d9f0      	bls.n	963c6 <mw_tree_container_get_all_children+0x4e>
	if ((tree->nodes_array[parent_folder_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U)
   963e4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   963e8:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
   963ec:	7da9      	ldrb	r1, [r5, #22]
   963ee:	f011 0c02 	ands.w	ip, r1, #2
   963f2:	d05c      	beq.n	964ae <mw_tree_container_get_all_children+0x136>
	if ((tree->nodes_array[parent_folder_id].node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == 0U)
   963f4:	0749      	lsls	r1, r1, #29
   963f6:	d558      	bpl.n	964aa <mw_tree_container_get_all_children+0x132>
	for (i = parent_folder_id + 1U; ; i++)
   963f8:	3401      	adds	r4, #1
   963fa:	b2a4      	uxth	r4, r4
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   963fc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   96400:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	parent_folder_level = tree->nodes_array[parent_folder_id].level;
   96404:	f8b5 9004 	ldrh.w	r9, [r5, #4]
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   96408:	888d      	ldrh	r5, [r1, #4]
   9640a:	45a9      	cmp	r9, r5
   9640c:	d24d      	bcs.n	964aa <mw_tree_container_get_all_children+0x132>
   9640e:	4574      	cmp	r4, lr
   96410:	d061      	beq.n	964d6 <mw_tree_container_get_all_children+0x15e>
   96412:	469a      	mov	sl, r3
   96414:	b9e2      	cbnz	r2, 96450 <mw_tree_container_get_all_children+0xd8>
   96416:	e03f      	b.n	96498 <mw_tree_container_get_all_children+0x120>
			if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   96418:	075a      	lsls	r2, r3, #29
				skip_level = tree->nodes_array[i].level + 1U;
   9641a:	bf56      	itet	pl
   9641c:	3501      	addpl	r5, #1
				skip_level = tree->nodes_array_size;
   9641e:	f8b6 8000 	ldrhmi.w	r8, [r6]
				skip_level = tree->nodes_array[i].level + 1U;
   96422:	fa1f f885 	uxthpl.w	r8, r5
		if (selected_only && (tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_IS_SELECTED) == 0U)
   96426:	07dd      	lsls	r5, r3, #31
   96428:	d506      	bpl.n	96438 <mw_tree_container_get_all_children+0xc0>
		if (callback(tree, tree->nodes_array[i].handle, callback_data) == false)
   9642a:	6809      	ldr	r1, [r1, #0]
   9642c:	463a      	mov	r2, r7
   9642e:	4630      	mov	r0, r6
   96430:	47d0      	blx	sl
   96432:	2800      	cmp	r0, #0
   96434:	d039      	beq.n	964aa <mw_tree_container_get_all_children+0x132>
   96436:	6870      	ldr	r0, [r6, #4]
	for (i = parent_folder_id + 1U; ; i++)
   96438:	3401      	adds	r4, #1
   9643a:	b2a4      	uxth	r4, r4
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   9643c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   96440:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   96444:	888d      	ldrh	r5, [r1, #4]
   96446:	45a9      	cmp	r9, r5
   96448:	d23b      	bcs.n	964c2 <mw_tree_container_get_all_children+0x14a>
   9644a:	8873      	ldrh	r3, [r6, #2]
   9644c:	42a3      	cmp	r3, r4
   9644e:	d03a      	beq.n	964c6 <mw_tree_container_get_all_children+0x14e>
		if (tree->nodes_array[i].level >= skip_level)
   96450:	45a8      	cmp	r8, r5
   96452:	d9f1      	bls.n	96438 <mw_tree_container_get_all_children+0xc0>
		if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   96454:	7d8b      	ldrb	r3, [r1, #22]
   96456:	079a      	lsls	r2, r3, #30
   96458:	d4de      	bmi.n	96418 <mw_tree_container_get_all_children+0xa0>
		if ((tree->tree_flags & MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY) == MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY &&
   9645a:	7b32      	ldrb	r2, [r6, #12]
   9645c:	06d2      	lsls	r2, r2, #27
   9645e:	d4eb      	bmi.n	96438 <mw_tree_container_get_all_children+0xc0>
   96460:	e7e1      	b.n	96426 <mw_tree_container_get_all_children+0xae>
			if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   96462:	f013 0f04 	tst.w	r3, #4
				skip_level = tree->nodes_array[i].level + 1U;
   96466:	f105 0501 	add.w	r5, r5, #1
				skip_level = tree->nodes_array_size;
   9646a:	bf14      	ite	ne
   9646c:	f8b6 8000 	ldrhne.w	r8, [r6]
				skip_level = tree->nodes_array[i].level + 1U;
   96470:	fa1f f885 	uxtheq.w	r8, r5
		if (callback(tree, tree->nodes_array[i].handle, callback_data) == false)
   96474:	6809      	ldr	r1, [r1, #0]
   96476:	463a      	mov	r2, r7
   96478:	4630      	mov	r0, r6
   9647a:	47d0      	blx	sl
   9647c:	b1a8      	cbz	r0, 964aa <mw_tree_container_get_all_children+0x132>
   9647e:	6870      	ldr	r0, [r6, #4]
	for (i = parent_folder_id + 1U; ; i++)
   96480:	3401      	adds	r4, #1
   96482:	b2a4      	uxth	r4, r4
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   96484:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   96488:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   9648c:	888d      	ldrh	r5, [r1, #4]
   9648e:	45a9      	cmp	r9, r5
   96490:	d20b      	bcs.n	964aa <mw_tree_container_get_all_children+0x132>
   96492:	8873      	ldrh	r3, [r6, #2]
   96494:	42a3      	cmp	r3, r4
   96496:	d018      	beq.n	964ca <mw_tree_container_get_all_children+0x152>
		if (tree->nodes_array[i].level >= skip_level)
   96498:	45a8      	cmp	r8, r5
   9649a:	d9f1      	bls.n	96480 <mw_tree_container_get_all_children+0x108>
		if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   9649c:	7d8b      	ldrb	r3, [r1, #22]
   9649e:	079a      	lsls	r2, r3, #30
   964a0:	d4df      	bmi.n	96462 <mw_tree_container_get_all_children+0xea>
		if ((tree->tree_flags & MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY) == MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY &&
   964a2:	7b33      	ldrb	r3, [r6, #12]
   964a4:	06dd      	lsls	r5, r3, #27
   964a6:	d4eb      	bmi.n	96480 <mw_tree_container_get_all_children+0x108>
   964a8:	e7e4      	b.n	96474 <mw_tree_container_get_all_children+0xfc>
   964aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		MW_ASSERT((bool)false, "Parent node not a folder");
   964ae:	4660      	mov	r0, ip
   964b0:	f240 1297 	movw	r2, #407	; 0x197
   964b4:	4b0c      	ldr	r3, [pc, #48]	; (964e8 <mw_tree_container_get_all_children+0x170>)
   964b6:	4c09      	ldr	r4, [pc, #36]	; (964dc <mw_tree_container_get_all_children+0x164>)
   964b8:	490a      	ldr	r1, [pc, #40]	; (964e4 <mw_tree_container_get_all_children+0x16c>)
   964ba:	46a4      	mov	ip, r4
}
   964bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		MW_ASSERT((bool)false, "Parent node not a folder");
   964c0:	4760      	bx	ip
   964c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   964c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   964ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		MW_ASSERT((bool)false, "Null pointer");
   964ce:	4b07      	ldr	r3, [pc, #28]	; (964ec <mw_tree_container_get_all_children+0x174>)
   964d0:	f44f 72c4 	mov.w	r2, #392	; 0x188
   964d4:	e7ef      	b.n	964b6 <mw_tree_container_get_all_children+0x13e>
   964d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   964da:	bf00      	nop
   964dc:	00095add 	.word	0x00095add
   964e0:	000abd0c 	.word	0x000abd0c
   964e4:	000abb40 	.word	0x000abb40
   964e8:	000abd1c 	.word	0x000abd1c
   964ec:	000a64a0 	.word	0x000a64a0
   964f0:	200727b4 	.word	0x200727b4

000964f4 <mw_tree_container_get_open_children_count>:

uint16_t mw_tree_container_get_open_children_count(struct mw_tree_container_t *tree,
		mw_handle_t parent_folder_handle,
		bool selected_only)
{
   964f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t parent_folder_id;
	uint16_t parent_folder_level;
	uint16_t skip_level;
	uint16_t count;

	if (tree == NULL)
   964f8:	4604      	mov	r4, r0
   964fa:	2800      	cmp	r0, #0
   964fc:	f000 808f 	beq.w	9661e <mw_tree_container_get_open_children_count+0x12a>
	if (tree->nodes_array[cached_id].handle == handle)
   96500:	484b      	ldr	r0, [pc, #300]	; (96630 <mw_tree_container_get_open_children_count+0x13c>)
   96502:	f8d4 e004 	ldr.w	lr, [r4, #4]
   96506:	8803      	ldrh	r3, [r0, #0]
   96508:	f8b4 c000 	ldrh.w	ip, [r4]
   9650c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   96510:	f85e 5035 	ldr.w	r5, [lr, r5, lsl #3]
   96514:	8867      	ldrh	r7, [r4, #2]
   96516:	42a9      	cmp	r1, r5
   96518:	d01b      	beq.n	96552 <mw_tree_container_get_open_children_count+0x5e>
	for (i = 0U; i < tree->node_count; i++)
   9651a:	b177      	cbz	r7, 9653a <mw_tree_container_get_open_children_count+0x46>
		if (tree->nodes_array[i].handle == handle)
   9651c:	f8de 3000 	ldr.w	r3, [lr]
   96520:	4299      	cmp	r1, r3
   96522:	d014      	beq.n	9654e <mw_tree_container_get_open_children_count+0x5a>
   96524:	4675      	mov	r5, lr
   96526:	2300      	movs	r3, #0
   96528:	e003      	b.n	96532 <mw_tree_container_get_open_children_count+0x3e>
   9652a:	f855 6f18 	ldr.w	r6, [r5, #24]!
   9652e:	42b1      	cmp	r1, r6
   96530:	d00e      	beq.n	96550 <mw_tree_container_get_open_children_count+0x5c>
	for (i = 0U; i < tree->node_count; i++)
   96532:	3301      	adds	r3, #1
   96534:	b29b      	uxth	r3, r3
   96536:	429f      	cmp	r7, r3
   96538:	d1f7      	bne.n	9652a <mw_tree_container_get_open_children_count+0x36>
	}

	parent_folder_id = get_id_from_handle(tree, parent_folder_handle);
	if (parent_folder_id == tree->nodes_array_size)
	{
		MW_ASSERT((bool)false, "Bad node handle");
   9653a:	4b3e      	ldr	r3, [pc, #248]	; (96634 <mw_tree_container_get_open_children_count+0x140>)
   9653c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
   96540:	493d      	ldr	r1, [pc, #244]	; (96638 <mw_tree_container_get_open_children_count+0x144>)
   96542:	2000      	movs	r0, #0
   96544:	4c3d      	ldr	r4, [pc, #244]	; (9663c <mw_tree_container_get_open_children_count+0x148>)
   96546:	47a0      	blx	r4

		return (0);
   96548:	2000      	movs	r0, #0
   9654a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tree->nodes_array[i].handle == handle)
   9654e:	2300      	movs	r3, #0
			cached_id = i;
   96550:	8003      	strh	r3, [r0, #0]
	if (parent_folder_id == tree->nodes_array_size)
   96552:	459c      	cmp	ip, r3
   96554:	d0f1      	beq.n	9653a <mw_tree_container_get_open_children_count+0x46>
	}

	if ((tree->nodes_array[parent_folder_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U)
   96556:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   9655a:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
		return (0);
	}

	count = 0U;

	if ((tree->nodes_array[parent_folder_id].node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == 0U)
   9655e:	7d81      	ldrb	r1, [r0, #22]
   96560:	f001 0106 	and.w	r1, r1, #6
   96564:	2906      	cmp	r1, #6
   96566:	d12c      	bne.n	965c2 <mw_tree_container_get_open_children_count+0xce>
	}

	parent_folder_level = tree->nodes_array[parent_folder_id].level;
	skip_level = tree->nodes_array_size;

	for (i = parent_folder_id + 1U; ; i++)
   96568:	3301      	adds	r3, #1
   9656a:	b29b      	uxth	r3, r3
	{
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   9656c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   96570:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
	parent_folder_level = tree->nodes_array[parent_folder_id].level;
   96574:	8886      	ldrh	r6, [r0, #4]
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   96576:	888d      	ldrh	r5, [r1, #4]
   96578:	42ae      	cmp	r6, r5
   9657a:	d222      	bcs.n	965c2 <mw_tree_container_get_open_children_count+0xce>
   9657c:	42bb      	cmp	r3, r7
   9657e:	d020      	beq.n	965c2 <mw_tree_container_get_open_children_count+0xce>
   96580:	b312      	cbz	r2, 965c8 <mw_tree_container_get_open_children_count+0xd4>
   96582:	46e0      	mov	r8, ip
   96584:	2000      	movs	r0, #0
   96586:	e013      	b.n	965b0 <mw_tree_container_get_open_children_count+0xbc>
			continue;
		}

		if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
		{
			if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   96588:	0751      	lsls	r1, r2, #29
   9658a:	d440      	bmi.n	9660e <mw_tree_container_get_open_children_count+0x11a>
			{
				skip_level = tree->nodes_array_size;
			}
			else
			{
				skip_level = tree->nodes_array[i].level + 1U;
   9658c:	3501      	adds	r5, #1
   9658e:	fa1f f885 	uxth.w	r8, r5
		{
			continue;
		}

		/* ignore if selected_only and isn't selected */
		if (selected_only && (tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_IS_SELECTED) == 0U)
   96592:	07d5      	lsls	r5, r2, #31
		{
			continue;
		}

		count++;
   96594:	bf44      	itt	mi
   96596:	1c42      	addmi	r2, r0, #1
   96598:	b290      	uxthmi	r0, r2
	for (i = parent_folder_id + 1U; ; i++)
   9659a:	3301      	adds	r3, #1
   9659c:	b29b      	uxth	r3, r3
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   9659e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   965a2:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
   965a6:	888d      	ldrh	r5, [r1, #4]
   965a8:	42ae      	cmp	r6, r5
   965aa:	d232      	bcs.n	96612 <mw_tree_container_get_open_children_count+0x11e>
   965ac:	42bb      	cmp	r3, r7
   965ae:	d034      	beq.n	9661a <mw_tree_container_get_open_children_count+0x126>
		if (tree->nodes_array[i].level >= skip_level)
   965b0:	45a8      	cmp	r8, r5
   965b2:	d9f2      	bls.n	9659a <mw_tree_container_get_open_children_count+0xa6>
		if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   965b4:	7d8a      	ldrb	r2, [r1, #22]
   965b6:	0791      	lsls	r1, r2, #30
   965b8:	d4e6      	bmi.n	96588 <mw_tree_container_get_open_children_count+0x94>
		if ((tree->tree_flags & MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY) == MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY &&
   965ba:	7b21      	ldrb	r1, [r4, #12]
   965bc:	06c9      	lsls	r1, r1, #27
   965be:	d4ec      	bmi.n	9659a <mw_tree_container_get_open_children_count+0xa6>
   965c0:	e7e7      	b.n	96592 <mw_tree_container_get_open_children_count+0x9e>
		return (0);
   965c2:	2000      	movs	r0, #0
   965c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   965c8:	4610      	mov	r0, r2
   965ca:	46e0      	mov	r8, ip
   965cc:	e00f      	b.n	965ee <mw_tree_container_get_open_children_count+0xfa>
		if ((tree->tree_flags & MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY) == MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY &&
   965ce:	7b22      	ldrb	r2, [r4, #12]
   965d0:	06d5      	lsls	r5, r2, #27
   965d2:	d401      	bmi.n	965d8 <mw_tree_container_get_open_children_count+0xe4>
		count++;
   965d4:	1c42      	adds	r2, r0, #1
   965d6:	b290      	uxth	r0, r2
	for (i = parent_folder_id + 1U; ; i++)
   965d8:	3301      	adds	r3, #1
   965da:	b29b      	uxth	r3, r3
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   965dc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   965e0:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
   965e4:	888d      	ldrh	r5, [r1, #4]
   965e6:	42ae      	cmp	r6, r5
   965e8:	d20f      	bcs.n	9660a <mw_tree_container_get_open_children_count+0x116>
   965ea:	42bb      	cmp	r3, r7
   965ec:	d013      	beq.n	96616 <mw_tree_container_get_open_children_count+0x122>
		if (tree->nodes_array[i].level >= skip_level)
   965ee:	4545      	cmp	r5, r8
   965f0:	d2f2      	bcs.n	965d8 <mw_tree_container_get_open_children_count+0xe4>
		if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   965f2:	7d8a      	ldrb	r2, [r1, #22]
   965f4:	0791      	lsls	r1, r2, #30
   965f6:	d5ea      	bpl.n	965ce <mw_tree_container_get_open_children_count+0xda>
			if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   965f8:	f012 0f04 	tst.w	r2, #4
				skip_level = tree->nodes_array[i].level + 1U;
   965fc:	f105 0501 	add.w	r5, r5, #1
			if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   96600:	bf14      	ite	ne
   96602:	46e0      	movne	r8, ip
				skip_level = tree->nodes_array[i].level + 1U;
   96604:	fa1f f885 	uxtheq.w	r8, r5
   96608:	e7e4      	b.n	965d4 <mw_tree_container_get_open_children_count+0xe0>
	}

	return (count);
}
   9660a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9660e:	46e0      	mov	r8, ip
   96610:	e7bf      	b.n	96592 <mw_tree_container_get_open_children_count+0x9e>
   96612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   96616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9661a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		MW_ASSERT((bool)false, "Null pointer");
   9661e:	4b08      	ldr	r3, [pc, #32]	; (96640 <mw_tree_container_get_open_children_count+0x14c>)
   96620:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
   96624:	4904      	ldr	r1, [pc, #16]	; (96638 <mw_tree_container_get_open_children_count+0x144>)
   96626:	4d05      	ldr	r5, [pc, #20]	; (9663c <mw_tree_container_get_open_children_count+0x148>)
   96628:	47a8      	blx	r5
		return (0);
   9662a:	4620      	mov	r0, r4
   9662c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   96630:	200727b4 	.word	0x200727b4
   96634:	000abd0c 	.word	0x000abd0c
   96638:	000abb64 	.word	0x000abb64
   9663c:	00095add 	.word	0x00095add
   96640:	000a64a0 	.word	0x000a64a0

00096644 <mw_tree_container_change_node_selected_state>:

	(void)mw_util_safe_strcpy(tree->nodes_array[node_id].label, (size_t)MW_TREE_CONTAINER_NODE_LABEL_MAX_SIZE, label);
}

bool mw_tree_container_change_node_selected_state(struct mw_tree_container_t *tree, mw_handle_t node_handle, bool is_selected)
{
   96644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t node_id;

	if (tree == NULL)
   96648:	4605      	mov	r5, r0
   9664a:	2800      	cmp	r0, #0
   9664c:	d06d      	beq.n	9672a <mw_tree_container_change_node_selected_state+0xe6>

		return (false);
	}

	/* check if selection is allowed */
	if ((tree->tree_flags & MW_TREE_CONTAINER_NO_SELECT) == MW_TREE_CONTAINER_NO_SELECT)
   9664e:	f890 e00c 	ldrb.w	lr, [r0, #12]
   96652:	f01e 0401 	ands.w	r4, lr, #1
   96656:	d123      	bne.n	966a0 <mw_tree_container_change_node_selected_state+0x5c>
	if (tree->nodes_array[cached_id].handle == handle)
   96658:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 9674c <mw_tree_container_change_node_selected_state+0x108>
   9665c:	6840      	ldr	r0, [r0, #4]
   9665e:	f8bc 3000 	ldrh.w	r3, [ip]
   96662:	f8b5 8000 	ldrh.w	r8, [r5]
   96666:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   9666a:	f850 6036 	ldr.w	r6, [r0, r6, lsl #3]
   9666e:	886f      	ldrh	r7, [r5, #2]
   96670:	42b1      	cmp	r1, r6
   96672:	d01b      	beq.n	966ac <mw_tree_container_change_node_selected_state+0x68>
	for (i = 0U; i < tree->node_count; i++)
   96674:	b16f      	cbz	r7, 96692 <mw_tree_container_change_node_selected_state+0x4e>
		if (tree->nodes_array[i].handle == handle)
   96676:	6803      	ldr	r3, [r0, #0]
   96678:	4299      	cmp	r1, r3
   9667a:	d014      	beq.n	966a6 <mw_tree_container_change_node_selected_state+0x62>
   9667c:	4623      	mov	r3, r4
   9667e:	4604      	mov	r4, r0
   96680:	e003      	b.n	9668a <mw_tree_container_change_node_selected_state+0x46>
   96682:	f854 6f18 	ldr.w	r6, [r4, #24]!
   96686:	42b1      	cmp	r1, r6
   96688:	d00e      	beq.n	966a8 <mw_tree_container_change_node_selected_state+0x64>
	for (i = 0U; i < tree->node_count; i++)
   9668a:	3301      	adds	r3, #1
   9668c:	b29b      	uxth	r3, r3
   9668e:	429f      	cmp	r7, r3
   96690:	d1f7      	bne.n	96682 <mw_tree_container_change_node_selected_state+0x3e>
	}

	node_id = get_id_from_handle(tree, node_handle);
	if (node_id == tree->nodes_array_size)
	{
		MW_ASSERT((bool)false, "Bad node handle");
   96692:	4b2a      	ldr	r3, [pc, #168]	; (9673c <mw_tree_container_change_node_selected_state+0xf8>)
   96694:	f44f 7215 	mov.w	r2, #596	; 0x254
   96698:	4929      	ldr	r1, [pc, #164]	; (96740 <mw_tree_container_change_node_selected_state+0xfc>)
   9669a:	2000      	movs	r0, #0
   9669c:	4c29      	ldr	r4, [pc, #164]	; (96744 <mw_tree_container_change_node_selected_state+0x100>)
   9669e:	47a0      	blx	r4

		return (false);
   966a0:	2000      	movs	r0, #0
   966a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tree->nodes_array[i].handle == handle)
   966a6:	4623      	mov	r3, r4
			cached_id = i;
   966a8:	f8ac 3000 	strh.w	r3, [ip]
	if (node_id == tree->nodes_array_size)
   966ac:	4598      	cmp	r8, r3
   966ae:	d0f0      	beq.n	96692 <mw_tree_container_change_node_selected_state+0x4e>
	}

	/* check if selection type is allowed */
	if (((tree->tree_flags & MW_TREE_CONTAINER_FOLDER_SELECT_ONLY) == MW_TREE_CONTAINER_FOLDER_SELECT_ONLY &&
			(tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U) ||
   966b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (((tree->tree_flags & MW_TREE_CONTAINER_FOLDER_SELECT_ONLY) == MW_TREE_CONTAINER_FOLDER_SELECT_ONLY &&
   966b4:	f01e 0f04 	tst.w	lr, #4
			(tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U) ||
   966b8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	if (((tree->tree_flags & MW_TREE_CONTAINER_FOLDER_SELECT_ONLY) == MW_TREE_CONTAINER_FOLDER_SELECT_ONLY &&
   966bc:	d012      	beq.n	966e4 <mw_tree_container_change_node_selected_state+0xa0>
			(tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U) ||
   966be:	18c1      	adds	r1, r0, r3
	if (((tree->tree_flags & MW_TREE_CONTAINER_FOLDER_SELECT_ONLY) == MW_TREE_CONTAINER_FOLDER_SELECT_ONLY &&
   966c0:	7d89      	ldrb	r1, [r1, #22]
   966c2:	078c      	lsls	r4, r1, #30
   966c4:	d5ec      	bpl.n	966a0 <mw_tree_container_change_node_selected_state+0x5c>
			(tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U) ||
   966c6:	f01e 0f08 	tst.w	lr, #8
   966ca:	d1e9      	bne.n	966a0 <mw_tree_container_change_node_selected_state+0x5c>
					(tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER))
	{
		return (false);
	}

	if (is_selected)
   966cc:	b19a      	cbz	r2, 966f6 <mw_tree_container_change_node_selected_state+0xb2>
	{
		/* check if single select only */
		if ((tree->tree_flags & MW_TREE_CONTAINER_SINGLE_SELECT_ONLY) == MW_TREE_CONTAINER_SINGLE_SELECT_ONLY)
   966ce:	f01e 0f02 	tst.w	lr, #2
   966d2:	d118      	bne.n	96706 <mw_tree_container_change_node_selected_state+0xc2>
		{
			/* single select only so deselect everything */
			mw_tree_container_deselect_all_nodes(tree);
		}

		tree->nodes_array[node_id].node_flags |= MW_TREE_CONTAINER_NODE_IS_SELECTED;
   966d4:	4403      	add	r3, r0
   966d6:	7d99      	ldrb	r1, [r3, #22]
	else
	{
		tree->nodes_array[node_id].node_flags &= (uint8_t)(~MW_TREE_CONTAINER_NODE_IS_SELECTED);
	}

	return (true);
   966d8:	4610      	mov	r0, r2
		tree->nodes_array[node_id].node_flags |= MW_TREE_CONTAINER_NODE_IS_SELECTED;
   966da:	f041 0201 	orr.w	r2, r1, #1
   966de:	759a      	strb	r2, [r3, #22]
   966e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U) ||
   966e4:	f01e 0f08 	tst.w	lr, #8
   966e8:	d0f0      	beq.n	966cc <mw_tree_container_change_node_selected_state+0x88>
					(tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER))
   966ea:	18c1      	adds	r1, r0, r3
			((tree->tree_flags & MW_TREE_CONTAINER_FILE_SELECT_ONLY) == MW_TREE_CONTAINER_FILE_SELECT_ONLY &&
   966ec:	7d89      	ldrb	r1, [r1, #22]
   966ee:	0789      	lsls	r1, r1, #30
   966f0:	d4d6      	bmi.n	966a0 <mw_tree_container_change_node_selected_state+0x5c>
	if (is_selected)
   966f2:	2a00      	cmp	r2, #0
   966f4:	d1eb      	bne.n	966ce <mw_tree_container_change_node_selected_state+0x8a>
		tree->nodes_array[node_id].node_flags &= (uint8_t)(~MW_TREE_CONTAINER_NODE_IS_SELECTED);
   966f6:	4403      	add	r3, r0
   966f8:	7d9a      	ldrb	r2, [r3, #22]
	return (true);
   966fa:	2001      	movs	r0, #1
		tree->nodes_array[node_id].node_flags &= (uint8_t)(~MW_TREE_CONTAINER_NODE_IS_SELECTED);
   966fc:	f022 0201 	bic.w	r2, r2, #1
   96700:	759a      	strb	r2, [r3, #22]
   96702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		MW_ASSERT((bool)false, "Null pointer");

		return;
	}

	for (i = 0U; i < tree->node_count; i++)
   96706:	2f00      	cmp	r7, #0
   96708:	d0e4      	beq.n	966d4 <mw_tree_container_change_node_selected_state+0x90>
   9670a:	2100      	movs	r1, #0
	{
		tree->nodes_array[i].node_flags &= (uint8_t)(~MW_TREE_CONTAINER_NODE_IS_SELECTED);
   9670c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   96710:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   96714:	7d84      	ldrb	r4, [r0, #22]
	for (i = 0U; i < tree->node_count; i++)
   96716:	3101      	adds	r1, #1
		tree->nodes_array[i].node_flags &= (uint8_t)(~MW_TREE_CONTAINER_NODE_IS_SELECTED);
   96718:	f024 0401 	bic.w	r4, r4, #1
   9671c:	7584      	strb	r4, [r0, #22]
	for (i = 0U; i < tree->node_count; i++)
   9671e:	8868      	ldrh	r0, [r5, #2]
   96720:	b289      	uxth	r1, r1
   96722:	4288      	cmp	r0, r1
   96724:	6868      	ldr	r0, [r5, #4]
   96726:	d8f1      	bhi.n	9670c <mw_tree_container_change_node_selected_state+0xc8>
   96728:	e7d4      	b.n	966d4 <mw_tree_container_change_node_selected_state+0x90>
		MW_ASSERT((bool)false, "Null pointer");
   9672a:	4b07      	ldr	r3, [pc, #28]	; (96748 <mw_tree_container_change_node_selected_state+0x104>)
   9672c:	f240 2246 	movw	r2, #582	; 0x246
   96730:	4903      	ldr	r1, [pc, #12]	; (96740 <mw_tree_container_change_node_selected_state+0xfc>)
   96732:	4c04      	ldr	r4, [pc, #16]	; (96744 <mw_tree_container_change_node_selected_state+0x100>)
   96734:	47a0      	blx	r4
		return (false);
   96736:	4628      	mov	r0, r5
   96738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9673c:	000abd0c 	.word	0x000abd0c
   96740:	000abb90 	.word	0x000abb90
   96744:	00095add 	.word	0x00095add
   96748:	000a64a0 	.word	0x000a64a0
   9674c:	200727b4 	.word	0x200727b4

00096750 <mw_tree_container_change_folder_node_open_state>:
{
   96750:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (tree == NULL)
   96752:	2800      	cmp	r0, #0
   96754:	d043      	beq.n	967de <mw_tree_container_change_folder_node_open_state+0x8e>
	if (tree->nodes_array[cached_id].handle == handle)
   96756:	4f24      	ldr	r7, [pc, #144]	; (967e8 <mw_tree_container_change_folder_node_open_state+0x98>)
   96758:	6846      	ldr	r6, [r0, #4]
   9675a:	883b      	ldrh	r3, [r7, #0]
   9675c:	4604      	mov	r4, r0
   9675e:	f8b0 e000 	ldrh.w	lr, [r0]
   96762:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   96766:	f856 0030 	ldr.w	r0, [r6, r0, lsl #3]
   9676a:	4281      	cmp	r1, r0
   9676c:	d01b      	beq.n	967a6 <mw_tree_container_change_folder_node_open_state+0x56>
   9676e:	8865      	ldrh	r5, [r4, #2]
	for (i = 0U; i < tree->node_count; i++)
   96770:	b16d      	cbz	r5, 9678e <mw_tree_container_change_folder_node_open_state+0x3e>
		if (tree->nodes_array[i].handle == handle)
   96772:	6833      	ldr	r3, [r6, #0]
   96774:	4299      	cmp	r1, r3
   96776:	d014      	beq.n	967a2 <mw_tree_container_change_folder_node_open_state+0x52>
   96778:	4630      	mov	r0, r6
   9677a:	2300      	movs	r3, #0
   9677c:	e003      	b.n	96786 <mw_tree_container_change_folder_node_open_state+0x36>
   9677e:	f850 4f18 	ldr.w	r4, [r0, #24]!
   96782:	42a1      	cmp	r1, r4
   96784:	d00e      	beq.n	967a4 <mw_tree_container_change_folder_node_open_state+0x54>
	for (i = 0U; i < tree->node_count; i++)
   96786:	3301      	adds	r3, #1
   96788:	b29b      	uxth	r3, r3
   9678a:	429d      	cmp	r5, r3
   9678c:	d1f7      	bne.n	9677e <mw_tree_container_change_folder_node_open_state+0x2e>
		MW_ASSERT((bool)false, "Bad node handle");
   9678e:	4c17      	ldr	r4, [pc, #92]	; (967ec <mw_tree_container_change_folder_node_open_state+0x9c>)
   96790:	4b17      	ldr	r3, [pc, #92]	; (967f0 <mw_tree_container_change_folder_node_open_state+0xa0>)
   96792:	46a4      	mov	ip, r4
}
   96794:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		MW_ASSERT((bool)false, "Bad node handle");
   96798:	f240 2283 	movw	r2, #643	; 0x283
   9679c:	4915      	ldr	r1, [pc, #84]	; (967f4 <mw_tree_container_change_folder_node_open_state+0xa4>)
   9679e:	2000      	movs	r0, #0
   967a0:	4760      	bx	ip
		if (tree->nodes_array[i].handle == handle)
   967a2:	2300      	movs	r3, #0
			cached_id = i;
   967a4:	803b      	strh	r3, [r7, #0]
	if (folder_id == tree->nodes_array_size)
   967a6:	459e      	cmp	lr, r3
   967a8:	d0f1      	beq.n	9678e <mw_tree_container_change_folder_node_open_state+0x3e>
	if ((tree->nodes_array[folder_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U)
   967aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   967ae:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   967b2:	7d99      	ldrb	r1, [r3, #22]
   967b4:	f011 0002 	ands.w	r0, r1, #2
   967b8:	d008      	beq.n	967cc <mw_tree_container_change_folder_node_open_state+0x7c>
	if (is_open)
   967ba:	b91a      	cbnz	r2, 967c4 <mw_tree_container_change_folder_node_open_state+0x74>
		tree->nodes_array[folder_id].node_flags &= (uint8_t)(~MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN);
   967bc:	f021 0104 	bic.w	r1, r1, #4
   967c0:	7599      	strb	r1, [r3, #22]
   967c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tree->nodes_array[folder_id].node_flags |= MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN;
   967c4:	f041 0104 	orr.w	r1, r1, #4
   967c8:	7599      	strb	r1, [r3, #22]
   967ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		MW_ASSERT((bool)false, "Not a folder");
   967cc:	f240 228a 	movw	r2, #650	; 0x28a
   967d0:	4b09      	ldr	r3, [pc, #36]	; (967f8 <mw_tree_container_change_folder_node_open_state+0xa8>)
   967d2:	4c06      	ldr	r4, [pc, #24]	; (967ec <mw_tree_container_change_folder_node_open_state+0x9c>)
   967d4:	4907      	ldr	r1, [pc, #28]	; (967f4 <mw_tree_container_change_folder_node_open_state+0xa4>)
   967d6:	46a4      	mov	ip, r4
}
   967d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		MW_ASSERT((bool)false, "Not a folder");
   967dc:	4760      	bx	ip
		MW_ASSERT((bool)false, "Null pointer");
   967de:	4b07      	ldr	r3, [pc, #28]	; (967fc <mw_tree_container_change_folder_node_open_state+0xac>)
   967e0:	f240 227b 	movw	r2, #635	; 0x27b
   967e4:	e7f5      	b.n	967d2 <mw_tree_container_change_folder_node_open_state+0x82>
   967e6:	bf00      	nop
   967e8:	200727b4 	.word	0x200727b4
   967ec:	00095add 	.word	0x00095add
   967f0:	000abd0c 	.word	0x000abd0c
   967f4:	000abbc0 	.word	0x000abbc0
   967f8:	000abcfc 	.word	0x000abcfc
   967fc:	000a64a0 	.word	0x000a64a0

00096800 <mw_tree_container_remove_node_children>:
{
   96800:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (tree == NULL)
   96802:	2800      	cmp	r0, #0
   96804:	d07d      	beq.n	96902 <mw_tree_container_remove_node_children+0x102>
   96806:	460d      	mov	r5, r1
	if (tree->nodes_array[cached_id].handle == handle)
   96808:	4e40      	ldr	r6, [pc, #256]	; (9690c <mw_tree_container_remove_node_children+0x10c>)
   9680a:	6841      	ldr	r1, [r0, #4]
   9680c:	8833      	ldrh	r3, [r6, #0]
   9680e:	4686      	mov	lr, r0
   96810:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   96814:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
   96818:	8807      	ldrh	r7, [r0, #0]
   9681a:	4295      	cmp	r5, r2
   9681c:	8840      	ldrh	r0, [r0, #2]
   9681e:	d01a      	beq.n	96856 <mw_tree_container_remove_node_children+0x56>
	for (i = 0U; i < tree->node_count; i++)
   96820:	b168      	cbz	r0, 9683e <mw_tree_container_remove_node_children+0x3e>
		if (tree->nodes_array[i].handle == handle)
   96822:	680b      	ldr	r3, [r1, #0]
   96824:	429d      	cmp	r5, r3
   96826:	d014      	beq.n	96852 <mw_tree_container_remove_node_children+0x52>
   96828:	460a      	mov	r2, r1
   9682a:	2300      	movs	r3, #0
   9682c:	e003      	b.n	96836 <mw_tree_container_remove_node_children+0x36>
   9682e:	f852 4f18 	ldr.w	r4, [r2, #24]!
   96832:	42a5      	cmp	r5, r4
   96834:	d00e      	beq.n	96854 <mw_tree_container_remove_node_children+0x54>
	for (i = 0U; i < tree->node_count; i++)
   96836:	3301      	adds	r3, #1
   96838:	b29b      	uxth	r3, r3
   9683a:	4298      	cmp	r0, r3
   9683c:	d1f7      	bne.n	9682e <mw_tree_container_remove_node_children+0x2e>
		MW_ASSERT((bool)false, "Bad node handle");
   9683e:	4c34      	ldr	r4, [pc, #208]	; (96910 <mw_tree_container_remove_node_children+0x110>)
   96840:	4b34      	ldr	r3, [pc, #208]	; (96914 <mw_tree_container_remove_node_children+0x114>)
   96842:	46a4      	mov	ip, r4
}
   96844:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		MW_ASSERT((bool)false, "Bad node handle");
   96848:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   9684c:	4932      	ldr	r1, [pc, #200]	; (96918 <mw_tree_container_remove_node_children+0x118>)
   9684e:	2000      	movs	r0, #0
   96850:	4760      	bx	ip
		if (tree->nodes_array[i].handle == handle)
   96852:	2300      	movs	r3, #0
			cached_id = i;
   96854:	8033      	strh	r3, [r6, #0]
	if (folder_id == tree->nodes_array_size)
   96856:	429f      	cmp	r7, r3
   96858:	d0f1      	beq.n	9683e <mw_tree_container_remove_node_children+0x3e>
	if ((tree->nodes_array[folder_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U)
   9685a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   9685e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   96862:	7d94      	ldrb	r4, [r2, #22]
   96864:	f014 0402 	ands.w	r4, r4, #2
   96868:	d03d      	beq.n	968e6 <mw_tree_container_remove_node_children+0xe6>
	for (i = parent_folder_id + 1U; ; i++)
   9686a:	1c5e      	adds	r6, r3, #1
   9686c:	b2b6      	uxth	r6, r6
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   9686e:	0075      	lsls	r5, r6, #1
   96870:	19ac      	adds	r4, r5, r6
   96872:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
	parent_folder_level = tree->nodes_array[parent_folder_id].level;
   96876:	f8b2 c004 	ldrh.w	ip, [r2, #4]
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   9687a:	88a2      	ldrh	r2, [r4, #4]
   9687c:	4562      	cmp	r2, ip
   9687e:	d93c      	bls.n	968fa <mw_tree_container_remove_node_children+0xfa>
   96880:	42b0      	cmp	r0, r6
   96882:	d03a      	beq.n	968fa <mw_tree_container_remove_node_children+0xfa>
   96884:	4632      	mov	r2, r6
   96886:	e001      	b.n	9688c <mw_tree_container_remove_node_children+0x8c>
   96888:	4290      	cmp	r0, r2
   9688a:	d00a      	beq.n	968a2 <mw_tree_container_remove_node_children+0xa2>
	for (i = parent_folder_id + 1U; ; i++)
   9688c:	1c54      	adds	r4, r2, #1
   9688e:	1ad7      	subs	r7, r2, r3
   96890:	b2a2      	uxth	r2, r4
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   96892:	eb02 0442 	add.w	r4, r2, r2, lsl #1
   96896:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   9689a:	88a4      	ldrh	r4, [r4, #4]
   9689c:	b2bf      	uxth	r7, r7
   9689e:	4564      	cmp	r4, ip
   968a0:	d8f2      	bhi.n	96888 <mw_tree_container_remove_node_children+0x88>
   968a2:	46bc      	mov	ip, r7
	for (i = parent_folder_id + 1U; i + remove_count < tree->node_count; i++)
   968a4:	eb06 040c 	add.w	r4, r6, ip
   968a8:	4284      	cmp	r4, r0
   968aa:	db03      	blt.n	968b4 <mw_tree_container_remove_node_children+0xb4>
   968ac:	e017      	b.n	968de <mw_tree_container_remove_node_children+0xde>
   968ae:	f8de 1004 	ldr.w	r1, [lr, #4]
   968b2:	0075      	lsls	r5, r6, #1
		tree->nodes_array[i] = tree->nodes_array[i + remove_count];
   968b4:	4435      	add	r5, r6
   968b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   968ba:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
   968be:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   968c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   968c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   968c6:	e894 0003 	ldmia.w	r4, {r0, r1}
   968ca:	e885 0003 	stmia.w	r5, {r0, r1}
	for (i = parent_folder_id + 1U; i + remove_count < tree->node_count; i++)
   968ce:	3601      	adds	r6, #1
   968d0:	b2b6      	uxth	r6, r6
   968d2:	f8be 0002 	ldrh.w	r0, [lr, #2]
   968d6:	eb06 040c 	add.w	r4, r6, ip
   968da:	4284      	cmp	r4, r0
   968dc:	dbe7      	blt.n	968ae <mw_tree_container_remove_node_children+0xae>
	tree->node_count -= remove_count;
   968de:	1bc7      	subs	r7, r0, r7
   968e0:	f8ae 7002 	strh.w	r7, [lr, #2]
   968e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		MW_ASSERT((bool)false, "Not a folder");
   968e6:	4620      	mov	r0, r4
   968e8:	f240 22cf 	movw	r2, #719	; 0x2cf
   968ec:	4b0b      	ldr	r3, [pc, #44]	; (9691c <mw_tree_container_remove_node_children+0x11c>)
   968ee:	4c08      	ldr	r4, [pc, #32]	; (96910 <mw_tree_container_remove_node_children+0x110>)
   968f0:	4909      	ldr	r1, [pc, #36]	; (96918 <mw_tree_container_remove_node_children+0x118>)
   968f2:	46a4      	mov	ip, r4
}
   968f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		MW_ASSERT((bool)false, "Not a folder");
   968f8:	4760      	bx	ip
		if (tree->nodes_array[i].level <= parent_folder_level || i == tree->node_count)
   968fa:	f04f 0c00 	mov.w	ip, #0
	remove_count = 0U;
   968fe:	4667      	mov	r7, ip
   96900:	e7d0      	b.n	968a4 <mw_tree_container_remove_node_children+0xa4>
		MW_ASSERT((bool)false, "Null pointer");
   96902:	4b07      	ldr	r3, [pc, #28]	; (96920 <mw_tree_container_remove_node_children+0x120>)
   96904:	f44f 7230 	mov.w	r2, #704	; 0x2c0
   96908:	e7f1      	b.n	968ee <mw_tree_container_remove_node_children+0xee>
   9690a:	bf00      	nop
   9690c:	200727b4 	.word	0x200727b4
   96910:	00095add 	.word	0x00095add
   96914:	000abd0c 	.word	0x000abd0c
   96918:	000abbf0 	.word	0x000abbf0
   9691c:	000abcfc 	.word	0x000abcfc
   96920:	000a64a0 	.word	0x000a64a0

00096924 <mw_tree_container_get_handle_from_position>:
{
   96924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tree == NULL)
   96928:	4606      	mov	r6, r0
   9692a:	2800      	cmp	r0, #0
   9692c:	f000 809a 	beq.w	96a64 <mw_tree_container_get_handle_from_position+0x140>
	if (tree->nodes_array[cached_id].handle == handle)
   96930:	f8df 8158 	ldr.w	r8, [pc, #344]	; 96a8c <mw_tree_container_get_handle_from_position+0x168>
   96934:	f8d0 e004 	ldr.w	lr, [r0, #4]
   96938:	f8b8 4000 	ldrh.w	r4, [r8]
   9693c:	f8b0 c000 	ldrh.w	ip, [r0]
   96940:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   96944:	f85e 0030 	ldr.w	r0, [lr, r0, lsl #3]
   96948:	8877      	ldrh	r7, [r6, #2]
   9694a:	4281      	cmp	r1, r0
   9694c:	d01c      	beq.n	96988 <mw_tree_container_get_handle_from_position+0x64>
	for (i = 0U; i < tree->node_count; i++)
   9694e:	b177      	cbz	r7, 9696e <mw_tree_container_get_handle_from_position+0x4a>
		if (tree->nodes_array[i].handle == handle)
   96950:	f8de 0000 	ldr.w	r0, [lr]
   96954:	4281      	cmp	r1, r0
   96956:	d014      	beq.n	96982 <mw_tree_container_get_handle_from_position+0x5e>
   96958:	4670      	mov	r0, lr
   9695a:	2400      	movs	r4, #0
   9695c:	e003      	b.n	96966 <mw_tree_container_get_handle_from_position+0x42>
   9695e:	f850 5f18 	ldr.w	r5, [r0, #24]!
   96962:	42a9      	cmp	r1, r5
   96964:	d00e      	beq.n	96984 <mw_tree_container_get_handle_from_position+0x60>
	for (i = 0U; i < tree->node_count; i++)
   96966:	3401      	adds	r4, #1
   96968:	b2a4      	uxth	r4, r4
   9696a:	42a7      	cmp	r7, r4
   9696c:	d1f7      	bne.n	9695e <mw_tree_container_get_handle_from_position+0x3a>
		MW_ASSERT((bool)false, "Invalid parent folder handle");
   9696e:	4b42      	ldr	r3, [pc, #264]	; (96a78 <mw_tree_container_get_handle_from_position+0x154>)
   96970:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   96974:	4941      	ldr	r1, [pc, #260]	; (96a7c <mw_tree_container_get_handle_from_position+0x158>)
   96976:	2000      	movs	r0, #0
   96978:	4c41      	ldr	r4, [pc, #260]	; (96a80 <mw_tree_container_get_handle_from_position+0x15c>)
   9697a:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   9697c:	2000      	movs	r0, #0
   9697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (tree->nodes_array[i].handle == handle)
   96982:	2400      	movs	r4, #0
			cached_id = i;
   96984:	f8a8 4000 	strh.w	r4, [r8]
	if (parent_folder_id == tree->nodes_array_size)
   96988:	45a4      	cmp	ip, r4
   9698a:	d0f0      	beq.n	9696e <mw_tree_container_get_handle_from_position+0x4a>
	if ((tree->nodes_array[parent_folder_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == 0U)
   9698c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   96990:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
   96994:	7d8d      	ldrb	r5, [r1, #22]
   96996:	f015 0502 	ands.w	r5, r5, #2
   9699a:	d056      	beq.n	96a4a <mw_tree_container_get_handle_from_position+0x126>
		if (tree->nodes_array[i].level < parent_folder_level || i == tree->node_count)
   9699c:	42a7      	cmp	r7, r4
	parent_folder_level = tree->nodes_array[parent_folder_id].level;
   9699e:	8888      	ldrh	r0, [r1, #4]
		if (tree->nodes_array[i].level < parent_folder_level || i == tree->node_count)
   969a0:	d028      	beq.n	969f4 <mw_tree_container_get_handle_from_position+0xd0>
   969a2:	b352      	cbz	r2, 969fa <mw_tree_container_get_handle_from_position+0xd6>
   969a4:	4602      	mov	r2, r0
   969a6:	46e1      	mov	r9, ip
   969a8:	f04f 0800 	mov.w	r8, #0
   969ac:	e018      	b.n	969e0 <mw_tree_container_get_handle_from_position+0xbc>
			if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   969ae:	f015 0f04 	tst.w	r5, #4
   969b2:	d148      	bne.n	96a46 <mw_tree_container_get_handle_from_position+0x122>
				skip_level = tree->nodes_array[i].level + 1U;
   969b4:	3201      	adds	r2, #1
   969b6:	fa1f f982 	uxth.w	r9, r2
		if (selected_only && (tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_IS_SELECTED) == 0U)
   969ba:	07ed      	lsls	r5, r5, #31
   969bc:	d505      	bpl.n	969ca <mw_tree_container_get_handle_from_position+0xa6>
		if (position_count == position)
   969be:	4543      	cmp	r3, r8
   969c0:	d04d      	beq.n	96a5e <mw_tree_container_get_handle_from_position+0x13a>
		position_count++;
   969c2:	f108 0801 	add.w	r8, r8, #1
   969c6:	fa1f f888 	uxth.w	r8, r8
	for (i = parent_folder_id; ; i++)
   969ca:	3401      	adds	r4, #1
   969cc:	b2a4      	uxth	r4, r4
		if (tree->nodes_array[i].level < parent_folder_level || i == tree->node_count)
   969ce:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   969d2:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
   969d6:	888a      	ldrh	r2, [r1, #4]
   969d8:	4290      	cmp	r0, r2
   969da:	d80b      	bhi.n	969f4 <mw_tree_container_get_handle_from_position+0xd0>
   969dc:	42bc      	cmp	r4, r7
   969de:	d009      	beq.n	969f4 <mw_tree_container_get_handle_from_position+0xd0>
		if (tree->nodes_array[i].level >= skip_level)
   969e0:	454a      	cmp	r2, r9
   969e2:	d2f2      	bcs.n	969ca <mw_tree_container_get_handle_from_position+0xa6>
		if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   969e4:	7d8d      	ldrb	r5, [r1, #22]
   969e6:	f015 0f02 	tst.w	r5, #2
   969ea:	d1e0      	bne.n	969ae <mw_tree_container_get_handle_from_position+0x8a>
		if ((tree->tree_flags & MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY) == MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY &&
   969ec:	7b32      	ldrb	r2, [r6, #12]
   969ee:	06d2      	lsls	r2, r2, #27
   969f0:	d4eb      	bmi.n	969ca <mw_tree_container_get_handle_from_position+0xa6>
   969f2:	e7e2      	b.n	969ba <mw_tree_container_get_handle_from_position+0x96>
	return (MW_INVALID_HANDLE);
   969f4:	2000      	movs	r0, #0
   969f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (tree->nodes_array[i].level < parent_folder_level || i == tree->node_count)
   969fa:	4605      	mov	r5, r0
   969fc:	46e0      	mov	r8, ip
   969fe:	e012      	b.n	96a26 <mw_tree_container_get_handle_from_position+0x102>
		if ((tree->tree_flags & MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY) == MW_TREE_CONTAINER_SHOW_FOLDERS_ONLY &&
   96a00:	7b35      	ldrb	r5, [r6, #12]
   96a02:	06ed      	lsls	r5, r5, #27
   96a04:	d404      	bmi.n	96a10 <mw_tree_container_get_handle_from_position+0xec>
		if (position_count == position)
   96a06:	4293      	cmp	r3, r2
		position_count++;
   96a08:	f102 0201 	add.w	r2, r2, #1
		if (position_count == position)
   96a0c:	d027      	beq.n	96a5e <mw_tree_container_get_handle_from_position+0x13a>
		position_count++;
   96a0e:	b292      	uxth	r2, r2
	for (i = parent_folder_id; ; i++)
   96a10:	3401      	adds	r4, #1
   96a12:	b2a4      	uxth	r4, r4
		if (tree->nodes_array[i].level < parent_folder_level || i == tree->node_count)
   96a14:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   96a18:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
   96a1c:	888d      	ldrh	r5, [r1, #4]
   96a1e:	42a8      	cmp	r0, r5
   96a20:	d8e8      	bhi.n	969f4 <mw_tree_container_get_handle_from_position+0xd0>
   96a22:	42bc      	cmp	r4, r7
   96a24:	d0e6      	beq.n	969f4 <mw_tree_container_get_handle_from_position+0xd0>
		if (tree->nodes_array[i].level >= skip_level)
   96a26:	4545      	cmp	r5, r8
   96a28:	d2f2      	bcs.n	96a10 <mw_tree_container_get_handle_from_position+0xec>
		if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   96a2a:	f891 9016 	ldrb.w	r9, [r1, #22]
   96a2e:	f019 0f02 	tst.w	r9, #2
   96a32:	d0e5      	beq.n	96a00 <mw_tree_container_get_handle_from_position+0xdc>
			if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   96a34:	f019 0f04 	tst.w	r9, #4
				skip_level = tree->nodes_array[i].level + 1U;
   96a38:	f105 0501 	add.w	r5, r5, #1
			if ((tree->nodes_array[i].node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   96a3c:	bf14      	ite	ne
   96a3e:	46e0      	movne	r8, ip
				skip_level = tree->nodes_array[i].level + 1U;
   96a40:	fa1f f885 	uxtheq.w	r8, r5
   96a44:	e7df      	b.n	96a06 <mw_tree_container_get_handle_from_position+0xe2>
   96a46:	46e1      	mov	r9, ip
   96a48:	e7b7      	b.n	969ba <mw_tree_container_get_handle_from_position+0x96>
		MW_ASSERT((bool)false, "Parent node is not a folder");
   96a4a:	4628      	mov	r0, r5
   96a4c:	4b0d      	ldr	r3, [pc, #52]	; (96a84 <mw_tree_container_get_handle_from_position+0x160>)
   96a4e:	f240 22f3 	movw	r2, #755	; 0x2f3
   96a52:	490a      	ldr	r1, [pc, #40]	; (96a7c <mw_tree_container_get_handle_from_position+0x158>)
   96a54:	4c0a      	ldr	r4, [pc, #40]	; (96a80 <mw_tree_container_get_handle_from_position+0x15c>)
   96a56:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   96a58:	4628      	mov	r0, r5
   96a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return (tree->nodes_array[i].handle);
   96a5e:	6808      	ldr	r0, [r1, #0]
   96a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		MW_ASSERT((bool)false, "Null pointer");
   96a64:	4b08      	ldr	r3, [pc, #32]	; (96a88 <mw_tree_container_get_handle_from_position+0x164>)
   96a66:	f44f 7239 	mov.w	r2, #740	; 0x2e4
   96a6a:	4904      	ldr	r1, [pc, #16]	; (96a7c <mw_tree_container_get_handle_from_position+0x158>)
   96a6c:	4c04      	ldr	r4, [pc, #16]	; (96a80 <mw_tree_container_get_handle_from_position+0x15c>)
   96a6e:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   96a70:	4630      	mov	r0, r6
   96a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   96a76:	bf00      	nop
   96a78:	000abd38 	.word	0x000abd38
   96a7c:	000abc18 	.word	0x000abc18
   96a80:	00095add 	.word	0x00095add
   96a84:	000abd58 	.word	0x000abd58
   96a88:	000a64a0 	.word	0x000a64a0
   96a8c:	200727b4 	.word	0x200727b4

00096a90 <mw_tree_container_get_node_flags>:
{
   96a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (tree == NULL)
   96a92:	4604      	mov	r4, r0
   96a94:	b360      	cbz	r0, 96af0 <mw_tree_container_get_node_flags+0x60>
	if (tree->nodes_array[cached_id].handle == handle)
   96a96:	4e1a      	ldr	r6, [pc, #104]	; (96b00 <mw_tree_container_get_node_flags+0x70>)
   96a98:	6845      	ldr	r5, [r0, #4]
   96a9a:	8833      	ldrh	r3, [r6, #0]
   96a9c:	8807      	ldrh	r7, [r0, #0]
   96a9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   96aa2:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
   96aa6:	4291      	cmp	r1, r2
   96aa8:	d01a      	beq.n	96ae0 <mw_tree_container_get_node_flags+0x50>
   96aaa:	8844      	ldrh	r4, [r0, #2]
	for (i = 0U; i < tree->node_count; i++)
   96aac:	b16c      	cbz	r4, 96aca <mw_tree_container_get_node_flags+0x3a>
		if (tree->nodes_array[i].handle == handle)
   96aae:	682b      	ldr	r3, [r5, #0]
   96ab0:	4299      	cmp	r1, r3
   96ab2:	d013      	beq.n	96adc <mw_tree_container_get_node_flags+0x4c>
   96ab4:	462a      	mov	r2, r5
   96ab6:	2300      	movs	r3, #0
   96ab8:	e003      	b.n	96ac2 <mw_tree_container_get_node_flags+0x32>
   96aba:	f852 0f18 	ldr.w	r0, [r2, #24]!
   96abe:	4281      	cmp	r1, r0
   96ac0:	d00d      	beq.n	96ade <mw_tree_container_get_node_flags+0x4e>
	for (i = 0U; i < tree->node_count; i++)
   96ac2:	3301      	adds	r3, #1
   96ac4:	b29b      	uxth	r3, r3
   96ac6:	429c      	cmp	r4, r3
   96ac8:	d1f7      	bne.n	96aba <mw_tree_container_get_node_flags+0x2a>
		MW_ASSERT((bool)false, "Bad node handle");
   96aca:	4b0e      	ldr	r3, [pc, #56]	; (96b04 <mw_tree_container_get_node_flags+0x74>)
   96acc:	f240 323a 	movw	r2, #826	; 0x33a
   96ad0:	490d      	ldr	r1, [pc, #52]	; (96b08 <mw_tree_container_get_node_flags+0x78>)
   96ad2:	2000      	movs	r0, #0
   96ad4:	4c0d      	ldr	r4, [pc, #52]	; (96b0c <mw_tree_container_get_node_flags+0x7c>)
   96ad6:	47a0      	blx	r4
		return (0U);
   96ad8:	2000      	movs	r0, #0
   96ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tree->nodes_array[i].handle == handle)
   96adc:	2300      	movs	r3, #0
			cached_id = i;
   96ade:	8033      	strh	r3, [r6, #0]
	if (node_id == tree->nodes_array_size)
   96ae0:	429f      	cmp	r7, r3
   96ae2:	d0f2      	beq.n	96aca <mw_tree_container_get_node_flags+0x3a>
	return (tree->nodes_array[node_id].node_flags);
   96ae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   96ae8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   96aec:	7d98      	ldrb	r0, [r3, #22]
}
   96aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MW_ASSERT((bool)false, "Null pointer");
   96af0:	4b07      	ldr	r3, [pc, #28]	; (96b10 <mw_tree_container_get_node_flags+0x80>)
   96af2:	f240 3232 	movw	r2, #818	; 0x332
   96af6:	4904      	ldr	r1, [pc, #16]	; (96b08 <mw_tree_container_get_node_flags+0x78>)
   96af8:	4d04      	ldr	r5, [pc, #16]	; (96b0c <mw_tree_container_get_node_flags+0x7c>)
   96afa:	47a8      	blx	r5
		return (0U);
   96afc:	4620      	mov	r0, r4
   96afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   96b00:	200727b4 	.word	0x200727b4
   96b04:	000abd0c 	.word	0x000abd0c
   96b08:	000abc44 	.word	0x000abc44
   96b0c:	00095add 	.word	0x00095add
   96b10:	000a64a0 	.word	0x000a64a0

00096b14 <mw_tree_container_get_node_level>:
{
   96b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (tree == NULL)
   96b16:	4604      	mov	r4, r0
   96b18:	b360      	cbz	r0, 96b74 <mw_tree_container_get_node_level+0x60>
	if (tree->nodes_array[cached_id].handle == handle)
   96b1a:	4e1a      	ldr	r6, [pc, #104]	; (96b84 <mw_tree_container_get_node_level+0x70>)
   96b1c:	6845      	ldr	r5, [r0, #4]
   96b1e:	8833      	ldrh	r3, [r6, #0]
   96b20:	8807      	ldrh	r7, [r0, #0]
   96b22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   96b26:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
   96b2a:	4291      	cmp	r1, r2
   96b2c:	d01a      	beq.n	96b64 <mw_tree_container_get_node_level+0x50>
   96b2e:	8844      	ldrh	r4, [r0, #2]
	for (i = 0U; i < tree->node_count; i++)
   96b30:	b16c      	cbz	r4, 96b4e <mw_tree_container_get_node_level+0x3a>
		if (tree->nodes_array[i].handle == handle)
   96b32:	682b      	ldr	r3, [r5, #0]
   96b34:	4299      	cmp	r1, r3
   96b36:	d013      	beq.n	96b60 <mw_tree_container_get_node_level+0x4c>
   96b38:	462a      	mov	r2, r5
   96b3a:	2300      	movs	r3, #0
   96b3c:	e003      	b.n	96b46 <mw_tree_container_get_node_level+0x32>
   96b3e:	f852 0f18 	ldr.w	r0, [r2, #24]!
   96b42:	4281      	cmp	r1, r0
   96b44:	d00d      	beq.n	96b62 <mw_tree_container_get_node_level+0x4e>
	for (i = 0U; i < tree->node_count; i++)
   96b46:	3301      	adds	r3, #1
   96b48:	b29b      	uxth	r3, r3
   96b4a:	429c      	cmp	r4, r3
   96b4c:	d1f7      	bne.n	96b3e <mw_tree_container_get_node_level+0x2a>
		MW_ASSERT((bool)false, "Bad node handle");
   96b4e:	4b0e      	ldr	r3, [pc, #56]	; (96b88 <mw_tree_container_get_node_level+0x74>)
   96b50:	f44f 7254 	mov.w	r2, #848	; 0x350
   96b54:	490d      	ldr	r1, [pc, #52]	; (96b8c <mw_tree_container_get_node_level+0x78>)
   96b56:	2000      	movs	r0, #0
   96b58:	4c0d      	ldr	r4, [pc, #52]	; (96b90 <mw_tree_container_get_node_level+0x7c>)
   96b5a:	47a0      	blx	r4
		return (0U);
   96b5c:	2000      	movs	r0, #0
   96b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tree->nodes_array[i].handle == handle)
   96b60:	2300      	movs	r3, #0
			cached_id = i;
   96b62:	8033      	strh	r3, [r6, #0]
	if (node_id == tree->nodes_array_size)
   96b64:	429f      	cmp	r7, r3
   96b66:	d0f2      	beq.n	96b4e <mw_tree_container_get_node_level+0x3a>
	return (tree->nodes_array[node_id].level);
   96b68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   96b6c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   96b70:	8898      	ldrh	r0, [r3, #4]
}
   96b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MW_ASSERT((bool)false, "Null pointer");
   96b74:	4b07      	ldr	r3, [pc, #28]	; (96b94 <mw_tree_container_get_node_level+0x80>)
   96b76:	f44f 7252 	mov.w	r2, #840	; 0x348
   96b7a:	4904      	ldr	r1, [pc, #16]	; (96b8c <mw_tree_container_get_node_level+0x78>)
   96b7c:	4d04      	ldr	r5, [pc, #16]	; (96b90 <mw_tree_container_get_node_level+0x7c>)
   96b7e:	47a8      	blx	r5
		return (0U);
   96b80:	4620      	mov	r0, r4
   96b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   96b84:	200727b4 	.word	0x200727b4
   96b88:	000abd0c 	.word	0x000abd0c
   96b8c:	000abc68 	.word	0x000abc68
   96b90:	00095add 	.word	0x00095add
   96b94:	000a64a0 	.word	0x000a64a0

00096b98 <mw_tree_container_get_node_label>:
{
   96b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (tree == NULL)
   96b9a:	2800      	cmp	r0, #0
   96b9c:	d032      	beq.n	96c04 <mw_tree_container_get_node_label+0x6c>
   96b9e:	4607      	mov	r7, r0
	if (tree->nodes_array[cached_id].handle == handle)
   96ba0:	481c      	ldr	r0, [pc, #112]	; (96c14 <mw_tree_container_get_node_label+0x7c>)
   96ba2:	687e      	ldr	r6, [r7, #4]
   96ba4:	8803      	ldrh	r3, [r0, #0]
   96ba6:	f8b7 e000 	ldrh.w	lr, [r7]
   96baa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   96bae:	f856 2032 	ldr.w	r2, [r6, r2, lsl #3]
   96bb2:	4291      	cmp	r1, r2
   96bb4:	d01a      	beq.n	96bec <mw_tree_container_get_node_label+0x54>
   96bb6:	887d      	ldrh	r5, [r7, #2]
	for (i = 0U; i < tree->node_count; i++)
   96bb8:	b16d      	cbz	r5, 96bd6 <mw_tree_container_get_node_label+0x3e>
		if (tree->nodes_array[i].handle == handle)
   96bba:	6833      	ldr	r3, [r6, #0]
   96bbc:	4299      	cmp	r1, r3
   96bbe:	d013      	beq.n	96be8 <mw_tree_container_get_node_label+0x50>
   96bc0:	4632      	mov	r2, r6
   96bc2:	2300      	movs	r3, #0
   96bc4:	e003      	b.n	96bce <mw_tree_container_get_node_label+0x36>
   96bc6:	f852 4f18 	ldr.w	r4, [r2, #24]!
   96bca:	42a1      	cmp	r1, r4
   96bcc:	d00d      	beq.n	96bea <mw_tree_container_get_node_label+0x52>
	for (i = 0U; i < tree->node_count; i++)
   96bce:	3301      	adds	r3, #1
   96bd0:	b29b      	uxth	r3, r3
   96bd2:	429d      	cmp	r5, r3
   96bd4:	d1f7      	bne.n	96bc6 <mw_tree_container_get_node_label+0x2e>
		MW_ASSERT((bool)false, "Bad node handle");
   96bd6:	4b10      	ldr	r3, [pc, #64]	; (96c18 <mw_tree_container_get_node_label+0x80>)
   96bd8:	f240 3266 	movw	r2, #870	; 0x366
   96bdc:	490f      	ldr	r1, [pc, #60]	; (96c1c <mw_tree_container_get_node_label+0x84>)
   96bde:	2000      	movs	r0, #0
   96be0:	4c0f      	ldr	r4, [pc, #60]	; (96c20 <mw_tree_container_get_node_label+0x88>)
   96be2:	47a0      	blx	r4
		return (empty_string);
   96be4:	480f      	ldr	r0, [pc, #60]	; (96c24 <mw_tree_container_get_node_label+0x8c>)
   96be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tree->nodes_array[i].handle == handle)
   96be8:	2300      	movs	r3, #0
			cached_id = i;
   96bea:	8003      	strh	r3, [r0, #0]
	if (node_id == tree->nodes_array_size)
   96bec:	459e      	cmp	lr, r3
   96bee:	d0f2      	beq.n	96bd6 <mw_tree_container_get_node_label+0x3e>
	if (node_id == ROOT_FOLDER_ID)
   96bf0:	b12b      	cbz	r3, 96bfe <mw_tree_container_get_node_label+0x66>
	return (tree->nodes_array[node_id].label);
   96bf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   96bf6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   96bfa:	1d98      	adds	r0, r3, #6
}
   96bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return tree->root_folder_label;
   96bfe:	f107 000f 	add.w	r0, r7, #15
   96c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MW_ASSERT((bool)false, "Null pointer");
   96c04:	4b08      	ldr	r3, [pc, #32]	; (96c28 <mw_tree_container_get_node_label+0x90>)
   96c06:	f240 325e 	movw	r2, #862	; 0x35e
   96c0a:	4904      	ldr	r1, [pc, #16]	; (96c1c <mw_tree_container_get_node_label+0x84>)
   96c0c:	4c04      	ldr	r4, [pc, #16]	; (96c20 <mw_tree_container_get_node_label+0x88>)
   96c0e:	47a0      	blx	r4
		return (empty_string);
   96c10:	4804      	ldr	r0, [pc, #16]	; (96c24 <mw_tree_container_get_node_label+0x8c>)
   96c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   96c14:	200727b4 	.word	0x200727b4
   96c18:	000abd0c 	.word	0x000abd0c
   96c1c:	000abc8c 	.word	0x000abc8c
   96c20:	00095add 	.word	0x00095add
   96c24:	200727b8 	.word	0x200727b8
   96c28:	000a64a0 	.word	0x000a64a0

00096c2c <mw_tree_container_get_node_path>:
{
   96c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   96c30:	b089      	sub	sp, #36	; 0x24
	if (tree == NULL || node_path == NULL)
   96c32:	2800      	cmp	r0, #0
   96c34:	f000 80bc 	beq.w	96db0 <mw_tree_container_get_node_path+0x184>
   96c38:	4616      	mov	r6, r2
   96c3a:	2a00      	cmp	r2, #0
   96c3c:	f000 80b8 	beq.w	96db0 <mw_tree_container_get_node_path+0x184>
   96c40:	461f      	mov	r7, r3
	if (node_path_length == 0U)
   96c42:	2b00      	cmp	r3, #0
   96c44:	f000 80aa 	beq.w	96d9c <mw_tree_container_get_node_path+0x170>
	node_path[0] = '\0';
   96c48:	2300      	movs	r3, #0
	if (tree->nodes_array[cached_id].handle == handle)
   96c4a:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 96e38 <mw_tree_container_get_node_path+0x20c>
	node_path[0] = '\0';
   96c4e:	7013      	strb	r3, [r2, #0]
	if (tree->nodes_array[cached_id].handle == handle)
   96c50:	f8b9 4000 	ldrh.w	r4, [r9]
   96c54:	4680      	mov	r8, r0
   96c56:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
   96c5a:	6840      	ldr	r0, [r0, #4]
   96c5c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   96c60:	f850 500b 	ldr.w	r5, [r0, fp]
   96c64:	eb00 020b 	add.w	r2, r0, fp
   96c68:	42a9      	cmp	r1, r5
   96c6a:	d021      	beq.n	96cb0 <mw_tree_container_get_node_path+0x84>
   96c6c:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   96c70:	f8b8 4000 	ldrh.w	r4, [r8]
	for (i = 0U; i < tree->node_count; i++)
   96c74:	f1bc 0f00 	cmp.w	ip, #0
   96c78:	d014      	beq.n	96ca4 <mw_tree_container_get_node_path+0x78>
		if (tree->nodes_array[i].handle == handle)
   96c7a:	6802      	ldr	r2, [r0, #0]
   96c7c:	4291      	cmp	r1, r2
   96c7e:	f000 80a1 	beq.w	96dc4 <mw_tree_container_get_node_path+0x198>
   96c82:	f04f 0b18 	mov.w	fp, #24
   96c86:	e005      	b.n	96c94 <mw_tree_container_get_node_path+0x68>
   96c88:	f850 500b 	ldr.w	r5, [r0, fp]
   96c8c:	42a9      	cmp	r1, r5
   96c8e:	f000 809b 	beq.w	96dc8 <mw_tree_container_get_node_path+0x19c>
   96c92:	46f3      	mov	fp, lr
	for (i = 0U; i < tree->node_count; i++)
   96c94:	3301      	adds	r3, #1
   96c96:	b29b      	uxth	r3, r3
   96c98:	459c      	cmp	ip, r3
   96c9a:	eb00 020b 	add.w	r2, r0, fp
		if (tree->nodes_array[i].handle == handle)
   96c9e:	f10b 0e18 	add.w	lr, fp, #24
	for (i = 0U; i < tree->node_count; i++)
   96ca2:	d1f1      	bne.n	96c88 <mw_tree_container_get_node_path+0x5c>
   96ca4:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
   96ca8:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   96cac:	eb00 020b 	add.w	r2, r0, fp
	if ((tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   96cb0:	7d93      	ldrb	r3, [r2, #22]
	level = tree->nodes_array[node_id].level;
   96cb2:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	if ((tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   96cb6:	079b      	lsls	r3, r3, #30
   96cb8:	d517      	bpl.n	96cea <mw_tree_container_get_node_path+0xbe>
		if (level > 0U)
   96cba:	f1ba 0f00 	cmp.w	sl, #0
   96cbe:	f040 808c 	bne.w	96dda <mw_tree_container_get_node_path+0x1ae>
	(void)mw_util_safe_strcpy(node_label, MW_TREE_CONTAINER_NODE_LABEL_MAX_SIZE, tree->nodes_array[node_id].label);
   96cc2:	3206      	adds	r2, #6
   96cc4:	2110      	movs	r1, #16
   96cc6:	4b55      	ldr	r3, [pc, #340]	; (96e1c <mw_tree_container_get_node_path+0x1f0>)
   96cc8:	a804      	add	r0, sp, #16
   96cca:	4798      	blx	r3
	(void)mw_util_safe_strcat(node_path, node_path_length, mw_util_strrev(node_label));
   96ccc:	4b54      	ldr	r3, [pc, #336]	; (96e20 <mw_tree_container_get_node_path+0x1f4>)
   96cce:	a804      	add	r0, sp, #16
   96cd0:	9300      	str	r3, [sp, #0]
   96cd2:	4798      	blx	r3
   96cd4:	4639      	mov	r1, r7
   96cd6:	4602      	mov	r2, r0
   96cd8:	4b52      	ldr	r3, [pc, #328]	; (96e24 <mw_tree_container_get_node_path+0x1f8>)
   96cda:	4630      	mov	r0, r6
   96cdc:	4798      	blx	r3
	(void)mw_util_strrev(node_path);
   96cde:	4630      	mov	r0, r6
   96ce0:	9b00      	ldr	r3, [sp, #0]
   96ce2:	4798      	blx	r3
}
   96ce4:	b009      	add	sp, #36	; 0x24
   96ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	(void)mw_util_safe_strcpy(node_label, MW_TREE_CONTAINER_NODE_LABEL_MAX_SIZE, tree->nodes_array[node_id].label);
   96cea:	4b4c      	ldr	r3, [pc, #304]	; (96e1c <mw_tree_container_get_node_path+0x1f0>)
   96cec:	ad04      	add	r5, sp, #16
   96cee:	3206      	adds	r2, #6
   96cf0:	2110      	movs	r1, #16
   96cf2:	4628      	mov	r0, r5
   96cf4:	9302      	str	r3, [sp, #8]
   96cf6:	4798      	blx	r3
	(void)mw_util_safe_strcat(node_path, node_path_length, mw_util_strrev(node_label));
   96cf8:	4b49      	ldr	r3, [pc, #292]	; (96e20 <mw_tree_container_get_node_path+0x1f4>)
   96cfa:	4628      	mov	r0, r5
   96cfc:	9300      	str	r3, [sp, #0]
   96cfe:	4798      	blx	r3
   96d00:	f8df 9120 	ldr.w	r9, [pc, #288]	; 96e24 <mw_tree_container_get_node_path+0x1f8>
   96d04:	4602      	mov	r2, r0
   96d06:	4639      	mov	r1, r7
   96d08:	4630      	mov	r0, r6
   96d0a:	47c8      	blx	r9
	if (level > 1U)
   96d0c:	f1ba 0f01 	cmp.w	sl, #1
   96d10:	d905      	bls.n	96d1e <mw_tree_container_get_node_path+0xf2>
   96d12:	f108 030d 	add.w	r3, r8, #13
		(void)mw_util_safe_strcat(node_path, node_path_length, tree->folder_separator);
   96d16:	461a      	mov	r2, r3
   96d18:	4639      	mov	r1, r7
   96d1a:	4630      	mov	r0, r6
   96d1c:	47c8      	blx	r9
	for (i = 0U; i < level; i++)
   96d1e:	f1ba 0f00 	cmp.w	sl, #0
   96d22:	d0dc      	beq.n	96cde <mw_tree_container_get_node_path+0xb2>
			cached_id = i;
   96d24:	f04f 0b01 	mov.w	fp, #1
   96d28:	f10a 33ff 	add.w	r3, sl, #4294967295
   96d2c:	9301      	str	r3, [sp, #4]
			(void)mw_util_safe_strcat(node_path, node_path_length, tree->folder_separator);
   96d2e:	f108 030d 	add.w	r3, r8, #13
   96d32:	9303      	str	r3, [sp, #12]
   96d34:	f8d8 3004 	ldr.w	r3, [r8, #4]
	level = tree->nodes_array[node_id].level;
   96d38:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   96d3c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   96d40:	3c01      	subs	r4, #1
   96d42:	8890      	ldrh	r0, [r2, #4]
   96d44:	b2a2      	uxth	r2, r4
   96d46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   96d4a:	3801      	subs	r0, #1
   96d4c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   96d50:	e002      	b.n	96d58 <mw_tree_container_get_node_path+0x12c>
   96d52:	3a18      	subs	r2, #24
	while (node_id > 0U);
   96d54:	b1dc      	cbz	r4, 96d8e <mw_tree_container_get_node_path+0x162>
   96d56:	3c01      	subs	r4, #1
		if (tree->nodes_array[node_id].level == level - 1U)
   96d58:	8891      	ldrh	r1, [r2, #4]
		node_id--;
   96d5a:	b2a4      	uxth	r4, r4
		if (tree->nodes_array[node_id].level == level - 1U)
   96d5c:	4281      	cmp	r1, r0
   96d5e:	d1f8      	bne.n	96d52 <mw_tree_container_get_node_path+0x126>
		(void)mw_util_safe_strcpy(node_label, MW_TREE_CONTAINER_NODE_LABEL_MAX_SIZE, tree->nodes_array[node_id].label);
   96d60:	3206      	adds	r2, #6
   96d62:	2110      	movs	r1, #16
   96d64:	9b02      	ldr	r3, [sp, #8]
   96d66:	4628      	mov	r0, r5
   96d68:	4798      	blx	r3
		(void)mw_util_safe_strcat(node_path, node_path_length, mw_util_strrev(node_label));
   96d6a:	9b00      	ldr	r3, [sp, #0]
   96d6c:	4628      	mov	r0, r5
   96d6e:	4798      	blx	r3
   96d70:	4639      	mov	r1, r7
   96d72:	4602      	mov	r2, r0
   96d74:	4630      	mov	r0, r6
   96d76:	47c8      	blx	r9
		if (i + 1U < level - 1U)
   96d78:	9b01      	ldr	r3, [sp, #4]
   96d7a:	459b      	cmp	fp, r3
   96d7c:	d309      	bcc.n	96d92 <mw_tree_container_get_node_path+0x166>
   96d7e:	f10b 0b01 	add.w	fp, fp, #1
	for (i = 0U; i < level; i++)
   96d82:	f10b 32ff 	add.w	r2, fp, #4294967295
   96d86:	b292      	uxth	r2, r2
   96d88:	4592      	cmp	sl, r2
   96d8a:	d8d3      	bhi.n	96d34 <mw_tree_container_get_node_path+0x108>
   96d8c:	e7a7      	b.n	96cde <mw_tree_container_get_node_path+0xb2>
	while (node_id > 0U);
   96d8e:	461a      	mov	r2, r3
   96d90:	e7e6      	b.n	96d60 <mw_tree_container_get_node_path+0x134>
			(void)mw_util_safe_strcat(node_path, node_path_length, tree->folder_separator);
   96d92:	9a03      	ldr	r2, [sp, #12]
   96d94:	4639      	mov	r1, r7
   96d96:	4630      	mov	r0, r6
   96d98:	47c8      	blx	r9
   96d9a:	e7f0      	b.n	96d7e <mw_tree_container_get_node_path+0x152>
		MW_ASSERT((bool)false, "Bad parameter");
   96d9c:	4618      	mov	r0, r3
   96d9e:	f240 3285 	movw	r2, #901	; 0x385
   96da2:	4b21      	ldr	r3, [pc, #132]	; (96e28 <mw_tree_container_get_node_path+0x1fc>)
   96da4:	4921      	ldr	r1, [pc, #132]	; (96e2c <mw_tree_container_get_node_path+0x200>)
   96da6:	4c22      	ldr	r4, [pc, #136]	; (96e30 <mw_tree_container_get_node_path+0x204>)
   96da8:	47a0      	blx	r4
}
   96daa:	b009      	add	sp, #36	; 0x24
   96dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		MW_ASSERT((bool)false, "Null pointer");
   96db0:	4b20      	ldr	r3, [pc, #128]	; (96e34 <mw_tree_container_get_node_path+0x208>)
   96db2:	f240 327d 	movw	r2, #893	; 0x37d
   96db6:	491d      	ldr	r1, [pc, #116]	; (96e2c <mw_tree_container_get_node_path+0x200>)
   96db8:	2000      	movs	r0, #0
   96dba:	4c1d      	ldr	r4, [pc, #116]	; (96e30 <mw_tree_container_get_node_path+0x204>)
   96dbc:	47a0      	blx	r4
}
   96dbe:	b009      	add	sp, #36	; 0x24
   96dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tree->nodes_array[i].handle == handle)
   96dc4:	469b      	mov	fp, r3
   96dc6:	4602      	mov	r2, r0
			cached_id = i;
   96dc8:	f8a9 3000 	strh.w	r3, [r9]
   96dcc:	461c      	mov	r4, r3
	if ((tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   96dce:	7d93      	ldrb	r3, [r2, #22]
	level = tree->nodes_array[node_id].level;
   96dd0:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	if ((tree->nodes_array[node_id].node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   96dd4:	079b      	lsls	r3, r3, #30
   96dd6:	d588      	bpl.n	96cea <mw_tree_container_get_node_path+0xbe>
   96dd8:	e76f      	b.n	96cba <mw_tree_container_get_node_path+0x8e>
			(void)mw_util_safe_strcat(node_path, node_path_length, tree->folder_separator);
   96dda:	f108 030d 	add.w	r3, r8, #13
   96dde:	461a      	mov	r2, r3
   96de0:	4639      	mov	r1, r7
   96de2:	f8df 9040 	ldr.w	r9, [pc, #64]	; 96e24 <mw_tree_container_get_node_path+0x1f8>
   96de6:	4630      	mov	r0, r6
   96de8:	9301      	str	r3, [sp, #4]
   96dea:	47c8      	blx	r9
	(void)mw_util_safe_strcpy(node_label, MW_TREE_CONTAINER_NODE_LABEL_MAX_SIZE, tree->nodes_array[node_id].label);
   96dec:	f8d8 2004 	ldr.w	r2, [r8, #4]
   96df0:	4b0a      	ldr	r3, [pc, #40]	; (96e1c <mw_tree_container_get_node_path+0x1f0>)
   96df2:	ad04      	add	r5, sp, #16
   96df4:	445a      	add	r2, fp
   96df6:	3206      	adds	r2, #6
   96df8:	2110      	movs	r1, #16
   96dfa:	4628      	mov	r0, r5
   96dfc:	9302      	str	r3, [sp, #8]
   96dfe:	4798      	blx	r3
	(void)mw_util_safe_strcat(node_path, node_path_length, mw_util_strrev(node_label));
   96e00:	4b07      	ldr	r3, [pc, #28]	; (96e20 <mw_tree_container_get_node_path+0x1f4>)
   96e02:	4628      	mov	r0, r5
   96e04:	9300      	str	r3, [sp, #0]
   96e06:	4798      	blx	r3
   96e08:	4639      	mov	r1, r7
   96e0a:	4602      	mov	r2, r0
   96e0c:	4630      	mov	r0, r6
   96e0e:	47c8      	blx	r9
	if (level > 1U)
   96e10:	f1ba 0f01 	cmp.w	sl, #1
   96e14:	9b01      	ldr	r3, [sp, #4]
   96e16:	f63f af7e 	bhi.w	96d16 <mw_tree_container_get_node_path+0xea>
   96e1a:	e783      	b.n	96d24 <mw_tree_container_get_node_path+0xf8>
   96e1c:	00096f31 	.word	0x00096f31
   96e20:	00096fcd 	.word	0x00096fcd
   96e24:	00096f85 	.word	0x00096f85
   96e28:	000abda8 	.word	0x000abda8
   96e2c:	000abcb0 	.word	0x000abcb0
   96e30:	00095add 	.word	0x00095add
   96e34:	000a64a0 	.word	0x000a64a0
   96e38:	200727b4 	.word	0x200727b4

00096e3c <mw_util_set_rect>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

void mw_util_set_rect(mw_util_rect_t *r, int16_t x, int16_t y, int16_t width, int16_t height)
{
   96e3c:	b470      	push	{r4, r5, r6}
   96e3e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
	if (r == (void*)0)
   96e42:	b170      	cbz	r0, 96e62 <mw_util_set_rect+0x26>
	{
		MW_ASSERT((bool)false, "Null pointer argument");
		return;
	}

	r->x = x;
   96e44:	2400      	movs	r4, #0
   96e46:	4605      	mov	r5, r0
   96e48:	4620      	mov	r0, r4
   96e4a:	f361 040f 	bfi	r4, r1, #0, #16
   96e4e:	f363 000f 	bfi	r0, r3, #0, #16
   96e52:	f362 441f 	bfi	r4, r2, #16, #16
   96e56:	f366 401f 	bfi	r0, r6, #16, #16
   96e5a:	602c      	str	r4, [r5, #0]
   96e5c:	6068      	str	r0, [r5, #4]
	r->y = y;
	r->width = width;
	r->height = height;
}
   96e5e:	bc70      	pop	{r4, r5, r6}
   96e60:	4770      	bx	lr
		MW_ASSERT((bool)false, "Null pointer argument");
   96e62:	4c03      	ldr	r4, [pc, #12]	; (96e70 <mw_util_set_rect+0x34>)
   96e64:	4b03      	ldr	r3, [pc, #12]	; (96e74 <mw_util_set_rect+0x38>)
   96e66:	46a4      	mov	ip, r4
}
   96e68:	bc70      	pop	{r4, r5, r6}
		MW_ASSERT((bool)false, "Null pointer argument");
   96e6a:	2246      	movs	r2, #70	; 0x46
   96e6c:	4902      	ldr	r1, [pc, #8]	; (96e78 <mw_util_set_rect+0x3c>)
   96e6e:	4760      	bx	ip
   96e70:	00095add 	.word	0x00095add
   96e74:	000a6618 	.word	0x000a6618
   96e78:	000abdb8 	.word	0x000abdb8

00096e7c <mw_util_is_point_in_rect>:

bool mw_util_is_point_in_rect(const mw_util_rect_t *r, int16_t x, int16_t y)
{
   96e7c:	b538      	push	{r3, r4, r5, lr}
	if (r == (void*)0)
   96e7e:	4603      	mov	r3, r0
   96e80:	b1b0      	cbz	r0, 96eb0 <mw_util_is_point_in_rect+0x34>
	{
		MW_ASSERT((bool)false, "Null pointer argument");
		return (false);
	}

	if (x < r->x || x >= (r->x + r->width) || y < r->y || y >= (r->y + r->height))
   96e82:	f9b0 0000 	ldrsh.w	r0, [r0]
   96e86:	4288      	cmp	r0, r1
   96e88:	dc10      	bgt.n	96eac <mw_util_is_point_in_rect+0x30>
   96e8a:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
   96e8e:	4420      	add	r0, r4
   96e90:	4281      	cmp	r1, r0
   96e92:	da0b      	bge.n	96eac <mw_util_is_point_in_rect+0x30>
   96e94:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   96e98:	4291      	cmp	r1, r2
   96e9a:	dc07      	bgt.n	96eac <mw_util_is_point_in_rect+0x30>
   96e9c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
   96ea0:	4408      	add	r0, r1
   96ea2:	4282      	cmp	r2, r0
   96ea4:	bfac      	ite	ge
   96ea6:	2000      	movge	r0, #0
   96ea8:	2001      	movlt	r0, #1
   96eaa:	bd38      	pop	{r3, r4, r5, pc}
	{
		return (false);
   96eac:	2000      	movs	r0, #0
	}

	return (true);
}
   96eae:	bd38      	pop	{r3, r4, r5, pc}
   96eb0:	4604      	mov	r4, r0
		MW_ASSERT((bool)false, "Null pointer argument");
   96eb2:	4b03      	ldr	r3, [pc, #12]	; (96ec0 <mw_util_is_point_in_rect+0x44>)
   96eb4:	2254      	movs	r2, #84	; 0x54
   96eb6:	4903      	ldr	r1, [pc, #12]	; (96ec4 <mw_util_is_point_in_rect+0x48>)
   96eb8:	4d03      	ldr	r5, [pc, #12]	; (96ec8 <mw_util_is_point_in_rect+0x4c>)
   96eba:	47a8      	blx	r5
		return (false);
   96ebc:	4620      	mov	r0, r4
   96ebe:	bd38      	pop	{r3, r4, r5, pc}
   96ec0:	000a6618 	.word	0x000a6618
   96ec4:	000abdcc 	.word	0x000abdcc
   96ec8:	00095add 	.word	0x00095add

00096ecc <mw_util_do_rects_coincide>:

bool mw_util_do_rects_coincide(const mw_util_rect_t *a, const mw_util_rect_t *b)
{
   96ecc:	b538      	push	{r3, r4, r5, lr}
	if (a == (void*)0 || b == (void*)0)
   96ece:	b308      	cbz	r0, 96f14 <mw_util_do_rects_coincide+0x48>
   96ed0:	b301      	cbz	r1, 96f14 <mw_util_do_rects_coincide+0x48>
	{
		MW_ASSERT((bool)false, "Null pointer argument");
		return (false);
	}

    return (!(a->x + a->width < b->x || a->y + a->height < b->y || a->x > b->x + b->width || a->y > b->y + b->height));
   96ed2:	f9b0 2000 	ldrsh.w	r2, [r0]
   96ed6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   96eda:	f9b1 4000 	ldrsh.w	r4, [r1]
   96ede:	4413      	add	r3, r2
   96ee0:	42a3      	cmp	r3, r4
   96ee2:	db15      	blt.n	96f10 <mw_util_do_rects_coincide+0x44>
   96ee4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   96ee8:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
   96eec:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
   96ef0:	441d      	add	r5, r3
   96ef2:	4285      	cmp	r5, r0
   96ef4:	db0c      	blt.n	96f10 <mw_util_do_rects_coincide+0x44>
   96ef6:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
   96efa:	442c      	add	r4, r5
   96efc:	42a2      	cmp	r2, r4
   96efe:	dc07      	bgt.n	96f10 <mw_util_do_rects_coincide+0x44>
   96f00:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   96f04:	4410      	add	r0, r2
   96f06:	4283      	cmp	r3, r0
   96f08:	bfcc      	ite	gt
   96f0a:	2000      	movgt	r0, #0
   96f0c:	2001      	movle	r0, #1
   96f0e:	bd38      	pop	{r3, r4, r5, pc}
   96f10:	2000      	movs	r0, #0
}
   96f12:	bd38      	pop	{r3, r4, r5, pc}
		MW_ASSERT((bool)false, "Null pointer argument");
   96f14:	4b03      	ldr	r3, [pc, #12]	; (96f24 <mw_util_do_rects_coincide+0x58>)
   96f16:	2264      	movs	r2, #100	; 0x64
   96f18:	4903      	ldr	r1, [pc, #12]	; (96f28 <mw_util_do_rects_coincide+0x5c>)
   96f1a:	2000      	movs	r0, #0
   96f1c:	4c03      	ldr	r4, [pc, #12]	; (96f2c <mw_util_do_rects_coincide+0x60>)
   96f1e:	47a0      	blx	r4
		return (false);
   96f20:	2000      	movs	r0, #0
   96f22:	bd38      	pop	{r3, r4, r5, pc}
   96f24:	000a6618 	.word	0x000a6618
   96f28:	000abde8 	.word	0x000abde8
   96f2c:	00095add 	.word	0x00095add

00096f30 <mw_util_safe_strcpy>:

	return (false);
}

char *mw_util_safe_strcpy(char *dest, size_t size, const char *src)
{
   96f30:	b538      	push	{r3, r4, r5, lr}
    size_t i;

    if (dest == (void*)0 || src == (void*)0)
   96f32:	b198      	cbz	r0, 96f5c <mw_util_safe_strcpy+0x2c>
   96f34:	b192      	cbz	r2, 96f5c <mw_util_safe_strcpy+0x2c>
    {
    	MW_ASSERT((bool)false, "Null pointer argument");
    	return (empty_string);
    }

    if (size > 0U)
   96f36:	b181      	cbz	r1, 96f5a <mw_util_safe_strcpy+0x2a>
    {
        for (i = (size_t)0; i < size - (size_t)1 && src[i] != '\0'; i++)
   96f38:	3901      	subs	r1, #1
   96f3a:	d019      	beq.n	96f70 <mw_util_safe_strcpy+0x40>
   96f3c:	7814      	ldrb	r4, [r2, #0]
   96f3e:	b1ac      	cbz	r4, 96f6c <mw_util_safe_strcpy+0x3c>
   96f40:	2300      	movs	r3, #0
   96f42:	1e45      	subs	r5, r0, #1
   96f44:	e002      	b.n	96f4c <mw_util_safe_strcpy+0x1c>
   96f46:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   96f4a:	b124      	cbz	r4, 96f56 <mw_util_safe_strcpy+0x26>
   96f4c:	3301      	adds	r3, #1
   96f4e:	428b      	cmp	r3, r1
        {
             dest[i] = src[i];
   96f50:	f805 4f01 	strb.w	r4, [r5, #1]!
        for (i = (size_t)0; i < size - (size_t)1 && src[i] != '\0'; i++)
   96f54:	d1f7      	bne.n	96f46 <mw_util_safe_strcpy+0x16>
        }
        dest[i] = '\0';
   96f56:	2200      	movs	r2, #0
   96f58:	54c2      	strb	r2, [r0, r3]
    }

    return (dest);
}
   96f5a:	bd38      	pop	{r3, r4, r5, pc}
    	MW_ASSERT((bool)false, "Null pointer argument");
   96f5c:	4b05      	ldr	r3, [pc, #20]	; (96f74 <mw_util_safe_strcpy+0x44>)
   96f5e:	2284      	movs	r2, #132	; 0x84
   96f60:	4905      	ldr	r1, [pc, #20]	; (96f78 <mw_util_safe_strcpy+0x48>)
   96f62:	2000      	movs	r0, #0
   96f64:	4c05      	ldr	r4, [pc, #20]	; (96f7c <mw_util_safe_strcpy+0x4c>)
   96f66:	47a0      	blx	r4
    	return (empty_string);
   96f68:	4805      	ldr	r0, [pc, #20]	; (96f80 <mw_util_safe_strcpy+0x50>)
   96f6a:	bd38      	pop	{r3, r4, r5, pc}
        for (i = (size_t)0; i < size - (size_t)1 && src[i] != '\0'; i++)
   96f6c:	4623      	mov	r3, r4
   96f6e:	e7f2      	b.n	96f56 <mw_util_safe_strcpy+0x26>
   96f70:	460b      	mov	r3, r1
   96f72:	e7f0      	b.n	96f56 <mw_util_safe_strcpy+0x26>
   96f74:	000a6618 	.word	0x000a6618
   96f78:	000abe04 	.word	0x000abe04
   96f7c:	00095add 	.word	0x00095add
   96f80:	200727bc 	.word	0x200727bc

00096f84 <mw_util_safe_strcat>:

char *mw_util_safe_strcat(char *dest, size_t size, const char *src)
{
   96f84:	b570      	push	{r4, r5, r6, lr}
    if (dest == (void*)0 || src == (void*)0)
   96f86:	b168      	cbz	r0, 96fa4 <mw_util_safe_strcat+0x20>
   96f88:	4615      	mov	r5, r2
   96f8a:	b15a      	cbz	r2, 96fa4 <mw_util_safe_strcat+0x20>
   96f8c:	460c      	mov	r4, r1
    {
    	MW_ASSERT((bool)false, "Null pointer argument");
    	return (empty_string);
    }

	return (strncat((dest), (src), (size - strlen(dest) - (size_t)1U)));
   96f8e:	4b09      	ldr	r3, [pc, #36]	; (96fb4 <mw_util_safe_strcat+0x30>)
   96f90:	4606      	mov	r6, r0
   96f92:	4798      	blx	r3
   96f94:	1e62      	subs	r2, r4, #1
   96f96:	1a12      	subs	r2, r2, r0
   96f98:	4629      	mov	r1, r5
   96f9a:	4630      	mov	r0, r6
}
   96f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return (strncat((dest), (src), (size - strlen(dest) - (size_t)1U)));
   96fa0:	4b05      	ldr	r3, [pc, #20]	; (96fb8 <mw_util_safe_strcat+0x34>)
   96fa2:	4718      	bx	r3
    	MW_ASSERT((bool)false, "Null pointer argument");
   96fa4:	4b05      	ldr	r3, [pc, #20]	; (96fbc <mw_util_safe_strcat+0x38>)
   96fa6:	2298      	movs	r2, #152	; 0x98
   96fa8:	4905      	ldr	r1, [pc, #20]	; (96fc0 <mw_util_safe_strcat+0x3c>)
   96faa:	2000      	movs	r0, #0
   96fac:	4c05      	ldr	r4, [pc, #20]	; (96fc4 <mw_util_safe_strcat+0x40>)
   96fae:	47a0      	blx	r4
}
   96fb0:	4805      	ldr	r0, [pc, #20]	; (96fc8 <mw_util_safe_strcat+0x44>)
   96fb2:	bd70      	pop	{r4, r5, r6, pc}
   96fb4:	000a5e79 	.word	0x000a5e79
   96fb8:	000a5ed5 	.word	0x000a5ed5
   96fbc:	000a6618 	.word	0x000a6618
   96fc0:	000abe18 	.word	0x000abe18
   96fc4:	00095add 	.word	0x00095add
   96fc8:	200727bc 	.word	0x200727bc

00096fcc <mw_util_strrev>:

char *mw_util_strrev(char *str)
{
   96fcc:	b538      	push	{r3, r4, r5, lr}
	uint8_t *p1;
	uint8_t *p2;

    if (str == (void*)0)
   96fce:	b1c8      	cbz	r0, 97004 <mw_util_strrev+0x38>
    {
    	MW_ASSERT((bool)false, "Null pointer argument");
    	return (empty_string);
    }

	if (*str == '\0')
   96fd0:	7803      	ldrb	r3, [r0, #0]
   96fd2:	4605      	mov	r5, r0
   96fd4:	b1a3      	cbz	r3, 97000 <mw_util_strrev+0x34>
	{
		return (str);
	}

	for (p1 = (uint8_t *)str, p2 = (uint8_t *)(str + strlen(str) - 1); p2 > p1; ++p1, --p2)
   96fd6:	4b0f      	ldr	r3, [pc, #60]	; (97014 <mw_util_strrev+0x48>)
   96fd8:	4798      	blx	r3
   96fda:	1e41      	subs	r1, r0, #1
   96fdc:	4429      	add	r1, r5
   96fde:	428d      	cmp	r5, r1
   96fe0:	d20e      	bcs.n	97000 <mw_util_strrev+0x34>
   96fe2:	462a      	mov	r2, r5
	{
		(*p1) ^= (*p2);
   96fe4:	7813      	ldrb	r3, [r2, #0]
   96fe6:	7808      	ldrb	r0, [r1, #0]
   96fe8:	4043      	eors	r3, r0
   96fea:	7013      	strb	r3, [r2, #0]
		(*p2) ^= (*p1);
   96fec:	780c      	ldrb	r4, [r1, #0]
   96fee:	4063      	eors	r3, r4
   96ff0:	f801 3901 	strb.w	r3, [r1], #-1
		(*p1) ^= (*p2);
   96ff4:	7814      	ldrb	r4, [r2, #0]
   96ff6:	4063      	eors	r3, r4
   96ff8:	f802 3b01 	strb.w	r3, [r2], #1
	for (p1 = (uint8_t *)str, p2 = (uint8_t *)(str + strlen(str) - 1); p2 > p1; ++p1, --p2)
   96ffc:	428a      	cmp	r2, r1
   96ffe:	d3f1      	bcc.n	96fe4 <mw_util_strrev+0x18>
    	return (empty_string);
   97000:	4628      	mov	r0, r5
   97002:	bd38      	pop	{r3, r4, r5, pc}
    	MW_ASSERT((bool)false, "Null pointer argument");
   97004:	4b04      	ldr	r3, [pc, #16]	; (97018 <mw_util_strrev+0x4c>)
   97006:	22a6      	movs	r2, #166	; 0xa6
   97008:	4904      	ldr	r1, [pc, #16]	; (9701c <mw_util_strrev+0x50>)
   9700a:	4c05      	ldr	r4, [pc, #20]	; (97020 <mw_util_strrev+0x54>)
   9700c:	47a0      	blx	r4
    	return (empty_string);
   9700e:	4805      	ldr	r0, [pc, #20]	; (97024 <mw_util_strrev+0x58>)
   97010:	bd38      	pop	{r3, r4, r5, pc}
   97012:	bf00      	nop
   97014:	000a5e79 	.word	0x000a5e79
   97018:	000a6618 	.word	0x000a6618
   9701c:	000abe2c 	.word	0x000abe2c
   97020:	00095add 	.word	0x00095add
   97024:	200727bc 	.word	0x200727bc

00097028 <mw_util_get_bit>:
{
	uint16_t mask;
	bool result = false;
	uint8_t i;

	if (bit < 16U)
   97028:	290f      	cmp	r1, #15
   9702a:	d825      	bhi.n	97078 <mw_util_get_bit+0x50>
	{
		mask = 1U;
		for (i = 0U; i < bit; i++)
   9702c:	b331      	cbz	r1, 9707c <mw_util_get_bit+0x54>
   9702e:	2901      	cmp	r1, #1
   97030:	d044      	beq.n	970bc <mw_util_get_bit+0x94>
   97032:	2902      	cmp	r1, #2
   97034:	d02c      	beq.n	97090 <mw_util_get_bit+0x68>
   97036:	2903      	cmp	r1, #3
   97038:	d02c      	beq.n	97094 <mw_util_get_bit+0x6c>
   9703a:	2904      	cmp	r1, #4
   9703c:	d020      	beq.n	97080 <mw_util_get_bit+0x58>
   9703e:	2905      	cmp	r1, #5
   97040:	d020      	beq.n	97084 <mw_util_get_bit+0x5c>
   97042:	2906      	cmp	r1, #6
   97044:	d020      	beq.n	97088 <mw_util_get_bit+0x60>
   97046:	2907      	cmp	r1, #7
   97048:	d020      	beq.n	9708c <mw_util_get_bit+0x64>
   9704a:	2908      	cmp	r1, #8
   9704c:	d02a      	beq.n	970a4 <mw_util_get_bit+0x7c>
   9704e:	2909      	cmp	r1, #9
   97050:	d02b      	beq.n	970aa <mw_util_get_bit+0x82>
   97052:	290a      	cmp	r1, #10
   97054:	d02c      	beq.n	970b0 <mw_util_get_bit+0x88>
   97056:	290b      	cmp	r1, #11
   97058:	d02d      	beq.n	970b6 <mw_util_get_bit+0x8e>
   9705a:	290c      	cmp	r1, #12
   9705c:	d01c      	beq.n	97098 <mw_util_get_bit+0x70>
   9705e:	290d      	cmp	r1, #13
   97060:	d01d      	beq.n	9709e <mw_util_get_bit+0x76>
   97062:	290f      	cmp	r1, #15
		{
			mask <<= 1U;
   97064:	bf0c      	ite	eq
   97066:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
   9706a:	f44f 4380 	movne.w	r3, #16384	; 0x4000
		}

		if ((word & mask) == mask)
   9706e:	4383      	bics	r3, r0
   97070:	bf0c      	ite	eq
   97072:	2001      	moveq	r0, #1
   97074:	2000      	movne	r0, #0
   97076:	4770      	bx	lr
	bool result = false;
   97078:	2000      	movs	r0, #0
			result = true;
		}
	}

	return (result);
}
   9707a:	4770      	bx	lr
		for (i = 0U; i < bit; i++)
   9707c:	2301      	movs	r3, #1
   9707e:	e7f6      	b.n	9706e <mw_util_get_bit+0x46>
			mask <<= 1U;
   97080:	2310      	movs	r3, #16
   97082:	e7f4      	b.n	9706e <mw_util_get_bit+0x46>
   97084:	2320      	movs	r3, #32
   97086:	e7f2      	b.n	9706e <mw_util_get_bit+0x46>
   97088:	2340      	movs	r3, #64	; 0x40
   9708a:	e7f0      	b.n	9706e <mw_util_get_bit+0x46>
   9708c:	2380      	movs	r3, #128	; 0x80
   9708e:	e7ee      	b.n	9706e <mw_util_get_bit+0x46>
   97090:	2304      	movs	r3, #4
   97092:	e7ec      	b.n	9706e <mw_util_get_bit+0x46>
   97094:	2308      	movs	r3, #8
   97096:	e7ea      	b.n	9706e <mw_util_get_bit+0x46>
   97098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   9709c:	e7e7      	b.n	9706e <mw_util_get_bit+0x46>
   9709e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   970a2:	e7e4      	b.n	9706e <mw_util_get_bit+0x46>
   970a4:	f44f 7380 	mov.w	r3, #256	; 0x100
   970a8:	e7e1      	b.n	9706e <mw_util_get_bit+0x46>
   970aa:	f44f 7300 	mov.w	r3, #512	; 0x200
   970ae:	e7de      	b.n	9706e <mw_util_get_bit+0x46>
   970b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   970b4:	e7db      	b.n	9706e <mw_util_get_bit+0x46>
   970b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   970ba:	e7d8      	b.n	9706e <mw_util_get_bit+0x46>
   970bc:	2302      	movs	r3, #2
   970be:	e7d6      	b.n	9706e <mw_util_get_bit+0x46>

000970c0 <mw_util_shell_sort>:


void mw_util_shell_sort(int16_t *array, uint16_t n)
{
   970c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int16_t temp;
    uint16_t increment;
    uint16_t i;
    uint16_t j;

    if (array == (void*)0)
   970c2:	b360      	cbz	r0, 9711e <mw_util_shell_sort+0x5e>
    {
    	MW_ASSERT((bool)false, "Null pointer argument");
    	return;
    }

    for (increment = n/2U; increment > 0U; increment /= 2U)
   970c4:	084c      	lsrs	r4, r1, #1
   970c6:	4605      	mov	r5, r0
   970c8:	d028      	beq.n	9711c <mw_util_shell_sort+0x5c>
    {
        for (i = increment; i < n; i++)
   970ca:	42a1      	cmp	r1, r4
   970cc:	d923      	bls.n	97116 <mw_util_shell_sort+0x56>
   970ce:	46ac      	mov	ip, r5
   970d0:	4627      	mov	r7, r4
   970d2:	eb05 0e44 	add.w	lr, r5, r4, lsl #1
        {
        	temp = array[i];
            for (j = i; j >= increment; j -= increment)
   970d6:	42bc      	cmp	r4, r7
        	temp = array[i];
   970d8:	4673      	mov	r3, lr
   970da:	f93e 6b02 	ldrsh.w	r6, [lr], #2
            for (j = i; j >= increment; j -= increment)
   970de:	d813      	bhi.n	97108 <mw_util_shell_sort+0x48>
            {
                if (temp < array[j-increment])
   970e0:	f9bc 2000 	ldrsh.w	r2, [ip]
   970e4:	4296      	cmp	r6, r2
   970e6:	da0f      	bge.n	97108 <mw_util_shell_sort+0x48>
   970e8:	463b      	mov	r3, r7
   970ea:	1b38      	subs	r0, r7, r4
   970ec:	e003      	b.n	970f6 <mw_util_shell_sort+0x36>
   970ee:	f935 2010 	ldrsh.w	r2, [r5, r0, lsl #1]
   970f2:	4296      	cmp	r6, r2
   970f4:	da06      	bge.n	97104 <mw_util_shell_sort+0x44>
                {
                	array[j] = array[j-increment];
   970f6:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
            for (j = i; j >= increment; j -= increment)
   970fa:	b283      	uxth	r3, r0
   970fc:	42a3      	cmp	r3, r4
                if (temp < array[j-increment])
   970fe:	eba3 0004 	sub.w	r0, r3, r4
            for (j = i; j >= increment; j -= increment)
   97102:	d2f4      	bcs.n	970ee <mw_util_shell_sort+0x2e>
   97104:	eb05 0343 	add.w	r3, r5, r3, lsl #1
        for (i = increment; i < n; i++)
   97108:	3701      	adds	r7, #1
   9710a:	b2bf      	uxth	r7, r7
   9710c:	42b9      	cmp	r1, r7
                else
                {
                    break;
                }
            }
            array[j] = temp;
   9710e:	801e      	strh	r6, [r3, #0]
   97110:	f10c 0c02 	add.w	ip, ip, #2
        for (i = increment; i < n; i++)
   97114:	d1df      	bne.n	970d6 <mw_util_shell_sort+0x16>
    for (increment = n/2U; increment > 0U; increment /= 2U)
   97116:	0864      	lsrs	r4, r4, #1
   97118:	d1d7      	bne.n	970ca <mw_util_shell_sort+0xa>
   9711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9711c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	MW_ASSERT((bool)false, "Null pointer argument");
   9711e:	4c04      	ldr	r4, [pc, #16]	; (97130 <mw_util_shell_sort+0x70>)
   97120:	4b04      	ldr	r3, [pc, #16]	; (97134 <mw_util_shell_sort+0x74>)
   97122:	46a4      	mov	ip, r4
        }
    }
}
   97124:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    	MW_ASSERT((bool)false, "Null pointer argument");
   97128:	22f4      	movs	r2, #244	; 0xf4
   9712a:	4903      	ldr	r1, [pc, #12]	; (97138 <mw_util_shell_sort+0x78>)
   9712c:	4760      	bx	ip
   9712e:	bf00      	nop
   97130:	00095add 	.word	0x00095add
   97134:	000a6618 	.word	0x000a6618
   97138:	000abe3c 	.word	0x000abe3c

0009713c <mw_util_get_filename_ext>:

const char *mw_util_get_filename_ext(const char *filename)
{
   9713c:	b510      	push	{r4, lr}
	if (filename == (void*)0)
   9713e:	b150      	cbz	r0, 97156 <mw_util_get_filename_ext+0x1a>
	{
    	MW_ASSERT((bool)false, "Null pointer argument");
    	return ("");
	}

    const char *dot = strrchr(filename, (long)'.');
   97140:	212e      	movs	r1, #46	; 0x2e
   97142:	4b09      	ldr	r3, [pc, #36]	; (97168 <mw_util_get_filename_ext+0x2c>)
   97144:	4604      	mov	r4, r0
   97146:	4798      	blx	r3

    if (dot == (void*)0 || dot == filename)
   97148:	b118      	cbz	r0, 97152 <mw_util_get_filename_ext+0x16>
   9714a:	4284      	cmp	r4, r0
   9714c:	d001      	beq.n	97152 <mw_util_get_filename_ext+0x16>
    {
    	return ("");
    }

    return (dot + 1);
   9714e:	3001      	adds	r0, #1
   97150:	bd10      	pop	{r4, pc}
    	return ("");
   97152:	4806      	ldr	r0, [pc, #24]	; (9716c <mw_util_get_filename_ext+0x30>)
}
   97154:	bd10      	pop	{r4, pc}
    	MW_ASSERT((bool)false, "Null pointer argument");
   97156:	4b06      	ldr	r3, [pc, #24]	; (97170 <mw_util_get_filename_ext+0x34>)
   97158:	f240 1211 	movw	r2, #273	; 0x111
   9715c:	4905      	ldr	r1, [pc, #20]	; (97174 <mw_util_get_filename_ext+0x38>)
   9715e:	4c06      	ldr	r4, [pc, #24]	; (97178 <mw_util_get_filename_ext+0x3c>)
   97160:	47a0      	blx	r4
    	return ("");
   97162:	4802      	ldr	r0, [pc, #8]	; (9716c <mw_util_get_filename_ext+0x30>)
   97164:	bd10      	pop	{r4, pc}
   97166:	bf00      	nop
   97168:	000a5f31 	.word	0x000a5f31
   9716c:	000a6c00 	.word	0x000a6c00
   97170:	000a6618 	.word	0x000a6618
   97174:	000abe50 	.word	0x000abe50
   97178:	00095add 	.word	0x00095add

0009717c <mw_util_strcicmp>:

int32_t mw_util_strcicmp(char const *a, char const *b)
{
	int32_t d;

	if (a == (void*)0 || b == (void*)0)
   9717c:	b320      	cbz	r0, 971c8 <mw_util_strcicmp+0x4c>
   9717e:	b319      	cbz	r1, 971c8 <mw_util_strcicmp+0x4c>
{
   97180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   97184:	f8df 8044 	ldr.w	r8, [pc, #68]	; 971cc <mw_util_strcicmp+0x50>
   97188:	1e46      	subs	r6, r0, #1
   9718a:	1e4f      	subs	r7, r1, #1
   9718c:	e002      	b.n	97194 <mw_util_strcicmp+0x18>
	}

    for (;; a++, b++)
    {
        d = (int32_t)tolower((unsigned char)*a) - (int32_t)tolower((unsigned char)*b);
        if (d != 0 || *a == '\0')
   9718e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   97192:	b1b3      	cbz	r3, 971c2 <mw_util_strcicmp+0x46>
        d = (int32_t)tolower((unsigned char)*a) - (int32_t)tolower((unsigned char)*b);
   97194:	7874      	ldrb	r4, [r6, #1]
   97196:	47c0      	blx	r8
   97198:	4420      	add	r0, r4
   9719a:	7843      	ldrb	r3, [r0, #1]
   9719c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   971a0:	f003 0303 	and.w	r3, r3, #3
   971a4:	2b01      	cmp	r3, #1
   971a6:	bf08      	it	eq
   971a8:	3420      	addeq	r4, #32
   971aa:	47c0      	blx	r8
   971ac:	4428      	add	r0, r5
   971ae:	7843      	ldrb	r3, [r0, #1]
   971b0:	f003 0303 	and.w	r3, r3, #3
   971b4:	2b01      	cmp	r3, #1
   971b6:	bf08      	it	eq
   971b8:	3520      	addeq	r5, #32
        if (d != 0 || *a == '\0')
   971ba:	1b60      	subs	r0, r4, r5
   971bc:	d0e7      	beq.n	9718e <mw_util_strcicmp+0x12>
            return (d);
        }
    }

    return (0);
}
   971be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (0);
   971c2:	2000      	movs	r0, #0
}
   971c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (0);
   971c8:	2000      	movs	r0, #0
   971ca:	4770      	bx	lr
   971cc:	000a52c5 	.word	0x000a52c5

000971d0 <mw_util_limit_point_to_rect_size>:

void mw_util_limit_point_to_rect_size(int16_t *x, int16_t *y, const mw_util_rect_t *r)
{
   971d0:	b430      	push	{r4, r5}
	if (x == (void*)0 || y == (void*)0 || r == (void*)0)
   971d2:	b1d0      	cbz	r0, 9720a <mw_util_limit_point_to_rect_size+0x3a>
   971d4:	b1c9      	cbz	r1, 9720a <mw_util_limit_point_to_rect_size+0x3a>
   971d6:	b1c2      	cbz	r2, 9720a <mw_util_limit_point_to_rect_size+0x3a>
	{
		MW_ASSERT((bool)false, "Null pointer");
		return;
	}

	if (*x < 0)
   971d8:	f9b0 3000 	ldrsh.w	r3, [r0]
   971dc:	2b00      	cmp	r3, #0
   971de:	db23      	blt.n	97228 <mw_util_limit_point_to_rect_size+0x58>
	{
		*x = 0;
	}
	if (*y < 0)
   971e0:	f9b1 4000 	ldrsh.w	r4, [r1]
   971e4:	2c00      	cmp	r4, #0
   971e6:	db19      	blt.n	9721c <mw_util_limit_point_to_rect_size+0x4c>
	{
		*y = 0;
	}
	if (*x >= r->width)
   971e8:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
   971ec:	429d      	cmp	r5, r3
   971ee:	dc03      	bgt.n	971f8 <mw_util_limit_point_to_rect_size+0x28>
	{
		*x = r->width - 1;
   971f0:	3d01      	subs	r5, #1
   971f2:	8005      	strh	r5, [r0, #0]
   971f4:	f9b1 4000 	ldrsh.w	r4, [r1]
	}
	if (*y >= r->height)
   971f8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   971fc:	42a3      	cmp	r3, r4
	{
		*y = r->height - 1;
   971fe:	bfdc      	itt	le
   97200:	f103 33ff 	addle.w	r3, r3, #4294967295
   97204:	800b      	strhle	r3, [r1, #0]
	}
}
   97206:	bc30      	pop	{r4, r5}
   97208:	4770      	bx	lr
		MW_ASSERT((bool)false, "Null pointer");
   9720a:	4c09      	ldr	r4, [pc, #36]	; (97230 <mw_util_limit_point_to_rect_size+0x60>)
   9720c:	4b09      	ldr	r3, [pc, #36]	; (97234 <mw_util_limit_point_to_rect_size+0x64>)
   9720e:	46a4      	mov	ip, r4
}
   97210:	bc30      	pop	{r4, r5}
		MW_ASSERT((bool)false, "Null pointer");
   97212:	f44f 729c 	mov.w	r2, #312	; 0x138
   97216:	4908      	ldr	r1, [pc, #32]	; (97238 <mw_util_limit_point_to_rect_size+0x68>)
   97218:	2000      	movs	r0, #0
   9721a:	4760      	bx	ip
		*y = 0;
   9721c:	2300      	movs	r3, #0
   9721e:	800b      	strh	r3, [r1, #0]
   97220:	461c      	mov	r4, r3
   97222:	f9b0 3000 	ldrsh.w	r3, [r0]
   97226:	e7df      	b.n	971e8 <mw_util_limit_point_to_rect_size+0x18>
		*x = 0;
   97228:	2400      	movs	r4, #0
   9722a:	4623      	mov	r3, r4
   9722c:	8004      	strh	r4, [r0, #0]
   9722e:	e7d7      	b.n	971e0 <mw_util_limit_point_to_rect_size+0x10>
   97230:	00095add 	.word	0x00095add
   97234:	000a64a0 	.word	0x000a64a0
   97238:	000abe6c 	.word	0x000abe6c

0009723c <mw_util_safe_itoa>:

char* mw_util_safe_itoa(int32_t value, char *const result, size_t buffer_length, int32_t base, bool do_padding, uint8_t width, char pad_character)
{
   9723c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char *swap_pointer = result;
	char swap_char;
	int32_t predivision_value;
	uint32_t next_pad_position;

	if (result == (void*)0)
   97240:	460e      	mov	r6, r1
{
   97242:	f89d c020 	ldrb.w	ip, [sp, #32]
   97246:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   9724a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	if (result == (void*)0)
   9724e:	2900      	cmp	r1, #0
   97250:	d068      	beq.n	97324 <mw_util_safe_itoa+0xe8>
   97252:	4605      	mov	r5, r0
	{
		MW_ASSERT((bool)false, "Null pointer");
		return (void*)0;
	}

	*result = '\0';
   97254:	2000      	movs	r0, #0
	if (buffer_length < (size_t)2)
   97256:	2a01      	cmp	r2, #1
	*result = '\0';
   97258:	7008      	strb	r0, [r1, #0]
	if (buffer_length < (size_t)2)
   9725a:	d954      	bls.n	97306 <mw_util_safe_itoa+0xca>
	{
		MW_ASSERT((bool)false, "No buffer space");
		return (result);
	}

	if (base < 2 || base > 16)
   9725c:	1e99      	subs	r1, r3, #2
   9725e:	290e      	cmp	r1, #14
   97260:	d848      	bhi.n	972f4 <mw_util_safe_itoa+0xb8>
	{
		MW_ASSERT((bool)false, "Illegal base");
		return (result);
	}

	if (do_padding && width > (buffer_length - (size_t)1))
   97262:	1e57      	subs	r7, r2, #1
   97264:	f1bc 0f00 	cmp.w	ip, #0
   97268:	d116      	bne.n	97298 <mw_util_safe_itoa+0x5c>
   9726a:	eb06 0e07 	add.w	lr, r6, r7
{
   9726e:	4634      	mov	r4, r6
	{
		predivision_value = value;
		value /= base;
		if ((size_t)interator_pointer - (size_t)result < (buffer_length - (size_t)1))
		{
			*interator_pointer = "FEDCBA9876543210123456789ABCDEF"[15 + (predivision_value - value * base)];
   97270:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 97354 <mw_util_safe_itoa+0x118>
   97274:	e007      	b.n	97286 <mw_util_safe_itoa+0x4a>
   97276:	fb03 5011 	mls	r0, r3, r1, r5
   9727a:	4450      	add	r0, sl
   9727c:	7bc2      	ldrb	r2, [r0, #15]
   9727e:	f804 2b01 	strb.w	r2, [r4], #1
			*result = '\0';
			return (result);
			break;
		}
	}
	while (value != 0);
   97282:	b191      	cbz	r1, 972aa <mw_util_safe_itoa+0x6e>
   97284:	460d      	mov	r5, r1
		if ((size_t)interator_pointer - (size_t)result < (buffer_length - (size_t)1))
   97286:	4574      	cmp	r4, lr
		value /= base;
   97288:	fb95 f1f3 	sdiv	r1, r5, r3
		if ((size_t)interator_pointer - (size_t)result < (buffer_length - (size_t)1))
   9728c:	d1f3      	bne.n	97276 <mw_util_safe_itoa+0x3a>
			*result = '\0';
   9728e:	2300      	movs	r3, #0
   97290:	7033      	strb	r3, [r6, #0]
		*swap_pointer = swap_char;
		swap_pointer++;
	}

	return (result);
}
   97292:	4630      	mov	r0, r6
   97294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (do_padding && width > (buffer_length - (size_t)1))
   97298:	45b8      	cmp	r8, r7
   9729a:	d9e6      	bls.n	9726a <mw_util_safe_itoa+0x2e>
		MW_ASSERT((bool)false, "Insufficient buffer space");
   9729c:	4b25      	ldr	r3, [pc, #148]	; (97334 <mw_util_safe_itoa+0xf8>)
   9729e:	f240 126b 	movw	r2, #363	; 0x16b
   972a2:	4925      	ldr	r1, [pc, #148]	; (97338 <mw_util_safe_itoa+0xfc>)
   972a4:	4c25      	ldr	r4, [pc, #148]	; (9733c <mw_util_safe_itoa+0x100>)
   972a6:	47a0      	blx	r4
		return (result);
   972a8:	e7f3      	b.n	97292 <mw_util_safe_itoa+0x56>
	*interator_pointer = '\0';
   972aa:	7021      	strb	r1, [r4, #0]
	if (do_padding)
   972ac:	f1bc 0f00 	cmp.w	ip, #0
   972b0:	d112      	bne.n	972d8 <mw_util_safe_itoa+0x9c>
	if (predivision_value < 0)
   972b2:	2d00      	cmp	r5, #0
   972b4:	db2e      	blt.n	97314 <mw_util_safe_itoa+0xd8>
	*interator_pointer = '\0';
   972b6:	2300      	movs	r3, #0
   972b8:	f804 3901 	strb.w	r3, [r4], #-1
	while (swap_pointer < interator_pointer)
   972bc:	42a6      	cmp	r6, r4
   972be:	d2e8      	bcs.n	97292 <mw_util_safe_itoa+0x56>
   972c0:	4633      	mov	r3, r6
		swap_char = *interator_pointer;
   972c2:	7822      	ldrb	r2, [r4, #0]
		*interator_pointer = *swap_pointer;
   972c4:	7819      	ldrb	r1, [r3, #0]
   972c6:	f804 1901 	strb.w	r1, [r4], #-1
		*swap_pointer = swap_char;
   972ca:	f803 2b01 	strb.w	r2, [r3], #1
	while (swap_pointer < interator_pointer)
   972ce:	429c      	cmp	r4, r3
   972d0:	d8f7      	bhi.n	972c2 <mw_util_safe_itoa+0x86>
}
   972d2:	4630      	mov	r0, r6
   972d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (next_pad_position = strlen(result); next_pad_position < width; next_pad_position++)
   972d8:	4630      	mov	r0, r6
   972da:	4b19      	ldr	r3, [pc, #100]	; (97340 <mw_util_safe_itoa+0x104>)
   972dc:	4798      	blx	r3
   972de:	4540      	cmp	r0, r8
   972e0:	d2e7      	bcs.n	972b2 <mw_util_safe_itoa+0x76>
			*interator_pointer = pad_character;
   972e2:	eba8 0800 	sub.w	r8, r8, r0
   972e6:	4649      	mov	r1, r9
   972e8:	4620      	mov	r0, r4
   972ea:	4642      	mov	r2, r8
   972ec:	4b15      	ldr	r3, [pc, #84]	; (97344 <mw_util_safe_itoa+0x108>)
   972ee:	4798      	blx	r3
   972f0:	4444      	add	r4, r8
   972f2:	e7de      	b.n	972b2 <mw_util_safe_itoa+0x76>
		MW_ASSERT((bool)false, "Illegal base");
   972f4:	4b14      	ldr	r3, [pc, #80]	; (97348 <mw_util_safe_itoa+0x10c>)
   972f6:	f240 1265 	movw	r2, #357	; 0x165
   972fa:	490f      	ldr	r1, [pc, #60]	; (97338 <mw_util_safe_itoa+0xfc>)
   972fc:	4c0f      	ldr	r4, [pc, #60]	; (9733c <mw_util_safe_itoa+0x100>)
   972fe:	47a0      	blx	r4
}
   97300:	4630      	mov	r0, r6
   97302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		MW_ASSERT((bool)false, "No buffer space");
   97306:	4b11      	ldr	r3, [pc, #68]	; (9734c <mw_util_safe_itoa+0x110>)
   97308:	f240 125f 	movw	r2, #351	; 0x15f
   9730c:	490a      	ldr	r1, [pc, #40]	; (97338 <mw_util_safe_itoa+0xfc>)
   9730e:	4c0b      	ldr	r4, [pc, #44]	; (9733c <mw_util_safe_itoa+0x100>)
   97310:	47a0      	blx	r4
		return (result);
   97312:	e7be      	b.n	97292 <mw_util_safe_itoa+0x56>
		if ((size_t)interator_pointer - (size_t)result < buffer_length - (size_t)1)
   97314:	1ba3      	subs	r3, r4, r6
   97316:	429f      	cmp	r7, r3
   97318:	d9b9      	bls.n	9728e <mw_util_safe_itoa+0x52>
			*interator_pointer++ = '-';
   9731a:	232d      	movs	r3, #45	; 0x2d
   9731c:	3401      	adds	r4, #1
   9731e:	f804 3c01 	strb.w	r3, [r4, #-1]
   97322:	e7c8      	b.n	972b6 <mw_util_safe_itoa+0x7a>
		MW_ASSERT((bool)false, "Null pointer");
   97324:	4b0a      	ldr	r3, [pc, #40]	; (97350 <mw_util_safe_itoa+0x114>)
   97326:	f44f 72ac 	mov.w	r2, #344	; 0x158
   9732a:	4903      	ldr	r1, [pc, #12]	; (97338 <mw_util_safe_itoa+0xfc>)
   9732c:	4630      	mov	r0, r6
   9732e:	4c03      	ldr	r4, [pc, #12]	; (9733c <mw_util_safe_itoa+0x100>)
   97330:	47a0      	blx	r4
		return (void*)0;
   97332:	e7ae      	b.n	97292 <mw_util_safe_itoa+0x56>
   97334:	000abec4 	.word	0x000abec4
   97338:	000abe90 	.word	0x000abe90
   9733c:	00095add 	.word	0x00095add
   97340:	000a5e79 	.word	0x000a5e79
   97344:	000a5a25 	.word	0x000a5a25
   97348:	000abeb4 	.word	0x000abeb4
   9734c:	000abea4 	.word	0x000abea4
   97350:	000a64a0 	.word	0x000a64a0
   97354:	000abee0 	.word	0x000abee0

00097358 <arrow_message_function>:
 * Control message handler called by the window manager.
 *
 * @param message The message to be processed
 */
static void arrow_message_function(const mw_message_t *message)
{
   97358:	b5f0      	push	{r4, r5, r6, r7, lr}
	mw_ui_arrow_data_t *this_arrow = (mw_ui_arrow_data_t*)mw_get_control_instance_data(message->recipient_handle);
   9735a:	4b32      	ldr	r3, [pc, #200]	; (97424 <arrow_message_function+0xcc>)
{
   9735c:	b083      	sub	sp, #12
   9735e:	4604      	mov	r4, r0
	mw_ui_arrow_data_t *this_arrow = (mw_ui_arrow_data_t*)mw_get_control_instance_data(message->recipient_handle);
   97360:	6840      	ldr	r0, [r0, #4]
   97362:	4798      	blx	r3

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   97364:	4e30      	ldr	r6, [pc, #192]	; (97428 <arrow_message_function+0xd0>)
   97366:	4b31      	ldr	r3, [pc, #196]	; (9742c <arrow_message_function+0xd4>)
	mw_ui_arrow_data_t *this_arrow = (mw_ui_arrow_data_t*)mw_get_control_instance_data(message->recipient_handle);
   97368:	4605      	mov	r5, r0
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   9736a:	22b3      	movs	r2, #179	; 0xb3
   9736c:	4930      	ldr	r1, [pc, #192]	; (97430 <arrow_message_function+0xd8>)
   9736e:	2001      	movs	r0, #1
   97370:	47b0      	blx	r6

	switch (message->message_id)
   97372:	7a23      	ldrb	r3, [r4, #8]
   97374:	3b0d      	subs	r3, #13
   97376:	2b0c      	cmp	r3, #12
   97378:	d81c      	bhi.n	973b4 <arrow_message_function+0x5c>
   9737a:	e8df f003 	tbb	[pc, r3]
   9737e:	1b4f      	.short	0x1b4f
   97380:	1b1b1b1b 	.word	0x1b1b1b1b
   97384:	1b31071b 	.word	0x1b31071b
   97388:	1b31      	.short	0x1b31
   9738a:	1d          	.byte	0x1d
   9738b:	00          	.byte	0x00
		}
		break;

	case MW_TOUCH_DOWN_MESSAGE:
		/* handle a touch down event within this control */	
		if ((mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   9738c:	4b29      	ldr	r3, [pc, #164]	; (97434 <arrow_message_function+0xdc>)
   9738e:	6860      	ldr	r0, [r4, #4]
   97390:	4798      	blx	r3
   97392:	0783      	lsls	r3, r0, #30
   97394:	d50e      	bpl.n	973b4 <arrow_message_function+0x5c>
		{
			this_arrow->timer_handle = mw_set_timer(mw_tick_counter + MW_CONTROL_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   97396:	4e28      	ldr	r6, [pc, #160]	; (97438 <arrow_message_function+0xe0>)
   97398:	2201      	movs	r2, #1
   9739a:	6830      	ldr	r0, [r6, #0]
   9739c:	6861      	ldr	r1, [r4, #4]
   9739e:	4b27      	ldr	r3, [pc, #156]	; (9743c <arrow_message_function+0xe4>)
   973a0:	3004      	adds	r0, #4
   973a2:	4798      	blx	r3
			this_arrow->arrow_down = true;
   973a4:	2301      	movs	r3, #1
			this_arrow->timer_handle = mw_set_timer(mw_tick_counter + MW_CONTROL_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   973a6:	6068      	str	r0, [r5, #4]
			this_arrow->arrow_down = true;
   973a8:	70ab      	strb	r3, [r5, #2]
			mw_paint_control(message->recipient_handle);
   973aa:	6860      	ldr	r0, [r4, #4]
   973ac:	4b24      	ldr	r3, [pc, #144]	; (97440 <arrow_message_function+0xe8>)
   973ae:	4798      	blx	r3
			this_arrow->touch_down_time = mw_tick_counter;
   973b0:	6833      	ldr	r3, [r6, #0]
   973b2:	60ab      	str	r3, [r5, #8]

	default:
		/* keep MISRA happy */
		break;
	}
}
   973b4:	b003      	add	sp, #12
   973b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		this_arrow->arrow_down = false;
   973b8:	2600      	movs	r6, #0
   973ba:	70ae      	strb	r6, [r5, #2]
		mw_post_message(MW_ARROW_PRESSED_MESSAGE,
   973bc:	6867      	ldr	r7, [r4, #4]
   973be:	4b21      	ldr	r3, [pc, #132]	; (97444 <arrow_message_function+0xec>)
   973c0:	4638      	mov	r0, r7
   973c2:	4798      	blx	r3
   973c4:	882b      	ldrh	r3, [r5, #0]
   973c6:	4602      	mov	r2, r0
   973c8:	4639      	mov	r1, r7
   973ca:	9601      	str	r6, [sp, #4]
   973cc:	9600      	str	r6, [sp, #0]
   973ce:	2023      	movs	r0, #35	; 0x23
   973d0:	4d1d      	ldr	r5, [pc, #116]	; (97448 <arrow_message_function+0xf0>)
   973d2:	47a8      	blx	r5
		mw_paint_control(message->recipient_handle);
   973d4:	6860      	ldr	r0, [r4, #4]
   973d6:	4b1a      	ldr	r3, [pc, #104]	; (97440 <arrow_message_function+0xe8>)
}
   973d8:	b003      	add	sp, #12
   973da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		mw_paint_control(message->recipient_handle);
   973de:	4718      	bx	r3
		this_arrow->timer_handle = mw_set_timer(mw_tick_counter + MW_CONTROL_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   973e0:	4e15      	ldr	r6, [pc, #84]	; (97438 <arrow_message_function+0xe0>)
		mw_cancel_timer(this_arrow->timer_handle);
   973e2:	6868      	ldr	r0, [r5, #4]
   973e4:	4b19      	ldr	r3, [pc, #100]	; (9744c <arrow_message_function+0xf4>)
   973e6:	4798      	blx	r3
		this_arrow->timer_handle = mw_set_timer(mw_tick_counter + MW_CONTROL_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   973e8:	6830      	ldr	r0, [r6, #0]
   973ea:	2201      	movs	r2, #1
   973ec:	4b13      	ldr	r3, [pc, #76]	; (9743c <arrow_message_function+0xe4>)
   973ee:	3004      	adds	r0, #4
   973f0:	6861      	ldr	r1, [r4, #4]
   973f2:	4798      	blx	r3
		if (mw_tick_counter - this_arrow->touch_down_time > MW_HOLD_DOWN_DELAY_TICKS)
   973f4:	6833      	ldr	r3, [r6, #0]
   973f6:	68aa      	ldr	r2, [r5, #8]
		this_arrow->timer_handle = mw_set_timer(mw_tick_counter + MW_CONTROL_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   973f8:	6068      	str	r0, [r5, #4]
		if (mw_tick_counter - this_arrow->touch_down_time > MW_HOLD_DOWN_DELAY_TICKS)
   973fa:	1a9b      	subs	r3, r3, r2
   973fc:	2b0a      	cmp	r3, #10
   973fe:	d9d9      	bls.n	973b4 <arrow_message_function+0x5c>
			mw_post_message(MW_ARROW_PRESSED_MESSAGE,
   97400:	6866      	ldr	r6, [r4, #4]
   97402:	4b10      	ldr	r3, [pc, #64]	; (97444 <arrow_message_function+0xec>)
   97404:	4630      	mov	r0, r6
   97406:	4798      	blx	r3
   97408:	2400      	movs	r4, #0
   9740a:	882b      	ldrh	r3, [r5, #0]
   9740c:	4602      	mov	r2, r0
   9740e:	9401      	str	r4, [sp, #4]
   97410:	9400      	str	r4, [sp, #0]
   97412:	4631      	mov	r1, r6
   97414:	2023      	movs	r0, #35	; 0x23
   97416:	4c0c      	ldr	r4, [pc, #48]	; (97448 <arrow_message_function+0xf0>)
   97418:	47a0      	blx	r4
   9741a:	e7cb      	b.n	973b4 <arrow_message_function+0x5c>
		this_arrow->arrow_down = false;
   9741c:	2300      	movs	r3, #0
   9741e:	70ab      	strb	r3, [r5, #2]
}
   97420:	b003      	add	sp, #12
   97422:	bdf0      	pop	{r4, r5, r6, r7, pc}
   97424:	0009176d 	.word	0x0009176d
   97428:	00095add 	.word	0x00095add
   9742c:	000a6618 	.word	0x000a6618
   97430:	000abf18 	.word	0x000abf18
   97434:	000917b9 	.word	0x000917b9
   97438:	20072f98 	.word	0x20072f98
   9743c:	000917f9 	.word	0x000917f9
   97440:	00090f71 	.word	0x00090f71
   97444:	00091721 	.word	0x00091721
   97448:	00091955 	.word	0x00091955
   9744c:	00091891 	.word	0x00091891

00097450 <arrow_paint_function>:
{
   97450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_ui_arrow_data_t *this_arrow = (mw_ui_arrow_data_t*)mw_get_control_instance_data(control_handle);
   97454:	4b6e      	ldr	r3, [pc, #440]	; (97610 <arrow_paint_function+0x1c0>)
{
   97456:	b095      	sub	sp, #84	; 0x54
   97458:	460e      	mov	r6, r1
   9745a:	4604      	mov	r4, r0
	mw_ui_arrow_data_t *this_arrow = (mw_ui_arrow_data_t*)mw_get_control_instance_data(control_handle);
   9745c:	4798      	blx	r3
   9745e:	4680      	mov	r8, r0
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   97460:	1c30      	adds	r0, r6, #0
   97462:	4b6c      	ldr	r3, [pc, #432]	; (97614 <arrow_paint_function+0x1c4>)
   97464:	bf18      	it	ne
   97466:	2001      	movne	r0, #1
   97468:	2254      	movs	r2, #84	; 0x54
   9746a:	496b      	ldr	r1, [pc, #428]	; (97618 <arrow_paint_function+0x1c8>)
   9746c:	4d6b      	ldr	r5, [pc, #428]	; (9761c <arrow_paint_function+0x1cc>)
   9746e:	47a8      	blx	r5
	if (this_arrow->arrow_down)
   97470:	f898 3002 	ldrb.w	r3, [r8, #2]
   97474:	2b00      	cmp	r3, #0
   97476:	f000 80b6 	beq.w	975e6 <arrow_paint_function+0x196>
		mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   9747a:	4b69      	ldr	r3, [pc, #420]	; (97620 <arrow_paint_function+0x1d0>)
   9747c:	4869      	ldr	r0, [pc, #420]	; (97624 <arrow_paint_function+0x1d4>)
   9747e:	9303      	str	r3, [sp, #12]
   97480:	4798      	blx	r3
	mw_gl_set_fill(MW_GL_FILL);
   97482:	4b69      	ldr	r3, [pc, #420]	; (97628 <arrow_paint_function+0x1d8>)
   97484:	2001      	movs	r0, #1
   97486:	4798      	blx	r3
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   97488:	4f68      	ldr	r7, [pc, #416]	; (9762c <arrow_paint_function+0x1dc>)
   9748a:	2000      	movs	r0, #0
   9748c:	47b8      	blx	r7
	mw_gl_clear_pattern();
   9748e:	4b68      	ldr	r3, [pc, #416]	; (97630 <arrow_paint_function+0x1e0>)
   97490:	4798      	blx	r3
	mw_gl_set_line(MW_GL_SOLID_LINE);
   97492:	f64f 70ff 	movw	r0, #65535	; 0xffff
   97496:	4b67      	ldr	r3, [pc, #412]	; (97634 <arrow_paint_function+0x1e4>)
   97498:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_ON);
   9749a:	4b67      	ldr	r3, [pc, #412]	; (97638 <arrow_paint_function+0x1e8>)
   9749c:	2001      	movs	r0, #1
			mw_get_control_rect(control_handle).width,
   9749e:	4d67      	ldr	r5, [pc, #412]	; (9763c <arrow_paint_function+0x1ec>)
	mw_gl_set_border(MW_GL_BORDER_ON);
   974a0:	4798      	blx	r3
			mw_get_control_rect(control_handle).width,
   974a2:	4621      	mov	r1, r4
   974a4:	a804      	add	r0, sp, #16
   974a6:	47a8      	blx	r5
			mw_get_control_rect(control_handle).height);
   974a8:	4621      	mov	r1, r4
   974aa:	a806      	add	r0, sp, #24
	mw_gl_rectangle(draw_info,
   974ac:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
			mw_get_control_rect(control_handle).height);
   974b0:	47a8      	blx	r5
	mw_gl_rectangle(draw_info,
   974b2:	2200      	movs	r2, #0
   974b4:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
   974b8:	4611      	mov	r1, r2
   974ba:	464b      	mov	r3, r9
   974bc:	9000      	str	r0, [sp, #0]
   974be:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 97664 <arrow_paint_function+0x214>
   974c2:	4630      	mov	r0, r6
   974c4:	47c8      	blx	r9
	if (this_arrow->arrow_down)
   974c6:	f898 3002 	ldrb.w	r3, [r8, #2]
		lowlighted_colour = MW_HAL_LCD_GREY2;
   974ca:	4a5d      	ldr	r2, [pc, #372]	; (97640 <arrow_paint_function+0x1f0>)
   974cc:	2b00      	cmp	r3, #0
   974ce:	4b5d      	ldr	r3, [pc, #372]	; (97644 <arrow_paint_function+0x1f4>)
	mw_gl_set_fg_colour(highlighted_colour);
   974d0:	bf0b      	itete	eq
   974d2:	f06f 407f 	mvneq.w	r0, #4278190080	; 0xff000000
   974d6:	2000      	movne	r0, #0
		lowlighted_colour = MW_HAL_LCD_GREY2;
   974d8:	4691      	moveq	r9, r2
   974da:	4699      	movne	r9, r3
	mw_gl_set_fg_colour(highlighted_colour);
   974dc:	47b8      	blx	r7
	mw_gl_vline(draw_info, 1, 1, mw_get_control_rect(control_handle).height - 2);
   974de:	4621      	mov	r1, r4
   974e0:	a808      	add	r0, sp, #32
   974e2:	47a8      	blx	r5
   974e4:	2201      	movs	r2, #1
   974e6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   974ea:	4611      	mov	r1, r2
   974ec:	3b02      	subs	r3, #2
   974ee:	b21b      	sxth	r3, r3
   974f0:	4630      	mov	r0, r6
   974f2:	f8df b174 	ldr.w	fp, [pc, #372]	; 97668 <arrow_paint_function+0x218>
   974f6:	47d8      	blx	fp
	mw_gl_hline(draw_info, 1, mw_get_control_rect(control_handle).width - 2, 1);
   974f8:	4621      	mov	r1, r4
   974fa:	a80a      	add	r0, sp, #40	; 0x28
   974fc:	47a8      	blx	r5
   974fe:	2301      	movs	r3, #1
   97500:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   97504:	4619      	mov	r1, r3
   97506:	3a02      	subs	r2, #2
   97508:	b212      	sxth	r2, r2
   9750a:	4630      	mov	r0, r6
   9750c:	f8df a15c 	ldr.w	sl, [pc, #348]	; 9766c <arrow_paint_function+0x21c>
   97510:	47d0      	blx	sl
	mw_gl_set_fg_colour(lowlighted_colour);
   97512:	4648      	mov	r0, r9
   97514:	47b8      	blx	r7
	mw_gl_vline(draw_info, mw_get_control_rect(control_handle).width - 2, 1, mw_get_control_rect(control_handle).height - 2);
   97516:	4621      	mov	r1, r4
   97518:	a80c      	add	r0, sp, #48	; 0x30
   9751a:	47a8      	blx	r5
   9751c:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
   97520:	4621      	mov	r1, r4
   97522:	a80e      	add	r0, sp, #56	; 0x38
   97524:	47a8      	blx	r5
   97526:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
   9752a:	f1a9 0902 	sub.w	r9, r9, #2
   9752e:	fa0f f989 	sxth.w	r9, r9
   97532:	3b02      	subs	r3, #2
   97534:	b21b      	sxth	r3, r3
   97536:	2201      	movs	r2, #1
   97538:	4649      	mov	r1, r9
   9753a:	4630      	mov	r0, r6
   9753c:	47d8      	blx	fp
	mw_gl_hline(draw_info, 1, mw_get_control_rect(control_handle).width - 2, mw_get_control_rect(control_handle).height - 2);
   9753e:	4621      	mov	r1, r4
   97540:	a810      	add	r0, sp, #64	; 0x40
   97542:	47a8      	blx	r5
   97544:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
   97548:	4621      	mov	r1, r4
   9754a:	a812      	add	r0, sp, #72	; 0x48
   9754c:	47a8      	blx	r5
   9754e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
   97552:	f1a9 0902 	sub.w	r9, r9, #2
   97556:	fa0f f989 	sxth.w	r9, r9
   9755a:	3b02      	subs	r3, #2
   9755c:	464a      	mov	r2, r9
   9755e:	b21b      	sxth	r3, r3
   97560:	2101      	movs	r1, #1
   97562:	4630      	mov	r0, r6
   97564:	47d0      	blx	sl
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   97566:	f8df 9108 	ldr.w	r9, [pc, #264]	; 97670 <arrow_paint_function+0x220>
   9756a:	4620      	mov	r0, r4
   9756c:	47c8      	blx	r9
   9756e:	0702      	lsls	r2, r0, #28
   97570:	d53e      	bpl.n	975f0 <arrow_paint_function+0x1a0>
		(void)memcpy((shape_x), (shape_large_x_const), (sizeof(shape_x)));
   97572:	4d35      	ldr	r5, [pc, #212]	; (97648 <arrow_paint_function+0x1f8>)
   97574:	4935      	ldr	r1, [pc, #212]	; (9764c <arrow_paint_function+0x1fc>)
   97576:	f04f 0a0f 	mov.w	sl, #15
   9757a:	c903      	ldmia	r1, {r0, r1}
   9757c:	6028      	str	r0, [r5, #0]
   9757e:	80a9      	strh	r1, [r5, #4]
   97580:	2510      	movs	r5, #16
		(void)memcpy((shape_y), (shape_large_y_const), (sizeof(shape_y)));
   97582:	4b33      	ldr	r3, [pc, #204]	; (97650 <arrow_paint_function+0x200>)
   97584:	4a33      	ldr	r2, [pc, #204]	; (97654 <arrow_paint_function+0x204>)
   97586:	e892 0003 	ldmia.w	r2, {r0, r1}
   9758a:	6018      	str	r0, [r3, #0]
   9758c:	8099      	strh	r1, [r3, #4]
	mw_gl_rotate_shape((uint8_t)ARROW_POINTS, shape_x, shape_y, (int16_t)this_arrow->mw_ui_arrow_direction);
   9758e:	4a30      	ldr	r2, [pc, #192]	; (97650 <arrow_paint_function+0x200>)
   97590:	492d      	ldr	r1, [pc, #180]	; (97648 <arrow_paint_function+0x1f8>)
   97592:	f9b8 3000 	ldrsh.w	r3, [r8]
   97596:	2003      	movs	r0, #3
   97598:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 97674 <arrow_paint_function+0x224>
   9759c:	47d8      	blx	fp
	if (this_arrow->arrow_down)
   9759e:	f898 3002 	ldrb.w	r3, [r8, #2]
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   975a2:	4620      	mov	r0, r4
		arrow_offset = arrow_size / 2;
   975a4:	2b00      	cmp	r3, #0
   975a6:	bf08      	it	eq
   975a8:	4655      	moveq	r5, sl
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   975aa:	47c8      	blx	r9
   975ac:	0783      	lsls	r3, r0, #30
		mw_gl_set_solid_fill_colour(MW_HAL_LCD_BLACK);
   975ae:	bf4c      	ite	mi
   975b0:	2000      	movmi	r0, #0
		mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   975b2:	481c      	ldrpl	r0, [pc, #112]	; (97624 <arrow_paint_function+0x1d4>)
   975b4:	9b03      	ldr	r3, [sp, #12]
   975b6:	4798      	blx	r3
	mw_gl_set_fill(MW_GL_FILL);
   975b8:	2001      	movs	r0, #1
   975ba:	4b1b      	ldr	r3, [pc, #108]	; (97628 <arrow_paint_function+0x1d8>)
   975bc:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_ON);
   975be:	4b1e      	ldr	r3, [pc, #120]	; (97638 <arrow_paint_function+0x1e8>)
   975c0:	2001      	movs	r0, #1
   975c2:	4798      	blx	r3
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   975c4:	2000      	movs	r0, #0
   975c6:	47b8      	blx	r7
	mw_gl_set_line(MW_GL_SOLID_LINE);
   975c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   975cc:	4b19      	ldr	r3, [pc, #100]	; (97634 <arrow_paint_function+0x1e4>)
   975ce:	4798      	blx	r3
	mw_gl_poly(draw_info,
   975d0:	4c21      	ldr	r4, [pc, #132]	; (97658 <arrow_paint_function+0x208>)
   975d2:	9501      	str	r5, [sp, #4]
   975d4:	9500      	str	r5, [sp, #0]
   975d6:	4630      	mov	r0, r6
   975d8:	4b1d      	ldr	r3, [pc, #116]	; (97650 <arrow_paint_function+0x200>)
   975da:	4a1b      	ldr	r2, [pc, #108]	; (97648 <arrow_paint_function+0x1f8>)
   975dc:	2103      	movs	r1, #3
   975de:	47a0      	blx	r4
}
   975e0:	b015      	add	sp, #84	; 0x54
   975e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   975e6:	4b0e      	ldr	r3, [pc, #56]	; (97620 <arrow_paint_function+0x1d0>)
   975e8:	4816      	ldr	r0, [pc, #88]	; (97644 <arrow_paint_function+0x1f4>)
   975ea:	9303      	str	r3, [sp, #12]
   975ec:	4798      	blx	r3
   975ee:	e748      	b.n	97482 <arrow_paint_function+0x32>
		(void)memcpy((shape_x), (shape_x_const), (sizeof(shape_x)));
   975f0:	4b15      	ldr	r3, [pc, #84]	; (97648 <arrow_paint_function+0x1f8>)
   975f2:	4a1a      	ldr	r2, [pc, #104]	; (9765c <arrow_paint_function+0x20c>)
		(void)memcpy((shape_y), (shape_y_const), (sizeof(shape_y)));
   975f4:	2508      	movs	r5, #8
		(void)memcpy((shape_x), (shape_x_const), (sizeof(shape_x)));
   975f6:	e892 0003 	ldmia.w	r2, {r0, r1}
		(void)memcpy((shape_y), (shape_y_const), (sizeof(shape_y)));
   975fa:	4a19      	ldr	r2, [pc, #100]	; (97660 <arrow_paint_function+0x210>)
		(void)memcpy((shape_x), (shape_x_const), (sizeof(shape_x)));
   975fc:	6018      	str	r0, [r3, #0]
   975fe:	8099      	strh	r1, [r3, #4]
		(void)memcpy((shape_y), (shape_y_const), (sizeof(shape_y)));
   97600:	4b13      	ldr	r3, [pc, #76]	; (97650 <arrow_paint_function+0x200>)
   97602:	e892 0003 	ldmia.w	r2, {r0, r1}
   97606:	f04f 0a07 	mov.w	sl, #7
   9760a:	6018      	str	r0, [r3, #0]
   9760c:	8099      	strh	r1, [r3, #4]
   9760e:	e7be      	b.n	9758e <arrow_paint_function+0x13e>
   97610:	0009176d 	.word	0x0009176d
   97614:	000a6618 	.word	0x000a6618
   97618:	000abf00 	.word	0x000abf00
   9761c:	00095add 	.word	0x00095add
   97620:	000846c9 	.word	0x000846c9
   97624:	00cccccc 	.word	0x00cccccc
   97628:	000846fd 	.word	0x000846fd
   9762c:	000846b1 	.word	0x000846b1
   97630:	000846e1 	.word	0x000846e1
   97634:	000846d5 	.word	0x000846d5
   97638:	000846f1 	.word	0x000846f1
   9763c:	000916c5 	.word	0x000916c5
   97640:	00a6a6a6 	.word	0x00a6a6a6
   97644:	00e6e6e6 	.word	0x00e6e6e6
   97648:	200727c0 	.word	0x200727c0
   9764c:	000abf30 	.word	0x000abf30
   97650:	200727c8 	.word	0x200727c8
   97654:	000abf38 	.word	0x000abf38
   97658:	00086255 	.word	0x00086255
   9765c:	000abf40 	.word	0x000abf40
   97660:	000abf48 	.word	0x000abf48
   97664:	000850e1 	.word	0x000850e1
   97668:	00084f39 	.word	0x00084f39
   9766c:	00084dd1 	.word	0x00084dd1
   97670:	000917b9 	.word	0x000917b9
   97674:	00086789 	.word	0x00086789

00097678 <mw_ui_arrow_add_new>:
mw_handle_t mw_ui_arrow_add_new(int16_t x,
		int16_t y,
		mw_handle_t parent_handle,
		uint16_t flags,
		mw_ui_arrow_data_t *arrow_instance_data)
{
   97678:	b5f0      	push	{r4, r5, r6, r7, lr}
   9767a:	461d      	mov	r5, r3
	mw_util_rect_t r;

	if ((flags & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   9767c:	071b      	lsls	r3, r3, #28
	{
		mw_util_set_rect(&r, x, y, MW_UI_ARROW_LARGE_SIZE + 1, MW_UI_ARROW_LARGE_SIZE + 1);
   9767e:	bf4c      	ite	mi
   97680:	231f      	movmi	r3, #31
	}
	else
	{
		mw_util_set_rect(&r, x, y, MW_UI_ARROW_SIZE + 1, MW_UI_ARROW_SIZE + 1);
   97682:	2310      	movpl	r3, #16
{
   97684:	4616      	mov	r6, r2
   97686:	b085      	sub	sp, #20
		mw_util_set_rect(&r, x, y, MW_UI_ARROW_SIZE + 1, MW_UI_ARROW_SIZE + 1);
   97688:	ac02      	add	r4, sp, #8
   9768a:	460a      	mov	r2, r1
   9768c:	9300      	str	r3, [sp, #0]
   9768e:	4601      	mov	r1, r0
   97690:	4f06      	ldr	r7, [pc, #24]	; (976ac <mw_ui_arrow_add_new+0x34>)
   97692:	4620      	mov	r0, r4
   97694:	47b8      	blx	r7
	}

	return (mw_add_control(&r,
   97696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   97698:	9500      	str	r5, [sp, #0]
   9769a:	9301      	str	r3, [sp, #4]
   9769c:	4631      	mov	r1, r6
   9769e:	4620      	mov	r0, r4
   976a0:	4b03      	ldr	r3, [pc, #12]	; (976b0 <mw_ui_arrow_add_new+0x38>)
   976a2:	4a04      	ldr	r2, [pc, #16]	; (976b4 <mw_ui_arrow_add_new+0x3c>)
   976a4:	4c04      	ldr	r4, [pc, #16]	; (976b8 <mw_ui_arrow_add_new+0x40>)
   976a6:	47a0      	blx	r4
			parent_handle,
			arrow_paint_function,
			arrow_message_function,
			flags,
			arrow_instance_data));
}
   976a8:	b005      	add	sp, #20
   976aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   976ac:	00096e3d 	.word	0x00096e3d
   976b0:	00097359 	.word	0x00097359
   976b4:	00097451 	.word	0x00097451
   976b8:	000909c5 	.word	0x000909c5

000976bc <button_message_function>:
 *
 * @param message The message to be processed
 * @note Do not call this directly from user code
 */
static void button_message_function(const mw_message_t *message)
{
   976bc:	b570      	push	{r4, r5, r6, lr}
	mw_ui_button_data_t *this_button = (mw_ui_button_data_t*)mw_get_control_instance_data(message->recipient_handle);
   976be:	4b1e      	ldr	r3, [pc, #120]	; (97738 <button_message_function+0x7c>)
{
   976c0:	b082      	sub	sp, #8
   976c2:	4604      	mov	r4, r0
	mw_ui_button_data_t *this_button = (mw_ui_button_data_t*)mw_get_control_instance_data(message->recipient_handle);
   976c4:	6840      	ldr	r0, [r0, #4]
   976c6:	4798      	blx	r3

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   976c8:	4d1c      	ldr	r5, [pc, #112]	; (9773c <button_message_function+0x80>)
   976ca:	4b1d      	ldr	r3, [pc, #116]	; (97740 <button_message_function+0x84>)
	mw_ui_button_data_t *this_button = (mw_ui_button_data_t*)mw_get_control_instance_data(message->recipient_handle);
   976cc:	4606      	mov	r6, r0
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   976ce:	22b1      	movs	r2, #177	; 0xb1
   976d0:	491c      	ldr	r1, [pc, #112]	; (97744 <button_message_function+0x88>)
   976d2:	2001      	movs	r0, #1
   976d4:	47a8      	blx	r5

	switch (message->message_id)
   976d6:	7a23      	ldrb	r3, [r4, #8]
   976d8:	2b14      	cmp	r3, #20
   976da:	d01d      	beq.n	97718 <button_message_function+0x5c>
   976dc:	2b19      	cmp	r3, #25
   976de:	d007      	beq.n	976f0 <button_message_function+0x34>
   976e0:	2b0d      	cmp	r3, #13
   976e2:	d001      	beq.n	976e8 <button_message_function+0x2c>

	default:
		/* keep MISRA happy */
		break;
	}
}
   976e4:	b002      	add	sp, #8
   976e6:	bd70      	pop	{r4, r5, r6, pc}
		this_button->button_down = false;
   976e8:	2300      	movs	r3, #0
   976ea:	72f3      	strb	r3, [r6, #11]
}
   976ec:	b002      	add	sp, #8
   976ee:	bd70      	pop	{r4, r5, r6, pc}
		this_button->button_down = false;
   976f0:	2500      	movs	r5, #0
   976f2:	72f5      	strb	r5, [r6, #11]
		mw_post_message(MW_BUTTON_PRESSED_MESSAGE,
   976f4:	6866      	ldr	r6, [r4, #4]
   976f6:	4b14      	ldr	r3, [pc, #80]	; (97748 <button_message_function+0x8c>)
   976f8:	4630      	mov	r0, r6
   976fa:	4798      	blx	r3
   976fc:	9501      	str	r5, [sp, #4]
   976fe:	4602      	mov	r2, r0
   97700:	9500      	str	r5, [sp, #0]
   97702:	462b      	mov	r3, r5
   97704:	4631      	mov	r1, r6
   97706:	201a      	movs	r0, #26
   97708:	4d10      	ldr	r5, [pc, #64]	; (9774c <button_message_function+0x90>)
   9770a:	47a8      	blx	r5
			mw_paint_control(message->recipient_handle);
   9770c:	6860      	ldr	r0, [r4, #4]
   9770e:	4b10      	ldr	r3, [pc, #64]	; (97750 <button_message_function+0x94>)
}
   97710:	b002      	add	sp, #8
   97712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mw_paint_control(message->recipient_handle);
   97716:	4718      	bx	r3
		if ((mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   97718:	4b0e      	ldr	r3, [pc, #56]	; (97754 <button_message_function+0x98>)
   9771a:	6860      	ldr	r0, [r4, #4]
   9771c:	4798      	blx	r3
   9771e:	0783      	lsls	r3, r0, #30
   97720:	d5e0      	bpl.n	976e4 <button_message_function+0x28>
			(void)mw_set_timer(mw_tick_counter + MW_CONTROL_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   97722:	4b0d      	ldr	r3, [pc, #52]	; (97758 <button_message_function+0x9c>)
   97724:	2201      	movs	r2, #1
   97726:	6818      	ldr	r0, [r3, #0]
   97728:	6861      	ldr	r1, [r4, #4]
   9772a:	4b0c      	ldr	r3, [pc, #48]	; (9775c <button_message_function+0xa0>)
   9772c:	3004      	adds	r0, #4
   9772e:	4798      	blx	r3
			this_button->button_down = true;
   97730:	2301      	movs	r3, #1
   97732:	72f3      	strb	r3, [r6, #11]
   97734:	e7ea      	b.n	9770c <button_message_function+0x50>
   97736:	bf00      	nop
   97738:	0009176d 	.word	0x0009176d
   9773c:	00095add 	.word	0x00095add
   97740:	000a6618 	.word	0x000a6618
   97744:	000abf68 	.word	0x000abf68
   97748:	00091721 	.word	0x00091721
   9774c:	00091955 	.word	0x00091955
   97750:	00090f71 	.word	0x00090f71
   97754:	000917b9 	.word	0x000917b9
   97758:	20072f98 	.word	0x20072f98
   9775c:	000917f9 	.word	0x000917f9

00097760 <button_paint_function>:
{
   97760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_ui_button_data_t *this_button = (mw_ui_button_data_t*)mw_get_control_instance_data(control_handle);
   97764:	4b6d      	ldr	r3, [pc, #436]	; (9791c <button_paint_function+0x1bc>)
{
   97766:	b095      	sub	sp, #84	; 0x54
   97768:	460e      	mov	r6, r1
   9776a:	4604      	mov	r4, r0
	mw_ui_button_data_t *this_button = (mw_ui_button_data_t*)mw_get_control_instance_data(control_handle);
   9776c:	4798      	blx	r3
   9776e:	4607      	mov	r7, r0
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   97770:	1c30      	adds	r0, r6, #0
   97772:	4b6b      	ldr	r3, [pc, #428]	; (97920 <button_paint_function+0x1c0>)
   97774:	bf18      	it	ne
   97776:	2001      	movne	r0, #1
   97778:	224b      	movs	r2, #75	; 0x4b
   9777a:	496a      	ldr	r1, [pc, #424]	; (97924 <button_paint_function+0x1c4>)
   9777c:	4d6a      	ldr	r5, [pc, #424]	; (97928 <button_paint_function+0x1c8>)
   9777e:	47a8      	blx	r5
	if (this_button->button_down)
   97780:	7afb      	ldrb	r3, [r7, #11]
   97782:	2b00      	cmp	r3, #0
   97784:	f000 80ad 	beq.w	978e2 <button_paint_function+0x182>
		mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   97788:	4868      	ldr	r0, [pc, #416]	; (9792c <button_paint_function+0x1cc>)
   9778a:	4b69      	ldr	r3, [pc, #420]	; (97930 <button_paint_function+0x1d0>)
   9778c:	4798      	blx	r3
	mw_gl_set_fill(MW_GL_FILL);
   9778e:	4b69      	ldr	r3, [pc, #420]	; (97934 <button_paint_function+0x1d4>)
   97790:	2001      	movs	r0, #1
   97792:	4798      	blx	r3
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   97794:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 97970 <button_paint_function+0x210>
   97798:	2000      	movs	r0, #0
   9779a:	47c8      	blx	r9
	mw_gl_clear_pattern();
   9779c:	4b66      	ldr	r3, [pc, #408]	; (97938 <button_paint_function+0x1d8>)
   9779e:	4798      	blx	r3
	mw_gl_set_line(MW_GL_SOLID_LINE);
   977a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   977a4:	4b65      	ldr	r3, [pc, #404]	; (9793c <button_paint_function+0x1dc>)
   977a6:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_ON);
   977a8:	4b65      	ldr	r3, [pc, #404]	; (97940 <button_paint_function+0x1e0>)
   977aa:	2001      	movs	r0, #1
			mw_get_control_rect(control_handle).width,
   977ac:	4d65      	ldr	r5, [pc, #404]	; (97944 <button_paint_function+0x1e4>)
	mw_gl_set_border(MW_GL_BORDER_ON);
   977ae:	4798      	blx	r3
			mw_get_control_rect(control_handle).width,
   977b0:	4621      	mov	r1, r4
   977b2:	a802      	add	r0, sp, #8
   977b4:	47a8      	blx	r5
			mw_get_control_rect(control_handle).height);
   977b6:	4621      	mov	r1, r4
   977b8:	a804      	add	r0, sp, #16
	mw_gl_rectangle(draw_info,
   977ba:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
			mw_get_control_rect(control_handle).height);
   977be:	47a8      	blx	r5
	mw_gl_rectangle(draw_info,
   977c0:	2200      	movs	r2, #0
   977c2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
   977c6:	4611      	mov	r1, r2
   977c8:	4643      	mov	r3, r8
   977ca:	9000      	str	r0, [sp, #0]
   977cc:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 97974 <button_paint_function+0x214>
   977d0:	4630      	mov	r0, r6
   977d2:	47c0      	blx	r8
	if (this_button->button_down)
   977d4:	7afb      	ldrb	r3, [r7, #11]
		lowlighted_colour = MW_HAL_LCD_GREY2;
   977d6:	4a5c      	ldr	r2, [pc, #368]	; (97948 <button_paint_function+0x1e8>)
   977d8:	2b00      	cmp	r3, #0
   977da:	4b5c      	ldr	r3, [pc, #368]	; (9794c <button_paint_function+0x1ec>)
	mw_gl_set_fg_colour(highlighted_colour);
   977dc:	bf0b      	itete	eq
   977de:	f06f 407f 	mvneq.w	r0, #4278190080	; 0xff000000
   977e2:	2000      	movne	r0, #0
		lowlighted_colour = MW_HAL_LCD_GREY2;
   977e4:	4690      	moveq	r8, r2
   977e6:	4698      	movne	r8, r3
	mw_gl_set_fg_colour(highlighted_colour);
   977e8:	47c8      	blx	r9
	mw_gl_vline(draw_info, 1, 1, mw_get_control_rect(control_handle).height - 2);
   977ea:	4621      	mov	r1, r4
   977ec:	a806      	add	r0, sp, #24
   977ee:	47a8      	blx	r5
   977f0:	2201      	movs	r2, #1
   977f2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   977f6:	4611      	mov	r1, r2
   977f8:	3b02      	subs	r3, #2
   977fa:	b21b      	sxth	r3, r3
   977fc:	4630      	mov	r0, r6
   977fe:	f8df b178 	ldr.w	fp, [pc, #376]	; 97978 <button_paint_function+0x218>
   97802:	47d8      	blx	fp
	mw_gl_hline(draw_info, 1, mw_get_control_rect(control_handle).width - 2, 1);
   97804:	4621      	mov	r1, r4
   97806:	a808      	add	r0, sp, #32
   97808:	47a8      	blx	r5
   9780a:	2301      	movs	r3, #1
   9780c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   97810:	4619      	mov	r1, r3
   97812:	3a02      	subs	r2, #2
   97814:	b212      	sxth	r2, r2
   97816:	4630      	mov	r0, r6
   97818:	f8df a160 	ldr.w	sl, [pc, #352]	; 9797c <button_paint_function+0x21c>
   9781c:	47d0      	blx	sl
	mw_gl_set_fg_colour(lowlighted_colour);
   9781e:	4640      	mov	r0, r8
   97820:	47c8      	blx	r9
	mw_gl_vline(draw_info, mw_get_control_rect(control_handle).width - 2, 1, mw_get_control_rect(control_handle).height - 2);
   97822:	4621      	mov	r1, r4
   97824:	a80a      	add	r0, sp, #40	; 0x28
   97826:	47a8      	blx	r5
   97828:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   9782c:	4621      	mov	r1, r4
   9782e:	a80c      	add	r0, sp, #48	; 0x30
   97830:	47a8      	blx	r5
   97832:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   97836:	f1a8 0802 	sub.w	r8, r8, #2
   9783a:	fa0f f888 	sxth.w	r8, r8
   9783e:	3b02      	subs	r3, #2
   97840:	b21b      	sxth	r3, r3
   97842:	2201      	movs	r2, #1
   97844:	4641      	mov	r1, r8
   97846:	4630      	mov	r0, r6
   97848:	47d8      	blx	fp
	mw_gl_hline(draw_info, 1, mw_get_control_rect(control_handle).width - 2, mw_get_control_rect(control_handle).height - 2);
   9784a:	4621      	mov	r1, r4
   9784c:	a80e      	add	r0, sp, #56	; 0x38
   9784e:	47a8      	blx	r5
   97850:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
   97854:	4621      	mov	r1, r4
   97856:	a810      	add	r0, sp, #64	; 0x40
   97858:	47a8      	blx	r5
   9785a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   9785e:	f1a8 0802 	sub.w	r8, r8, #2
   97862:	fa0f f888 	sxth.w	r8, r8
   97866:	3b02      	subs	r3, #2
   97868:	4642      	mov	r2, r8
   9786a:	2101      	movs	r1, #1
   9786c:	b21b      	sxth	r3, r3
   9786e:	4630      	mov	r0, r6
   97870:	47d0      	blx	sl
 	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   97872:	2000      	movs	r0, #0
   97874:	4b36      	ldr	r3, [pc, #216]	; (97950 <button_paint_function+0x1f0>)
   97876:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   97878:	4b36      	ldr	r3, [pc, #216]	; (97954 <button_paint_function+0x1f4>)
   9787a:	2000      	movs	r0, #0
   9787c:	4798      	blx	r3
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   9787e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 97980 <button_paint_function+0x220>
   97882:	4620      	mov	r0, r4
   97884:	47c0      	blx	r8
   97886:	0783      	lsls	r3, r0, #30
		mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   97888:	bf4c      	ite	mi
   9788a:	2000      	movmi	r0, #0
		mw_gl_set_fg_colour(MW_CONTROL_DISABLED_COLOUR);
   9788c:	4832      	ldrpl	r0, [pc, #200]	; (97958 <button_paint_function+0x1f8>)
   9788e:	47c8      	blx	r9
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   97890:	4620      	mov	r0, r4
   97892:	47c0      	blx	r8
   97894:	f010 0008 	ands.w	r0, r0, #8
   97898:	d032      	beq.n	97900 <button_paint_function+0x1a0>
		mw_gl_set_font(MW_GL_TITLE_FONT);
   9789a:	2005      	movs	r0, #5
   9789c:	4b2f      	ldr	r3, [pc, #188]	; (9795c <button_paint_function+0x1fc>)
   9789e:	4798      	blx	r3
		text_width = (int16_t)mw_gl_get_string_width_pixels(this_button->button_label);
   978a0:	4638      	mov	r0, r7
   978a2:	4b2f      	ldr	r3, [pc, #188]	; (97960 <button_paint_function+0x200>)
   978a4:	4798      	blx	r3
   978a6:	4681      	mov	r9, r0
	text_x = (mw_get_control_rect(control_handle).width - text_width) / 2;
   978a8:	a812      	add	r0, sp, #72	; 0x48
   978aa:	4621      	mov	r1, r4
   978ac:	47a8      	blx	r5
   978ae:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
	if (this_button->button_down)
   978b2:	7afb      	ldrb	r3, [r7, #11]
	text_x = (mw_get_control_rect(control_handle).width - text_width) / 2;
   978b4:	eba0 0009 	sub.w	r0, r0, r9
   978b8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   978bc:	1045      	asrs	r5, r0, #1
		if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   978be:	4620      	mov	r0, r4
	if (this_button->button_down)
   978c0:	b19b      	cbz	r3, 978ea <button_paint_function+0x18a>
		if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   978c2:	47c0      	blx	r8
   978c4:	f010 0f08 	tst.w	r0, #8
			mw_gl_string(draw_info, text_x + 2, 11, this_button->button_label);
   978c8:	463b      	mov	r3, r7
   978ca:	4630      	mov	r0, r6
   978cc:	bf14      	ite	ne
   978ce:	220b      	movne	r2, #11
			mw_gl_string(draw_info, text_x + 2, 4, this_button->button_label);
   978d0:	2204      	moveq	r2, #4
			mw_gl_string(draw_info, text_x + 2, 11, this_button->button_label);
   978d2:	1ca9      	adds	r1, r5, #2
   978d4:	b209      	sxth	r1, r1
			mw_gl_string(draw_info, text_x, 3, this_button->button_label);
   978d6:	4c23      	ldr	r4, [pc, #140]	; (97964 <button_paint_function+0x204>)
   978d8:	46a4      	mov	ip, r4
}
   978da:	b015      	add	sp, #84	; 0x54
   978dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mw_gl_string(draw_info, text_x, 3, this_button->button_label);
   978e0:	4760      	bx	ip
		mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   978e2:	481a      	ldr	r0, [pc, #104]	; (9794c <button_paint_function+0x1ec>)
   978e4:	4b12      	ldr	r3, [pc, #72]	; (97930 <button_paint_function+0x1d0>)
   978e6:	4798      	blx	r3
   978e8:	e751      	b.n	9778e <button_paint_function+0x2e>
		if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   978ea:	47c0      	blx	r8
	text_x = (mw_get_control_rect(control_handle).width - text_width) / 2;
   978ec:	b22d      	sxth	r5, r5
		if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   978ee:	f010 0f08 	tst.w	r0, #8
			mw_gl_string(draw_info, text_x, 9, this_button->button_label);
   978f2:	463b      	mov	r3, r7
   978f4:	4629      	mov	r1, r5
   978f6:	4630      	mov	r0, r6
   978f8:	bf14      	ite	ne
   978fa:	2209      	movne	r2, #9
			mw_gl_string(draw_info, text_x, 3, this_button->button_label);
   978fc:	2203      	moveq	r2, #3
   978fe:	e7ea      	b.n	978d6 <button_paint_function+0x176>
		mw_gl_set_font(MW_GL_FONT_9);
   97900:	4b16      	ldr	r3, [pc, #88]	; (9795c <button_paint_function+0x1fc>)
   97902:	4798      	blx	r3
		text_width = (int16_t)strlen(this_button->button_label) * ((int16_t)mw_gl_get_font_width() + 1);
   97904:	4b18      	ldr	r3, [pc, #96]	; (97968 <button_paint_function+0x208>)
   97906:	4638      	mov	r0, r7
   97908:	4798      	blx	r3
   9790a:	4b18      	ldr	r3, [pc, #96]	; (9796c <button_paint_function+0x20c>)
   9790c:	4681      	mov	r9, r0
   9790e:	4798      	blx	r3
   97910:	fb00 9909 	mla	r9, r0, r9, r9
   97914:	fa0f f989 	sxth.w	r9, r9
   97918:	e7c6      	b.n	978a8 <button_paint_function+0x148>
   9791a:	bf00      	nop
   9791c:	0009176d 	.word	0x0009176d
   97920:	000a6618 	.word	0x000a6618
   97924:	000abf50 	.word	0x000abf50
   97928:	00095add 	.word	0x00095add
   9792c:	00cccccc 	.word	0x00cccccc
   97930:	000846c9 	.word	0x000846c9
   97934:	000846fd 	.word	0x000846fd
   97938:	000846e1 	.word	0x000846e1
   9793c:	000846d5 	.word	0x000846d5
   97940:	000846f1 	.word	0x000846f1
   97944:	000916c5 	.word	0x000916c5
   97948:	00a6a6a6 	.word	0x00a6a6a6
   9794c:	00e6e6e6 	.word	0x00e6e6e6
   97950:	00084709 	.word	0x00084709
   97954:	00084745 	.word	0x00084745
   97958:	00bfbfbf 	.word	0x00bfbfbf
   9795c:	00084715 	.word	0x00084715
   97960:	00086165 	.word	0x00086165
   97964:	00085f1d 	.word	0x00085f1d
   97968:	000a5e79 	.word	0x000a5e79
   9796c:	00084751 	.word	0x00084751
   97970:	000846b1 	.word	0x000846b1
   97974:	000850e1 	.word	0x000850e1
   97978:	00084f39 	.word	0x00084f39
   9797c:	00084dd1 	.word	0x00084dd1
   97980:	000917b9 	.word	0x000917b9

00097984 <mw_ui_button_add_new>:
mw_handle_t mw_ui_button_add_new(int16_t x,
		int16_t y,
		mw_handle_t parent_handle,
		uint16_t flags,
		mw_ui_button_data_t *button_instance_data)
{
   97984:	b5f0      	push	{r4, r5, r6, r7, lr}
   97986:	461d      	mov	r5, r3
	mw_util_rect_t r;

	if ((flags & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   97988:	071b      	lsls	r3, r3, #28
{
   9798a:	b085      	sub	sp, #20
   9798c:	4616      	mov	r6, r2
	if ((flags & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   9798e:	d413      	bmi.n	979b8 <mw_ui_button_add_new+0x34>
	{
		mw_util_set_rect(&r, x, y, MW_UI_BUTTON_LARGE_WIDTH, MW_UI_BUTTON_LARGE_HEIGHT);
	}
	else
	{
		mw_util_set_rect(&r, x, y, MW_UI_BUTTON_WIDTH, MW_UI_BUTTON_HEIGHT);
   97990:	230f      	movs	r3, #15
   97992:	ac02      	add	r4, sp, #8
   97994:	460a      	mov	r2, r1
   97996:	9300      	str	r3, [sp, #0]
   97998:	4601      	mov	r1, r0
   9799a:	2332      	movs	r3, #50	; 0x32
   9799c:	4620      	mov	r0, r4
   9799e:	4f0b      	ldr	r7, [pc, #44]	; (979cc <mw_ui_button_add_new+0x48>)
   979a0:	47b8      	blx	r7
	}

	return (mw_add_control(&r,
   979a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   979a4:	9500      	str	r5, [sp, #0]
   979a6:	9301      	str	r3, [sp, #4]
   979a8:	4631      	mov	r1, r6
   979aa:	4620      	mov	r0, r4
   979ac:	4b08      	ldr	r3, [pc, #32]	; (979d0 <mw_ui_button_add_new+0x4c>)
   979ae:	4a09      	ldr	r2, [pc, #36]	; (979d4 <mw_ui_button_add_new+0x50>)
   979b0:	4c09      	ldr	r4, [pc, #36]	; (979d8 <mw_ui_button_add_new+0x54>)
   979b2:	47a0      	blx	r4
			parent_handle,
			button_paint_function,
			button_message_function,
			flags,
			button_instance_data));
}
   979b4:	b005      	add	sp, #20
   979b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mw_util_set_rect(&r, x, y, MW_UI_BUTTON_LARGE_WIDTH, MW_UI_BUTTON_LARGE_HEIGHT);
   979b8:	231e      	movs	r3, #30
   979ba:	ac02      	add	r4, sp, #8
   979bc:	460a      	mov	r2, r1
   979be:	9300      	str	r3, [sp, #0]
   979c0:	4601      	mov	r1, r0
   979c2:	2364      	movs	r3, #100	; 0x64
   979c4:	4620      	mov	r0, r4
   979c6:	4f01      	ldr	r7, [pc, #4]	; (979cc <mw_ui_button_add_new+0x48>)
   979c8:	47b8      	blx	r7
   979ca:	e7ea      	b.n	979a2 <mw_ui_button_add_new+0x1e>
   979cc:	00096e3d 	.word	0x00096e3d
   979d0:	000976bd 	.word	0x000976bd
   979d4:	00097761 	.word	0x00097761
   979d8:	000909c5 	.word	0x000909c5

000979dc <mw_ui_common_scale_scroll_bar_touch_point>:
*** GLOBAL FUNCTIONS ***
***********************/

int16_t mw_ui_common_scale_scroll_bar_touch_point(int16_t scroll_bar_length, int16_t touch_point)
{
	touch_point -= MW_SCROLL_BAR_SLIDER_SIZE / 2;
   979dc:	3906      	subs	r1, #6
   979de:	b209      	sxth	r1, r1
	if (touch_point < 0)
   979e0:	2900      	cmp	r1, #0
   979e2:	db14      	blt.n	97a0e <mw_ui_common_scale_scroll_bar_touch_point+0x32>
	{
		touch_point = 0;
	}
	else if (touch_point > scroll_bar_length - MW_SCROLL_BAR_SLIDER_SIZE)
   979e4:	f1a0 030b 	sub.w	r3, r0, #11
   979e8:	428b      	cmp	r3, r1
   979ea:	dc08      	bgt.n	979fe <mw_ui_common_scale_scroll_bar_touch_point+0x22>
	{
		touch_point = scroll_bar_length - MW_SCROLL_BAR_SLIDER_SIZE;
   979ec:	f1a0 030c 	sub.w	r3, r0, #12
   979f0:	b219      	sxth	r1, r3
   979f2:	fb00 f101 	mul.w	r1, r0, r1
	else
	{
		/* keep MISRA happy */
	}

	return ((scroll_bar_length * touch_point) / (scroll_bar_length - MW_SCROLL_BAR_SLIDER_SIZE));
   979f6:	fb91 f0f3 	sdiv	r0, r1, r3
}
   979fa:	b200      	sxth	r0, r0
   979fc:	4770      	bx	lr
   979fe:	fb01 f100 	mul.w	r1, r1, r0
   97a02:	f1a0 030c 	sub.w	r3, r0, #12
	return ((scroll_bar_length * touch_point) / (scroll_bar_length - MW_SCROLL_BAR_SLIDER_SIZE));
   97a06:	fb91 f0f3 	sdiv	r0, r1, r3
}
   97a0a:	b200      	sxth	r0, r0
   97a0c:	4770      	bx	lr
	if (touch_point < 0)
   97a0e:	2100      	movs	r1, #0
   97a10:	f1a0 030c 	sub.w	r3, r0, #12
	return ((scroll_bar_length * touch_point) / (scroll_bar_length - MW_SCROLL_BAR_SLIDER_SIZE));
   97a14:	fb91 f0f3 	sdiv	r0, r1, r3
}
   97a18:	b200      	sxth	r0, r0
   97a1a:	4770      	bx	lr

00097a1c <keyboard_paint_function>:
 *
 * @param control_handle The control identifier in the array of controls
 * @param draw_info Draw info structure describing offset and clip region
 */
static void keyboard_paint_function(mw_handle_t control_handle, const mw_gl_draw_info_t *draw_info)
{
   97a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_ui_keyboard_data_t *this_keyboard = (mw_ui_keyboard_data_t*)mw_get_control_instance_data(control_handle);
   97a20:	4b79      	ldr	r3, [pc, #484]	; (97c08 <keyboard_paint_function+0x1ec>)
{
   97a22:	b08d      	sub	sp, #52	; 0x34
   97a24:	468b      	mov	fp, r1
   97a26:	4605      	mov	r5, r0
   97a28:	9007      	str	r0, [sp, #28]
	mw_ui_keyboard_data_t *this_keyboard = (mw_ui_keyboard_data_t*)mw_get_control_instance_data(control_handle);
   97a2a:	4798      	blx	r3
   97a2c:	4681      	mov	r9, r0
	mw_hal_lcd_colour_t highlighted_colour;
	mw_hal_lcd_colour_t lowlighted_colour;
	int16_t text_offset;
	int16_t bitmap_offset;

	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   97a2e:	f11b 0000 	adds.w	r0, fp, #0
   97a32:	bf18      	it	ne
   97a34:	2001      	movne	r0, #1
   97a36:	4b75      	ldr	r3, [pc, #468]	; (97c0c <keyboard_paint_function+0x1f0>)
   97a38:	2255      	movs	r2, #85	; 0x55
   97a3a:	4975      	ldr	r1, [pc, #468]	; (97c10 <keyboard_paint_function+0x1f4>)
   97a3c:	4c75      	ldr	r4, [pc, #468]	; (97c14 <keyboard_paint_function+0x1f8>)
   97a3e:	47a0      	blx	r4

	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   97a40:	4628      	mov	r0, r5
   97a42:	4b75      	ldr	r3, [pc, #468]	; (97c18 <keyboard_paint_function+0x1fc>)
   97a44:	4798      	blx	r3
   97a46:	f010 0008 	ands.w	r0, r0, #8
   97a4a:	f000 8210 	beq.w	97e6e <keyboard_paint_function+0x452>
   97a4e:	230c      	movs	r3, #12
   97a50:	461a      	mov	r2, r3
   97a52:	9309      	str	r3, [sp, #36]	; 0x24
	{
		mw_gl_set_font(MW_GL_TITLE_FONT);
   97a54:	2005      	movs	r0, #5
   97a56:	4b71      	ldr	r3, [pc, #452]	; (97c1c <keyboard_paint_function+0x200>)
		text_offset = MW_UI_KEYBOARD_KEY_TEXT_LARGE_OFFSET;
		bitmap_offset = MW_UI_KEYBOARD_KEY_BITMAP_LARGE_OFFSET;
   97a58:	920b      	str	r2, [sp, #44]	; 0x2c
		mw_gl_set_font(MW_GL_TITLE_FONT);
   97a5a:	4798      	blx	r3
   97a5c:	230e      	movs	r3, #14
   97a5e:	9308      	str	r3, [sp, #32]
		text_offset = MW_UI_KEYBOARD_KEY_TEXT_OFFSET;
		bitmap_offset = MW_UI_KEYBOARD_KEY_BITMAP_OFFSET;
	}

	/* draw the keys */
	mw_gl_set_fill(MW_GL_FILL);
   97a60:	2001      	movs	r0, #1
   97a62:	4b6f      	ldr	r3, [pc, #444]	; (97c20 <keyboard_paint_function+0x204>)
   97a64:	4798      	blx	r3
	mw_gl_clear_pattern();
   97a66:	4b6f      	ldr	r3, [pc, #444]	; (97c24 <keyboard_paint_function+0x208>)
   97a68:	4798      	blx	r3
	mw_gl_set_line(MW_GL_SOLID_LINE);
   97a6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   97a6e:	4b6e      	ldr	r3, [pc, #440]	; (97c28 <keyboard_paint_function+0x20c>)
   97a70:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_ON);
   97a72:	2001      	movs	r0, #1
   97a74:	4b6d      	ldr	r3, [pc, #436]	; (97c2c <keyboard_paint_function+0x210>)
   97a76:	4798      	blx	r3
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   97a78:	2000      	movs	r0, #0
   97a7a:	4b6d      	ldr	r3, [pc, #436]	; (97c30 <keyboard_paint_function+0x214>)
   97a7c:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   97a7e:	4b6d      	ldr	r3, [pc, #436]	; (97c34 <keyboard_paint_function+0x218>)
   97a80:	2000      	movs	r0, #0
   97a82:	4798      	blx	r3
   97a84:	2300      	movs	r3, #0
   97a86:	46d8      	mov	r8, fp
   97a88:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 97c60 <keyboard_paint_function+0x244>
   97a8c:	930a      	str	r3, [sp, #40]	; 0x28
   97a8e:	990a      	ldr	r1, [sp, #40]	; 0x28
		bitmap_offset = MW_UI_KEYBOARD_KEY_BITMAP_OFFSET;
   97a90:	2600      	movs	r6, #0
						row * this_keyboard->key_size + text_offset + 1,
						keyboards[this_keyboard->keyboard_display][row][column]);
			}
			else
			{
				mw_gl_character(draw_info,
   97a92:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   97a96:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   97a9a:	b28f      	uxth	r7, r1
   97a9c:	1c7a      	adds	r2, r7, #1
   97a9e:	9306      	str	r3, [sp, #24]
   97aa0:	b20b      	sxth	r3, r1
   97aa2:	fa1f fb82 	uxth.w	fp, r2
   97aa6:	9303      	str	r3, [sp, #12]
   97aa8:	e078      	b.n	97b9c <keyboard_paint_function+0x180>
			if (this_keyboard->is_key_pressed &&
   97aaa:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97aae:	9a03      	ldr	r2, [sp, #12]
   97ab0:	4293      	cmp	r3, r2
   97ab2:	f000 8155 	beq.w	97d60 <keyboard_paint_function+0x344>
				highlighted_colour = MW_HAL_LCD_WHITE;
   97ab6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
				lowlighted_colour = MW_HAL_LCD_GREY7;
   97aba:	4b5f      	ldr	r3, [pc, #380]	; (97c38 <keyboard_paint_function+0x21c>)
   97abc:	9304      	str	r3, [sp, #16]
			mw_gl_set_fg_colour(highlighted_colour);
   97abe:	47d0      	blx	sl
					column * this_keyboard->key_size + 1,
   97ac0:	f8b9 101a 	ldrh.w	r1, [r9, #26]
			mw_gl_vline(draw_info,
   97ac4:	4640      	mov	r0, r8
					(row + 1) * this_keyboard->key_size - 2);
   97ac6:	fb0b f301 	mul.w	r3, fp, r1
					row * this_keyboard->key_size + 1,
   97aca:	fb07 f201 	mul.w	r2, r7, r1
					column * this_keyboard->key_size + 1,
   97ace:	fb01 f105 	mul.w	r1, r1, r5
					(row + 1) * this_keyboard->key_size - 2);
   97ad2:	3b02      	subs	r3, #2
					row * this_keyboard->key_size + 1,
   97ad4:	3201      	adds	r2, #1
					column * this_keyboard->key_size + 1,
   97ad6:	3101      	adds	r1, #1
			mw_gl_vline(draw_info,
   97ad8:	b21b      	sxth	r3, r3
   97ada:	b212      	sxth	r2, r2
   97adc:	b209      	sxth	r1, r1
   97ade:	4c57      	ldr	r4, [pc, #348]	; (97c3c <keyboard_paint_function+0x220>)
   97ae0:	47a0      	blx	r4
					column * this_keyboard->key_size + 1,
   97ae2:	f8b9 101a 	ldrh.w	r1, [r9, #26]
   97ae6:	1c6c      	adds	r4, r5, #1
   97ae8:	b2a0      	uxth	r0, r4
					(column + 1) * this_keyboard->key_size - 2,
   97aea:	fb00 f201 	mul.w	r2, r0, r1
					row * this_keyboard->key_size + 1);
   97aee:	fb07 f301 	mul.w	r3, r7, r1
					column * this_keyboard->key_size + 1,
   97af2:	fb01 f105 	mul.w	r1, r1, r5
					(column + 1) * this_keyboard->key_size - 2,
   97af6:	3a02      	subs	r2, #2
					row * this_keyboard->key_size + 1);
   97af8:	3301      	adds	r3, #1
					column * this_keyboard->key_size + 1,
   97afa:	3101      	adds	r1, #1
			mw_gl_hline(draw_info,
   97afc:	b212      	sxth	r2, r2
   97afe:	b21b      	sxth	r3, r3
   97b00:	b209      	sxth	r1, r1
					(column + 1) * this_keyboard->key_size - 2,
   97b02:	9002      	str	r0, [sp, #8]
			mw_gl_hline(draw_info,
   97b04:	4c4e      	ldr	r4, [pc, #312]	; (97c40 <keyboard_paint_function+0x224>)
   97b06:	4640      	mov	r0, r8
   97b08:	47a0      	blx	r4
			mw_gl_set_fg_colour(lowlighted_colour);
   97b0a:	9804      	ldr	r0, [sp, #16]
   97b0c:	47d0      	blx	sl
					(column + 1) * this_keyboard->key_size - 2,
   97b0e:	f8b9 201a 	ldrh.w	r2, [r9, #26]
   97b12:	9b02      	ldr	r3, [sp, #8]
			mw_gl_vline(draw_info,
   97b14:	4640      	mov	r0, r8
					(column + 1) * this_keyboard->key_size - 2,
   97b16:	fb03 f102 	mul.w	r1, r3, r2
					(row + 1) * this_keyboard->key_size - 2);
   97b1a:	fb0b f302 	mul.w	r3, fp, r2
					row * this_keyboard->key_size + 1,
   97b1e:	fb07 f202 	mul.w	r2, r7, r2
					(column + 1) * this_keyboard->key_size - 2,
   97b22:	3902      	subs	r1, #2
					(row + 1) * this_keyboard->key_size - 2);
   97b24:	3b02      	subs	r3, #2
					row * this_keyboard->key_size + 1,
   97b26:	3201      	adds	r2, #1
			mw_gl_vline(draw_info,
   97b28:	b209      	sxth	r1, r1
   97b2a:	b21b      	sxth	r3, r3
   97b2c:	b212      	sxth	r2, r2
   97b2e:	4c43      	ldr	r4, [pc, #268]	; (97c3c <keyboard_paint_function+0x220>)
   97b30:	47a0      	blx	r4
					column * this_keyboard->key_size + 1,
   97b32:	f8b9 101a 	ldrh.w	r1, [r9, #26]
					(column + 1) * this_keyboard->key_size - 2,
   97b36:	9a02      	ldr	r2, [sp, #8]
					(row + 1) * this_keyboard->key_size - 2);
   97b38:	fb0b f301 	mul.w	r3, fp, r1
					(column + 1) * this_keyboard->key_size - 2,
   97b3c:	fb02 f201 	mul.w	r2, r2, r1
					column * this_keyboard->key_size + 1,
   97b40:	fb01 f105 	mul.w	r1, r1, r5
					(column + 1) * this_keyboard->key_size - 2,
   97b44:	3a02      	subs	r2, #2
					(row + 1) * this_keyboard->key_size - 2);
   97b46:	3b02      	subs	r3, #2
					column * this_keyboard->key_size + 1,
   97b48:	3101      	adds	r1, #1
			mw_gl_hline(draw_info,
   97b4a:	b21b      	sxth	r3, r3
   97b4c:	4640      	mov	r0, r8
   97b4e:	b212      	sxth	r2, r2
   97b50:	b209      	sxth	r1, r1
   97b52:	4c3b      	ldr	r4, [pc, #236]	; (97c40 <keyboard_paint_function+0x224>)
   97b54:	47a0      	blx	r4
			mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   97b56:	2000      	movs	r0, #0
   97b58:	47d0      	blx	sl
			if (this_keyboard->is_key_pressed &&
   97b5a:	f899 3000 	ldrb.w	r3, [r9]
   97b5e:	b123      	cbz	r3, 97b6a <keyboard_paint_function+0x14e>
   97b60:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97b64:	9a03      	ldr	r2, [sp, #12]
   97b66:	4293      	cmp	r3, r2
   97b68:	d07c      	beq.n	97c64 <keyboard_paint_function+0x248>
						column * this_keyboard->key_size + text_offset,
   97b6a:	9808      	ldr	r0, [sp, #32]
   97b6c:	f8b9 201a 	ldrh.w	r2, [r9, #26]
						row * this_keyboard->key_size + text_offset,
						keyboards[this_keyboard->keyboard_display][row][column]);
   97b70:	f899 300e 	ldrb.w	r3, [r9, #14]
						column * this_keyboard->key_size + text_offset,
   97b74:	fb02 0105 	mla	r1, r2, r5, r0
						row * this_keyboard->key_size + text_offset,
   97b78:	fb07 0202 	mla	r2, r7, r2, r0
				mw_gl_character(draw_info,
   97b7c:	9806      	ldr	r0, [sp, #24]
   97b7e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   97b82:	4403      	add	r3, r0
   97b84:	482f      	ldr	r0, [pc, #188]	; (97c44 <keyboard_paint_function+0x228>)
   97b86:	b209      	sxth	r1, r1
   97b88:	4403      	add	r3, r0
   97b8a:	5d9b      	ldrb	r3, [r3, r6]
   97b8c:	b212      	sxth	r2, r2
   97b8e:	4640      	mov	r0, r8
   97b90:	4c2d      	ldr	r4, [pc, #180]	; (97c48 <keyboard_paint_function+0x22c>)
   97b92:	3601      	adds	r6, #1
   97b94:	47a0      	blx	r4
		for (column = 0; column < 11; column++)
   97b96:	2e0b      	cmp	r6, #11
   97b98:	f000 8084 	beq.w	97ca4 <keyboard_paint_function+0x288>
			if (this_keyboard->is_key_pressed &&
   97b9c:	f899 3000 	ldrb.w	r3, [r9]
   97ba0:	b232      	sxth	r2, r6
   97ba2:	9205      	str	r2, [sp, #20]
   97ba4:	b123      	cbz	r3, 97bb0 <keyboard_paint_function+0x194>
   97ba6:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97baa:	9a03      	ldr	r2, [sp, #12]
   97bac:	4293      	cmp	r3, r2
   97bae:	d022      	beq.n	97bf6 <keyboard_paint_function+0x1da>
				mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   97bb0:	4826      	ldr	r0, [pc, #152]	; (97c4c <keyboard_paint_function+0x230>)
   97bb2:	4b27      	ldr	r3, [pc, #156]	; (97c50 <keyboard_paint_function+0x234>)
   97bb4:	4798      	blx	r3
			if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   97bb6:	4b18      	ldr	r3, [pc, #96]	; (97c18 <keyboard_paint_function+0x1fc>)
   97bb8:	9807      	ldr	r0, [sp, #28]
   97bba:	4798      	blx	r3
   97bbc:	0783      	lsls	r3, r0, #30
				mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   97bbe:	bf4c      	ite	mi
   97bc0:	2000      	movmi	r0, #0
				mw_gl_set_fg_colour(MW_CONTROL_DISABLED_COLOUR);
   97bc2:	4824      	ldrpl	r0, [pc, #144]	; (97c54 <keyboard_paint_function+0x238>)
   97bc4:	47d0      	blx	sl
					column * this_keyboard->key_size,
   97bc6:	f9b9 301a 	ldrsh.w	r3, [r9, #26]
   97bca:	b2b5      	uxth	r5, r6
   97bcc:	b299      	uxth	r1, r3
					row * this_keyboard->key_size,
   97bce:	fb07 f201 	mul.w	r2, r7, r1
					column * this_keyboard->key_size,
   97bd2:	fb05 f101 	mul.w	r1, r5, r1
			mw_gl_rectangle(draw_info,
   97bd6:	9300      	str	r3, [sp, #0]
   97bd8:	b212      	sxth	r2, r2
   97bda:	b209      	sxth	r1, r1
   97bdc:	4640      	mov	r0, r8
   97bde:	4c1e      	ldr	r4, [pc, #120]	; (97c58 <keyboard_paint_function+0x23c>)
   97be0:	47a0      	blx	r4
			if (this_keyboard->is_key_pressed &&
   97be2:	f899 3000 	ldrb.w	r3, [r9]
   97be6:	2b00      	cmp	r3, #0
   97be8:	f47f af5f 	bne.w	97aaa <keyboard_paint_function+0x8e>
				lowlighted_colour = MW_HAL_LCD_GREY7;
   97bec:	4b12      	ldr	r3, [pc, #72]	; (97c38 <keyboard_paint_function+0x21c>)
				highlighted_colour = MW_HAL_LCD_WHITE;
   97bee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
				lowlighted_colour = MW_HAL_LCD_GREY7;
   97bf2:	9304      	str	r3, [sp, #16]
   97bf4:	e763      	b.n	97abe <keyboard_paint_function+0xa2>
					row == this_keyboard->key_pressed_row &&
   97bf6:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
   97bfa:	9a05      	ldr	r2, [sp, #20]
   97bfc:	4293      	cmp	r3, r2
   97bfe:	d1d7      	bne.n	97bb0 <keyboard_paint_function+0x194>
				mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   97c00:	4816      	ldr	r0, [pc, #88]	; (97c5c <keyboard_paint_function+0x240>)
   97c02:	4b13      	ldr	r3, [pc, #76]	; (97c50 <keyboard_paint_function+0x234>)
   97c04:	4798      	blx	r3
   97c06:	e7d6      	b.n	97bb6 <keyboard_paint_function+0x19a>
   97c08:	0009176d 	.word	0x0009176d
   97c0c:	000a6618 	.word	0x000a6618
   97c10:	000abf80 	.word	0x000abf80
   97c14:	00095add 	.word	0x00095add
   97c18:	000917b9 	.word	0x000917b9
   97c1c:	00084715 	.word	0x00084715
   97c20:	000846fd 	.word	0x000846fd
   97c24:	000846e1 	.word	0x000846e1
   97c28:	000846d5 	.word	0x000846d5
   97c2c:	000846f1 	.word	0x000846f1
   97c30:	00084709 	.word	0x00084709
   97c34:	00084745 	.word	0x00084745
   97c38:	00a6a6a6 	.word	0x00a6a6a6
   97c3c:	00084f39 	.word	0x00084f39
   97c40:	00084dd1 	.word	0x00084dd1
   97c44:	000abfb4 	.word	0x000abfb4
   97c48:	000855b9 	.word	0x000855b9
   97c4c:	00e6e6e6 	.word	0x00e6e6e6
   97c50:	000846c9 	.word	0x000846c9
   97c54:	00bfbfbf 	.word	0x00bfbfbf
   97c58:	000850e1 	.word	0x000850e1
   97c5c:	00cccccc 	.word	0x00cccccc
   97c60:	000846b1 	.word	0x000846b1
					row == this_keyboard->key_pressed_row &&
   97c64:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
   97c68:	9a05      	ldr	r2, [sp, #20]
   97c6a:	4293      	cmp	r3, r2
   97c6c:	f47f af7d 	bne.w	97b6a <keyboard_paint_function+0x14e>
   97c70:	9a08      	ldr	r2, [sp, #32]
						column * this_keyboard->key_size + text_offset + 1,
   97c72:	f8b9 001a 	ldrh.w	r0, [r9, #26]
						keyboards[this_keyboard->keyboard_display][row][column]);
   97c76:	f899 300e 	ldrb.w	r3, [r9, #14]
   97c7a:	3201      	adds	r2, #1
						column * this_keyboard->key_size + text_offset + 1,
   97c7c:	fb00 2105 	mla	r1, r0, r5, r2
						row * this_keyboard->key_size + text_offset + 1,
   97c80:	fb07 2200 	mla	r2, r7, r0, r2
				mw_gl_character(draw_info,
   97c84:	9806      	ldr	r0, [sp, #24]
   97c86:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   97c8a:	4403      	add	r3, r0
   97c8c:	48a9      	ldr	r0, [pc, #676]	; (97f34 <keyboard_paint_function+0x518>)
   97c8e:	b212      	sxth	r2, r2
   97c90:	4403      	add	r3, r0
   97c92:	5d9b      	ldrb	r3, [r3, r6]
   97c94:	b209      	sxth	r1, r1
   97c96:	4640      	mov	r0, r8
   97c98:	4ca7      	ldr	r4, [pc, #668]	; (97f38 <keyboard_paint_function+0x51c>)
   97c9a:	3601      	adds	r6, #1
   97c9c:	47a0      	blx	r4
		for (column = 0; column < 11; column++)
   97c9e:	2e0b      	cmp	r6, #11
   97ca0:	f47f af7c 	bne.w	97b9c <keyboard_paint_function+0x180>
			}
		}

		/* draw keys on all keyboards */
		if (this_keyboard->is_key_pressed &&
   97ca4:	f899 3000 	ldrb.w	r3, [r9]
   97ca8:	b123      	cbz	r3, 97cb4 <keyboard_paint_function+0x298>
   97caa:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97cae:	2b01      	cmp	r3, #1
   97cb0:	f000 80cf 	beq.w	97e52 <keyboard_paint_function+0x436>
					MW_UI_KEYBOARD_KEY_BITMAP_SIZE,
					mw_bitmaps_backspace_key);
		}
		else
		{
			mw_gl_monochrome_bitmap(draw_info,
   97cb4:	2010      	movs	r0, #16
   97cb6:	4603      	mov	r3, r0
					9 * this_keyboard->key_size + bitmap_offset,
   97cb8:	f8b9 201a 	ldrh.w	r2, [r9, #26]
   97cbc:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
   97cc0:	9d09      	ldr	r5, [sp, #36]	; 0x24
			mw_gl_monochrome_bitmap(draw_info,
   97cc2:	4c9e      	ldr	r4, [pc, #632]	; (97f3c <keyboard_paint_function+0x520>)
					9 * this_keyboard->key_size + bitmap_offset,
   97cc4:	4429      	add	r1, r5
					1 * this_keyboard->key_size + bitmap_offset,
   97cc6:	442a      	add	r2, r5
			mw_gl_monochrome_bitmap(draw_info,
   97cc8:	9401      	str	r4, [sp, #4]
   97cca:	9000      	str	r0, [sp, #0]
   97ccc:	b209      	sxth	r1, r1
   97cce:	b212      	sxth	r2, r2
   97cd0:	4640      	mov	r0, r8
   97cd2:	4c9b      	ldr	r4, [pc, #620]	; (97f40 <keyboard_paint_function+0x524>)
   97cd4:	47a0      	blx	r4
					MW_UI_KEYBOARD_KEY_BITMAP_SIZE,
					mw_bitmaps_backspace_key);
		}

		/* draw keyboard change keys on letters keyboard */
		if (this_keyboard->keyboard_display == KEYBOARD_UPPER_CHARS ||
   97cd6:	f899 300e 	ldrb.w	r3, [r9, #14]
   97cda:	2b01      	cmp	r3, #1
   97cdc:	d94d      	bls.n	97d7a <keyboard_paint_function+0x35e>
						MW_UI_KEYBOARD_KEY_BITMAP_SIZE,
						MW_UI_KEYBOARD_KEY_BITMAP_SIZE,
						mw_bitmaps_shift_key);
			}
		}
		else if (this_keyboard->keyboard_display == KEYBOARD_NUMBERS)
   97cde:	2b02      	cmp	r3, #2
		{
			if (this_keyboard->is_key_pressed &&
   97ce0:	f899 3000 	ldrb.w	r3, [r9]
		else if (this_keyboard->keyboard_display == KEYBOARD_NUMBERS)
   97ce4:	f000 8090 	beq.w	97e08 <keyboard_paint_function+0x3ec>
						mw_bitmaps_sym_key);
			}
		}
		else
		{
			if (this_keyboard->is_key_pressed &&
   97ce8:	b13b      	cbz	r3, 97cfa <keyboard_paint_function+0x2de>
   97cea:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97cee:	b923      	cbnz	r3, 97cfa <keyboard_paint_function+0x2de>
					this_keyboard->key_pressed_row == 0 &&
   97cf0:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
   97cf4:	2b0a      	cmp	r3, #10
   97cf6:	f000 8133 	beq.w	97f60 <keyboard_paint_function+0x544>
						MW_UI_KEYBOARD_KEY_BITMAP_SIZE,
						mw_bitmaps_let_key);
			}
			else
			{
				mw_gl_monochrome_bitmap(draw_info,
   97cfa:	2310      	movs	r3, #16
						10 * this_keyboard->key_size + bitmap_offset,
   97cfc:	f8b9 101a 	ldrh.w	r1, [r9, #26]
   97d00:	9809      	ldr	r0, [sp, #36]	; 0x24
				mw_gl_monochrome_bitmap(draw_info,
   97d02:	4a90      	ldr	r2, [pc, #576]	; (97f44 <keyboard_paint_function+0x528>)
						10 * this_keyboard->key_size + bitmap_offset,
   97d04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   97d08:	eb00 0141 	add.w	r1, r0, r1, lsl #1
				mw_gl_monochrome_bitmap(draw_info,
   97d0c:	9201      	str	r2, [sp, #4]
   97d0e:	b209      	sxth	r1, r1
   97d10:	9300      	str	r3, [sp, #0]
   97d12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   97d14:	4640      	mov	r0, r8
   97d16:	4c8a      	ldr	r4, [pc, #552]	; (97f40 <keyboard_paint_function+0x524>)
   97d18:	47a0      	blx	r4
						MW_UI_KEYBOARD_KEY_BITMAP_SIZE,
						MW_UI_KEYBOARD_KEY_BITMAP_SIZE,
						mw_bitmaps_let_key);
			}

			if (this_keyboard->is_key_pressed &&
   97d1a:	f899 3000 	ldrb.w	r3, [r9]
   97d1e:	b123      	cbz	r3, 97d2a <keyboard_paint_function+0x30e>
   97d20:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97d24:	2b01      	cmp	r3, #1
   97d26:	f000 80c3 	beq.w	97eb0 <keyboard_paint_function+0x494>
						MW_UI_KEYBOARD_KEY_BITMAP_SIZE,
						mw_bitmaps_num_key);
			}
			else
			{
				mw_gl_monochrome_bitmap(draw_info,
   97d2a:	2310      	movs	r3, #16
						10 * this_keyboard->key_size + bitmap_offset,
   97d2c:	f8b9 201a 	ldrh.w	r2, [r9, #26]
				mw_gl_monochrome_bitmap(draw_info,
   97d30:	4885      	ldr	r0, [pc, #532]	; (97f48 <keyboard_paint_function+0x52c>)
						10 * this_keyboard->key_size + bitmap_offset,
   97d32:	9d09      	ldr	r5, [sp, #36]	; 0x24
   97d34:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   97d38:	462c      	mov	r4, r5
   97d3a:	eb05 0141 	add.w	r1, r5, r1, lsl #1
						1 * this_keyboard->key_size + bitmap_offset,
   97d3e:	4422      	add	r2, r4
				mw_gl_monochrome_bitmap(draw_info,
   97d40:	9001      	str	r0, [sp, #4]
   97d42:	b209      	sxth	r1, r1
   97d44:	b212      	sxth	r2, r2
   97d46:	9300      	str	r3, [sp, #0]
   97d48:	4640      	mov	r0, r8
   97d4a:	4c7d      	ldr	r4, [pc, #500]	; (97f40 <keyboard_paint_function+0x524>)
   97d4c:	47a0      	blx	r4
   97d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   97d50:	3301      	adds	r3, #1
	for (row = 0; row < 3; row ++)
   97d52:	2b03      	cmp	r3, #3
   97d54:	930a      	str	r3, [sp, #40]	; 0x28
   97d56:	f47f ae9a 	bne.w	97a8e <keyboard_paint_function+0x72>
						MW_UI_KEYBOARD_KEY_BITMAP_SIZE,
						mw_bitmaps_num_key);
			}
		}
	}
}
   97d5a:	b00d      	add	sp, #52	; 0x34
   97d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					row == this_keyboard->key_pressed_row &&
   97d60:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
				lowlighted_colour = MW_HAL_LCD_GREY7;
   97d64:	9905      	ldr	r1, [sp, #20]
   97d66:	4b79      	ldr	r3, [pc, #484]	; (97f4c <keyboard_paint_function+0x530>)
   97d68:	428a      	cmp	r2, r1
   97d6a:	4a79      	ldr	r2, [pc, #484]	; (97f50 <keyboard_paint_function+0x534>)
   97d6c:	bf06      	itte	eq
   97d6e:	2000      	moveq	r0, #0
   97d70:	4613      	moveq	r3, r2
   97d72:	f06f 407f 	mvnne.w	r0, #4278190080	; 0xff000000
   97d76:	9304      	str	r3, [sp, #16]
   97d78:	e6a1      	b.n	97abe <keyboard_paint_function+0xa2>
			if (this_keyboard->is_key_pressed &&
   97d7a:	f899 3000 	ldrb.w	r3, [r9]
   97d7e:	b11b      	cbz	r3, 97d88 <keyboard_paint_function+0x36c>
   97d80:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97d84:	2b00      	cmp	r3, #0
   97d86:	d07b      	beq.n	97e80 <keyboard_paint_function+0x464>
				mw_gl_monochrome_bitmap(draw_info,
   97d88:	2310      	movs	r3, #16
						10 * this_keyboard->key_size + bitmap_offset,
   97d8a:	f8b9 201a 	ldrh.w	r2, [r9, #26]
   97d8e:	9909      	ldr	r1, [sp, #36]	; 0x24
				mw_gl_monochrome_bitmap(draw_info,
   97d90:	486d      	ldr	r0, [pc, #436]	; (97f48 <keyboard_paint_function+0x52c>)
						10 * this_keyboard->key_size + bitmap_offset,
   97d92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   97d96:	eb01 0142 	add.w	r1, r1, r2, lsl #1
				mw_gl_monochrome_bitmap(draw_info,
   97d9a:	9001      	str	r0, [sp, #4]
   97d9c:	b209      	sxth	r1, r1
   97d9e:	9300      	str	r3, [sp, #0]
   97da0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   97da2:	4640      	mov	r0, r8
   97da4:	4c66      	ldr	r4, [pc, #408]	; (97f40 <keyboard_paint_function+0x524>)
   97da6:	47a0      	blx	r4
			if (this_keyboard->is_key_pressed &&
   97da8:	f899 3000 	ldrb.w	r3, [r9]
   97dac:	b123      	cbz	r3, 97db8 <keyboard_paint_function+0x39c>
   97dae:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97db2:	2b01      	cmp	r3, #1
   97db4:	f000 80a2 	beq.w	97efc <keyboard_paint_function+0x4e0>
						10 * this_keyboard->key_size + bitmap_offset,
   97db8:	9d09      	ldr	r5, [sp, #36]	; 0x24
				mw_gl_monochrome_bitmap(draw_info,
   97dba:	2310      	movs	r3, #16
						10 * this_keyboard->key_size + bitmap_offset,
   97dbc:	462c      	mov	r4, r5
   97dbe:	f8b9 201a 	ldrh.w	r2, [r9, #26]
				mw_gl_monochrome_bitmap(draw_info,
   97dc2:	4864      	ldr	r0, [pc, #400]	; (97f54 <keyboard_paint_function+0x538>)
						10 * this_keyboard->key_size + bitmap_offset,
   97dc4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   97dc8:	eb05 0141 	add.w	r1, r5, r1, lsl #1
						1 * this_keyboard->key_size + bitmap_offset,
   97dcc:	4422      	add	r2, r4
				mw_gl_monochrome_bitmap(draw_info,
   97dce:	9300      	str	r3, [sp, #0]
   97dd0:	9001      	str	r0, [sp, #4]
   97dd2:	b209      	sxth	r1, r1
   97dd4:	b212      	sxth	r2, r2
   97dd6:	4640      	mov	r0, r8
   97dd8:	4c59      	ldr	r4, [pc, #356]	; (97f40 <keyboard_paint_function+0x524>)
   97dda:	47a0      	blx	r4
			if (this_keyboard->is_key_pressed &&
   97ddc:	f899 3000 	ldrb.w	r3, [r9]
   97de0:	b11b      	cbz	r3, 97dea <keyboard_paint_function+0x3ce>
   97de2:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97de6:	2b02      	cmp	r3, #2
   97de8:	d074      	beq.n	97ed4 <keyboard_paint_function+0x4b8>
				mw_gl_monochrome_bitmap(draw_info,
   97dea:	2310      	movs	r3, #16
						2 * this_keyboard->key_size + bitmap_offset,
   97dec:	f8b9 201a 	ldrh.w	r2, [r9, #26]
   97df0:	9809      	ldr	r0, [sp, #36]	; 0x24
				mw_gl_monochrome_bitmap(draw_info,
   97df2:	4959      	ldr	r1, [pc, #356]	; (97f58 <keyboard_paint_function+0x53c>)
						2 * this_keyboard->key_size + bitmap_offset,
   97df4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
				mw_gl_monochrome_bitmap(draw_info,
   97df8:	9101      	str	r1, [sp, #4]
   97dfa:	b212      	sxth	r2, r2
   97dfc:	9300      	str	r3, [sp, #0]
   97dfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   97e00:	4640      	mov	r0, r8
   97e02:	4c4f      	ldr	r4, [pc, #316]	; (97f40 <keyboard_paint_function+0x524>)
   97e04:	47a0      	blx	r4
   97e06:	e7a2      	b.n	97d4e <keyboard_paint_function+0x332>
			if (this_keyboard->is_key_pressed &&
   97e08:	b13b      	cbz	r3, 97e1a <keyboard_paint_function+0x3fe>
   97e0a:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97e0e:	b923      	cbnz	r3, 97e1a <keyboard_paint_function+0x3fe>
					this_keyboard->key_pressed_row == 0 &&
   97e10:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
   97e14:	2b0a      	cmp	r3, #10
   97e16:	f000 80b6 	beq.w	97f86 <keyboard_paint_function+0x56a>
				mw_gl_monochrome_bitmap(draw_info,
   97e1a:	2310      	movs	r3, #16
						10 * this_keyboard->key_size + bitmap_offset,
   97e1c:	f8b9 201a 	ldrh.w	r2, [r9, #26]
   97e20:	9909      	ldr	r1, [sp, #36]	; 0x24
				mw_gl_monochrome_bitmap(draw_info,
   97e22:	4848      	ldr	r0, [pc, #288]	; (97f44 <keyboard_paint_function+0x528>)
						10 * this_keyboard->key_size + bitmap_offset,
   97e24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   97e28:	eb01 0142 	add.w	r1, r1, r2, lsl #1
				mw_gl_monochrome_bitmap(draw_info,
   97e2c:	9001      	str	r0, [sp, #4]
   97e2e:	b209      	sxth	r1, r1
   97e30:	9300      	str	r3, [sp, #0]
   97e32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   97e34:	4640      	mov	r0, r8
   97e36:	4c42      	ldr	r4, [pc, #264]	; (97f40 <keyboard_paint_function+0x524>)
   97e38:	47a0      	blx	r4
			if (this_keyboard->is_key_pressed &&
   97e3a:	f899 3000 	ldrb.w	r3, [r9]
   97e3e:	b11b      	cbz	r3, 97e48 <keyboard_paint_function+0x42c>
   97e40:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
   97e44:	2b01      	cmp	r3, #1
   97e46:	d06b      	beq.n	97f20 <keyboard_paint_function+0x504>
				mw_gl_monochrome_bitmap(draw_info,
   97e48:	2310      	movs	r3, #16
						10 * this_keyboard->key_size + bitmap_offset,
   97e4a:	f8b9 201a 	ldrh.w	r2, [r9, #26]
				mw_gl_monochrome_bitmap(draw_info,
   97e4e:	4841      	ldr	r0, [pc, #260]	; (97f54 <keyboard_paint_function+0x538>)
   97e50:	e76f      	b.n	97d32 <keyboard_paint_function+0x316>
				this_keyboard->key_pressed_row == 1 &&
   97e52:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
   97e56:	2b09      	cmp	r3, #9
   97e58:	f47f af2c 	bne.w	97cb4 <keyboard_paint_function+0x298>
			mw_gl_monochrome_bitmap(draw_info,
   97e5c:	2010      	movs	r0, #16
					9 * this_keyboard->key_size + bitmap_offset + 1,
   97e5e:	f8b9 201a 	ldrh.w	r2, [r9, #26]
			mw_gl_monochrome_bitmap(draw_info,
   97e62:	4603      	mov	r3, r0
					9 * this_keyboard->key_size + bitmap_offset + 1,
   97e64:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
   97e68:	3101      	adds	r1, #1
					1 * this_keyboard->key_size + bitmap_offset + 1,
   97e6a:	3201      	adds	r2, #1
   97e6c:	e728      	b.n	97cc0 <keyboard_paint_function+0x2a4>
		mw_gl_set_font(MW_GL_FONT_9);
   97e6e:	2302      	movs	r3, #2
   97e70:	461c      	mov	r4, r3
   97e72:	9309      	str	r3, [sp, #36]	; 0x24
   97e74:	4b39      	ldr	r3, [pc, #228]	; (97f5c <keyboard_paint_function+0x540>)
   97e76:	4798      	blx	r3
   97e78:	2307      	movs	r3, #7
		bitmap_offset = MW_UI_KEYBOARD_KEY_BITMAP_OFFSET;
   97e7a:	940b      	str	r4, [sp, #44]	; 0x2c
		mw_gl_set_font(MW_GL_FONT_9);
   97e7c:	9308      	str	r3, [sp, #32]
   97e7e:	e5ef      	b.n	97a60 <keyboard_paint_function+0x44>
					this_keyboard->key_pressed_row == 0 &&
   97e80:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
   97e84:	2b0a      	cmp	r3, #10
   97e86:	f47f af7f 	bne.w	97d88 <keyboard_paint_function+0x36c>
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97e8a:	f8b9 201a 	ldrh.w	r2, [r9, #26]
   97e8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   97e90:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   97e94:	eb04 0142 	add.w	r1, r4, r2, lsl #1
				mw_gl_monochrome_bitmap(draw_info,
   97e98:	2310      	movs	r3, #16
   97e9a:	4622      	mov	r2, r4
   97e9c:	482a      	ldr	r0, [pc, #168]	; (97f48 <keyboard_paint_function+0x52c>)
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97e9e:	3101      	adds	r1, #1
				mw_gl_monochrome_bitmap(draw_info,
   97ea0:	9001      	str	r0, [sp, #4]
   97ea2:	b209      	sxth	r1, r1
   97ea4:	9300      	str	r3, [sp, #0]
   97ea6:	3201      	adds	r2, #1
   97ea8:	4640      	mov	r0, r8
   97eaa:	4c25      	ldr	r4, [pc, #148]	; (97f40 <keyboard_paint_function+0x524>)
   97eac:	47a0      	blx	r4
   97eae:	e77b      	b.n	97da8 <keyboard_paint_function+0x38c>
					this_keyboard->key_pressed_row == 1 &&
   97eb0:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
   97eb4:	2b0a      	cmp	r3, #10
   97eb6:	f47f af38 	bne.w	97d2a <keyboard_paint_function+0x30e>
				mw_gl_monochrome_bitmap(draw_info,
   97eba:	2310      	movs	r3, #16
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97ebc:	f8b9 201a 	ldrh.w	r2, [r9, #26]
				mw_gl_monochrome_bitmap(draw_info,
   97ec0:	4821      	ldr	r0, [pc, #132]	; (97f48 <keyboard_paint_function+0x52c>)
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97ec2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   97ec4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   97ec8:	eb05 0141 	add.w	r1, r5, r1, lsl #1
   97ecc:	462c      	mov	r4, r5
						1 * this_keyboard->key_size + bitmap_offset + 1,
   97ece:	3201      	adds	r2, #1
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97ed0:	3101      	adds	r1, #1
   97ed2:	e734      	b.n	97d3e <keyboard_paint_function+0x322>
					this_keyboard->key_pressed_row == 2 &&
   97ed4:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
   97ed8:	2b00      	cmp	r3, #0
   97eda:	d186      	bne.n	97dea <keyboard_paint_function+0x3ce>
				mw_gl_monochrome_bitmap(draw_info,
   97edc:	2310      	movs	r3, #16
						2 * this_keyboard->key_size + bitmap_offset + 1,
   97ede:	f8b9 201a 	ldrh.w	r2, [r9, #26]
   97ee2:	9c09      	ldr	r4, [sp, #36]	; 0x24
				mw_gl_monochrome_bitmap(draw_info,
   97ee4:	491c      	ldr	r1, [pc, #112]	; (97f58 <keyboard_paint_function+0x53c>)
						2 * this_keyboard->key_size + bitmap_offset + 1,
   97ee6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   97eea:	3201      	adds	r2, #1
				mw_gl_monochrome_bitmap(draw_info,
   97eec:	9101      	str	r1, [sp, #4]
   97eee:	b212      	sxth	r2, r2
   97ef0:	1c61      	adds	r1, r4, #1
   97ef2:	9300      	str	r3, [sp, #0]
   97ef4:	4640      	mov	r0, r8
   97ef6:	4c12      	ldr	r4, [pc, #72]	; (97f40 <keyboard_paint_function+0x524>)
   97ef8:	47a0      	blx	r4
   97efa:	e728      	b.n	97d4e <keyboard_paint_function+0x332>
					this_keyboard->key_pressed_row == 1 &&
   97efc:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
   97f00:	2b0a      	cmp	r3, #10
   97f02:	f47f af59 	bne.w	97db8 <keyboard_paint_function+0x39c>
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97f06:	f8b9 201a 	ldrh.w	r2, [r9, #26]
   97f0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   97f0c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   97f10:	eb05 0141 	add.w	r1, r5, r1, lsl #1
				mw_gl_monochrome_bitmap(draw_info,
   97f14:	2310      	movs	r3, #16
   97f16:	480f      	ldr	r0, [pc, #60]	; (97f54 <keyboard_paint_function+0x538>)
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97f18:	462c      	mov	r4, r5
						1 * this_keyboard->key_size + bitmap_offset + 1,
   97f1a:	3201      	adds	r2, #1
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97f1c:	3101      	adds	r1, #1
   97f1e:	e755      	b.n	97dcc <keyboard_paint_function+0x3b0>
					this_keyboard->key_pressed_row == 1 &&
   97f20:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
   97f24:	2b0a      	cmp	r3, #10
   97f26:	d18f      	bne.n	97e48 <keyboard_paint_function+0x42c>
				mw_gl_monochrome_bitmap(draw_info,
   97f28:	2310      	movs	r3, #16
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97f2a:	f8b9 201a 	ldrh.w	r2, [r9, #26]
				mw_gl_monochrome_bitmap(draw_info,
   97f2e:	4809      	ldr	r0, [pc, #36]	; (97f54 <keyboard_paint_function+0x538>)
   97f30:	e7c7      	b.n	97ec2 <keyboard_paint_function+0x4a6>
   97f32:	bf00      	nop
   97f34:	000abfb4 	.word	0x000abfb4
   97f38:	000855b9 	.word	0x000855b9
   97f3c:	000a66d4 	.word	0x000a66d4
   97f40:	000868b1 	.word	0x000868b1
   97f44:	000a67ec 	.word	0x000a67ec
   97f48:	000a68bc 	.word	0x000a68bc
   97f4c:	00a6a6a6 	.word	0x00a6a6a6
   97f50:	00e6e6e6 	.word	0x00e6e6e6
   97f54:	000a6954 	.word	0x000a6954
   97f58:	000a6934 	.word	0x000a6934
   97f5c:	00084715 	.word	0x00084715
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97f60:	f8b9 201a 	ldrh.w	r2, [r9, #26]
   97f64:	9c09      	ldr	r4, [sp, #36]	; 0x24
   97f66:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   97f6a:	eb04 0142 	add.w	r1, r4, r2, lsl #1
				mw_gl_monochrome_bitmap(draw_info,
   97f6e:	2310      	movs	r3, #16
   97f70:	4622      	mov	r2, r4
   97f72:	480e      	ldr	r0, [pc, #56]	; (97fac <keyboard_paint_function+0x590>)
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97f74:	3101      	adds	r1, #1
				mw_gl_monochrome_bitmap(draw_info,
   97f76:	9001      	str	r0, [sp, #4]
   97f78:	b209      	sxth	r1, r1
   97f7a:	9300      	str	r3, [sp, #0]
   97f7c:	3201      	adds	r2, #1
   97f7e:	4640      	mov	r0, r8
   97f80:	4c0b      	ldr	r4, [pc, #44]	; (97fb0 <keyboard_paint_function+0x594>)
   97f82:	47a0      	blx	r4
   97f84:	e6c9      	b.n	97d1a <keyboard_paint_function+0x2fe>
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97f86:	f8b9 201a 	ldrh.w	r2, [r9, #26]
   97f8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   97f8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   97f90:	eb04 0142 	add.w	r1, r4, r2, lsl #1
				mw_gl_monochrome_bitmap(draw_info,
   97f94:	2310      	movs	r3, #16
   97f96:	4622      	mov	r2, r4
   97f98:	4804      	ldr	r0, [pc, #16]	; (97fac <keyboard_paint_function+0x590>)
						10 * this_keyboard->key_size + bitmap_offset + 1,
   97f9a:	3101      	adds	r1, #1
				mw_gl_monochrome_bitmap(draw_info,
   97f9c:	9001      	str	r0, [sp, #4]
   97f9e:	b209      	sxth	r1, r1
   97fa0:	9300      	str	r3, [sp, #0]
   97fa2:	3201      	adds	r2, #1
   97fa4:	4640      	mov	r0, r8
   97fa6:	4c02      	ldr	r4, [pc, #8]	; (97fb0 <keyboard_paint_function+0x594>)
   97fa8:	47a0      	blx	r4
   97faa:	e746      	b.n	97e3a <keyboard_paint_function+0x41e>
   97fac:	000a67ec 	.word	0x000a67ec
   97fb0:	000868b1 	.word	0x000868b1

00097fb4 <process_keypress.isra.0>:
/**
 * Process a keypress, either as a new touch down or a hold down from a previous touch down
 *
 * @param message Message passed in from message handler that calls this function
 */
static void process_keypress(const mw_message_t *message)
   97fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	mw_ui_keyboard_data_t *this_keyboard = (mw_ui_keyboard_data_t*)mw_get_control_instance_data(message->recipient_handle);
   97fb6:	4b33      	ldr	r3, [pc, #204]	; (98084 <process_keypress.isra.0+0xd0>)
static void process_keypress(const mw_message_t *message)
   97fb8:	b083      	sub	sp, #12
   97fba:	4605      	mov	r5, r0
	mw_ui_keyboard_data_t *this_keyboard = (mw_ui_keyboard_data_t*)mw_get_control_instance_data(message->recipient_handle);
   97fbc:	6800      	ldr	r0, [r0, #0]
   97fbe:	4798      	blx	r3

	/* check for shift key pressed */
	if (this_keyboard->key_pressed_row == 2
   97fc0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
	mw_ui_keyboard_data_t *this_keyboard = (mw_ui_keyboard_data_t*)mw_get_control_instance_data(message->recipient_handle);
   97fc4:	4604      	mov	r4, r0
	if (this_keyboard->key_pressed_row == 2
   97fc6:	2b02      	cmp	r3, #2
   97fc8:	d040      	beq.n	9804c <process_keypress.isra.0+0x98>
			this_keyboard->keyboard_display = KEYBOARD_UPPER_CHARS;
		}
		this_keyboard->swap_keyboard = true;
	}
	/* check for upper keypad change key pressed */
	else if (this_keyboard->key_pressed_row == 0 && this_keyboard->key_pressed_column == 10)
   97fca:	2b00      	cmp	r3, #0
   97fcc:	d130      	bne.n	98030 <process_keypress.isra.0+0x7c>
   97fce:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   97fd2:	2a0a      	cmp	r2, #10
   97fd4:	d047      	beq.n	98066 <process_keypress.isra.0+0xb2>
	}
	/* else get the character that has been pressed */
	else
	{
		/* post message for keypress */
		mw_post_message(MW_KEY_PRESSED_MESSAGE,
   97fd6:	682f      	ldr	r7, [r5, #0]
   97fd8:	4b2b      	ldr	r3, [pc, #172]	; (98088 <process_keypress.isra.0+0xd4>)
   97fda:	4638      	mov	r0, r7
   97fdc:	4798      	blx	r3
   97fde:	2600      	movs	r6, #0
				message->recipient_handle,
				mw_get_control_parent_window_handle(message->recipient_handle),
				(uint32_t)keyboards[this_keyboard->keyboard_display][this_keyboard->key_pressed_row][this_keyboard->key_pressed_column],
   97fe0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   97fe4:	7ba2      	ldrb	r2, [r4, #14]
   97fe6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   97fea:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   97fee:	eb02 1242 	add.w	r2, r2, r2, lsl #5
   97ff2:	4926      	ldr	r1, [pc, #152]	; (9808c <process_keypress.isra.0+0xd8>)
   97ff4:	4413      	add	r3, r2
   97ff6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   97ffa:	440b      	add	r3, r1
		mw_post_message(MW_KEY_PRESSED_MESSAGE,
   97ffc:	5c9b      	ldrb	r3, [r3, r2]
   97ffe:	9601      	str	r6, [sp, #4]
   98000:	4602      	mov	r2, r0
   98002:	9600      	str	r6, [sp, #0]
   98004:	4639      	mov	r1, r7
   98006:	2024      	movs	r0, #36	; 0x24
   98008:	4e21      	ldr	r6, [pc, #132]	; (98090 <process_keypress.isra.0+0xdc>)
   9800a:	47b0      	blx	r6
   9800c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   98010:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
				NULL,
				MW_WINDOW_MESSAGE);
	}

	/* repaint pressed key area only */
	this_keyboard->invalid_rect.x = this_keyboard->key_pressed_column * this_keyboard->key_size;
   98014:	8b60      	ldrh	r0, [r4, #26]
	this_keyboard->invalid_rect.y = this_keyboard->key_pressed_row * this_keyboard->key_size;
	mw_paint_control_rect(message->recipient_handle, &this_keyboard->invalid_rect);
   98016:	1da1      	adds	r1, r4, #6
	this_keyboard->invalid_rect.x = this_keyboard->key_pressed_column * this_keyboard->key_size;
   98018:	fb02 f200 	mul.w	r2, r2, r0
	this_keyboard->invalid_rect.y = this_keyboard->key_pressed_row * this_keyboard->key_size;
   9801c:	fb03 f300 	mul.w	r3, r3, r0
	this_keyboard->invalid_rect.x = this_keyboard->key_pressed_column * this_keyboard->key_size;
   98020:	80e2      	strh	r2, [r4, #6]
	this_keyboard->invalid_rect.y = this_keyboard->key_pressed_row * this_keyboard->key_size;
   98022:	8123      	strh	r3, [r4, #8]
	mw_paint_control_rect(message->recipient_handle, &this_keyboard->invalid_rect);
   98024:	6828      	ldr	r0, [r5, #0]
   98026:	4b1b      	ldr	r3, [pc, #108]	; (98094 <process_keypress.isra.0+0xe0>)
}
   98028:	b003      	add	sp, #12
   9802a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	mw_paint_control_rect(message->recipient_handle, &this_keyboard->invalid_rect);
   9802e:	4718      	bx	r3
	else if (this_keyboard->key_pressed_row == 1 && this_keyboard->key_pressed_column == 10)
   98030:	2b01      	cmp	r3, #1
   98032:	d1d0      	bne.n	97fd6 <process_keypress.isra.0+0x22>
   98034:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   98038:	2a0a      	cmp	r2, #10
   9803a:	d1cc      	bne.n	97fd6 <process_keypress.isra.0+0x22>
		if (this_keyboard->keyboard_display == KEYBOARD_LOWER_CHARS ||
   9803c:	7b81      	ldrb	r1, [r0, #14]
   9803e:	2902      	cmp	r1, #2
   98040:	d81a      	bhi.n	98078 <process_keypress.isra.0+0xc4>
			this_keyboard->keyboard_display = KEYBOARD_SYMBOLS;
   98042:	2103      	movs	r1, #3
   98044:	7381      	strb	r1, [r0, #14]
		this_keyboard->swap_keyboard = true;
   98046:	2101      	movs	r1, #1
   98048:	7061      	strb	r1, [r4, #1]
   9804a:	e7e3      	b.n	98014 <process_keypress.isra.0+0x60>
			&& this_keyboard->key_pressed_column == 0 &&
   9804c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   98050:	2a00      	cmp	r2, #0
   98052:	d1c0      	bne.n	97fd6 <process_keypress.isra.0+0x22>
			(this_keyboard->keyboard_display == KEYBOARD_UPPER_CHARS ||
   98054:	7b81      	ldrb	r1, [r0, #14]
			&& this_keyboard->key_pressed_column == 0 &&
   98056:	2901      	cmp	r1, #1
   98058:	d8bd      	bhi.n	97fd6 <process_keypress.isra.0+0x22>
		this_keyboard->swap_keyboard = true;
   9805a:	2001      	movs	r0, #1
   9805c:	4041      	eors	r1, r0
   9805e:	4001      	ands	r1, r0
   98060:	73a1      	strb	r1, [r4, #14]
   98062:	7060      	strb	r0, [r4, #1]
   98064:	e7d6      	b.n	98014 <process_keypress.isra.0+0x60>
		if (this_keyboard->keyboard_display == KEYBOARD_LOWER_CHARS ||
   98066:	7b81      	ldrb	r1, [r0, #14]
		this_keyboard->swap_keyboard = true;
   98068:	2001      	movs	r0, #1
		if (this_keyboard->keyboard_display == KEYBOARD_LOWER_CHARS ||
   9806a:	4281      	cmp	r1, r0
			this_keyboard->keyboard_display = KEYBOARD_NUMBERS;
   9806c:	bf8c      	ite	hi
   9806e:	2100      	movhi	r1, #0
   98070:	2102      	movls	r1, #2
		this_keyboard->swap_keyboard = true;
   98072:	7060      	strb	r0, [r4, #1]
   98074:	73a1      	strb	r1, [r4, #14]
   98076:	e7cd      	b.n	98014 <process_keypress.isra.0+0x60>
		else if (this_keyboard->keyboard_display == KEYBOARD_SYMBOLS)
   98078:	2903      	cmp	r1, #3
			this_keyboard->keyboard_display = KEYBOARD_NUMBERS;
   9807a:	bf04      	itt	eq
   9807c:	2102      	moveq	r1, #2
   9807e:	7381      	strbeq	r1, [r0, #14]
   98080:	e7e1      	b.n	98046 <process_keypress.isra.0+0x92>
   98082:	bf00      	nop
   98084:	0009176d 	.word	0x0009176d
   98088:	00091721 	.word	0x00091721
   9808c:	000abfb4 	.word	0x000abfb4
   98090:	00091955 	.word	0x00091955
   98094:	00090fd9 	.word	0x00090fd9

00098098 <keyboard_message_function>:
 * Control message handler called by the window manager.
 *
 * @param message The message to be processed
 */
static void keyboard_message_function(const mw_message_t *message)
{
   98098:	b570      	push	{r4, r5, r6, lr}
	mw_ui_keyboard_data_t *this_keyboard = (mw_ui_keyboard_data_t*)mw_get_control_instance_data(message->recipient_handle);
   9809a:	4b42      	ldr	r3, [pc, #264]	; (981a4 <keyboard_message_function+0x10c>)
{
   9809c:	4604      	mov	r4, r0
	mw_ui_keyboard_data_t *this_keyboard = (mw_ui_keyboard_data_t*)mw_get_control_instance_data(message->recipient_handle);
   9809e:	6840      	ldr	r0, [r0, #4]
   980a0:	4798      	blx	r3
	uint32_t intermediate_uint32;

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   980a2:	4e41      	ldr	r6, [pc, #260]	; (981a8 <keyboard_message_function+0x110>)
   980a4:	4b41      	ldr	r3, [pc, #260]	; (981ac <keyboard_message_function+0x114>)
	mw_ui_keyboard_data_t *this_keyboard = (mw_ui_keyboard_data_t*)mw_get_control_instance_data(message->recipient_handle);
   980a6:	4605      	mov	r5, r0
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   980a8:	f240 12cb 	movw	r2, #459	; 0x1cb
   980ac:	4940      	ldr	r1, [pc, #256]	; (981b0 <keyboard_message_function+0x118>)
   980ae:	2001      	movs	r0, #1
   980b0:	47b0      	blx	r6

	switch (message->message_id)
   980b2:	7a23      	ldrb	r3, [r4, #8]
   980b4:	3b0d      	subs	r3, #13
   980b6:	2b0c      	cmp	r3, #12
   980b8:	d814      	bhi.n	980e4 <keyboard_message_function+0x4c>
   980ba:	e8df f003 	tbb	[pc, r3]
   980be:	131f      	.short	0x131f
   980c0:	13131313 	.word	0x13131313
   980c4:	07314913 	.word	0x07314913
   980c8:	1331      	.short	0x1331
   980ca:	14          	.byte	0x14
   980cb:	00          	.byte	0x00
		this_keyboard->is_key_pressed = true;
		process_keypress(message);
		break;

	case MW_TOUCH_UP_MESSAGE:
		if (this_keyboard->holding_down)
   980cc:	7e2b      	ldrb	r3, [r5, #24]
   980ce:	b14b      	cbz	r3, 980e4 <keyboard_message_function+0x4c>
		{
			this_keyboard->holding_down = false;
   980d0:	2200      	movs	r2, #0
			this_keyboard->timer_handle = mw_set_timer(mw_tick_counter + MW_KEY_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   980d2:	4b38      	ldr	r3, [pc, #224]	; (981b4 <keyboard_message_function+0x11c>)
			this_keyboard->holding_down = false;
   980d4:	762a      	strb	r2, [r5, #24]
			this_keyboard->timer_handle = mw_set_timer(mw_tick_counter + MW_KEY_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   980d6:	6818      	ldr	r0, [r3, #0]
   980d8:	6861      	ldr	r1, [r4, #4]
   980da:	3003      	adds	r0, #3
   980dc:	2201      	movs	r2, #1
   980de:	4b36      	ldr	r3, [pc, #216]	; (981b8 <keyboard_message_function+0x120>)
   980e0:	4798      	blx	r3
   980e2:	6128      	str	r0, [r5, #16]
   980e4:	bd70      	pop	{r4, r5, r6, pc}
		this_keyboard->is_key_pressed = false;
   980e6:	2300      	movs	r3, #0
		if (this_keyboard->swap_keyboard)
   980e8:	786a      	ldrb	r2, [r5, #1]
		this_keyboard->is_key_pressed = false;
   980ea:	702b      	strb	r3, [r5, #0]
		if (this_keyboard->swap_keyboard)
   980ec:	2a00      	cmp	r2, #0
   980ee:	d053      	beq.n	98198 <keyboard_message_function+0x100>
			this_keyboard->swap_keyboard = false;
   980f0:	706b      	strb	r3, [r5, #1]
			mw_paint_control(message->recipient_handle);
   980f2:	6860      	ldr	r0, [r4, #4]
   980f4:	4b31      	ldr	r3, [pc, #196]	; (981bc <keyboard_message_function+0x124>)

	default:
		/* keep MISRA happy */
		break;
	}
}
   980f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mw_paint_control(message->recipient_handle);
   980fa:	4718      	bx	r3
		this_keyboard->is_key_pressed = false;
   980fc:	2300      	movs	r3, #0
   980fe:	702b      	strb	r3, [r5, #0]
		this_keyboard->keyboard_display = KEYBOARD_UPPER_CHARS;
   98100:	73ab      	strb	r3, [r5, #14]
		this_keyboard->swap_keyboard = false;
   98102:	706b      	strb	r3, [r5, #1]
		this_keyboard->holding_down = false;
   98104:	762b      	strb	r3, [r5, #24]
		this_keyboard->timer_handle = MW_INVALID_HANDLE;
   98106:	612b      	str	r3, [r5, #16]
		if ((mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   98108:	6860      	ldr	r0, [r4, #4]
   9810a:	4b2d      	ldr	r3, [pc, #180]	; (981c0 <keyboard_message_function+0x128>)
   9810c:	4798      	blx	r3
			this_keyboard->key_size = MW_UI_KEYBOARD_KEY_SIZE;
   9810e:	f010 0f08 	tst.w	r0, #8
   98112:	bf14      	ite	ne
   98114:	2328      	movne	r3, #40	; 0x28
   98116:	2314      	moveq	r3, #20
   98118:	836b      	strh	r3, [r5, #26]
		this_keyboard->invalid_rect.width = this_keyboard->key_size;
   9811a:	816b      	strh	r3, [r5, #10]
		this_keyboard->invalid_rect.height = this_keyboard->key_size;
   9811c:	81ab      	strh	r3, [r5, #12]
		break;
   9811e:	bd70      	pop	{r4, r5, r6, pc}
		if ((mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_IS_ENABLED) == 0U)
   98120:	6860      	ldr	r0, [r4, #4]
   98122:	4b27      	ldr	r3, [pc, #156]	; (981c0 <keyboard_message_function+0x128>)
   98124:	4798      	blx	r3
   98126:	0782      	lsls	r2, r0, #30
   98128:	d5dc      	bpl.n	980e4 <keyboard_message_function+0x4c>
		if (!this_keyboard->is_key_pressed)
   9812a:	782b      	ldrb	r3, [r5, #0]
   9812c:	2b00      	cmp	r3, #0
   9812e:	d0d9      	beq.n	980e4 <keyboard_message_function+0x4c>
		mw_cancel_timer(this_keyboard->timer_handle);
   98130:	4b24      	ldr	r3, [pc, #144]	; (981c4 <keyboard_message_function+0x12c>)
   98132:	6928      	ldr	r0, [r5, #16]
   98134:	4798      	blx	r3
		this_keyboard->holding_down = true;
   98136:	2101      	movs	r1, #1
		if (mw_tick_counter - this_keyboard->touch_down_time > MW_HOLD_DOWN_DELAY_TICKS)
   98138:	4b1e      	ldr	r3, [pc, #120]	; (981b4 <keyboard_message_function+0x11c>)
   9813a:	696a      	ldr	r2, [r5, #20]
   9813c:	681b      	ldr	r3, [r3, #0]
		this_keyboard->holding_down = true;
   9813e:	7629      	strb	r1, [r5, #24]
		if (mw_tick_counter - this_keyboard->touch_down_time > MW_HOLD_DOWN_DELAY_TICKS)
   98140:	1a9b      	subs	r3, r3, r2
   98142:	2b0a      	cmp	r3, #10
   98144:	d9ce      	bls.n	980e4 <keyboard_message_function+0x4c>
			process_keypress(message);
   98146:	1d20      	adds	r0, r4, #4
   98148:	4b1f      	ldr	r3, [pc, #124]	; (981c8 <keyboard_message_function+0x130>)
}
   9814a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			process_keypress(message);
   9814e:	4718      	bx	r3
		if ((mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_IS_ENABLED) == 0U)
   98150:	4b1b      	ldr	r3, [pc, #108]	; (981c0 <keyboard_message_function+0x128>)
   98152:	6860      	ldr	r0, [r4, #4]
   98154:	4798      	blx	r3
   98156:	0783      	lsls	r3, r0, #30
   98158:	d5c4      	bpl.n	980e4 <keyboard_message_function+0x4c>
		this_keyboard->key_pressed_row = ((int16_t)intermediate_uint32 / this_keyboard->key_size);
   9815a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   9815e:	f9b5 101a 	ldrsh.w	r1, [r5, #26]
		this_keyboard->timer_handle = mw_set_timer(mw_tick_counter + MW_KEY_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   98162:	4626      	mov	r6, r4
		this_keyboard->key_pressed_row = ((int16_t)intermediate_uint32 / this_keyboard->key_size);
   98164:	fb92 f2f1 	sdiv	r2, r2, r1
   98168:	806a      	strh	r2, [r5, #2]
		this_keyboard->key_pressed_column = (int16_t)intermediate_uint32 / this_keyboard->key_size;
   9816a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
		this_keyboard->touch_down_time = mw_tick_counter;
   9816e:	4a11      	ldr	r2, [pc, #68]	; (981b4 <keyboard_message_function+0x11c>)
		this_keyboard->key_pressed_column = (int16_t)intermediate_uint32 / this_keyboard->key_size;
   98170:	fb93 f3f1 	sdiv	r3, r3, r1
		this_keyboard->touch_down_time = mw_tick_counter;
   98174:	6811      	ldr	r1, [r2, #0]
		this_keyboard->timer_handle = mw_set_timer(mw_tick_counter + MW_KEY_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   98176:	6810      	ldr	r0, [r2, #0]
		this_keyboard->key_pressed_column = (int16_t)intermediate_uint32 / this_keyboard->key_size;
   98178:	80ab      	strh	r3, [r5, #4]
		this_keyboard->touch_down_time = mw_tick_counter;
   9817a:	6169      	str	r1, [r5, #20]
		this_keyboard->timer_handle = mw_set_timer(mw_tick_counter + MW_KEY_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   9817c:	f856 1f04 	ldr.w	r1, [r6, #4]!
   98180:	4b0d      	ldr	r3, [pc, #52]	; (981b8 <keyboard_message_function+0x120>)
   98182:	3003      	adds	r0, #3
   98184:	2201      	movs	r2, #1
   98186:	4798      	blx	r3
		this_keyboard->is_key_pressed = true;
   98188:	2301      	movs	r3, #1
		this_keyboard->timer_handle = mw_set_timer(mw_tick_counter + MW_KEY_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   9818a:	6128      	str	r0, [r5, #16]
		this_keyboard->is_key_pressed = true;
   9818c:	702b      	strb	r3, [r5, #0]
		process_keypress(message);
   9818e:	4630      	mov	r0, r6
}
   98190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		process_keypress(message);
   98194:	4b0c      	ldr	r3, [pc, #48]	; (981c8 <keyboard_message_function+0x130>)
   98196:	4718      	bx	r3
			mw_paint_control_rect(message->recipient_handle, &this_keyboard->invalid_rect);
   98198:	1da9      	adds	r1, r5, #6
   9819a:	6860      	ldr	r0, [r4, #4]
   9819c:	4b0b      	ldr	r3, [pc, #44]	; (981cc <keyboard_message_function+0x134>)
}
   9819e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mw_paint_control_rect(message->recipient_handle, &this_keyboard->invalid_rect);
   981a2:	4718      	bx	r3
   981a4:	0009176d 	.word	0x0009176d
   981a8:	00095add 	.word	0x00095add
   981ac:	000a6618 	.word	0x000a6618
   981b0:	000abf98 	.word	0x000abf98
   981b4:	20072f98 	.word	0x20072f98
   981b8:	000917f9 	.word	0x000917f9
   981bc:	00090f71 	.word	0x00090f71
   981c0:	000917b9 	.word	0x000917b9
   981c4:	00091891 	.word	0x00091891
   981c8:	00097fb5 	.word	0x00097fb5
   981cc:	00090fd9 	.word	0x00090fd9

000981d0 <mw_ui_keyboard_add_new>:
mw_handle_t mw_ui_keyboard_add_new(int16_t x,
		int16_t y,
		mw_handle_t parent_handle,
		uint16_t flags,
		mw_ui_keyboard_data_t *keyboard_instance_data)
{
   981d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   981d2:	461d      	mov	r5, r3
	mw_util_rect_t r;

	if ((flags & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   981d4:	071b      	lsls	r3, r3, #28
{
   981d6:	b085      	sub	sp, #20
   981d8:	4616      	mov	r6, r2
	if ((flags & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   981da:	d413      	bmi.n	98204 <mw_ui_keyboard_add_new+0x34>
	{
		mw_util_set_rect(&r, x, y, MW_UI_KEYBOARD_WIDTH_LARGE_SIZE, MW_UI_KEYBOARD_HEIGHT_LARGE_SIZE);
	}
	else
	{
		mw_util_set_rect(&r, x, y, MW_UI_KEYBOARD_WIDTH, MW_UI_KEYBOARD_HEIGHT);
   981dc:	233c      	movs	r3, #60	; 0x3c
   981de:	ac02      	add	r4, sp, #8
   981e0:	460a      	mov	r2, r1
   981e2:	9300      	str	r3, [sp, #0]
   981e4:	4601      	mov	r1, r0
   981e6:	23dc      	movs	r3, #220	; 0xdc
   981e8:	4620      	mov	r0, r4
   981ea:	4f0c      	ldr	r7, [pc, #48]	; (9821c <mw_ui_keyboard_add_new+0x4c>)
   981ec:	47b8      	blx	r7
	}

	return (mw_add_control(&r,
   981ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   981f0:	9500      	str	r5, [sp, #0]
   981f2:	9301      	str	r3, [sp, #4]
   981f4:	4631      	mov	r1, r6
   981f6:	4620      	mov	r0, r4
   981f8:	4b09      	ldr	r3, [pc, #36]	; (98220 <mw_ui_keyboard_add_new+0x50>)
   981fa:	4a0a      	ldr	r2, [pc, #40]	; (98224 <mw_ui_keyboard_add_new+0x54>)
   981fc:	4c0a      	ldr	r4, [pc, #40]	; (98228 <mw_ui_keyboard_add_new+0x58>)
   981fe:	47a0      	blx	r4
			parent_handle,
			keyboard_paint_function,
			keyboard_message_function,
			flags,
			keyboard_instance_data));
}
   98200:	b005      	add	sp, #20
   98202:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mw_util_set_rect(&r, x, y, MW_UI_KEYBOARD_WIDTH_LARGE_SIZE, MW_UI_KEYBOARD_HEIGHT_LARGE_SIZE);
   98204:	2378      	movs	r3, #120	; 0x78
   98206:	ac02      	add	r4, sp, #8
   98208:	460a      	mov	r2, r1
   9820a:	9300      	str	r3, [sp, #0]
   9820c:	4601      	mov	r1, r0
   9820e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   98212:	4620      	mov	r0, r4
   98214:	4f01      	ldr	r7, [pc, #4]	; (9821c <mw_ui_keyboard_add_new+0x4c>)
   98216:	47b8      	blx	r7
   98218:	e7e9      	b.n	981ee <mw_ui_keyboard_add_new+0x1e>
   9821a:	bf00      	nop
   9821c:	00096e3d 	.word	0x00096e3d
   98220:	00098099 	.word	0x00098099
   98224:	00097a1d 	.word	0x00097a1d
   98228:	000909c5 	.word	0x000909c5

0009822c <label_paint_function>:
 *
 * @param control_handle The control identifier in the array of controls
 * @param draw_info Draw info structure describing offset and clip region
 */
static void label_paint_function(mw_handle_t control_handle, const mw_gl_draw_info_t *draw_info)
{
   9822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mw_ui_label_data_t *this_label = (mw_ui_label_data_t*)mw_get_control_instance_data(control_handle);
   98230:	4b27      	ldr	r3, [pc, #156]	; (982d0 <label_paint_function+0xa4>)
{
   98232:	b086      	sub	sp, #24
   98234:	460d      	mov	r5, r1
   98236:	4604      	mov	r4, r0
	mw_ui_label_data_t *this_label = (mw_ui_label_data_t*)mw_get_control_instance_data(control_handle);
   98238:	4798      	blx	r3
   9823a:	4607      	mov	r7, r0

	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   9823c:	1c28      	adds	r0, r5, #0
   9823e:	bf18      	it	ne
   98240:	2001      	movne	r0, #1
   98242:	2247      	movs	r2, #71	; 0x47
   98244:	4923      	ldr	r1, [pc, #140]	; (982d4 <label_paint_function+0xa8>)
   98246:	4b24      	ldr	r3, [pc, #144]	; (982d8 <label_paint_function+0xac>)
   98248:	4e24      	ldr	r6, [pc, #144]	; (982dc <label_paint_function+0xb0>)
   9824a:	47b0      	blx	r6

    /* draw the background */
	mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   9824c:	4824      	ldr	r0, [pc, #144]	; (982e0 <label_paint_function+0xb4>)
   9824e:	4b25      	ldr	r3, [pc, #148]	; (982e4 <label_paint_function+0xb8>)
   98250:	4798      	blx	r3
	mw_gl_set_fill(MW_GL_FILL);
   98252:	2001      	movs	r0, #1
   98254:	4b24      	ldr	r3, [pc, #144]	; (982e8 <label_paint_function+0xbc>)
   98256:	4798      	blx	r3
	mw_gl_clear_pattern();
   98258:	4b24      	ldr	r3, [pc, #144]	; (982ec <label_paint_function+0xc0>)
   9825a:	4798      	blx	r3
	mw_gl_set_line(MW_GL_SOLID_LINE);
   9825c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   98260:	4b23      	ldr	r3, [pc, #140]	; (982f0 <label_paint_function+0xc4>)
   98262:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_OFF);
   98264:	4b23      	ldr	r3, [pc, #140]	; (982f4 <label_paint_function+0xc8>)
   98266:	2000      	movs	r0, #0
   98268:	4798      	blx	r3
	mw_gl_rectangle(draw_info,
			0,
			0,
			mw_get_control_rect(control_handle).width,
   9826a:	4e23      	ldr	r6, [pc, #140]	; (982f8 <label_paint_function+0xcc>)
   9826c:	4621      	mov	r1, r4
   9826e:	a802      	add	r0, sp, #8
   98270:	47b0      	blx	r6
			mw_get_control_rect(control_handle).height);
   98272:	4621      	mov	r1, r4
   98274:	a804      	add	r0, sp, #16
	mw_gl_rectangle(draw_info,
   98276:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
			mw_get_control_rect(control_handle).height);
   9827a:	47b0      	blx	r6
	mw_gl_rectangle(draw_info,
   9827c:	2200      	movs	r2, #0
   9827e:	f9bd 6016 	ldrsh.w	r6, [sp, #22]
   98282:	4611      	mov	r1, r2
   98284:	4643      	mov	r3, r8
   98286:	4628      	mov	r0, r5
   98288:	9600      	str	r6, [sp, #0]
   9828a:	4e1c      	ldr	r6, [pc, #112]	; (982fc <label_paint_function+0xd0>)
   9828c:	47b0      	blx	r6

    /* set label text colour according to enabled state */
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   9828e:	4e1c      	ldr	r6, [pc, #112]	; (98300 <label_paint_function+0xd4>)
   98290:	4620      	mov	r0, r4
   98292:	47b0      	blx	r6
   98294:	0783      	lsls	r3, r0, #30
	{
		mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   98296:	bf4c      	ite	mi
   98298:	2000      	movmi	r0, #0
	}
	else
	{
		mw_gl_set_fg_colour(MW_CONTROL_DISABLED_COLOUR);
   9829a:	481a      	ldrpl	r0, [pc, #104]	; (98304 <label_paint_function+0xd8>)
   9829c:	4b1a      	ldr	r3, [pc, #104]	; (98308 <label_paint_function+0xdc>)
   9829e:	4798      	blx	r3
	}
    
    /* draw the label text */
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);    
   982a0:	2000      	movs	r0, #0
   982a2:	4b1a      	ldr	r3, [pc, #104]	; (9830c <label_paint_function+0xe0>)
   982a4:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   982a6:	4b1a      	ldr	r3, [pc, #104]	; (98310 <label_paint_function+0xe4>)
   982a8:	2000      	movs	r0, #0
   982aa:	4798      	blx	r3

	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   982ac:	4620      	mov	r0, r4
   982ae:	47b0      	blx	r6
		mw_gl_string(draw_info, MW_UI_LABEL_LARGE_X_OFFSET, 1, this_label->label);
	}
	else
	{
		mw_gl_set_font(MW_GL_FONT_9);
		mw_gl_string(draw_info, MW_UI_LABEL_LARGE_X_OFFSET, 1, this_label->label);
   982b0:	4c18      	ldr	r4, [pc, #96]	; (98314 <label_paint_function+0xe8>)
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   982b2:	f010 0008 	ands.w	r0, r0, #8
		mw_gl_set_font(MW_GL_TITLE_FONT);
   982b6:	bf18      	it	ne
   982b8:	2005      	movne	r0, #5
		mw_gl_set_font(MW_GL_FONT_9);
   982ba:	4b17      	ldr	r3, [pc, #92]	; (98318 <label_paint_function+0xec>)
   982bc:	4798      	blx	r3
		mw_gl_string(draw_info, MW_UI_LABEL_LARGE_X_OFFSET, 1, this_label->label);
   982be:	463b      	mov	r3, r7
   982c0:	4628      	mov	r0, r5
   982c2:	2201      	movs	r2, #1
   982c4:	2102      	movs	r1, #2
   982c6:	46a4      	mov	ip, r4
	}
}
   982c8:	b006      	add	sp, #24
   982ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		mw_gl_string(draw_info, MW_UI_LABEL_LARGE_X_OFFSET, 1, this_label->label);
   982ce:	4760      	bx	ip
   982d0:	0009176d 	.word	0x0009176d
   982d4:	000ac038 	.word	0x000ac038
   982d8:	000a6618 	.word	0x000a6618
   982dc:	00095add 	.word	0x00095add
   982e0:	00e6e6e6 	.word	0x00e6e6e6
   982e4:	000846c9 	.word	0x000846c9
   982e8:	000846fd 	.word	0x000846fd
   982ec:	000846e1 	.word	0x000846e1
   982f0:	000846d5 	.word	0x000846d5
   982f4:	000846f1 	.word	0x000846f1
   982f8:	000916c5 	.word	0x000916c5
   982fc:	000850e1 	.word	0x000850e1
   98300:	000917b9 	.word	0x000917b9
   98304:	00bfbfbf 	.word	0x00bfbfbf
   98308:	000846b1 	.word	0x000846b1
   9830c:	00084709 	.word	0x00084709
   98310:	00084745 	.word	0x00084745
   98314:	00085f1d 	.word	0x00085f1d
   98318:	00084715 	.word	0x00084715

0009831c <label_message_function>:
 * Control message handler called by the window manager.
 *
 * @param message The message to be processed
 */
static void label_message_function(const mw_message_t *message)
{
   9831c:	b570      	push	{r4, r5, r6, lr}
	mw_ui_label_data_t *this_label = (mw_ui_label_data_t*)mw_get_control_instance_data(message->recipient_handle);
   9831e:	4b0f      	ldr	r3, [pc, #60]	; (9835c <label_message_function+0x40>)
{
   98320:	4604      	mov	r4, r0
	mw_ui_label_data_t *this_label = (mw_ui_label_data_t*)mw_get_control_instance_data(message->recipient_handle);
   98322:	6840      	ldr	r0, [r0, #4]
   98324:	4798      	blx	r3

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   98326:	4d0e      	ldr	r5, [pc, #56]	; (98360 <label_message_function+0x44>)
   98328:	4b0e      	ldr	r3, [pc, #56]	; (98364 <label_message_function+0x48>)
	mw_ui_label_data_t *this_label = (mw_ui_label_data_t*)mw_get_control_instance_data(message->recipient_handle);
   9832a:	4606      	mov	r6, r0
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   9832c:	2278      	movs	r2, #120	; 0x78
   9832e:	490e      	ldr	r1, [pc, #56]	; (98368 <label_message_function+0x4c>)
   98330:	2001      	movs	r0, #1
   98332:	47a8      	blx	r5

	switch (message->message_id)
   98334:	7a23      	ldrb	r3, [r4, #8]
   98336:	2b2d      	cmp	r3, #45	; 0x2d
   98338:	d107      	bne.n	9834a <label_message_function+0x2e>
	{
	case MW_LABEL_SET_LABEL_TEXT_MESSAGE:
		/* message pointer field contains pointer to new text */
		if (message->message_pointer != NULL)
   9833a:	6922      	ldr	r2, [r4, #16]
   9833c:	b132      	cbz	r2, 9834c <label_message_function+0x30>
		{
			(void)mw_util_safe_strcpy(this_label->label, MW_UI_LABEL_MAX_CHARS, (char *)message->message_pointer);
   9833e:	4630      	mov	r0, r6

	default:
		/* keep MISRA happy */
		break;
	}
}
   98340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)mw_util_safe_strcpy(this_label->label, MW_UI_LABEL_MAX_CHARS, (char *)message->message_pointer);
   98344:	2128      	movs	r1, #40	; 0x28
   98346:	4b09      	ldr	r3, [pc, #36]	; (9836c <label_message_function+0x50>)
   98348:	4718      	bx	r3
   9834a:	bd70      	pop	{r4, r5, r6, pc}
			MW_ASSERT((bool)false, "Null pointer argument");
   9834c:	4610      	mov	r0, r2
   9834e:	46ac      	mov	ip, r5
}
   98350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			MW_ASSERT((bool)false, "Null pointer argument");
   98354:	4b03      	ldr	r3, [pc, #12]	; (98364 <label_message_function+0x48>)
   98356:	2284      	movs	r2, #132	; 0x84
   98358:	4903      	ldr	r1, [pc, #12]	; (98368 <label_message_function+0x4c>)
   9835a:	4760      	bx	ip
   9835c:	0009176d 	.word	0x0009176d
   98360:	00095add 	.word	0x00095add
   98364:	000a6618 	.word	0x000a6618
   98368:	000ac050 	.word	0x000ac050
   9836c:	00096f31 	.word	0x00096f31

00098370 <mw_ui_label_add_new>:
		int16_t y,
		int16_t width,
		mw_handle_t parent_handle,
		uint16_t flags,
		mw_ui_label_data_t *label_instance_data)
{
   98370:	b5f0      	push	{r4, r5, r6, r7, lr}
   98372:	b085      	sub	sp, #20
   98374:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
   98378:	461e      	mov	r6, r3
	mw_util_rect_t r;

	if ((flags & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   9837a:	072b      	lsls	r3, r5, #28
	{
		mw_util_set_rect(&r, x, y, width, MW_UI_LABEL_LARGE_HEIGHT);
   9837c:	bf4c      	ite	mi
   9837e:	2712      	movmi	r7, #18
	}
	else
	{
		mw_util_set_rect(&r, x, y, width, MW_UI_LABEL_HEIGHT);
   98380:	270c      	movpl	r7, #12
   98382:	ac02      	add	r4, sp, #8
   98384:	4613      	mov	r3, r2
   98386:	9700      	str	r7, [sp, #0]
   98388:	460a      	mov	r2, r1
   9838a:	4f07      	ldr	r7, [pc, #28]	; (983a8 <mw_ui_label_add_new+0x38>)
   9838c:	4601      	mov	r1, r0
   9838e:	4620      	mov	r0, r4
   98390:	47b8      	blx	r7
	}

	return (mw_add_control(&r,
   98392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   98394:	9500      	str	r5, [sp, #0]
   98396:	9301      	str	r3, [sp, #4]
   98398:	4631      	mov	r1, r6
   9839a:	4620      	mov	r0, r4
   9839c:	4b03      	ldr	r3, [pc, #12]	; (983ac <mw_ui_label_add_new+0x3c>)
   9839e:	4a04      	ldr	r2, [pc, #16]	; (983b0 <mw_ui_label_add_new+0x40>)
   983a0:	4c04      	ldr	r4, [pc, #16]	; (983b4 <mw_ui_label_add_new+0x44>)
   983a2:	47a0      	blx	r4
			parent_handle,
			label_paint_function,
			label_message_function,
			flags,
			label_instance_data));
}
   983a4:	b005      	add	sp, #20
   983a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   983a8:	00096e3d 	.word	0x00096e3d
   983ac:	0009831d 	.word	0x0009831d
   983b0:	0009822d 	.word	0x0009822d
   983b4:	000909c5 	.word	0x000909c5

000983b8 <list_box_message_function>:
 * Control message handler called by the window manager.
 *
 * @param message The message to be processed
 */
static void list_box_message_function(const mw_message_t *message)
{
   983b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int16_t touch_y;
	mw_ui_list_box_data_t *this_list_box = (mw_ui_list_box_data_t*)mw_get_control_instance_data(message->recipient_handle);
   983bc:	4b7f      	ldr	r3, [pc, #508]	; (985bc <list_box_message_function+0x204>)
{
   983be:	b084      	sub	sp, #16
   983c0:	4604      	mov	r4, r0
	mw_ui_list_box_data_t *this_list_box = (mw_ui_list_box_data_t*)mw_get_control_instance_data(message->recipient_handle);
   983c2:	6840      	ldr	r0, [r0, #4]
   983c4:	4798      	blx	r3
	int16_t row_height;
	bool intermediate_bool;
	uint32_t intermediate_uint32;
	int16_t line_number;

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   983c6:	f8df 8228 	ldr.w	r8, [pc, #552]	; 985f0 <list_box_message_function+0x238>
   983ca:	4b7d      	ldr	r3, [pc, #500]	; (985c0 <list_box_message_function+0x208>)
   983cc:	f240 1227 	movw	r2, #295	; 0x127
   983d0:	497c      	ldr	r1, [pc, #496]	; (985c4 <list_box_message_function+0x20c>)
	mw_ui_list_box_data_t *this_list_box = (mw_ui_list_box_data_t*)mw_get_control_instance_data(message->recipient_handle);
   983d2:	4605      	mov	r5, r0
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   983d4:	2001      	movs	r0, #1
   983d6:	47c0      	blx	r8

	if ((mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   983d8:	4f7b      	ldr	r7, [pc, #492]	; (985c8 <list_box_message_function+0x210>)
   983da:	6860      	ldr	r0, [r4, #4]
   983dc:	47b8      	blx	r7
   983de:	0702      	lsls	r2, r0, #28
   983e0:	bf4c      	ite	mi
   983e2:	261c      	movmi	r6, #28
   983e4:	260e      	movpl	r6, #14
	else
	{
		row_height = MW_UI_LIST_BOX_ROW_HEIGHT;
	}

	switch (message->message_id)
   983e6:	7a23      	ldrb	r3, [r4, #8]
		row_height = MW_UI_LIST_BOX_ROW_HEIGHT;
   983e8:	46b1      	mov	r9, r6
	switch (message->message_id)
   983ea:	3b0d      	subs	r3, #13
   983ec:	2b26      	cmp	r3, #38	; 0x26
   983ee:	d846      	bhi.n	9847e <list_box_message_function+0xc6>
   983f0:	e8df f013 	tbh	[pc, r3, lsl #1]
   983f4:	0045006a 	.word	0x0045006a
   983f8:	00450045 	.word	0x00450045
   983fc:	00450045 	.word	0x00450045
   98400:	00860045 	.word	0x00860045
   98404:	00450045 	.word	0x00450045
   98408:	00450045 	.word	0x00450045
   9840c:	004500b4 	.word	0x004500b4
   98410:	00450045 	.word	0x00450045
   98414:	00450045 	.word	0x00450045
   98418:	00450045 	.word	0x00450045
   9841c:	00450045 	.word	0x00450045
   98420:	00450045 	.word	0x00450045
   98424:	00450045 	.word	0x00450045
   98428:	00450045 	.word	0x00450045
   9842c:	00450045 	.word	0x00450045
   98430:	00450045 	.word	0x00450045
   98434:	00450045 	.word	0x00450045
   98438:	00450045 	.word	0x00450045
   9843c:	002700ca 	.word	0x002700ca
   98440:	0048      	.short	0x0048
		}
		break;

	case MW_LIST_BOX_SCROLL_BAR_POSITION_MESSAGE:
		/* check if scrolling is appropriate */
		if (this_list_box->number_of_items <= this_list_box->number_of_lines)
   98442:	786a      	ldrb	r2, [r5, #1]
   98444:	7829      	ldrb	r1, [r5, #0]
   98446:	428a      	cmp	r2, r1
   98448:	f240 80aa 	bls.w	985a0 <list_box_message_function+0x1e8>
			intermediate_uint32 = 0U;
		}
		else
		{
			/* yes so recalculate vertical scroll lines from last scroll bar position recorded */
			  intermediate_uint32 = (message->message_data *
   9844c:	68e3      	ldr	r3, [r4, #12]
					((uint32_t)this_list_box->number_of_items - (uint32_t)this_list_box->number_of_lines)) /
   9844e:	1a52      	subs	r2, r2, r1
			  intermediate_uint32 = (message->message_data *
   98450:	fb03 f302 	mul.w	r3, r3, r2
   98454:	4a5d      	ldr	r2, [pc, #372]	; (985cc <list_box_message_function+0x214>)
   98456:	fba2 2303 	umull	r2, r3, r2, r3
   9845a:	09db      	lsrs	r3, r3, #7
					(uint32_t)UINT8_MAX;
		}

		if (this_list_box->lines_to_scroll != (uint8_t)intermediate_uint32)
   9845c:	7daa      	ldrb	r2, [r5, #22]
   9845e:	b2db      	uxtb	r3, r3
   98460:	429a      	cmp	r2, r3
   98462:	d00c      	beq.n	9847e <list_box_message_function+0xc6>
		{
			this_list_box->lines_to_scroll = (uint8_t)intermediate_uint32;
   98464:	75ab      	strb	r3, [r5, #22]
			mw_post_message(MW_SCROLLED_CONTROL_NEEDS_PAINTING_HINT_MESSAGE,
   98466:	6864      	ldr	r4, [r4, #4]
   98468:	4b59      	ldr	r3, [pc, #356]	; (985d0 <list_box_message_function+0x218>)
   9846a:	4620      	mov	r0, r4
   9846c:	4798      	blx	r3
   9846e:	2300      	movs	r3, #0
   98470:	4602      	mov	r2, r0
   98472:	4621      	mov	r1, r4
   98474:	9301      	str	r3, [sp, #4]
   98476:	9300      	str	r3, [sp, #0]
   98478:	202c      	movs	r0, #44	; 0x2c
   9847a:	4c56      	ldr	r4, [pc, #344]	; (985d4 <list_box_message_function+0x21c>)
   9847c:	47a0      	blx	r4

	default:
		/* keep MISRA happy */
		break;
	}
}
   9847e:	b004      	add	sp, #16
   98480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (message->message_pointer != NULL)
   98484:	6920      	ldr	r0, [r4, #16]
   98486:	2800      	cmp	r0, #0
   98488:	f000 808f 	beq.w	985aa <list_box_message_function+0x1f2>
				this_list_box->lines_to_scroll = 0U;
   9848c:	2300      	movs	r3, #0
				this_list_box->number_of_items = (uint8_t)message->message_data;
   9848e:	7b22      	ldrb	r2, [r4, #12]
				if (this_list_box->number_of_items > this_list_box->number_of_lines)
   98490:	7829      	ldrb	r1, [r5, #0]
				this_list_box->number_of_items = (uint8_t)message->message_data;
   98492:	706a      	strb	r2, [r5, #1]
				this_list_box->list_box_entries = (mw_ui_list_box_entry *)message->message_pointer;
   98494:	6920      	ldr	r0, [r4, #16]
				this_list_box->lines_to_scroll = 0U;
   98496:	75ab      	strb	r3, [r5, #22]
				this_list_box->list_box_entries = (mw_ui_list_box_entry *)message->message_pointer;
   98498:	6068      	str	r0, [r5, #4]
				mw_post_message(MW_LIST_BOX_SCROLLING_REQUIRED_MESSAGE,
   9849a:	6866      	ldr	r6, [r4, #4]
				if (this_list_box->number_of_items > this_list_box->number_of_lines)
   9849c:	428a      	cmp	r2, r1
					message_data |= ((uint32_t)this_list_box->number_of_items - (uint32_t)this_list_box->number_of_lines);
   9849e:	bf8c      	ite	hi
   984a0:	1a52      	subhi	r2, r2, r1
			uint32_t message_data = 0U;
   984a2:	461d      	movls	r5, r3
				mw_post_message(MW_LIST_BOX_SCROLLING_REQUIRED_MESSAGE,
   984a4:	4630      	mov	r0, r6
   984a6:	4b4a      	ldr	r3, [pc, #296]	; (985d0 <list_box_message_function+0x218>)
					message_data |= ((uint32_t)this_list_box->number_of_items - (uint32_t)this_list_box->number_of_lines);
   984a8:	bf88      	it	hi
   984aa:	f442 3580 	orrhi.w	r5, r2, #65536	; 0x10000
				mw_post_message(MW_LIST_BOX_SCROLLING_REQUIRED_MESSAGE,
   984ae:	4798      	blx	r3
   984b0:	2400      	movs	r4, #0
   984b2:	4602      	mov	r2, r0
   984b4:	4631      	mov	r1, r6
   984b6:	462b      	mov	r3, r5
   984b8:	9401      	str	r4, [sp, #4]
   984ba:	9400      	str	r4, [sp, #0]
   984bc:	201e      	movs	r0, #30
   984be:	4c45      	ldr	r4, [pc, #276]	; (985d4 <list_box_message_function+0x21c>)
   984c0:	47a0      	blx	r4
}
   984c2:	b004      	add	sp, #16
   984c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			this_list_box->line_is_selected = false;
   984c8:	2600      	movs	r6, #0
   984ca:	72ee      	strb	r6, [r5, #11]
			this_list_box->lines_to_scroll = 0U;
   984cc:	75ae      	strb	r6, [r5, #22]
			this_list_box->invalid_rect.x = 0;
   984ce:	81ee      	strh	r6, [r5, #14]
			this_list_box->invalid_rect.width = mw_get_control_rect(message->recipient_handle).width;
   984d0:	6861      	ldr	r1, [r4, #4]
   984d2:	a802      	add	r0, sp, #8
   984d4:	4b40      	ldr	r3, [pc, #256]	; (985d8 <list_box_message_function+0x220>)
   984d6:	4798      	blx	r3
   984d8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
			if (this_list_box->number_of_items > this_list_box->number_of_lines)
   984dc:	786b      	ldrb	r3, [r5, #1]
   984de:	782a      	ldrb	r2, [r5, #0]
			this_list_box->invalid_rect.width = mw_get_control_rect(message->recipient_handle).width;
   984e0:	8269      	strh	r1, [r5, #18]
			mw_post_message(MW_LIST_BOX_SCROLLING_REQUIRED_MESSAGE,
   984e2:	6865      	ldr	r5, [r4, #4]
			if (this_list_box->number_of_items > this_list_box->number_of_lines)
   984e4:	4293      	cmp	r3, r2
				message_data |= ((uint32_t)this_list_box->number_of_items - (uint32_t)this_list_box->number_of_lines);
   984e6:	bf88      	it	hi
   984e8:	1a9e      	subhi	r6, r3, r2
			mw_post_message(MW_LIST_BOX_SCROLLING_REQUIRED_MESSAGE,
   984ea:	4628      	mov	r0, r5
   984ec:	4b38      	ldr	r3, [pc, #224]	; (985d0 <list_box_message_function+0x218>)
				message_data |= ((uint32_t)this_list_box->number_of_items - (uint32_t)this_list_box->number_of_lines);
   984ee:	bf88      	it	hi
   984f0:	f446 3680 	orrhi.w	r6, r6, #65536	; 0x10000
			mw_post_message(MW_LIST_BOX_SCROLLING_REQUIRED_MESSAGE,
   984f4:	4798      	blx	r3
   984f6:	2400      	movs	r4, #0
   984f8:	4602      	mov	r2, r0
   984fa:	4629      	mov	r1, r5
   984fc:	4633      	mov	r3, r6
   984fe:	e7db      	b.n	984b8 <list_box_message_function+0x100>
		line_number = touch_y / row_height;
   98500:	f9b4 800c 	ldrsh.w	r8, [r4, #12]
		intermediate_bool = (mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED;
   98504:	6860      	ldr	r0, [r4, #4]
		line_number = touch_y / row_height;
   98506:	fb98 f8f6 	sdiv	r8, r8, r6
		intermediate_bool = (mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED;
   9850a:	47b8      	blx	r7
		if (mw_util_get_bit(this_list_box->line_enables, (uint8_t)line_number) &&
   9850c:	fa5f fa88 	uxtb.w	sl, r8
		intermediate_bool = (mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED;
   98510:	4607      	mov	r7, r0
		if (mw_util_get_bit(this_list_box->line_enables, (uint8_t)line_number) &&
   98512:	4651      	mov	r1, sl
   98514:	8928      	ldrh	r0, [r5, #8]
   98516:	4b31      	ldr	r3, [pc, #196]	; (985dc <list_box_message_function+0x224>)
   98518:	4798      	blx	r3
   9851a:	2800      	cmp	r0, #0
   9851c:	d0af      	beq.n	9847e <list_box_message_function+0xc6>
   9851e:	07bb      	lsls	r3, r7, #30
   98520:	d5ad      	bpl.n	9847e <list_box_message_function+0xc6>
				line_number < (int16_t)this_list_box->number_of_items)
   98522:	786b      	ldrb	r3, [r5, #1]
				intermediate_bool &&
   98524:	4598      	cmp	r8, r3
   98526:	daaa      	bge.n	9847e <list_box_message_function+0xc6>
			this_list_box->line_is_selected = true;
   98528:	2701      	movs	r7, #1
			this_list_box->invalid_rect.y = row_height * (touch_y / row_height);
   9852a:	fb08 f606 	mul.w	r6, r8, r6
			this_list_box->selection = (uint8_t)line_number + this_list_box->lines_to_scroll;
   9852e:	7dab      	ldrb	r3, [r5, #22]
			this_list_box->invalid_rect.y = row_height * (touch_y / row_height);
   98530:	822e      	strh	r6, [r5, #16]
			this_list_box->selection = (uint8_t)line_number + this_list_box->lines_to_scroll;
   98532:	449a      	add	sl, r3
			this_list_box->invalid_rect.height = row_height;
   98534:	f8a5 9014 	strh.w	r9, [r5, #20]
			this_list_box->selection = (uint8_t)line_number + this_list_box->lines_to_scroll;
   98538:	f885 a00a 	strb.w	sl, [r5, #10]
			this_list_box->line_is_selected = true;
   9853c:	72ef      	strb	r7, [r5, #11]
			mw_paint_control_rect(message->recipient_handle, &this_list_box->invalid_rect);
   9853e:	f105 010e 	add.w	r1, r5, #14
   98542:	6860      	ldr	r0, [r4, #4]
   98544:	4b26      	ldr	r3, [pc, #152]	; (985e0 <list_box_message_function+0x228>)
   98546:	4798      	blx	r3
			(void)mw_set_timer(mw_tick_counter + MW_CONTROL_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   98548:	463a      	mov	r2, r7
   9854a:	4b26      	ldr	r3, [pc, #152]	; (985e4 <list_box_message_function+0x22c>)
   9854c:	6861      	ldr	r1, [r4, #4]
   9854e:	6818      	ldr	r0, [r3, #0]
   98550:	4b25      	ldr	r3, [pc, #148]	; (985e8 <list_box_message_function+0x230>)
   98552:	3004      	adds	r0, #4
}
   98554:	b004      	add	sp, #16
   98556:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)mw_set_timer(mw_tick_counter + MW_CONTROL_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   9855a:	4718      	bx	r3
		this_list_box->line_is_selected = false;
   9855c:	2600      	movs	r6, #0
   9855e:	72ee      	strb	r6, [r5, #11]
		mw_post_message(MW_LIST_BOX_ITEM_PRESSED_MESSAGE,
   98560:	6867      	ldr	r7, [r4, #4]
   98562:	4b1b      	ldr	r3, [pc, #108]	; (985d0 <list_box_message_function+0x218>)
   98564:	4638      	mov	r0, r7
   98566:	4798      	blx	r3
   98568:	7aab      	ldrb	r3, [r5, #10]
   9856a:	4602      	mov	r2, r0
   9856c:	4639      	mov	r1, r7
   9856e:	9601      	str	r6, [sp, #4]
   98570:	9600      	str	r6, [sp, #0]
   98572:	201d      	movs	r0, #29
   98574:	4e17      	ldr	r6, [pc, #92]	; (985d4 <list_box_message_function+0x21c>)
   98576:	47b0      	blx	r6
		mw_paint_control_rect(message->recipient_handle, &this_list_box->invalid_rect);
   98578:	6860      	ldr	r0, [r4, #4]
   9857a:	4b19      	ldr	r3, [pc, #100]	; (985e0 <list_box_message_function+0x228>)
   9857c:	f105 010e 	add.w	r1, r5, #14
}
   98580:	b004      	add	sp, #16
   98582:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		mw_paint_control_rect(message->recipient_handle, &this_list_box->invalid_rect);
   98586:	4718      	bx	r3
		if (this_list_box->number_of_items <= this_list_box->number_of_lines)
   98588:	786b      	ldrb	r3, [r5, #1]
   9858a:	782a      	ldrb	r2, [r5, #0]
   9858c:	4293      	cmp	r3, r2
   9858e:	d909      	bls.n	985a4 <list_box_message_function+0x1ec>
			this_list_box->lines_to_scroll = (uint8_t)message->message_data;
   98590:	68e1      	ldr	r1, [r4, #12]
			if (this_list_box->lines_to_scroll > (this_list_box->number_of_items - this_list_box->number_of_lines))
   98592:	1a9b      	subs	r3, r3, r2
   98594:	b2ca      	uxtb	r2, r1
			this_list_box->lines_to_scroll = (uint8_t)message->message_data;
   98596:	429a      	cmp	r2, r3
   98598:	bfd8      	it	le
   9859a:	460b      	movle	r3, r1
   9859c:	75ab      	strb	r3, [r5, #22]
   9859e:	e76e      	b.n	9847e <list_box_message_function+0xc6>
   985a0:	2300      	movs	r3, #0
   985a2:	e75b      	b.n	9845c <list_box_message_function+0xa4>
			this_list_box->lines_to_scroll = 0U;
   985a4:	2300      	movs	r3, #0
   985a6:	75ab      	strb	r3, [r5, #22]
   985a8:	e769      	b.n	9847e <list_box_message_function+0xc6>
				MW_ASSERT((bool)false, "Null pointer");
   985aa:	f240 1295 	movw	r2, #405	; 0x195
   985ae:	46c4      	mov	ip, r8
   985b0:	4b0e      	ldr	r3, [pc, #56]	; (985ec <list_box_message_function+0x234>)
   985b2:	4904      	ldr	r1, [pc, #16]	; (985c4 <list_box_message_function+0x20c>)
}
   985b4:	b004      	add	sp, #16
   985b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				MW_ASSERT((bool)false, "Null pointer");
   985ba:	4760      	bx	ip
   985bc:	0009176d 	.word	0x0009176d
   985c0:	000a6618 	.word	0x000a6618
   985c4:	000ac080 	.word	0x000ac080
   985c8:	000917b9 	.word	0x000917b9
   985cc:	80808081 	.word	0x80808081
   985d0:	00091721 	.word	0x00091721
   985d4:	00091955 	.word	0x00091955
   985d8:	000916c5 	.word	0x000916c5
   985dc:	00097029 	.word	0x00097029
   985e0:	00090fd9 	.word	0x00090fd9
   985e4:	20072f98 	.word	0x20072f98
   985e8:	000917f9 	.word	0x000917f9
   985ec:	000a64a0 	.word	0x000a64a0
   985f0:	00095add 	.word	0x00095add

000985f4 <list_box_paint_function>:
{
   985f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_ui_list_box_data_t *this_list_box = (mw_ui_list_box_data_t*)mw_get_control_instance_data(control_handle);
   985f8:	4b92      	ldr	r3, [pc, #584]	; (98844 <list_box_paint_function+0x250>)
{
   985fa:	b0a5      	sub	sp, #148	; 0x94
   985fc:	468a      	mov	sl, r1
   985fe:	4606      	mov	r6, r0
	mw_ui_list_box_data_t *this_list_box = (mw_ui_list_box_data_t*)mw_get_control_instance_data(control_handle);
   98600:	4798      	blx	r3
   98602:	4605      	mov	r5, r0
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   98604:	f11a 0000 	adds.w	r0, sl, #0
   98608:	bf18      	it	ne
   9860a:	2001      	movne	r0, #1
   9860c:	4b8e      	ldr	r3, [pc, #568]	; (98848 <list_box_paint_function+0x254>)
   9860e:	224c      	movs	r2, #76	; 0x4c
   98610:	498e      	ldr	r1, [pc, #568]	; (9884c <list_box_paint_function+0x258>)
   98612:	4c8f      	ldr	r4, [pc, #572]	; (98850 <list_box_paint_function+0x25c>)
   98614:	47a0      	blx	r4
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   98616:	4630      	mov	r0, r6
   98618:	4b8e      	ldr	r3, [pc, #568]	; (98854 <list_box_paint_function+0x260>)
   9861a:	4798      	blx	r3
   9861c:	f010 0008 	ands.w	r0, r0, #8
   98620:	f000 817f 	beq.w	98922 <list_box_paint_function+0x32e>
		mw_gl_set_font(MW_GL_TITLE_FONT);
   98624:	4b8c      	ldr	r3, [pc, #560]	; (98858 <list_box_paint_function+0x264>)
   98626:	2005      	movs	r0, #5
   98628:	4798      	blx	r3
   9862a:	2305      	movs	r3, #5
   9862c:	9308      	str	r3, [sp, #32]
   9862e:	2306      	movs	r3, #6
   98630:	9307      	str	r3, [sp, #28]
   98632:	231a      	movs	r3, #26
   98634:	9306      	str	r3, [sp, #24]
   98636:	231c      	movs	r3, #28
   98638:	9303      	str	r3, [sp, #12]
		icon_x_offset = MW_UI_LIST_BOX_LARGE_LABEL_X_OFFSET - 4;
   9863a:	2304      	movs	r3, #4
   9863c:	9304      	str	r3, [sp, #16]
	mw_gl_set_fill(MW_GL_FILL);
   9863e:	2001      	movs	r0, #1
   98640:	4b86      	ldr	r3, [pc, #536]	; (9885c <list_box_paint_function+0x268>)
   98642:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   98644:	4886      	ldr	r0, [pc, #536]	; (98860 <list_box_paint_function+0x26c>)
   98646:	4b87      	ldr	r3, [pc, #540]	; (98864 <list_box_paint_function+0x270>)
   98648:	4798      	blx	r3
	mw_gl_set_line(MW_GL_SOLID_LINE);
   9864a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   9864e:	4b86      	ldr	r3, [pc, #536]	; (98868 <list_box_paint_function+0x274>)
   98650:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_ON);
   98652:	4b86      	ldr	r3, [pc, #536]	; (9886c <list_box_paint_function+0x278>)
   98654:	2001      	movs	r0, #1
   98656:	4798      	blx	r3
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   98658:	f8df 8244 	ldr.w	r8, [pc, #580]	; 988a0 <list_box_paint_function+0x2ac>
   9865c:	2000      	movs	r0, #0
   9865e:	47c0      	blx	r8
	mw_gl_clear_pattern();
   98660:	4b83      	ldr	r3, [pc, #524]	; (98870 <list_box_paint_function+0x27c>)
			mw_get_control_rect(control_handle).width,
   98662:	f8df b240 	ldr.w	fp, [pc, #576]	; 988a4 <list_box_paint_function+0x2b0>
	mw_gl_clear_pattern();
   98666:	4798      	blx	r3
			mw_get_control_rect(control_handle).width,
   98668:	4631      	mov	r1, r6
   9866a:	a80a      	add	r0, sp, #40	; 0x28
   9866c:	47d8      	blx	fp
			mw_get_control_rect(control_handle).height);
   9866e:	4631      	mov	r1, r6
   98670:	a80c      	add	r0, sp, #48	; 0x30
	mw_gl_rectangle(draw_info,
   98672:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	; 0x2c
			mw_get_control_rect(control_handle).height);
   98676:	47d8      	blx	fp
	mw_gl_rectangle(draw_info,
   98678:	2200      	movs	r2, #0
   9867a:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
   9867e:	4623      	mov	r3, r4
   98680:	4611      	mov	r1, r2
   98682:	9000      	str	r0, [sp, #0]
   98684:	4c7b      	ldr	r4, [pc, #492]	; (98874 <list_box_paint_function+0x280>)
   98686:	4650      	mov	r0, sl
   98688:	47a0      	blx	r4
	mw_gl_set_fg_colour(MW_HAL_LCD_WHITE);
   9868a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   9868e:	47c0      	blx	r8
	mw_gl_vline(draw_info, 1, 1, mw_get_control_rect(control_handle).height - 2);
   98690:	4631      	mov	r1, r6
   98692:	a80e      	add	r0, sp, #56	; 0x38
   98694:	47d8      	blx	fp
   98696:	2201      	movs	r2, #1
   98698:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
   9869c:	4611      	mov	r1, r2
   9869e:	3b02      	subs	r3, #2
   986a0:	b21b      	sxth	r3, r3
   986a2:	4650      	mov	r0, sl
   986a4:	4c74      	ldr	r4, [pc, #464]	; (98878 <list_box_paint_function+0x284>)
   986a6:	47a0      	blx	r4
	mw_gl_hline(draw_info, 1, mw_get_control_rect(control_handle).width - 2, 1);
   986a8:	4631      	mov	r1, r6
   986aa:	a810      	add	r0, sp, #64	; 0x40
   986ac:	47d8      	blx	fp
   986ae:	2301      	movs	r3, #1
   986b0:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
   986b4:	4619      	mov	r1, r3
   986b6:	3a02      	subs	r2, #2
   986b8:	b212      	sxth	r2, r2
   986ba:	4650      	mov	r0, sl
   986bc:	4c6f      	ldr	r4, [pc, #444]	; (9887c <list_box_paint_function+0x288>)
   986be:	47a0      	blx	r4
	mw_gl_set_fg_colour(MW_HAL_LCD_GREY7);
   986c0:	486f      	ldr	r0, [pc, #444]	; (98880 <list_box_paint_function+0x28c>)
   986c2:	47c0      	blx	r8
	mw_gl_vline(draw_info, mw_get_control_rect(control_handle).width - 2, 1, mw_get_control_rect(control_handle).height - 2);
   986c4:	4631      	mov	r1, r6
   986c6:	a812      	add	r0, sp, #72	; 0x48
   986c8:	47d8      	blx	fp
   986ca:	f8bd 404c 	ldrh.w	r4, [sp, #76]	; 0x4c
   986ce:	4631      	mov	r1, r6
   986d0:	a814      	add	r0, sp, #80	; 0x50
   986d2:	47d8      	blx	fp
   986d4:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
   986d8:	3c02      	subs	r4, #2
   986da:	b224      	sxth	r4, r4
   986dc:	3b02      	subs	r3, #2
   986de:	b21b      	sxth	r3, r3
   986e0:	2201      	movs	r2, #1
   986e2:	4621      	mov	r1, r4
   986e4:	4650      	mov	r0, sl
   986e6:	4c64      	ldr	r4, [pc, #400]	; (98878 <list_box_paint_function+0x284>)
   986e8:	47a0      	blx	r4
	mw_gl_hline(draw_info, 1, mw_get_control_rect(control_handle).width - 2, mw_get_control_rect(control_handle).height - 2);
   986ea:	4631      	mov	r1, r6
   986ec:	a816      	add	r0, sp, #88	; 0x58
   986ee:	47d8      	blx	fp
   986f0:	f8bd 405c 	ldrh.w	r4, [sp, #92]	; 0x5c
   986f4:	4631      	mov	r1, r6
   986f6:	a818      	add	r0, sp, #96	; 0x60
   986f8:	47d8      	blx	fp
   986fa:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   986fe:	3c02      	subs	r4, #2
   98700:	b224      	sxth	r4, r4
   98702:	3b02      	subs	r3, #2
   98704:	4622      	mov	r2, r4
   98706:	2101      	movs	r1, #1
   98708:	b21b      	sxth	r3, r3
   9870a:	4650      	mov	r0, sl
   9870c:	4c5b      	ldr	r4, [pc, #364]	; (9887c <list_box_paint_function+0x288>)
   9870e:	47a0      	blx	r4
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   98710:	2000      	movs	r0, #0
   98712:	4b5c      	ldr	r3, [pc, #368]	; (98884 <list_box_paint_function+0x290>)
   98714:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   98716:	4b5c      	ldr	r3, [pc, #368]	; (98888 <list_box_paint_function+0x294>)
   98718:	2000      	movs	r0, #0
   9871a:	4798      	blx	r3
	for (i = 0U; i < this_list_box->number_of_lines; i++)
   9871c:	782b      	ldrb	r3, [r5, #0]
   9871e:	2b00      	cmp	r3, #0
   98720:	f000 808c 	beq.w	9883c <list_box_paint_function+0x248>
		mw_gl_set_line(MW_GL_DOT_LINE);
   98724:	2400      	movs	r4, #0
		mw_gl_set_fg_colour(MW_CONTROL_SEPARATOR_COLOUR);
   98726:	4859      	ldr	r0, [pc, #356]	; (9888c <list_box_paint_function+0x298>)
   98728:	47c0      	blx	r8
		mw_gl_set_line(MW_GL_DOT_LINE);
   9872a:	f245 5055 	movw	r0, #21845	; 0x5555
   9872e:	4b4e      	ldr	r3, [pc, #312]	; (98868 <list_box_paint_function+0x274>)
   98730:	4798      	blx	r3
   98732:	9602      	str	r6, [sp, #8]
		if (i >= this_list_box->number_of_items)
   98734:	786b      	ldrb	r3, [r5, #1]
   98736:	42a3      	cmp	r3, r4
   98738:	d81d      	bhi.n	98776 <list_box_paint_function+0x182>
   9873a:	1c67      	adds	r7, r4, #1
	for (i = 0U; i < this_list_box->number_of_lines; i++)
   9873c:	782b      	ldrb	r3, [r5, #0]
   9873e:	b2fc      	uxtb	r4, r7
   98740:	42a3      	cmp	r3, r4
   98742:	d97b      	bls.n	9883c <list_box_paint_function+0x248>
		mw_gl_set_fg_colour(MW_CONTROL_SEPARATOR_COLOUR);
   98744:	4851      	ldr	r0, [pc, #324]	; (9888c <list_box_paint_function+0x298>)
   98746:	47c0      	blx	r8
		mw_gl_set_line(MW_GL_DOT_LINE);
   98748:	f245 5055 	movw	r0, #21845	; 0x5555
   9874c:	4b46      	ldr	r3, [pc, #280]	; (98868 <list_box_paint_function+0x274>)
   9874e:	4798      	blx	r3
		if (i > 0U)
   98750:	2c00      	cmp	r4, #0
   98752:	d0ef      	beq.n	98734 <list_box_paint_function+0x140>
				mw_get_control_rect(control_handle).width - 4,
   98754:	9902      	ldr	r1, [sp, #8]
   98756:	a81a      	add	r0, sp, #104	; 0x68
   98758:	47d8      	blx	fp
   9875a:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
			mw_gl_hline(draw_info,
   9875e:	9b03      	ldr	r3, [sp, #12]
				mw_get_control_rect(control_handle).width - 4,
   98760:	3a04      	subs	r2, #4
			mw_gl_hline(draw_info,
   98762:	fb04 f303 	mul.w	r3, r4, r3
   98766:	b212      	sxth	r2, r2
   98768:	2102      	movs	r1, #2
   9876a:	4650      	mov	r0, sl
   9876c:	4f43      	ldr	r7, [pc, #268]	; (9887c <list_box_paint_function+0x288>)
   9876e:	47b8      	blx	r7
		if (i >= this_list_box->number_of_items)
   98770:	786b      	ldrb	r3, [r5, #1]
   98772:	42a3      	cmp	r3, r4
   98774:	d9e1      	bls.n	9873a <list_box_paint_function+0x146>
		if (this_list_box->line_is_selected && (this_list_box->selection - this_list_box->lines_to_scroll) == i)
   98776:	7aeb      	ldrb	r3, [r5, #11]
   98778:	b12b      	cbz	r3, 98786 <list_box_paint_function+0x192>
   9877a:	7aab      	ldrb	r3, [r5, #10]
   9877c:	7daa      	ldrb	r2, [r5, #22]
   9877e:	1a9b      	subs	r3, r3, r2
   98780:	42a3      	cmp	r3, r4
   98782:	f000 80db 	beq.w	9893c <list_box_paint_function+0x348>
   98786:	9b03      	ldr	r3, [sp, #12]
   98788:	1c67      	adds	r7, r4, #1
   9878a:	fb04 f903 	mul.w	r9, r4, r3
		intermediate_bool = (mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED;
   9878e:	4b31      	ldr	r3, [pc, #196]	; (98854 <list_box_paint_function+0x260>)
   98790:	9802      	ldr	r0, [sp, #8]
   98792:	4798      	blx	r3
		if (mw_util_get_bit(this_list_box->line_enables, i) && intermediate_bool)
   98794:	4621      	mov	r1, r4
		intermediate_bool = (mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED;
   98796:	4606      	mov	r6, r0
		if (mw_util_get_bit(this_list_box->line_enables, i) && intermediate_bool)
   98798:	4b3d      	ldr	r3, [pc, #244]	; (98890 <list_box_paint_function+0x29c>)
   9879a:	8928      	ldrh	r0, [r5, #8]
   9879c:	4798      	blx	r3
   9879e:	b118      	cbz	r0, 987a8 <list_box_paint_function+0x1b4>
   987a0:	4633      	mov	r3, r6
   987a2:	079b      	lsls	r3, r3, #30
   987a4:	f100 80b0 	bmi.w	98908 <list_box_paint_function+0x314>
			mw_gl_set_fg_colour(MW_CONTROL_DISABLED_COLOUR);
   987a8:	483a      	ldr	r0, [pc, #232]	; (98894 <list_box_paint_function+0x2a0>)
   987aa:	47c0      	blx	r8
		if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   987ac:	4b29      	ldr	r3, [pc, #164]	; (98854 <list_box_paint_function+0x260>)
   987ae:	9802      	ldr	r0, [sp, #8]
   987b0:	4798      	blx	r3
			if (this_list_box->list_box_entries[i + this_list_box->lines_to_scroll].icon != NULL)
   987b2:	7daa      	ldrb	r2, [r5, #22]
   987b4:	686b      	ldr	r3, [r5, #4]
   987b6:	1911      	adds	r1, r2, r4
   987b8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   987bc:	f010 0008 	ands.w	r0, r0, #8
			if (this_list_box->list_box_entries[i + this_list_box->lines_to_scroll].icon != NULL)
   987c0:	6859      	ldr	r1, [r3, #4]
		if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   987c2:	d071      	beq.n	988a8 <list_box_paint_function+0x2b4>
			if (this_list_box->list_box_entries[i + this_list_box->lines_to_scroll].icon != NULL)
   987c4:	2900      	cmp	r1, #0
   987c6:	f000 80a5 	beq.w	98914 <list_box_paint_function+0x320>
				mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   987ca:	2000      	movs	r0, #0
   987cc:	47c0      	blx	r8
				if (this_list_box->line_is_selected && (this_list_box->selection - this_list_box->lines_to_scroll) == i)
   987ce:	7aeb      	ldrb	r3, [r5, #11]
   987d0:	2b00      	cmp	r3, #0
   987d2:	f000 80a2 	beq.w	9891a <list_box_paint_function+0x326>
   987d6:	7aab      	ldrb	r3, [r5, #10]
   987d8:	7daa      	ldrb	r2, [r5, #22]
   987da:	1a99      	subs	r1, r3, r2
   987dc:	42a1      	cmp	r1, r4
   987de:	f000 811d 	beq.w	98a1c <list_box_paint_function+0x428>
					mw_gl_monochrome_bitmap(draw_info,
   987e2:	2310      	movs	r3, #16
   987e4:	6869      	ldr	r1, [r5, #4]
							this_list_box->list_box_entries[i + this_list_box->lines_to_scroll].icon);
   987e6:	4422      	add	r2, r4
					mw_gl_monochrome_bitmap(draw_info,
   987e8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   987ec:	6851      	ldr	r1, [r2, #4]
							row_height * (int16_t)i + MW_UI_LIST_BOX_LARGE_LABEL_Y_OFFSET - 2,
   987ee:	f109 0204 	add.w	r2, r9, #4
					mw_gl_monochrome_bitmap(draw_info,
   987f2:	9101      	str	r1, [sp, #4]
   987f4:	9904      	ldr	r1, [sp, #16]
   987f6:	9300      	str	r3, [sp, #0]
   987f8:	b212      	sxth	r2, r2
   987fa:	4650      	mov	r0, sl
   987fc:	4e26      	ldr	r6, [pc, #152]	; (98898 <list_box_paint_function+0x2a4>)
   987fe:	47b0      	blx	r6
   98800:	7daa      	ldrb	r2, [r5, #22]
   98802:	686b      	ldr	r3, [r5, #4]
   98804:	18a1      	adds	r1, r4, r2
   98806:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   9880a:	201a      	movs	r0, #26
				text_x_offset = (int16_t)MW_UI_LIST_BOX_LARGE_LABEL_X_OFFSET + (int16_t)MW_UI_LIST_BOX_LARGE_ICON_SIZE;
   9880c:	2118      	movs	r1, #24
			if (this_list_box->line_is_selected && (this_list_box->selection - this_list_box->lines_to_scroll) == i)
   9880e:	f895 e00b 	ldrb.w	lr, [r5, #11]
   98812:	f1be 0f00 	cmp.w	lr, #0
   98816:	d006      	beq.n	98826 <list_box_paint_function+0x232>
   98818:	f895 e00a 	ldrb.w	lr, [r5, #10]
   9881c:	ebae 0202 	sub.w	r2, lr, r2
   98820:	42a2      	cmp	r2, r4
   98822:	f000 80eb 	beq.w	989fc <list_box_paint_function+0x408>
						row_height * (int16_t)i + MW_UI_LIST_BOX_LARGE_LABEL_Y_OFFSET,
   98826:	f109 0206 	add.w	r2, r9, #6
				mw_gl_string(draw_info,
   9882a:	681b      	ldr	r3, [r3, #0]
   9882c:	4c1b      	ldr	r4, [pc, #108]	; (9889c <list_box_paint_function+0x2a8>)
   9882e:	b212      	sxth	r2, r2
   98830:	4650      	mov	r0, sl
   98832:	47a0      	blx	r4
	for (i = 0U; i < this_list_box->number_of_lines; i++)
   98834:	782b      	ldrb	r3, [r5, #0]
   98836:	b2fc      	uxtb	r4, r7
   98838:	42a3      	cmp	r3, r4
   9883a:	d883      	bhi.n	98744 <list_box_paint_function+0x150>
}
   9883c:	b025      	add	sp, #148	; 0x94
   9883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   98842:	bf00      	nop
   98844:	0009176d 	.word	0x0009176d
   98848:	000a6618 	.word	0x000a6618
   9884c:	000ac068 	.word	0x000ac068
   98850:	00095add 	.word	0x00095add
   98854:	000917b9 	.word	0x000917b9
   98858:	00084715 	.word	0x00084715
   9885c:	000846fd 	.word	0x000846fd
   98860:	00e6e6e6 	.word	0x00e6e6e6
   98864:	000846c9 	.word	0x000846c9
   98868:	000846d5 	.word	0x000846d5
   9886c:	000846f1 	.word	0x000846f1
   98870:	000846e1 	.word	0x000846e1
   98874:	000850e1 	.word	0x000850e1
   98878:	00084f39 	.word	0x00084f39
   9887c:	00084dd1 	.word	0x00084dd1
   98880:	00a6a6a6 	.word	0x00a6a6a6
   98884:	00084709 	.word	0x00084709
   98888:	00084745 	.word	0x00084745
   9888c:	00d9d9d9 	.word	0x00d9d9d9
   98890:	00097029 	.word	0x00097029
   98894:	00bfbfbf 	.word	0x00bfbfbf
   98898:	000868b1 	.word	0x000868b1
   9889c:	00085f1d 	.word	0x00085f1d
   988a0:	000846b1 	.word	0x000846b1
   988a4:	000916c5 	.word	0x000916c5
			if (this_list_box->list_box_entries[i + this_list_box->lines_to_scroll].icon != NULL)
   988a8:	2900      	cmp	r1, #0
   988aa:	d030      	beq.n	9890e <list_box_paint_function+0x31a>
				mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   988ac:	47c0      	blx	r8
				if (this_list_box->line_is_selected && (this_list_box->selection - this_list_box->lines_to_scroll) == i)
   988ae:	7aeb      	ldrb	r3, [r5, #11]
   988b0:	2b00      	cmp	r3, #0
   988b2:	d034      	beq.n	9891e <list_box_paint_function+0x32a>
   988b4:	7aab      	ldrb	r3, [r5, #10]
   988b6:	7daa      	ldrb	r2, [r5, #22]
   988b8:	1a99      	subs	r1, r3, r2
   988ba:	42a1      	cmp	r1, r4
   988bc:	f000 80a1 	beq.w	98a02 <list_box_paint_function+0x40e>
					mw_gl_monochrome_bitmap(draw_info,
   988c0:	2308      	movs	r3, #8
   988c2:	6869      	ldr	r1, [r5, #4]
							this_list_box->list_box_entries[i + this_list_box->lines_to_scroll].icon);
   988c4:	4422      	add	r2, r4
					mw_gl_monochrome_bitmap(draw_info,
   988c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   988ca:	6851      	ldr	r1, [r2, #4]
							row_height * (int16_t)i + MW_UI_LIST_BOX_LABEL_Y_OFFSET - 1,
   988cc:	f109 0202 	add.w	r2, r9, #2
					mw_gl_monochrome_bitmap(draw_info,
   988d0:	9101      	str	r1, [sp, #4]
   988d2:	9904      	ldr	r1, [sp, #16]
   988d4:	9300      	str	r3, [sp, #0]
   988d6:	b212      	sxth	r2, r2
   988d8:	4650      	mov	r0, sl
   988da:	4e57      	ldr	r6, [pc, #348]	; (98a38 <list_box_paint_function+0x444>)
   988dc:	47b0      	blx	r6
   988de:	7daa      	ldrb	r2, [r5, #22]
   988e0:	686b      	ldr	r3, [r5, #4]
   988e2:	18a1      	adds	r1, r4, r2
   988e4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   988e8:	2019      	movs	r0, #25
				text_x_offset = (int16_t)MW_UI_LIST_BOX_LABEL_X_OFFSET * (int16_t)2 + (int16_t)MW_UI_LIST_BOX_ICON_SIZE;
   988ea:	2118      	movs	r1, #24
			if (this_list_box->line_is_selected && (this_list_box->selection - this_list_box->lines_to_scroll) == i)
   988ec:	f895 e00b 	ldrb.w	lr, [r5, #11]
   988f0:	f1be 0f00 	cmp.w	lr, #0
   988f4:	d005      	beq.n	98902 <list_box_paint_function+0x30e>
   988f6:	f895 e00a 	ldrb.w	lr, [r5, #10]
   988fa:	ebae 0202 	sub.w	r2, lr, r2
   988fe:	42a2      	cmp	r2, r4
   98900:	d073      	beq.n	989ea <list_box_paint_function+0x3f6>
						row_height * (int16_t)i + MW_UI_LIST_BOX_LABEL_Y_OFFSET,
   98902:	f109 0203 	add.w	r2, r9, #3
   98906:	e790      	b.n	9882a <list_box_paint_function+0x236>
			mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   98908:	2000      	movs	r0, #0
   9890a:	47c0      	blx	r8
   9890c:	e74e      	b.n	987ac <list_box_paint_function+0x1b8>
   9890e:	2009      	movs	r0, #9
				text_x_offset = MW_UI_LIST_BOX_LABEL_X_OFFSET;
   98910:	2108      	movs	r1, #8
   98912:	e7eb      	b.n	988ec <list_box_paint_function+0x2f8>
   98914:	200a      	movs	r0, #10
				text_x_offset = MW_UI_LIST_BOX_LARGE_LABEL_X_OFFSET;
   98916:	2108      	movs	r1, #8
   98918:	e779      	b.n	9880e <list_box_paint_function+0x21a>
   9891a:	7daa      	ldrb	r2, [r5, #22]
   9891c:	e761      	b.n	987e2 <list_box_paint_function+0x1ee>
   9891e:	7daa      	ldrb	r2, [r5, #22]
   98920:	e7ce      	b.n	988c0 <list_box_paint_function+0x2cc>
		mw_gl_set_font(MW_GL_FONT_9);
   98922:	4b46      	ldr	r3, [pc, #280]	; (98a3c <list_box_paint_function+0x448>)
   98924:	4798      	blx	r3
   98926:	2309      	movs	r3, #9
   98928:	9308      	str	r3, [sp, #32]
   9892a:	230a      	movs	r3, #10
   9892c:	9307      	str	r3, [sp, #28]
   9892e:	230c      	movs	r3, #12
   98930:	9306      	str	r3, [sp, #24]
   98932:	230e      	movs	r3, #14
   98934:	9303      	str	r3, [sp, #12]
		icon_x_offset = MW_UI_LIST_BOX_LABEL_X_OFFSET;
   98936:	2308      	movs	r3, #8
   98938:	9304      	str	r3, [sp, #16]
   9893a:	e680      	b.n	9863e <list_box_paint_function+0x4a>
					row_height * (int16_t)i + 1,
   9893c:	9e03      	ldr	r6, [sp, #12]
			mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   9893e:	4840      	ldr	r0, [pc, #256]	; (98a40 <list_box_paint_function+0x44c>)
					row_height * (int16_t)i + 1,
   98940:	fb04 f906 	mul.w	r9, r4, r6
			mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   98944:	4b3f      	ldr	r3, [pc, #252]	; (98a44 <list_box_paint_function+0x450>)
   98946:	4798      	blx	r3
			mw_gl_set_border(MW_GL_BORDER_OFF);
   98948:	2000      	movs	r0, #0
   9894a:	4b3f      	ldr	r3, [pc, #252]	; (98a48 <list_box_paint_function+0x454>)
   9894c:	4798      	blx	r3
					row_height * (int16_t)i + 1,
   9894e:	f109 0301 	add.w	r3, r9, #1
			mw_gl_rectangle(draw_info,
   98952:	b21b      	sxth	r3, r3
   98954:	461f      	mov	r7, r3
					mw_get_control_rect(control_handle).width - 4,
   98956:	9902      	ldr	r1, [sp, #8]
   98958:	a81c      	add	r0, sp, #112	; 0x70
   9895a:	47d8      	blx	fp
   9895c:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
			mw_gl_rectangle(draw_info,
   98960:	9a06      	ldr	r2, [sp, #24]
					mw_get_control_rect(control_handle).width - 4,
   98962:	3b04      	subs	r3, #4
			mw_gl_rectangle(draw_info,
   98964:	b21b      	sxth	r3, r3
   98966:	2102      	movs	r1, #2
   98968:	9200      	str	r2, [sp, #0]
   9896a:	9705      	str	r7, [sp, #20]
   9896c:	463a      	mov	r2, r7
   9896e:	4650      	mov	r0, sl
   98970:	4f36      	ldr	r7, [pc, #216]	; (98a4c <list_box_paint_function+0x458>)
   98972:	47b8      	blx	r7
			mw_gl_set_line(MW_GL_SOLID_LINE);
   98974:	4a36      	ldr	r2, [pc, #216]	; (98a50 <list_box_paint_function+0x45c>)
   98976:	f64f 70ff 	movw	r0, #65535	; 0xffff
   9897a:	4790      	blx	r2
			mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   9897c:	2000      	movs	r0, #0
   9897e:	47c0      	blx	r8
					row_height * ((int16_t)i + 1) - 1);
   98980:	4633      	mov	r3, r6
   98982:	1c67      	adds	r7, r4, #1
   98984:	fb07 f303 	mul.w	r3, r7, r3
   98988:	3b01      	subs	r3, #1
			mw_gl_vline(draw_info,
   9898a:	b21a      	sxth	r2, r3
   9898c:	4613      	mov	r3, r2
   9898e:	9209      	str	r2, [sp, #36]	; 0x24
   98990:	4650      	mov	r0, sl
   98992:	9a05      	ldr	r2, [sp, #20]
   98994:	2101      	movs	r1, #1
   98996:	4e2f      	ldr	r6, [pc, #188]	; (98a54 <list_box_paint_function+0x460>)
   98998:	47b0      	blx	r6
					mw_get_control_rect(control_handle).width - 2,
   9899a:	9902      	ldr	r1, [sp, #8]
   9899c:	a81e      	add	r0, sp, #120	; 0x78
   9899e:	47d8      	blx	fp
   989a0:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
			mw_gl_hline(draw_info,
   989a4:	9b05      	ldr	r3, [sp, #20]
					mw_get_control_rect(control_handle).width - 2,
   989a6:	3a02      	subs	r2, #2
			mw_gl_hline(draw_info,
   989a8:	b212      	sxth	r2, r2
   989aa:	2101      	movs	r1, #1
   989ac:	4650      	mov	r0, sl
   989ae:	4e2a      	ldr	r6, [pc, #168]	; (98a58 <list_box_paint_function+0x464>)
   989b0:	47b0      	blx	r6
			mw_gl_set_fg_colour(MW_HAL_LCD_WHITE);
   989b2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   989b6:	47c0      	blx	r8
					mw_get_control_rect(control_handle).width - 3,
   989b8:	9902      	ldr	r1, [sp, #8]
   989ba:	a820      	add	r0, sp, #128	; 0x80
   989bc:	47d8      	blx	fp
   989be:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
			mw_gl_vline(draw_info,
   989c2:	9a05      	ldr	r2, [sp, #20]
					mw_get_control_rect(control_handle).width - 3,
   989c4:	3903      	subs	r1, #3
			mw_gl_vline(draw_info,
   989c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   989c8:	4650      	mov	r0, sl
   989ca:	b209      	sxth	r1, r1
   989cc:	4e21      	ldr	r6, [pc, #132]	; (98a54 <list_box_paint_function+0x460>)
   989ce:	47b0      	blx	r6
					mw_get_control_rect(control_handle).width - 3,
   989d0:	9902      	ldr	r1, [sp, #8]
   989d2:	a822      	add	r0, sp, #136	; 0x88
   989d4:	47d8      	blx	fp
   989d6:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
			mw_gl_hline(draw_info,
   989da:	9b09      	ldr	r3, [sp, #36]	; 0x24
					mw_get_control_rect(control_handle).width - 3,
   989dc:	3a03      	subs	r2, #3
			mw_gl_hline(draw_info,
   989de:	b212      	sxth	r2, r2
   989e0:	2101      	movs	r1, #1
   989e2:	4650      	mov	r0, sl
   989e4:	4e1c      	ldr	r6, [pc, #112]	; (98a58 <list_box_paint_function+0x464>)
   989e6:	47b0      	blx	r6
   989e8:	e6d1      	b.n	9878e <list_box_paint_function+0x19a>
						row_height * (int16_t)i + MW_UI_LIST_BOX_LABEL_Y_OFFSET + 1,
   989ea:	f109 0204 	add.w	r2, r9, #4
				mw_gl_string(draw_info,
   989ee:	4601      	mov	r1, r0
   989f0:	b212      	sxth	r2, r2
   989f2:	681b      	ldr	r3, [r3, #0]
   989f4:	4650      	mov	r0, sl
   989f6:	4c19      	ldr	r4, [pc, #100]	; (98a5c <list_box_paint_function+0x468>)
   989f8:	47a0      	blx	r4
   989fa:	e69f      	b.n	9873c <list_box_paint_function+0x148>
						row_height * (int16_t)i + MW_UI_LIST_BOX_LARGE_LABEL_Y_OFFSET + 2,
   989fc:	f109 0208 	add.w	r2, r9, #8
   98a00:	e7f5      	b.n	989ee <list_box_paint_function+0x3fa>
					mw_gl_monochrome_bitmap(draw_info,
   98a02:	2008      	movs	r0, #8
   98a04:	6869      	ldr	r1, [r5, #4]
							row_height * (int16_t)i + MW_UI_LIST_BOX_LABEL_Y_OFFSET,
   98a06:	f109 0203 	add.w	r2, r9, #3
					mw_gl_monochrome_bitmap(draw_info,
   98a0a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   98a0e:	6859      	ldr	r1, [r3, #4]
   98a10:	b212      	sxth	r2, r2
   98a12:	e88d 0003 	stmia.w	sp, {r0, r1}
   98a16:	4603      	mov	r3, r0
   98a18:	9908      	ldr	r1, [sp, #32]
   98a1a:	e75d      	b.n	988d8 <list_box_paint_function+0x2e4>
					mw_gl_monochrome_bitmap(draw_info,
   98a1c:	2010      	movs	r0, #16
   98a1e:	6869      	ldr	r1, [r5, #4]
							row_height * (int16_t)i + MW_UI_LIST_BOX_LARGE_LABEL_Y_OFFSET,
   98a20:	f109 0206 	add.w	r2, r9, #6
					mw_gl_monochrome_bitmap(draw_info,
   98a24:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   98a28:	6859      	ldr	r1, [r3, #4]
   98a2a:	b212      	sxth	r2, r2
   98a2c:	e88d 0003 	stmia.w	sp, {r0, r1}
   98a30:	4603      	mov	r3, r0
   98a32:	9907      	ldr	r1, [sp, #28]
   98a34:	e6e1      	b.n	987fa <list_box_paint_function+0x206>
   98a36:	bf00      	nop
   98a38:	000868b1 	.word	0x000868b1
   98a3c:	00084715 	.word	0x00084715
   98a40:	00cccccc 	.word	0x00cccccc
   98a44:	000846c9 	.word	0x000846c9
   98a48:	000846f1 	.word	0x000846f1
   98a4c:	000850e1 	.word	0x000850e1
   98a50:	000846d5 	.word	0x000846d5
   98a54:	00084f39 	.word	0x00084f39
   98a58:	00084dd1 	.word	0x00084dd1
   98a5c:	00085f1d 	.word	0x00085f1d

00098a60 <mw_ui_list_box_add_new>:
		int16_t y,
		int16_t width,
		mw_handle_t parent_handle,
		uint16_t flags,
		mw_ui_list_box_data_t *list_box_instance_data)
{
   98a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   98a64:	b084      	sub	sp, #16
   98a66:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   98a68:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	mw_util_rect_t r;
	uint8_t i;

	/* check for null parameters */
	if (list_box_instance_data == NULL)
   98a6c:	2e00      	cmp	r6, #0
   98a6e:	d043      	beq.n	98af8 <mw_ui_list_box_add_new+0x98>
		MW_ASSERT((bool)false, "Null pointer argument");
		return (MW_INVALID_HANDLE);
	}

	/* check for null pointers in entry text */
	for (i = 0U; i < list_box_instance_data->number_of_items; i++)
   98a70:	7875      	ldrb	r5, [r6, #1]
   98a72:	4698      	mov	r8, r3
   98a74:	b165      	cbz	r5, 98a90 <mw_ui_list_box_add_new+0x30>
	{
		if (list_box_instance_data->list_box_entries[i].label == NULL)
   98a76:	6873      	ldr	r3, [r6, #4]
   98a78:	681c      	ldr	r4, [r3, #0]
   98a7a:	b194      	cbz	r4, 98aa2 <mw_ui_list_box_add_new+0x42>
   98a7c:	3d01      	subs	r5, #1
   98a7e:	b2ed      	uxtb	r5, r5
   98a80:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   98a84:	e002      	b.n	98a8c <mw_ui_list_box_add_new+0x2c>
   98a86:	f853 4f08 	ldr.w	r4, [r3, #8]!
   98a8a:	b154      	cbz	r4, 98aa2 <mw_ui_list_box_add_new+0x42>
	for (i = 0U; i < list_box_instance_data->number_of_items; i++)
   98a8c:	429d      	cmp	r5, r3
   98a8e:	d1fa      	bne.n	98a86 <mw_ui_list_box_add_new+0x26>
			MW_ASSERT((bool)false, "Null pointer value in array");
			return (MW_INVALID_HANDLE);
		}
	}

	if ((flags & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   98a90:	f017 0308 	ands.w	r3, r7, #8
   98a94:	d00d      	beq.n	98ab2 <mw_ui_list_box_add_new+0x52>
	{
		/* check for a sensible width */
		if (width < MW_UI_LIST_BOX_LARGE_MIN_WIDTH)
   98a96:	2a17      	cmp	r2, #23
   98a98:	dc11      	bgt.n	98abe <mw_ui_list_box_add_new+0x5e>
			return (MW_INVALID_HANDLE);
   98a9a:	2000      	movs	r0, #0
			parent_handle,
			list_box_paint_function,
			list_box_message_function,
			flags,
			list_box_instance_data));
}
   98a9c:	b004      	add	sp, #16
   98a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			MW_ASSERT((bool)false, "Null pointer value in array");
   98aa2:	f44f 72ef 	mov.w	r2, #478	; 0x1de
   98aa6:	4b16      	ldr	r3, [pc, #88]	; (98b00 <mw_ui_list_box_add_new+0xa0>)
   98aa8:	4916      	ldr	r1, [pc, #88]	; (98b04 <mw_ui_list_box_add_new+0xa4>)
   98aaa:	2000      	movs	r0, #0
   98aac:	4c16      	ldr	r4, [pc, #88]	; (98b08 <mw_ui_list_box_add_new+0xa8>)
   98aae:	47a0      	blx	r4
   98ab0:	e7f3      	b.n	98a9a <mw_ui_list_box_add_new+0x3a>
		if (width < MW_UI_LIST_BOX_MIN_WIDTH)
   98ab2:	2a0b      	cmp	r2, #11
   98ab4:	dc1a      	bgt.n	98aec <mw_ui_list_box_add_new+0x8c>
			return (MW_INVALID_HANDLE);
   98ab6:	4618      	mov	r0, r3
}
   98ab8:	b004      	add	sp, #16
   98aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mw_util_set_rect(&r,
   98abe:	7833      	ldrb	r3, [r6, #0]
   98ac0:	ac02      	add	r4, sp, #8
   98ac2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   98ac6:	009d      	lsls	r5, r3, #2
		mw_util_set_rect(&r,
   98ac8:	4613      	mov	r3, r2
   98aca:	9500      	str	r5, [sp, #0]
   98acc:	460a      	mov	r2, r1
   98ace:	4d0f      	ldr	r5, [pc, #60]	; (98b0c <mw_ui_list_box_add_new+0xac>)
   98ad0:	4601      	mov	r1, r0
   98ad2:	4620      	mov	r0, r4
   98ad4:	47a8      	blx	r5
	return (mw_add_control(&r,
   98ad6:	9601      	str	r6, [sp, #4]
   98ad8:	9700      	str	r7, [sp, #0]
   98ada:	4641      	mov	r1, r8
   98adc:	4620      	mov	r0, r4
   98ade:	4b0c      	ldr	r3, [pc, #48]	; (98b10 <mw_ui_list_box_add_new+0xb0>)
   98ae0:	4a0c      	ldr	r2, [pc, #48]	; (98b14 <mw_ui_list_box_add_new+0xb4>)
   98ae2:	4c0d      	ldr	r4, [pc, #52]	; (98b18 <mw_ui_list_box_add_new+0xb8>)
   98ae4:	47a0      	blx	r4
}
   98ae6:	b004      	add	sp, #16
   98ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mw_util_set_rect(&r,
   98aec:	7833      	ldrb	r3, [r6, #0]
   98aee:	ac02      	add	r4, sp, #8
   98af0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   98af4:	005d      	lsls	r5, r3, #1
   98af6:	e7e7      	b.n	98ac8 <mw_ui_list_box_add_new+0x68>
		MW_ASSERT((bool)false, "Null pointer argument");
   98af8:	4b08      	ldr	r3, [pc, #32]	; (98b1c <mw_ui_list_box_add_new+0xbc>)
   98afa:	f240 12d5 	movw	r2, #469	; 0x1d5
   98afe:	e7d3      	b.n	98aa8 <mw_ui_list_box_add_new+0x48>
   98b00:	000ac0b4 	.word	0x000ac0b4
   98b04:	000ac09c 	.word	0x000ac09c
   98b08:	00095add 	.word	0x00095add
   98b0c:	00096e3d 	.word	0x00096e3d
   98b10:	000983b9 	.word	0x000983b9
   98b14:	000985f5 	.word	0x000985f5
   98b18:	000909c5 	.word	0x000909c5
   98b1c:	000a6618 	.word	0x000a6618

00098b20 <scroll_bar_vert_message_function>:
 * Control message handler called by the window manager.
 *
 * @param message The message to be processed
 */
static void scroll_bar_vert_message_function(const mw_message_t *message)
{
   98b20:	b5f0      	push	{r4, r5, r6, r7, lr}
	mw_ui_scroll_bar_vert_data_t *this_scroll_bar_vert = (mw_ui_scroll_bar_vert_data_t*)mw_get_control_instance_data(message->recipient_handle);
   98b22:	4b35      	ldr	r3, [pc, #212]	; (98bf8 <scroll_bar_vert_message_function+0xd8>)
{
   98b24:	b087      	sub	sp, #28
   98b26:	4604      	mov	r4, r0
	mw_ui_scroll_bar_vert_data_t *this_scroll_bar_vert = (mw_ui_scroll_bar_vert_data_t*)mw_get_control_instance_data(message->recipient_handle);
   98b28:	6840      	ldr	r0, [r0, #4]
   98b2a:	4798      	blx	r3
	int16_t touch_y;
	uint8_t new_scroll_position;
	uint32_t misra_temp;

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   98b2c:	4d33      	ldr	r5, [pc, #204]	; (98bfc <scroll_bar_vert_message_function+0xdc>)
   98b2e:	4b34      	ldr	r3, [pc, #208]	; (98c00 <scroll_bar_vert_message_function+0xe0>)
	mw_ui_scroll_bar_vert_data_t *this_scroll_bar_vert = (mw_ui_scroll_bar_vert_data_t*)mw_get_control_instance_data(message->recipient_handle);
   98b30:	4606      	mov	r6, r0
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   98b32:	22a2      	movs	r2, #162	; 0xa2
   98b34:	4933      	ldr	r1, [pc, #204]	; (98c04 <scroll_bar_vert_message_function+0xe4>)
   98b36:	2001      	movs	r0, #1
   98b38:	47a8      	blx	r5

	switch (message->message_id)
   98b3a:	7a23      	ldrb	r3, [r4, #8]
   98b3c:	3b0d      	subs	r3, #13
   98b3e:	2b23      	cmp	r3, #35	; 0x23
   98b40:	d842      	bhi.n	98bc8 <scroll_bar_vert_message_function+0xa8>
   98b42:	e8df f003 	tbb	[pc, r3]
   98b46:	4155      	.short	0x4155
   98b48:	41414141 	.word	0x41414141
   98b4c:	47411241 	.word	0x47411241
   98b50:	41414112 	.word	0x41414112
   98b54:	41414141 	.word	0x41414141
   98b58:	41414141 	.word	0x41414141
   98b5c:	41414141 	.word	0x41414141
   98b60:	41414141 	.word	0x41414141
   98b64:	41414141 	.word	0x41414141
   98b68:	4341      	.short	0x4341
		break;

	case MW_TOUCH_DOWN_MESSAGE:
	case MW_TOUCH_DRAG_MESSAGE:
		/* respond to a down or drag event by recalculating the new slider position from the touch coordinate */
		if ((mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   98b6a:	4b27      	ldr	r3, [pc, #156]	; (98c08 <scroll_bar_vert_message_function+0xe8>)
   98b6c:	6860      	ldr	r0, [r4, #4]
   98b6e:	4798      	blx	r3
   98b70:	0783      	lsls	r3, r0, #30
   98b72:	d529      	bpl.n	98bc8 <scroll_bar_vert_message_function+0xa8>
		{
			misra_temp = message->message_data & 0xffffU;
			touch_y = (int16_t)misra_temp;
   98b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]

			/* scale touch point to middle 90% of scroll bar length */
			touch_y = mw_ui_common_scale_scroll_bar_touch_point(mw_get_control_rect(message->recipient_handle).height, touch_y);
   98b78:	6861      	ldr	r1, [r4, #4]
   98b7a:	a802      	add	r0, sp, #8
   98b7c:	4f23      	ldr	r7, [pc, #140]	; (98c0c <scroll_bar_vert_message_function+0xec>)
   98b7e:	47b8      	blx	r7
   98b80:	4629      	mov	r1, r5
   98b82:	4b23      	ldr	r3, [pc, #140]	; (98c10 <scroll_bar_vert_message_function+0xf0>)
   98b84:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
   98b88:	4798      	blx	r3
   98b8a:	4605      	mov	r5, r0

			new_scroll_position = (uint8_t)((uint32_t)UINT8_MAX * (uint32_t)touch_y / (uint32_t)mw_get_control_rect(message->recipient_handle).height);
   98b8c:	6861      	ldr	r1, [r4, #4]
   98b8e:	a804      	add	r0, sp, #16
   98b90:	47b8      	blx	r7
   98b92:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   98b96:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
   98b9a:	fbb5 f5f3 	udiv	r5, r5, r3
			if (new_scroll_position != this_scroll_bar_vert->scroll_position)
   98b9e:	7833      	ldrb	r3, [r6, #0]
			new_scroll_position = (uint8_t)((uint32_t)UINT8_MAX * (uint32_t)touch_y / (uint32_t)mw_get_control_rect(message->recipient_handle).height);
   98ba0:	b2ed      	uxtb	r5, r5
			if (new_scroll_position != this_scroll_bar_vert->scroll_position)
   98ba2:	42ab      	cmp	r3, r5
   98ba4:	d010      	beq.n	98bc8 <scroll_bar_vert_message_function+0xa8>
			{
				/* only repaint if the scroll slider position has changed */
				this_scroll_bar_vert->scroll_position = new_scroll_position;
   98ba6:	7035      	strb	r5, [r6, #0]
				mw_paint_control(message->recipient_handle);
   98ba8:	6860      	ldr	r0, [r4, #4]
   98baa:	4b1a      	ldr	r3, [pc, #104]	; (98c14 <scroll_bar_vert_message_function+0xf4>)
   98bac:	4798      	blx	r3

				mw_post_message(MW_CONTROL_VERT_SCROLL_BAR_SCROLLED_MESSAGE,
   98bae:	6865      	ldr	r5, [r4, #4]
   98bb0:	4b19      	ldr	r3, [pc, #100]	; (98c18 <scroll_bar_vert_message_function+0xf8>)
   98bb2:	4628      	mov	r0, r5
   98bb4:	4798      	blx	r3
   98bb6:	2400      	movs	r4, #0
   98bb8:	7833      	ldrb	r3, [r6, #0]
   98bba:	4602      	mov	r2, r0
   98bbc:	9401      	str	r4, [sp, #4]
   98bbe:	9400      	str	r4, [sp, #0]
   98bc0:	4629      	mov	r1, r5
   98bc2:	201f      	movs	r0, #31
   98bc4:	4c15      	ldr	r4, [pc, #84]	; (98c1c <scroll_bar_vert_message_function+0xfc>)
   98bc6:	47a0      	blx	r4

	default:
		/* keep MISRA happy */
		break;
	}
}
   98bc8:	b007      	add	sp, #28
   98bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		this_scroll_bar_vert->scroll_position  = (uint8_t)message->message_data;
   98bcc:	68e3      	ldr	r3, [r4, #12]
   98bce:	7033      	strb	r3, [r6, #0]
}
   98bd0:	b007      	add	sp, #28
   98bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mw_post_message(MW_CONTROL_VERT_SCROLL_BAR_SCROLL_ENDED,
   98bd4:	6864      	ldr	r4, [r4, #4]
   98bd6:	4b10      	ldr	r3, [pc, #64]	; (98c18 <scroll_bar_vert_message_function+0xf8>)
   98bd8:	4620      	mov	r0, r4
   98bda:	4798      	blx	r3
   98bdc:	2300      	movs	r3, #0
   98bde:	4602      	mov	r2, r0
   98be0:	4621      	mov	r1, r4
   98be2:	9301      	str	r3, [sp, #4]
   98be4:	9300      	str	r3, [sp, #0]
   98be6:	2020      	movs	r0, #32
   98be8:	4c0c      	ldr	r4, [pc, #48]	; (98c1c <scroll_bar_vert_message_function+0xfc>)
   98bea:	47a0      	blx	r4
}
   98bec:	b007      	add	sp, #28
   98bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		this_scroll_bar_vert->scroll_position = 0U;
   98bf0:	2300      	movs	r3, #0
   98bf2:	7033      	strb	r3, [r6, #0]
}
   98bf4:	b007      	add	sp, #28
   98bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   98bf8:	0009176d 	.word	0x0009176d
   98bfc:	00095add 	.word	0x00095add
   98c00:	000a6618 	.word	0x000a6618
   98c04:	000ac0f0 	.word	0x000ac0f0
   98c08:	000917b9 	.word	0x000917b9
   98c0c:	000916c5 	.word	0x000916c5
   98c10:	000979dd 	.word	0x000979dd
   98c14:	00090f71 	.word	0x00090f71
   98c18:	00091721 	.word	0x00091721
   98c1c:	00091955 	.word	0x00091955

00098c20 <scroll_bar_vert_paint_function>:
{
   98c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mw_ui_scroll_bar_vert_data_t *this_scroll_bar_vert = (mw_ui_scroll_bar_vert_data_t*)mw_get_control_instance_data(control_handle);
   98c24:	4b56      	ldr	r3, [pc, #344]	; (98d80 <scroll_bar_vert_paint_function+0x160>)
{
   98c26:	b08f      	sub	sp, #60	; 0x3c
   98c28:	460f      	mov	r7, r1
   98c2a:	4604      	mov	r4, r0
	mw_ui_scroll_bar_vert_data_t *this_scroll_bar_vert = (mw_ui_scroll_bar_vert_data_t*)mw_get_control_instance_data(control_handle);
   98c2c:	4798      	blx	r3
   98c2e:	9003      	str	r0, [sp, #12]
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   98c30:	1c38      	adds	r0, r7, #0
   98c32:	bf18      	it	ne
   98c34:	2001      	movne	r0, #1
   98c36:	4953      	ldr	r1, [pc, #332]	; (98d84 <scroll_bar_vert_paint_function+0x164>)
   98c38:	4b53      	ldr	r3, [pc, #332]	; (98d88 <scroll_bar_vert_paint_function+0x168>)
   98c3a:	224a      	movs	r2, #74	; 0x4a
   98c3c:	4d53      	ldr	r5, [pc, #332]	; (98d8c <scroll_bar_vert_paint_function+0x16c>)
   98c3e:	47a8      	blx	r5
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   98c40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 98dc0 <scroll_bar_vert_paint_function+0x1a0>
   98c44:	4620      	mov	r0, r4
   98c46:	47c8      	blx	r9
   98c48:	0701      	lsls	r1, r0, #28
   98c4a:	d517      	bpl.n	98c7c <scroll_bar_vert_paint_function+0x5c>
   98c4c:	2314      	movs	r3, #20
   98c4e:	2518      	movs	r5, #24
   98c50:	9305      	str	r3, [sp, #20]
   98c52:	2316      	movs	r3, #22
   98c54:	f04f 0b15 	mov.w	fp, #21
		narrow_dimension = MW_SCROLL_BAR_LARGE_NARROW_DIMENSION;
   98c58:	462e      	mov	r6, r5
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   98c5a:	9304      	str	r3, [sp, #16]
	if (mw_get_window_client_rect(mw_get_control_parent_window_handle(control_handle)).width > narrow_dimension)
   98c5c:	4620      	mov	r0, r4
   98c5e:	f8df a164 	ldr.w	sl, [pc, #356]	; 98dc4 <scroll_bar_vert_paint_function+0x1a4>
   98c62:	47d0      	blx	sl
   98c64:	f8df 8160 	ldr.w	r8, [pc, #352]	; 98dc8 <scroll_bar_vert_paint_function+0x1a8>
   98c68:	4601      	mov	r1, r0
   98c6a:	a806      	add	r0, sp, #24
   98c6c:	47c0      	blx	r8
   98c6e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
   98c72:	42b2      	cmp	r2, r6
   98c74:	dc0b      	bgt.n	98c8e <scroll_bar_vert_paint_function+0x6e>
}
   98c76:	b00f      	add	sp, #60	; 0x3c
   98c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   98c7c:	2308      	movs	r3, #8
   98c7e:	250c      	movs	r5, #12
   98c80:	9305      	str	r3, [sp, #20]
   98c82:	230a      	movs	r3, #10
   98c84:	f04f 0b09 	mov.w	fp, #9
		narrow_dimension = MW_SCROLL_BAR_NARROW_DIMENSION;
   98c88:	462e      	mov	r6, r5
   98c8a:	9304      	str	r3, [sp, #16]
   98c8c:	e7e6      	b.n	98c5c <scroll_bar_vert_paint_function+0x3c>
		if (mw_get_window_client_rect(mw_get_control_parent_window_handle(control_handle)).height > slider_size)
   98c8e:	4620      	mov	r0, r4
   98c90:	47d0      	blx	sl
   98c92:	4601      	mov	r1, r0
   98c94:	a808      	add	r0, sp, #32
   98c96:	47c0      	blx	r8
   98c98:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
   98c9c:	42b3      	cmp	r3, r6
   98c9e:	ddea      	ble.n	98c76 <scroll_bar_vert_paint_function+0x56>
			mw_gl_set_fill(MW_GL_FILL);
   98ca0:	2001      	movs	r0, #1
   98ca2:	4b3b      	ldr	r3, [pc, #236]	; (98d90 <scroll_bar_vert_paint_function+0x170>)
   98ca4:	4798      	blx	r3
			mw_gl_set_border(MW_GL_BORDER_ON);
   98ca6:	2001      	movs	r0, #1
   98ca8:	4b3a      	ldr	r3, [pc, #232]	; (98d94 <scroll_bar_vert_paint_function+0x174>)
   98caa:	4798      	blx	r3
			mw_gl_set_line(MW_GL_SOLID_LINE);
   98cac:	f64f 70ff 	movw	r0, #65535	; 0xffff
   98cb0:	4b39      	ldr	r3, [pc, #228]	; (98d98 <scroll_bar_vert_paint_function+0x178>)
   98cb2:	4798      	blx	r3
			mw_gl_clear_pattern();
   98cb4:	4b39      	ldr	r3, [pc, #228]	; (98d9c <scroll_bar_vert_paint_function+0x17c>)
   98cb6:	4798      	blx	r3
			mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   98cb8:	4b39      	ldr	r3, [pc, #228]	; (98da0 <scroll_bar_vert_paint_function+0x180>)
   98cba:	483a      	ldr	r0, [pc, #232]	; (98da4 <scroll_bar_vert_paint_function+0x184>)
   98cbc:	4798      	blx	r3
			if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   98cbe:	4620      	mov	r0, r4
   98cc0:	47c8      	blx	r9
   98cc2:	0782      	lsls	r2, r0, #30
				mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   98cc4:	bf4c      	ite	mi
   98cc6:	2000      	movmi	r0, #0
				mw_gl_set_fg_colour(MW_CONTROL_DISABLED_COLOUR);
   98cc8:	4837      	ldrpl	r0, [pc, #220]	; (98da8 <scroll_bar_vert_paint_function+0x188>)
   98cca:	f8df 8100 	ldr.w	r8, [pc, #256]	; 98dcc <scroll_bar_vert_paint_function+0x1ac>
   98cce:	47c0      	blx	r8
					mw_get_control_rect(control_handle).height);
   98cd0:	4621      	mov	r1, r4
   98cd2:	a80a      	add	r0, sp, #40	; 0x28
   98cd4:	4b35      	ldr	r3, [pc, #212]	; (98dac <scroll_bar_vert_paint_function+0x18c>)
   98cd6:	4798      	blx	r3
			mw_gl_rectangle(draw_info,
   98cd8:	2200      	movs	r2, #0
   98cda:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
   98cde:	4633      	mov	r3, r6
   98ce0:	4611      	mov	r1, r2
   98ce2:	9000      	str	r0, [sp, #0]
   98ce4:	4e32      	ldr	r6, [pc, #200]	; (98db0 <scroll_bar_vert_paint_function+0x190>)
   98ce6:	4638      	mov	r0, r7
   98ce8:	47b0      	blx	r6
			if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   98cea:	4620      	mov	r0, r4
   98cec:	47c8      	blx	r9
   98cee:	0783      	lsls	r3, r0, #30
   98cf0:	d5c1      	bpl.n	98c76 <scroll_bar_vert_paint_function+0x56>
				scroll_bar_vert_slider_top = (mw_get_control_rect(control_handle).height - slider_size) *
   98cf2:	4621      	mov	r1, r4
   98cf4:	a80c      	add	r0, sp, #48	; 0x30
   98cf6:	4b2d      	ldr	r3, [pc, #180]	; (98dac <scroll_bar_vert_paint_function+0x18c>)
   98cf8:	4798      	blx	r3
						(int16_t)this_scroll_bar_vert->scroll_position / UINT8_MAX;
   98cfa:	9b03      	ldr	r3, [sp, #12]
				scroll_bar_vert_slider_top = (mw_get_control_rect(control_handle).height - slider_size) *
   98cfc:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
						(int16_t)this_scroll_bar_vert->scroll_position / UINT8_MAX;
   98d00:	781b      	ldrb	r3, [r3, #0]
				scroll_bar_vert_slider_top = (mw_get_control_rect(control_handle).height - slider_size) *
   98d02:	1b52      	subs	r2, r2, r5
   98d04:	fb03 f202 	mul.w	r2, r3, r2
						(int16_t)this_scroll_bar_vert->scroll_position / UINT8_MAX;
   98d08:	4b2a      	ldr	r3, [pc, #168]	; (98db4 <scroll_bar_vert_paint_function+0x194>)
   98d0a:	17d4      	asrs	r4, r2, #31
   98d0c:	fb83 1302 	smull	r1, r3, r3, r2
   98d10:	4413      	add	r3, r2
   98d12:	ebc4 14e3 	rsb	r4, r4, r3, asr #7
				mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   98d16:	4828      	ldr	r0, [pc, #160]	; (98db8 <scroll_bar_vert_paint_function+0x198>)
   98d18:	4b21      	ldr	r3, [pc, #132]	; (98da0 <scroll_bar_vert_paint_function+0x180>)
   98d1a:	4798      	blx	r3
				mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   98d1c:	2000      	movs	r0, #0
   98d1e:	47c0      	blx	r8
						scroll_bar_vert_slider_top + 1,
   98d20:	b2a4      	uxth	r4, r4
				mw_gl_rectangle(draw_info,
   98d22:	9b04      	ldr	r3, [sp, #16]
						scroll_bar_vert_slider_top + 1,
   98d24:	1c62      	adds	r2, r4, #1
						scroll_bar_vert_slider_top + slider_size - 3);
   98d26:	4425      	add	r5, r4
				mw_gl_rectangle(draw_info,
   98d28:	9300      	str	r3, [sp, #0]
   98d2a:	b212      	sxth	r2, r2
   98d2c:	2101      	movs	r1, #1
   98d2e:	4638      	mov	r0, r7
						scroll_bar_vert_slider_top + slider_size - 3);
   98d30:	b2ad      	uxth	r5, r5
				mw_gl_rectangle(draw_info,
   98d32:	47b0      	blx	r6
						scroll_bar_vert_slider_top + 2,
   98d34:	3402      	adds	r4, #2
						scroll_bar_vert_slider_top + slider_size - 3);
   98d36:	1eee      	subs	r6, r5, #3
				mw_gl_vline(draw_info,
   98d38:	b224      	sxth	r4, r4
   98d3a:	b236      	sxth	r6, r6
				mw_gl_set_fg_colour(MW_HAL_LCD_WHITE);
   98d3c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   98d40:	47c0      	blx	r8
				mw_gl_vline(draw_info,
   98d42:	f8df 908c 	ldr.w	r9, [pc, #140]	; 98dd0 <scroll_bar_vert_paint_function+0x1b0>
   98d46:	4633      	mov	r3, r6
   98d48:	4622      	mov	r2, r4
   98d4a:	4638      	mov	r0, r7
   98d4c:	2102      	movs	r1, #2
   98d4e:	47c8      	blx	r9
				mw_gl_hline(draw_info,
   98d50:	f8df a080 	ldr.w	sl, [pc, #128]	; 98dd4 <scroll_bar_vert_paint_function+0x1b4>
   98d54:	4623      	mov	r3, r4
   98d56:	9a05      	ldr	r2, [sp, #20]
   98d58:	2102      	movs	r1, #2
   98d5a:	4638      	mov	r0, r7
   98d5c:	47d0      	blx	sl
				mw_gl_set_fg_colour(MW_HAL_LCD_GREY7);
   98d5e:	4817      	ldr	r0, [pc, #92]	; (98dbc <scroll_bar_vert_paint_function+0x19c>)
   98d60:	47c0      	blx	r8
						scroll_bar_vert_slider_top + slider_size - 4);
   98d62:	1f2b      	subs	r3, r5, #4
				mw_gl_vline(draw_info,
   98d64:	4622      	mov	r2, r4
   98d66:	4659      	mov	r1, fp
   98d68:	4638      	mov	r0, r7
   98d6a:	b21b      	sxth	r3, r3
   98d6c:	47c8      	blx	r9
				mw_gl_hline(draw_info,
   98d6e:	4633      	mov	r3, r6
   98d70:	465a      	mov	r2, fp
   98d72:	4638      	mov	r0, r7
   98d74:	2103      	movs	r1, #3
   98d76:	46d4      	mov	ip, sl
}
   98d78:	b00f      	add	sp, #60	; 0x3c
   98d7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				mw_gl_hline(draw_info,
   98d7e:	4760      	bx	ip
   98d80:	0009176d 	.word	0x0009176d
   98d84:	000ac0d0 	.word	0x000ac0d0
   98d88:	000a6618 	.word	0x000a6618
   98d8c:	00095add 	.word	0x00095add
   98d90:	000846fd 	.word	0x000846fd
   98d94:	000846f1 	.word	0x000846f1
   98d98:	000846d5 	.word	0x000846d5
   98d9c:	000846e1 	.word	0x000846e1
   98da0:	000846c9 	.word	0x000846c9
   98da4:	00e6e6e6 	.word	0x00e6e6e6
   98da8:	00bfbfbf 	.word	0x00bfbfbf
   98dac:	000916c5 	.word	0x000916c5
   98db0:	000850e1 	.word	0x000850e1
   98db4:	80808081 	.word	0x80808081
   98db8:	00cccccc 	.word	0x00cccccc
   98dbc:	00a6a6a6 	.word	0x00a6a6a6
   98dc0:	000917b9 	.word	0x000917b9
   98dc4:	00091721 	.word	0x00091721
   98dc8:	00090735 	.word	0x00090735
   98dcc:	000846b1 	.word	0x000846b1
   98dd0:	00084f39 	.word	0x00084f39
   98dd4:	00084dd1 	.word	0x00084dd1

00098dd8 <mw_ui_scroll_bar_vert_add_new>:
		int16_t y,
		int16_t height,
		mw_handle_t parent_handle,
		uint16_t flags,
		mw_ui_scroll_bar_vert_data_t *scroll_bar_vert_instance_data)
{
   98dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   98dda:	461e      	mov	r6, r3
   98ddc:	b085      	sub	sp, #20
   98dde:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	mw_util_rect_t r;

	if ((flags & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
	{
		mw_util_set_rect(&r, x, y, MW_SCROLL_BAR_LARGE_NARROW_DIMENSION, height);
   98de2:	ac02      	add	r4, sp, #8
	if ((flags & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   98de4:	072b      	lsls	r3, r5, #28
		mw_util_set_rect(&r, x, y, MW_SCROLL_BAR_LARGE_NARROW_DIMENSION, height);
   98de6:	bf4c      	ite	mi
   98de8:	2318      	movmi	r3, #24
	}
	else
	{
		mw_util_set_rect(&r, x, y, MW_SCROLL_BAR_NARROW_DIMENSION, height);
   98dea:	230c      	movpl	r3, #12
		mw_util_set_rect(&r, x, y, MW_SCROLL_BAR_LARGE_NARROW_DIMENSION, height);
   98dec:	9200      	str	r2, [sp, #0]
		mw_util_set_rect(&r, x, y, MW_SCROLL_BAR_NARROW_DIMENSION, height);
   98dee:	4f08      	ldr	r7, [pc, #32]	; (98e10 <mw_ui_scroll_bar_vert_add_new+0x38>)
		mw_util_set_rect(&r, x, y, MW_SCROLL_BAR_LARGE_NARROW_DIMENSION, height);
   98df0:	460a      	mov	r2, r1
   98df2:	4601      	mov	r1, r0
   98df4:	4620      	mov	r0, r4
		mw_util_set_rect(&r, x, y, MW_SCROLL_BAR_NARROW_DIMENSION, height);
   98df6:	47b8      	blx	r7
	}

	return (mw_add_control(&r,
   98df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   98dfa:	9500      	str	r5, [sp, #0]
   98dfc:	9301      	str	r3, [sp, #4]
   98dfe:	4631      	mov	r1, r6
   98e00:	4620      	mov	r0, r4
   98e02:	4b04      	ldr	r3, [pc, #16]	; (98e14 <mw_ui_scroll_bar_vert_add_new+0x3c>)
   98e04:	4a04      	ldr	r2, [pc, #16]	; (98e18 <mw_ui_scroll_bar_vert_add_new+0x40>)
   98e06:	4c05      	ldr	r4, [pc, #20]	; (98e1c <mw_ui_scroll_bar_vert_add_new+0x44>)
   98e08:	47a0      	blx	r4
			parent_handle,
			scroll_bar_vert_paint_function,
			scroll_bar_vert_message_function,
			flags,
			scroll_bar_vert_instance_data));
}
   98e0a:	b005      	add	sp, #20
   98e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   98e0e:	bf00      	nop
   98e10:	00096e3d 	.word	0x00096e3d
   98e14:	00098b21 	.word	0x00098b21
   98e18:	00098c21 	.word	0x00098c21
   98e1c:	000909c5 	.word	0x000909c5

00098e20 <tree_message_function>:
 * Control message handler called by the window manager.
 *
 * @param message The message to be processed
 */
static void tree_message_function(const mw_message_t *message)
{
   98e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	mw_ui_tree_data_t *this_tree = (mw_ui_tree_data_t*)mw_get_control_instance_data(message->recipient_handle);
   98e24:	4ba4      	ldr	r3, [pc, #656]	; (990b8 <tree_message_function+0x298>)
{
   98e26:	b085      	sub	sp, #20
   98e28:	4605      	mov	r5, r0
	mw_ui_tree_data_t *this_tree = (mw_ui_tree_data_t*)mw_get_control_instance_data(message->recipient_handle);
   98e2a:	6840      	ldr	r0, [r0, #4]
   98e2c:	4798      	blx	r3
	uint32_t message_data;

	MW_ASSERT(message != (void*)0, "Null pointer argument");
   98e2e:	4ea3      	ldr	r6, [pc, #652]	; (990bc <tree_message_function+0x29c>)
   98e30:	4ba3      	ldr	r3, [pc, #652]	; (990c0 <tree_message_function+0x2a0>)
	mw_ui_tree_data_t *this_tree = (mw_ui_tree_data_t*)mw_get_control_instance_data(message->recipient_handle);
   98e32:	4604      	mov	r4, r0
	MW_ASSERT(message != (void*)0, "Null pointer argument");
   98e34:	f44f 7294 	mov.w	r2, #296	; 0x128
   98e38:	49a2      	ldr	r1, [pc, #648]	; (990c4 <tree_message_function+0x2a4>)
   98e3a:	2001      	movs	r0, #1
   98e3c:	47b0      	blx	r6

	switch (message->message_id)
   98e3e:	7a2b      	ldrb	r3, [r5, #8]
   98e40:	3b0d      	subs	r3, #13
   98e42:	2b2d      	cmp	r3, #45	; 0x2d
   98e44:	d84f      	bhi.n	98ee6 <tree_message_function+0xc6>
   98e46:	e8df f013 	tbh	[pc, r3, lsl #1]
   98e4a:	008a      	.short	0x008a
   98e4c:	004e004e 	.word	0x004e004e
   98e50:	004e004e 	.word	0x004e004e
   98e54:	004e004e 	.word	0x004e004e
   98e58:	004e00be 	.word	0x004e00be
   98e5c:	004e004e 	.word	0x004e004e
   98e60:	011f004e 	.word	0x011f004e
   98e64:	004e004e 	.word	0x004e004e
   98e68:	004e004e 	.word	0x004e004e
   98e6c:	004e004e 	.word	0x004e004e
   98e70:	004e004e 	.word	0x004e004e
   98e74:	004e004e 	.word	0x004e004e
   98e78:	004e004e 	.word	0x004e004e
   98e7c:	004e004e 	.word	0x004e004e
   98e80:	004e004e 	.word	0x004e004e
   98e84:	004e004e 	.word	0x004e004e
   98e88:	004e004e 	.word	0x004e004e
   98e8c:	004e004e 	.word	0x004e004e
   98e90:	004e004e 	.word	0x004e004e
   98e94:	004e004e 	.word	0x004e004e
   98e98:	004e004e 	.word	0x004e004e
   98e9c:	004e004e 	.word	0x004e004e
   98ea0:	002e0111 	.word	0x002e0111
   98ea4:	0051      	.short	0x0051
	case MW_TREE_SCROLL_BAR_POSITION_MESSAGE:
		{
			uint32_t intermediate_uint32;

			/* check if scrolling is appropriate */
			if (this_tree->visible_children <= this_tree->number_of_lines)
   98ea6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   98ea8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   98eac:	428a      	cmp	r2, r1
   98eae:	f240 80f5 	bls.w	9909c <tree_message_function+0x27c>
				intermediate_uint32 = 0U;
			}
			else
			{
				/* yes so recalculate vertical scroll lines from last scroll bar position recorded */
				  intermediate_uint32 = (message->message_data *
   98eb2:	68eb      	ldr	r3, [r5, #12]
						((uint32_t)this_tree->visible_children - (uint32_t)this_tree->number_of_lines)) /
   98eb4:	1a52      	subs	r2, r2, r1
				  intermediate_uint32 = (message->message_data *
   98eb6:	fb03 f302 	mul.w	r3, r3, r2
   98eba:	4a83      	ldr	r2, [pc, #524]	; (990c8 <tree_message_function+0x2a8>)
   98ebc:	fba2 2303 	umull	r2, r3, r2, r3
   98ec0:	f3c3 13c7 	ubfx	r3, r3, #7, #8
						(uint32_t)UINT8_MAX;
			}

			if (this_tree->lines_to_scroll != (uint8_t)intermediate_uint32)
   98ec4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   98ec6:	b29b      	uxth	r3, r3
   98ec8:	429a      	cmp	r2, r3
   98eca:	d00c      	beq.n	98ee6 <tree_message_function+0xc6>
			{
				this_tree->lines_to_scroll = (uint8_t)intermediate_uint32;
   98ecc:	85e3      	strh	r3, [r4, #46]	; 0x2e
				mw_post_message(MW_SCROLLED_CONTROL_NEEDS_PAINTING_HINT_MESSAGE,
   98ece:	686c      	ldr	r4, [r5, #4]
   98ed0:	4b7e      	ldr	r3, [pc, #504]	; (990cc <tree_message_function+0x2ac>)
   98ed2:	4620      	mov	r0, r4
   98ed4:	4798      	blx	r3
   98ed6:	2300      	movs	r3, #0
   98ed8:	4602      	mov	r2, r0
   98eda:	4621      	mov	r1, r4
   98edc:	9301      	str	r3, [sp, #4]
   98ede:	9300      	str	r3, [sp, #0]
   98ee0:	202c      	movs	r0, #44	; 0x2c
   98ee2:	4c7b      	ldr	r4, [pc, #492]	; (990d0 <tree_message_function+0x2b0>)
   98ee4:	47a0      	blx	r4

	default:
		/* keep MISRA happy */
		break;
	}
}
   98ee6:	b005      	add	sp, #20
   98ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			this_tree->visible_children = mw_tree_container_get_open_children_count(&this_tree->tree_container,
   98eec:	2200      	movs	r2, #0
   98eee:	6a21      	ldr	r1, [r4, #32]
   98ef0:	4620      	mov	r0, r4
   98ef2:	4b78      	ldr	r3, [pc, #480]	; (990d4 <tree_message_function+0x2b4>)
   98ef4:	4798      	blx	r3
			if (this_tree->visible_children > this_tree->number_of_lines)
   98ef6:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
			this_tree->visible_children++;
   98efa:	3001      	adds	r0, #1
   98efc:	b280      	uxth	r0, r0
			if (this_tree->visible_children > this_tree->number_of_lines)
   98efe:	42b0      	cmp	r0, r6
			this_tree->visible_children++;
   98f00:	8620      	strh	r0, [r4, #48]	; 0x30
			if (this_tree->visible_children > this_tree->number_of_lines)
   98f02:	f240 80fb 	bls.w	990fc <tree_message_function+0x2dc>
				if (this_tree->lines_to_scroll > max_scroll_lines)
   98f06:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
				max_scroll_lines = this_tree->visible_children - this_tree->number_of_lines;
   98f08:	1b80      	subs	r0, r0, r6
   98f0a:	b286      	uxth	r6, r0
				if (this_tree->lines_to_scroll > max_scroll_lines)
   98f0c:	42b3      	cmp	r3, r6
					this_tree->lines_to_scroll = max_scroll_lines;
   98f0e:	bf88      	it	hi
   98f10:	85e6      	strhhi	r6, [r4, #46]	; 0x2e
				mw_post_message(MW_SCROLL_BAR_SET_SCROLL_MESSAGE,
   98f12:	f8d5 9004 	ldr.w	r9, [r5, #4]
   98f16:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 990cc <tree_message_function+0x2ac>
   98f1a:	4648      	mov	r0, r9
   98f1c:	47c0      	blx	r8
   98f1e:	f04f 0e00 	mov.w	lr, #0
						((uint32_t)this_tree->lines_to_scroll * (uint32_t)UINT8_MAX) / (uint32_t)max_scroll_lines,
   98f22:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
				message_data |= (uint32_t)max_scroll_lines;
   98f24:	f446 3780 	orr.w	r7, r6, #65536	; 0x10000
						((uint32_t)this_tree->lines_to_scroll * (uint32_t)UINT8_MAX) / (uint32_t)max_scroll_lines,
   98f28:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
				mw_post_message(MW_SCROLL_BAR_SET_SCROLL_MESSAGE,
   98f2c:	4602      	mov	r2, r0
   98f2e:	fbb3 f3f6 	udiv	r3, r3, r6
   98f32:	4649      	mov	r1, r9
   98f34:	f8cd e004 	str.w	lr, [sp, #4]
   98f38:	f8cd e000 	str.w	lr, [sp]
   98f3c:	2030      	movs	r0, #48	; 0x30
   98f3e:	4e64      	ldr	r6, [pc, #400]	; (990d0 <tree_message_function+0x2b0>)
   98f40:	47b0      	blx	r6
			mw_post_message(MW_TREE_SCROLLING_REQUIRED_MESSAGE,
   98f42:	686d      	ldr	r5, [r5, #4]
   98f44:	2400      	movs	r4, #0
   98f46:	4628      	mov	r0, r5
   98f48:	47c0      	blx	r8
   98f4a:	4629      	mov	r1, r5
   98f4c:	4602      	mov	r2, r0
   98f4e:	463b      	mov	r3, r7
   98f50:	9401      	str	r4, [sp, #4]
   98f52:	9400      	str	r4, [sp, #0]
   98f54:	2029      	movs	r0, #41	; 0x29
   98f56:	47b0      	blx	r6
}
   98f58:	b005      	add	sp, #20
   98f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   98f5e:	6868      	ldr	r0, [r5, #4]
   98f60:	4b5d      	ldr	r3, [pc, #372]	; (990d8 <tree_message_function+0x2b8>)
   98f62:	4798      	blx	r3
   98f64:	0700      	lsls	r0, r0, #28
   98f66:	f140 809b 	bpl.w	990a0 <tree_message_function+0x280>
			this_tree->icon_size = MW_UI_TREE_LARGE_ICON_SIZE;
   98f6a:	2110      	movs	r1, #16
			this_tree->row_height = MW_UI_TREE_LARGE_ROW_HEIGHT;
   98f6c:	2316      	movs	r3, #22
			this_tree->row_left_border = MW_UI_TREE_LARGE_LEFT_BORDER;
   98f6e:	4a5b      	ldr	r2, [pc, #364]	; (990dc <tree_message_function+0x2bc>)
			this_tree->icon_size = MW_UI_TREE_LARGE_ICON_SIZE;
   98f70:	86a1      	strh	r1, [r4, #52]	; 0x34
			this_tree->row_height = MW_UI_TREE_LARGE_ROW_HEIGHT;
   98f72:	8663      	strh	r3, [r4, #50]	; 0x32
			this_tree->row_left_border = MW_UI_TREE_LARGE_LEFT_BORDER;
   98f74:	f8c4 2036 	str.w	r2, [r4, #54]	; 0x36
		this_tree->invalid_rect.x = 1;
   98f78:	2201      	movs	r2, #1
		this_tree->visible_children = mw_tree_container_get_open_children_count(&this_tree->tree_container,
   98f7a:	6a21      	ldr	r1, [r4, #32]
		this_tree->invalid_rect.height = this_tree->row_height;
   98f7c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		this_tree->invalid_rect.x = 1;
   98f80:	8762      	strh	r2, [r4, #58]	; 0x3a
		this_tree->visible_children = mw_tree_container_get_open_children_count(&this_tree->tree_container,
   98f82:	4620      	mov	r0, r4
   98f84:	2200      	movs	r2, #0
   98f86:	4b53      	ldr	r3, [pc, #332]	; (990d4 <tree_message_function+0x2b4>)
   98f88:	4798      	blx	r3
		this_tree->lines_to_scroll = 0U;
   98f8a:	2300      	movs	r3, #0
		this_tree->visible_children++;
   98f8c:	3001      	adds	r0, #1
		if (this_tree->visible_children > this_tree->number_of_lines)
   98f8e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
		this_tree->visible_children++;
   98f92:	b280      	uxth	r0, r0
   98f94:	8620      	strh	r0, [r4, #48]	; 0x30
		this_tree->lines_to_scroll = 0U;
   98f96:	85e3      	strh	r3, [r4, #46]	; 0x2e
		this_tree->node_to_animate = MW_INVALID_HANDLE;
   98f98:	6463      	str	r3, [r4, #68]	; 0x44
		if (this_tree->visible_children > this_tree->number_of_lines)
   98f9a:	4290      	cmp	r0, r2
		mw_post_message(MW_TREE_SCROLLING_REQUIRED_MESSAGE,
   98f9c:	686e      	ldr	r6, [r5, #4]
			message_data |= ((uint32_t)this_tree->visible_children - (uint32_t)this_tree->number_of_lines);
   98f9e:	bf86      	itte	hi
   98fa0:	1a80      	subhi	r0, r0, r2
   98fa2:	f440 3480 	orrhi.w	r4, r0, #65536	; 0x10000
		message_data = 0U;
   98fa6:	461c      	movls	r4, r3
		mw_post_message(MW_TREE_SCROLLING_REQUIRED_MESSAGE,
   98fa8:	4630      	mov	r0, r6
   98faa:	4b48      	ldr	r3, [pc, #288]	; (990cc <tree_message_function+0x2ac>)
   98fac:	4798      	blx	r3
   98fae:	2500      	movs	r5, #0
   98fb0:	4602      	mov	r2, r0
   98fb2:	4623      	mov	r3, r4
   98fb4:	4631      	mov	r1, r6
   98fb6:	9501      	str	r5, [sp, #4]
   98fb8:	9500      	str	r5, [sp, #0]
   98fba:	2029      	movs	r0, #41	; 0x29
   98fbc:	4c44      	ldr	r4, [pc, #272]	; (990d0 <tree_message_function+0x2b0>)
   98fbe:	47a0      	blx	r4
}
   98fc0:	b005      	add	sp, #20
   98fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if ((mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   98fc6:	6868      	ldr	r0, [r5, #4]
   98fc8:	4b43      	ldr	r3, [pc, #268]	; (990d8 <tree_message_function+0x2b8>)
			intermediate_uint32 = message->message_data >> 16;
   98fca:	f8d5 800c 	ldr.w	r8, [r5, #12]
			line_number = touch_y / this_tree->row_height + (int16_t)this_tree->lines_to_scroll;
   98fce:	f9b4 7032 	ldrsh.w	r7, [r4, #50]	; 0x32
   98fd2:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
			if ((mw_get_control_flags(message->recipient_handle) & MW_CONTROL_FLAG_IS_ENABLED) == MW_CONTROL_FLAG_IS_ENABLED)
   98fd4:	4798      	blx	r3
   98fd6:	0781      	lsls	r1, r0, #30
   98fd8:	d585      	bpl.n	98ee6 <tree_message_function+0xc6>
			line_number = touch_y / this_tree->row_height + (int16_t)this_tree->lines_to_scroll;
   98fda:	fa0f f988 	sxth.w	r9, r8
   98fde:	fb99 f3f7 	sdiv	r3, r9, r7
   98fe2:	4433      	add	r3, r6
				selected_node_handle = mw_tree_container_get_handle_from_position(&this_tree->tree_container,
   98fe4:	b29b      	uxth	r3, r3
   98fe6:	2200      	movs	r2, #0
   98fe8:	6a21      	ldr	r1, [r4, #32]
   98fea:	4620      	mov	r0, r4
   98fec:	4e3c      	ldr	r6, [pc, #240]	; (990e0 <tree_message_function+0x2c0>)
   98fee:	47b0      	blx	r6
				if (selected_node_handle != MW_INVALID_HANDLE)
   98ff0:	4607      	mov	r7, r0
   98ff2:	2800      	cmp	r0, #0
   98ff4:	f43f af77 	beq.w	98ee6 <tree_message_function+0xc6>
					node_flags = mw_tree_container_get_node_flags(&this_tree->tree_container, selected_node_handle);
   98ff8:	4601      	mov	r1, r0
   98ffa:	4b3a      	ldr	r3, [pc, #232]	; (990e4 <tree_message_function+0x2c4>)
   98ffc:	4620      	mov	r0, r4
   98ffe:	4798      	blx	r3
   99000:	4606      	mov	r6, r0
					node_level = mw_tree_container_get_node_level(&this_tree->tree_container, selected_node_handle);
   99002:	4639      	mov	r1, r7
   99004:	4620      	mov	r0, r4
   99006:	4b38      	ldr	r3, [pc, #224]	; (990e8 <tree_message_function+0x2c8>)
   99008:	4798      	blx	r3
					if ((node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER &&
   9900a:	07b2      	lsls	r2, r6, #30
   9900c:	f140 808b 	bpl.w	99126 <tree_message_function+0x306>
							touch_x < ((int16_t)(node_level) + 1) * ((int16_t)this_tree->icon_size + 2))
   99010:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
   99014:	b200      	sxth	r0, r0
   99016:	3302      	adds	r3, #2
   99018:	fb00 3303 	mla	r3, r0, r3, r3
					if ((node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER &&
   9901c:	ebb3 4f28 	cmp.w	r3, r8, asr #16
   99020:	f340 8081 	ble.w	99126 <tree_message_function+0x306>
						if ((node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   99024:	f016 0804 	ands.w	r8, r6, #4
							mw_tree_container_change_folder_node_open_state(&this_tree->tree_container, selected_node_handle, false);
   99028:	4620      	mov	r0, r4
						if ((node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   9902a:	f000 80cc 	beq.w	991c6 <tree_message_function+0x3a6>
							mw_tree_container_change_folder_node_open_state(&this_tree->tree_container, selected_node_handle, false);
   9902e:	2200      	movs	r2, #0
   99030:	4639      	mov	r1, r7
   99032:	4b2e      	ldr	r3, [pc, #184]	; (990ec <tree_message_function+0x2cc>)
   99034:	4798      	blx	r3
							mw_post_message(MW_TREE_FOLDER_CLOSED_MESSAGE,
   99036:	686e      	ldr	r6, [r5, #4]
   99038:	4b24      	ldr	r3, [pc, #144]	; (990cc <tree_message_function+0x2ac>)
   9903a:	4630      	mov	r0, r6
   9903c:	4798      	blx	r3
   9903e:	2400      	movs	r4, #0
   99040:	4602      	mov	r2, r0
   99042:	4631      	mov	r1, r6
   99044:	463b      	mov	r3, r7
   99046:	9401      	str	r4, [sp, #4]
   99048:	9400      	str	r4, [sp, #0]
   9904a:	202b      	movs	r0, #43	; 0x2b
   9904c:	4e20      	ldr	r6, [pc, #128]	; (990d0 <tree_message_function+0x2b0>)
   9904e:	47b0      	blx	r6
						mw_post_message(MW_TREE_TREE_CONTAINER_DATA_CHANGED,
   99050:	2101      	movs	r1, #1
   99052:	2300      	movs	r3, #0
   99054:	686a      	ldr	r2, [r5, #4]
   99056:	203a      	movs	r0, #58	; 0x3a
   99058:	9101      	str	r1, [sp, #4]
   9905a:	9300      	str	r3, [sp, #0]
   9905c:	4611      	mov	r1, r2
   9905e:	47b0      	blx	r6
							mw_paint_control(message->recipient_handle);
   99060:	6868      	ldr	r0, [r5, #4]
   99062:	4b23      	ldr	r3, [pc, #140]	; (990f0 <tree_message_function+0x2d0>)
}
   99064:	b005      	add	sp, #20
   99066:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
							mw_paint_control(message->recipient_handle);
   9906a:	4718      	bx	r3
		if (this_tree->visible_children <= this_tree->number_of_lines)
   9906c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   99070:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   99072:	b299      	uxth	r1, r3
   99074:	428a      	cmp	r2, r1
   99076:	d91c      	bls.n	990b2 <tree_message_function+0x292>
			if (this_tree->lines_to_scroll > (this_tree->visible_children - this_tree->number_of_lines))
   99078:	7b28      	ldrb	r0, [r5, #12]
   9907a:	1ad3      	subs	r3, r2, r3
   9907c:	4298      	cmp	r0, r3
				this_tree->lines_to_scroll = this_tree->visible_children - (uint16_t)this_tree->number_of_lines;
   9907e:	bfca      	itet	gt
   99080:	1a52      	subgt	r2, r2, r1
			this_tree->lines_to_scroll = (uint8_t)message->message_data;
   99082:	85e0      	strhle	r0, [r4, #46]	; 0x2e
				this_tree->lines_to_scroll = this_tree->visible_children - (uint16_t)this_tree->number_of_lines;
   99084:	85e2      	strhgt	r2, [r4, #46]	; 0x2e
   99086:	e72e      	b.n	98ee6 <tree_message_function+0xc6>
		this_tree->node_to_animate = MW_INVALID_HANDLE;
   99088:	2300      	movs	r3, #0
   9908a:	6463      	str	r3, [r4, #68]	; 0x44
		mw_paint_control_rect(message->recipient_handle, &this_tree->invalid_rect);
   9908c:	6868      	ldr	r0, [r5, #4]
   9908e:	f104 013a 	add.w	r1, r4, #58	; 0x3a
							mw_paint_control_rect(message->recipient_handle, &this_tree->invalid_rect);
   99092:	4b18      	ldr	r3, [pc, #96]	; (990f4 <tree_message_function+0x2d4>)
}
   99094:	b005      	add	sp, #20
   99096:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
							mw_paint_control_rect(message->recipient_handle, &this_tree->invalid_rect);
   9909a:	4718      	bx	r3
   9909c:	2300      	movs	r3, #0
   9909e:	e711      	b.n	98ec4 <tree_message_function+0xa4>
			this_tree->row_height = MW_UI_TREE_ROW_HEIGHT;
   990a0:	220e      	movs	r2, #14
			this_tree->icon_size = MW_UI_TREE_ICON_SIZE;
   990a2:	2008      	movs	r0, #8
			this_tree->row_left_border = MW_UI_TREE_LEFT_BORDER;
   990a4:	4914      	ldr	r1, [pc, #80]	; (990f8 <tree_message_function+0x2d8>)
   990a6:	4613      	mov	r3, r2
			this_tree->row_height = MW_UI_TREE_ROW_HEIGHT;
   990a8:	8662      	strh	r2, [r4, #50]	; 0x32
			this_tree->icon_size = MW_UI_TREE_ICON_SIZE;
   990aa:	86a0      	strh	r0, [r4, #52]	; 0x34
			this_tree->row_left_border = MW_UI_TREE_LEFT_BORDER;
   990ac:	f8c4 1036 	str.w	r1, [r4, #54]	; 0x36
   990b0:	e762      	b.n	98f78 <tree_message_function+0x158>
			this_tree->lines_to_scroll = 0U;
   990b2:	2300      	movs	r3, #0
   990b4:	85e3      	strh	r3, [r4, #46]	; 0x2e
   990b6:	e716      	b.n	98ee6 <tree_message_function+0xc6>
   990b8:	0009176d 	.word	0x0009176d
   990bc:	00095add 	.word	0x00095add
   990c0:	000a6618 	.word	0x000a6618
   990c4:	000ac128 	.word	0x000ac128
   990c8:	80808081 	.word	0x80808081
   990cc:	00091721 	.word	0x00091721
   990d0:	00091955 	.word	0x00091955
   990d4:	000964f5 	.word	0x000964f5
   990d8:	000917b9 	.word	0x000917b9
   990dc:	00040002 	.word	0x00040002
   990e0:	00096925 	.word	0x00096925
   990e4:	00096a91 	.word	0x00096a91
   990e8:	00096b15 	.word	0x00096b15
   990ec:	00096751 	.word	0x00096751
   990f0:	00090f71 	.word	0x00090f71
   990f4:	00090fd9 	.word	0x00090fd9
   990f8:	00030001 	.word	0x00030001
				mw_post_message(MW_SCROLL_BAR_SET_SCROLL_MESSAGE,
   990fc:	686e      	ldr	r6, [r5, #4]
   990fe:	f8df 8118 	ldr.w	r8, [pc, #280]	; 99218 <tree_message_function+0x3f8>
   99102:	4630      	mov	r0, r6
   99104:	47c0      	blx	r8
   99106:	f04f 0900 	mov.w	r9, #0
   9910a:	4602      	mov	r2, r0
   9910c:	4631      	mov	r1, r6
   9910e:	f8cd 9004 	str.w	r9, [sp, #4]
   99112:	f8cd 9000 	str.w	r9, [sp]
   99116:	464b      	mov	r3, r9
   99118:	2030      	movs	r0, #48	; 0x30
   9911a:	4e3c      	ldr	r6, [pc, #240]	; (9920c <tree_message_function+0x3ec>)
   9911c:	47b0      	blx	r6
			message_data = 0U;
   9911e:	464f      	mov	r7, r9
				this_tree->lines_to_scroll = 0U;
   99120:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
   99124:	e70d      	b.n	98f42 <tree_message_function+0x122>
						if ((this_tree->tree_container.tree_flags & MW_TREE_CONTAINER_NO_SELECT) == MW_TREE_CONTAINER_NO_SELECT)
   99126:	7b23      	ldrb	r3, [r4, #12]
   99128:	f013 0801 	ands.w	r8, r3, #1
   9912c:	d134      	bne.n	99198 <tree_message_function+0x378>
							if ((node_flags & MW_TREE_CONTAINER_NODE_IS_SELECTED) == MW_TREE_CONTAINER_NODE_IS_SELECTED)
   9912e:	f016 0601 	ands.w	r6, r6, #1
   99132:	d01c      	beq.n	9916e <tree_message_function+0x34e>
								if (mw_tree_container_change_node_selected_state(&this_tree->tree_container, selected_node_handle, false))
   99134:	4642      	mov	r2, r8
   99136:	4639      	mov	r1, r7
   99138:	4620      	mov	r0, r4
   9913a:	4b35      	ldr	r3, [pc, #212]	; (99210 <tree_message_function+0x3f0>)
   9913c:	4798      	blx	r3
   9913e:	2800      	cmp	r0, #0
   99140:	d154      	bne.n	991ec <tree_message_function+0x3cc>
						if ((this_tree->tree_container.tree_flags & MW_TREE_CONTAINER_SINGLE_SELECT_ONLY) == MW_TREE_CONTAINER_SINGLE_SELECT_ONLY)
   99142:	7b23      	ldrb	r3, [r4, #12]
   99144:	079b      	lsls	r3, r3, #30
   99146:	d48b      	bmi.n	99060 <tree_message_function+0x240>
							this_tree->invalid_rect.y = (touch_y / this_tree->row_height) * this_tree->row_height;
   99148:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
							this_tree->invalid_rect.width = mw_get_control_rect(message->recipient_handle).width - 2,
   9914c:	a802      	add	r0, sp, #8
							this_tree->invalid_rect.y = (touch_y / this_tree->row_height) * this_tree->row_height;
   9914e:	fb99 f3f2 	sdiv	r3, r9, r2
   99152:	fb03 f302 	mul.w	r3, r3, r2
   99156:	87a3      	strh	r3, [r4, #60]	; 0x3c
							this_tree->invalid_rect.width = mw_get_control_rect(message->recipient_handle).width - 2,
   99158:	6869      	ldr	r1, [r5, #4]
   9915a:	4b2e      	ldr	r3, [pc, #184]	; (99214 <tree_message_function+0x3f4>)
   9915c:	4798      	blx	r3
   9915e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
							mw_paint_control_rect(message->recipient_handle, &this_tree->invalid_rect);
   99162:	f104 013a 	add.w	r1, r4, #58	; 0x3a
							this_tree->invalid_rect.width = mw_get_control_rect(message->recipient_handle).width - 2,
   99166:	3b02      	subs	r3, #2
   99168:	87e3      	strh	r3, [r4, #62]	; 0x3e
							mw_paint_control_rect(message->recipient_handle, &this_tree->invalid_rect);
   9916a:	6868      	ldr	r0, [r5, #4]
   9916c:	e791      	b.n	99092 <tree_message_function+0x272>
								if (mw_tree_container_change_node_selected_state(&this_tree->tree_container, selected_node_handle, true))
   9916e:	2201      	movs	r2, #1
   99170:	4639      	mov	r1, r7
   99172:	4620      	mov	r0, r4
   99174:	4b26      	ldr	r3, [pc, #152]	; (99210 <tree_message_function+0x3f0>)
   99176:	4798      	blx	r3
   99178:	2800      	cmp	r0, #0
   9917a:	d0e2      	beq.n	99142 <tree_message_function+0x322>
									mw_post_message(MW_TREE_NODE_SELECTED_MESSAGE,
   9917c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   99180:	4b25      	ldr	r3, [pc, #148]	; (99218 <tree_message_function+0x3f8>)
   99182:	4640      	mov	r0, r8
   99184:	4798      	blx	r3
   99186:	9601      	str	r6, [sp, #4]
   99188:	4602      	mov	r2, r0
   9918a:	9600      	str	r6, [sp, #0]
   9918c:	4641      	mov	r1, r8
   9918e:	463b      	mov	r3, r7
   99190:	2027      	movs	r0, #39	; 0x27
   99192:	4e1e      	ldr	r6, [pc, #120]	; (9920c <tree_message_function+0x3ec>)
   99194:	47b0      	blx	r6
   99196:	e7d4      	b.n	99142 <tree_message_function+0x322>
							this_tree->node_to_animate = selected_node_handle;
   99198:	6467      	str	r7, [r4, #68]	; 0x44
							mw_post_message(MW_TREE_NODE_SELECTED_MESSAGE,
   9919a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   9919e:	4b1e      	ldr	r3, [pc, #120]	; (99218 <tree_message_function+0x3f8>)
   991a0:	4640      	mov	r0, r8
   991a2:	4798      	blx	r3
   991a4:	2600      	movs	r6, #0
   991a6:	4602      	mov	r2, r0
   991a8:	4641      	mov	r1, r8
   991aa:	463b      	mov	r3, r7
   991ac:	9601      	str	r6, [sp, #4]
   991ae:	9600      	str	r6, [sp, #0]
   991b0:	2027      	movs	r0, #39	; 0x27
   991b2:	4e16      	ldr	r6, [pc, #88]	; (9920c <tree_message_function+0x3ec>)
   991b4:	47b0      	blx	r6
							(void)mw_set_timer(mw_tick_counter + MW_CONTROL_DOWN_TIME, message->recipient_handle, MW_CONTROL_MESSAGE);
   991b6:	4b19      	ldr	r3, [pc, #100]	; (9921c <tree_message_function+0x3fc>)
   991b8:	2201      	movs	r2, #1
   991ba:	6818      	ldr	r0, [r3, #0]
   991bc:	6869      	ldr	r1, [r5, #4]
   991be:	4b18      	ldr	r3, [pc, #96]	; (99220 <tree_message_function+0x400>)
   991c0:	3004      	adds	r0, #4
   991c2:	4798      	blx	r3
   991c4:	e7bd      	b.n	99142 <tree_message_function+0x322>
							mw_tree_container_change_folder_node_open_state(&this_tree->tree_container, selected_node_handle, true);
   991c6:	4639      	mov	r1, r7
   991c8:	2201      	movs	r2, #1
   991ca:	4b16      	ldr	r3, [pc, #88]	; (99224 <tree_message_function+0x404>)
   991cc:	4798      	blx	r3
							mw_post_message(MW_TREE_FOLDER_OPENED_MESSAGE,
   991ce:	686c      	ldr	r4, [r5, #4]
   991d0:	4b11      	ldr	r3, [pc, #68]	; (99218 <tree_message_function+0x3f8>)
   991d2:	4620      	mov	r0, r4
   991d4:	4798      	blx	r3
   991d6:	4e0d      	ldr	r6, [pc, #52]	; (9920c <tree_message_function+0x3ec>)
   991d8:	4602      	mov	r2, r0
   991da:	4621      	mov	r1, r4
   991dc:	f8cd 8004 	str.w	r8, [sp, #4]
   991e0:	f8cd 8000 	str.w	r8, [sp]
   991e4:	463b      	mov	r3, r7
   991e6:	202a      	movs	r0, #42	; 0x2a
   991e8:	47b0      	blx	r6
   991ea:	e731      	b.n	99050 <tree_message_function+0x230>
									mw_post_message(MW_TREE_NODE_DESELECTED_MESSAGE,
   991ec:	686e      	ldr	r6, [r5, #4]
   991ee:	4b0a      	ldr	r3, [pc, #40]	; (99218 <tree_message_function+0x3f8>)
   991f0:	4630      	mov	r0, r6
   991f2:	4798      	blx	r3
   991f4:	4631      	mov	r1, r6
   991f6:	4602      	mov	r2, r0
   991f8:	f8cd 8004 	str.w	r8, [sp, #4]
   991fc:	f8cd 8000 	str.w	r8, [sp]
   99200:	463b      	mov	r3, r7
   99202:	2028      	movs	r0, #40	; 0x28
   99204:	4e01      	ldr	r6, [pc, #4]	; (9920c <tree_message_function+0x3ec>)
   99206:	47b0      	blx	r6
   99208:	e79b      	b.n	99142 <tree_message_function+0x322>
   9920a:	bf00      	nop
   9920c:	00091955 	.word	0x00091955
   99210:	00096645 	.word	0x00096645
   99214:	000916c5 	.word	0x000916c5
   99218:	00091721 	.word	0x00091721
   9921c:	20072f98 	.word	0x20072f98
   99220:	000917f9 	.word	0x000917f9
   99224:	00096751 	.word	0x00096751

00099228 <tree_paint_function>:
{
   99228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tree_callback_data.this_tree = (mw_ui_tree_data_t*)mw_get_control_instance_data(control_handle);
   9922c:	4ba3      	ldr	r3, [pc, #652]	; (994bc <tree_paint_function+0x294>)
{
   9922e:	b08c      	sub	sp, #48	; 0x30
   99230:	4604      	mov	r4, r0
   99232:	460e      	mov	r6, r1
	tree_callback_data.this_tree = (mw_ui_tree_data_t*)mw_get_control_instance_data(control_handle);
   99234:	4798      	blx	r3
   99236:	9008      	str	r0, [sp, #32]
	MW_ASSERT(draw_info != (void*)0, "Null pointer argument");
   99238:	1c30      	adds	r0, r6, #0
   9923a:	f04f 02e4 	mov.w	r2, #228	; 0xe4
   9923e:	bf18      	it	ne
   99240:	2001      	movne	r0, #1
   99242:	4b9f      	ldr	r3, [pc, #636]	; (994c0 <tree_paint_function+0x298>)
   99244:	499f      	ldr	r1, [pc, #636]	; (994c4 <tree_paint_function+0x29c>)
   99246:	4da0      	ldr	r5, [pc, #640]	; (994c8 <tree_paint_function+0x2a0>)
   99248:	47a8      	blx	r5
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   9924a:	4da0      	ldr	r5, [pc, #640]	; (994cc <tree_paint_function+0x2a4>)
   9924c:	4620      	mov	r0, r4
	tree_callback_data.draw_info = draw_info;
   9924e:	9609      	str	r6, [sp, #36]	; 0x24
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   99250:	47a8      	blx	r5
	tree_callback_data.control_width = mw_get_control_rect(control_handle).width;
   99252:	4f9f      	ldr	r7, [pc, #636]	; (994d0 <tree_paint_function+0x2a8>)
   99254:	4621      	mov	r1, r4
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   99256:	f3c0 03c0 	ubfx	r3, r0, #3, #1
	tree_callback_data.control_width = mw_get_control_rect(control_handle).width;
   9925a:	a802      	add	r0, sp, #8
   9925c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   99260:	47b8      	blx	r7
   99262:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   99266:	4620      	mov	r0, r4
	tree_callback_data.control_width = mw_get_control_rect(control_handle).width;
   99268:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   9926c:	47a8      	blx	r5
   9926e:	f010 0008 	ands.w	r0, r0, #8
		mw_gl_set_font(MW_GL_TITLE_FONT);
   99272:	bf18      	it	ne
   99274:	2005      	movne	r0, #5
		mw_gl_set_font(MW_GL_FONT_9);
   99276:	4b97      	ldr	r3, [pc, #604]	; (994d4 <tree_paint_function+0x2ac>)
   99278:	4798      	blx	r3
	mw_gl_set_fill(MW_GL_FILL);
   9927a:	4b97      	ldr	r3, [pc, #604]	; (994d8 <tree_paint_function+0x2b0>)
   9927c:	2001      	movs	r0, #1
   9927e:	4798      	blx	r3
	mw_gl_set_solid_fill_colour(MW_CONTROL_UP_COLOUR);
   99280:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 99524 <tree_paint_function+0x2fc>
   99284:	4895      	ldr	r0, [pc, #596]	; (994dc <tree_paint_function+0x2b4>)
   99286:	47c0      	blx	r8
	mw_gl_set_fg_colour(MW_HAL_LCD_BLACK);
   99288:	f8df 929c 	ldr.w	r9, [pc, #668]	; 99528 <tree_paint_function+0x300>
   9928c:	2000      	movs	r0, #0
   9928e:	47c8      	blx	r9
	mw_gl_set_line(MW_GL_SOLID_LINE);
   99290:	f64f 70ff 	movw	r0, #65535	; 0xffff
   99294:	4b92      	ldr	r3, [pc, #584]	; (994e0 <tree_paint_function+0x2b8>)
   99296:	4798      	blx	r3
	mw_gl_set_border(MW_GL_BORDER_ON);
   99298:	2001      	movs	r0, #1
   9929a:	4b92      	ldr	r3, [pc, #584]	; (994e4 <tree_paint_function+0x2bc>)
   9929c:	4798      	blx	r3
	mw_gl_clear_pattern();
   9929e:	4b92      	ldr	r3, [pc, #584]	; (994e8 <tree_paint_function+0x2c0>)
   992a0:	4798      	blx	r3
			mw_get_control_rect(control_handle).width,
   992a2:	4621      	mov	r1, r4
   992a4:	a804      	add	r0, sp, #16
   992a6:	47b8      	blx	r7
			mw_get_control_rect(control_handle).height);
   992a8:	4621      	mov	r1, r4
   992aa:	a806      	add	r0, sp, #24
	mw_gl_rectangle(draw_info,
   992ac:	f9bd a014 	ldrsh.w	sl, [sp, #20]
			mw_get_control_rect(control_handle).height);
   992b0:	47b8      	blx	r7
	mw_gl_rectangle(draw_info,
   992b2:	2200      	movs	r2, #0
   992b4:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
   992b8:	4611      	mov	r1, r2
   992ba:	4653      	mov	r3, sl
   992bc:	4630      	mov	r0, r6
   992be:	9700      	str	r7, [sp, #0]
   992c0:	4f8a      	ldr	r7, [pc, #552]	; (994ec <tree_paint_function+0x2c4>)
   992c2:	47b8      	blx	r7
	mw_gl_set_bg_transparency(MW_GL_BG_TRANSPARENT);
   992c4:	2000      	movs	r0, #0
   992c6:	4b8a      	ldr	r3, [pc, #552]	; (994f0 <tree_paint_function+0x2c8>)
   992c8:	4798      	blx	r3
	mw_gl_set_text_rotation(MW_GL_TEXT_ROTATION_0);
   992ca:	2000      	movs	r0, #0
   992cc:	4b89      	ldr	r3, [pc, #548]	; (994f4 <tree_paint_function+0x2cc>)
   992ce:	4798      	blx	r3
	if ((mw_get_control_flags(control_handle) & MW_CONTROL_FLAG_IS_ENABLED) == 0U)
   992d0:	4620      	mov	r0, r4
   992d2:	47a8      	blx	r5
   992d4:	0782      	lsls	r2, r0, #30
   992d6:	d543      	bpl.n	99360 <tree_paint_function+0x138>
	tree_callback_data.next_line = 0;
   992d8:	2300      	movs	r3, #0
	(void)node_callback(&tree_callback_data.this_tree->tree_container,
   992da:	9d08      	ldr	r5, [sp, #32]
	tree_callback_data.next_line = 0;
   992dc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	(void)node_callback(&tree_callback_data.this_tree->tree_container,
   992e0:	6a2e      	ldr	r6, [r5, #32]
	if (node_handle == MW_INVALID_HANDLE)
   992e2:	b96e      	cbnz	r6, 99300 <tree_paint_function+0xd8>
	tree_callback_data.next_line = 1;
   992e4:	2701      	movs	r7, #1
	(void)mw_tree_container_get_all_children(&tree_callback_data.this_tree->tree_container,
   992e6:	ab08      	add	r3, sp, #32
   992e8:	9300      	str	r3, [sp, #0]
   992ea:	4631      	mov	r1, r6
   992ec:	4628      	mov	r0, r5
   992ee:	4b82      	ldr	r3, [pc, #520]	; (994f8 <tree_paint_function+0x2d0>)
   992f0:	2200      	movs	r2, #0
   992f2:	4c82      	ldr	r4, [pc, #520]	; (994fc <tree_paint_function+0x2d4>)
	tree_callback_data.next_line = 1;
   992f4:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	(void)mw_tree_container_get_all_children(&tree_callback_data.this_tree->tree_container,
   992f8:	47a0      	blx	r4
}
   992fa:	b00c      	add	sp, #48	; 0x30
   992fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	node_flags = mw_tree_container_get_node_flags(tree, node_handle);
   99300:	4631      	mov	r1, r6
   99302:	4b7f      	ldr	r3, [pc, #508]	; (99500 <tree_paint_function+0x2d8>)
   99304:	4628      	mov	r0, r5
   99306:	4798      	blx	r3
	node_level = mw_tree_container_get_node_level(tree, node_handle);
   99308:	4b7e      	ldr	r3, [pc, #504]	; (99504 <tree_paint_function+0x2dc>)
	node_flags = mw_tree_container_get_node_flags(tree, node_handle);
   9930a:	4682      	mov	sl, r0
	node_level = mw_tree_container_get_node_level(tree, node_handle);
   9930c:	4631      	mov	r1, r6
   9930e:	4628      	mov	r0, r5
   99310:	4798      	blx	r3
	if ((tree->tree_flags & MW_TREE_CONTAINER_NO_SELECT) == MW_TREE_CONTAINER_NO_SELECT)
   99312:	7b2b      	ldrb	r3, [r5, #12]
	node_level = mw_tree_container_get_node_level(tree, node_handle);
   99314:	4681      	mov	r9, r0
	if ((tree->tree_flags & MW_TREE_CONTAINER_NO_SELECT) == MW_TREE_CONTAINER_NO_SELECT)
   99316:	07db      	lsls	r3, r3, #31
   99318:	d425      	bmi.n	99366 <tree_paint_function+0x13e>
		if ((node_flags & MW_TREE_CONTAINER_NODE_IS_SELECTED) == MW_TREE_CONTAINER_NODE_IS_SELECTED)
   9931a:	f01a 0f01 	tst.w	sl, #1
   9931e:	d126      	bne.n	9936e <tree_paint_function+0x146>
   99320:	9c08      	ldr	r4, [sp, #32]
	if ((node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   99322:	f01a 0f02 	tst.w	sl, #2
   99326:	d03b      	beq.n	993a0 <tree_paint_function+0x178>
		if ((node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   99328:	f01a 0f04 	tst.w	sl, #4
			if (tree_callback_data->large_size == true)
   9932c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
		if ((node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   99330:	f000 8082 	beq.w	99438 <tree_paint_function+0x210>
			if (tree_callback_data->large_size == true)
   99334:	2b00      	cmp	r3, #0
   99336:	f000 810c 	beq.w	99552 <tree_paint_function+0x32a>
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9933a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9933c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   99340:	f9b4 002e 	ldrsh.w	r0, [r4, #46]	; 0x2e
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99344:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99346:	1a10      	subs	r0, r2, r0
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99348:	b219      	sxth	r1, r3
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9934a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   9934c:	8f24      	ldrh	r4, [r4, #56]	; 0x38
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9934e:	3102      	adds	r1, #2
   99350:	3701      	adds	r7, #1
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99352:	fb00 4202 	mla	r2, r0, r2, r4
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99356:	fb01 7109 	mla	r1, r1, r9, r7
				mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   9935a:	9809      	ldr	r0, [sp, #36]	; 0x24
   9935c:	4c6a      	ldr	r4, [pc, #424]	; (99508 <tree_paint_function+0x2e0>)
   9935e:	e07f      	b.n	99460 <tree_paint_function+0x238>
		mw_gl_set_fg_colour(MW_CONTROL_DISABLED_COLOUR);
   99360:	486a      	ldr	r0, [pc, #424]	; (9950c <tree_paint_function+0x2e4>)
   99362:	47c8      	blx	r9
   99364:	e7b8      	b.n	992d8 <tree_paint_function+0xb0>
		if (node_handle == tree_callback_data->this_tree->node_to_animate)
   99366:	9c08      	ldr	r4, [sp, #32]
   99368:	6c63      	ldr	r3, [r4, #68]	; 0x44
   9936a:	429e      	cmp	r6, r3
   9936c:	d1d9      	bne.n	99322 <tree_paint_function+0xfa>
		mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   9936e:	4868      	ldr	r0, [pc, #416]	; (99510 <tree_paint_function+0x2e8>)
   99370:	47c0      	blx	r8
				(tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99372:	9b08      	ldr	r3, [sp, #32]
   99374:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   99378:	f9b3 002e 	ldrsh.w	r0, [r3, #46]	; 0x2e
   9937c:	f9b3 1032 	ldrsh.w	r1, [r3, #50]	; 0x32
   99380:	1a12      	subs	r2, r2, r0
		mw_gl_rectangle(tree_callback_data->draw_info,
   99382:	fb02 f201 	mul.w	r2, r2, r1
				tree_callback_data->control_width - 2,
   99386:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
		mw_gl_rectangle(tree_callback_data->draw_info,
   9938a:	9100      	str	r1, [sp, #0]
				tree_callback_data->control_width - 2,
   9938c:	3b02      	subs	r3, #2
		mw_gl_rectangle(tree_callback_data->draw_info,
   9938e:	9809      	ldr	r0, [sp, #36]	; 0x24
   99390:	b212      	sxth	r2, r2
   99392:	b21b      	sxth	r3, r3
   99394:	2101      	movs	r1, #1
   99396:	47b8      	blx	r7
	if ((node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   99398:	f01a 0f02 	tst.w	sl, #2
   9939c:	9c08      	ldr	r4, [sp, #32]
   9939e:	d1c3      	bne.n	99328 <tree_paint_function+0x100>
		if (tree_callback_data->this_tree->file_icon != NULL)
   993a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   993a2:	2800      	cmp	r0, #0
   993a4:	d042      	beq.n	9942c <tree_paint_function+0x204>
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   993a6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   993a8:	f9b4 e02e 	ldrsh.w	lr, [r4, #46]	; 0x2e
   993ac:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   993b0:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
   993b4:	b219      	sxth	r1, r3
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   993b6:	eba2 0e0e 	sub.w	lr, r2, lr
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   993ba:	f109 0701 	add.w	r7, r9, #1
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   993be:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   993c0:	8f24      	ldrh	r4, [r4, #56]	; 0x38
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   993c2:	f10c 0c01 	add.w	ip, ip, #1
   993c6:	b2bf      	uxth	r7, r7
   993c8:	3102      	adds	r1, #2
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   993ca:	fb0e 4202 	mla	r2, lr, r2, r4
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   993ce:	fb01 c107 	mla	r1, r1, r7, ip
			mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   993d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   993d4:	b212      	sxth	r2, r2
   993d6:	9300      	str	r3, [sp, #0]
   993d8:	9001      	str	r0, [sp, #4]
   993da:	b209      	sxth	r1, r1
   993dc:	4620      	mov	r0, r4
   993de:	4c4d      	ldr	r4, [pc, #308]	; (99514 <tree_paint_function+0x2ec>)
   993e0:	47a0      	blx	r4
			label_icon_offset = (int16_t)tree_callback_data->this_tree->icon_size + 2;
   993e2:	9c08      	ldr	r4, [sp, #32]
   993e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   993e6:	1c9a      	adds	r2, r3, #2
   993e8:	b292      	uxth	r2, r2
			tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + label_icon_offset + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   993ea:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
   993ec:	3201      	adds	r2, #1
   993ee:	b21b      	sxth	r3, r3
			tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   993f0:	f9b4 e02e 	ldrsh.w	lr, [r4, #46]	; 0x2e
			tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + label_icon_offset + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   993f4:	4402      	add	r2, r0
			tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   993f6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
			tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + label_icon_offset + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   993fa:	3302      	adds	r3, #2
			tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   993fc:	8f20      	ldrh	r0, [r4, #56]	; 0x38
			tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + label_icon_offset + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   993fe:	fb03 2307 	mla	r3, r3, r7, r2
			tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99402:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   99404:	eba1 010e 	sub.w	r1, r1, lr
   99408:	fb01 0202 	mla	r2, r1, r2, r0
	mw_gl_string(tree_callback_data->draw_info,
   9940c:	b21c      	sxth	r4, r3
			mw_tree_container_get_node_label(tree, node_handle));
   9940e:	4631      	mov	r1, r6
   99410:	4628      	mov	r0, r5
   99412:	4b41      	ldr	r3, [pc, #260]	; (99518 <tree_paint_function+0x2f0>)
	mw_gl_string(tree_callback_data->draw_info,
   99414:	b215      	sxth	r5, r2
   99416:	9e09      	ldr	r6, [sp, #36]	; 0x24
			mw_tree_container_get_node_label(tree, node_handle));
   99418:	4798      	blx	r3
	mw_gl_string(tree_callback_data->draw_info,
   9941a:	462a      	mov	r2, r5
   9941c:	4603      	mov	r3, r0
   9941e:	4621      	mov	r1, r4
   99420:	4630      	mov	r0, r6
   99422:	4c3e      	ldr	r4, [pc, #248]	; (9951c <tree_paint_function+0x2f4>)
   99424:	47a0      	blx	r4
   99426:	9d08      	ldr	r5, [sp, #32]
   99428:	6a2e      	ldr	r6, [r5, #32]
   9942a:	e75b      	b.n	992e4 <tree_paint_function+0xbc>
   9942c:	f109 0701 	add.w	r7, r9, #1
   99430:	b2bf      	uxth	r7, r7
		if (tree_callback_data->this_tree->folder_icon != NULL)
   99432:	4602      	mov	r2, r0
   99434:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   99436:	e7d8      	b.n	993ea <tree_paint_function+0x1c2>
			if (tree_callback_data->large_size == true)
   99438:	2b00      	cmp	r3, #0
   9943a:	d177      	bne.n	9952c <tree_paint_function+0x304>
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9943c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   9943e:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99440:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   99444:	f9b4 002e 	ldrsh.w	r0, [r4, #46]	; 0x2e
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99448:	b219      	sxth	r1, r3
   9944a:	3102      	adds	r1, #2
   9944c:	3701      	adds	r7, #1
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9944e:	1a10      	subs	r0, r2, r0
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99450:	fb01 7109 	mla	r1, r1, r9, r7
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99454:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   99456:	8f24      	ldrh	r4, [r4, #56]	; 0x38
   99458:	fb00 4202 	mla	r2, r0, r2, r4
				mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   9945c:	9809      	ldr	r0, [sp, #36]	; 0x24
   9945e:	4c30      	ldr	r4, [pc, #192]	; (99520 <tree_paint_function+0x2f8>)
   99460:	e88d 0018 	stmia.w	sp, {r3, r4}
   99464:	b209      	sxth	r1, r1
   99466:	b212      	sxth	r2, r2
   99468:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 99514 <tree_paint_function+0x2ec>
   9946c:	47c0      	blx	r8
		if (tree_callback_data->this_tree->folder_icon != NULL)
   9946e:	9c08      	ldr	r4, [sp, #32]
   99470:	6a60      	ldr	r0, [r4, #36]	; 0x24
   99472:	2800      	cmp	r0, #0
   99474:	d0da      	beq.n	9942c <tree_paint_function+0x204>
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99476:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99478:	f9b4 e02e 	ldrsh.w	lr, [r4, #46]	; 0x2e
   9947c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99480:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
   99484:	b219      	sxth	r1, r3
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99486:	eba2 0e0e 	sub.w	lr, r2, lr
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9948a:	f109 0701 	add.w	r7, r9, #1
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9948e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   99490:	8f24      	ldrh	r4, [r4, #56]	; 0x38
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99492:	f10c 0c01 	add.w	ip, ip, #1
   99496:	b2bf      	uxth	r7, r7
   99498:	3102      	adds	r1, #2
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9949a:	fb0e 4202 	mla	r2, lr, r2, r4
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9949e:	fb01 c107 	mla	r1, r1, r7, ip
			mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   994a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   994a4:	b212      	sxth	r2, r2
   994a6:	9300      	str	r3, [sp, #0]
   994a8:	9001      	str	r0, [sp, #4]
   994aa:	b209      	sxth	r1, r1
   994ac:	4620      	mov	r0, r4
   994ae:	47c0      	blx	r8
			label_icon_offset = (int16_t)tree_callback_data->this_tree->icon_size + 2;
   994b0:	9c08      	ldr	r4, [sp, #32]
   994b2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   994b4:	1c9a      	adds	r2, r3, #2
   994b6:	b292      	uxth	r2, r2
   994b8:	e797      	b.n	993ea <tree_paint_function+0x1c2>
   994ba:	bf00      	nop
   994bc:	0009176d 	.word	0x0009176d
   994c0:	000a6618 	.word	0x000a6618
   994c4:	000ac114 	.word	0x000ac114
   994c8:	00095add 	.word	0x00095add
   994cc:	000917b9 	.word	0x000917b9
   994d0:	000916c5 	.word	0x000916c5
   994d4:	00084715 	.word	0x00084715
   994d8:	000846fd 	.word	0x000846fd
   994dc:	00e6e6e6 	.word	0x00e6e6e6
   994e0:	000846d5 	.word	0x000846d5
   994e4:	000846f1 	.word	0x000846f1
   994e8:	000846e1 	.word	0x000846e1
   994ec:	000850e1 	.word	0x000850e1
   994f0:	00084709 	.word	0x00084709
   994f4:	00084745 	.word	0x00084745
   994f8:	00099581 	.word	0x00099581
   994fc:	00096379 	.word	0x00096379
   99500:	00096a91 	.word	0x00096a91
   99504:	00096b15 	.word	0x00096b15
   99508:	000a6774 	.word	0x000a6774
   9950c:	00bfbfbf 	.word	0x00bfbfbf
   99510:	00cccccc 	.word	0x00cccccc
   99514:	000868b1 	.word	0x000868b1
   99518:	00096b99 	.word	0x00096b99
   9951c:	00085f1d 	.word	0x00085f1d
   99520:	000a67e4 	.word	0x000a67e4
   99524:	000846c9 	.word	0x000846c9
   99528:	000846b1 	.word	0x000846b1
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9952c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9952e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   99532:	f9b4 002e 	ldrsh.w	r0, [r4, #46]	; 0x2e
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99536:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99538:	1a10      	subs	r0, r2, r0
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9953a:	b219      	sxth	r1, r3
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9953c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   9953e:	8f24      	ldrh	r4, [r4, #56]	; 0x38
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99540:	3102      	adds	r1, #2
   99542:	3701      	adds	r7, #1
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99544:	fb00 4202 	mla	r2, r0, r2, r4
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99548:	fb01 7109 	mla	r1, r1, r9, r7
				mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   9954c:	9809      	ldr	r0, [sp, #36]	; 0x24
   9954e:	4c0a      	ldr	r4, [pc, #40]	; (99578 <tree_paint_function+0x350>)
   99550:	e786      	b.n	99460 <tree_paint_function+0x238>
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99552:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99554:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   99558:	f9b4 002e 	ldrsh.w	r0, [r4, #46]	; 0x2e
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9955c:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9955e:	1a10      	subs	r0, r2, r0
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99560:	b219      	sxth	r1, r3
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99562:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   99564:	8f24      	ldrh	r4, [r4, #56]	; 0x38
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99566:	3102      	adds	r1, #2
   99568:	3701      	adds	r7, #1
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9956a:	fb00 4202 	mla	r2, r0, r2, r4
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9956e:	fb01 7109 	mla	r1, r1, r9, r7
				mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   99572:	9809      	ldr	r0, [sp, #36]	; 0x24
   99574:	4c01      	ldr	r4, [pc, #4]	; (9957c <tree_paint_function+0x354>)
   99576:	e773      	b.n	99460 <tree_paint_function+0x238>
   99578:	000a67c4 	.word	0x000a67c4
   9957c:	000a6794 	.word	0x000a6794

00099580 <node_callback>:
{
   99580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (node_handle == MW_INVALID_HANDLE)
   99584:	460c      	mov	r4, r1
{
   99586:	b083      	sub	sp, #12
	if (node_handle == MW_INVALID_HANDLE)
   99588:	b919      	cbnz	r1, 99592 <node_callback+0x12>
		return (false);
   9958a:	4608      	mov	r0, r1
}
   9958c:	b003      	add	sp, #12
   9958e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	node_flags = mw_tree_container_get_node_flags(tree, node_handle);
   99592:	4b8c      	ldr	r3, [pc, #560]	; (997c4 <node_callback+0x244>)
   99594:	4607      	mov	r7, r0
   99596:	4615      	mov	r5, r2
   99598:	4798      	blx	r3
	node_level = mw_tree_container_get_node_level(tree, node_handle);
   9959a:	4b8b      	ldr	r3, [pc, #556]	; (997c8 <node_callback+0x248>)
	node_flags = mw_tree_container_get_node_flags(tree, node_handle);
   9959c:	4681      	mov	r9, r0
	node_level = mw_tree_container_get_node_level(tree, node_handle);
   9959e:	4621      	mov	r1, r4
   995a0:	4638      	mov	r0, r7
   995a2:	4798      	blx	r3
	if ((tree->tree_flags & MW_TREE_CONTAINER_NO_SELECT) == MW_TREE_CONTAINER_NO_SELECT)
   995a4:	7b3b      	ldrb	r3, [r7, #12]
	node_level = mw_tree_container_get_node_level(tree, node_handle);
   995a6:	4680      	mov	r8, r0
	if ((tree->tree_flags & MW_TREE_CONTAINER_NO_SELECT) == MW_TREE_CONTAINER_NO_SELECT)
   995a8:	07db      	lsls	r3, r3, #31
   995aa:	d423      	bmi.n	995f4 <node_callback+0x74>
		if ((node_flags & MW_TREE_CONTAINER_NODE_IS_SELECTED) == MW_TREE_CONTAINER_NODE_IS_SELECTED)
   995ac:	f019 0f01 	tst.w	r9, #1
   995b0:	d124      	bne.n	995fc <node_callback+0x7c>
   995b2:	682e      	ldr	r6, [r5, #0]
	if ((node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   995b4:	f019 0f02 	tst.w	r9, #2
   995b8:	d03a      	beq.n	99630 <node_callback+0xb0>
		if ((node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   995ba:	f019 0f04 	tst.w	r9, #4
			if (tree_callback_data->large_size == true)
   995be:	7b2b      	ldrb	r3, [r5, #12]
		if ((node_flags & MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN) == MW_TREE_CONTAINER_NODE_FOLDER_IS_OPEN)
   995c0:	f000 8092 	beq.w	996e8 <node_callback+0x168>
			if (tree_callback_data->large_size == true)
   995c4:	2b00      	cmp	r3, #0
   995c6:	f000 80e8 	beq.w	9979a <node_callback+0x21a>
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   995ca:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   995cc:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
   995d0:	f9b6 002e 	ldrsh.w	r0, [r6, #46]	; 0x2e
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   995d4:	f8b6 e036 	ldrh.w	lr, [r6, #54]	; 0x36
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   995d8:	1a10      	subs	r0, r2, r0
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   995da:	b219      	sxth	r1, r3
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   995dc:	8e72      	ldrh	r2, [r6, #50]	; 0x32
   995de:	8f36      	ldrh	r6, [r6, #56]	; 0x38
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   995e0:	3102      	adds	r1, #2
   995e2:	f10e 0e01 	add.w	lr, lr, #1
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   995e6:	fb00 6202 	mla	r2, r0, r2, r6
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   995ea:	fb01 e108 	mla	r1, r1, r8, lr
				mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   995ee:	6868      	ldr	r0, [r5, #4]
   995f0:	4e76      	ldr	r6, [pc, #472]	; (997cc <node_callback+0x24c>)
   995f2:	e08f      	b.n	99714 <node_callback+0x194>
		if (node_handle == tree_callback_data->this_tree->node_to_animate)
   995f4:	682e      	ldr	r6, [r5, #0]
   995f6:	6c73      	ldr	r3, [r6, #68]	; 0x44
   995f8:	429c      	cmp	r4, r3
   995fa:	d1db      	bne.n	995b4 <node_callback+0x34>
		mw_gl_set_solid_fill_colour(MW_CONTROL_DOWN_COLOUR);
   995fc:	4874      	ldr	r0, [pc, #464]	; (997d0 <node_callback+0x250>)
   995fe:	4b75      	ldr	r3, [pc, #468]	; (997d4 <node_callback+0x254>)
   99600:	4798      	blx	r3
				(tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99602:	682b      	ldr	r3, [r5, #0]
   99604:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
   99608:	f9b3 002e 	ldrsh.w	r0, [r3, #46]	; 0x2e
   9960c:	f9b3 1032 	ldrsh.w	r1, [r3, #50]	; 0x32
   99610:	1a12      	subs	r2, r2, r0
		mw_gl_rectangle(tree_callback_data->draw_info,
   99612:	fb02 f201 	mul.w	r2, r2, r1
				tree_callback_data->control_width - 2,
   99616:	896b      	ldrh	r3, [r5, #10]
		mw_gl_rectangle(tree_callback_data->draw_info,
   99618:	6868      	ldr	r0, [r5, #4]
				tree_callback_data->control_width - 2,
   9961a:	3b02      	subs	r3, #2
		mw_gl_rectangle(tree_callback_data->draw_info,
   9961c:	9100      	str	r1, [sp, #0]
   9961e:	4e6e      	ldr	r6, [pc, #440]	; (997d8 <node_callback+0x258>)
   99620:	b212      	sxth	r2, r2
   99622:	b21b      	sxth	r3, r3
   99624:	2101      	movs	r1, #1
   99626:	47b0      	blx	r6
	if ((node_flags & MW_TREE_CONTAINER_NODE_IS_FOLDER) == MW_TREE_CONTAINER_NODE_IS_FOLDER)
   99628:	f019 0f02 	tst.w	r9, #2
   9962c:	682e      	ldr	r6, [r5, #0]
   9962e:	d1c4      	bne.n	995ba <node_callback+0x3a>
		if (tree_callback_data->this_tree->file_icon != NULL)
   99630:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   99632:	2800      	cmp	r0, #0
   99634:	d051      	beq.n	996da <node_callback+0x15a>
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99636:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99638:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
   9963c:	f9b6 e02e 	ldrsh.w	lr, [r6, #46]	; 0x2e
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99640:	f8b6 c036 	ldrh.w	ip, [r6, #54]	; 0x36
   99644:	b219      	sxth	r1, r3
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99646:	eba2 0e0e 	sub.w	lr, r2, lr
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9964a:	f108 0801 	add.w	r8, r8, #1
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9964e:	8e72      	ldrh	r2, [r6, #50]	; 0x32
   99650:	8f36      	ldrh	r6, [r6, #56]	; 0x38
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99652:	f10c 0c01 	add.w	ip, ip, #1
   99656:	fa1f f888 	uxth.w	r8, r8
   9965a:	3102      	adds	r1, #2
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9965c:	fb0e 6202 	mla	r2, lr, r2, r6
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99660:	fb01 c108 	mla	r1, r1, r8, ip
			mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   99664:	686e      	ldr	r6, [r5, #4]
   99666:	b212      	sxth	r2, r2
   99668:	9300      	str	r3, [sp, #0]
   9966a:	9001      	str	r0, [sp, #4]
   9966c:	b209      	sxth	r1, r1
   9966e:	4630      	mov	r0, r6
   99670:	4e5a      	ldr	r6, [pc, #360]	; (997dc <node_callback+0x25c>)
   99672:	47b0      	blx	r6
			label_icon_offset = (int16_t)tree_callback_data->this_tree->icon_size + 2;
   99674:	682e      	ldr	r6, [r5, #0]
   99676:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
   99678:	1c9a      	adds	r2, r3, #2
   9967a:	b292      	uxth	r2, r2
			tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + label_icon_offset + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9967c:	8ef0      	ldrh	r0, [r6, #54]	; 0x36
   9967e:	3201      	adds	r2, #1
   99680:	b21b      	sxth	r3, r3
   99682:	4402      	add	r2, r0
   99684:	3302      	adds	r3, #2
   99686:	fb03 2308 	mla	r3, r3, r8, r2
			tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9968a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
   9968e:	f9b6 e02e 	ldrsh.w	lr, [r6, #46]	; 0x2e
   99692:	8e72      	ldrh	r2, [r6, #50]	; 0x32
   99694:	8f30      	ldrh	r0, [r6, #56]	; 0x38
   99696:	eba1 060e 	sub.w	r6, r1, lr
   9969a:	fb06 0602 	mla	r6, r6, r2, r0
			mw_tree_container_get_node_label(tree, node_handle));
   9969e:	4621      	mov	r1, r4
   996a0:	4638      	mov	r0, r7
	mw_gl_string(tree_callback_data->draw_info,
   996a2:	b21c      	sxth	r4, r3
			mw_tree_container_get_node_label(tree, node_handle));
   996a4:	4b4e      	ldr	r3, [pc, #312]	; (997e0 <node_callback+0x260>)
	mw_gl_string(tree_callback_data->draw_info,
   996a6:	686f      	ldr	r7, [r5, #4]
			mw_tree_container_get_node_label(tree, node_handle));
   996a8:	4798      	blx	r3
	mw_gl_string(tree_callback_data->draw_info,
   996aa:	b236      	sxth	r6, r6
   996ac:	4603      	mov	r3, r0
   996ae:	4632      	mov	r2, r6
   996b0:	4621      	mov	r1, r4
   996b2:	4638      	mov	r0, r7
   996b4:	4c4b      	ldr	r4, [pc, #300]	; (997e4 <node_callback+0x264>)
   996b6:	47a0      	blx	r4
	tree_callback_data->next_line++;
   996b8:	8929      	ldrh	r1, [r5, #8]
	if (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll > (int16_t)tree_callback_data->this_tree->number_of_lines)
   996ba:	682a      	ldr	r2, [r5, #0]
	tree_callback_data->next_line++;
   996bc:	3101      	adds	r1, #1
   996be:	b209      	sxth	r1, r1
   996c0:	8129      	strh	r1, [r5, #8]
	if (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll > (int16_t)tree_callback_data->this_tree->number_of_lines)
   996c2:	f9b2 002e 	ldrsh.w	r0, [r2, #46]	; 0x2e
   996c6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
   996ca:	1a08      	subs	r0, r1, r0
   996cc:	4298      	cmp	r0, r3
   996ce:	bfcc      	ite	gt
   996d0:	2000      	movgt	r0, #0
   996d2:	2001      	movle	r0, #1
}
   996d4:	b003      	add	sp, #12
   996d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   996da:	f108 0801 	add.w	r8, r8, #1
   996de:	fa1f f888 	uxth.w	r8, r8
		if (tree_callback_data->this_tree->folder_icon != NULL)
   996e2:	4602      	mov	r2, r0
   996e4:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
   996e6:	e7c9      	b.n	9967c <node_callback+0xfc>
			if (tree_callback_data->large_size == true)
   996e8:	2b00      	cmp	r3, #0
   996ea:	d141      	bne.n	99770 <node_callback+0x1f0>
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   996ec:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
   996ee:	f8b6 e036 	ldrh.w	lr, [r6, #54]	; 0x36
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   996f2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
   996f6:	f9b6 002e 	ldrsh.w	r0, [r6, #46]	; 0x2e
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   996fa:	b219      	sxth	r1, r3
   996fc:	3102      	adds	r1, #2
   996fe:	f10e 0e01 	add.w	lr, lr, #1
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99702:	1a10      	subs	r0, r2, r0
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99704:	fb01 e108 	mla	r1, r1, r8, lr
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99708:	8e72      	ldrh	r2, [r6, #50]	; 0x32
   9970a:	8f36      	ldrh	r6, [r6, #56]	; 0x38
   9970c:	fb00 6202 	mla	r2, r0, r2, r6
				mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   99710:	6868      	ldr	r0, [r5, #4]
   99712:	4e35      	ldr	r6, [pc, #212]	; (997e8 <node_callback+0x268>)
   99714:	e88d 0048 	stmia.w	sp, {r3, r6}
   99718:	b209      	sxth	r1, r1
   9971a:	b212      	sxth	r2, r2
   9971c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 997dc <node_callback+0x25c>
   99720:	47c8      	blx	r9
		if (tree_callback_data->this_tree->folder_icon != NULL)
   99722:	682e      	ldr	r6, [r5, #0]
   99724:	6a70      	ldr	r0, [r6, #36]	; 0x24
   99726:	2800      	cmp	r0, #0
   99728:	d0d7      	beq.n	996da <node_callback+0x15a>
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9972a:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9972c:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
   99730:	f9b6 e02e 	ldrsh.w	lr, [r6, #46]	; 0x2e
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99734:	f8b6 c036 	ldrh.w	ip, [r6, #54]	; 0x36
   99738:	b219      	sxth	r1, r3
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9973a:	eba2 0e0e 	sub.w	lr, r2, lr
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9973e:	f108 0801 	add.w	r8, r8, #1
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99742:	8e72      	ldrh	r2, [r6, #50]	; 0x32
   99744:	8f36      	ldrh	r6, [r6, #56]	; 0x38
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99746:	f10c 0c01 	add.w	ip, ip, #1
   9974a:	fa1f f888 	uxth.w	r8, r8
   9974e:	3102      	adds	r1, #2
					tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99750:	fb0e 6202 	mla	r2, lr, r2, r6
					tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + ((int16_t)node_level + 1) * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99754:	fb01 c108 	mla	r1, r1, r8, ip
			mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   99758:	686e      	ldr	r6, [r5, #4]
   9975a:	b212      	sxth	r2, r2
   9975c:	9300      	str	r3, [sp, #0]
   9975e:	9001      	str	r0, [sp, #4]
   99760:	b209      	sxth	r1, r1
   99762:	4630      	mov	r0, r6
   99764:	47c8      	blx	r9
			label_icon_offset = (int16_t)tree_callback_data->this_tree->icon_size + 2;
   99766:	682e      	ldr	r6, [r5, #0]
   99768:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
   9976a:	1c9a      	adds	r2, r3, #2
   9976c:	b292      	uxth	r2, r2
   9976e:	e785      	b.n	9967c <node_callback+0xfc>
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99770:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99772:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
   99776:	f9b6 002e 	ldrsh.w	r0, [r6, #46]	; 0x2e
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9977a:	f8b6 e036 	ldrh.w	lr, [r6, #54]	; 0x36
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9977e:	1a10      	subs	r0, r2, r0
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99780:	b219      	sxth	r1, r3
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   99782:	8e72      	ldrh	r2, [r6, #50]	; 0x32
   99784:	8f36      	ldrh	r6, [r6, #56]	; 0x38
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99786:	3102      	adds	r1, #2
   99788:	f10e 0e01 	add.w	lr, lr, #1
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9978c:	fb00 6202 	mla	r2, r0, r2, r6
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   99790:	fb01 e108 	mla	r1, r1, r8, lr
				mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   99794:	6868      	ldr	r0, [r5, #4]
   99796:	4e15      	ldr	r6, [pc, #84]	; (997ec <node_callback+0x26c>)
   99798:	e7bc      	b.n	99714 <node_callback+0x194>
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   9979a:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   9979c:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
   997a0:	f9b6 002e 	ldrsh.w	r0, [r6, #46]	; 0x2e
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   997a4:	f8b6 e036 	ldrh.w	lr, [r6, #54]	; 0x36
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   997a8:	1a10      	subs	r0, r2, r0
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   997aa:	b219      	sxth	r1, r3
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   997ac:	8e72      	ldrh	r2, [r6, #50]	; 0x32
   997ae:	8f36      	ldrh	r6, [r6, #56]	; 0x38
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   997b0:	3102      	adds	r1, #2
   997b2:	f10e 0e01 	add.w	lr, lr, #1
						tree_callback_data->this_tree->row_top_border + (tree_callback_data->next_line - (int16_t)tree_callback_data->this_tree->lines_to_scroll) * tree_callback_data->this_tree->row_height,
   997b6:	fb00 6202 	mla	r2, r0, r2, r6
						tree_callback_data->this_tree->row_left_border + MW_UI_TREE_LEFT_BORDER + (int16_t)node_level * ((int16_t)tree_callback_data->this_tree->icon_size + 2),
   997ba:	fb01 e108 	mla	r1, r1, r8, lr
				mw_gl_monochrome_bitmap(tree_callback_data->draw_info,
   997be:	6868      	ldr	r0, [r5, #4]
   997c0:	4e0b      	ldr	r6, [pc, #44]	; (997f0 <node_callback+0x270>)
   997c2:	e7a7      	b.n	99714 <node_callback+0x194>
   997c4:	00096a91 	.word	0x00096a91
   997c8:	00096b15 	.word	0x00096b15
   997cc:	000a6774 	.word	0x000a6774
   997d0:	00cccccc 	.word	0x00cccccc
   997d4:	000846c9 	.word	0x000846c9
   997d8:	000850e1 	.word	0x000850e1
   997dc:	000868b1 	.word	0x000868b1
   997e0:	00096b99 	.word	0x00096b99
   997e4:	00085f1d 	.word	0x00085f1d
   997e8:	000a67e4 	.word	0x000a67e4
   997ec:	000a67c4 	.word	0x000a67c4
   997f0:	000a6794 	.word	0x000a6794

000997f4 <mw_ui_tree_add_new>:
		int16_t y,
		int16_t width,
		mw_handle_t parent_handle,
		uint16_t flags,
		mw_ui_tree_data_t *tree_instance_data)
{
   997f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   997f8:	b084      	sub	sp, #16
   997fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   997fc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	mw_util_rect_t r;

	/* check for null parameters */
	if (tree_instance_data == NULL)
   99800:	2c00      	cmp	r4, #0
   99802:	d040      	beq.n	99886 <mw_ui_tree_add_new+0x92>
   99804:	461e      	mov	r6, r3
	{
		MW_ASSERT((bool)false, "Null pointer argument");
		return (MW_INVALID_HANDLE);
	}

	if (tree_instance_data->tree_container.nodes_array_size < 1U ||
   99806:	8823      	ldrh	r3, [r4, #0]
   99808:	b15b      	cbz	r3, 99822 <mw_ui_tree_add_new+0x2e>
   9980a:	8863      	ldrh	r3, [r4, #2]
   9980c:	b14b      	cbz	r3, 99822 <mw_ui_tree_add_new+0x2e>
			tree_instance_data->tree_container.node_count < 1U ||
			tree_instance_data->tree_container.nodes_array[0].handle == MW_INVALID_HANDLE)
   9980e:	6863      	ldr	r3, [r4, #4]
			tree_instance_data->tree_container.node_count < 1U ||
   99810:	681b      	ldr	r3, [r3, #0]
   99812:	b133      	cbz	r3, 99822 <mw_ui_tree_add_new+0x2e>
	{
		MW_ASSERT((bool)false, "Bad tree container");
		return (MW_INVALID_HANDLE);
	}

	if ((flags & MW_CONTROL_FLAG_LARGE_SIZE) == MW_CONTROL_FLAG_LARGE_SIZE)
   99814:	f015 0308 	ands.w	r3, r5, #8
   99818:	d00e      	beq.n	99838 <mw_ui_tree_add_new+0x44>
	{
		/* check for a sensible width */
		if (width < MW_UI_TREE_LARGE_MIN_WIDTH)
   9981a:	2a17      	cmp	r2, #23
   9981c:	dc2b      	bgt.n	99876 <mw_ui_tree_add_new+0x82>
		{
			return (MW_INVALID_HANDLE);
   9981e:	2000      	movs	r0, #0
   99820:	e007      	b.n	99832 <mw_ui_tree_add_new+0x3e>
		MW_ASSERT((bool)false, "Bad tree container");
   99822:	2000      	movs	r0, #0
   99824:	4b1c      	ldr	r3, [pc, #112]	; (99898 <mw_ui_tree_add_new+0xa4>)
   99826:	f240 2277 	movw	r2, #631	; 0x277
   9982a:	491c      	ldr	r1, [pc, #112]	; (9989c <mw_ui_tree_add_new+0xa8>)
   9982c:	4c1c      	ldr	r4, [pc, #112]	; (998a0 <mw_ui_tree_add_new+0xac>)
   9982e:	47a0      	blx	r4
		return (MW_INVALID_HANDLE);
   99830:	2000      	movs	r0, #0
			parent_handle,
			tree_paint_function,
			tree_message_function,
			flags,
			tree_instance_data));
}
   99832:	b004      	add	sp, #16
   99834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (width < MW_UI_TREE_MIN_WIDTH)
   99838:	2a0b      	cmp	r2, #11
   9983a:	dc01      	bgt.n	99840 <mw_ui_tree_add_new+0x4c>
			return (MW_INVALID_HANDLE);
   9983c:	4618      	mov	r0, r3
   9983e:	e7f8      	b.n	99832 <mw_ui_tree_add_new+0x3e>
		mw_util_set_rect(&r,
   99840:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   99844:	af02      	add	r7, sp, #8
   99846:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   9984a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
   9984e:	f8cd e000 	str.w	lr, [sp]
   99852:	4613      	mov	r3, r2
   99854:	f8df 805c 	ldr.w	r8, [pc, #92]	; 998b4 <mw_ui_tree_add_new+0xc0>
   99858:	460a      	mov	r2, r1
   9985a:	4601      	mov	r1, r0
   9985c:	4638      	mov	r0, r7
   9985e:	47c0      	blx	r8
	return (mw_add_control(&r,
   99860:	9401      	str	r4, [sp, #4]
   99862:	9500      	str	r5, [sp, #0]
   99864:	4631      	mov	r1, r6
   99866:	4638      	mov	r0, r7
   99868:	4b0e      	ldr	r3, [pc, #56]	; (998a4 <mw_ui_tree_add_new+0xb0>)
   9986a:	4a0f      	ldr	r2, [pc, #60]	; (998a8 <mw_ui_tree_add_new+0xb4>)
   9986c:	4c0f      	ldr	r4, [pc, #60]	; (998ac <mw_ui_tree_add_new+0xb8>)
   9986e:	47a0      	blx	r4
}
   99870:	b004      	add	sp, #16
   99872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mw_util_set_rect(&r,
   99876:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   9987a:	af02      	add	r7, sp, #8
   9987c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   99880:	eb03 034e 	add.w	r3, r3, lr, lsl #1
   99884:	e7e1      	b.n	9984a <mw_ui_tree_add_new+0x56>
		MW_ASSERT((bool)false, "Null pointer argument");
   99886:	4620      	mov	r0, r4
   99888:	4b09      	ldr	r3, [pc, #36]	; (998b0 <mw_ui_tree_add_new+0xbc>)
   9988a:	f240 226f 	movw	r2, #623	; 0x26f
   9988e:	4903      	ldr	r1, [pc, #12]	; (9989c <mw_ui_tree_add_new+0xa8>)
   99890:	4d03      	ldr	r5, [pc, #12]	; (998a0 <mw_ui_tree_add_new+0xac>)
   99892:	47a8      	blx	r5
		return (MW_INVALID_HANDLE);
   99894:	4620      	mov	r0, r4
   99896:	e7cc      	b.n	99832 <mw_ui_tree_add_new+0x3e>
   99898:	000ac154 	.word	0x000ac154
   9989c:	000ac140 	.word	0x000ac140
   998a0:	00095add 	.word	0x00095add
   998a4:	00098e21 	.word	0x00098e21
   998a8:	00099229 	.word	0x00099229
   998ac:	000909c5 	.word	0x000909c5
   998b0:	000a6618 	.word	0x000a6618
   998b4:	00096e3d 	.word	0x00096e3d

000998b8 <update_real_time>:
void update_real_time(void)
{
	uint8_t days_in_month;
	
	/* update internal clock value */
	mw_time_now.tm_sec++;
   998b8:	4a23      	ldr	r2, [pc, #140]	; (99948 <update_real_time+0x90>)
   998ba:	7813      	ldrb	r3, [r2, #0]
   998bc:	3301      	adds	r3, #1
   998be:	b2db      	uxtb	r3, r3
	if (mw_time_now.tm_sec == 60U)
   998c0:	2b3c      	cmp	r3, #60	; 0x3c
   998c2:	d001      	beq.n	998c8 <update_real_time+0x10>
	mw_time_now.tm_sec++;
   998c4:	7013      	strb	r3, [r2, #0]
   998c6:	4770      	bx	lr
	{
		mw_time_now.tm_sec = 0U;
   998c8:	2100      	movs	r1, #0
		mw_time_now.tm_min ++;
   998ca:	7853      	ldrb	r3, [r2, #1]
		mw_time_now.tm_sec = 0U;
   998cc:	7011      	strb	r1, [r2, #0]
		mw_time_now.tm_min ++;
   998ce:	3301      	adds	r3, #1
   998d0:	b2db      	uxtb	r3, r3
		if (mw_time_now.tm_min == 60U)
   998d2:	2b3c      	cmp	r3, #60	; 0x3c
   998d4:	d001      	beq.n	998da <update_real_time+0x22>
		mw_time_now.tm_min ++;
   998d6:	7053      	strb	r3, [r2, #1]
   998d8:	4770      	bx	lr
		{
			mw_time_now.tm_min = 0U;
			mw_time_now.tm_hour++;
   998da:	7893      	ldrb	r3, [r2, #2]
			mw_time_now.tm_min = 0U;
   998dc:	7051      	strb	r1, [r2, #1]
			mw_time_now.tm_hour++;
   998de:	3301      	adds	r3, #1
   998e0:	b2db      	uxtb	r3, r3
			if (mw_time_now.tm_hour == 24U)
   998e2:	2b18      	cmp	r3, #24
   998e4:	d001      	beq.n	998ea <update_real_time+0x32>
			mw_time_now.tm_hour++;
   998e6:	7093      	strb	r3, [r2, #2]
   998e8:	4770      	bx	lr
{
   998ea:	b530      	push	{r4, r5, lr}
			{
				mw_time_now.tm_hour = 0U;
				mw_time_now.tm_mday++;
   998ec:	78d3      	ldrb	r3, [r2, #3]
				days_in_month = days_in_months[mw_time_now.tm_mon];
   998ee:	7910      	ldrb	r0, [r2, #4]
				mw_time_now.tm_mday++;
   998f0:	3301      	adds	r3, #1
				days_in_month = days_in_months[mw_time_now.tm_mon];
   998f2:	4c16      	ldr	r4, [pc, #88]	; (9994c <update_real_time+0x94>)
				mw_time_now.tm_mday++;
   998f4:	b2db      	uxtb	r3, r3
				if (mw_time_now.tm_mon == 2U)
   998f6:	2802      	cmp	r0, #2
				mw_time_now.tm_hour = 0U;
   998f8:	7091      	strb	r1, [r2, #2]
				mw_time_now.tm_mday++;
   998fa:	70d3      	strb	r3, [r2, #3]
				days_in_month = days_in_months[mw_time_now.tm_mon];
   998fc:	5c21      	ldrb	r1, [r4, r0]
				if (mw_time_now.tm_mon == 2U)
   998fe:	d00c      	beq.n	9991a <update_real_time+0x62>
					if (mw_time_now.tm_year % 4U == 0U && mw_time_now.tm_year % 100U != 0U)
					{
						days_in_month++;
					}
				}
				if (mw_time_now.tm_mday > days_in_month)
   99900:	428b      	cmp	r3, r1
   99902:	d91f      	bls.n	99944 <update_real_time+0x8c>
				{
					mw_time_now.tm_mday = 1U;
   99904:	2101      	movs	r1, #1
					mw_time_now.tm_mon++;
   99906:	4408      	add	r0, r1
   99908:	b2c0      	uxtb	r0, r0
					if (mw_time_now.tm_mon > 12U)
   9990a:	280c      	cmp	r0, #12
					mw_time_now.tm_mday = 1U;
   9990c:	70d1      	strb	r1, [r2, #3]
					if (mw_time_now.tm_mon > 12U)
   9990e:	d917      	bls.n	99940 <update_real_time+0x88>
					{
						mw_time_now.tm_mon = 1U;
						mw_time_now.tm_year++;
   99910:	88d3      	ldrh	r3, [r2, #6]
						mw_time_now.tm_mon = 1U;
   99912:	7111      	strb	r1, [r2, #4]
						mw_time_now.tm_year++;
   99914:	3301      	adds	r3, #1
   99916:	80d3      	strh	r3, [r2, #6]
					}
				}
			}
		}
	}
}
   99918:	bd30      	pop	{r4, r5, pc}
					if (mw_time_now.tm_year % 4U == 0U && mw_time_now.tm_year % 100U != 0U)
   9991a:	88d4      	ldrh	r4, [r2, #6]
   9991c:	07a0      	lsls	r0, r4, #30
   9991e:	d10a      	bne.n	99936 <update_real_time+0x7e>
   99920:	2564      	movs	r5, #100	; 0x64
   99922:	480b      	ldr	r0, [pc, #44]	; (99950 <update_real_time+0x98>)
   99924:	fba0 e004 	umull	lr, r0, r0, r4
   99928:	0940      	lsrs	r0, r0, #5
   9992a:	fb05 4010 	mls	r0, r5, r0, r4
   9992e:	b280      	uxth	r0, r0
   99930:	b108      	cbz	r0, 99936 <update_real_time+0x7e>
						days_in_month++;
   99932:	3101      	adds	r1, #1
   99934:	b2c9      	uxtb	r1, r1
				if (mw_time_now.tm_mday > days_in_month)
   99936:	428b      	cmp	r3, r1
   99938:	d904      	bls.n	99944 <update_real_time+0x8c>
					mw_time_now.tm_mday = 1U;
   9993a:	2301      	movs	r3, #1
					mw_time_now.tm_mon++;
   9993c:	2003      	movs	r0, #3
					mw_time_now.tm_mday = 1U;
   9993e:	70d3      	strb	r3, [r2, #3]
					mw_time_now.tm_mon++;
   99940:	7110      	strb	r0, [r2, #4]
   99942:	bd30      	pop	{r4, r5, pc}
   99944:	bd30      	pop	{r4, r5, pc}
   99946:	bf00      	nop
   99948:	20072c24 	.word	0x20072c24
   9994c:	000ac1a0 	.word	0x000ac1a0
   99950:	51eb851f 	.word	0x51eb851f

00099954 <app_init>:
/***********************
*** GLOBAL FUNCTIONS ***
***********************/

void app_init(void)
{	
   99954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   99958:	2501      	movs	r5, #1
   9995a:	b081      	sub	sp, #4
	/* initialize all modules */
	sysclk_init();
   9995c:	4b33      	ldr	r3, [pc, #204]	; (99a2c <app_init+0xd8>)
   9995e:	4e34      	ldr	r6, [pc, #208]	; (99a30 <app_init+0xdc>)
   99960:	4798      	blx	r3
	board_init();
   99962:	4b34      	ldr	r3, [pc, #208]	; (99a34 <app_init+0xe0>)
   99964:	4798      	blx	r3
	uhc_start();
   99966:	4b34      	ldr	r3, [pc, #208]	; (99a38 <app_init+0xe4>)
   99968:	4798      	blx	r3
   9996a:	6175      	str	r5, [r6, #20]
	/* initialise LED pin */
	/* this is done in board_init() in init.c */
	
	/* configure touch recal request pin */
	ioport_set_pin_dir(TOUCH_RECAL_PIN, IOPORT_DIR_INPUT);
	(void)gpio_configure_pin(TOUCH_RECAL_PIN, PIO_PULLUP);
   9996c:	4629      	mov	r1, r5
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   9996e:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
   99972:	4b32      	ldr	r3, [pc, #200]	; (99a3c <app_init+0xe8>)
   99974:	2060      	movs	r0, #96	; 0x60
   99976:	4798      	blx	r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   99978:	2702      	movs	r7, #2
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   9997a:	2204      	movs	r2, #4
   9997c:	2308      	movs	r3, #8
	
	/* initialise LCD CS/ pin */
	/* this is done in board_init() in init.c controlled by enabling #define CONF_BOARD_SPI0_NPCS1 in conf_board.h */
	
	/* initialise SPI_LCD_TOUCH_BASE device */
	spi_enable_clock(SPI_LCD_TOUCH_BASE);
   9997e:	4c30      	ldr	r4, [pc, #192]	; (99a40 <app_init+0xec>)
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   99980:	6177      	str	r7, [r6, #20]
   99982:	4620      	mov	r0, r4
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   99984:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
   99988:	492e      	ldr	r1, [pc, #184]	; (99a44 <app_init+0xf0>)
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   9998a:	6132      	str	r2, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   9998c:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   99990:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   99992:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   99996:	4788      	blx	r1
	p_spi->SPI_CR = SPI_CR_SWRST;
   99998:	2380      	movs	r3, #128	; 0x80
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   9999a:	6027      	str	r7, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
   9999c:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR &= (~SPI_MR_PS);
   9999e:	6863      	ldr	r3, [r4, #4]
	spi_set_fixed_peripheral_select(SPI_LCD_TOUCH_BASE);
	spi_set_master_mode(SPI_LCD_TOUCH_BASE);
	spi_disable_mode_fault_detect(SPI_LCD_TOUCH_BASE);
	
	/* configure SPI when touch CS/ is active */
	spi_set_clock_polarity(SPI_LCD_TOUCH_BASE, SPI_TOUCH_CHIP_SEL, SPI_TOUCH_CLK_POLARITY);
   999a0:	4629      	mov	r1, r5
   999a2:	f023 0302 	bic.w	r3, r3, #2
   999a6:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   999a8:	6863      	ldr	r3, [r4, #4]
   999aa:	4620      	mov	r0, r4
   999ac:	432b      	orrs	r3, r5
   999ae:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   999b0:	6863      	ldr	r3, [r4, #4]
   999b2:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 99a54 <app_init+0x100>
   999b6:	f043 0310 	orr.w	r3, r3, #16
   999ba:	6063      	str	r3, [r4, #4]
   999bc:	2200      	movs	r2, #0
   999be:	47d8      	blx	fp
	spi_set_clock_phase(SPI_LCD_TOUCH_BASE, SPI_TOUCH_CHIP_SEL, SPI_TOUCH_CLK_PHASE);
   999c0:	f8df a094 	ldr.w	sl, [pc, #148]	; 99a58 <app_init+0x104>
   999c4:	462a      	mov	r2, r5
   999c6:	4629      	mov	r1, r5
   999c8:	4620      	mov	r0, r4
   999ca:	47d0      	blx	sl
	spi_set_bits_per_transfer(SPI_LCD_TOUCH_BASE, SPI_TOUCH_CHIP_SEL, SPI_CSR_BITS_8_BIT);
   999cc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 99a5c <app_init+0x108>
   999d0:	4629      	mov	r1, r5
   999d2:	4620      	mov	r0, r4
   999d4:	2200      	movs	r2, #0
   999d6:	47c8      	blx	r9
	(void)spi_set_baudrate_div(SPI_LCD_TOUCH_BASE, SPI_TOUCH_CHIP_SEL, sysclk_get_peripheral_hz() / SPI_TOUCH_SPEED);
   999d8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 99a60 <app_init+0x10c>
   999dc:	4629      	mov	r1, r5
   999de:	4620      	mov	r0, r4
   999e0:	2254      	movs	r2, #84	; 0x54
   999e2:	47c0      	blx	r8
	spi_set_transfer_delay(SPI_LCD_TOUCH_BASE, SPI_TOUCH_CHIP_SEL, SPI_TOUCH_DLYBS, SPI_TOUCH_DLYBCT);
   999e4:	4e18      	ldr	r6, [pc, #96]	; (99a48 <app_init+0xf4>)
   999e6:	2310      	movs	r3, #16
   999e8:	4629      	mov	r1, r5
   999ea:	4620      	mov	r0, r4
   999ec:	2240      	movs	r2, #64	; 0x40
   999ee:	47b0      	blx	r6
	
	/* configure SPI when LCD CS/ is active */
	spi_set_clock_polarity(SPI_LCD_TOUCH_BASE, SPI_LCD_CHIP_SEL, SPI_LCD_CLK_POLARITY);
   999f0:	2200      	movs	r2, #0
   999f2:	4620      	mov	r0, r4
   999f4:	4611      	mov	r1, r2
   999f6:	47d8      	blx	fp
	spi_set_clock_phase(SPI_LCD_TOUCH_BASE, SPI_LCD_CHIP_SEL, SPI_LCD_CLK_PHASE);
   999f8:	462a      	mov	r2, r5
   999fa:	4620      	mov	r0, r4
   999fc:	2100      	movs	r1, #0
   999fe:	47d0      	blx	sl
	spi_set_bits_per_transfer(SPI_LCD_TOUCH_BASE, SPI_LCD_CHIP_SEL, SPI_CSR_BITS_8_BIT);
   99a00:	2200      	movs	r2, #0
   99a02:	4620      	mov	r0, r4
   99a04:	4611      	mov	r1, r2
   99a06:	47c8      	blx	r9
	(void)spi_set_baudrate_div(SPI_LCD_TOUCH_BASE, SPI_LCD_CHIP_SEL, sysclk_get_peripheral_hz() / SPI_LCD_SPEED);
   99a08:	463a      	mov	r2, r7
   99a0a:	4620      	mov	r0, r4
   99a0c:	2100      	movs	r1, #0
   99a0e:	47c0      	blx	r8
	spi_set_transfer_delay(SPI_LCD_TOUCH_BASE, SPI_LCD_CHIP_SEL, SPI_LCD_DLYBS, SPI_LCD_DLYBCT);
   99a10:	2300      	movs	r3, #0
   99a12:	4620      	mov	r0, r4
   99a14:	461a      	mov	r2, r3
   99a16:	4619      	mov	r1, r3
   99a18:	47b0      	blx	r6
		
	spi_enable(SPI_LCD_TOUCH_BASE);
	
	f_mount(LUN_ID_USB, &fs);
   99a1a:	2000      	movs	r0, #0
   99a1c:	490b      	ldr	r1, [pc, #44]	; (99a4c <app_init+0xf8>)
   99a1e:	4b0c      	ldr	r3, [pc, #48]	; (99a50 <app_init+0xfc>)
	p_spi->SPI_CR = SPI_CR_SPIEN;
   99a20:	6025      	str	r5, [r4, #0]
}
   99a22:	b001      	add	sp, #4
   99a24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	f_mount(LUN_ID_USB, &fs);
   99a28:	4718      	bx	r3
   99a2a:	bf00      	nop
   99a2c:	00099e3d 	.word	0x00099e3d
   99a30:	400e1400 	.word	0x400e1400
   99a34:	0009b739 	.word	0x0009b739
   99a38:	0009b711 	.word	0x0009b711
   99a3c:	0009b8b5 	.word	0x0009b8b5
   99a40:	40008000 	.word	0x40008000
   99a44:	0009be85 	.word	0x0009be85
   99a48:	0009bf19 	.word	0x0009bf19
   99a4c:	200729f4 	.word	0x200729f4
   99a50:	000a1f41 	.word	0x000a1f41
   99a54:	0009beb5 	.word	0x0009beb5
   99a58:	0009becd 	.word	0x0009becd
   99a5c:	0009bee5 	.word	0x0009bee5
   99a60:	0009bef9 	.word	0x0009bef9

00099a64 <app_main_loop_process>:
void main_usb_connection_event(uhc_device_t * dev, bool b_present)
{
}

void app_main_loop_process(void)
{
   99a64:	4770      	bx	lr
   99a66:	bf00      	nop

00099a68 <spi_transfer>:
}

void spi_transfer(const uint8_t *tx_buf, uint8_t *rx_buf, size_t size)
{
   99a68:	b4f0      	push	{r4, r5, r6, r7}
	size_t i;

	size--;
	for (i = (size_t)0; i < size; i++)
   99a6a:	1e57      	subs	r7, r2, #1
   99a6c:	d00f      	beq.n	99a8e <spi_transfer+0x26>
   99a6e:	1e96      	subs	r6, r2, #2
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   99a70:	4a0e      	ldr	r2, [pc, #56]	; (99aac <spi_transfer+0x44>)
   99a72:	4406      	add	r6, r0
   99a74:	1e44      	subs	r4, r0, #1
   99a76:	1e4d      	subs	r5, r1, #1
   99a78:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   99a7c:	60d3      	str	r3, [r2, #12]
	return p_spi->SPI_SR;
   99a7e:	6913      	ldr	r3, [r2, #16]
	{
		spi_put(SPI_LCD_TOUCH_BASE, (uint16_t)tx_buf[i]);
		while ((spi_read_status(SPI_LCD_TOUCH_BASE) & SPI_SR_RDRF) == 0U)
   99a80:	07db      	lsls	r3, r3, #31
   99a82:	d5fc      	bpl.n	99a7e <spi_transfer+0x16>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   99a84:	6893      	ldr	r3, [r2, #8]
	for (i = (size_t)0; i < size; i++)
   99a86:	42b4      	cmp	r4, r6
		{
		}
		rx_buf[i] = (uint8_t)spi_get(SPI_LCD_TOUCH_BASE);
   99a88:	f805 3f01 	strb.w	r3, [r5, #1]!
	for (i = (size_t)0; i < size; i++)
   99a8c:	d1f4      	bne.n	99a78 <spi_transfer+0x10>
	p_spi->SPI_CR = SPI_CR_LASTXFER;
   99a8e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
   99a92:	4b06      	ldr	r3, [pc, #24]	; (99aac <spi_transfer+0x44>)
	return p_spi->SPI_SR;
   99a94:	461a      	mov	r2, r3
	p_spi->SPI_CR = SPI_CR_LASTXFER;
   99a96:	601c      	str	r4, [r3, #0]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   99a98:	5dc0      	ldrb	r0, [r0, r7]
   99a9a:	60d8      	str	r0, [r3, #12]
	return p_spi->SPI_SR;
   99a9c:	6913      	ldr	r3, [r2, #16]
	}
	
	spi_set_lastxfer(SPI_LCD_TOUCH_BASE);

	spi_put(SPI_LCD_TOUCH_BASE, (uint16_t)tx_buf[i]);
	while ((spi_read_status(SPI_LCD_TOUCH_BASE) & SPI_SR_RDRF) == 0U)
   99a9e:	07db      	lsls	r3, r3, #31
   99aa0:	d5fc      	bpl.n	99a9c <spi_transfer+0x34>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   99aa2:	6893      	ldr	r3, [r2, #8]
	{
	}
	rx_buf[i] = (uint8_t)spi_get(SPI_LCD_TOUCH_BASE);
   99aa4:	55cb      	strb	r3, [r1, r7]
}
   99aa6:	bcf0      	pop	{r4, r5, r6, r7}
   99aa8:	4770      	bx	lr
   99aaa:	bf00      	nop
   99aac:	40008000 	.word	0x40008000

00099ab0 <spi_send>:

void spi_send(const uint8_t *tx_buf, size_t size)
{
   99ab0:	b430      	push	{r4, r5}
	size_t i;

	size--;
	for (i = (size_t)0; i < size; i++)
   99ab2:	1e4d      	subs	r5, r1, #1
   99ab4:	d00c      	beq.n	99ad0 <spi_send+0x20>
   99ab6:	3902      	subs	r1, #2
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   99ab8:	4a0c      	ldr	r2, [pc, #48]	; (99aec <spi_send+0x3c>)
   99aba:	1844      	adds	r4, r0, r1
   99abc:	1e41      	subs	r1, r0, #1
   99abe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   99ac2:	60d3      	str	r3, [r2, #12]
	return p_spi->SPI_SR;
   99ac4:	6913      	ldr	r3, [r2, #16]
	{
		spi_put(SPI_LCD_TOUCH_BASE, (uint16_t)tx_buf[i]);
		while ((spi_read_status(SPI_LCD_TOUCH_BASE) & SPI_SR_RDRF) == 0U)
   99ac6:	07db      	lsls	r3, r3, #31
   99ac8:	d5fc      	bpl.n	99ac4 <spi_send+0x14>
	for (i = (size_t)0; i < size; i++)
   99aca:	42a1      	cmp	r1, r4
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   99acc:	6893      	ldr	r3, [r2, #8]
   99ace:	d1f6      	bne.n	99abe <spi_send+0xe>
	p_spi->SPI_CR = SPI_CR_LASTXFER;
   99ad0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   99ad4:	4b05      	ldr	r3, [pc, #20]	; (99aec <spi_send+0x3c>)
	return p_spi->SPI_SR;
   99ad6:	461a      	mov	r2, r3
	p_spi->SPI_CR = SPI_CR_LASTXFER;
   99ad8:	6019      	str	r1, [r3, #0]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   99ada:	5d41      	ldrb	r1, [r0, r5]
   99adc:	60d9      	str	r1, [r3, #12]
	return p_spi->SPI_SR;
   99ade:	6913      	ldr	r3, [r2, #16]
	}
	
	spi_set_lastxfer(SPI_LCD_TOUCH_BASE);

	spi_put(SPI_LCD_TOUCH_BASE, (uint16_t)tx_buf[i]);
	while ((spi_read_status(SPI_LCD_TOUCH_BASE) & SPI_SR_RDRF) == 0U)
   99ae0:	07db      	lsls	r3, r3, #31
   99ae2:	d5fc      	bpl.n	99ade <spi_send+0x2e>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   99ae4:	6893      	ldr	r3, [r2, #8]
	{
	}
	(void)spi_get(SPI_LCD_TOUCH_BASE);
}
   99ae6:	bc30      	pop	{r4, r5}
   99ae8:	4770      	bx	lr
   99aea:	bf00      	nop
   99aec:	40008000 	.word	0x40008000

00099af0 <app_file_open>:

bool app_file_open(char *path_and_filename)
{
   99af0:	b508      	push	{r3, lr}
	bool result = false;

	if (f_open(&file_handle, path_and_filename, FA_READ) == FR_OK)
   99af2:	4601      	mov	r1, r0
   99af4:	2201      	movs	r2, #1
   99af6:	4b03      	ldr	r3, [pc, #12]	; (99b04 <app_file_open+0x14>)
   99af8:	4803      	ldr	r0, [pc, #12]	; (99b08 <app_file_open+0x18>)
   99afa:	4798      	blx	r3
	{
		result = true;
	}

	return (result);
}
   99afc:	fab0 f080 	clz	r0, r0
   99b00:	0940      	lsrs	r0, r0, #5
   99b02:	bd08      	pop	{r3, pc}
   99b04:	000a1f61 	.word	0x000a1f61
   99b08:	200727d0 	.word	0x200727d0

00099b0c <app_file_create>:

bool app_file_create(char *path_and_filename)
{
   99b0c:	b508      	push	{r3, lr}
	bool result = false;

	if (f_open(&file_handle, path_and_filename, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
   99b0e:	4601      	mov	r1, r0
   99b10:	220a      	movs	r2, #10
   99b12:	4b03      	ldr	r3, [pc, #12]	; (99b20 <app_file_create+0x14>)
   99b14:	4803      	ldr	r0, [pc, #12]	; (99b24 <app_file_create+0x18>)
   99b16:	4798      	blx	r3
	{
		result = true;
	}

	return (result);
}
   99b18:	fab0 f080 	clz	r0, r0
   99b1c:	0940      	lsrs	r0, r0, #5
   99b1e:	bd08      	pop	{r3, pc}
   99b20:	000a1f61 	.word	0x000a1f61
   99b24:	200727d0 	.word	0x200727d0

00099b28 <app_file_size>:

uint32_t app_file_size(void)
{
	return ((uint32_t)f_size(&file_handle));
   99b28:	4b01      	ldr	r3, [pc, #4]	; (99b30 <app_file_size+0x8>)
}
   99b2a:	68d8      	ldr	r0, [r3, #12]
   99b2c:	4770      	bx	lr
   99b2e:	bf00      	nop
   99b30:	200727d0 	.word	0x200727d0

00099b34 <app_file_getc>:

uint8_t app_file_getc(void)
{
   99b34:	b510      	push	{r4, lr}
   99b36:	b082      	sub	sp, #8
	uint8_t byte;
	UINT bytes_read;

	(void)f_read(&file_handle, &byte, 1, &bytes_read);
   99b38:	ab01      	add	r3, sp, #4
   99b3a:	2201      	movs	r2, #1
   99b3c:	f10d 0103 	add.w	r1, sp, #3
   99b40:	4c03      	ldr	r4, [pc, #12]	; (99b50 <app_file_getc+0x1c>)
   99b42:	4804      	ldr	r0, [pc, #16]	; (99b54 <app_file_getc+0x20>)
   99b44:	47a0      	blx	r4

	return (byte);
}
   99b46:	f89d 0003 	ldrb.w	r0, [sp, #3]
   99b4a:	b002      	add	sp, #8
   99b4c:	bd10      	pop	{r4, pc}
   99b4e:	bf00      	nop
   99b50:	000a24fd 	.word	0x000a24fd
   99b54:	200727d0 	.word	0x200727d0

00099b58 <app_file_read>:

void app_file_read(uint8_t *buffer, uint32_t count)
{
   99b58:	b510      	push	{r4, lr}
   99b5a:	b082      	sub	sp, #8
	UINT bytes_read;

	(void)f_read(&file_handle, buffer, count, &bytes_read);
   99b5c:	460a      	mov	r2, r1
   99b5e:	ab01      	add	r3, sp, #4
   99b60:	4601      	mov	r1, r0
   99b62:	4c02      	ldr	r4, [pc, #8]	; (99b6c <app_file_read+0x14>)
   99b64:	4802      	ldr	r0, [pc, #8]	; (99b70 <app_file_read+0x18>)
   99b66:	47a0      	blx	r4
}
   99b68:	b002      	add	sp, #8
   99b6a:	bd10      	pop	{r4, pc}
   99b6c:	000a24fd 	.word	0x000a24fd
   99b70:	200727d0 	.word	0x200727d0

00099b74 <app_file_write>:

void app_file_write(uint8_t *buffer, uint32_t count)
{
   99b74:	b510      	push	{r4, lr}
   99b76:	b082      	sub	sp, #8
	UINT bytes_written;

	(void)f_write(&file_handle, buffer, count, &bytes_written);
   99b78:	460a      	mov	r2, r1
   99b7a:	ab01      	add	r3, sp, #4
   99b7c:	4601      	mov	r1, r0
   99b7e:	4c02      	ldr	r4, [pc, #8]	; (99b88 <app_file_write+0x14>)
   99b80:	4802      	ldr	r0, [pc, #8]	; (99b8c <app_file_write+0x18>)
   99b82:	47a0      	blx	r4
}
   99b84:	b002      	add	sp, #8
   99b86:	bd10      	pop	{r4, pc}
   99b88:	000a2881 	.word	0x000a2881
   99b8c:	200727d0 	.word	0x200727d0

00099b90 <app_file_seek>:

uint32_t app_file_seek(uint32_t position)
{
   99b90:	b508      	push	{r3, lr}
	return ((uint32_t)(f_lseek(&file_handle, position)));
   99b92:	4601      	mov	r1, r0
   99b94:	4b01      	ldr	r3, [pc, #4]	; (99b9c <app_file_seek+0xc>)
   99b96:	4802      	ldr	r0, [pc, #8]	; (99ba0 <app_file_seek+0x10>)
   99b98:	4798      	blx	r3
}
   99b9a:	bd08      	pop	{r3, pc}
   99b9c:	000a2a29 	.word	0x000a2a29
   99ba0:	200727d0 	.word	0x200727d0

00099ba4 <app_file_close>:

void app_file_close(void)
{
	(void)f_close(&file_handle);
   99ba4:	4801      	ldr	r0, [pc, #4]	; (99bac <app_file_close+0x8>)
   99ba6:	4b02      	ldr	r3, [pc, #8]	; (99bb0 <app_file_close+0xc>)
   99ba8:	4718      	bx	r3
   99baa:	bf00      	nop
   99bac:	200727d0 	.word	0x200727d0
   99bb0:	000a28e9 	.word	0x000a28e9

00099bb4 <app_get_root_folder_path>:
char *app_get_root_folder_path(void)
{
	static char root_folder_path[] = {LUN_ID_USB + '0', ':', '/', '\0'};

	return (root_folder_path);
}
   99bb4:	4800      	ldr	r0, [pc, #0]	; (99bb8 <app_get_root_folder_path+0x4>)
   99bb6:	4770      	bx	lr
   99bb8:	20070244 	.word	0x20070244

00099bbc <app_populate_tree_from_file_system>:

void app_populate_tree_from_file_system(struct mw_tree_container_t *tree, mw_handle_t start_folder_handle)
{
   99bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   99bbe:	b0b3      	sub	sp, #204	; 0xcc
	FILINFO file_info;
	char path[MAX_FOLDER_AND_FILENAME_LENGTH];
	uint8_t node_flags;

	/* check pointer parameter */
	if (tree == NULL)
   99bc0:	2800      	cmp	r0, #0
   99bc2:	d038      	beq.n	99c36 <app_populate_tree_from_file_system+0x7a>
		MW_ASSERT((bool)false, "Null pointer");

		return;
	}

	mw_tree_container_get_node_path(tree, start_folder_handle, path, MAX_FOLDER_AND_FILENAME_LENGTH);
   99bc4:	2380      	movs	r3, #128	; 0x80
   99bc6:	aa12      	add	r2, sp, #72	; 0x48
   99bc8:	4c1f      	ldr	r4, [pc, #124]	; (99c48 <app_populate_tree_from_file_system+0x8c>)
   99bca:	460e      	mov	r6, r1
   99bcc:	4605      	mov	r5, r0
   99bce:	47a0      	blx	r4

	if (strlen(path) == (size_t)0)
   99bd0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   99bd4:	b90b      	cbnz	r3, 99bda <app_populate_tree_from_file_system+0x1e>
			file_info.fname,
			node_flags);
		}
		//(void)f_closedir(&folder);
	}
}
   99bd6:	b033      	add	sp, #204	; 0xcc
   99bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	path[strlen(path) - 1U] = '\0';
   99bda:	4b1c      	ldr	r3, [pc, #112]	; (99c4c <app_populate_tree_from_file_system+0x90>)
   99bdc:	a812      	add	r0, sp, #72	; 0x48
   99bde:	4798      	blx	r3
   99be0:	2400      	movs	r4, #0
   99be2:	ab32      	add	r3, sp, #200	; 0xc8
   99be4:	181a      	adds	r2, r3, r0
	result = f_opendir(&folder, path);
   99be6:	a912      	add	r1, sp, #72	; 0x48
   99be8:	a809      	add	r0, sp, #36	; 0x24
   99bea:	4b19      	ldr	r3, [pc, #100]	; (99c50 <app_populate_tree_from_file_system+0x94>)
	path[strlen(path) - 1U] = '\0';
   99bec:	f802 4c81 	strb.w	r4, [r2, #-129]
	result = f_opendir(&folder, path);
   99bf0:	4798      	blx	r3
	if (result == FR_OK)
   99bf2:	2800      	cmp	r0, #0
   99bf4:	d1ef      	bne.n	99bd6 <app_populate_tree_from_file_system+0x1a>
   99bf6:	4c17      	ldr	r4, [pc, #92]	; (99c54 <app_populate_tree_from_file_system+0x98>)
			(void)mw_tree_container_add_node(tree,
   99bf8:	4f17      	ldr	r7, [pc, #92]	; (99c58 <app_populate_tree_from_file_system+0x9c>)
			result = f_readdir(&folder, &file_info);
   99bfa:	a901      	add	r1, sp, #4
   99bfc:	a809      	add	r0, sp, #36	; 0x24
   99bfe:	47a0      	blx	r4
			if (result != FR_OK || file_info.fname[0] == '\0')
   99c00:	2800      	cmp	r0, #0
   99c02:	d1e8      	bne.n	99bd6 <app_populate_tree_from_file_system+0x1a>
   99c04:	f89d 300d 	ldrb.w	r3, [sp, #13]
   99c08:	2b00      	cmp	r3, #0
   99c0a:	d0e4      	beq.n	99bd6 <app_populate_tree_from_file_system+0x1a>
			if ((file_info.fattrib & (BYTE)AM_HID) == AM_HID || (file_info.fattrib & (BYTE)AM_SYS) == AM_SYS)
   99c0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   99c10:	f013 0f06 	tst.w	r3, #6
   99c14:	d1f1      	bne.n	99bfa <app_populate_tree_from_file_system+0x3e>
				node_flags = MW_TREE_CONTAINER_NODE_IS_FOLDER;
   99c16:	f013 0f10 	tst.w	r3, #16
			(void)mw_tree_container_add_node(tree,
   99c1a:	bf14      	ite	ne
   99c1c:	2302      	movne	r3, #2
   99c1e:	2300      	moveq	r3, #0
   99c20:	4631      	mov	r1, r6
   99c22:	f10d 020d 	add.w	r2, sp, #13
   99c26:	4628      	mov	r0, r5
   99c28:	47b8      	blx	r7
			result = f_readdir(&folder, &file_info);
   99c2a:	a901      	add	r1, sp, #4
   99c2c:	a809      	add	r0, sp, #36	; 0x24
   99c2e:	47a0      	blx	r4
			if (result != FR_OK || file_info.fname[0] == '\0')
   99c30:	2800      	cmp	r0, #0
   99c32:	d0e7      	beq.n	99c04 <app_populate_tree_from_file_system+0x48>
   99c34:	e7cf      	b.n	99bd6 <app_populate_tree_from_file_system+0x1a>
		MW_ASSERT((bool)false, "Null pointer");
   99c36:	4b09      	ldr	r3, [pc, #36]	; (99c5c <app_populate_tree_from_file_system+0xa0>)
   99c38:	f44f 72a0 	mov.w	r2, #320	; 0x140
   99c3c:	4908      	ldr	r1, [pc, #32]	; (99c60 <app_populate_tree_from_file_system+0xa4>)
   99c3e:	4c09      	ldr	r4, [pc, #36]	; (99c64 <app_populate_tree_from_file_system+0xa8>)
   99c40:	47a0      	blx	r4
}
   99c42:	b033      	add	sp, #204	; 0xcc
   99c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   99c46:	bf00      	nop
   99c48:	00096c2d 	.word	0x00096c2d
   99c4c:	000a5e79 	.word	0x000a5e79
   99c50:	000a2bf5 	.word	0x000a2bf5
   99c54:	000a2f29 	.word	0x000a2f29
   99c58:	000961e5 	.word	0x000961e5
   99c5c:	000a64a0 	.word	0x000a64a0
   99c60:	000ac168 	.word	0x000ac168
   99c64:	00095add 	.word	0x00095add

00099c68 <find_folder_entries>:
	mw_ui_list_box_entry *list_box_settings_entries,
	bool folders_only,
	uint8_t max_entries,
	const uint8_t *file_entry_icon,
	const uint8_t *folder_entry_icon)
{
   99c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	DIR folder;
	FILINFO file_info;
	UINT i = 0U;

	/* check pointer parameter */
	if (path == NULL)
   99c6c:	4605      	mov	r5, r0
{
   99c6e:	b093      	sub	sp, #76	; 0x4c
	if (path == NULL)
   99c70:	2800      	cmp	r0, #0
   99c72:	d077      	beq.n	99d64 <find_folder_entries+0xfc>

		return (0U);
	}

	/* check path string not empty */
	if (strlen(path) == (size_t)0)
   99c74:	7804      	ldrb	r4, [r0, #0]
   99c76:	b91c      	cbnz	r4, 99c80 <find_folder_entries+0x18>

	/* replace terminating '/' */
	path[strlen(path)] = '/';

	return (i);
}
   99c78:	4620      	mov	r0, r4
   99c7a:	b013      	add	sp, #76	; 0x4c
   99c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	path[strlen(path) - 1U] = '\0';
   99c80:	f8df 9104 	ldr.w	r9, [pc, #260]	; 99d88 <find_folder_entries+0x120>
   99c84:	460e      	mov	r6, r1
   99c86:	4698      	mov	r8, r3
   99c88:	4617      	mov	r7, r2
   99c8a:	47c8      	blx	r9
   99c8c:	2400      	movs	r4, #0
   99c8e:	4428      	add	r0, r5
   99c90:	f800 4c01 	strb.w	r4, [r0, #-1]
	result = f_opendir(&folder, path);
   99c94:	4629      	mov	r1, r5
   99c96:	a809      	add	r0, sp, #36	; 0x24
   99c98:	4b36      	ldr	r3, [pc, #216]	; (99d74 <find_folder_entries+0x10c>)
   99c9a:	4798      	blx	r3
	if (result == FR_OK)
   99c9c:	bb58      	cbnz	r0, 99cf6 <find_folder_entries+0x8e>
   99c9e:	2f00      	cmp	r7, #0
   99ca0:	d037      	beq.n	99d12 <find_folder_entries+0xaa>
   99ca2:	4604      	mov	r4, r0
   99ca4:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 99d8c <find_folder_entries+0x124>
   99ca8:	af01      	add	r7, sp, #4
			result = f_readdir(&folder, &file_info);
   99caa:	4639      	mov	r1, r7
   99cac:	a809      	add	r0, sp, #36	; 0x24
   99cae:	47d0      	blx	sl
			if (result != FR_OK || file_info.fname[0] == '\0')
   99cb0:	bb48      	cbnz	r0, 99d06 <find_folder_entries+0x9e>
   99cb2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   99cb6:	b333      	cbz	r3, 99d06 <find_folder_entries+0x9e>
			if ((file_info.fattrib & (BYTE)AM_HID) == AM_HID || (file_info.fattrib & (BYTE)AM_SYS) == AM_SYS)
   99cb8:	f89d 200c 	ldrb.w	r2, [sp, #12]
   99cbc:	f012 0f06 	tst.w	r2, #6
   99cc0:	d1f3      	bne.n	99caa <find_folder_entries+0x42>
			if (folders_only && (file_info.fattrib & (BYTE)AM_DIR) == (BYTE)0)
   99cc2:	06d3      	lsls	r3, r2, #27
			(void)mw_util_safe_strcpy(list_box_settings_entries[i].label, MAX_FILENAME_LENGTH + 1U, file_info.fname);
   99cc4:	eb06 0bc4 	add.w	fp, r6, r4, lsl #3
			if (folders_only && (file_info.fattrib & (BYTE)AM_DIR) == (BYTE)0)
   99cc8:	d5ef      	bpl.n	99caa <find_folder_entries+0x42>
			(void)mw_util_safe_strcpy(list_box_settings_entries[i].label, MAX_FILENAME_LENGTH + 1U, file_info.fname);
   99cca:	f10d 020d 	add.w	r2, sp, #13
   99cce:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
   99cd2:	4b29      	ldr	r3, [pc, #164]	; (99d78 <find_folder_entries+0x110>)
   99cd4:	210d      	movs	r1, #13
   99cd6:	4798      	blx	r3
			if ((file_info.fattrib & (BYTE)AM_DIR) == (BYTE)AM_DIR)
   99cd8:	f89d 200c 	ldrb.w	r2, [sp, #12]
				list_box_settings_entries[i].icon = folder_entry_icon;
   99cdc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   99cde:	f012 0f10 	tst.w	r2, #16
   99ce2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   99ce4:	bf08      	it	eq
   99ce6:	461a      	moveq	r2, r3
			i++;
   99ce8:	3401      	adds	r4, #1
			if (i == max_entries)
   99cea:	4544      	cmp	r4, r8
   99cec:	f8cb 2004 	str.w	r2, [fp, #4]
   99cf0:	d1db      	bne.n	99caa <find_folder_entries+0x42>
   99cf2:	fa5f f488 	uxtb.w	r4, r8
	path[strlen(path)] = '/';
   99cf6:	4628      	mov	r0, r5
   99cf8:	47c8      	blx	r9
   99cfa:	232f      	movs	r3, #47	; 0x2f
   99cfc:	542b      	strb	r3, [r5, r0]
}
   99cfe:	4620      	mov	r0, r4
   99d00:	b013      	add	sp, #76	; 0x4c
   99d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	path[strlen(path)] = '/';
   99d06:	4628      	mov	r0, r5
   99d08:	47c8      	blx	r9
   99d0a:	232f      	movs	r3, #47	; 0x2f
   99d0c:	b2e4      	uxtb	r4, r4
   99d0e:	542b      	strb	r3, [r5, r0]
   99d10:	e7f5      	b.n	99cfe <find_folder_entries+0x96>
   99d12:	f8df a078 	ldr.w	sl, [pc, #120]	; 99d8c <find_folder_entries+0x124>
	if (result == FR_OK)
   99d16:	463c      	mov	r4, r7
   99d18:	af01      	add	r7, sp, #4
			result = f_readdir(&folder, &file_info);
   99d1a:	4639      	mov	r1, r7
   99d1c:	a809      	add	r0, sp, #36	; 0x24
   99d1e:	47d0      	blx	sl
			(void)mw_util_safe_strcpy(list_box_settings_entries[i].label, MAX_FILENAME_LENGTH + 1U, file_info.fname);
   99d20:	eb06 0bc4 	add.w	fp, r6, r4, lsl #3
			if (result != FR_OK || file_info.fname[0] == '\0')
   99d24:	2800      	cmp	r0, #0
   99d26:	d1ee      	bne.n	99d06 <find_folder_entries+0x9e>
   99d28:	f89d 200d 	ldrb.w	r2, [sp, #13]
   99d2c:	2a00      	cmp	r2, #0
   99d2e:	d0ea      	beq.n	99d06 <find_folder_entries+0x9e>
			if ((file_info.fattrib & (BYTE)AM_HID) == AM_HID || (file_info.fattrib & (BYTE)AM_SYS) == AM_SYS)
   99d30:	f89d 200c 	ldrb.w	r2, [sp, #12]
   99d34:	f012 0f06 	tst.w	r2, #6
   99d38:	d1ef      	bne.n	99d1a <find_folder_entries+0xb2>
			(void)mw_util_safe_strcpy(list_box_settings_entries[i].label, MAX_FILENAME_LENGTH + 1U, file_info.fname);
   99d3a:	f10d 020d 	add.w	r2, sp, #13
   99d3e:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
   99d42:	4b0d      	ldr	r3, [pc, #52]	; (99d78 <find_folder_entries+0x110>)
   99d44:	210d      	movs	r1, #13
   99d46:	4798      	blx	r3
			if ((file_info.fattrib & (BYTE)AM_DIR) == (BYTE)AM_DIR)
   99d48:	f89d 200c 	ldrb.w	r2, [sp, #12]
				list_box_settings_entries[i].icon = folder_entry_icon;
   99d4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   99d4e:	f012 0f10 	tst.w	r2, #16
   99d52:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   99d54:	bf08      	it	eq
   99d56:	461a      	moveq	r2, r3
			i++;
   99d58:	3401      	adds	r4, #1
			if (i == max_entries)
   99d5a:	4544      	cmp	r4, r8
   99d5c:	f8cb 2004 	str.w	r2, [fp, #4]
   99d60:	d1db      	bne.n	99d1a <find_folder_entries+0xb2>
   99d62:	e7c6      	b.n	99cf2 <find_folder_entries+0x8a>
		MW_ASSERT((bool)false, "Null pointer");
   99d64:	4b05      	ldr	r3, [pc, #20]	; (99d7c <find_folder_entries+0x114>)
   99d66:	f240 1281 	movw	r2, #385	; 0x181
   99d6a:	4905      	ldr	r1, [pc, #20]	; (99d80 <find_folder_entries+0x118>)
   99d6c:	4e05      	ldr	r6, [pc, #20]	; (99d84 <find_folder_entries+0x11c>)
		return (0U);
   99d6e:	4604      	mov	r4, r0
		MW_ASSERT((bool)false, "Null pointer");
   99d70:	47b0      	blx	r6
		return (0U);
   99d72:	e781      	b.n	99c78 <find_folder_entries+0x10>
   99d74:	000a2bf5 	.word	0x000a2bf5
   99d78:	00096f31 	.word	0x00096f31
   99d7c:	000a64a0 	.word	0x000a64a0
   99d80:	000ac18c 	.word	0x000ac18c
   99d84:	00095add 	.word	0x00095add
   99d88:	000a5e79 	.word	0x000a5e79
   99d8c:	000a2f29 	.word	0x000a2f29

00099d90 <app_get_time_date>:

mw_time_t app_get_time_date(void)
{
   99d90:	4602      	mov	r2, r0
	return mw_time_now;
   99d92:	4b03      	ldr	r3, [pc, #12]	; (99da0 <app_get_time_date+0x10>)
   99d94:	cb03      	ldmia	r3!, {r0, r1}
   99d96:	6010      	str	r0, [r2, #0]
   99d98:	6051      	str	r1, [r2, #4]
}
   99d9a:	4610      	mov	r0, r2
   99d9c:	4770      	bx	lr
   99d9e:	bf00      	nop
   99da0:	20072c24 	.word	0x20072c24

00099da4 <app_set_time_date>:

void app_set_time_date(mw_time_t new_time)
{
   99da4:	b530      	push	{r4, r5, lr}
	tc_stop(TC1, 0);
   99da6:	4d0a      	ldr	r5, [pc, #40]	; (99dd0 <app_set_time_date+0x2c>)
{
   99da8:	b083      	sub	sp, #12
   99daa:	e88d 0003 	stmia.w	sp, {r0, r1}
	tc_stop(TC1, 0);
   99dae:	4b09      	ldr	r3, [pc, #36]	; (99dd4 <app_set_time_date+0x30>)
   99db0:	4628      	mov	r0, r5
   99db2:	2100      	movs	r1, #0
   99db4:	4798      	blx	r3
	mw_time_now = new_time;
   99db6:	e89d 0003 	ldmia.w	sp, {r0, r1}
   99dba:	4b07      	ldr	r3, [pc, #28]	; (99dd8 <app_set_time_date+0x34>)
	tc_start(TC1, 0);
   99dbc:	4a07      	ldr	r2, [pc, #28]	; (99ddc <app_set_time_date+0x38>)
	mw_time_now = new_time;
   99dbe:	e883 0003 	stmia.w	r3, {r0, r1}
	tc_start(TC1, 0);
   99dc2:	4628      	mov	r0, r5
   99dc4:	2100      	movs	r1, #0
}
   99dc6:	b003      	add	sp, #12
   99dc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	tc_start(TC1, 0);
   99dcc:	4710      	bx	r2
   99dce:	bf00      	nop
   99dd0:	40084000 	.word	0x40084000
   99dd4:	0009bf55 	.word	0x0009bf55
   99dd8:	20072c24 	.word	0x20072c24
   99ddc:	0009bf4d 	.word	0x0009bf4d

00099de0 <get_fattime>:

DWORD get_fattime(void)
{
   99de0:	b410      	push	{r4}
	return mw_time_now;
   99de2:	4a0b      	ldr	r2, [pc, #44]	; (99e10 <get_fattime+0x30>)
	
	mw_time_t time_now;

	time_now = app_get_time_date();

	fattime = (time_now.tm_year - 1980U) << 25;
   99de4:	88d1      	ldrh	r1, [r2, #6]
	fattime |= time_now.tm_mon << 21;
   99de6:	7913      	ldrb	r3, [r2, #4]
	fattime = (time_now.tm_year - 1980U) << 25;
   99de8:	f2a1 71bc 	subw	r1, r1, #1980	; 0x7bc
	fattime |= time_now.tm_mday << 16;
	fattime |= time_now.tm_hour << 11;
	fattime |= time_now.tm_min << 5;
	fattime |= time_now.tm_sec / 2U;
   99dec:	7814      	ldrb	r4, [r2, #0]
	fattime |= time_now.tm_mon << 21;
   99dee:	055b      	lsls	r3, r3, #21
   99df0:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
	fattime |= time_now.tm_mday << 16;
   99df4:	78d0      	ldrb	r0, [r2, #3]
   99df6:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
	fattime |= time_now.tm_hour << 11;
   99dfa:	7891      	ldrb	r1, [r2, #2]
   99dfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
	fattime |= time_now.tm_min << 5;
   99e00:	7850      	ldrb	r0, [r2, #1]
   99e02:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11

	return ((DWORD)fattime);
}
   99e06:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   99e0a:	bc10      	pop	{r4}
   99e0c:	4770      	bx	lr
   99e0e:	bf00      	nop
   99e10:	20072c24 	.word	0x20072c24

00099e14 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   99e14:	b510      	push	{r4, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   99e16:	4b04      	ldr	r3, [pc, #16]	; (99e28 <sysclk_enable_usb+0x14>)
   99e18:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   99e1a:	4b04      	ldr	r3, [pc, #16]	; (99e2c <sysclk_enable_usb+0x18>)
   99e1c:	2000      	movs	r0, #0
   99e1e:	4798      	blx	r3
		pmc_enable_udpck();
		return;
	}
}
   99e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pmc_enable_udpck();
   99e24:	4b02      	ldr	r3, [pc, #8]	; (99e30 <sysclk_enable_usb+0x1c>)
   99e26:	4718      	bx	r3
   99e28:	0009bdb5 	.word	0x0009bdb5
   99e2c:	0009be0d 	.word	0x0009be0d
   99e30:	0009be21 	.word	0x0009be21

00099e34 <sysclk_disable_usb>:
 *
 * \note This implementation does not switch off the PLL, it just turns off the USB clock.
 */
void sysclk_disable_usb(void)
{
	pmc_disable_udpck();
   99e34:	4b00      	ldr	r3, [pc, #0]	; (99e38 <sysclk_disable_usb+0x4>)
   99e36:	4718      	bx	r3
   99e38:	0009be2d 	.word	0x0009be2d

00099e3c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   99e3c:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   99e3e:	480f      	ldr	r0, [pc, #60]	; (99e7c <sysclk_init+0x40>)
   99e40:	4d0f      	ldr	r5, [pc, #60]	; (99e80 <sysclk_init+0x44>)
   99e42:	47a8      	blx	r5
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   99e44:	213e      	movs	r1, #62	; 0x3e
   99e46:	2000      	movs	r0, #0
   99e48:	4b0e      	ldr	r3, [pc, #56]	; (99e84 <sysclk_init+0x48>)
   99e4a:	4798      	blx	r3
   99e4c:	4c0e      	ldr	r4, [pc, #56]	; (99e88 <sysclk_init+0x4c>)
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   99e4e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   99e50:	2800      	cmp	r0, #0
   99e52:	d0fc      	beq.n	99e4e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   99e54:	4b0d      	ldr	r3, [pc, #52]	; (99e8c <sysclk_init+0x50>)
   99e56:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   99e58:	4b0d      	ldr	r3, [pc, #52]	; (99e90 <sysclk_init+0x54>)
   99e5a:	4a0e      	ldr	r2, [pc, #56]	; (99e94 <sysclk_init+0x58>)
   99e5c:	4c0e      	ldr	r4, [pc, #56]	; (99e98 <sysclk_init+0x5c>)
   99e5e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   99e60:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   99e62:	2800      	cmp	r0, #0
   99e64:	d0fc      	beq.n	99e60 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   99e66:	4b0d      	ldr	r3, [pc, #52]	; (99e9c <sysclk_init+0x60>)
   99e68:	2010      	movs	r0, #16
   99e6a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   99e6c:	4b0c      	ldr	r3, [pc, #48]	; (99ea0 <sysclk_init+0x64>)
   99e6e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   99e70:	462b      	mov	r3, r5

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   99e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
   99e76:	4801      	ldr	r0, [pc, #4]	; (99e7c <sysclk_init+0x40>)
   99e78:	4718      	bx	r3
   99e7a:	bf00      	nop
   99e7c:	0501bd00 	.word	0x0501bd00
   99e80:	20070131 	.word	0x20070131
   99e84:	0009bd35 	.word	0x0009bd35
   99e88:	0009bd85 	.word	0x0009bd85
   99e8c:	0009bd95 	.word	0x0009bd95
   99e90:	400e0600 	.word	0x400e0600
   99e94:	200d3f01 	.word	0x200d3f01
   99e98:	0009bda5 	.word	0x0009bda5
   99e9c:	0009bcdd 	.word	0x0009bcdd
   99ea0:	0009f1d9 	.word	0x0009f1d9

00099ea4 <mem_test_unit_ready>:
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   99ea4:	4b00      	ldr	r3, [pc, #0]	; (99ea8 <mem_test_unit_ready+0x4>)
   99ea6:	4718      	bx	r3
   99ea8:	0009ac8d 	.word	0x0009ac8d

00099eac <mem_read_capacity>:
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   99eac:	4b00      	ldr	r3, [pc, #0]	; (99eb0 <mem_read_capacity+0x4>)
   99eae:	4718      	bx	r3
   99eb0:	0009acf1 	.word	0x0009acf1

00099eb4 <mem_sector_size>:
{
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
   99eb4:	4b00      	ldr	r3, [pc, #0]	; (99eb8 <mem_sector_size+0x4>)
   99eb6:	4718      	bx	r3
   99eb8:	0009ad39 	.word	0x0009ad39

00099ebc <mem_wr_protect>:
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
   99ebc:	4b00      	ldr	r3, [pc, #0]	; (99ec0 <mem_wr_protect+0x4>)
   99ebe:	4718      	bx	r3
   99ec0:	0009ad65 	.word	0x0009ad65

00099ec4 <memory_2_ram>:
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   99ec4:	4608      	mov	r0, r1
   99ec6:	4b01      	ldr	r3, [pc, #4]	; (99ecc <memory_2_ram+0x8>)
   99ec8:	4611      	mov	r1, r2
   99eca:	4718      	bx	r3
   99ecc:	0009ad99 	.word	0x0009ad99

00099ed0 <ram_2_memory>:
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   99ed0:	4608      	mov	r0, r1
   99ed2:	4b01      	ldr	r3, [pc, #4]	; (99ed8 <ram_2_memory+0x8>)
   99ed4:	4611      	mov	r1, r2
   99ed6:	4718      	bx	r3
   99ed8:	0009ae31 	.word	0x0009ae31

00099edc <uhi_msc_scsi_test_unit_ready_sense>:
	uint16_t sense_key = uhi_msc_sense.sense_flag_key;
	uint16_t add_sense = (uint16_t)uhi_msc_sense.AddSenseCode<<8
		| uhi_msc_sense.AddSnsCodeQlfr;

	// Decode data sense
	if ((uhi_msc_sense.valid_reponse_code
   99edc:	4a0f      	ldr	r2, [pc, #60]	; (99f1c <uhi_msc_scsi_test_unit_ready_sense+0x40>)
   99ede:	7813      	ldrb	r3, [r2, #0]
   99ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   99ee4:	2b70      	cmp	r3, #112	; 0x70
   99ee6:	d003      	beq.n	99ef0 <uhi_msc_scsi_test_unit_ready_sense+0x14>
		if ((sense_key == SCSI_SK_UNIT_ATTENTION)
				&& (add_sense == SCSI_ASC_NOT_READY_TO_READY_CHANGE)) {
			uhi_msc_lun_sel->status = LUN_BUSY;
		}
	}
	uhi_msc_scsi_callback(true);
   99ee8:	4b0d      	ldr	r3, [pc, #52]	; (99f20 <uhi_msc_scsi_test_unit_ready_sense+0x44>)
   99eea:	2001      	movs	r0, #1
   99eec:	681b      	ldr	r3, [r3, #0]
   99eee:	4718      	bx	r3
	uint16_t add_sense = (uint16_t)uhi_msc_sense.AddSenseCode<<8
   99ef0:	7b11      	ldrb	r1, [r2, #12]
		| uhi_msc_sense.AddSnsCodeQlfr;
   99ef2:	7b53      	ldrb	r3, [r2, #13]
	uint16_t sense_key = uhi_msc_sense.sense_flag_key;
   99ef4:	7892      	ldrb	r2, [r2, #2]
	uint16_t add_sense = (uint16_t)uhi_msc_sense.AddSenseCode<<8
   99ef6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if ((sense_key == SCSI_SK_NOT_READY)
   99efa:	2a02      	cmp	r2, #2
   99efc:	d009      	beq.n	99f12 <uhi_msc_scsi_test_unit_ready_sense+0x36>
		if ((sense_key == SCSI_SK_UNIT_ATTENTION)
   99efe:	2a06      	cmp	r2, #6
   99f00:	d1f2      	bne.n	99ee8 <uhi_msc_scsi_test_unit_ready_sense+0xc>
				&& (add_sense == SCSI_ASC_NOT_READY_TO_READY_CHANGE)) {
   99f02:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
   99f06:	d1ef      	bne.n	99ee8 <uhi_msc_scsi_test_unit_ready_sense+0xc>
			uhi_msc_lun_sel->status = LUN_BUSY;
   99f08:	2203      	movs	r2, #3
   99f0a:	4b06      	ldr	r3, [pc, #24]	; (99f24 <uhi_msc_scsi_test_unit_ready_sense+0x48>)
   99f0c:	681b      	ldr	r3, [r3, #0]
   99f0e:	725a      	strb	r2, [r3, #9]
   99f10:	e7ea      	b.n	99ee8 <uhi_msc_scsi_test_unit_ready_sense+0xc>
				&& (add_sense==SCSI_ASC_MEDIUM_NOT_PRESENT)) {
   99f12:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
   99f16:	d1e7      	bne.n	99ee8 <uhi_msc_scsi_test_unit_ready_sense+0xc>
   99f18:	e7f7      	b.n	99f0a <uhi_msc_scsi_test_unit_ready_sense+0x2e>
   99f1a:	bf00      	nop
   99f1c:	20072c88 	.word	0x20072c88
   99f20:	20072c7c 	.word	0x20072c7c
   99f24:	20072c78 	.word	0x20072c78

00099f28 <uhi_msc_scsi_read_capacity_sense>:
/**
 * \brief Decodes the scsi sense code after a scsi READ CAPACITY command failed
 */
static void uhi_msc_scsi_read_capacity_sense(void)
{
	uhi_msc_scsi_callback(false);
   99f28:	4b01      	ldr	r3, [pc, #4]	; (99f30 <uhi_msc_scsi_read_capacity_sense+0x8>)
   99f2a:	2000      	movs	r0, #0
   99f2c:	681b      	ldr	r3, [r3, #0]
   99f2e:	4718      	bx	r3
   99f30:	20072c7c 	.word	0x20072c7c

00099f34 <uhi_msc_cbw_rst_stall>:
		uint16_t payload_trans)
{
	UNUSED(add);
	UNUSED(status);
	UNUSED(payload_trans);
	uhi_msc_scsi_sub_callback(false);
   99f34:	4b01      	ldr	r3, [pc, #4]	; (99f3c <uhi_msc_cbw_rst_stall+0x8>)
   99f36:	2000      	movs	r0, #0
   99f38:	681b      	ldr	r3, [r3, #0]
   99f3a:	4718      	bx	r3
   99f3c:	20072c84 	.word	0x20072c84

00099f40 <uhi_msc_scsi_mode_sense6_done>:
	if ((!b_cbw_succes) || (uhi_msc_csw.bCSWStatus != USB_CSW_STATUS_PASS)
   99f40:	b128      	cbz	r0, 99f4e <uhi_msc_scsi_mode_sense6_done+0xe>
   99f42:	4b0c      	ldr	r3, [pc, #48]	; (99f74 <uhi_msc_scsi_mode_sense6_done+0x34>)
   99f44:	7b1a      	ldrb	r2, [r3, #12]
   99f46:	b912      	cbnz	r2, 99f4e <uhi_msc_scsi_mode_sense6_done+0xe>
			|| (uhi_msc_csw.dCSWDataResidue < 4)) {
   99f48:	689b      	ldr	r3, [r3, #8]
   99f4a:	2b03      	cmp	r3, #3
   99f4c:	d807      	bhi.n	99f5e <uhi_msc_scsi_mode_sense6_done+0x1e>
		uhi_msc_lun_sel->b_write_protected = false;
   99f4e:	2100      	movs	r1, #0
   99f50:	4a09      	ldr	r2, [pc, #36]	; (99f78 <uhi_msc_scsi_mode_sense6_done+0x38>)
		uhi_msc_scsi_callback(true);
   99f52:	4b0a      	ldr	r3, [pc, #40]	; (99f7c <uhi_msc_scsi_mode_sense6_done+0x3c>)
		uhi_msc_lun_sel->b_write_protected = false;
   99f54:	6812      	ldr	r2, [r2, #0]
		uhi_msc_scsi_callback(true);
   99f56:	681b      	ldr	r3, [r3, #0]
		uhi_msc_lun_sel->b_write_protected = false;
   99f58:	7211      	strb	r1, [r2, #8]
		uhi_msc_scsi_callback(true);
   99f5a:	2001      	movs	r0, #1
   99f5c:	4718      	bx	r3
			(uhi_msc_sense6.header.device_specific_parameter
   99f5e:	4b08      	ldr	r3, [pc, #32]	; (99f80 <uhi_msc_scsi_mode_sense6_done+0x40>)
	uhi_msc_lun_sel->b_write_protected =
   99f60:	4a05      	ldr	r2, [pc, #20]	; (99f78 <uhi_msc_scsi_mode_sense6_done+0x38>)
			& SCSI_MS_SBC_WP);
   99f62:	789b      	ldrb	r3, [r3, #2]
	uhi_msc_lun_sel->b_write_protected =
   99f64:	6811      	ldr	r1, [r2, #0]
	uhi_msc_scsi_callback(true);
   99f66:	4a05      	ldr	r2, [pc, #20]	; (99f7c <uhi_msc_scsi_mode_sense6_done+0x3c>)
			& SCSI_MS_SBC_WP);
   99f68:	09db      	lsrs	r3, r3, #7
	uhi_msc_lun_sel->b_write_protected =
   99f6a:	720b      	strb	r3, [r1, #8]
	uhi_msc_scsi_callback(true);
   99f6c:	2001      	movs	r0, #1
   99f6e:	6813      	ldr	r3, [r2, #0]
   99f70:	4718      	bx	r3
   99f72:	bf00      	nop
   99f74:	20072c34 	.word	0x20072c34
   99f78:	20072c78 	.word	0x20072c78
   99f7c:	20072c7c 	.word	0x20072c7c
   99f80:	20072c9c 	.word	0x20072c9c

00099f84 <uhi_msc_scsi_write_10_done>:
	if ((!b_cbw_succes) || (uhi_msc_csw.bCSWStatus != USB_CSW_STATUS_PASS)
   99f84:	b120      	cbz	r0, 99f90 <uhi_msc_scsi_write_10_done+0xc>
   99f86:	4b08      	ldr	r3, [pc, #32]	; (99fa8 <uhi_msc_scsi_write_10_done+0x24>)
   99f88:	7b1a      	ldrb	r2, [r3, #12]
   99f8a:	b90a      	cbnz	r2, 99f90 <uhi_msc_scsi_write_10_done+0xc>
			|| uhi_msc_csw.dCSWDataResidue) {
   99f8c:	689b      	ldr	r3, [r3, #8]
   99f8e:	b13b      	cbz	r3, 99fa0 <uhi_msc_scsi_write_10_done+0x1c>
		uhi_msc_lun_sel->status = LUN_FAIL;
   99f90:	2101      	movs	r1, #1
   99f92:	4a06      	ldr	r2, [pc, #24]	; (99fac <uhi_msc_scsi_write_10_done+0x28>)
		uhi_msc_scsi_callback(false);
   99f94:	4b06      	ldr	r3, [pc, #24]	; (99fb0 <uhi_msc_scsi_write_10_done+0x2c>)
		uhi_msc_lun_sel->status = LUN_FAIL;
   99f96:	6812      	ldr	r2, [r2, #0]
		uhi_msc_scsi_callback(false);
   99f98:	681b      	ldr	r3, [r3, #0]
		uhi_msc_lun_sel->status = LUN_FAIL;
   99f9a:	7251      	strb	r1, [r2, #9]
		uhi_msc_scsi_callback(false);
   99f9c:	2000      	movs	r0, #0
   99f9e:	4718      	bx	r3
	uhi_msc_scsi_callback(true);
   99fa0:	4b03      	ldr	r3, [pc, #12]	; (99fb0 <uhi_msc_scsi_write_10_done+0x2c>)
   99fa2:	2001      	movs	r0, #1
   99fa4:	681b      	ldr	r3, [r3, #0]
   99fa6:	4718      	bx	r3
   99fa8:	20072c34 	.word	0x20072c34
   99fac:	20072c78 	.word	0x20072c78
   99fb0:	20072c7c 	.word	0x20072c7c

00099fb4 <uhi_msc_scsi_request_sense_done>:
	if ((!b_cbw_succes) || uhi_msc_csw.dCSWDataResidue) {
   99fb4:	b110      	cbz	r0, 99fbc <uhi_msc_scsi_request_sense_done+0x8>
   99fb6:	4b05      	ldr	r3, [pc, #20]	; (99fcc <uhi_msc_scsi_request_sense_done+0x18>)
   99fb8:	689b      	ldr	r3, [r3, #8]
   99fba:	b11b      	cbz	r3, 99fc4 <uhi_msc_scsi_request_sense_done+0x10>
		uhi_msc_scsi_callback(false);
   99fbc:	4b04      	ldr	r3, [pc, #16]	; (99fd0 <uhi_msc_scsi_request_sense_done+0x1c>)
   99fbe:	2000      	movs	r0, #0
   99fc0:	681b      	ldr	r3, [r3, #0]
   99fc2:	4718      	bx	r3
	uhi_msc_scsi_sense_callback();
   99fc4:	4b03      	ldr	r3, [pc, #12]	; (99fd4 <uhi_msc_scsi_request_sense_done+0x20>)
   99fc6:	681b      	ldr	r3, [r3, #0]
   99fc8:	4718      	bx	r3
   99fca:	bf00      	nop
   99fcc:	20072c34 	.word	0x20072c34
   99fd0:	20072c7c 	.word	0x20072c7c
   99fd4:	20072c80 	.word	0x20072c80

00099fd8 <uhi_msc_scsi_inquiry_done>:
	if ((!b_cbw_succes) || uhi_msc_csw.dCSWDataResidue) {
   99fd8:	b110      	cbz	r0, 99fe0 <uhi_msc_scsi_inquiry_done+0x8>
   99fda:	4b05      	ldr	r3, [pc, #20]	; (99ff0 <uhi_msc_scsi_inquiry_done+0x18>)
   99fdc:	689b      	ldr	r3, [r3, #8]
   99fde:	b11b      	cbz	r3, 99fe8 <uhi_msc_scsi_inquiry_done+0x10>
		uhi_msc_scsi_callback(false);
   99fe0:	4b04      	ldr	r3, [pc, #16]	; (99ff4 <uhi_msc_scsi_inquiry_done+0x1c>)
   99fe2:	2000      	movs	r0, #0
   99fe4:	681b      	ldr	r3, [r3, #0]
   99fe6:	4718      	bx	r3
	uhi_msc_scsi_callback(true);
   99fe8:	4b02      	ldr	r3, [pc, #8]	; (99ff4 <uhi_msc_scsi_inquiry_done+0x1c>)
   99fea:	2001      	movs	r0, #1
   99fec:	681b      	ldr	r3, [r3, #0]
   99fee:	4718      	bx	r3
   99ff0:	20072c34 	.word	0x20072c34
   99ff4:	20072c7c 	.word	0x20072c7c

00099ff8 <uhi_msc_scsi_read_10_done>:
	if ((!b_cbw_succes) || (uhi_msc_csw.bCSWStatus != USB_CSW_STATUS_PASS)
   99ff8:	b120      	cbz	r0, 9a004 <uhi_msc_scsi_read_10_done+0xc>
   99ffa:	4b08      	ldr	r3, [pc, #32]	; (9a01c <uhi_msc_scsi_read_10_done+0x24>)
   99ffc:	7b1a      	ldrb	r2, [r3, #12]
   99ffe:	b90a      	cbnz	r2, 9a004 <uhi_msc_scsi_read_10_done+0xc>
			|| uhi_msc_csw.dCSWDataResidue) {
   9a000:	689b      	ldr	r3, [r3, #8]
   9a002:	b13b      	cbz	r3, 9a014 <uhi_msc_scsi_read_10_done+0x1c>
		uhi_msc_lun_sel->status = LUN_FAIL;
   9a004:	2101      	movs	r1, #1
   9a006:	4a06      	ldr	r2, [pc, #24]	; (9a020 <uhi_msc_scsi_read_10_done+0x28>)
		uhi_msc_scsi_callback(false);
   9a008:	4b06      	ldr	r3, [pc, #24]	; (9a024 <uhi_msc_scsi_read_10_done+0x2c>)
		uhi_msc_lun_sel->status = LUN_FAIL;
   9a00a:	6812      	ldr	r2, [r2, #0]
		uhi_msc_scsi_callback(false);
   9a00c:	681b      	ldr	r3, [r3, #0]
		uhi_msc_lun_sel->status = LUN_FAIL;
   9a00e:	7251      	strb	r1, [r2, #9]
		uhi_msc_scsi_callback(false);
   9a010:	2000      	movs	r0, #0
   9a012:	4718      	bx	r3
	uhi_msc_scsi_callback(true);
   9a014:	4b03      	ldr	r3, [pc, #12]	; (9a024 <uhi_msc_scsi_read_10_done+0x2c>)
   9a016:	2001      	movs	r0, #1
   9a018:	681b      	ldr	r3, [r3, #0]
   9a01a:	4718      	bx	r3
   9a01c:	20072c34 	.word	0x20072c34
   9a020:	20072c78 	.word	0x20072c78
   9a024:	20072c7c 	.word	0x20072c7c

0009a028 <uhi_msc_data_csw_rst_stall>:
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
	UNUSED(add);
	UNUSED(payload_trans);
	if (status != UHD_TRANS_NOERROR) {
   9a028:	b9c9      	cbnz	r1, 9a05e <uhi_msc_data_csw_rst_stall+0x36>
{
   9a02a:	b570      	push	{r4, r5, r6, lr}
static void uhi_msc_transfer(usb_ep_t endp,
		uint8_t* payload,
		uint16_t payload_size,
		uhd_callback_trans_t callback_end)
{
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a02c:	f644 6620 	movw	r6, #20000	; 0x4e20
   9a030:	250d      	movs	r5, #13
	uhi_msc_transfer(uhi_msc_dev_sel->ep_in, (uint8_t *) & uhi_msc_csw,
   9a032:	4b0d      	ldr	r3, [pc, #52]	; (9a068 <uhi_msc_data_csw_rst_stall+0x40>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a034:	4c0d      	ldr	r4, [pc, #52]	; (9a06c <uhi_msc_data_csw_rst_stall+0x44>)
   9a036:	6818      	ldr	r0, [r3, #0]
{
   9a038:	b084      	sub	sp, #16
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a03a:	7c80      	ldrb	r0, [r0, #18]
   9a03c:	460a      	mov	r2, r1
   9a03e:	7919      	ldrb	r1, [r3, #4]
   9a040:	9402      	str	r4, [sp, #8]
   9a042:	e88d 0060 	stmia.w	sp, {r5, r6}
   9a046:	4b0a      	ldr	r3, [pc, #40]	; (9a070 <uhi_msc_data_csw_rst_stall+0x48>)
   9a048:	4c0a      	ldr	r4, [pc, #40]	; (9a074 <uhi_msc_data_csw_rst_stall+0x4c>)
   9a04a:	47a0      	blx	r4
   9a04c:	b108      	cbz	r0, 9a052 <uhi_msc_data_csw_rst_stall+0x2a>
}
   9a04e:	b004      	add	sp, #16
   9a050:	bd70      	pop	{r4, r5, r6, pc}
		uhi_msc_scsi_sub_callback(false);
   9a052:	4b09      	ldr	r3, [pc, #36]	; (9a078 <uhi_msc_data_csw_rst_stall+0x50>)
   9a054:	681b      	ldr	r3, [r3, #0]
}
   9a056:	b004      	add	sp, #16
   9a058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uhi_msc_scsi_sub_callback(false);
   9a05c:	4718      	bx	r3
   9a05e:	4b06      	ldr	r3, [pc, #24]	; (9a078 <uhi_msc_data_csw_rst_stall+0x50>)
   9a060:	2000      	movs	r0, #0
   9a062:	681b      	ldr	r3, [r3, #0]
   9a064:	4718      	bx	r3
   9a066:	bf00      	nop
   9a068:	20072c48 	.word	0x20072c48
   9a06c:	0009a1f9 	.word	0x0009a1f9
   9a070:	20072c34 	.word	0x20072c34
   9a074:	0009ea1d 	.word	0x0009ea1d
   9a078:	20072c84 	.word	0x20072c84

0009a07c <uhi_msc_data_transfered>:
{
   9a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
   9a07e:	b087      	sub	sp, #28
	if (status != UHD_TRANS_NOERROR) {
   9a080:	b34a      	cbz	r2, 9a0d6 <uhi_msc_data_transfered+0x5a>
		if (status == UHD_TRANS_STALL) {
   9a082:	2a04      	cmp	r2, #4
   9a084:	d121      	bne.n	9a0ca <uhi_msc_data_transfered+0x4e>
	// Setup Request to reset endpoint
	usb_setup_req_t req;
	req.bmRequestType = USB_REQ_RECIP_ENDPOINT
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_CLEAR_FEATURE;
	req.wValue = USB_EP_FEATURE_HALT;
   9a086:	2400      	movs	r4, #0
	req.bmRequestType = USB_REQ_RECIP_ENDPOINT
   9a088:	2702      	movs	r7, #2
	req.bRequest = USB_REQ_CLEAR_FEATURE;
   9a08a:	2601      	movs	r6, #1
			if (uhi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN) {
   9a08c:	4b1c      	ldr	r3, [pc, #112]	; (9a100 <uhi_msc_data_transfered+0x84>)
	req.wIndex = endp;
	req.wLength = 0;
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a08e:	4a1d      	ldr	r2, [pc, #116]	; (9a104 <uhi_msc_data_transfered+0x88>)
			if (uhi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN) {
   9a090:	f993 300c 	ldrsb.w	r3, [r3, #12]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a094:	a904      	add	r1, sp, #16
			if (uhi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN) {
   9a096:	2b00      	cmp	r3, #0
				endp = uhi_msc_dev_sel->ep_in;
   9a098:	4b1b      	ldr	r3, [pc, #108]	; (9a108 <uhi_msc_data_transfered+0x8c>)
	req.wValue = USB_EP_FEATURE_HALT;
   9a09a:	f8ad 4012 	strh.w	r4, [sp, #18]
				endp = uhi_msc_dev_sel->ep_in;
   9a09e:	bfb4      	ite	lt
   9a0a0:	791d      	ldrblt	r5, [r3, #4]
				endp = uhi_msc_dev_sel->ep_out;
   9a0a2:	795d      	ldrbge	r5, [r3, #5]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a0a4:	681b      	ldr	r3, [r3, #0]
	req.wIndex = endp;
   9a0a6:	f8ad 5014 	strh.w	r5, [sp, #20]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a0aa:	7c98      	ldrb	r0, [r3, #18]
   9a0ac:	4d17      	ldr	r5, [pc, #92]	; (9a10c <uhi_msc_data_transfered+0x90>)
   9a0ae:	9201      	str	r2, [sp, #4]
   9a0b0:	4623      	mov	r3, r4
   9a0b2:	9400      	str	r4, [sp, #0]
   9a0b4:	4622      	mov	r2, r4
	req.wLength = 0;
   9a0b6:	f8ad 4016 	strh.w	r4, [sp, #22]
	req.bmRequestType = USB_REQ_RECIP_ENDPOINT
   9a0ba:	f88d 7010 	strb.w	r7, [sp, #16]
	req.bRequest = USB_REQ_CLEAR_FEATURE;
   9a0be:	f88d 6011 	strb.w	r6, [sp, #17]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a0c2:	47a8      	blx	r5
   9a0c4:	b1b8      	cbz	r0, 9a0f6 <uhi_msc_data_transfered+0x7a>
}
   9a0c6:	b007      	add	sp, #28
   9a0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uhi_msc_scsi_sub_callback(false);
   9a0ca:	4b11      	ldr	r3, [pc, #68]	; (9a110 <uhi_msc_data_transfered+0x94>)
   9a0cc:	2000      	movs	r0, #0
   9a0ce:	681b      	ldr	r3, [r3, #0]
   9a0d0:	4798      	blx	r3
}
   9a0d2:	b007      	add	sp, #28
   9a0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a0d6:	f644 6620 	movw	r6, #20000	; 0x4e20
   9a0da:	250d      	movs	r5, #13
	uhi_msc_transfer(uhi_msc_dev_sel->ep_in, (uint8_t *) & uhi_msc_csw,
   9a0dc:	4b0a      	ldr	r3, [pc, #40]	; (9a108 <uhi_msc_data_transfered+0x8c>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a0de:	4c0d      	ldr	r4, [pc, #52]	; (9a114 <uhi_msc_data_transfered+0x98>)
   9a0e0:	6818      	ldr	r0, [r3, #0]
   9a0e2:	7919      	ldrb	r1, [r3, #4]
   9a0e4:	7c80      	ldrb	r0, [r0, #18]
   9a0e6:	4b0c      	ldr	r3, [pc, #48]	; (9a118 <uhi_msc_data_transfered+0x9c>)
   9a0e8:	9402      	str	r4, [sp, #8]
   9a0ea:	e88d 0060 	stmia.w	sp, {r5, r6}
   9a0ee:	4c0b      	ldr	r4, [pc, #44]	; (9a11c <uhi_msc_data_transfered+0xa0>)
   9a0f0:	47a0      	blx	r4
   9a0f2:	2800      	cmp	r0, #0
   9a0f4:	d1e7      	bne.n	9a0c6 <uhi_msc_data_transfered+0x4a>
		uhi_msc_scsi_sub_callback(false);
   9a0f6:	4b06      	ldr	r3, [pc, #24]	; (9a110 <uhi_msc_data_transfered+0x94>)
   9a0f8:	681b      	ldr	r3, [r3, #0]
   9a0fa:	4798      	blx	r3
}
   9a0fc:	b007      	add	sp, #28
   9a0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9a100:	2007024c 	.word	0x2007024c
   9a104:	0009a029 	.word	0x0009a029
   9a108:	20072c48 	.word	0x20072c48
   9a10c:	0009e8fd 	.word	0x0009e8fd
   9a110:	20072c84 	.word	0x20072c84
   9a114:	0009a1f9 	.word	0x0009a1f9
   9a118:	20072c34 	.word	0x20072c34
   9a11c:	0009ea1d 	.word	0x0009ea1d

0009a120 <uhi_msc_cbw_sent>:
{
   9a120:	b5f0      	push	{r4, r5, r6, r7, lr}
   9a122:	b087      	sub	sp, #28
	if (status != UHD_TRANS_NOERROR) {
   9a124:	b13a      	cbz	r2, 9a136 <uhi_msc_cbw_sent+0x16>
		if (status == UHD_TRANS_STALL) {
   9a126:	2a04      	cmp	r2, #4
   9a128:	d021      	beq.n	9a16e <uhi_msc_cbw_sent+0x4e>
		uhi_msc_scsi_sub_callback(false);
   9a12a:	4b29      	ldr	r3, [pc, #164]	; (9a1d0 <uhi_msc_cbw_sent+0xb0>)
   9a12c:	2000      	movs	r0, #0
   9a12e:	681b      	ldr	r3, [r3, #0]
   9a130:	4798      	blx	r3
}
   9a132:	b007      	add	sp, #28
   9a134:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cpu_to_le32(uhi_msc_cbw.dCBWDataTransferLength);
   9a136:	4b27      	ldr	r3, [pc, #156]	; (9a1d4 <uhi_msc_cbw_sent+0xb4>)
   9a138:	689c      	ldr	r4, [r3, #8]
	if (!uhi_msc_cbw.dCBWDataTransferLength) {
   9a13a:	2c00      	cmp	r4, #0
   9a13c:	d037      	beq.n	9a1ae <uhi_msc_cbw_sent+0x8e>
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a13e:	f644 6520 	movw	r5, #20000	; 0x4e20
	if (uhi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN) {
   9a142:	f993 300c 	ldrsb.w	r3, [r3, #12]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a146:	b2a4      	uxth	r4, r4
	if (uhi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN) {
   9a148:	2b00      	cmp	r3, #0
		endp = uhi_msc_dev_sel->ep_in;
   9a14a:	4b23      	ldr	r3, [pc, #140]	; (9a1d8 <uhi_msc_cbw_sent+0xb8>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a14c:	681a      	ldr	r2, [r3, #0]
		endp = uhi_msc_dev_sel->ep_in;
   9a14e:	bfb4      	ite	lt
   9a150:	7919      	ldrblt	r1, [r3, #4]
		endp = uhi_msc_dev_sel->ep_out;
   9a152:	7959      	ldrbge	r1, [r3, #5]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a154:	7c90      	ldrb	r0, [r2, #18]
	uhi_msc_transfer(endp, uhi_msc_data, uhi_msc_cbw.dCBWDataTransferLength,
   9a156:	4b21      	ldr	r3, [pc, #132]	; (9a1dc <uhi_msc_cbw_sent+0xbc>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a158:	4a21      	ldr	r2, [pc, #132]	; (9a1e0 <uhi_msc_cbw_sent+0xc0>)
   9a15a:	681b      	ldr	r3, [r3, #0]
   9a15c:	e88d 0030 	stmia.w	sp, {r4, r5}
   9a160:	9202      	str	r2, [sp, #8]
   9a162:	4c20      	ldr	r4, [pc, #128]	; (9a1e4 <uhi_msc_cbw_sent+0xc4>)
   9a164:	2200      	movs	r2, #0
   9a166:	47a0      	blx	r4
   9a168:	b1e0      	cbz	r0, 9a1a4 <uhi_msc_cbw_sent+0x84>
}
   9a16a:	b007      	add	sp, #28
   9a16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req.wValue = USB_EP_FEATURE_HALT;
   9a16e:	2400      	movs	r4, #0
	req.bmRequestType = USB_REQ_RECIP_ENDPOINT
   9a170:	2702      	movs	r7, #2
	req.bRequest = USB_REQ_CLEAR_FEATURE;
   9a172:	2601      	movs	r6, #1
			uhi_msc_reset_endpoint(uhi_msc_dev_sel->ep_out,
   9a174:	4b18      	ldr	r3, [pc, #96]	; (9a1d8 <uhi_msc_cbw_sent+0xb8>)
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a176:	4a1c      	ldr	r2, [pc, #112]	; (9a1e8 <uhi_msc_cbw_sent+0xc8>)
   9a178:	6819      	ldr	r1, [r3, #0]
			uhi_msc_reset_endpoint(uhi_msc_dev_sel->ep_out,
   9a17a:	795d      	ldrb	r5, [r3, #5]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a17c:	7c88      	ldrb	r0, [r1, #18]
	req.wIndex = endp;
   9a17e:	f8ad 5014 	strh.w	r5, [sp, #20]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a182:	9201      	str	r2, [sp, #4]
   9a184:	4623      	mov	r3, r4
   9a186:	9400      	str	r4, [sp, #0]
   9a188:	4622      	mov	r2, r4
   9a18a:	a904      	add	r1, sp, #16
   9a18c:	4d17      	ldr	r5, [pc, #92]	; (9a1ec <uhi_msc_cbw_sent+0xcc>)
	req.wValue = USB_EP_FEATURE_HALT;
   9a18e:	f8ad 4012 	strh.w	r4, [sp, #18]
	req.wLength = 0;
   9a192:	f8ad 4016 	strh.w	r4, [sp, #22]
	req.bmRequestType = USB_REQ_RECIP_ENDPOINT
   9a196:	f88d 7010 	strb.w	r7, [sp, #16]
	req.bRequest = USB_REQ_CLEAR_FEATURE;
   9a19a:	f88d 6011 	strb.w	r6, [sp, #17]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a19e:	47a8      	blx	r5
   9a1a0:	2800      	cmp	r0, #0
   9a1a2:	d1e2      	bne.n	9a16a <uhi_msc_cbw_sent+0x4a>
		uhi_msc_scsi_sub_callback(false);
   9a1a4:	4b0a      	ldr	r3, [pc, #40]	; (9a1d0 <uhi_msc_cbw_sent+0xb0>)
   9a1a6:	681b      	ldr	r3, [r3, #0]
   9a1a8:	4798      	blx	r3
}
   9a1aa:	b007      	add	sp, #28
   9a1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a1ae:	f644 6620 	movw	r6, #20000	; 0x4e20
   9a1b2:	250d      	movs	r5, #13
	uhi_msc_transfer(uhi_msc_dev_sel->ep_in, (uint8_t *) & uhi_msc_csw,
   9a1b4:	4b08      	ldr	r3, [pc, #32]	; (9a1d8 <uhi_msc_cbw_sent+0xb8>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a1b6:	4c0e      	ldr	r4, [pc, #56]	; (9a1f0 <uhi_msc_cbw_sent+0xd0>)
   9a1b8:	6818      	ldr	r0, [r3, #0]
   9a1ba:	7919      	ldrb	r1, [r3, #4]
   9a1bc:	7c80      	ldrb	r0, [r0, #18]
   9a1be:	4b0d      	ldr	r3, [pc, #52]	; (9a1f4 <uhi_msc_cbw_sent+0xd4>)
   9a1c0:	9402      	str	r4, [sp, #8]
   9a1c2:	e88d 0060 	stmia.w	sp, {r5, r6}
   9a1c6:	4c07      	ldr	r4, [pc, #28]	; (9a1e4 <uhi_msc_cbw_sent+0xc4>)
   9a1c8:	47a0      	blx	r4
   9a1ca:	2800      	cmp	r0, #0
   9a1cc:	d1cd      	bne.n	9a16a <uhi_msc_cbw_sent+0x4a>
   9a1ce:	e7e9      	b.n	9a1a4 <uhi_msc_cbw_sent+0x84>
   9a1d0:	20072c84 	.word	0x20072c84
   9a1d4:	2007024c 	.word	0x2007024c
   9a1d8:	20072c48 	.word	0x20072c48
   9a1dc:	20072c44 	.word	0x20072c44
   9a1e0:	0009a07d 	.word	0x0009a07d
   9a1e4:	0009ea1d 	.word	0x0009ea1d
   9a1e8:	00099f35 	.word	0x00099f35
   9a1ec:	0009e8fd 	.word	0x0009e8fd
   9a1f0:	0009a1f9 	.word	0x0009a1f9
   9a1f4:	20072c34 	.word	0x20072c34

0009a1f8 <uhi_msc_csw_received>:
{
   9a1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   9a1fa:	b085      	sub	sp, #20
	if (status != UHD_TRANS_NOERROR) {
   9a1fc:	b13a      	cbz	r2, 9a20e <uhi_msc_csw_received+0x16>
		if (status == UHD_TRANS_STALL) {
   9a1fe:	2a04      	cmp	r2, #4
   9a200:	d016      	beq.n	9a230 <uhi_msc_csw_received+0x38>
		uhi_msc_scsi_sub_callback(false);
   9a202:	4b1b      	ldr	r3, [pc, #108]	; (9a270 <uhi_msc_csw_received+0x78>)
   9a204:	2000      	movs	r0, #0
   9a206:	681b      	ldr	r3, [r3, #0]
   9a208:	4798      	blx	r3
}
   9a20a:	b005      	add	sp, #20
   9a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((nb_transfered != sizeof(uhi_msc_csw))
   9a20e:	2b0d      	cmp	r3, #13
   9a210:	d1f7      	bne.n	9a202 <uhi_msc_csw_received+0xa>
			|| (uhi_msc_csw.dCSWTag != uhi_msc_cbw.dCBWTag)
   9a212:	4b18      	ldr	r3, [pc, #96]	; (9a274 <uhi_msc_csw_received+0x7c>)
   9a214:	4a18      	ldr	r2, [pc, #96]	; (9a278 <uhi_msc_csw_received+0x80>)
   9a216:	6859      	ldr	r1, [r3, #4]
   9a218:	6852      	ldr	r2, [r2, #4]
   9a21a:	4291      	cmp	r1, r2
   9a21c:	d1f1      	bne.n	9a202 <uhi_msc_csw_received+0xa>
			|| (uhi_msc_csw.dCSWSignature != CPU_TO_BE32(USB_CSW_SIGNATURE))) {
   9a21e:	681a      	ldr	r2, [r3, #0]
   9a220:	4b16      	ldr	r3, [pc, #88]	; (9a27c <uhi_msc_csw_received+0x84>)
   9a222:	429a      	cmp	r2, r3
   9a224:	d1ed      	bne.n	9a202 <uhi_msc_csw_received+0xa>
	uhi_msc_scsi_sub_callback(true);
   9a226:	4b12      	ldr	r3, [pc, #72]	; (9a270 <uhi_msc_csw_received+0x78>)
   9a228:	2001      	movs	r0, #1
   9a22a:	681b      	ldr	r3, [r3, #0]
   9a22c:	4798      	blx	r3
   9a22e:	e7ec      	b.n	9a20a <uhi_msc_csw_received+0x12>
	req.wValue = USB_EP_FEATURE_HALT;
   9a230:	2400      	movs	r4, #0
	req.bmRequestType = USB_REQ_RECIP_ENDPOINT
   9a232:	2702      	movs	r7, #2
	req.bRequest = USB_REQ_CLEAR_FEATURE;
   9a234:	2601      	movs	r6, #1
			uhi_msc_reset_endpoint(uhi_msc_dev_sel->ep_in,
   9a236:	4b12      	ldr	r3, [pc, #72]	; (9a280 <uhi_msc_csw_received+0x88>)
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a238:	4a12      	ldr	r2, [pc, #72]	; (9a284 <uhi_msc_csw_received+0x8c>)
   9a23a:	6819      	ldr	r1, [r3, #0]
			uhi_msc_reset_endpoint(uhi_msc_dev_sel->ep_in,
   9a23c:	791d      	ldrb	r5, [r3, #4]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a23e:	7c88      	ldrb	r0, [r1, #18]
	req.wIndex = endp;
   9a240:	f8ad 500c 	strh.w	r5, [sp, #12]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a244:	9201      	str	r2, [sp, #4]
   9a246:	4623      	mov	r3, r4
   9a248:	9400      	str	r4, [sp, #0]
   9a24a:	4622      	mov	r2, r4
   9a24c:	a902      	add	r1, sp, #8
   9a24e:	4d0e      	ldr	r5, [pc, #56]	; (9a288 <uhi_msc_csw_received+0x90>)
	req.wValue = USB_EP_FEATURE_HALT;
   9a250:	f8ad 400a 	strh.w	r4, [sp, #10]
	req.wLength = 0;
   9a254:	f8ad 400e 	strh.w	r4, [sp, #14]
	req.bmRequestType = USB_REQ_RECIP_ENDPOINT
   9a258:	f88d 7008 	strb.w	r7, [sp, #8]
	req.bRequest = USB_REQ_CLEAR_FEATURE;
   9a25c:	f88d 6009 	strb.w	r6, [sp, #9]
	if (!uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a260:	47a8      	blx	r5
   9a262:	2800      	cmp	r0, #0
   9a264:	d1d1      	bne.n	9a20a <uhi_msc_csw_received+0x12>
		uhi_msc_scsi_sub_callback(false);
   9a266:	4b02      	ldr	r3, [pc, #8]	; (9a270 <uhi_msc_csw_received+0x78>)
   9a268:	681b      	ldr	r3, [r3, #0]
   9a26a:	4798      	blx	r3
   9a26c:	e7cd      	b.n	9a20a <uhi_msc_csw_received+0x12>
   9a26e:	bf00      	nop
   9a270:	20072c84 	.word	0x20072c84
   9a274:	20072c34 	.word	0x20072c34
   9a278:	2007024c 	.word	0x2007024c
   9a27c:	53425355 	.word	0x53425355
   9a280:	20072c48 	.word	0x20072c48
   9a284:	0009a029 	.word	0x0009a029
   9a288:	0009e8fd 	.word	0x0009e8fd

0009a28c <uhi_msc_enable_step5>:
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
   9a28c:	4b2c      	ldr	r3, [pc, #176]	; (9a340 <uhi_msc_enable_step5+0xb4>)
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a28e:	482d      	ldr	r0, [pc, #180]	; (9a344 <uhi_msc_enable_step5+0xb8>)
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
   9a290:	7b59      	ldrb	r1, [r3, #13]
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a292:	79c2      	ldrb	r2, [r0, #7]
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
   9a294:	3101      	adds	r1, #1
   9a296:	b2c9      	uxtb	r1, r1
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a298:	428a      	cmp	r2, r1
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
   9a29a:	7359      	strb	r1, [r3, #13]
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a29c:	d803      	bhi.n	9a2a6 <uhi_msc_enable_step5+0x1a>
		b_uhi_msc_free = true;
   9a29e:	2201      	movs	r2, #1
   9a2a0:	4b29      	ldr	r3, [pc, #164]	; (9a348 <uhi_msc_enable_step5+0xbc>)
   9a2a2:	701a      	strb	r2, [r3, #0]
   9a2a4:	4770      	bx	lr
{
   9a2a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a2aa:	2200      	movs	r2, #0
	uhi_msc_cbw.CDB[0] = SPC_INQUIRY;
   9a2ac:	f04f 0812 	mov.w	r8, #18
	uhi_msc_lun_sel->status = LUN_NOT_PRESENT;
   9a2b0:	f04f 0902 	mov.w	r9, #2
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_inquiry_data);
   9a2b4:	2524      	movs	r5, #36	; 0x24
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a2b6:	f04f 0e1f 	mov.w	lr, #31
   9a2ba:	f644 6c20 	movw	ip, #20000	; 0x4e20
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a2be:	2780      	movs	r7, #128	; 0x80
	uhi_msc_cbw.bCBWCBLength = 6;
   9a2c0:	2606      	movs	r6, #6
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9a2c2:	6884      	ldr	r4, [r0, #8]
   9a2c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   9a2c8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	uhi_msc_lun_sel->status = LUN_NOT_PRESENT;
   9a2cc:	f881 9009 	strb.w	r9, [r1, #9]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a2d0:	f8c3 200f 	str.w	r2, [r3, #15]
	uhi_msc_cbw.CDB[0] = SPC_INQUIRY;
   9a2d4:	f883 800f 	strb.w	r8, [r3, #15]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9a2d8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 9a360 <uhi_msc_enable_step5+0xd4>
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a2dc:	6804      	ldr	r4, [r0, #0]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a2de:	f8c3 2013 	str.w	r2, [r3, #19]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9a2e2:	f8c8 1000 	str.w	r1, [r8]
	uhi_msc_cbw.CDB[4] = sizeof(struct scsi_inquiry_data);
   9a2e6:	74dd      	strb	r5, [r3, #19]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a2e8:	f8c3 2017 	str.w	r2, [r3, #23]
   9a2ec:	f8c3 201b 	str.w	r2, [r3, #27]
{
   9a2f0:	b085      	sub	sp, #20
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a2f2:	7941      	ldrb	r1, [r0, #5]
   9a2f4:	7ca0      	ldrb	r0, [r4, #18]
	uhi_msc_cbw.dCBWTag++;
   9a2f6:	685c      	ldr	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a2f8:	f8cd e000 	str.w	lr, [sp]
   9a2fc:	f8df e064 	ldr.w	lr, [pc, #100]	; 9a364 <uhi_msc_enable_step5+0xd8>
	uhi_msc_cbw.dCBWTag++;
   9a300:	3401      	adds	r4, #1
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a302:	f8cd c004 	str.w	ip, [sp, #4]
	uhi_msc_cbw.dCBWTag++;
   9a306:	605c      	str	r4, [r3, #4]
	uhi_msc_scsi_callback = callback;
   9a308:	f8df c05c 	ldr.w	ip, [pc, #92]	; 9a368 <uhi_msc_enable_step5+0xdc>
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a30c:	f8cd e008 	str.w	lr, [sp, #8]
	uhi_msc_scsi_sub_callback = callback;
   9a310:	4c0e      	ldr	r4, [pc, #56]	; (9a34c <uhi_msc_enable_step5+0xc0>)
	uhi_msc_scsi_callback = callback;
   9a312:	f8df e058 	ldr.w	lr, [pc, #88]	; 9a36c <uhi_msc_enable_step5+0xe0>
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_inquiry_data);
   9a316:	609d      	str	r5, [r3, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a318:	731f      	strb	r7, [r3, #12]
	uhi_msc_scsi_sub_callback = callback;
   9a31a:	4d0d      	ldr	r5, [pc, #52]	; (9a350 <uhi_msc_enable_step5+0xc4>)
	uhi_msc_cbw.bCBWCBLength = 6;
   9a31c:	739e      	strb	r6, [r3, #14]
	uhi_msc_data = payload;
   9a31e:	4f0d      	ldr	r7, [pc, #52]	; (9a354 <uhi_msc_enable_step5+0xc8>)
   9a320:	4e0d      	ldr	r6, [pc, #52]	; (9a358 <uhi_msc_enable_step5+0xcc>)
	uhi_msc_scsi_sub_callback = callback;
   9a322:	6025      	str	r5, [r4, #0]
	uhi_msc_scsi_callback = callback;
   9a324:	f8ce c000 	str.w	ip, [lr]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a328:	4d0c      	ldr	r5, [pc, #48]	; (9a35c <uhi_msc_enable_step5+0xd0>)
	uhi_msc_data = payload;
   9a32a:	6037      	str	r7, [r6, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a32c:	47a8      	blx	r5
   9a32e:	b110      	cbz	r0, 9a336 <uhi_msc_enable_step5+0xaa>
}
   9a330:	b005      	add	sp, #20
   9a332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uhi_msc_scsi_sub_callback(false);
   9a336:	6823      	ldr	r3, [r4, #0]
}
   9a338:	b005      	add	sp, #20
   9a33a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uhi_msc_scsi_sub_callback(false);
   9a33e:	4718      	bx	r3
   9a340:	2007024c 	.word	0x2007024c
   9a344:	20072c48 	.word	0x20072c48
   9a348:	20070248 	.word	0x20070248
   9a34c:	20072c84 	.word	0x20072c84
   9a350:	00099fd9 	.word	0x00099fd9
   9a354:	20072c54 	.word	0x20072c54
   9a358:	20072c44 	.word	0x20072c44
   9a35c:	0009ea1d 	.word	0x0009ea1d
   9a360:	20072c78 	.word	0x20072c78
   9a364:	0009a121 	.word	0x0009a121
   9a368:	0009a481 	.word	0x0009a481
   9a36c:	20072c7c 	.word	0x20072c7c

0009a370 <uhi_msc_enable_step2>:
{
   9a370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (status == UHD_TRANS_NOERROR) {
   9a374:	460c      	mov	r4, r1
{
   9a376:	b085      	sub	sp, #20
	if (status == UHD_TRANS_NOERROR) {
   9a378:	b9e1      	cbnz	r1, 9a3b4 <uhi_msc_enable_step2+0x44>
		if (payload_trans) {
   9a37a:	b1ea      	cbz	r2, 9a3b8 <uhi_msc_enable_step2+0x48>
			uhi_msc_dev_sel->nb_lun++;
   9a37c:	4e32      	ldr	r6, [pc, #200]	; (9a448 <uhi_msc_enable_step2+0xd8>)
	uhi_msc_dev_sel->lun = malloc(uhi_msc_dev_sel->nb_lun*sizeof(uhi_msc_lun_t));
   9a37e:	4b33      	ldr	r3, [pc, #204]	; (9a44c <uhi_msc_enable_step2+0xdc>)
			uhi_msc_dev_sel->nb_lun++;
   9a380:	f896 8007 	ldrb.w	r8, [r6, #7]
   9a384:	f108 0801 	add.w	r8, r8, #1
   9a388:	fa5f f888 	uxtb.w	r8, r8
	uhi_msc_dev_sel->lun = malloc(uhi_msc_dev_sel->nb_lun*sizeof(uhi_msc_lun_t));
   9a38c:	eb08 0048 	add.w	r0, r8, r8, lsl #1
   9a390:	0080      	lsls	r0, r0, #2
			uhi_msc_dev_sel->nb_lun++;
   9a392:	f886 8007 	strb.w	r8, [r6, #7]
	uhi_msc_dev_sel->lun = malloc(uhi_msc_dev_sel->nb_lun*sizeof(uhi_msc_lun_t));
   9a396:	4798      	blx	r3
   9a398:	4607      	mov	r7, r0
   9a39a:	60b0      	str	r0, [r6, #8]
	if (uhi_msc_dev_sel->lun == NULL) {
   9a39c:	b120      	cbz	r0, 9a3a8 <uhi_msc_enable_step2+0x38>
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
   9a39e:	4d2c      	ldr	r5, [pc, #176]	; (9a450 <uhi_msc_enable_step2+0xe0>)
   9a3a0:	736c      	strb	r4, [r5, #13]
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a3a2:	f1b8 0f00 	cmp.w	r8, #0
   9a3a6:	d114      	bne.n	9a3d2 <uhi_msc_enable_step2+0x62>
		b_uhi_msc_free = true;
   9a3a8:	2201      	movs	r2, #1
   9a3aa:	4b2a      	ldr	r3, [pc, #168]	; (9a454 <uhi_msc_enable_step2+0xe4>)
   9a3ac:	701a      	strb	r2, [r3, #0]
}
   9a3ae:	b005      	add	sp, #20
   9a3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (status == UHD_TRANS_STALL) {
   9a3b4:	2904      	cmp	r1, #4
   9a3b6:	d1f7      	bne.n	9a3a8 <uhi_msc_enable_step2+0x38>
			uhi_msc_dev_sel->nb_lun = 1;
   9a3b8:	2201      	movs	r2, #1
   9a3ba:	4e23      	ldr	r6, [pc, #140]	; (9a448 <uhi_msc_enable_step2+0xd8>)
	uhi_msc_dev_sel->lun = malloc(uhi_msc_dev_sel->nb_lun*sizeof(uhi_msc_lun_t));
   9a3bc:	200c      	movs	r0, #12
   9a3be:	4b23      	ldr	r3, [pc, #140]	; (9a44c <uhi_msc_enable_step2+0xdc>)
			uhi_msc_dev_sel->nb_lun = 1;
   9a3c0:	71f2      	strb	r2, [r6, #7]
	uhi_msc_dev_sel->lun = malloc(uhi_msc_dev_sel->nb_lun*sizeof(uhi_msc_lun_t));
   9a3c2:	4798      	blx	r3
   9a3c4:	4607      	mov	r7, r0
   9a3c6:	60b0      	str	r0, [r6, #8]
	if (uhi_msc_dev_sel->lun == NULL) {
   9a3c8:	2800      	cmp	r0, #0
   9a3ca:	d0ed      	beq.n	9a3a8 <uhi_msc_enable_step2+0x38>
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
   9a3cc:	2300      	movs	r3, #0
   9a3ce:	4d20      	ldr	r5, [pc, #128]	; (9a450 <uhi_msc_enable_step2+0xe0>)
   9a3d0:	736b      	strb	r3, [r5, #13]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a3d2:	2200      	movs	r2, #0
	uhi_msc_lun_sel->status = LUN_NOT_PRESENT;
   9a3d4:	2002      	movs	r0, #2
	uhi_msc_cbw.CDB[0] = SPC_INQUIRY;
   9a3d6:	2112      	movs	r1, #18
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_inquiry_data);
   9a3d8:	2424      	movs	r4, #36	; 0x24
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a3da:	f644 6920 	movw	r9, #20000	; 0x4e20
   9a3de:	f04f 081f 	mov.w	r8, #31
	uhi_msc_cbw.bCBWCBLength = 6;
   9a3e2:	f04f 0e06 	mov.w	lr, #6
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a3e6:	f04f 0c80 	mov.w	ip, #128	; 0x80
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a3ea:	4b1b      	ldr	r3, [pc, #108]	; (9a458 <uhi_msc_enable_step2+0xe8>)
   9a3ec:	f8c5 200f 	str.w	r2, [r5, #15]
	uhi_msc_lun_sel->status = LUN_NOT_PRESENT;
   9a3f0:	7278      	strb	r0, [r7, #9]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a3f2:	605a      	str	r2, [r3, #4]
   9a3f4:	609a      	str	r2, [r3, #8]
   9a3f6:	60da      	str	r2, [r3, #12]
	uhi_msc_cbw.CDB[0] = SPC_INQUIRY;
   9a3f8:	73e9      	strb	r1, [r5, #15]
	uhi_msc_cbw.dCBWTag++;
   9a3fa:	6869      	ldr	r1, [r5, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a3fc:	6830      	ldr	r0, [r6, #0]
	uhi_msc_cbw.CDB[4] = sizeof(struct scsi_inquiry_data);
   9a3fe:	74ec      	strb	r4, [r5, #19]
	uhi_msc_cbw.dCBWTag++;
   9a400:	3101      	adds	r1, #1
   9a402:	6069      	str	r1, [r5, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a404:	7c80      	ldrb	r0, [r0, #18]
   9a406:	7971      	ldrb	r1, [r6, #5]
   9a408:	e88d 0300 	stmia.w	sp, {r8, r9}
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_inquiry_data);
   9a40c:	60ac      	str	r4, [r5, #8]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a40e:	4c13      	ldr	r4, [pc, #76]	; (9a45c <uhi_msc_enable_step2+0xec>)
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a410:	f885 c00c 	strb.w	ip, [r5, #12]
	uhi_msc_scsi_callback = callback;
   9a414:	4e12      	ldr	r6, [pc, #72]	; (9a460 <uhi_msc_enable_step2+0xf0>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a416:	9402      	str	r4, [sp, #8]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9a418:	4c12      	ldr	r4, [pc, #72]	; (9a464 <uhi_msc_enable_step2+0xf4>)
	uhi_msc_cbw.bCBWCBLength = 6;
   9a41a:	f885 e00e 	strb.w	lr, [r5, #14]
	uhi_msc_scsi_callback = callback;
   9a41e:	f8df e05c 	ldr.w	lr, [pc, #92]	; 9a47c <uhi_msc_enable_step2+0x10c>
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9a422:	6027      	str	r7, [r4, #0]
	uhi_msc_scsi_sub_callback = callback;
   9a424:	4d10      	ldr	r5, [pc, #64]	; (9a468 <uhi_msc_enable_step2+0xf8>)
	uhi_msc_scsi_callback = callback;
   9a426:	f8c6 e000 	str.w	lr, [r6]
	uhi_msc_scsi_sub_callback = callback;
   9a42a:	4c10      	ldr	r4, [pc, #64]	; (9a46c <uhi_msc_enable_step2+0xfc>)
	uhi_msc_data = payload;
   9a42c:	4e10      	ldr	r6, [pc, #64]	; (9a470 <uhi_msc_enable_step2+0x100>)
   9a42e:	4f11      	ldr	r7, [pc, #68]	; (9a474 <uhi_msc_enable_step2+0x104>)
	uhi_msc_scsi_sub_callback = callback;
   9a430:	6025      	str	r5, [r4, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a432:	3b0f      	subs	r3, #15
   9a434:	4d10      	ldr	r5, [pc, #64]	; (9a478 <uhi_msc_enable_step2+0x108>)
	uhi_msc_data = payload;
   9a436:	6037      	str	r7, [r6, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a438:	47a8      	blx	r5
   9a43a:	2800      	cmp	r0, #0
   9a43c:	d1b7      	bne.n	9a3ae <uhi_msc_enable_step2+0x3e>
		uhi_msc_scsi_sub_callback(false);
   9a43e:	6823      	ldr	r3, [r4, #0]
}
   9a440:	b005      	add	sp, #20
   9a442:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uhi_msc_scsi_sub_callback(false);
   9a446:	4718      	bx	r3
   9a448:	20072c48 	.word	0x20072c48
   9a44c:	000a52e1 	.word	0x000a52e1
   9a450:	2007024c 	.word	0x2007024c
   9a454:	20070248 	.word	0x20070248
   9a458:	2007025b 	.word	0x2007025b
   9a45c:	0009a121 	.word	0x0009a121
   9a460:	20072c7c 	.word	0x20072c7c
   9a464:	20072c78 	.word	0x20072c78
   9a468:	00099fd9 	.word	0x00099fd9
   9a46c:	20072c84 	.word	0x20072c84
   9a470:	20072c44 	.word	0x20072c44
   9a474:	20072c54 	.word	0x20072c54
   9a478:	0009ea1d 	.word	0x0009ea1d
   9a47c:	0009a481 	.word	0x0009a481

0009a480 <uhi_msc_enable_step4>:
{
   9a480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   9a484:	b085      	sub	sp, #20
	if (!b_success) {
   9a486:	2800      	cmp	r0, #0
   9a488:	d037      	beq.n	9a4fa <uhi_msc_enable_step4+0x7a>
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a48a:	2200      	movs	r2, #0
	uhi_msc_cbw.CDB[0] = SBC_READ_CAPACITY10;
   9a48c:	2125      	movs	r1, #37	; 0x25
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a48e:	f644 6e20 	movw	lr, #20000	; 0x4e20
   9a492:	241f      	movs	r4, #31
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct sbc_read_capacity10_data);
   9a494:	2608      	movs	r6, #8
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a496:	2780      	movs	r7, #128	; 0x80
	uhi_msc_cbw.bCBWCBLength = 10;
   9a498:	250a      	movs	r5, #10
	uhi_msc_transfer(uhi_msc_dev_sel->ep_out, (uint8_t *) &uhi_msc_cbw,
   9a49a:	4842      	ldr	r0, [pc, #264]	; (9a5a4 <uhi_msc_enable_step4+0x124>)
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct sbc_read_capacity10_data);
   9a49c:	4b42      	ldr	r3, [pc, #264]	; (9a5a8 <uhi_msc_enable_step4+0x128>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a49e:	f8d0 c000 	ldr.w	ip, [r0]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a4a2:	f8c3 200f 	str.w	r2, [r3, #15]
   9a4a6:	f8c3 2013 	str.w	r2, [r3, #19]
	uhi_msc_cbw.CDB[0] = SBC_READ_CAPACITY10;
   9a4aa:	73d9      	strb	r1, [r3, #15]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a4ac:	f8c3 2017 	str.w	r2, [r3, #23]
   9a4b0:	f8c3 201b 	str.w	r2, [r3, #27]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a4b4:	7941      	ldrb	r1, [r0, #5]
   9a4b6:	f89c 0012 	ldrb.w	r0, [ip, #18]
   9a4ba:	e88d 4010 	stmia.w	sp, {r4, lr}
   9a4be:	f8df e114 	ldr.w	lr, [pc, #276]	; 9a5d4 <uhi_msc_enable_step4+0x154>
	uhi_msc_cbw.dCBWTag++;
   9a4c2:	685c      	ldr	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a4c4:	f8cd e008 	str.w	lr, [sp, #8]
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct sbc_read_capacity10_data);
   9a4c8:	609e      	str	r6, [r3, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a4ca:	731f      	strb	r7, [r3, #12]
	uhi_msc_scsi_callback = callback;
   9a4cc:	4e37      	ldr	r6, [pc, #220]	; (9a5ac <uhi_msc_enable_step4+0x12c>)
   9a4ce:	4f38      	ldr	r7, [pc, #224]	; (9a5b0 <uhi_msc_enable_step4+0x130>)
	uhi_msc_cbw.dCBWTag++;
   9a4d0:	3401      	adds	r4, #1
	uhi_msc_scsi_callback = callback;
   9a4d2:	6037      	str	r7, [r6, #0]
	uhi_msc_cbw.bCBWCBLength = 10;
   9a4d4:	739d      	strb	r5, [r3, #14]
	uhi_msc_cbw.dCBWTag++;
   9a4d6:	605c      	str	r4, [r3, #4]
	uhi_msc_scsi_sub_callback = callback;
   9a4d8:	4d36      	ldr	r5, [pc, #216]	; (9a5b4 <uhi_msc_enable_step4+0x134>)
   9a4da:	4c37      	ldr	r4, [pc, #220]	; (9a5b8 <uhi_msc_enable_step4+0x138>)
	uhi_msc_data = payload;
   9a4dc:	4e37      	ldr	r6, [pc, #220]	; (9a5bc <uhi_msc_enable_step4+0x13c>)
   9a4de:	4f38      	ldr	r7, [pc, #224]	; (9a5c0 <uhi_msc_enable_step4+0x140>)
	uhi_msc_scsi_sub_callback = callback;
   9a4e0:	602c      	str	r4, [r5, #0]
	uhi_msc_data = payload;
   9a4e2:	6037      	str	r7, [r6, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a4e4:	4c37      	ldr	r4, [pc, #220]	; (9a5c4 <uhi_msc_enable_step4+0x144>)
   9a4e6:	47a0      	blx	r4
   9a4e8:	b110      	cbz	r0, 9a4f0 <uhi_msc_enable_step4+0x70>
}
   9a4ea:	b005      	add	sp, #20
   9a4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uhi_msc_scsi_sub_callback(false);
   9a4f0:	682b      	ldr	r3, [r5, #0]
}
   9a4f2:	b005      	add	sp, #20
   9a4f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uhi_msc_scsi_sub_callback(false);
   9a4f8:	4718      	bx	r3
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
   9a4fa:	4b2b      	ldr	r3, [pc, #172]	; (9a5a8 <uhi_msc_enable_step4+0x128>)
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a4fc:	4c29      	ldr	r4, [pc, #164]	; (9a5a4 <uhi_msc_enable_step4+0x124>)
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
   9a4fe:	7b59      	ldrb	r1, [r3, #13]
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a500:	79e2      	ldrb	r2, [r4, #7]
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
   9a502:	3101      	adds	r1, #1
   9a504:	b2c9      	uxtb	r1, r1
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a506:	428a      	cmp	r2, r1
	if (!uhi_msc_select_lun(++uhi_msc_lun_num_sel)) {
   9a508:	7359      	strb	r1, [r3, #13]
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a50a:	d805      	bhi.n	9a518 <uhi_msc_enable_step4+0x98>
		b_uhi_msc_free = true;
   9a50c:	2201      	movs	r2, #1
   9a50e:	4b2e      	ldr	r3, [pc, #184]	; (9a5c8 <uhi_msc_enable_step4+0x148>)
   9a510:	701a      	strb	r2, [r3, #0]
}
   9a512:	b005      	add	sp, #20
   9a514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uhi_msc_cbw.CDB[0] = SPC_INQUIRY;
   9a518:	f04f 0812 	mov.w	r8, #18
	uhi_msc_lun_sel->status = LUN_NOT_PRESENT;
   9a51c:	f04f 0902 	mov.w	r9, #2
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_inquiry_data);
   9a520:	2524      	movs	r5, #36	; 0x24
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a522:	f04f 0e1f 	mov.w	lr, #31
   9a526:	f644 6c20 	movw	ip, #20000	; 0x4e20
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a52a:	2780      	movs	r7, #128	; 0x80
	uhi_msc_cbw.bCBWCBLength = 6;
   9a52c:	2606      	movs	r6, #6
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9a52e:	68a2      	ldr	r2, [r4, #8]
   9a530:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   9a534:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	uhi_msc_lun_sel->status = LUN_NOT_PRESENT;
   9a538:	f881 9009 	strb.w	r9, [r1, #9]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a53c:	f8c3 000f 	str.w	r0, [r3, #15]
	uhi_msc_cbw.CDB[0] = SPC_INQUIRY;
   9a540:	f883 800f 	strb.w	r8, [r3, #15]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9a544:	f8df 8090 	ldr.w	r8, [pc, #144]	; 9a5d8 <uhi_msc_enable_step4+0x158>
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a548:	f8c3 0013 	str.w	r0, [r3, #19]
   9a54c:	f8c3 0017 	str.w	r0, [r3, #23]
   9a550:	f8c3 001b 	str.w	r0, [r3, #27]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9a554:	f8c8 1000 	str.w	r1, [r8]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a558:	4602      	mov	r2, r0
   9a55a:	6820      	ldr	r0, [r4, #0]
	uhi_msc_cbw.CDB[4] = sizeof(struct scsi_inquiry_data);
   9a55c:	74dd      	strb	r5, [r3, #19]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a55e:	7961      	ldrb	r1, [r4, #5]
	uhi_msc_cbw.dCBWTag++;
   9a560:	685c      	ldr	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a562:	7c80      	ldrb	r0, [r0, #18]
   9a564:	f8cd e000 	str.w	lr, [sp]
   9a568:	f8df e068 	ldr.w	lr, [pc, #104]	; 9a5d4 <uhi_msc_enable_step4+0x154>
	uhi_msc_cbw.dCBWTag++;
   9a56c:	3401      	adds	r4, #1
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a56e:	f8cd c004 	str.w	ip, [sp, #4]
	uhi_msc_cbw.dCBWTag++;
   9a572:	605c      	str	r4, [r3, #4]
	uhi_msc_scsi_callback = callback;
   9a574:	f8df c064 	ldr.w	ip, [pc, #100]	; 9a5dc <uhi_msc_enable_step4+0x15c>
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a578:	f8cd e008 	str.w	lr, [sp, #8]
	uhi_msc_scsi_sub_callback = callback;
   9a57c:	4c0d      	ldr	r4, [pc, #52]	; (9a5b4 <uhi_msc_enable_step4+0x134>)
	uhi_msc_scsi_callback = callback;
   9a57e:	f8df e02c 	ldr.w	lr, [pc, #44]	; 9a5ac <uhi_msc_enable_step4+0x12c>
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_inquiry_data);
   9a582:	609d      	str	r5, [r3, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a584:	731f      	strb	r7, [r3, #12]
	uhi_msc_scsi_sub_callback = callback;
   9a586:	4d11      	ldr	r5, [pc, #68]	; (9a5cc <uhi_msc_enable_step4+0x14c>)
	uhi_msc_cbw.bCBWCBLength = 6;
   9a588:	739e      	strb	r6, [r3, #14]
	uhi_msc_data = payload;
   9a58a:	4f11      	ldr	r7, [pc, #68]	; (9a5d0 <uhi_msc_enable_step4+0x150>)
   9a58c:	4e0b      	ldr	r6, [pc, #44]	; (9a5bc <uhi_msc_enable_step4+0x13c>)
	uhi_msc_scsi_sub_callback = callback;
   9a58e:	6025      	str	r5, [r4, #0]
	uhi_msc_scsi_callback = callback;
   9a590:	f8ce c000 	str.w	ip, [lr]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a594:	4d0b      	ldr	r5, [pc, #44]	; (9a5c4 <uhi_msc_enable_step4+0x144>)
	uhi_msc_data = payload;
   9a596:	6037      	str	r7, [r6, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a598:	47a8      	blx	r5
   9a59a:	2800      	cmp	r0, #0
   9a59c:	d1a5      	bne.n	9a4ea <uhi_msc_enable_step4+0x6a>
		uhi_msc_scsi_sub_callback(false);
   9a59e:	6823      	ldr	r3, [r4, #0]
   9a5a0:	e7a7      	b.n	9a4f2 <uhi_msc_enable_step4+0x72>
   9a5a2:	bf00      	nop
   9a5a4:	20072c48 	.word	0x20072c48
   9a5a8:	2007024c 	.word	0x2007024c
   9a5ac:	20072c7c 	.word	0x20072c7c
   9a5b0:	0009a28d 	.word	0x0009a28d
   9a5b4:	20072c84 	.word	0x20072c84
   9a5b8:	0009a5e1 	.word	0x0009a5e1
   9a5bc:	20072c44 	.word	0x20072c44
   9a5c0:	20072c2c 	.word	0x20072c2c
   9a5c4:	0009ea1d 	.word	0x0009ea1d
   9a5c8:	20070248 	.word	0x20070248
   9a5cc:	00099fd9 	.word	0x00099fd9
   9a5d0:	20072c54 	.word	0x20072c54
   9a5d4:	0009a121 	.word	0x0009a121
   9a5d8:	20072c78 	.word	0x20072c78
   9a5dc:	0009a481 	.word	0x0009a481

0009a5e0 <uhi_msc_scsi_read_capacity_done>:
{
   9a5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   9a5e4:	b085      	sub	sp, #20
	if ((!b_cbw_succes) || (uhi_msc_csw.bCSWStatus != USB_CSW_STATUS_PASS)
   9a5e6:	b128      	cbz	r0, 9a5f4 <uhi_msc_scsi_read_capacity_done+0x14>
   9a5e8:	4b42      	ldr	r3, [pc, #264]	; (9a6f4 <uhi_msc_scsi_read_capacity_done+0x114>)
   9a5ea:	7b1a      	ldrb	r2, [r3, #12]
   9a5ec:	b912      	cbnz	r2, 9a5f4 <uhi_msc_scsi_read_capacity_done+0x14>
			|| uhi_msc_csw.dCSWDataResidue) {
   9a5ee:	689a      	ldr	r2, [r3, #8]
   9a5f0:	2a00      	cmp	r2, #0
   9a5f2:	d03a      	beq.n	9a66a <uhi_msc_scsi_read_capacity_done+0x8a>
		uhi_msc_lun_sel->status = LUN_FAIL;
   9a5f4:	2401      	movs	r4, #1
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a5f6:	2200      	movs	r2, #0
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_request_sense_data);
   9a5f8:	2512      	movs	r5, #18
	uhi_msc_cbw.CDB[0] = SPC_REQUEST_SENSE;
   9a5fa:	2103      	movs	r1, #3
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a5fc:	261f      	movs	r6, #31
   9a5fe:	f644 6c20 	movw	ip, #20000	; 0x4e20
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a602:	2780      	movs	r7, #128	; 0x80
	uhi_msc_cbw.bCBWCBLength = 6;
   9a604:	f04f 0e06 	mov.w	lr, #6
		uhi_msc_lun_sel->status = LUN_FAIL;
   9a608:	483b      	ldr	r0, [pc, #236]	; (9a6f8 <uhi_msc_scsi_read_capacity_done+0x118>)
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_request_sense_data);
   9a60a:	4b3c      	ldr	r3, [pc, #240]	; (9a6fc <uhi_msc_scsi_read_capacity_done+0x11c>)
		uhi_msc_lun_sel->status = LUN_FAIL;
   9a60c:	6800      	ldr	r0, [r0, #0]
   9a60e:	7244      	strb	r4, [r0, #9]
	uhi_msc_transfer(uhi_msc_dev_sel->ep_out, (uint8_t *) &uhi_msc_cbw,
   9a610:	483b      	ldr	r0, [pc, #236]	; (9a700 <uhi_msc_scsi_read_capacity_done+0x120>)
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a612:	f8c3 200f 	str.w	r2, [r3, #15]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a616:	6804      	ldr	r4, [r0, #0]
	uhi_msc_cbw.CDB[0] = SPC_REQUEST_SENSE;
   9a618:	73d9      	strb	r1, [r3, #15]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a61a:	f8c3 2013 	str.w	r2, [r3, #19]
   9a61e:	f8c3 2017 	str.w	r2, [r3, #23]
	uhi_msc_cbw.CDB[4] = sizeof(struct scsi_request_sense_data);
   9a622:	74dd      	strb	r5, [r3, #19]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a624:	f8c3 201b 	str.w	r2, [r3, #27]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a628:	7941      	ldrb	r1, [r0, #5]
   9a62a:	7ca0      	ldrb	r0, [r4, #18]
	uhi_msc_cbw.dCBWTag++;
   9a62c:	685c      	ldr	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a62e:	e88d 1040 	stmia.w	sp, {r6, ip}
   9a632:	4e34      	ldr	r6, [pc, #208]	; (9a704 <uhi_msc_scsi_read_capacity_done+0x124>)
	uhi_msc_cbw.dCBWTag++;
   9a634:	3401      	adds	r4, #1
   9a636:	605c      	str	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a638:	9602      	str	r6, [sp, #8]
	uhi_msc_scsi_sense_callback = callback;
   9a63a:	4e33      	ldr	r6, [pc, #204]	; (9a708 <uhi_msc_scsi_read_capacity_done+0x128>)
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a63c:	731f      	strb	r7, [r3, #12]
	uhi_msc_scsi_sense_callback = callback;
   9a63e:	4f33      	ldr	r7, [pc, #204]	; (9a70c <uhi_msc_scsi_read_capacity_done+0x12c>)
	uhi_msc_scsi_sub_callback = callback;
   9a640:	4c33      	ldr	r4, [pc, #204]	; (9a710 <uhi_msc_scsi_read_capacity_done+0x130>)
	uhi_msc_scsi_sense_callback = callback;
   9a642:	6037      	str	r7, [r6, #0]
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_request_sense_data);
   9a644:	609d      	str	r5, [r3, #8]
	uhi_msc_data = payload;
   9a646:	4e33      	ldr	r6, [pc, #204]	; (9a714 <uhi_msc_scsi_read_capacity_done+0x134>)
	uhi_msc_scsi_sub_callback = callback;
   9a648:	4d33      	ldr	r5, [pc, #204]	; (9a718 <uhi_msc_scsi_read_capacity_done+0x138>)
	uhi_msc_data = payload;
   9a64a:	4f34      	ldr	r7, [pc, #208]	; (9a71c <uhi_msc_scsi_read_capacity_done+0x13c>)
	uhi_msc_scsi_sub_callback = callback;
   9a64c:	6025      	str	r5, [r4, #0]
	uhi_msc_cbw.bCBWCBLength = 6;
   9a64e:	f883 e00e 	strb.w	lr, [r3, #14]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a652:	4d33      	ldr	r5, [pc, #204]	; (9a720 <uhi_msc_scsi_read_capacity_done+0x140>)
	uhi_msc_data = payload;
   9a654:	6037      	str	r7, [r6, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a656:	47a8      	blx	r5
   9a658:	b110      	cbz	r0, 9a660 <uhi_msc_scsi_read_capacity_done+0x80>
}
   9a65a:	b005      	add	sp, #20
   9a65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uhi_msc_scsi_sub_callback(false);
   9a660:	6823      	ldr	r3, [r4, #0]
}
   9a662:	b005      	add	sp, #20
   9a664:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uhi_msc_scsi_sub_callback(false);
   9a668:	4718      	bx	r3
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(uhi_msc_sense6);
   9a66a:	2510      	movs	r5, #16
	uhi_msc_cbw.CDB[0] = SPC_MODE_SENSE6;
   9a66c:	f04f 081a 	mov.w	r8, #26
	uhi_msc_cbw.CDB[2] = SCSI_MS_MODE_INFEXP;
   9a670:	f04f 0c1c 	mov.w	ip, #28
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a674:	f644 6e20 	movw	lr, #20000	; 0x4e20
   9a678:	241f      	movs	r4, #31
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a67a:	2780      	movs	r7, #128	; 0x80
	uhi_msc_cbw.bCBWCBLength = 6;
   9a67c:	2606      	movs	r6, #6
			be32_to_cpu(uhi_msc_capacity.block_len);
   9a67e:	4829      	ldr	r0, [pc, #164]	; (9a724 <uhi_msc_scsi_read_capacity_done+0x144>)
	uhi_msc_lun_sel->capacity.block_len =
   9a680:	491d      	ldr	r1, [pc, #116]	; (9a6f8 <uhi_msc_scsi_read_capacity_done+0x118>)
			be32_to_cpu(uhi_msc_capacity.max_lba);
   9a682:	6803      	ldr	r3, [r0, #0]
	uhi_msc_lun_sel->capacity.block_len =
   9a684:	f8d1 9000 	ldr.w	r9, [r1]
			be32_to_cpu(uhi_msc_capacity.max_lba);
   9a688:	ba19      	rev	r1, r3
			be32_to_cpu(uhi_msc_capacity.block_len);
   9a68a:	6843      	ldr	r3, [r0, #4]
	uhi_msc_transfer(uhi_msc_dev_sel->ep_out, (uint8_t *) &uhi_msc_cbw,
   9a68c:	481c      	ldr	r0, [pc, #112]	; (9a700 <uhi_msc_scsi_read_capacity_done+0x120>)
			be32_to_cpu(uhi_msc_capacity.block_len);
   9a68e:	ba1b      	rev	r3, r3
	uhi_msc_lun_sel->capacity.block_len =
   9a690:	f8c9 3004 	str.w	r3, [r9, #4]
	uhi_msc_lun_sel->capacity.max_lba =
   9a694:	f8c9 1000 	str.w	r1, [r9]
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(uhi_msc_sense6);
   9a698:	4b18      	ldr	r3, [pc, #96]	; (9a6fc <uhi_msc_scsi_read_capacity_done+0x11c>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a69a:	f8d0 9000 	ldr.w	r9, [r0]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a69e:	f8c3 200f 	str.w	r2, [r3, #15]
   9a6a2:	f8c3 2013 	str.w	r2, [r3, #19]
	uhi_msc_cbw.CDB[0] = SPC_MODE_SENSE6;
   9a6a6:	f883 800f 	strb.w	r8, [r3, #15]
	uhi_msc_cbw.CDB[4] = sizeof(uhi_msc_sense6);
   9a6aa:	74dd      	strb	r5, [r3, #19]
	uhi_msc_cbw.CDB[2] = SCSI_MS_MODE_INFEXP;
   9a6ac:	f883 c011 	strb.w	ip, [r3, #17]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a6b0:	f8c3 2017 	str.w	r2, [r3, #23]
   9a6b4:	f8c3 201b 	str.w	r2, [r3, #27]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a6b8:	7941      	ldrb	r1, [r0, #5]
   9a6ba:	f899 0012 	ldrb.w	r0, [r9, #18]
   9a6be:	e88d 4010 	stmia.w	sp, {r4, lr}
   9a6c2:	f8df e040 	ldr.w	lr, [pc, #64]	; 9a704 <uhi_msc_scsi_read_capacity_done+0x124>
	uhi_msc_cbw.dCBWTag++;
   9a6c6:	685c      	ldr	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a6c8:	f8cd e008 	str.w	lr, [sp, #8]
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(uhi_msc_sense6);
   9a6cc:	609d      	str	r5, [r3, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a6ce:	731f      	strb	r7, [r3, #12]
	uhi_msc_scsi_sub_callback = callback;
   9a6d0:	4d0f      	ldr	r5, [pc, #60]	; (9a710 <uhi_msc_scsi_read_capacity_done+0x130>)
   9a6d2:	f8df e058 	ldr.w	lr, [pc, #88]	; 9a72c <uhi_msc_scsi_read_capacity_done+0x14c>
	uhi_msc_cbw.bCBWCBLength = 6;
   9a6d6:	739e      	strb	r6, [r3, #14]
	uhi_msc_data = payload;
   9a6d8:	4f13      	ldr	r7, [pc, #76]	; (9a728 <uhi_msc_scsi_read_capacity_done+0x148>)
   9a6da:	4e0e      	ldr	r6, [pc, #56]	; (9a714 <uhi_msc_scsi_read_capacity_done+0x134>)
	uhi_msc_cbw.dCBWTag++;
   9a6dc:	3401      	adds	r4, #1
   9a6de:	605c      	str	r4, [r3, #4]
	uhi_msc_scsi_sub_callback = callback;
   9a6e0:	f8c5 e000 	str.w	lr, [r5]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a6e4:	4c0e      	ldr	r4, [pc, #56]	; (9a720 <uhi_msc_scsi_read_capacity_done+0x140>)
	uhi_msc_data = payload;
   9a6e6:	6037      	str	r7, [r6, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a6e8:	47a0      	blx	r4
   9a6ea:	2800      	cmp	r0, #0
   9a6ec:	d1b5      	bne.n	9a65a <uhi_msc_scsi_read_capacity_done+0x7a>
		uhi_msc_scsi_sub_callback(false);
   9a6ee:	682b      	ldr	r3, [r5, #0]
   9a6f0:	e7b7      	b.n	9a662 <uhi_msc_scsi_read_capacity_done+0x82>
   9a6f2:	bf00      	nop
   9a6f4:	20072c34 	.word	0x20072c34
   9a6f8:	20072c78 	.word	0x20072c78
   9a6fc:	2007024c 	.word	0x2007024c
   9a700:	20072c48 	.word	0x20072c48
   9a704:	0009a121 	.word	0x0009a121
   9a708:	20072c80 	.word	0x20072c80
   9a70c:	00099f29 	.word	0x00099f29
   9a710:	20072c84 	.word	0x20072c84
   9a714:	20072c44 	.word	0x20072c44
   9a718:	00099fb5 	.word	0x00099fb5
   9a71c:	20072c88 	.word	0x20072c88
   9a720:	0009ea1d 	.word	0x0009ea1d
   9a724:	20072c2c 	.word	0x20072c2c
   9a728:	20072c9c 	.word	0x20072c9c
   9a72c:	00099f41 	.word	0x00099f41

0009a730 <uhi_msc_scsi_test_unit_ready_done>:
	if (!b_cbw_succes) {
   9a730:	b198      	cbz	r0, 9a75a <uhi_msc_scsi_test_unit_ready_done+0x2a>
{
   9a732:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uhi_msc_csw.bCSWStatus != USB_CSW_STATUS_PASS) {
   9a734:	4b42      	ldr	r3, [pc, #264]	; (9a840 <uhi_msc_scsi_test_unit_ready_done+0x110>)
{
   9a736:	b085      	sub	sp, #20
	if (uhi_msc_csw.bCSWStatus != USB_CSW_STATUS_PASS) {
   9a738:	7b1a      	ldrb	r2, [r3, #12]
   9a73a:	b9aa      	cbnz	r2, 9a768 <uhi_msc_scsi_test_unit_ready_done+0x38>
	if (uhi_msc_lun_sel->status != LUN_GOOD) {
   9a73c:	4b41      	ldr	r3, [pc, #260]	; (9a844 <uhi_msc_scsi_test_unit_ready_done+0x114>)
   9a73e:	6819      	ldr	r1, [r3, #0]
   9a740:	7a4b      	ldrb	r3, [r1, #9]
   9a742:	b11b      	cbz	r3, 9a74c <uhi_msc_scsi_test_unit_ready_done+0x1c>
		if (uhi_msc_lun_sel->status == LUN_BUSY) {
   9a744:	2b03      	cmp	r3, #3
   9a746:	d046      	beq.n	9a7d6 <uhi_msc_scsi_test_unit_ready_done+0xa6>
		uhi_msc_lun_sel->status = LUN_BUSY;
   9a748:	2303      	movs	r3, #3
   9a74a:	724b      	strb	r3, [r1, #9]
	uhi_msc_scsi_callback(true);
   9a74c:	2001      	movs	r0, #1
   9a74e:	4b3e      	ldr	r3, [pc, #248]	; (9a848 <uhi_msc_scsi_test_unit_ready_done+0x118>)
   9a750:	681b      	ldr	r3, [r3, #0]
}
   9a752:	b005      	add	sp, #20
   9a754:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	uhi_msc_scsi_callback(true);
   9a758:	4718      	bx	r3
		uhi_msc_lun_sel->status = LUN_FAIL;
   9a75a:	2101      	movs	r1, #1
   9a75c:	4a39      	ldr	r2, [pc, #228]	; (9a844 <uhi_msc_scsi_test_unit_ready_done+0x114>)
		uhi_msc_scsi_callback(false);
   9a75e:	4b3a      	ldr	r3, [pc, #232]	; (9a848 <uhi_msc_scsi_test_unit_ready_done+0x118>)
		uhi_msc_lun_sel->status = LUN_FAIL;
   9a760:	6812      	ldr	r2, [r2, #0]
		uhi_msc_scsi_callback(false);
   9a762:	681b      	ldr	r3, [r3, #0]
		uhi_msc_lun_sel->status = LUN_FAIL;
   9a764:	7251      	strb	r1, [r2, #9]
		uhi_msc_scsi_callback(false);
   9a766:	4718      	bx	r3
		uhi_msc_lun_sel->status = LUN_FAIL; // By default
   9a768:	2401      	movs	r4, #1
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a76a:	2200      	movs	r2, #0
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_request_sense_data);
   9a76c:	2512      	movs	r5, #18
	uhi_msc_cbw.CDB[0] = SPC_REQUEST_SENSE;
   9a76e:	2103      	movs	r1, #3
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a770:	261f      	movs	r6, #31
   9a772:	f644 6c20 	movw	ip, #20000	; 0x4e20
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a776:	2780      	movs	r7, #128	; 0x80
	uhi_msc_cbw.bCBWCBLength = 6;
   9a778:	f04f 0e06 	mov.w	lr, #6
		uhi_msc_lun_sel->status = LUN_FAIL; // By default
   9a77c:	4831      	ldr	r0, [pc, #196]	; (9a844 <uhi_msc_scsi_test_unit_ready_done+0x114>)
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_request_sense_data);
   9a77e:	4b33      	ldr	r3, [pc, #204]	; (9a84c <uhi_msc_scsi_test_unit_ready_done+0x11c>)
		uhi_msc_lun_sel->status = LUN_FAIL; // By default
   9a780:	6800      	ldr	r0, [r0, #0]
   9a782:	7244      	strb	r4, [r0, #9]
	uhi_msc_transfer(uhi_msc_dev_sel->ep_out, (uint8_t *) &uhi_msc_cbw,
   9a784:	4832      	ldr	r0, [pc, #200]	; (9a850 <uhi_msc_scsi_test_unit_ready_done+0x120>)
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a786:	f8c3 200f 	str.w	r2, [r3, #15]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a78a:	6804      	ldr	r4, [r0, #0]
	uhi_msc_cbw.CDB[0] = SPC_REQUEST_SENSE;
   9a78c:	73d9      	strb	r1, [r3, #15]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a78e:	f8c3 2013 	str.w	r2, [r3, #19]
   9a792:	f8c3 2017 	str.w	r2, [r3, #23]
	uhi_msc_cbw.CDB[4] = sizeof(struct scsi_request_sense_data);
   9a796:	74dd      	strb	r5, [r3, #19]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a798:	f8c3 201b 	str.w	r2, [r3, #27]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a79c:	7941      	ldrb	r1, [r0, #5]
   9a79e:	7ca0      	ldrb	r0, [r4, #18]
	uhi_msc_cbw.dCBWTag++;
   9a7a0:	685c      	ldr	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a7a2:	e88d 1040 	stmia.w	sp, {r6, ip}
   9a7a6:	4e2b      	ldr	r6, [pc, #172]	; (9a854 <uhi_msc_scsi_test_unit_ready_done+0x124>)
	uhi_msc_cbw.dCBWTag++;
   9a7a8:	3401      	adds	r4, #1
   9a7aa:	605c      	str	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a7ac:	9602      	str	r6, [sp, #8]
	uhi_msc_scsi_sense_callback = callback;
   9a7ae:	4e2a      	ldr	r6, [pc, #168]	; (9a858 <uhi_msc_scsi_test_unit_ready_done+0x128>)
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a7b0:	731f      	strb	r7, [r3, #12]
	uhi_msc_scsi_sense_callback = callback;
   9a7b2:	4f2a      	ldr	r7, [pc, #168]	; (9a85c <uhi_msc_scsi_test_unit_ready_done+0x12c>)
	uhi_msc_scsi_sub_callback = callback;
   9a7b4:	4c2a      	ldr	r4, [pc, #168]	; (9a860 <uhi_msc_scsi_test_unit_ready_done+0x130>)
	uhi_msc_scsi_sense_callback = callback;
   9a7b6:	6037      	str	r7, [r6, #0]
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct scsi_request_sense_data);
   9a7b8:	609d      	str	r5, [r3, #8]
	uhi_msc_data = payload;
   9a7ba:	4e2a      	ldr	r6, [pc, #168]	; (9a864 <uhi_msc_scsi_test_unit_ready_done+0x134>)
	uhi_msc_scsi_sub_callback = callback;
   9a7bc:	4d2a      	ldr	r5, [pc, #168]	; (9a868 <uhi_msc_scsi_test_unit_ready_done+0x138>)
	uhi_msc_data = payload;
   9a7be:	4f2b      	ldr	r7, [pc, #172]	; (9a86c <uhi_msc_scsi_test_unit_ready_done+0x13c>)
	uhi_msc_scsi_sub_callback = callback;
   9a7c0:	6025      	str	r5, [r4, #0]
	uhi_msc_cbw.bCBWCBLength = 6;
   9a7c2:	f883 e00e 	strb.w	lr, [r3, #14]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a7c6:	4d2a      	ldr	r5, [pc, #168]	; (9a870 <uhi_msc_scsi_test_unit_ready_done+0x140>)
	uhi_msc_data = payload;
   9a7c8:	6037      	str	r7, [r6, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a7ca:	47a8      	blx	r5
   9a7cc:	b108      	cbz	r0, 9a7d2 <uhi_msc_scsi_test_unit_ready_done+0xa2>
}
   9a7ce:	b005      	add	sp, #20
   9a7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uhi_msc_scsi_sub_callback(false);
   9a7d2:	6823      	ldr	r3, [r4, #0]
   9a7d4:	e7bd      	b.n	9a752 <uhi_msc_scsi_test_unit_ready_done+0x22>
	uhi_msc_cbw.CDB[0] = SBC_READ_CAPACITY10;
   9a7d6:	f04f 0c25 	mov.w	ip, #37	; 0x25
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a7da:	f644 6e20 	movw	lr, #20000	; 0x4e20
   9a7de:	241f      	movs	r4, #31
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct sbc_read_capacity10_data);
   9a7e0:	2508      	movs	r5, #8
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a7e2:	2780      	movs	r7, #128	; 0x80
	uhi_msc_cbw.bCBWCBLength = 10;
   9a7e4:	260a      	movs	r6, #10
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct sbc_read_capacity10_data);
   9a7e6:	4b19      	ldr	r3, [pc, #100]	; (9a84c <uhi_msc_scsi_test_unit_ready_done+0x11c>)
	uhi_msc_transfer(uhi_msc_dev_sel->ep_out, (uint8_t *) &uhi_msc_cbw,
   9a7e8:	4819      	ldr	r0, [pc, #100]	; (9a850 <uhi_msc_scsi_test_unit_ready_done+0x120>)
			uhi_msc_lun_sel->status = LUN_GOOD;
   9a7ea:	724a      	strb	r2, [r1, #9]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a7ec:	f8c3 200f 	str.w	r2, [r3, #15]
	uhi_msc_cbw.CDB[0] = SBC_READ_CAPACITY10;
   9a7f0:	f883 c00f 	strb.w	ip, [r3, #15]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a7f4:	f8d0 c000 	ldr.w	ip, [r0]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9a7f8:	f8c3 2013 	str.w	r2, [r3, #19]
   9a7fc:	f8c3 2017 	str.w	r2, [r3, #23]
   9a800:	f8c3 201b 	str.w	r2, [r3, #27]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a804:	7941      	ldrb	r1, [r0, #5]
   9a806:	f89c 0012 	ldrb.w	r0, [ip, #18]
   9a80a:	e88d 4010 	stmia.w	sp, {r4, lr}
   9a80e:	f8df e044 	ldr.w	lr, [pc, #68]	; 9a854 <uhi_msc_scsi_test_unit_ready_done+0x124>
	uhi_msc_cbw.dCBWTag++;
   9a812:	685c      	ldr	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a814:	f8cd e008 	str.w	lr, [sp, #8]
	uhi_msc_cbw.dCBWDataTransferLength = sizeof(struct sbc_read_capacity10_data);
   9a818:	609d      	str	r5, [r3, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9a81a:	731f      	strb	r7, [r3, #12]
	uhi_msc_scsi_sub_callback = callback;
   9a81c:	4d10      	ldr	r5, [pc, #64]	; (9a860 <uhi_msc_scsi_test_unit_ready_done+0x130>)
   9a81e:	f8df e058 	ldr.w	lr, [pc, #88]	; 9a878 <uhi_msc_scsi_test_unit_ready_done+0x148>
	uhi_msc_cbw.bCBWCBLength = 10;
   9a822:	739e      	strb	r6, [r3, #14]
	uhi_msc_data = payload;
   9a824:	4f13      	ldr	r7, [pc, #76]	; (9a874 <uhi_msc_scsi_test_unit_ready_done+0x144>)
   9a826:	4e0f      	ldr	r6, [pc, #60]	; (9a864 <uhi_msc_scsi_test_unit_ready_done+0x134>)
	uhi_msc_cbw.dCBWTag++;
   9a828:	3401      	adds	r4, #1
   9a82a:	605c      	str	r4, [r3, #4]
	uhi_msc_scsi_sub_callback = callback;
   9a82c:	f8c5 e000 	str.w	lr, [r5]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a830:	4c0f      	ldr	r4, [pc, #60]	; (9a870 <uhi_msc_scsi_test_unit_ready_done+0x140>)
	uhi_msc_data = payload;
   9a832:	6037      	str	r7, [r6, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a834:	47a0      	blx	r4
   9a836:	2800      	cmp	r0, #0
   9a838:	d1c9      	bne.n	9a7ce <uhi_msc_scsi_test_unit_ready_done+0x9e>
		uhi_msc_scsi_sub_callback(false);
   9a83a:	682b      	ldr	r3, [r5, #0]
   9a83c:	e789      	b.n	9a752 <uhi_msc_scsi_test_unit_ready_done+0x22>
   9a83e:	bf00      	nop
   9a840:	20072c34 	.word	0x20072c34
   9a844:	20072c78 	.word	0x20072c78
   9a848:	20072c7c 	.word	0x20072c7c
   9a84c:	2007024c 	.word	0x2007024c
   9a850:	20072c48 	.word	0x20072c48
   9a854:	0009a121 	.word	0x0009a121
   9a858:	20072c80 	.word	0x20072c80
   9a85c:	00099edd 	.word	0x00099edd
   9a860:	20072c84 	.word	0x20072c84
   9a864:	20072c44 	.word	0x20072c44
   9a868:	00099fb5 	.word	0x00099fb5
   9a86c:	20072c88 	.word	0x20072c88
   9a870:	0009ea1d 	.word	0x0009ea1d
   9a874:	20072c2c 	.word	0x20072c2c
   9a878:	0009a5e1 	.word	0x0009a5e1

0009a87c <uhi_msc_install>:
{
   9a87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uhi_msc_dev.dev != NULL) {
   9a880:	4f26      	ldr	r7, [pc, #152]	; (9a91c <uhi_msc_install+0xa0>)
   9a882:	683e      	ldr	r6, [r7, #0]
   9a884:	b116      	cbz	r6, 9a88c <uhi_msc_install+0x10>
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
   9a886:	2005      	movs	r0, #5
   9a888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
   9a88c:	6945      	ldr	r5, [r0, #20]
   9a88e:	886c      	ldrh	r4, [r5, #2]
	while (conf_desc_lgt) {
   9a890:	b32c      	cbz	r4, 9a8de <uhi_msc_install+0x62>
   9a892:	4680      	mov	r8, r0
				b_iface_supported = false;
   9a894:	46b2      	mov	sl, r6
			if (!uhd_ep_alloc(dev->address, ptr_ep, dev->speed)) {
   9a896:	f8df 9088 	ldr.w	r9, [pc, #136]	; 9a920 <uhi_msc_install+0xa4>
   9a89a:	e00a      	b.n	9a8b2 <uhi_msc_install+0x36>
		switch (ptr_iface->bDescriptorType) {
   9a89c:	2b05      	cmp	r3, #5
   9a89e:	d103      	bne.n	9a8a8 <uhi_msc_install+0x2c>
			if (!b_iface_supported) {
   9a8a0:	b116      	cbz	r6, 9a8a8 <uhi_msc_install+0x2c>
			if (ptr_ep->bmAttributes != USB_EP_TYPE_BULK) {
   9a8a2:	78eb      	ldrb	r3, [r5, #3]
   9a8a4:	2b02      	cmp	r3, #2
   9a8a6:	d01d      	beq.n	9a8e4 <uhi_msc_install+0x68>
		conf_desc_lgt -= ptr_iface->bLength;
   9a8a8:	782b      	ldrb	r3, [r5, #0]
   9a8aa:	1ae4      	subs	r4, r4, r3
   9a8ac:	b2a4      	uxth	r4, r4
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
   9a8ae:	441d      	add	r5, r3
	while (conf_desc_lgt) {
   9a8b0:	b1ac      	cbz	r4, 9a8de <uhi_msc_install+0x62>
		switch (ptr_iface->bDescriptorType) {
   9a8b2:	786b      	ldrb	r3, [r5, #1]
   9a8b4:	2b04      	cmp	r3, #4
   9a8b6:	d1f1      	bne.n	9a89c <uhi_msc_install+0x20>
			if ((ptr_iface->bInterfaceClass   == MSC_CLASS)
   9a8b8:	796b      	ldrb	r3, [r5, #5]
   9a8ba:	2b08      	cmp	r3, #8
   9a8bc:	d001      	beq.n	9a8c2 <uhi_msc_install+0x46>
				b_iface_supported = false;
   9a8be:	2600      	movs	r6, #0
   9a8c0:	e7f2      	b.n	9a8a8 <uhi_msc_install+0x2c>
			&& (ptr_iface->bInterfaceSubClass == MSC_SUBCLASS_TRANSPARENT)
   9a8c2:	79ab      	ldrb	r3, [r5, #6]
   9a8c4:	2b06      	cmp	r3, #6
   9a8c6:	d1fa      	bne.n	9a8be <uhi_msc_install+0x42>
			&& (ptr_iface->bInterfaceProtocol == MSC_PROTOCOL_BULK) ) {
   9a8c8:	79eb      	ldrb	r3, [r5, #7]
   9a8ca:	2b50      	cmp	r3, #80	; 0x50
   9a8cc:	d1f7      	bne.n	9a8be <uhi_msc_install+0x42>
				uhi_msc_dev_sel->iface_num = ptr_iface->bInterfaceNumber;
   9a8ce:	78ab      	ldrb	r3, [r5, #2]
				b_iface_supported = true;
   9a8d0:	2601      	movs	r6, #1
				uhi_msc_dev.ep_in = 0;
   9a8d2:	f887 a004 	strb.w	sl, [r7, #4]
				uhi_msc_dev_sel->iface_num = ptr_iface->bInterfaceNumber;
   9a8d6:	71bb      	strb	r3, [r7, #6]
				uhi_msc_dev.ep_out = 0;
   9a8d8:	f887 a005 	strb.w	sl, [r7, #5]
   9a8dc:	e7e4      	b.n	9a8a8 <uhi_msc_install+0x2c>
	return UHC_ENUM_UNSUPPORTED; // No interface supported
   9a8de:	2001      	movs	r0, #1
   9a8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!uhd_ep_alloc(dev->address, ptr_ep, dev->speed)) {
   9a8e4:	f898 2013 	ldrb.w	r2, [r8, #19]
   9a8e8:	4629      	mov	r1, r5
   9a8ea:	f898 0012 	ldrb.w	r0, [r8, #18]
   9a8ee:	47c8      	blx	r9
   9a8f0:	b180      	cbz	r0, 9a914 <uhi_msc_install+0x98>
			if (ptr_ep->bEndpointAddress & USB_EP_DIR_IN) {
   9a8f2:	78ab      	ldrb	r3, [r5, #2]
   9a8f4:	061a      	lsls	r2, r3, #24
				uhi_msc_dev.ep_in = ptr_ep->bEndpointAddress;
   9a8f6:	bf46      	itte	mi
   9a8f8:	713b      	strbmi	r3, [r7, #4]
   9a8fa:	797b      	ldrbmi	r3, [r7, #5]
				uhi_msc_dev.ep_out = ptr_ep->bEndpointAddress;
   9a8fc:	717b      	strbpl	r3, [r7, #5]
			if (uhi_msc_dev.ep_out && uhi_msc_dev.ep_in) {
   9a8fe:	2b00      	cmp	r3, #0
   9a900:	d0d2      	beq.n	9a8a8 <uhi_msc_install+0x2c>
   9a902:	793b      	ldrb	r3, [r7, #4]
   9a904:	2b00      	cmp	r3, #0
   9a906:	d0cf      	beq.n	9a8a8 <uhi_msc_install+0x2c>
				uhi_msc_dev.nb_lun = 0;
   9a908:	2000      	movs	r0, #0
				uhi_msc_dev.dev = dev;
   9a90a:	f8c7 8000 	str.w	r8, [r7]
				uhi_msc_dev.nb_lun = 0;
   9a90e:	71f8      	strb	r0, [r7, #7]
				return UHC_ENUM_SUCCESS;
   9a910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
   9a914:	2004      	movs	r0, #4
}
   9a916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   9a91a:	bf00      	nop
   9a91c:	20072c48 	.word	0x20072c48
   9a920:	0009e455 	.word	0x0009e455

0009a924 <uhi_msc_enable>:
	if (uhi_msc_dev.dev != dev) {
   9a924:	4a11      	ldr	r2, [pc, #68]	; (9a96c <uhi_msc_enable+0x48>)
   9a926:	6813      	ldr	r3, [r2, #0]
   9a928:	4283      	cmp	r3, r0
   9a92a:	d000      	beq.n	9a92e <uhi_msc_enable+0xa>
   9a92c:	4770      	bx	lr
	b_uhi_msc_free = false;
   9a92e:	2100      	movs	r1, #0
{
   9a930:	b5f0      	push	{r4, r5, r6, r7, lr}
	req.wLength = 1;
   9a932:	2401      	movs	r4, #1
	req.bmRequestType = USB_REQ_RECIP_INTERFACE|USB_REQ_TYPE_CLASS|USB_REQ_DIR_IN;
   9a934:	27a1      	movs	r7, #161	; 0xa1
	req.bRequest = USB_REQ_MSC_GET_MAX_LUN;
   9a936:	26fe      	movs	r6, #254	; 0xfe
	uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a938:	4d0d      	ldr	r5, [pc, #52]	; (9a970 <uhi_msc_enable+0x4c>)
{
   9a93a:	b085      	sub	sp, #20
	uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a93c:	7c98      	ldrb	r0, [r3, #18]
   9a93e:	e88d 0022 	stmia.w	sp, {r1, r5}
	b_uhi_msc_free = false;
   9a942:	4b0c      	ldr	r3, [pc, #48]	; (9a974 <uhi_msc_enable+0x50>)
	req.wIndex = uhi_msc_dev_sel->iface_num;
   9a944:	7995      	ldrb	r5, [r2, #6]
	uhi_msc_dev_sel->nb_lun = 0;
   9a946:	71d1      	strb	r1, [r2, #7]
	req.wValue = 0;
   9a948:	f8ad 100a 	strh.w	r1, [sp, #10]
	b_uhi_msc_free = false;
   9a94c:	7019      	strb	r1, [r3, #0]
	req.wLength = 1;
   9a94e:	f8ad 400e 	strh.w	r4, [sp, #14]
	uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a952:	4623      	mov	r3, r4
   9a954:	3207      	adds	r2, #7
   9a956:	a902      	add	r1, sp, #8
   9a958:	4c07      	ldr	r4, [pc, #28]	; (9a978 <uhi_msc_enable+0x54>)
	req.bmRequestType = USB_REQ_RECIP_INTERFACE|USB_REQ_TYPE_CLASS|USB_REQ_DIR_IN;
   9a95a:	f88d 7008 	strb.w	r7, [sp, #8]
	req.bRequest = USB_REQ_MSC_GET_MAX_LUN;
   9a95e:	f88d 6009 	strb.w	r6, [sp, #9]
	req.wIndex = uhi_msc_dev_sel->iface_num;
   9a962:	f8ad 500c 	strh.w	r5, [sp, #12]
	uhd_setup_request(uhi_msc_dev_sel->dev->address,
   9a966:	47a0      	blx	r4
}
   9a968:	b005      	add	sp, #20
   9a96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9a96c:	20072c48 	.word	0x20072c48
   9a970:	0009a371 	.word	0x0009a371
   9a974:	20070248 	.word	0x20070248
   9a978:	0009e8fd 	.word	0x0009e8fd

0009a97c <uhi_msc_uninstall>:
	if (uhi_msc_dev.dev != dev) {
   9a97c:	4b05      	ldr	r3, [pc, #20]	; (9a994 <uhi_msc_uninstall+0x18>)
   9a97e:	681a      	ldr	r2, [r3, #0]
   9a980:	4282      	cmp	r2, r0
   9a982:	d000      	beq.n	9a986 <uhi_msc_uninstall+0xa>
   9a984:	4770      	bx	lr
	uhi_msc_dev.dev = NULL;
   9a986:	2200      	movs	r2, #0
	if (uhi_msc_dev_sel->lun != NULL) {
   9a988:	6898      	ldr	r0, [r3, #8]
	uhi_msc_dev.dev = NULL;
   9a98a:	601a      	str	r2, [r3, #0]
	if (uhi_msc_dev_sel->lun != NULL) {
   9a98c:	2800      	cmp	r0, #0
   9a98e:	d0f9      	beq.n	9a984 <uhi_msc_uninstall+0x8>
		free(uhi_msc_dev_sel->lun);
   9a990:	4b01      	ldr	r3, [pc, #4]	; (9a998 <uhi_msc_uninstall+0x1c>)
   9a992:	4718      	bx	r3
   9a994:	20072c48 	.word	0x20072c48
   9a998:	000a52f1 	.word	0x000a52f1

0009a99c <uhi_msc_is_available>:
	return b_uhi_msc_free;
   9a99c:	4b01      	ldr	r3, [pc, #4]	; (9a9a4 <uhi_msc_is_available+0x8>)
   9a99e:	7818      	ldrb	r0, [r3, #0]
}
   9a9a0:	4770      	bx	lr
   9a9a2:	bf00      	nop
   9a9a4:	20070248 	.word	0x20070248

0009a9a8 <uhi_msc_get_lun>:
	if (uhi_msc_dev.dev == NULL) {
   9a9a8:	4b02      	ldr	r3, [pc, #8]	; (9a9b4 <uhi_msc_get_lun+0xc>)
   9a9aa:	6818      	ldr	r0, [r3, #0]
   9a9ac:	b100      	cbz	r0, 9a9b0 <uhi_msc_get_lun+0x8>
	return uhi_msc_dev.nb_lun;
   9a9ae:	79d8      	ldrb	r0, [r3, #7]
}
   9a9b0:	4770      	bx	lr
   9a9b2:	bf00      	nop
   9a9b4:	20072c48 	.word	0x20072c48

0009a9b8 <uhi_msc_get_lun_desc>:
	if (lun >= uhi_msc_dev.nb_lun) {
   9a9b8:	4b05      	ldr	r3, [pc, #20]	; (9a9d0 <uhi_msc_get_lun_desc+0x18>)
   9a9ba:	79da      	ldrb	r2, [r3, #7]
   9a9bc:	4282      	cmp	r2, r0
	return &uhi_msc_dev.lun[lun];
   9a9be:	bf83      	ittte	hi
   9a9c0:	689b      	ldrhi	r3, [r3, #8]
   9a9c2:	eb00 0040 	addhi.w	r0, r0, r0, lsl #1
   9a9c6:	eb03 0080 	addhi.w	r0, r3, r0, lsl #2
		return NULL;
   9a9ca:	2000      	movls	r0, #0
}
   9a9cc:	4770      	bx	lr
   9a9ce:	bf00      	nop
   9a9d0:	20072c48 	.word	0x20072c48

0009a9d4 <uhi_msc_scsi_test_unit_ready>:
{
   9a9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a9d8:	4c23      	ldr	r4, [pc, #140]	; (9aa68 <uhi_msc_scsi_test_unit_ready+0x94>)
{
   9a9da:	b084      	sub	sp, #16
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9a9dc:	79e3      	ldrb	r3, [r4, #7]
   9a9de:	4283      	cmp	r3, r0
   9a9e0:	d804      	bhi.n	9a9ec <uhi_msc_scsi_test_unit_ready+0x18>
		return false;
   9a9e2:	2300      	movs	r3, #0
}
   9a9e4:	4618      	mov	r0, r3
   9a9e6:	b004      	add	sp, #16
   9a9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uhi_msc_cbw.dCBWDataTransferLength = 0;
   9a9ec:	2200      	movs	r2, #0
   9a9ee:	4605      	mov	r5, r0
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9a9f0:	f04f 0c1f 	mov.w	ip, #31
   9a9f4:	f644 6820 	movw	r8, #20000	; 0x4e20
	uhi_msc_cbw.bCBWCBLength = 6;
   9a9f8:	f04f 0e06 	mov.w	lr, #6
   9a9fc:	460e      	mov	r6, r1
	uhi_msc_lun_num_sel = lun;
   9a9fe:	4b1b      	ldr	r3, [pc, #108]	; (9aa6c <uhi_msc_scsi_test_unit_ready+0x98>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9aa00:	6820      	ldr	r0, [r4, #0]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9aa02:	68a7      	ldr	r7, [r4, #8]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9aa04:	f8c3 200f 	str.w	r2, [r3, #15]
   9aa08:	f8c3 2013 	str.w	r2, [r3, #19]
   9aa0c:	f8c3 2017 	str.w	r2, [r3, #23]
   9aa10:	f8c3 201b 	str.w	r2, [r3, #27]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9aa14:	7961      	ldrb	r1, [r4, #5]
   9aa16:	7c80      	ldrb	r0, [r0, #18]
   9aa18:	f8cd 8004 	str.w	r8, [sp, #4]
   9aa1c:	f8cd c000 	str.w	ip, [sp]
	uhi_msc_lun_num_sel = lun;
   9aa20:	735d      	strb	r5, [r3, #13]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9aa22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   9aa26:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   9aa2a:	4f11      	ldr	r7, [pc, #68]	; (9aa70 <uhi_msc_scsi_test_unit_ready+0x9c>)
	uhi_msc_cbw.dCBWTag++;
   9aa2c:	685c      	ldr	r4, [r3, #4]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9aa2e:	603d      	str	r5, [r7, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9aa30:	4d10      	ldr	r5, [pc, #64]	; (9aa74 <uhi_msc_scsi_test_unit_ready+0xa0>)
	uhi_msc_data = payload;
   9aa32:	4f11      	ldr	r7, [pc, #68]	; (9aa78 <uhi_msc_scsi_test_unit_ready+0xa4>)
	uhi_msc_cbw.dCBWTag++;
   9aa34:	3401      	adds	r4, #1
	uhi_msc_cbw.bCBWCBLength = 6;
   9aa36:	f883 e00e 	strb.w	lr, [r3, #14]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9aa3a:	9502      	str	r5, [sp, #8]
	uhi_msc_cbw.dCBWTag++;
   9aa3c:	605c      	str	r4, [r3, #4]
	uhi_msc_scsi_callback = callback;
   9aa3e:	4d0f      	ldr	r5, [pc, #60]	; (9aa7c <uhi_msc_scsi_test_unit_ready+0xa8>)
	uhi_msc_data = payload;
   9aa40:	603a      	str	r2, [r7, #0]
	uhi_msc_scsi_sub_callback = callback;
   9aa42:	4c0f      	ldr	r4, [pc, #60]	; (9aa80 <uhi_msc_scsi_test_unit_ready+0xac>)
   9aa44:	4f0f      	ldr	r7, [pc, #60]	; (9aa84 <uhi_msc_scsi_test_unit_ready+0xb0>)
	uhi_msc_cbw.dCBWDataTransferLength = 0;
   9aa46:	609a      	str	r2, [r3, #8]
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_OUT;
   9aa48:	731a      	strb	r2, [r3, #12]
	uhi_msc_scsi_callback = callback;
   9aa4a:	602e      	str	r6, [r5, #0]
	uhi_msc_scsi_sub_callback = callback;
   9aa4c:	6027      	str	r7, [r4, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9aa4e:	4d0e      	ldr	r5, [pc, #56]	; (9aa88 <uhi_msc_scsi_test_unit_ready+0xb4>)
   9aa50:	47a8      	blx	r5
   9aa52:	4603      	mov	r3, r0
   9aa54:	2800      	cmp	r0, #0
   9aa56:	d1c5      	bne.n	9a9e4 <uhi_msc_scsi_test_unit_ready+0x10>
		uhi_msc_scsi_sub_callback(false);
   9aa58:	6823      	ldr	r3, [r4, #0]
   9aa5a:	4798      	blx	r3
	return true;
   9aa5c:	2301      	movs	r3, #1
}
   9aa5e:	4618      	mov	r0, r3
   9aa60:	b004      	add	sp, #16
   9aa62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9aa66:	bf00      	nop
   9aa68:	20072c48 	.word	0x20072c48
   9aa6c:	2007024c 	.word	0x2007024c
   9aa70:	20072c78 	.word	0x20072c78
   9aa74:	0009a121 	.word	0x0009a121
   9aa78:	20072c44 	.word	0x20072c44
   9aa7c:	20072c7c 	.word	0x20072c7c
   9aa80:	20072c84 	.word	0x20072c84
   9aa84:	0009a731 	.word	0x0009a731
   9aa88:	0009ea1d 	.word	0x0009ea1d

0009aa8c <uhi_msc_scsi_read_10>:
{
   9aa8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9aa90:	4d30      	ldr	r5, [pc, #192]	; (9ab54 <uhi_msc_scsi_read_10+0xc8>)
{
   9aa92:	b087      	sub	sp, #28
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9aa94:	79ec      	ldrb	r4, [r5, #7]
{
   9aa96:	9105      	str	r1, [sp, #20]
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9aa98:	4284      	cmp	r4, r0
   9aa9a:	d804      	bhi.n	9aaa6 <uhi_msc_scsi_read_10+0x1a>
		return false;
   9aa9c:	2300      	movs	r3, #0
}
   9aa9e:	4618      	mov	r0, r3
   9aaa0:	b007      	add	sp, #28
   9aaa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   9aaa6:	4619      	mov	r1, r3
   9aaa8:	4616      	mov	r6, r2
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9aaaa:	2200      	movs	r2, #0
	uhi_msc_cbw.CDB[0] = SBC_READ10;
   9aaac:	f04f 0928 	mov.w	r9, #40	; 0x28
	uhi_msc_cbw.bCBWCBLength = 10;
   9aab0:	f04f 0c0a 	mov.w	ip, #10
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9aab4:	f644 6e20 	movw	lr, #20000	; 0x4e20
   9aab8:	271f      	movs	r7, #31
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9aaba:	f04f 0880 	mov.w	r8, #128	; 0x80
	uhi_msc_lun_num_sel = lun;
   9aabe:	4b26      	ldr	r3, [pc, #152]	; (9ab58 <uhi_msc_scsi_read_10+0xcc>)
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9aac0:	68ac      	ldr	r4, [r5, #8]
	uhi_msc_lun_num_sel = lun;
   9aac2:	7358      	strb	r0, [r3, #13]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9aac4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   9aac8:	eb04 0480 	add.w	r4, r4, r0, lsl #2
			nb_sector * uhi_msc_lun_sel->capacity.block_len;
   9aacc:	6860      	ldr	r0, [r4, #4]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9aace:	f8c3 2017 	str.w	r2, [r3, #23]
			nb_sector * uhi_msc_lun_sel->capacity.block_len;
   9aad2:	fb01 f000 	mul.w	r0, r1, r0
	uhi_msc_cbw.CDB[8] = nb_sector; // LSB
   9aad6:	75d9      	strb	r1, [r3, #23]
	uhi_msc_cbw.CDB[4] = MSB2W(addr);
   9aad8:	f89d 1015 	ldrb.w	r1, [sp, #21]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9aadc:	f8c3 2013 	str.w	r2, [r3, #19]
	uhi_msc_cbw.dCBWDataTransferLength =
   9aae0:	6098      	str	r0, [r3, #8]
	uhi_msc_cbw.CDB[4] = MSB2W(addr);
   9aae2:	74d9      	strb	r1, [r3, #19]
	uhi_msc_cbw.CDB[3] = MSB1W(addr);
   9aae4:	f89d 0016 	ldrb.w	r0, [sp, #22]
	uhi_msc_cbw.CDB[5] = MSB3W(addr);
   9aae8:	f89d 1014 	ldrb.w	r1, [sp, #20]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9aaec:	f8c3 200f 	str.w	r2, [r3, #15]
	uhi_msc_cbw.CDB[5] = MSB3W(addr);
   9aaf0:	7519      	strb	r1, [r3, #20]
	uhi_msc_cbw.CDB[3] = MSB1W(addr);
   9aaf2:	7498      	strb	r0, [r3, #18]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9aaf4:	7969      	ldrb	r1, [r5, #5]
   9aaf6:	6828      	ldr	r0, [r5, #0]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9aaf8:	4d18      	ldr	r5, [pc, #96]	; (9ab5c <uhi_msc_scsi_read_10+0xd0>)
	uhi_msc_cbw.CDB[0] = SBC_READ10;
   9aafa:	f883 900f 	strb.w	r9, [r3, #15]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9aafe:	602c      	str	r4, [r5, #0]
	uhi_msc_cbw.dCBWTag++;
   9ab00:	685c      	ldr	r4, [r3, #4]
	uhi_msc_cbw.CDB[2] = MSB0W(addr);
   9ab02:	f89d 9017 	ldrb.w	r9, [sp, #23]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9ab06:	f8c3 201b 	str.w	r2, [r3, #27]
	uhi_msc_cbw.CDB[2] = MSB0W(addr);
   9ab0a:	f883 9011 	strb.w	r9, [r3, #17]
	uhi_msc_cbw.dCBWTag++;
   9ab0e:	3401      	adds	r4, #1
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_IN;
   9ab10:	f883 800c 	strb.w	r8, [r3, #12]
	uhi_msc_cbw.bCBWCBLength = 10;
   9ab14:	f883 c00e 	strb.w	ip, [r3, #14]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ab18:	7c80      	ldrb	r0, [r0, #18]
	uhi_msc_scsi_callback = callback;
   9ab1a:	4d11      	ldr	r5, [pc, #68]	; (9ab60 <uhi_msc_scsi_read_10+0xd4>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ab1c:	f8cd e004 	str.w	lr, [sp, #4]
	uhi_msc_cbw.dCBWTag++;
   9ab20:	605c      	str	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ab22:	9700      	str	r7, [sp, #0]
	uhi_msc_scsi_callback = callback;
   9ab24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	uhi_msc_scsi_sub_callback = callback;
   9ab26:	f8df e04c 	ldr.w	lr, [pc, #76]	; 9ab74 <uhi_msc_scsi_read_10+0xe8>
	uhi_msc_scsi_callback = callback;
   9ab2a:	602f      	str	r7, [r5, #0]
	uhi_msc_data = payload;
   9ab2c:	4d0d      	ldr	r5, [pc, #52]	; (9ab64 <uhi_msc_scsi_read_10+0xd8>)
	uhi_msc_scsi_sub_callback = callback;
   9ab2e:	4c0e      	ldr	r4, [pc, #56]	; (9ab68 <uhi_msc_scsi_read_10+0xdc>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ab30:	4f0e      	ldr	r7, [pc, #56]	; (9ab6c <uhi_msc_scsi_read_10+0xe0>)
	uhi_msc_data = payload;
   9ab32:	602e      	str	r6, [r5, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ab34:	4d0e      	ldr	r5, [pc, #56]	; (9ab70 <uhi_msc_scsi_read_10+0xe4>)
	uhi_msc_scsi_sub_callback = callback;
   9ab36:	f8c4 e000 	str.w	lr, [r4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ab3a:	9702      	str	r7, [sp, #8]
   9ab3c:	47a8      	blx	r5
   9ab3e:	4603      	mov	r3, r0
   9ab40:	2800      	cmp	r0, #0
   9ab42:	d1ac      	bne.n	9aa9e <uhi_msc_scsi_read_10+0x12>
		uhi_msc_scsi_sub_callback(false);
   9ab44:	6823      	ldr	r3, [r4, #0]
   9ab46:	4798      	blx	r3
	return true;
   9ab48:	2301      	movs	r3, #1
}
   9ab4a:	4618      	mov	r0, r3
   9ab4c:	b007      	add	sp, #28
   9ab4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   9ab52:	bf00      	nop
   9ab54:	20072c48 	.word	0x20072c48
   9ab58:	2007024c 	.word	0x2007024c
   9ab5c:	20072c78 	.word	0x20072c78
   9ab60:	20072c7c 	.word	0x20072c7c
   9ab64:	20072c44 	.word	0x20072c44
   9ab68:	20072c84 	.word	0x20072c84
   9ab6c:	0009a121 	.word	0x0009a121
   9ab70:	0009ea1d 	.word	0x0009ea1d
   9ab74:	00099ff9 	.word	0x00099ff9

0009ab78 <uhi_msc_scsi_write_10>:
{
   9ab78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9ab7c:	4d2e      	ldr	r5, [pc, #184]	; (9ac38 <uhi_msc_scsi_write_10+0xc0>)
{
   9ab7e:	b086      	sub	sp, #24
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9ab80:	79ec      	ldrb	r4, [r5, #7]
{
   9ab82:	9105      	str	r1, [sp, #20]
	if (lun >= uhi_msc_dev_sel->nb_lun) {
   9ab84:	4284      	cmp	r4, r0
   9ab86:	d804      	bhi.n	9ab92 <uhi_msc_scsi_write_10+0x1a>
		return false;
   9ab88:	2300      	movs	r3, #0
}
   9ab8a:	4618      	mov	r0, r3
   9ab8c:	b006      	add	sp, #24
   9ab8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9ab92:	4619      	mov	r1, r3
   9ab94:	4616      	mov	r6, r2
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_OUT;
   9ab96:	2200      	movs	r2, #0
	uhi_msc_cbw.CDB[0] = SBC_WRITE10;
   9ab98:	f04f 082a 	mov.w	r8, #42	; 0x2a
	uhi_msc_cbw.bCBWCBLength = 10;
   9ab9c:	f04f 0c0a 	mov.w	ip, #10
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9aba0:	f644 6e20 	movw	lr, #20000	; 0x4e20
   9aba4:	271f      	movs	r7, #31
	uhi_msc_lun_num_sel = lun;
   9aba6:	4b25      	ldr	r3, [pc, #148]	; (9ac3c <uhi_msc_scsi_write_10+0xc4>)
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9aba8:	68ac      	ldr	r4, [r5, #8]
	uhi_msc_lun_num_sel = lun;
   9abaa:	7358      	strb	r0, [r3, #13]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9abac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   9abb0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
			nb_sector * uhi_msc_lun_sel->capacity.block_len;
   9abb4:	6860      	ldr	r0, [r4, #4]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9abb6:	f8c3 2017 	str.w	r2, [r3, #23]
			nb_sector * uhi_msc_lun_sel->capacity.block_len;
   9abba:	fb01 f000 	mul.w	r0, r1, r0
	uhi_msc_cbw.CDB[8] = nb_sector; // LSB
   9abbe:	75d9      	strb	r1, [r3, #23]
	uhi_msc_cbw.CDB[4] = MSB2W(addr);
   9abc0:	f89d 1015 	ldrb.w	r1, [sp, #21]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9abc4:	f8c3 2013 	str.w	r2, [r3, #19]
	uhi_msc_cbw.dCBWDataTransferLength =
   9abc8:	6098      	str	r0, [r3, #8]
	uhi_msc_cbw.CDB[4] = MSB2W(addr);
   9abca:	74d9      	strb	r1, [r3, #19]
	uhi_msc_cbw.CDB[3] = MSB1W(addr);
   9abcc:	f89d 0016 	ldrb.w	r0, [sp, #22]
	uhi_msc_cbw.CDB[5] = MSB3W(addr);
   9abd0:	f89d 1014 	ldrb.w	r1, [sp, #20]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9abd4:	f8c3 200f 	str.w	r2, [r3, #15]
	uhi_msc_cbw.CDB[5] = MSB3W(addr);
   9abd8:	7519      	strb	r1, [r3, #20]
	uhi_msc_cbw.CDB[3] = MSB1W(addr);
   9abda:	7498      	strb	r0, [r3, #18]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9abdc:	7969      	ldrb	r1, [r5, #5]
   9abde:	6828      	ldr	r0, [r5, #0]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9abe0:	4d17      	ldr	r5, [pc, #92]	; (9ac40 <uhi_msc_scsi_write_10+0xc8>)
	uhi_msc_cbw.CDB[0] = SBC_WRITE10;
   9abe2:	f883 800f 	strb.w	r8, [r3, #15]
	uhi_msc_lun_sel = &uhi_msc_dev_sel->lun[lun];
   9abe6:	602c      	str	r4, [r5, #0]
	uhi_msc_cbw.dCBWTag++;
   9abe8:	685c      	ldr	r4, [r3, #4]
	uhi_msc_cbw.CDB[2] = MSB0W(addr);
   9abea:	f89d 8017 	ldrb.w	r8, [sp, #23]
	memset(uhi_msc_cbw.CDB, 0, sizeof(uhi_msc_cbw.CDB));
   9abee:	f8c3 201b 	str.w	r2, [r3, #27]
	uhi_msc_cbw.CDB[2] = MSB0W(addr);
   9abf2:	f883 8011 	strb.w	r8, [r3, #17]
	uhi_msc_cbw.dCBWTag++;
   9abf6:	3401      	adds	r4, #1
	uhi_msc_cbw.bmCBWFlags = USB_CBW_DIRECTION_OUT;
   9abf8:	731a      	strb	r2, [r3, #12]
	uhi_msc_cbw.bCBWCBLength = 10;
   9abfa:	f883 c00e 	strb.w	ip, [r3, #14]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9abfe:	7c80      	ldrb	r0, [r0, #18]
	uhi_msc_scsi_callback = callback;
   9ac00:	4d10      	ldr	r5, [pc, #64]	; (9ac44 <uhi_msc_scsi_write_10+0xcc>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ac02:	f8cd e004 	str.w	lr, [sp, #4]
	uhi_msc_cbw.dCBWTag++;
   9ac06:	605c      	str	r4, [r3, #4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ac08:	9700      	str	r7, [sp, #0]
	uhi_msc_scsi_callback = callback;
   9ac0a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	uhi_msc_scsi_sub_callback = callback;
   9ac0c:	f8df e048 	ldr.w	lr, [pc, #72]	; 9ac58 <uhi_msc_scsi_write_10+0xe0>
	uhi_msc_scsi_callback = callback;
   9ac10:	602f      	str	r7, [r5, #0]
	uhi_msc_data = payload;
   9ac12:	4d0d      	ldr	r5, [pc, #52]	; (9ac48 <uhi_msc_scsi_write_10+0xd0>)
	uhi_msc_scsi_sub_callback = callback;
   9ac14:	4c0d      	ldr	r4, [pc, #52]	; (9ac4c <uhi_msc_scsi_write_10+0xd4>)
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ac16:	4f0e      	ldr	r7, [pc, #56]	; (9ac50 <uhi_msc_scsi_write_10+0xd8>)
	uhi_msc_data = payload;
   9ac18:	602e      	str	r6, [r5, #0]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ac1a:	4d0e      	ldr	r5, [pc, #56]	; (9ac54 <uhi_msc_scsi_write_10+0xdc>)
	uhi_msc_scsi_sub_callback = callback;
   9ac1c:	f8c4 e000 	str.w	lr, [r4]
	if (!uhd_ep_run(uhi_msc_dev_sel->dev->address,
   9ac20:	9702      	str	r7, [sp, #8]
   9ac22:	47a8      	blx	r5
   9ac24:	4603      	mov	r3, r0
   9ac26:	2800      	cmp	r0, #0
   9ac28:	d1af      	bne.n	9ab8a <uhi_msc_scsi_write_10+0x12>
		uhi_msc_scsi_sub_callback(false);
   9ac2a:	6823      	ldr	r3, [r4, #0]
   9ac2c:	4798      	blx	r3
	return true;
   9ac2e:	2301      	movs	r3, #1
}
   9ac30:	4618      	mov	r0, r3
   9ac32:	b006      	add	sp, #24
   9ac34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9ac38:	20072c48 	.word	0x20072c48
   9ac3c:	2007024c 	.word	0x2007024c
   9ac40:	20072c78 	.word	0x20072c78
   9ac44:	20072c7c 	.word	0x20072c7c
   9ac48:	20072c44 	.word	0x20072c44
   9ac4c:	20072c84 	.word	0x20072c84
   9ac50:	0009a121 	.word	0x0009a121
   9ac54:	0009ea1d 	.word	0x0009ea1d
   9ac58:	00099f85 	.word	0x00099f85

0009ac5c <uhi_msc_mem_stop_pooling>:
 *
 * \param b_success true, if the scsi command is successful
 */
static void uhi_msc_mem_stop_pooling(bool b_success)
{
	uhi_msc_mem_command_ongoing = false;
   9ac5c:	2100      	movs	r1, #0
   9ac5e:	4a02      	ldr	r2, [pc, #8]	; (9ac68 <uhi_msc_mem_stop_pooling+0xc>)
	uhi_msc_mem_command_status = b_success;
   9ac60:	4b02      	ldr	r3, [pc, #8]	; (9ac6c <uhi_msc_mem_stop_pooling+0x10>)
	uhi_msc_mem_command_ongoing = false;
   9ac62:	7011      	strb	r1, [r2, #0]
	uhi_msc_mem_command_status = b_success;
   9ac64:	7018      	strb	r0, [r3, #0]
   9ac66:	4770      	bx	lr
   9ac68:	20072cac 	.word	0x20072cac
   9ac6c:	20072cad 	.word	0x20072cad

0009ac70 <uhi_msc_mem_get_lun>:
{
   9ac70:	b510      	push	{r4, lr}
   9ac72:	4c04      	ldr	r4, [pc, #16]	; (9ac84 <uhi_msc_mem_get_lun+0x14>)
	while (!uhi_msc_is_available());
   9ac74:	47a0      	blx	r4
   9ac76:	2800      	cmp	r0, #0
   9ac78:	d0fc      	beq.n	9ac74 <uhi_msc_mem_get_lun+0x4>
	return uhi_msc_get_lun();
   9ac7a:	4b03      	ldr	r3, [pc, #12]	; (9ac88 <uhi_msc_mem_get_lun+0x18>)
}
   9ac7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return uhi_msc_get_lun();
   9ac80:	4718      	bx	r3
   9ac82:	bf00      	nop
   9ac84:	0009a99d 	.word	0x0009a99d
   9ac88:	0009a9a9 	.word	0x0009a9a9

0009ac8c <uhi_msc_mem_test_unit_ready>:
{
   9ac8c:	b570      	push	{r4, r5, r6, lr}
   9ac8e:	4605      	mov	r5, r0
   9ac90:	4c0f      	ldr	r4, [pc, #60]	; (9acd0 <uhi_msc_mem_test_unit_ready+0x44>)
	while (!uhi_msc_is_available());
   9ac92:	47a0      	blx	r4
   9ac94:	2800      	cmp	r0, #0
   9ac96:	d0fc      	beq.n	9ac92 <uhi_msc_mem_test_unit_ready+0x6>
	uhi_msc_mem_command_ongoing = true;
   9ac98:	2201      	movs	r2, #1
   9ac9a:	4c0e      	ldr	r4, [pc, #56]	; (9acd4 <uhi_msc_mem_test_unit_ready+0x48>)
	uhi_msc_mem_lun = lun;
   9ac9c:	4e0e      	ldr	r6, [pc, #56]	; (9acd8 <uhi_msc_mem_test_unit_ready+0x4c>)
	if (!uhi_msc_scsi_test_unit_ready(uhi_msc_mem_lun, uhi_msc_mem_stop_pooling)) {
   9ac9e:	4628      	mov	r0, r5
   9aca0:	490e      	ldr	r1, [pc, #56]	; (9acdc <uhi_msc_mem_test_unit_ready+0x50>)
   9aca2:	4b0f      	ldr	r3, [pc, #60]	; (9ace0 <uhi_msc_mem_test_unit_ready+0x54>)
	uhi_msc_mem_command_ongoing = true;
   9aca4:	7022      	strb	r2, [r4, #0]
	uhi_msc_mem_lun = lun;
   9aca6:	7035      	strb	r5, [r6, #0]
	if (!uhi_msc_scsi_test_unit_ready(uhi_msc_mem_lun, uhi_msc_mem_stop_pooling)) {
   9aca8:	4798      	blx	r3
   9acaa:	b128      	cbz	r0, 9acb8 <uhi_msc_mem_test_unit_ready+0x2c>
	while (uhi_msc_mem_command_ongoing);
   9acac:	7823      	ldrb	r3, [r4, #0]
   9acae:	2b00      	cmp	r3, #0
   9acb0:	d1fc      	bne.n	9acac <uhi_msc_mem_test_unit_ready+0x20>
	if (!uhi_msc_mem_command_status) {
   9acb2:	4b0c      	ldr	r3, [pc, #48]	; (9ace4 <uhi_msc_mem_test_unit_ready+0x58>)
   9acb4:	781b      	ldrb	r3, [r3, #0]
   9acb6:	b90b      	cbnz	r3, 9acbc <uhi_msc_mem_test_unit_ready+0x30>
		return CTRL_FAIL;
   9acb8:	2001      	movs	r0, #1
   9acba:	bd70      	pop	{r4, r5, r6, pc}
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
   9acbc:	4b0a      	ldr	r3, [pc, #40]	; (9ace8 <uhi_msc_mem_test_unit_ready+0x5c>)
   9acbe:	7830      	ldrb	r0, [r6, #0]
   9acc0:	4798      	blx	r3
	return uhi_msc_mem_translate_status(lun_desc->status);
   9acc2:	7a43      	ldrb	r3, [r0, #9]
   9acc4:	2b03      	cmp	r3, #3
   9acc6:	d8f7      	bhi.n	9acb8 <uhi_msc_mem_test_unit_ready+0x2c>
   9acc8:	4a08      	ldr	r2, [pc, #32]	; (9acec <uhi_msc_mem_test_unit_ready+0x60>)
   9acca:	5cd0      	ldrb	r0, [r2, r3]
}
   9accc:	bd70      	pop	{r4, r5, r6, pc}
   9acce:	bf00      	nop
   9acd0:	0009a99d 	.word	0x0009a99d
   9acd4:	20072cac 	.word	0x20072cac
   9acd8:	20072cae 	.word	0x20072cae
   9acdc:	0009ac5d 	.word	0x0009ac5d
   9ace0:	0009a9d5 	.word	0x0009a9d5
   9ace4:	20072cad 	.word	0x20072cad
   9ace8:	0009a9b9 	.word	0x0009a9b9
   9acec:	000ac1b0 	.word	0x000ac1b0

0009acf0 <uhi_msc_mem_read_capacity>:
{
   9acf0:	b570      	push	{r4, r5, r6, lr}
   9acf2:	4605      	mov	r5, r0
   9acf4:	460e      	mov	r6, r1
   9acf6:	4c0c      	ldr	r4, [pc, #48]	; (9ad28 <uhi_msc_mem_read_capacity+0x38>)
	while (!uhi_msc_is_available());
   9acf8:	47a0      	blx	r4
   9acfa:	2800      	cmp	r0, #0
   9acfc:	d0fc      	beq.n	9acf8 <uhi_msc_mem_read_capacity+0x8>
	uhi_msc_mem_lun = lun;
   9acfe:	4a0b      	ldr	r2, [pc, #44]	; (9ad2c <uhi_msc_mem_read_capacity+0x3c>)
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
   9ad00:	4628      	mov	r0, r5
   9ad02:	4b0b      	ldr	r3, [pc, #44]	; (9ad30 <uhi_msc_mem_read_capacity+0x40>)
	uhi_msc_mem_lun = lun;
   9ad04:	7015      	strb	r5, [r2, #0]
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
   9ad06:	4798      	blx	r3
	if (lun_desc == NULL) {
   9ad08:	b118      	cbz	r0, 9ad12 <uhi_msc_mem_read_capacity+0x22>
	if (lun_desc->capacity.block_len != 512) {
   9ad0a:	6843      	ldr	r3, [r0, #4]
   9ad0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   9ad10:	d001      	beq.n	9ad16 <uhi_msc_mem_read_capacity+0x26>
		return CTRL_FAIL;
   9ad12:	2001      	movs	r0, #1
   9ad14:	bd70      	pop	{r4, r5, r6, pc}
	*u32_nb_sector = lun_desc->capacity.max_lba;
   9ad16:	6803      	ldr	r3, [r0, #0]
   9ad18:	6033      	str	r3, [r6, #0]
	return uhi_msc_mem_translate_status(lun_desc->status);
   9ad1a:	7a43      	ldrb	r3, [r0, #9]
   9ad1c:	2b03      	cmp	r3, #3
   9ad1e:	d8f8      	bhi.n	9ad12 <uhi_msc_mem_read_capacity+0x22>
   9ad20:	4a04      	ldr	r2, [pc, #16]	; (9ad34 <uhi_msc_mem_read_capacity+0x44>)
   9ad22:	5cd0      	ldrb	r0, [r2, r3]
}
   9ad24:	bd70      	pop	{r4, r5, r6, pc}
   9ad26:	bf00      	nop
   9ad28:	0009a99d 	.word	0x0009a99d
   9ad2c:	20072cae 	.word	0x20072cae
   9ad30:	0009a9b9 	.word	0x0009a9b9
   9ad34:	000ac1b0 	.word	0x000ac1b0

0009ad38 <uhi_msc_mem_read_sector_size>:
{
   9ad38:	b538      	push	{r3, r4, r5, lr}
   9ad3a:	4605      	mov	r5, r0
   9ad3c:	4c06      	ldr	r4, [pc, #24]	; (9ad58 <uhi_msc_mem_read_sector_size+0x20>)
	while (!uhi_msc_is_available());
   9ad3e:	47a0      	blx	r4
   9ad40:	2800      	cmp	r0, #0
   9ad42:	d0fc      	beq.n	9ad3e <uhi_msc_mem_read_sector_size+0x6>
	uhi_msc_mem_lun = lun;
   9ad44:	4a05      	ldr	r2, [pc, #20]	; (9ad5c <uhi_msc_mem_read_sector_size+0x24>)
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
   9ad46:	4628      	mov	r0, r5
   9ad48:	4b05      	ldr	r3, [pc, #20]	; (9ad60 <uhi_msc_mem_read_sector_size+0x28>)
	uhi_msc_mem_lun = lun;
   9ad4a:	7015      	strb	r5, [r2, #0]
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
   9ad4c:	4798      	blx	r3
	if (lun_desc == NULL) {
   9ad4e:	b108      	cbz	r0, 9ad54 <uhi_msc_mem_read_sector_size+0x1c>
	return lun_desc->capacity.block_len / 512;
   9ad50:	6840      	ldr	r0, [r0, #4]
   9ad52:	0a40      	lsrs	r0, r0, #9
}
   9ad54:	b2c0      	uxtb	r0, r0
   9ad56:	bd38      	pop	{r3, r4, r5, pc}
   9ad58:	0009a99d 	.word	0x0009a99d
   9ad5c:	20072cae 	.word	0x20072cae
   9ad60:	0009a9b9 	.word	0x0009a9b9

0009ad64 <uhi_msc_mem_wr_protect>:
{
   9ad64:	b570      	push	{r4, r5, r6, lr}
   9ad66:	4606      	mov	r6, r0
   9ad68:	4d08      	ldr	r5, [pc, #32]	; (9ad8c <uhi_msc_mem_wr_protect+0x28>)
	while (!uhi_msc_is_available());
   9ad6a:	47a8      	blx	r5
   9ad6c:	4604      	mov	r4, r0
   9ad6e:	2800      	cmp	r0, #0
   9ad70:	d0fb      	beq.n	9ad6a <uhi_msc_mem_wr_protect+0x6>
	uhi_msc_mem_lun = lun;
   9ad72:	4a07      	ldr	r2, [pc, #28]	; (9ad90 <uhi_msc_mem_wr_protect+0x2c>)
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
   9ad74:	4630      	mov	r0, r6
   9ad76:	4b07      	ldr	r3, [pc, #28]	; (9ad94 <uhi_msc_mem_wr_protect+0x30>)
	uhi_msc_mem_lun = lun;
   9ad78:	7016      	strb	r6, [r2, #0]
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
   9ad7a:	4798      	blx	r3
	if (lun_desc == NULL) {
   9ad7c:	b120      	cbz	r0, 9ad88 <uhi_msc_mem_wr_protect+0x24>
	if (lun_desc->capacity.block_len != 512) {
   9ad7e:	6843      	ldr	r3, [r0, #4]
   9ad80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	return lun_desc->b_write_protected;
   9ad84:	bf08      	it	eq
   9ad86:	7a04      	ldrbeq	r4, [r0, #8]
}
   9ad88:	4620      	mov	r0, r4
   9ad8a:	bd70      	pop	{r4, r5, r6, pc}
   9ad8c:	0009a99d 	.word	0x0009a99d
   9ad90:	20072cae 	.word	0x20072cae
   9ad94:	0009a9b9 	.word	0x0009a9b9

0009ad98 <uhi_msc_mem_read_10_ram>:
{
   9ad98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9ad9c:	4606      	mov	r6, r0
   9ad9e:	460f      	mov	r7, r1
   9ada0:	4c1b      	ldr	r4, [pc, #108]	; (9ae10 <uhi_msc_mem_read_10_ram+0x78>)
   9ada2:	b082      	sub	sp, #8
	while (!uhi_msc_is_available());
   9ada4:	47a0      	blx	r4
   9ada6:	2800      	cmp	r0, #0
   9ada8:	d0fc      	beq.n	9ada4 <uhi_msc_mem_read_10_ram+0xc>
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
   9adaa:	4d1a      	ldr	r5, [pc, #104]	; (9ae14 <uhi_msc_mem_read_10_ram+0x7c>)
   9adac:	4b1a      	ldr	r3, [pc, #104]	; (9ae18 <uhi_msc_mem_read_10_ram+0x80>)
   9adae:	7828      	ldrb	r0, [r5, #0]
   9adb0:	4798      	blx	r3
	if (lun_desc == NULL) {
   9adb2:	4604      	mov	r4, r0
   9adb4:	b110      	cbz	r0, 9adbc <uhi_msc_mem_read_10_ram+0x24>
	if (uhi_msc_mem_translate_status(lun_desc->status) != CTRL_GOOD) {
   9adb6:	7a43      	ldrb	r3, [r0, #9]
   9adb8:	2b03      	cmp	r3, #3
   9adba:	d903      	bls.n	9adc4 <uhi_msc_mem_read_10_ram+0x2c>
		return CTRL_FAIL;
   9adbc:	2001      	movs	r0, #1
}
   9adbe:	b002      	add	sp, #8
   9adc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9adc4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9ae28 <uhi_msc_mem_read_10_ram+0x90>
   9adc8:	f818 0003 	ldrb.w	r0, [r8, r3]
	if (uhi_msc_mem_translate_status(lun_desc->status) != CTRL_GOOD) {
   9adcc:	2800      	cmp	r0, #0
   9adce:	d1f6      	bne.n	9adbe <uhi_msc_mem_read_10_ram+0x26>
	if (lun_desc->capacity.block_len != 512) {
   9add0:	6863      	ldr	r3, [r4, #4]
   9add2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   9add6:	d1f1      	bne.n	9adbc <uhi_msc_mem_read_10_ram+0x24>
	uhi_msc_mem_command_ongoing = true;
   9add8:	f04f 0e01 	mov.w	lr, #1
	uhi_msc_scsi_read_10(uhi_msc_mem_lun, addr, ram, 1,
   9addc:	7828      	ldrb	r0, [r5, #0]
   9adde:	f8df c04c 	ldr.w	ip, [pc, #76]	; 9ae2c <uhi_msc_mem_read_10_ram+0x94>
	uhi_msc_mem_command_ongoing = true;
   9ade2:	4d0e      	ldr	r5, [pc, #56]	; (9ae1c <uhi_msc_mem_read_10_ram+0x84>)
	uhi_msc_scsi_read_10(uhi_msc_mem_lun, addr, ram, 1,
   9ade4:	4631      	mov	r1, r6
   9ade6:	f8cd c000 	str.w	ip, [sp]
   9adea:	463a      	mov	r2, r7
   9adec:	4673      	mov	r3, lr
   9adee:	4e0c      	ldr	r6, [pc, #48]	; (9ae20 <uhi_msc_mem_read_10_ram+0x88>)
	uhi_msc_mem_command_ongoing = true;
   9adf0:	f885 e000 	strb.w	lr, [r5]
	uhi_msc_scsi_read_10(uhi_msc_mem_lun, addr, ram, 1,
   9adf4:	47b0      	blx	r6
	while (uhi_msc_mem_command_ongoing);
   9adf6:	782b      	ldrb	r3, [r5, #0]
   9adf8:	2b00      	cmp	r3, #0
   9adfa:	d1fc      	bne.n	9adf6 <uhi_msc_mem_read_10_ram+0x5e>
	if (!uhi_msc_mem_command_status) {
   9adfc:	4b09      	ldr	r3, [pc, #36]	; (9ae24 <uhi_msc_mem_read_10_ram+0x8c>)
   9adfe:	781b      	ldrb	r3, [r3, #0]
   9ae00:	2b00      	cmp	r3, #0
   9ae02:	d0db      	beq.n	9adbc <uhi_msc_mem_read_10_ram+0x24>
	return uhi_msc_mem_translate_status(lun_desc->status);
   9ae04:	7a63      	ldrb	r3, [r4, #9]
   9ae06:	2b03      	cmp	r3, #3
   9ae08:	d8d8      	bhi.n	9adbc <uhi_msc_mem_read_10_ram+0x24>
   9ae0a:	f818 0003 	ldrb.w	r0, [r8, r3]
   9ae0e:	e7d6      	b.n	9adbe <uhi_msc_mem_read_10_ram+0x26>
   9ae10:	0009a99d 	.word	0x0009a99d
   9ae14:	20072cae 	.word	0x20072cae
   9ae18:	0009a9b9 	.word	0x0009a9b9
   9ae1c:	20072cac 	.word	0x20072cac
   9ae20:	0009aa8d 	.word	0x0009aa8d
   9ae24:	20072cad 	.word	0x20072cad
   9ae28:	000ac1b0 	.word	0x000ac1b0
   9ae2c:	0009ac5d 	.word	0x0009ac5d

0009ae30 <uhi_msc_mem_write_10_ram>:
{
   9ae30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9ae34:	4606      	mov	r6, r0
   9ae36:	460f      	mov	r7, r1
   9ae38:	4c1b      	ldr	r4, [pc, #108]	; (9aea8 <uhi_msc_mem_write_10_ram+0x78>)
   9ae3a:	b082      	sub	sp, #8
	while (!uhi_msc_is_available());
   9ae3c:	47a0      	blx	r4
   9ae3e:	2800      	cmp	r0, #0
   9ae40:	d0fc      	beq.n	9ae3c <uhi_msc_mem_write_10_ram+0xc>
	lun_desc = uhi_msc_get_lun_desc(uhi_msc_mem_lun);
   9ae42:	4d1a      	ldr	r5, [pc, #104]	; (9aeac <uhi_msc_mem_write_10_ram+0x7c>)
   9ae44:	4b1a      	ldr	r3, [pc, #104]	; (9aeb0 <uhi_msc_mem_write_10_ram+0x80>)
   9ae46:	7828      	ldrb	r0, [r5, #0]
   9ae48:	4798      	blx	r3
	if (lun_desc == NULL) {
   9ae4a:	4604      	mov	r4, r0
   9ae4c:	b110      	cbz	r0, 9ae54 <uhi_msc_mem_write_10_ram+0x24>
	if (uhi_msc_mem_translate_status(lun_desc->status) != CTRL_GOOD) {
   9ae4e:	7a43      	ldrb	r3, [r0, #9]
   9ae50:	2b03      	cmp	r3, #3
   9ae52:	d903      	bls.n	9ae5c <uhi_msc_mem_write_10_ram+0x2c>
		return CTRL_FAIL;
   9ae54:	2001      	movs	r0, #1
}
   9ae56:	b002      	add	sp, #8
   9ae58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9ae5c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9aec0 <uhi_msc_mem_write_10_ram+0x90>
   9ae60:	f818 0003 	ldrb.w	r0, [r8, r3]
	if (uhi_msc_mem_translate_status(lun_desc->status) != CTRL_GOOD) {
   9ae64:	2800      	cmp	r0, #0
   9ae66:	d1f6      	bne.n	9ae56 <uhi_msc_mem_write_10_ram+0x26>
	if (lun_desc->capacity.block_len != 512) {
   9ae68:	6863      	ldr	r3, [r4, #4]
   9ae6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   9ae6e:	d1f1      	bne.n	9ae54 <uhi_msc_mem_write_10_ram+0x24>
	uhi_msc_mem_command_ongoing = true;
   9ae70:	f04f 0e01 	mov.w	lr, #1
	uhi_msc_scsi_write_10(uhi_msc_mem_lun, addr, ram, 1,
   9ae74:	7828      	ldrb	r0, [r5, #0]
   9ae76:	f8df c04c 	ldr.w	ip, [pc, #76]	; 9aec4 <uhi_msc_mem_write_10_ram+0x94>
	uhi_msc_mem_command_ongoing = true;
   9ae7a:	4d0e      	ldr	r5, [pc, #56]	; (9aeb4 <uhi_msc_mem_write_10_ram+0x84>)
	uhi_msc_scsi_write_10(uhi_msc_mem_lun, addr, ram, 1,
   9ae7c:	4631      	mov	r1, r6
   9ae7e:	f8cd c000 	str.w	ip, [sp]
   9ae82:	463a      	mov	r2, r7
   9ae84:	4673      	mov	r3, lr
   9ae86:	4e0c      	ldr	r6, [pc, #48]	; (9aeb8 <uhi_msc_mem_write_10_ram+0x88>)
	uhi_msc_mem_command_ongoing = true;
   9ae88:	f885 e000 	strb.w	lr, [r5]
	uhi_msc_scsi_write_10(uhi_msc_mem_lun, addr, ram, 1,
   9ae8c:	47b0      	blx	r6
	while (uhi_msc_mem_command_ongoing);
   9ae8e:	782b      	ldrb	r3, [r5, #0]
   9ae90:	2b00      	cmp	r3, #0
   9ae92:	d1fc      	bne.n	9ae8e <uhi_msc_mem_write_10_ram+0x5e>
	if (!uhi_msc_mem_command_status) {
   9ae94:	4b09      	ldr	r3, [pc, #36]	; (9aebc <uhi_msc_mem_write_10_ram+0x8c>)
   9ae96:	781b      	ldrb	r3, [r3, #0]
   9ae98:	2b00      	cmp	r3, #0
   9ae9a:	d0db      	beq.n	9ae54 <uhi_msc_mem_write_10_ram+0x24>
	return uhi_msc_mem_translate_status(lun_desc->status);
   9ae9c:	7a63      	ldrb	r3, [r4, #9]
   9ae9e:	2b03      	cmp	r3, #3
   9aea0:	d8d8      	bhi.n	9ae54 <uhi_msc_mem_write_10_ram+0x24>
   9aea2:	f818 0003 	ldrb.w	r0, [r8, r3]
   9aea6:	e7d6      	b.n	9ae56 <uhi_msc_mem_write_10_ram+0x26>
   9aea8:	0009a99d 	.word	0x0009a99d
   9aeac:	20072cae 	.word	0x20072cae
   9aeb0:	0009a9b9 	.word	0x0009a9b9
   9aeb4:	20072cac 	.word	0x20072cac
   9aeb8:	0009ab79 	.word	0x0009ab79
   9aebc:	20072cad 	.word	0x20072cad
   9aec0:	000ac1b0 	.word	0x000ac1b0
   9aec4:	0009ac5d 	.word	0x0009ac5d

0009aec8 <uhc_enumeration_step2>:
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
	uhc_sof_timeout = timeout;
   9aec8:	2014      	movs	r0, #20
   9aeca:	4903      	ldr	r1, [pc, #12]	; (9aed8 <uhc_enumeration_step2+0x10>)
	uhc_sof_timeout_callback = callback;
   9aecc:	4b03      	ldr	r3, [pc, #12]	; (9aedc <uhc_enumeration_step2+0x14>)
   9aece:	4a04      	ldr	r2, [pc, #16]	; (9aee0 <uhc_enumeration_step2+0x18>)
	uhc_sof_timeout = timeout;
   9aed0:	7008      	strb	r0, [r1, #0]
	uhc_sof_timeout_callback = callback;
   9aed2:	601a      	str	r2, [r3, #0]
   9aed4:	4770      	bx	lr
   9aed6:	bf00      	nop
   9aed8:	20072fa2 	.word	0x20072fa2
   9aedc:	20072ccc 	.word	0x20072ccc
   9aee0:	0009af2d 	.word	0x0009af2d

0009aee4 <uhc_enumeration_step8>:
	uhc_sof_timeout = timeout;
   9aee4:	2064      	movs	r0, #100	; 0x64
   9aee6:	4903      	ldr	r1, [pc, #12]	; (9aef4 <uhc_enumeration_step8+0x10>)
	uhc_sof_timeout_callback = callback;
   9aee8:	4b03      	ldr	r3, [pc, #12]	; (9aef8 <uhc_enumeration_step8+0x14>)
   9aeea:	4a04      	ldr	r2, [pc, #16]	; (9aefc <uhc_enumeration_step8+0x18>)
	uhc_sof_timeout = timeout;
   9aeec:	7008      	strb	r0, [r1, #0]
	uhc_sof_timeout_callback = callback;
   9aeee:	601a      	str	r2, [r3, #0]
   9aef0:	4770      	bx	lr
   9aef2:	bf00      	nop
   9aef4:	20072fa2 	.word	0x20072fa2
   9aef8:	20072ccc 	.word	0x20072ccc
   9aefc:	0009b359 	.word	0x0009b359

0009af00 <uhc_enumeration_step4>:
/**
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
   9af00:	b538      	push	{r3, r4, r5, lr}
	uhc_dev_enum->speed = uhd_get_speed();
   9af02:	4b05      	ldr	r3, [pc, #20]	; (9af18 <uhc_enumeration_step4+0x18>)
   9af04:	4798      	blx	r3
	uhc_sof_timeout = timeout;
   9af06:	2464      	movs	r4, #100	; 0x64
	uhc_dev_enum->speed = uhd_get_speed();
   9af08:	4d04      	ldr	r5, [pc, #16]	; (9af1c <uhc_enumeration_step4+0x1c>)
	uhc_sof_timeout = timeout;
   9af0a:	4905      	ldr	r1, [pc, #20]	; (9af20 <uhc_enumeration_step4+0x20>)
	uhc_sof_timeout_callback = callback;
   9af0c:	4b05      	ldr	r3, [pc, #20]	; (9af24 <uhc_enumeration_step4+0x24>)
   9af0e:	4a06      	ldr	r2, [pc, #24]	; (9af28 <uhc_enumeration_step4+0x28>)
	uhc_dev_enum->speed = uhd_get_speed();
   9af10:	74e8      	strb	r0, [r5, #19]
	uhc_sof_timeout = timeout;
   9af12:	700c      	strb	r4, [r1, #0]
	uhc_sof_timeout_callback = callback;
   9af14:	601a      	str	r2, [r3, #0]
   9af16:	bd38      	pop	{r3, r4, r5, pc}
   9af18:	0009e281 	.word	0x0009e281
   9af1c:	20072cb0 	.word	0x20072cb0
   9af20:	20072fa2 	.word	0x20072fa2
   9af24:	20072ccc 	.word	0x20072ccc
   9af28:	0009b1dd 	.word	0x0009b1dd

0009af2c <uhc_enumeration_step3>:
		uhd_send_reset(callback);
   9af2c:	4801      	ldr	r0, [pc, #4]	; (9af34 <uhc_enumeration_step3+0x8>)
   9af2e:	4b02      	ldr	r3, [pc, #8]	; (9af38 <uhc_enumeration_step3+0xc>)
   9af30:	4718      	bx	r3
   9af32:	bf00      	nop
   9af34:	0009af01 	.word	0x0009af01
   9af38:	0009e2a9 	.word	0x0009e2a9

0009af3c <uhc_enumeration_step7>:
   9af3c:	4801      	ldr	r0, [pc, #4]	; (9af44 <uhc_enumeration_step7+0x8>)
   9af3e:	4b02      	ldr	r3, [pc, #8]	; (9af48 <uhc_enumeration_step7+0xc>)
   9af40:	4718      	bx	r3
   9af42:	bf00      	nop
   9af44:	0009aee5 	.word	0x0009aee5
   9af48:	0009e2a9 	.word	0x0009e2a9

0009af4c <uhc_enumeration_step6>:
 */
static void uhc_enumeration_step6(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
   9af4c:	b570      	push	{r4, r5, r6, lr}
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
   9af4e:	b9c1      	cbnz	r1, 9af82 <uhc_enumeration_step6+0x36>
   9af50:	2a07      	cmp	r2, #7
   9af52:	4c17      	ldr	r4, [pc, #92]	; (9afb0 <uhc_enumeration_step6+0x64>)
   9af54:	d81b      	bhi.n	9af8e <uhc_enumeration_step6+0x42>
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9af56:	7ca0      	ldrb	r0, [r4, #18]
   9af58:	21ff      	movs	r1, #255	; 0xff
   9af5a:	4b16      	ldr	r3, [pc, #88]	; (9afb4 <uhc_enumeration_step6+0x68>)
   9af5c:	4798      	blx	r3

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
   9af5e:	6960      	ldr	r0, [r4, #20]
   9af60:	b118      	cbz	r0, 9af6a <uhc_enumeration_step6+0x1e>
		free(uhc_dev_enum->conf_desc);
   9af62:	4b15      	ldr	r3, [pc, #84]	; (9afb8 <uhc_enumeration_step6+0x6c>)
   9af64:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9af66:	2300      	movs	r3, #0
   9af68:	6163      	str	r3, [r4, #20]
	}
	uhc_dev_enum->address = 0;
   9af6a:	2600      	movs	r6, #0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9af6c:	4d13      	ldr	r5, [pc, #76]	; (9afbc <uhc_enumeration_step6+0x70>)
	uhc_dev_enum->address = 0;
   9af6e:	74a6      	strb	r6, [r4, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9af70:	782b      	ldrb	r3, [r5, #0]
   9af72:	1c5a      	adds	r2, r3, #1
   9af74:	2b03      	cmp	r3, #3
   9af76:	702a      	strb	r2, [r5, #0]
   9af78:	d915      	bls.n	9afa6 <uhc_enumeration_step6+0x5a>
		uhd_suspend();
   9af7a:	4b11      	ldr	r3, [pc, #68]	; (9afc0 <uhc_enumeration_step6+0x74>)
   9af7c:	4798      	blx	r3
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
	uhc_enum_try = 0;
   9af7e:	702e      	strb	r6, [r5, #0]
   9af80:	bd70      	pop	{r4, r5, r6, pc}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
   9af82:	2901      	cmp	r1, #1
   9af84:	d10d      	bne.n	9afa2 <uhc_enumeration_step6+0x56>
		uhc_enum_try = 0;
   9af86:	2200      	movs	r2, #0
   9af88:	4b0c      	ldr	r3, [pc, #48]	; (9afbc <uhc_enumeration_step6+0x70>)
   9af8a:	701a      	strb	r2, [r3, #0]
   9af8c:	bd70      	pop	{r4, r5, r6, pc}
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
   9af8e:	7863      	ldrb	r3, [r4, #1]
   9af90:	2b01      	cmp	r3, #1
   9af92:	d1e0      	bne.n	9af56 <uhc_enumeration_step6+0xa>
	uhc_sof_timeout = timeout;
   9af94:	2014      	movs	r0, #20
   9af96:	490b      	ldr	r1, [pc, #44]	; (9afc4 <uhc_enumeration_step6+0x78>)
	uhc_sof_timeout_callback = callback;
   9af98:	4b0b      	ldr	r3, [pc, #44]	; (9afc8 <uhc_enumeration_step6+0x7c>)
   9af9a:	4a0c      	ldr	r2, [pc, #48]	; (9afcc <uhc_enumeration_step6+0x80>)
	uhc_sof_timeout = timeout;
   9af9c:	7008      	strb	r0, [r1, #0]
	uhc_sof_timeout_callback = callback;
   9af9e:	601a      	str	r2, [r3, #0]
   9afa0:	bd70      	pop	{r4, r5, r6, pc}
   9afa2:	4c03      	ldr	r4, [pc, #12]	; (9afb0 <uhc_enumeration_step6+0x64>)
   9afa4:	e7d7      	b.n	9af56 <uhc_enumeration_step6+0xa>
		uhd_send_reset(callback);
   9afa6:	480a      	ldr	r0, [pc, #40]	; (9afd0 <uhc_enumeration_step6+0x84>)
   9afa8:	4b0a      	ldr	r3, [pc, #40]	; (9afd4 <uhc_enumeration_step6+0x88>)
}
   9afaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uhd_send_reset(callback);
   9afae:	4718      	bx	r3
   9afb0:	20072cb0 	.word	0x20072cb0
   9afb4:	0009e709 	.word	0x0009e709
   9afb8:	000a52f1 	.word	0x000a52f1
   9afbc:	20072cc8 	.word	0x20072cc8
   9afc0:	0009e2c5 	.word	0x0009e2c5
   9afc4:	20072fa2 	.word	0x20072fa2
   9afc8:	20072ccc 	.word	0x20072ccc
   9afcc:	0009af3d 	.word	0x0009af3d
   9afd0:	0009aec9 	.word	0x0009aec9
   9afd4:	0009e2a9 	.word	0x0009e2a9

0009afd8 <uhc_enumeration_step15>:
{
   9afd8:	b570      	push	{r4, r5, r6, lr}
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
   9afda:	b959      	cbnz	r1, 9aff4 <uhc_enumeration_step15+0x1c>
   9afdc:	4615      	mov	r5, r2
   9afde:	b11a      	cbz	r2, 9afe8 <uhc_enumeration_step15+0x10>
			uhc_uhis[i].uninstall(uhc_dev_enum);
   9afe0:	4817      	ldr	r0, [pc, #92]	; (9b040 <uhc_enumeration_step15+0x68>)
   9afe2:	4b18      	ldr	r3, [pc, #96]	; (9b044 <uhc_enumeration_step15+0x6c>)
   9afe4:	4798      	blx	r3
   9afe6:	e00b      	b.n	9b000 <uhc_enumeration_step15+0x28>
		uhc_uhis[i].enable(uhc_dev_enum);
   9afe8:	4b17      	ldr	r3, [pc, #92]	; (9b048 <uhc_enumeration_step15+0x70>)
   9afea:	4815      	ldr	r0, [pc, #84]	; (9b040 <uhc_enumeration_step15+0x68>)
   9afec:	4798      	blx	r3
	uhc_enum_try = 0;
   9afee:	4b17      	ldr	r3, [pc, #92]	; (9b04c <uhc_enumeration_step15+0x74>)
   9aff0:	701d      	strb	r5, [r3, #0]
   9aff2:	bd70      	pop	{r4, r5, r6, pc}
   9aff4:	460c      	mov	r4, r1
			uhc_uhis[i].uninstall(uhc_dev_enum);
   9aff6:	4812      	ldr	r0, [pc, #72]	; (9b040 <uhc_enumeration_step15+0x68>)
   9aff8:	4b12      	ldr	r3, [pc, #72]	; (9b044 <uhc_enumeration_step15+0x6c>)
   9affa:	4798      	blx	r3
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
   9affc:	2c01      	cmp	r4, #1
   9affe:	d016      	beq.n	9b02e <uhc_enumeration_step15+0x56>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b000:	4c0f      	ldr	r4, [pc, #60]	; (9b040 <uhc_enumeration_step15+0x68>)
   9b002:	21ff      	movs	r1, #255	; 0xff
   9b004:	7ca0      	ldrb	r0, [r4, #18]
   9b006:	4b12      	ldr	r3, [pc, #72]	; (9b050 <uhc_enumeration_step15+0x78>)
   9b008:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
   9b00a:	6960      	ldr	r0, [r4, #20]
   9b00c:	b118      	cbz	r0, 9b016 <uhc_enumeration_step15+0x3e>
		free(uhc_dev_enum->conf_desc);
   9b00e:	4b11      	ldr	r3, [pc, #68]	; (9b054 <uhc_enumeration_step15+0x7c>)
   9b010:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b012:	2300      	movs	r3, #0
   9b014:	6163      	str	r3, [r4, #20]
	uhc_dev_enum->address = 0;
   9b016:	2600      	movs	r6, #0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b018:	4d0c      	ldr	r5, [pc, #48]	; (9b04c <uhc_enumeration_step15+0x74>)
	uhc_dev_enum->address = 0;
   9b01a:	74a6      	strb	r6, [r4, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b01c:	782b      	ldrb	r3, [r5, #0]
   9b01e:	1c5a      	adds	r2, r3, #1
   9b020:	2b03      	cmp	r3, #3
   9b022:	702a      	strb	r2, [r5, #0]
   9b024:	d907      	bls.n	9b036 <uhc_enumeration_step15+0x5e>
		uhd_suspend();
   9b026:	4b0c      	ldr	r3, [pc, #48]	; (9b058 <uhc_enumeration_step15+0x80>)
   9b028:	4798      	blx	r3
	uhc_enum_try = 0;
   9b02a:	702e      	strb	r6, [r5, #0]
   9b02c:	bd70      	pop	{r4, r5, r6, pc}
		uhc_enum_try = 0;
   9b02e:	2200      	movs	r2, #0
   9b030:	4b06      	ldr	r3, [pc, #24]	; (9b04c <uhc_enumeration_step15+0x74>)
   9b032:	701a      	strb	r2, [r3, #0]
   9b034:	bd70      	pop	{r4, r5, r6, pc}
		uhd_send_reset(callback);
   9b036:	4809      	ldr	r0, [pc, #36]	; (9b05c <uhc_enumeration_step15+0x84>)
   9b038:	4b09      	ldr	r3, [pc, #36]	; (9b060 <uhc_enumeration_step15+0x88>)
}
   9b03a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uhd_send_reset(callback);
   9b03e:	4718      	bx	r3
   9b040:	20072cb0 	.word	0x20072cb0
   9b044:	0009a97d 	.word	0x0009a97d
   9b048:	0009a925 	.word	0x0009a925
   9b04c:	20072cc8 	.word	0x20072cc8
   9b050:	0009e709 	.word	0x0009e709
   9b054:	000a52f1 	.word	0x000a52f1
   9b058:	0009e2c5 	.word	0x0009e2c5
   9b05c:	0009aec9 	.word	0x0009aec9
   9b060:	0009e2a9 	.word	0x0009e2a9

0009b064 <uhc_enumeration_step10>:
	if (status != UHD_TRANS_NOERROR) {
   9b064:	b1c9      	cbz	r1, 9b09a <uhc_enumeration_step10+0x36>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT) ?
   9b066:	2901      	cmp	r1, #1
   9b068:	d01e      	beq.n	9b0a8 <uhc_enumeration_step10+0x44>
{
   9b06a:	b570      	push	{r4, r5, r6, lr}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b06c:	4c13      	ldr	r4, [pc, #76]	; (9b0bc <uhc_enumeration_step10+0x58>)
   9b06e:	21ff      	movs	r1, #255	; 0xff
   9b070:	7ca0      	ldrb	r0, [r4, #18]
   9b072:	4b13      	ldr	r3, [pc, #76]	; (9b0c0 <uhc_enumeration_step10+0x5c>)
   9b074:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
   9b076:	6960      	ldr	r0, [r4, #20]
   9b078:	b118      	cbz	r0, 9b082 <uhc_enumeration_step10+0x1e>
		free(uhc_dev_enum->conf_desc);
   9b07a:	4b12      	ldr	r3, [pc, #72]	; (9b0c4 <uhc_enumeration_step10+0x60>)
   9b07c:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b07e:	2300      	movs	r3, #0
   9b080:	6163      	str	r3, [r4, #20]
	uhc_dev_enum->address = 0;
   9b082:	2600      	movs	r6, #0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b084:	4d10      	ldr	r5, [pc, #64]	; (9b0c8 <uhc_enumeration_step10+0x64>)
	uhc_dev_enum->address = 0;
   9b086:	74a6      	strb	r6, [r4, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b088:	782b      	ldrb	r3, [r5, #0]
   9b08a:	1c5a      	adds	r2, r3, #1
   9b08c:	2b03      	cmp	r3, #3
   9b08e:	702a      	strb	r2, [r5, #0]
   9b090:	d90e      	bls.n	9b0b0 <uhc_enumeration_step10+0x4c>
		uhd_suspend();
   9b092:	4b0e      	ldr	r3, [pc, #56]	; (9b0cc <uhc_enumeration_step10+0x68>)
   9b094:	4798      	blx	r3
	uhc_enum_try = 0;
   9b096:	702e      	strb	r6, [r5, #0]
   9b098:	bd70      	pop	{r4, r5, r6, pc}
	uhc_sof_timeout = timeout;
   9b09a:	2014      	movs	r0, #20
   9b09c:	490c      	ldr	r1, [pc, #48]	; (9b0d0 <uhc_enumeration_step10+0x6c>)
	uhc_sof_timeout_callback = callback;
   9b09e:	4b0d      	ldr	r3, [pc, #52]	; (9b0d4 <uhc_enumeration_step10+0x70>)
   9b0a0:	4a0d      	ldr	r2, [pc, #52]	; (9b0d8 <uhc_enumeration_step10+0x74>)
	uhc_sof_timeout = timeout;
   9b0a2:	7008      	strb	r0, [r1, #0]
	uhc_sof_timeout_callback = callback;
   9b0a4:	601a      	str	r2, [r3, #0]
   9b0a6:	4770      	bx	lr
		uhc_enum_try = 0;
   9b0a8:	2200      	movs	r2, #0
   9b0aa:	4b07      	ldr	r3, [pc, #28]	; (9b0c8 <uhc_enumeration_step10+0x64>)
   9b0ac:	701a      	strb	r2, [r3, #0]
   9b0ae:	4770      	bx	lr
		uhd_send_reset(callback);
   9b0b0:	480a      	ldr	r0, [pc, #40]	; (9b0dc <uhc_enumeration_step10+0x78>)
   9b0b2:	4b0b      	ldr	r3, [pc, #44]	; (9b0e0 <uhc_enumeration_step10+0x7c>)
}
   9b0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uhd_send_reset(callback);
   9b0b8:	4718      	bx	r3
   9b0ba:	bf00      	nop
   9b0bc:	20072cb0 	.word	0x20072cb0
   9b0c0:	0009e709 	.word	0x0009e709
   9b0c4:	000a52f1 	.word	0x000a52f1
   9b0c8:	20072cc8 	.word	0x20072cc8
   9b0cc:	0009e2c5 	.word	0x0009e2c5
   9b0d0:	20072fa2 	.word	0x20072fa2
   9b0d4:	20072ccc 	.word	0x20072ccc
   9b0d8:	0009b2a5 	.word	0x0009b2a5
   9b0dc:	0009aec9 	.word	0x0009aec9
   9b0e0:	0009e2a9 	.word	0x0009e2a9

0009b0e4 <uhc_enumeration_step14>:
{
   9b0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   9b0e6:	b085      	sub	sp, #20
	if ((status != UHD_TRANS_NOERROR)
   9b0e8:	b9d1      	cbnz	r1, 9b120 <uhc_enumeration_step14+0x3c>
			|| (payload_trans < sizeof(usb_conf_desc_t))
   9b0ea:	2a08      	cmp	r2, #8
   9b0ec:	4c31      	ldr	r4, [pc, #196]	; (9b1b4 <uhc_enumeration_step14+0xd0>)
   9b0ee:	d81e      	bhi.n	9b12e <uhc_enumeration_step14+0x4a>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b0f0:	7ca0      	ldrb	r0, [r4, #18]
   9b0f2:	21ff      	movs	r1, #255	; 0xff
   9b0f4:	4b30      	ldr	r3, [pc, #192]	; (9b1b8 <uhc_enumeration_step14+0xd4>)
   9b0f6:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
   9b0f8:	6960      	ldr	r0, [r4, #20]
   9b0fa:	b118      	cbz	r0, 9b104 <uhc_enumeration_step14+0x20>
		free(uhc_dev_enum->conf_desc);
   9b0fc:	4b2f      	ldr	r3, [pc, #188]	; (9b1bc <uhc_enumeration_step14+0xd8>)
   9b0fe:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b100:	2300      	movs	r3, #0
   9b102:	6163      	str	r3, [r4, #20]
	uhc_dev_enum->address = 0;
   9b104:	2300      	movs	r3, #0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b106:	4d2e      	ldr	r5, [pc, #184]	; (9b1c0 <uhc_enumeration_step14+0xdc>)
	uhc_dev_enum->address = 0;
   9b108:	74a3      	strb	r3, [r4, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b10a:	782b      	ldrb	r3, [r5, #0]
   9b10c:	1c5a      	adds	r2, r3, #1
   9b10e:	2b03      	cmp	r3, #3
   9b110:	702a      	strb	r2, [r5, #0]
   9b112:	d91f      	bls.n	9b154 <uhc_enumeration_step14+0x70>
		uhd_suspend();
   9b114:	4b2b      	ldr	r3, [pc, #172]	; (9b1c4 <uhc_enumeration_step14+0xe0>)
   9b116:	4798      	blx	r3
	uhc_enum_try = 0;
   9b118:	2300      	movs	r3, #0
   9b11a:	702b      	strb	r3, [r5, #0]
}
   9b11c:	b005      	add	sp, #20
   9b11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
   9b120:	2901      	cmp	r1, #1
   9b122:	d115      	bne.n	9b150 <uhc_enumeration_step14+0x6c>
		uhc_enum_try = 0;
   9b124:	2200      	movs	r2, #0
   9b126:	4b26      	ldr	r3, [pc, #152]	; (9b1c0 <uhc_enumeration_step14+0xdc>)
   9b128:	701a      	strb	r2, [r3, #0]
}
   9b12a:	b005      	add	sp, #20
   9b12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
   9b12e:	6963      	ldr	r3, [r4, #20]
   9b130:	7859      	ldrb	r1, [r3, #1]
   9b132:	2902      	cmp	r1, #2
   9b134:	d1dc      	bne.n	9b0f0 <uhc_enumeration_step14+0xc>
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
   9b136:	885b      	ldrh	r3, [r3, #2]
   9b138:	4293      	cmp	r3, r2
   9b13a:	d1d9      	bne.n	9b0f0 <uhc_enumeration_step14+0xc>
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
   9b13c:	4620      	mov	r0, r4
   9b13e:	4b22      	ldr	r3, [pc, #136]	; (9b1c8 <uhc_enumeration_step14+0xe4>)
   9b140:	4798      	blx	r3
   9b142:	4605      	mov	r5, r0
   9b144:	b158      	cbz	r0, 9b15e <uhc_enumeration_step14+0x7a>
   9b146:	2801      	cmp	r0, #1
   9b148:	d12d      	bne.n	9b1a6 <uhc_enumeration_step14+0xc2>
		uhd_suspend();
   9b14a:	4b1e      	ldr	r3, [pc, #120]	; (9b1c4 <uhc_enumeration_step14+0xe0>)
   9b14c:	4798      	blx	r3
   9b14e:	e7e5      	b.n	9b11c <uhc_enumeration_step14+0x38>
   9b150:	4c18      	ldr	r4, [pc, #96]	; (9b1b4 <uhc_enumeration_step14+0xd0>)
   9b152:	e7cd      	b.n	9b0f0 <uhc_enumeration_step14+0xc>
		uhd_send_reset(callback);
   9b154:	481d      	ldr	r0, [pc, #116]	; (9b1cc <uhc_enumeration_step14+0xe8>)
   9b156:	4b1e      	ldr	r3, [pc, #120]	; (9b1d0 <uhc_enumeration_step14+0xec>)
   9b158:	4798      	blx	r3
}
   9b15a:	b005      	add	sp, #20
   9b15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req.bRequest = USB_REQ_SET_CONFIGURATION;
   9b15e:	2709      	movs	r7, #9
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
   9b160:	6963      	ldr	r3, [r4, #20]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b162:	4a1c      	ldr	r2, [pc, #112]	; (9b1d4 <uhc_enumeration_step14+0xf0>)
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
   9b164:	795e      	ldrb	r6, [r3, #5]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b166:	a902      	add	r1, sp, #8
   9b168:	462b      	mov	r3, r5
   9b16a:	9500      	str	r5, [sp, #0]
   9b16c:	9201      	str	r2, [sp, #4]
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
   9b16e:	f8ad 600a 	strh.w	r6, [sp, #10]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b172:	462a      	mov	r2, r5
   9b174:	2001      	movs	r0, #1
   9b176:	4e18      	ldr	r6, [pc, #96]	; (9b1d8 <uhc_enumeration_step14+0xf4>)
	req.bmRequestType = USB_REQ_RECIP_DEVICE
   9b178:	f88d 5008 	strb.w	r5, [sp, #8]
	req.wIndex = 0;
   9b17c:	f8ad 500c 	strh.w	r5, [sp, #12]
	req.wLength = 0;
   9b180:	f8ad 500e 	strh.w	r5, [sp, #14]
	req.bRequest = USB_REQ_SET_CONFIGURATION;
   9b184:	f88d 7009 	strb.w	r7, [sp, #9]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b188:	47b0      	blx	r6
   9b18a:	4605      	mov	r5, r0
   9b18c:	2800      	cmp	r0, #0
   9b18e:	d1c5      	bne.n	9b11c <uhc_enumeration_step14+0x38>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b190:	7ca0      	ldrb	r0, [r4, #18]
   9b192:	21ff      	movs	r1, #255	; 0xff
   9b194:	4b08      	ldr	r3, [pc, #32]	; (9b1b8 <uhc_enumeration_step14+0xd4>)
   9b196:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
   9b198:	6960      	ldr	r0, [r4, #20]
   9b19a:	2800      	cmp	r0, #0
   9b19c:	d0b2      	beq.n	9b104 <uhc_enumeration_step14+0x20>
		free(uhc_dev_enum->conf_desc);
   9b19e:	4b07      	ldr	r3, [pc, #28]	; (9b1bc <uhc_enumeration_step14+0xd8>)
   9b1a0:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b1a2:	6165      	str	r5, [r4, #20]
   9b1a4:	e7ae      	b.n	9b104 <uhc_enumeration_step14+0x20>
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
   9b1a6:	21ff      	movs	r1, #255	; 0xff
   9b1a8:	2001      	movs	r0, #1
   9b1aa:	4b03      	ldr	r3, [pc, #12]	; (9b1b8 <uhc_enumeration_step14+0xd4>)
   9b1ac:	4798      	blx	r3
		uhd_suspend();
   9b1ae:	4b05      	ldr	r3, [pc, #20]	; (9b1c4 <uhc_enumeration_step14+0xe0>)
   9b1b0:	4798      	blx	r3
   9b1b2:	e7b3      	b.n	9b11c <uhc_enumeration_step14+0x38>
   9b1b4:	20072cb0 	.word	0x20072cb0
   9b1b8:	0009e709 	.word	0x0009e709
   9b1bc:	000a52f1 	.word	0x000a52f1
   9b1c0:	20072cc8 	.word	0x20072cc8
   9b1c4:	0009e2c5 	.word	0x0009e2c5
   9b1c8:	0009a87d 	.word	0x0009a87d
   9b1cc:	0009aec9 	.word	0x0009aec9
   9b1d0:	0009e2a9 	.word	0x0009e2a9
   9b1d4:	0009afd9 	.word	0x0009afd9
   9b1d8:	0009e8fd 	.word	0x0009e8fd

0009b1dc <uhc_enumeration_step5>:
{
   9b1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req.wIndex = 0;
   9b1de:	2400      	movs	r4, #0
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
   9b1e0:	2308      	movs	r3, #8
	req.wValue = (USB_DT_DEVICE << 8);
   9b1e2:	f44f 7280 	mov.w	r2, #256	; 0x100
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
   9b1e6:	2780      	movs	r7, #128	; 0x80
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
   9b1e8:	2506      	movs	r5, #6
{
   9b1ea:	b085      	sub	sp, #20
	uhd_ep_free(0, 0);
   9b1ec:	4621      	mov	r1, r4
   9b1ee:	4620      	mov	r0, r4
   9b1f0:	4e22      	ldr	r6, [pc, #136]	; (9b27c <uhc_enumeration_step5+0xa0>)
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
   9b1f2:	f8ad 300e 	strh.w	r3, [sp, #14]
	req.wIndex = 0;
   9b1f6:	f8ad 400c 	strh.w	r4, [sp, #12]
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
   9b1fa:	f88d 7008 	strb.w	r7, [sp, #8]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
   9b1fe:	f88d 5009 	strb.w	r5, [sp, #9]
	req.wValue = (USB_DT_DEVICE << 8);
   9b202:	f8ad 200a 	strh.w	r2, [sp, #10]
	uhd_ep_free(0, 0);
   9b206:	47b0      	blx	r6
	if (!uhd_ep0_alloc(0, 64)) {
   9b208:	4620      	mov	r0, r4
   9b20a:	2140      	movs	r1, #64	; 0x40
   9b20c:	4b1c      	ldr	r3, [pc, #112]	; (9b280 <uhc_enumeration_step5+0xa4>)
   9b20e:	4798      	blx	r3
   9b210:	b9b8      	cbnz	r0, 9b242 <uhc_enumeration_step5+0x66>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b212:	4d1c      	ldr	r5, [pc, #112]	; (9b284 <uhc_enumeration_step5+0xa8>)
   9b214:	4607      	mov	r7, r0
   9b216:	21ff      	movs	r1, #255	; 0xff
   9b218:	7ca8      	ldrb	r0, [r5, #18]
   9b21a:	47b0      	blx	r6
	if (uhc_dev_enum->conf_desc != NULL) {
   9b21c:	6968      	ldr	r0, [r5, #20]
   9b21e:	b110      	cbz	r0, 9b226 <uhc_enumeration_step5+0x4a>
		free(uhc_dev_enum->conf_desc);
   9b220:	4b19      	ldr	r3, [pc, #100]	; (9b288 <uhc_enumeration_step5+0xac>)
   9b222:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b224:	616f      	str	r7, [r5, #20]
	uhc_dev_enum->address = 0;
   9b226:	2300      	movs	r3, #0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b228:	4c18      	ldr	r4, [pc, #96]	; (9b28c <uhc_enumeration_step5+0xb0>)
	uhc_dev_enum->address = 0;
   9b22a:	74ab      	strb	r3, [r5, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b22c:	7823      	ldrb	r3, [r4, #0]
   9b22e:	1c5a      	adds	r2, r3, #1
   9b230:	2b03      	cmp	r3, #3
   9b232:	7022      	strb	r2, [r4, #0]
   9b234:	d91c      	bls.n	9b270 <uhc_enumeration_step5+0x94>
		uhd_suspend();
   9b236:	4b16      	ldr	r3, [pc, #88]	; (9b290 <uhc_enumeration_step5+0xb4>)
   9b238:	4798      	blx	r3
	uhc_enum_try = 0;
   9b23a:	2300      	movs	r3, #0
   9b23c:	7023      	strb	r3, [r4, #0]
}
   9b23e:	b005      	add	sp, #20
   9b240:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!uhd_setup_request(0,
   9b242:	4b14      	ldr	r3, [pc, #80]	; (9b294 <uhc_enumeration_step5+0xb8>)
   9b244:	4d0f      	ldr	r5, [pc, #60]	; (9b284 <uhc_enumeration_step5+0xa8>)
   9b246:	9400      	str	r4, [sp, #0]
   9b248:	4620      	mov	r0, r4
   9b24a:	9301      	str	r3, [sp, #4]
   9b24c:	4c12      	ldr	r4, [pc, #72]	; (9b298 <uhc_enumeration_step5+0xbc>)
   9b24e:	462a      	mov	r2, r5
   9b250:	2312      	movs	r3, #18
   9b252:	a902      	add	r1, sp, #8
   9b254:	47a0      	blx	r4
   9b256:	4604      	mov	r4, r0
   9b258:	2800      	cmp	r0, #0
   9b25a:	d1f0      	bne.n	9b23e <uhc_enumeration_step5+0x62>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b25c:	7ca8      	ldrb	r0, [r5, #18]
   9b25e:	21ff      	movs	r1, #255	; 0xff
   9b260:	47b0      	blx	r6
	if (uhc_dev_enum->conf_desc != NULL) {
   9b262:	6968      	ldr	r0, [r5, #20]
   9b264:	2800      	cmp	r0, #0
   9b266:	d0de      	beq.n	9b226 <uhc_enumeration_step5+0x4a>
		free(uhc_dev_enum->conf_desc);
   9b268:	4b07      	ldr	r3, [pc, #28]	; (9b288 <uhc_enumeration_step5+0xac>)
   9b26a:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b26c:	616c      	str	r4, [r5, #20]
   9b26e:	e7da      	b.n	9b226 <uhc_enumeration_step5+0x4a>
		uhd_send_reset(callback);
   9b270:	480a      	ldr	r0, [pc, #40]	; (9b29c <uhc_enumeration_step5+0xc0>)
   9b272:	4b0b      	ldr	r3, [pc, #44]	; (9b2a0 <uhc_enumeration_step5+0xc4>)
   9b274:	4798      	blx	r3
}
   9b276:	b005      	add	sp, #20
   9b278:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9b27a:	bf00      	nop
   9b27c:	0009e709 	.word	0x0009e709
   9b280:	0009e3bd 	.word	0x0009e3bd
   9b284:	20072cb0 	.word	0x20072cb0
   9b288:	000a52f1 	.word	0x000a52f1
   9b28c:	20072cc8 	.word	0x20072cc8
   9b290:	0009e2c5 	.word	0x0009e2c5
   9b294:	0009af4d 	.word	0x0009af4d
   9b298:	0009e8fd 	.word	0x0009e8fd
   9b29c:	0009aec9 	.word	0x0009aec9
   9b2a0:	0009e2a9 	.word	0x0009e2a9

0009b2a4 <uhc_enumeration_step11>:
	uhd_ep_free(0, 0);
   9b2a4:	2100      	movs	r1, #0
{
   9b2a6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
   9b2a8:	4c21      	ldr	r4, [pc, #132]	; (9b330 <uhc_enumeration_step11+0x8c>)
	uhd_ep_free(0, 0);
   9b2aa:	4608      	mov	r0, r1
{
   9b2ac:	b085      	sub	sp, #20
	uhd_ep_free(0, 0);
   9b2ae:	4d21      	ldr	r5, [pc, #132]	; (9b334 <uhc_enumeration_step11+0x90>)
   9b2b0:	47a8      	blx	r5
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
   9b2b2:	79e1      	ldrb	r1, [r4, #7]
   9b2b4:	2001      	movs	r0, #1
   9b2b6:	4b20      	ldr	r3, [pc, #128]	; (9b338 <uhc_enumeration_step11+0x94>)
   9b2b8:	4798      	blx	r3
   9b2ba:	b9b0      	cbnz	r0, 9b2ea <uhc_enumeration_step11+0x46>
   9b2bc:	4606      	mov	r6, r0
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b2be:	7ca0      	ldrb	r0, [r4, #18]
   9b2c0:	21ff      	movs	r1, #255	; 0xff
   9b2c2:	47a8      	blx	r5
	if (uhc_dev_enum->conf_desc != NULL) {
   9b2c4:	6960      	ldr	r0, [r4, #20]
   9b2c6:	b110      	cbz	r0, 9b2ce <uhc_enumeration_step11+0x2a>
		free(uhc_dev_enum->conf_desc);
   9b2c8:	4b1c      	ldr	r3, [pc, #112]	; (9b33c <uhc_enumeration_step11+0x98>)
   9b2ca:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b2cc:	6166      	str	r6, [r4, #20]
	uhc_dev_enum->address = 0;
   9b2ce:	2300      	movs	r3, #0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b2d0:	4d1b      	ldr	r5, [pc, #108]	; (9b340 <uhc_enumeration_step11+0x9c>)
	uhc_dev_enum->address = 0;
   9b2d2:	74a3      	strb	r3, [r4, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b2d4:	782b      	ldrb	r3, [r5, #0]
   9b2d6:	1c5a      	adds	r2, r3, #1
   9b2d8:	2b03      	cmp	r3, #3
   9b2da:	702a      	strb	r2, [r5, #0]
   9b2dc:	d923      	bls.n	9b326 <uhc_enumeration_step11+0x82>
		uhd_suspend();
   9b2de:	4b19      	ldr	r3, [pc, #100]	; (9b344 <uhc_enumeration_step11+0xa0>)
   9b2e0:	4798      	blx	r3
	uhc_enum_try = 0;
   9b2e2:	2300      	movs	r3, #0
   9b2e4:	702b      	strb	r3, [r5, #0]
}
   9b2e6:	b005      	add	sp, #20
   9b2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req.wIndex = 0;
   9b2ea:	2200      	movs	r2, #0
	req.wLength = sizeof(usb_dev_desc_t);
   9b2ec:	2112      	movs	r1, #18
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
   9b2ee:	2080      	movs	r0, #128	; 0x80
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
   9b2f0:	2606      	movs	r6, #6
	req.wValue = (USB_DT_DEVICE << 8);
   9b2f2:	f44f 7780 	mov.w	r7, #256	; 0x100
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b2f6:	4b14      	ldr	r3, [pc, #80]	; (9b348 <uhc_enumeration_step11+0xa4>)
	req.wIndex = 0;
   9b2f8:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b2fc:	e88d 000c 	stmia.w	sp, {r2, r3}
	req.wLength = sizeof(usb_dev_desc_t);
   9b300:	f8ad 100e 	strh.w	r1, [sp, #14]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b304:	460b      	mov	r3, r1
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
   9b306:	f88d 0008 	strb.w	r0, [sp, #8]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
   9b30a:	f88d 6009 	strb.w	r6, [sp, #9]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b30e:	4622      	mov	r2, r4
   9b310:	4e0e      	ldr	r6, [pc, #56]	; (9b34c <uhc_enumeration_step11+0xa8>)
   9b312:	a902      	add	r1, sp, #8
   9b314:	2001      	movs	r0, #1
	req.wValue = (USB_DT_DEVICE << 8);
   9b316:	f8ad 700a 	strh.w	r7, [sp, #10]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b31a:	47b0      	blx	r6
   9b31c:	4606      	mov	r6, r0
   9b31e:	2800      	cmp	r0, #0
   9b320:	d0cd      	beq.n	9b2be <uhc_enumeration_step11+0x1a>
}
   9b322:	b005      	add	sp, #20
   9b324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uhd_send_reset(callback);
   9b326:	480a      	ldr	r0, [pc, #40]	; (9b350 <uhc_enumeration_step11+0xac>)
   9b328:	4b0a      	ldr	r3, [pc, #40]	; (9b354 <uhc_enumeration_step11+0xb0>)
   9b32a:	4798      	blx	r3
}
   9b32c:	b005      	add	sp, #20
   9b32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9b330:	20072cb0 	.word	0x20072cb0
   9b334:	0009e709 	.word	0x0009e709
   9b338:	0009e3bd 	.word	0x0009e3bd
   9b33c:	000a52f1 	.word	0x000a52f1
   9b340:	20072cc8 	.word	0x20072cc8
   9b344:	0009e2c5 	.word	0x0009e2c5
   9b348:	0009b419 	.word	0x0009b419
   9b34c:	0009e8fd 	.word	0x0009e8fd
   9b350:	0009aec9 	.word	0x0009aec9
   9b354:	0009e2a9 	.word	0x0009e2a9

0009b358 <uhc_enumeration_step9>:
{
   9b358:	b5f0      	push	{r4, r5, r6, r7, lr}
	req.bmRequestType = USB_REQ_RECIP_DEVICE
   9b35a:	2400      	movs	r4, #0
	req.wValue = UHC_DEVICE_ENUM_ADD;
   9b35c:	2301      	movs	r3, #1
	req.bRequest = USB_REQ_SET_ADDRESS;
   9b35e:	2205      	movs	r2, #5
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
   9b360:	4d23      	ldr	r5, [pc, #140]	; (9b3f0 <uhc_enumeration_step9+0x98>)
{
   9b362:	b085      	sub	sp, #20
	uhd_ep_free(0, 0);
   9b364:	4621      	mov	r1, r4
   9b366:	4620      	mov	r0, r4
   9b368:	4e22      	ldr	r6, [pc, #136]	; (9b3f4 <uhc_enumeration_step9+0x9c>)
	req.wValue = UHC_DEVICE_ENUM_ADD;
   9b36a:	f8ad 300a 	strh.w	r3, [sp, #10]
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
   9b36e:	74ab      	strb	r3, [r5, #18]
	req.bmRequestType = USB_REQ_RECIP_DEVICE
   9b370:	f88d 4008 	strb.w	r4, [sp, #8]
	req.wIndex = 0;
   9b374:	f8ad 400c 	strh.w	r4, [sp, #12]
	req.wLength = 0;
   9b378:	f8ad 400e 	strh.w	r4, [sp, #14]
	req.bRequest = USB_REQ_SET_ADDRESS;
   9b37c:	f88d 2009 	strb.w	r2, [sp, #9]
	uhd_ep_free(0, 0);
   9b380:	47b0      	blx	r6
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
   9b382:	79e9      	ldrb	r1, [r5, #7]
   9b384:	4620      	mov	r0, r4
   9b386:	4b1c      	ldr	r3, [pc, #112]	; (9b3f8 <uhc_enumeration_step9+0xa0>)
   9b388:	4798      	blx	r3
   9b38a:	b9b0      	cbnz	r0, 9b3ba <uhc_enumeration_step9+0x62>
   9b38c:	4607      	mov	r7, r0
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b38e:	21ff      	movs	r1, #255	; 0xff
   9b390:	7ca8      	ldrb	r0, [r5, #18]
   9b392:	47b0      	blx	r6
	if (uhc_dev_enum->conf_desc != NULL) {
   9b394:	6968      	ldr	r0, [r5, #20]
   9b396:	b110      	cbz	r0, 9b39e <uhc_enumeration_step9+0x46>
		free(uhc_dev_enum->conf_desc);
   9b398:	4b18      	ldr	r3, [pc, #96]	; (9b3fc <uhc_enumeration_step9+0xa4>)
   9b39a:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b39c:	616f      	str	r7, [r5, #20]
	uhc_dev_enum->address = 0;
   9b39e:	2300      	movs	r3, #0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b3a0:	4c17      	ldr	r4, [pc, #92]	; (9b400 <uhc_enumeration_step9+0xa8>)
	uhc_dev_enum->address = 0;
   9b3a2:	74ab      	strb	r3, [r5, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b3a4:	7823      	ldrb	r3, [r4, #0]
   9b3a6:	1c5a      	adds	r2, r3, #1
   9b3a8:	2b03      	cmp	r3, #3
   9b3aa:	7022      	strb	r2, [r4, #0]
   9b3ac:	d91b      	bls.n	9b3e6 <uhc_enumeration_step9+0x8e>
		uhd_suspend();
   9b3ae:	4b15      	ldr	r3, [pc, #84]	; (9b404 <uhc_enumeration_step9+0xac>)
   9b3b0:	4798      	blx	r3
	uhc_enum_try = 0;
   9b3b2:	2300      	movs	r3, #0
   9b3b4:	7023      	strb	r3, [r4, #0]
}
   9b3b6:	b005      	add	sp, #20
   9b3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!uhd_setup_request(0,
   9b3ba:	4b13      	ldr	r3, [pc, #76]	; (9b408 <uhc_enumeration_step9+0xb0>)
   9b3bc:	9400      	str	r4, [sp, #0]
   9b3be:	4620      	mov	r0, r4
   9b3c0:	9301      	str	r3, [sp, #4]
   9b3c2:	4c12      	ldr	r4, [pc, #72]	; (9b40c <uhc_enumeration_step9+0xb4>)
   9b3c4:	2312      	movs	r3, #18
   9b3c6:	462a      	mov	r2, r5
   9b3c8:	a902      	add	r1, sp, #8
   9b3ca:	47a0      	blx	r4
   9b3cc:	4604      	mov	r4, r0
   9b3ce:	2800      	cmp	r0, #0
   9b3d0:	d1f1      	bne.n	9b3b6 <uhc_enumeration_step9+0x5e>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b3d2:	7ca8      	ldrb	r0, [r5, #18]
   9b3d4:	21ff      	movs	r1, #255	; 0xff
   9b3d6:	47b0      	blx	r6
	if (uhc_dev_enum->conf_desc != NULL) {
   9b3d8:	6968      	ldr	r0, [r5, #20]
   9b3da:	2800      	cmp	r0, #0
   9b3dc:	d0df      	beq.n	9b39e <uhc_enumeration_step9+0x46>
		free(uhc_dev_enum->conf_desc);
   9b3de:	4b07      	ldr	r3, [pc, #28]	; (9b3fc <uhc_enumeration_step9+0xa4>)
   9b3e0:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b3e2:	616c      	str	r4, [r5, #20]
   9b3e4:	e7db      	b.n	9b39e <uhc_enumeration_step9+0x46>
		uhd_send_reset(callback);
   9b3e6:	480a      	ldr	r0, [pc, #40]	; (9b410 <uhc_enumeration_step9+0xb8>)
   9b3e8:	4b0a      	ldr	r3, [pc, #40]	; (9b414 <uhc_enumeration_step9+0xbc>)
   9b3ea:	4798      	blx	r3
}
   9b3ec:	b005      	add	sp, #20
   9b3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9b3f0:	20072cb0 	.word	0x20072cb0
   9b3f4:	0009e709 	.word	0x0009e709
   9b3f8:	0009e3bd 	.word	0x0009e3bd
   9b3fc:	000a52f1 	.word	0x000a52f1
   9b400:	20072cc8 	.word	0x20072cc8
   9b404:	0009e2c5 	.word	0x0009e2c5
   9b408:	0009b065 	.word	0x0009b065
   9b40c:	0009e8fd 	.word	0x0009e8fd
   9b410:	0009aec9 	.word	0x0009aec9
   9b414:	0009e2a9 	.word	0x0009e2a9

0009b418 <uhc_enumeration_step12>:
{
   9b418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9b41c:	b086      	sub	sp, #24
	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
   9b41e:	b9d9      	cbnz	r1, 9b458 <uhc_enumeration_step12+0x40>
   9b420:	2a12      	cmp	r2, #18
   9b422:	4c34      	ldr	r4, [pc, #208]	; (9b4f4 <uhc_enumeration_step12+0xdc>)
   9b424:	d028      	beq.n	9b478 <uhc_enumeration_step12+0x60>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b426:	7ca0      	ldrb	r0, [r4, #18]
   9b428:	21ff      	movs	r1, #255	; 0xff
   9b42a:	4b33      	ldr	r3, [pc, #204]	; (9b4f8 <uhc_enumeration_step12+0xe0>)
   9b42c:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
   9b42e:	6960      	ldr	r0, [r4, #20]
   9b430:	b118      	cbz	r0, 9b43a <uhc_enumeration_step12+0x22>
		free(uhc_dev_enum->conf_desc);
   9b432:	4b32      	ldr	r3, [pc, #200]	; (9b4fc <uhc_enumeration_step12+0xe4>)
   9b434:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b436:	2300      	movs	r3, #0
   9b438:	6163      	str	r3, [r4, #20]
	uhc_dev_enum->address = 0;
   9b43a:	2300      	movs	r3, #0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b43c:	4d30      	ldr	r5, [pc, #192]	; (9b500 <uhc_enumeration_step12+0xe8>)
	uhc_dev_enum->address = 0;
   9b43e:	74a3      	strb	r3, [r4, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b440:	782b      	ldrb	r3, [r5, #0]
   9b442:	1c5a      	adds	r2, r3, #1
   9b444:	2b03      	cmp	r3, #3
   9b446:	702a      	strb	r2, [r5, #0]
   9b448:	d910      	bls.n	9b46c <uhc_enumeration_step12+0x54>
		uhd_suspend();
   9b44a:	4b2e      	ldr	r3, [pc, #184]	; (9b504 <uhc_enumeration_step12+0xec>)
   9b44c:	4798      	blx	r3
	uhc_enum_try = 0;
   9b44e:	2300      	movs	r3, #0
   9b450:	702b      	strb	r3, [r5, #0]
}
   9b452:	b006      	add	sp, #24
   9b454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
   9b458:	2901      	cmp	r1, #1
   9b45a:	d105      	bne.n	9b468 <uhc_enumeration_step12+0x50>
		uhc_enum_try = 0;
   9b45c:	2200      	movs	r2, #0
   9b45e:	4b28      	ldr	r3, [pc, #160]	; (9b500 <uhc_enumeration_step12+0xe8>)
   9b460:	701a      	strb	r2, [r3, #0]
}
   9b462:	b006      	add	sp, #24
   9b464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9b468:	4c22      	ldr	r4, [pc, #136]	; (9b4f4 <uhc_enumeration_step12+0xdc>)
   9b46a:	e7dc      	b.n	9b426 <uhc_enumeration_step12+0xe>
		uhd_send_reset(callback);
   9b46c:	4826      	ldr	r0, [pc, #152]	; (9b508 <uhc_enumeration_step12+0xf0>)
   9b46e:	4b27      	ldr	r3, [pc, #156]	; (9b50c <uhc_enumeration_step12+0xf4>)
   9b470:	4798      	blx	r3
}
   9b472:	b006      	add	sp, #24
   9b474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
   9b478:	7865      	ldrb	r5, [r4, #1]
   9b47a:	2d01      	cmp	r5, #1
   9b47c:	d1d3      	bne.n	9b426 <uhc_enumeration_step12+0xe>
	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
   9b47e:	2009      	movs	r0, #9
   9b480:	4b23      	ldr	r3, [pc, #140]	; (9b510 <uhc_enumeration_step12+0xf8>)
   9b482:	9103      	str	r1, [sp, #12]
   9b484:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc == NULL) {
   9b486:	9903      	ldr	r1, [sp, #12]
	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
   9b488:	4606      	mov	r6, r0
   9b48a:	6160      	str	r0, [r4, #20]
	if (uhc_dev_enum->conf_desc == NULL) {
   9b48c:	b338      	cbz	r0, 9b4de <uhc_enumeration_step12+0xc6>
	req.wLength = sizeof(usb_conf_desc_t);
   9b48e:	2709      	movs	r7, #9
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
   9b490:	f04f 0c06 	mov.w	ip, #6
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
   9b494:	f44f 7e00 	mov.w	lr, #512	; 0x200
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
   9b498:	f04f 0880 	mov.w	r8, #128	; 0x80
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b49c:	4b1d      	ldr	r3, [pc, #116]	; (9b514 <uhc_enumeration_step12+0xfc>)
   9b49e:	9100      	str	r1, [sp, #0]
   9b4a0:	4602      	mov	r2, r0
   9b4a2:	9301      	str	r3, [sp, #4]
   9b4a4:	4628      	mov	r0, r5
	req.wIndex = 0;
   9b4a6:	f8ad 1014 	strh.w	r1, [sp, #20]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b4aa:	4d1b      	ldr	r5, [pc, #108]	; (9b518 <uhc_enumeration_step12+0x100>)
   9b4ac:	463b      	mov	r3, r7
   9b4ae:	a904      	add	r1, sp, #16
	req.wLength = sizeof(usb_conf_desc_t);
   9b4b0:	f8ad 7016 	strh.w	r7, [sp, #22]
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
   9b4b4:	f88d 8010 	strb.w	r8, [sp, #16]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
   9b4b8:	f88d c011 	strb.w	ip, [sp, #17]
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
   9b4bc:	f8ad e012 	strh.w	lr, [sp, #18]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b4c0:	47a8      	blx	r5
   9b4c2:	4605      	mov	r5, r0
   9b4c4:	2800      	cmp	r0, #0
   9b4c6:	d1c4      	bne.n	9b452 <uhc_enumeration_step12+0x3a>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b4c8:	7ca0      	ldrb	r0, [r4, #18]
   9b4ca:	21ff      	movs	r1, #255	; 0xff
   9b4cc:	4b0a      	ldr	r3, [pc, #40]	; (9b4f8 <uhc_enumeration_step12+0xe0>)
   9b4ce:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
   9b4d0:	6960      	ldr	r0, [r4, #20]
   9b4d2:	2800      	cmp	r0, #0
   9b4d4:	d0b1      	beq.n	9b43a <uhc_enumeration_step12+0x22>
		free(uhc_dev_enum->conf_desc);
   9b4d6:	4b09      	ldr	r3, [pc, #36]	; (9b4fc <uhc_enumeration_step12+0xe4>)
   9b4d8:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b4da:	6165      	str	r5, [r4, #20]
   9b4dc:	e7ad      	b.n	9b43a <uhc_enumeration_step12+0x22>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b4de:	7ca0      	ldrb	r0, [r4, #18]
   9b4e0:	21ff      	movs	r1, #255	; 0xff
   9b4e2:	4b05      	ldr	r3, [pc, #20]	; (9b4f8 <uhc_enumeration_step12+0xe0>)
   9b4e4:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
   9b4e6:	6960      	ldr	r0, [r4, #20]
   9b4e8:	2800      	cmp	r0, #0
   9b4ea:	d0a6      	beq.n	9b43a <uhc_enumeration_step12+0x22>
		free(uhc_dev_enum->conf_desc);
   9b4ec:	4b03      	ldr	r3, [pc, #12]	; (9b4fc <uhc_enumeration_step12+0xe4>)
   9b4ee:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b4f0:	6166      	str	r6, [r4, #20]
   9b4f2:	e7a2      	b.n	9b43a <uhc_enumeration_step12+0x22>
   9b4f4:	20072cb0 	.word	0x20072cb0
   9b4f8:	0009e709 	.word	0x0009e709
   9b4fc:	000a52f1 	.word	0x000a52f1
   9b500:	20072cc8 	.word	0x20072cc8
   9b504:	0009e2c5 	.word	0x0009e2c5
   9b508:	0009aec9 	.word	0x0009aec9
   9b50c:	0009e2a9 	.word	0x0009e2a9
   9b510:	000a52e1 	.word	0x000a52e1
   9b514:	0009b51d 	.word	0x0009b51d
   9b518:	0009e8fd 	.word	0x0009e8fd

0009b51c <uhc_enumeration_step13>:
{
   9b51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   9b520:	b085      	sub	sp, #20
	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
   9b522:	b9d9      	cbnz	r1, 9b55c <uhc_enumeration_step13+0x40>
   9b524:	2a09      	cmp	r2, #9
   9b526:	4c3b      	ldr	r4, [pc, #236]	; (9b614 <uhc_enumeration_step13+0xf8>)
   9b528:	d022      	beq.n	9b570 <uhc_enumeration_step13+0x54>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b52a:	7ca0      	ldrb	r0, [r4, #18]
   9b52c:	21ff      	movs	r1, #255	; 0xff
   9b52e:	4b3a      	ldr	r3, [pc, #232]	; (9b618 <uhc_enumeration_step13+0xfc>)
   9b530:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
   9b532:	6960      	ldr	r0, [r4, #20]
   9b534:	b118      	cbz	r0, 9b53e <uhc_enumeration_step13+0x22>
		free(uhc_dev_enum->conf_desc);
   9b536:	4b39      	ldr	r3, [pc, #228]	; (9b61c <uhc_enumeration_step13+0x100>)
   9b538:	4798      	blx	r3
		uhc_dev_enum->conf_desc = NULL;
   9b53a:	2300      	movs	r3, #0
   9b53c:	6163      	str	r3, [r4, #20]
	uhc_dev_enum->address = 0;
   9b53e:	2300      	movs	r3, #0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b540:	4d37      	ldr	r5, [pc, #220]	; (9b620 <uhc_enumeration_step13+0x104>)
	uhc_dev_enum->address = 0;
   9b542:	74a3      	strb	r3, [r4, #18]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
   9b544:	782b      	ldrb	r3, [r5, #0]
   9b546:	1c5a      	adds	r2, r3, #1
   9b548:	2b03      	cmp	r3, #3
   9b54a:	702a      	strb	r2, [r5, #0]
   9b54c:	d91d      	bls.n	9b58a <uhc_enumeration_step13+0x6e>
		uhd_suspend();
   9b54e:	4b35      	ldr	r3, [pc, #212]	; (9b624 <uhc_enumeration_step13+0x108>)
   9b550:	4798      	blx	r3
	uhc_enum_try = 0;
   9b552:	2300      	movs	r3, #0
   9b554:	702b      	strb	r3, [r5, #0]
}
   9b556:	b005      	add	sp, #20
   9b558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
   9b55c:	2901      	cmp	r1, #1
   9b55e:	d105      	bne.n	9b56c <uhc_enumeration_step13+0x50>
		uhc_enum_try = 0;
   9b560:	2200      	movs	r2, #0
   9b562:	4b2f      	ldr	r3, [pc, #188]	; (9b620 <uhc_enumeration_step13+0x104>)
   9b564:	701a      	strb	r2, [r3, #0]
}
   9b566:	b005      	add	sp, #20
   9b568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   9b56c:	4c29      	ldr	r4, [pc, #164]	; (9b614 <uhc_enumeration_step13+0xf8>)
   9b56e:	e7dc      	b.n	9b52a <uhc_enumeration_step13+0xe>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
   9b570:	6963      	ldr	r3, [r4, #20]
   9b572:	785a      	ldrb	r2, [r3, #1]
   9b574:	2a02      	cmp	r2, #2
   9b576:	d1d8      	bne.n	9b52a <uhc_enumeration_step13+0xe>
	if (!(uhc_dev_enum->conf_desc->bmAttributes
   9b578:	79da      	ldrb	r2, [r3, #7]
   9b57a:	0652      	lsls	r2, r2, #25
   9b57c:	d40b      	bmi.n	9b596 <uhc_enumeration_step13+0x7a>
		bus_power = uhc_dev_enum->conf_desc->bMaxPower * 2;
   9b57e:	7a1a      	ldrb	r2, [r3, #8]
	if ((bus_power + uhc_power_running) > USB_HOST_POWER_MAX) {
   9b580:	2afa      	cmp	r2, #250	; 0xfa
   9b582:	d908      	bls.n	9b596 <uhc_enumeration_step13+0x7a>
		uhd_suspend();
   9b584:	4b27      	ldr	r3, [pc, #156]	; (9b624 <uhc_enumeration_step13+0x108>)
   9b586:	4798      	blx	r3
   9b588:	e7e5      	b.n	9b556 <uhc_enumeration_step13+0x3a>
		uhd_send_reset(callback);
   9b58a:	4827      	ldr	r0, [pc, #156]	; (9b628 <uhc_enumeration_step13+0x10c>)
   9b58c:	4b27      	ldr	r3, [pc, #156]	; (9b62c <uhc_enumeration_step13+0x110>)
   9b58e:	4798      	blx	r3
}
   9b590:	b005      	add	sp, #20
   9b592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
   9b596:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	free(uhc_dev_enum->conf_desc);
   9b59a:	4618      	mov	r0, r3
   9b59c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 9b61c <uhc_enumeration_step13+0x100>
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
   9b5a0:	795d      	ldrb	r5, [r3, #5]
	free(uhc_dev_enum->conf_desc);
   9b5a2:	47c0      	blx	r8
	uhc_dev_enum->conf_desc = malloc(conf_size);
   9b5a4:	4648      	mov	r0, r9
   9b5a6:	4b22      	ldr	r3, [pc, #136]	; (9b630 <uhc_enumeration_step13+0x114>)
   9b5a8:	4798      	blx	r3
   9b5aa:	4606      	mov	r6, r0
   9b5ac:	6160      	str	r0, [r4, #20]
	if (uhc_dev_enum->conf_desc == NULL) {
   9b5ae:	b338      	cbz	r0, 9b600 <uhc_enumeration_step13+0xe4>
	req.wIndex = 0;
   9b5b0:	2000      	movs	r0, #0
	req.bmRequestType =
   9b5b2:	f04f 0c80 	mov.w	ip, #128	; 0x80
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
   9b5b6:	f04f 0e06 	mov.w	lr, #6
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b5ba:	491e      	ldr	r1, [pc, #120]	; (9b634 <uhc_enumeration_step13+0x118>)
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
   9b5bc:	3d01      	subs	r5, #1
   9b5be:	f445 7500 	orr.w	r5, r5, #512	; 0x200
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b5c2:	9000      	str	r0, [sp, #0]
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
   9b5c4:	f8ad 500a 	strh.w	r5, [sp, #10]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b5c8:	9101      	str	r1, [sp, #4]
	req.wIndex = 0;
   9b5ca:	f8ad 000c 	strh.w	r0, [sp, #12]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b5ce:	4d1a      	ldr	r5, [pc, #104]	; (9b638 <uhc_enumeration_step13+0x11c>)
   9b5d0:	464b      	mov	r3, r9
   9b5d2:	4632      	mov	r2, r6
   9b5d4:	a902      	add	r1, sp, #8
   9b5d6:	2001      	movs	r0, #1
	req.wLength = conf_size;
   9b5d8:	f8ad 900e 	strh.w	r9, [sp, #14]
	req.bmRequestType =
   9b5dc:	f88d c008 	strb.w	ip, [sp, #8]
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
   9b5e0:	f88d e009 	strb.w	lr, [sp, #9]
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
   9b5e4:	47a8      	blx	r5
   9b5e6:	4605      	mov	r5, r0
   9b5e8:	2800      	cmp	r0, #0
   9b5ea:	d1b4      	bne.n	9b556 <uhc_enumeration_step13+0x3a>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b5ec:	7ca0      	ldrb	r0, [r4, #18]
   9b5ee:	21ff      	movs	r1, #255	; 0xff
   9b5f0:	4b09      	ldr	r3, [pc, #36]	; (9b618 <uhc_enumeration_step13+0xfc>)
   9b5f2:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
   9b5f4:	6960      	ldr	r0, [r4, #20]
   9b5f6:	2800      	cmp	r0, #0
   9b5f8:	d0a1      	beq.n	9b53e <uhc_enumeration_step13+0x22>
		free(uhc_dev_enum->conf_desc);
   9b5fa:	47c0      	blx	r8
		uhc_dev_enum->conf_desc = NULL;
   9b5fc:	6165      	str	r5, [r4, #20]
   9b5fe:	e79e      	b.n	9b53e <uhc_enumeration_step13+0x22>
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
   9b600:	7ca0      	ldrb	r0, [r4, #18]
   9b602:	21ff      	movs	r1, #255	; 0xff
   9b604:	4b04      	ldr	r3, [pc, #16]	; (9b618 <uhc_enumeration_step13+0xfc>)
   9b606:	4798      	blx	r3
	if (uhc_dev_enum->conf_desc != NULL) {
   9b608:	6960      	ldr	r0, [r4, #20]
   9b60a:	2800      	cmp	r0, #0
   9b60c:	d097      	beq.n	9b53e <uhc_enumeration_step13+0x22>
		free(uhc_dev_enum->conf_desc);
   9b60e:	47c0      	blx	r8
		uhc_dev_enum->conf_desc = NULL;
   9b610:	6166      	str	r6, [r4, #20]
   9b612:	e794      	b.n	9b53e <uhc_enumeration_step13+0x22>
   9b614:	20072cb0 	.word	0x20072cb0
   9b618:	0009e709 	.word	0x0009e709
   9b61c:	000a52f1 	.word	0x000a52f1
   9b620:	20072cc8 	.word	0x20072cc8
   9b624:	0009e2c5 	.word	0x0009e2c5
   9b628:	0009aec9 	.word	0x0009aec9
   9b62c:	0009e2a9 	.word	0x0009e2a9
   9b630:	000a52e1 	.word	0x000a52e1
   9b634:	0009b0e5 	.word	0x0009b0e5
   9b638:	0009e8fd 	.word	0x0009e8fd

0009b63c <uhc_notify_connection>:
/**
 * \name Callbacks used by USB Host Driver (UHD) to notify events
 * @{
 */
void uhc_notify_connection(bool b_plug)
{
   9b63c:	b570      	push	{r4, r5, r6, lr}
	if (b_plug) {
   9b63e:	b9a8      	cbnz	r0, 9b66c <uhc_notify_connection+0x30>

#ifdef USB_HOST_HUB_SUPPORT
		uhc_power_running = 0;
#endif
	} else {
		if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
   9b640:	4c11      	ldr	r4, [pc, #68]	; (9b688 <uhc_notify_connection+0x4c>)
   9b642:	7ca3      	ldrb	r3, [r4, #18]
   9b644:	2bff      	cmp	r3, #255	; 0xff
   9b646:	d01d      	beq.n	9b684 <uhc_notify_connection+0x48>
   9b648:	4605      	mov	r5, r0
			uhc_sof_timeout = 0;
   9b64a:	4a10      	ldr	r2, [pc, #64]	; (9b68c <uhc_notify_connection+0x50>)
		uhd_ep_free(dev->address, 0xFF);
   9b64c:	4618      	mov	r0, r3
   9b64e:	21ff      	movs	r1, #255	; 0xff
   9b650:	4b0f      	ldr	r3, [pc, #60]	; (9b690 <uhc_notify_connection+0x54>)
			uhc_sof_timeout = 0;
   9b652:	7015      	strb	r5, [r2, #0]
		uhd_ep_free(dev->address, 0xFF);
   9b654:	4798      	blx	r3
			uhc_uhis[i].uninstall(dev);
   9b656:	4620      	mov	r0, r4
   9b658:	4b0e      	ldr	r3, [pc, #56]	; (9b694 <uhc_notify_connection+0x58>)
   9b65a:	4798      	blx	r3
		dev->address = UHC_USB_ADD_NOT_VALID;
   9b65c:	23ff      	movs	r3, #255	; 0xff
		if (dev->conf_desc != NULL) {
   9b65e:	6960      	ldr	r0, [r4, #20]
		dev->address = UHC_USB_ADD_NOT_VALID;
   9b660:	74a3      	strb	r3, [r4, #18]
		if (dev->conf_desc != NULL) {
   9b662:	b110      	cbz	r0, 9b66a <uhc_notify_connection+0x2e>
			free(dev->conf_desc);
   9b664:	4b0c      	ldr	r3, [pc, #48]	; (9b698 <uhc_notify_connection+0x5c>)
   9b666:	4798      	blx	r3
			dev->conf_desc = NULL;
   9b668:	6165      	str	r5, [r4, #20]
   9b66a:	bd70      	pop	{r4, r5, r6, pc}
		uhc_enum_try = 1;
   9b66c:	2501      	movs	r5, #1
		uhc_dev_enum->conf_desc = NULL;
   9b66e:	2200      	movs	r2, #0
		uhc_enum_try = 1;
   9b670:	4c0a      	ldr	r4, [pc, #40]	; (9b69c <uhc_notify_connection+0x60>)
		uhc_dev_enum->conf_desc = NULL;
   9b672:	4b05      	ldr	r3, [pc, #20]	; (9b688 <uhc_notify_connection+0x4c>)
		uhc_enum_try = 1;
   9b674:	7025      	strb	r5, [r4, #0]
		uhc_dev_enum->conf_desc = NULL;
   9b676:	615a      	str	r2, [r3, #20]
		uhc_dev_enum->address = 0;
   9b678:	749a      	strb	r2, [r3, #18]
		uhd_send_reset(callback);
   9b67a:	4809      	ldr	r0, [pc, #36]	; (9b6a0 <uhc_notify_connection+0x64>)
   9b67c:	4909      	ldr	r1, [pc, #36]	; (9b6a4 <uhc_notify_connection+0x68>)
			return;
		}
	}
	// Device connection on root
	uhc_connection_tree(b_plug, &g_uhc_device_root);
}
   9b67e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uhd_send_reset(callback);
   9b682:	4708      	bx	r1
   9b684:	bd70      	pop	{r4, r5, r6, pc}
   9b686:	bf00      	nop
   9b688:	20072cb0 	.word	0x20072cb0
   9b68c:	20072fa2 	.word	0x20072fa2
   9b690:	0009e709 	.word	0x0009e709
   9b694:	0009a97d 	.word	0x0009a97d
   9b698:	000a52f1 	.word	0x000a52f1
   9b69c:	20072cc8 	.word	0x20072cc8
   9b6a0:	0009aec9 	.word	0x0009aec9
   9b6a4:	0009e2a9 	.word	0x0009e2a9

0009b6a8 <uhc_notify_sof>:
		if (uhc_uhis[i].sof_notify != NULL) {
			uhc_uhis[i].sof_notify(b_micro);
		}
	}

	if (!b_micro) {
   9b6a8:	b930      	cbnz	r0, 9b6b8 <uhc_notify_sof+0x10>
		// Manage SOF timeout
		if (uhc_sof_timeout) {
   9b6aa:	4a05      	ldr	r2, [pc, #20]	; (9b6c0 <uhc_notify_sof+0x18>)
   9b6ac:	7813      	ldrb	r3, [r2, #0]
   9b6ae:	b11b      	cbz	r3, 9b6b8 <uhc_notify_sof+0x10>
			if (--uhc_sof_timeout == 0) {
   9b6b0:	3b01      	subs	r3, #1
   9b6b2:	b2db      	uxtb	r3, r3
   9b6b4:	7013      	strb	r3, [r2, #0]
   9b6b6:	b103      	cbz	r3, 9b6ba <uhc_notify_sof+0x12>
   9b6b8:	4770      	bx	lr
				uhc_sof_timeout_callback();
   9b6ba:	4b02      	ldr	r3, [pc, #8]	; (9b6c4 <uhc_notify_sof+0x1c>)
   9b6bc:	681b      	ldr	r3, [r3, #0]
   9b6be:	4718      	bx	r3
   9b6c0:	20072fa2 	.word	0x20072fa2
   9b6c4:	20072ccc 	.word	0x20072ccc

0009b6c8 <uhc_notify_resume>:
		if (dev->conf_desc &&
   9b6c8:	4a0f      	ldr	r2, [pc, #60]	; (9b708 <uhc_notify_resume+0x40>)
   9b6ca:	6953      	ldr	r3, [r2, #20]
   9b6cc:	b113      	cbz	r3, 9b6d4 <uhc_notify_resume+0xc>
   9b6ce:	79db      	ldrb	r3, [r3, #7]
   9b6d0:	069b      	lsls	r3, r3, #26
   9b6d2:	d400      	bmi.n	9b6d6 <uhc_notify_resume+0xe>
   9b6d4:	4770      	bx	lr
		}
	}
}

void uhc_notify_resume(void)
{
   9b6d6:	b570      	push	{r4, r5, r6, lr}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
   9b6d8:	2400      	movs	r4, #0
				req.bRequest = USB_REQ_CLEAR_FEATURE;
   9b6da:	2501      	movs	r5, #1
{
   9b6dc:	b084      	sub	sp, #16
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
   9b6de:	7c90      	ldrb	r0, [r2, #18]
   9b6e0:	4623      	mov	r3, r4
   9b6e2:	9401      	str	r4, [sp, #4]
   9b6e4:	9400      	str	r4, [sp, #0]
   9b6e6:	4622      	mov	r2, r4
   9b6e8:	a902      	add	r1, sp, #8
   9b6ea:	4e08      	ldr	r6, [pc, #32]	; (9b70c <uhc_notify_resume+0x44>)
			req.bmRequestType = USB_REQ_RECIP_DEVICE
   9b6ec:	f88d 4008 	strb.w	r4, [sp, #8]
			req.wIndex = 0;
   9b6f0:	f8ad 400c 	strh.w	r4, [sp, #12]
			req.wLength = 0;
   9b6f4:	f8ad 400e 	strh.w	r4, [sp, #14]
				req.bRequest = USB_REQ_CLEAR_FEATURE;
   9b6f8:	f88d 5009 	strb.w	r5, [sp, #9]
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
   9b6fc:	f8ad 500a 	strh.w	r5, [sp, #10]
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
   9b700:	47b0      	blx	r6
	uhc_remotewakeup(false);
	UHC_WAKEUP_EVENT();
}
   9b702:	b004      	add	sp, #16
   9b704:	bd70      	pop	{r4, r5, r6, pc}
   9b706:	bf00      	nop
   9b708:	20072cb0 	.word	0x20072cb0
   9b70c:	0009e8fd 	.word	0x0009e8fd

0009b710 <uhc_start>:
 * \name Functions to control the USB host stack
 *
 * @{
 */
void uhc_start(void)
{
   9b710:	b410      	push	{r4}
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
   9b712:	2100      	movs	r1, #0
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
   9b714:	24ff      	movs	r4, #255	; 0xff
   9b716:	4803      	ldr	r0, [pc, #12]	; (9b724 <uhc_start+0x14>)
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
   9b718:	4a03      	ldr	r2, [pc, #12]	; (9b728 <uhc_start+0x18>)
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
   9b71a:	7484      	strb	r4, [r0, #18]
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
   9b71c:	7011      	strb	r1, [r2, #0]
	uhd_enable();
   9b71e:	4b03      	ldr	r3, [pc, #12]	; (9b72c <uhc_start+0x1c>)
}
   9b720:	bc10      	pop	{r4}
	uhd_enable();
   9b722:	4718      	bx	r3
   9b724:	20072cb0 	.word	0x20072cb0
   9b728:	20072fa2 	.word	0x20072fa2
   9b72c:	0009dd81 	.word	0x0009dd81

0009b730 <uhc_stop>:

void uhc_stop(bool b_id_stop)
{
	// Stop UHD
	uhd_disable(b_id_stop);
   9b730:	4b00      	ldr	r3, [pc, #0]	; (9b734 <uhc_stop+0x4>)
   9b732:	4718      	bx	r3
   9b734:	0009e04d 	.word	0x0009e04d

0009b738 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   9b738:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   9b73c:	4b1a      	ldr	r3, [pc, #104]	; (9b7a8 <board_init+0x70>)
{
   9b73e:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   9b740:	200b      	movs	r0, #11
	WDT->WDT_MR = WDT_MR_WDDIS;
   9b742:	605a      	str	r2, [r3, #4]
   9b744:	4c19      	ldr	r4, [pc, #100]	; (9b7ac <board_init+0x74>)
   9b746:	47a0      	blx	r4
   9b748:	200c      	movs	r0, #12
   9b74a:	47a0      	blx	r4
   9b74c:	200d      	movs	r0, #13
   9b74e:	47a0      	blx	r4
   9b750:	200e      	movs	r0, #14
   9b752:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   9b754:	4c16      	ldr	r4, [pc, #88]	; (9b7b0 <board_init+0x78>)
   9b756:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   9b75a:	203b      	movs	r0, #59	; 0x3b
   9b75c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   9b75e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   9b762:	2055      	movs	r0, #85	; 0x55
   9b764:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   9b766:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   9b76a:	2056      	movs	r0, #86	; 0x56
   9b76c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   9b76e:	4911      	ldr	r1, [pc, #68]	; (9b7b4 <board_init+0x7c>)
   9b770:	2068      	movs	r0, #104	; 0x68
   9b772:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   9b774:	4910      	ldr	r1, [pc, #64]	; (9b7b8 <board_init+0x80>)
   9b776:	205c      	movs	r0, #92	; 0x5c
   9b778:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   9b77a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9b77e:	2019      	movs	r0, #25
   9b780:	47a0      	blx	r4
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   9b782:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9b786:	201a      	movs	r0, #26
   9b788:	47a0      	blx	r4
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   9b78a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9b78e:	201b      	movs	r0, #27
   9b790:	47a0      	blx	r4
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   9b792:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9b796:	201c      	movs	r0, #28
   9b798:	47a0      	blx	r4
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS1
	        gpio_configure_pin(SPI0_NPCS1_PA29_GPIO,SPI0_NPCS1_PA29_FLAGS);
   9b79a:	4623      	mov	r3, r4
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   9b79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	        gpio_configure_pin(SPI0_NPCS1_PA29_GPIO,SPI0_NPCS1_PA29_FLAGS);
   9b7a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9b7a4:	201d      	movs	r0, #29
   9b7a6:	4718      	bx	r3
   9b7a8:	400e1a50 	.word	0x400e1a50
   9b7ac:	0009bdcd 	.word	0x0009bdcd
   9b7b0:	0009b8b5 	.word	0x0009b8b5
   9b7b4:	28000079 	.word	0x28000079
   9b7b8:	28000001 	.word	0x28000001

0009b7bc <efc_get_wait_state>:
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   9b7bc:	6800      	ldr	r0, [r0, #0]
}
   9b7be:	f3c0 2003 	ubfx	r0, r0, #8, #4
   9b7c2:	4770      	bx	lr

0009b7c4 <efc_init>:
{
   9b7c4:	b508      	push	{r3, lr}
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   9b7c6:	0212      	lsls	r2, r2, #8
   9b7c8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   9b7cc:	4311      	orrs	r1, r2
   9b7ce:	4b02      	ldr	r3, [pc, #8]	; (9b7d8 <efc_init+0x14>)
   9b7d0:	4798      	blx	r3
}
   9b7d2:	2000      	movs	r0, #0
   9b7d4:	bd08      	pop	{r3, pc}
   9b7d6:	bf00      	nop
   9b7d8:	20070085 	.word	0x20070085

0009b7dc <efc_set_wait_state>:
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   9b7dc:	6803      	ldr	r3, [r0, #0]
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   9b7de:	0209      	lsls	r1, r1, #8
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   9b7e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   9b7e4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   9b7e8:	4319      	orrs	r1, r3
   9b7ea:	4b01      	ldr	r3, [pc, #4]	; (9b7f0 <efc_set_wait_state+0x14>)
   9b7ec:	4718      	bx	r3
   9b7ee:	bf00      	nop
   9b7f0:	20070085 	.word	0x20070085

0009b7f4 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   9b7f4:	f1a1 030e 	sub.w	r3, r1, #14
   9b7f8:	2b01      	cmp	r3, #1
   9b7fa:	d802      	bhi.n	9b802 <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
   9b7fc:	f04f 30ff 	mov.w	r0, #4294967295
   9b800:	4770      	bx	lr
{
   9b802:	b530      	push	{r4, r5, lr}
   9b804:	b083      	sub	sp, #12
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9b806:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9b80a:	fab3 f383 	clz	r3, r3
   9b80e:	095b      	lsrs	r3, r3, #5
   9b810:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   9b812:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   9b814:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9b818:	2500      	movs	r5, #0
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   9b81a:	4b0a      	ldr	r3, [pc, #40]	; (9b844 <efc_perform_command+0x50>)
   9b81c:	4c0a      	ldr	r4, [pc, #40]	; (9b848 <efc_perform_command+0x54>)
   9b81e:	ea03 2202 	and.w	r2, r3, r2, lsl #8
   9b822:	7025      	strb	r5, [r4, #0]
			EEFC_FCR_FCMD(ul_command));
   9b824:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   9b826:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	return flags;
   9b82a:	9d01      	ldr	r5, [sp, #4]
   9b82c:	4311      	orrs	r1, r2
   9b82e:	4b07      	ldr	r3, [pc, #28]	; (9b84c <efc_perform_command+0x58>)
   9b830:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   9b832:	b125      	cbz	r5, 9b83e <efc_perform_command+0x4a>
		cpu_irq_enable();
   9b834:	2301      	movs	r3, #1
   9b836:	7023      	strb	r3, [r4, #0]
   9b838:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9b83c:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   9b83e:	b003      	add	sp, #12
   9b840:	bd30      	pop	{r4, r5, pc}
   9b842:	bf00      	nop
   9b844:	00ffff00 	.word	0x00ffff00
   9b848:	2007026b 	.word	0x2007026b
   9b84c:	20070089 	.word	0x20070089

0009b850 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   9b850:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   9b852:	4770      	bx	lr

0009b854 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   9b854:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   9b856:	4770      	bx	lr

0009b858 <pio_set_pin_high>:
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   9b858:	2201      	movs	r2, #1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9b85a:	0943      	lsrs	r3, r0, #5
   9b85c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9b860:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   9b864:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9b868:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   9b86a:	fa02 f000 	lsl.w	r0, r2, r0
   9b86e:	6318      	str	r0, [r3, #48]	; 0x30
   9b870:	4770      	bx	lr
   9b872:	bf00      	nop

0009b874 <pio_set_pin_low>:
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   9b874:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9b876:	0943      	lsrs	r3, r0, #5
   9b878:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9b87c:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   9b880:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9b884:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   9b886:	fa02 f000 	lsl.w	r0, r2, r0
   9b88a:	6358      	str	r0, [r3, #52]	; 0x34
   9b88c:	4770      	bx	lr
   9b88e:	bf00      	nop

0009b890 <pio_toggle_pin>:
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   9b890:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9b892:	0943      	lsrs	r3, r0, #5
   9b894:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9b898:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9b89c:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   9b89e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   9b8a0:	f000 001f 	and.w	r0, r0, #31
   9b8a4:	fa02 f000 	lsl.w	r0, r2, r0
   9b8a8:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   9b8aa:	bf14      	ite	ne
   9b8ac:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   9b8ae:	6318      	streq	r0, [r3, #48]	; 0x30
   9b8b0:	4770      	bx	lr
   9b8b2:	bf00      	nop

0009b8b4 <pio_configure_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9b8b4:	0943      	lsrs	r3, r0, #5
   9b8b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	switch (ul_flags & PIO_TYPE_Msk) {
   9b8ba:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9b8be:	f203 7307 	addw	r3, r3, #1799	; 0x707
	switch (ul_flags & PIO_TYPE_Msk) {
   9b8c2:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9b8c6:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
   9b8ca:	d04f      	beq.n	9b96c <pio_configure_pin+0xb8>
{
   9b8cc:	b430      	push	{r4, r5}
	switch (ul_flags & PIO_TYPE_Msk) {
   9b8ce:	d82a      	bhi.n	9b926 <pio_configure_pin+0x72>
   9b8d0:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
   9b8d4:	d013      	beq.n	9b8fe <pio_configure_pin+0x4a>
   9b8d6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
   9b8da:	d144      	bne.n	9b966 <pio_configure_pin+0xb2>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   9b8dc:	2401      	movs	r4, #1
   9b8de:	f000 021f 	and.w	r2, r0, #31
   9b8e2:	fa04 f202 	lsl.w	r2, r4, r2
	p_pio->PIO_IDR = ul_mask;
   9b8e6:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   9b8e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   9b8ea:	07cd      	lsls	r5, r1, #31
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   9b8ec:	ea40 0002 	orr.w	r0, r0, r2
   9b8f0:	6718      	str	r0, [r3, #112]	; 0x70
	p_pio->PIO_PDR = ul_mask;
   9b8f2:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   9b8f4:	d413      	bmi.n	9b91e <pio_configure_pin+0x6a>
		p_pio->PIO_PUDR = ul_mask;
   9b8f6:	661a      	str	r2, [r3, #96]	; 0x60
	return 1;
   9b8f8:	4620      	mov	r0, r4
}
   9b8fa:	bc30      	pop	{r4, r5}
   9b8fc:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   9b8fe:	2401      	movs	r4, #1
   9b900:	f000 021f 	and.w	r2, r0, #31
   9b904:	fa04 f202 	lsl.w	r2, r4, r2
	p_pio->PIO_IDR = ul_mask;
   9b908:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   9b90a:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   9b90c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   9b90e:	07c9      	lsls	r1, r1, #31
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   9b910:	ea00 0005 	and.w	r0, r0, r5
   9b914:	ea20 0002 	bic.w	r0, r0, r2
   9b918:	6718      	str	r0, [r3, #112]	; 0x70
	p_pio->PIO_PDR = ul_mask;
   9b91a:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   9b91c:	d5eb      	bpl.n	9b8f6 <pio_configure_pin+0x42>
		p_pio->PIO_PUER = ul_mask;
   9b91e:	665a      	str	r2, [r3, #100]	; 0x64
	return 1;
   9b920:	4620      	mov	r0, r4
}
   9b922:	bc30      	pop	{r4, r5}
   9b924:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   9b926:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
   9b92a:	d002      	beq.n	9b932 <pio_configure_pin+0x7e>
   9b92c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   9b930:	d119      	bne.n	9b966 <pio_configure_pin+0xb2>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9b932:	2201      	movs	r2, #1
   9b934:	f000 001f 	and.w	r0, r0, #31
   9b938:	4082      	lsls	r2, r0
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9b93a:	f001 0404 	and.w	r4, r1, #4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9b93e:	f001 5060 	and.w	r0, r1, #939524096	; 0x38000000
	if (ul_pull_up_enable) {
   9b942:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
   9b944:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   9b946:	bf4c      	ite	mi
   9b948:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   9b94a:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   9b94c:	2c00      	cmp	r4, #0
   9b94e:	d12b      	bne.n	9b9a8 <pio_configure_pin+0xf4>
		p_pio->PIO_MDDR = ul_mask;
   9b950:	655a      	str	r2, [r3, #84]	; 0x54
	if (ul_default_level) {
   9b952:	f1b0 5f60 	cmp.w	r0, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   9b956:	bf0c      	ite	eq
   9b958:	631a      	streq	r2, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   9b95a:	635a      	strne	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   9b95c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   9b95e:	601a      	str	r2, [r3, #0]
	return 1;
   9b960:	2001      	movs	r0, #1
}
   9b962:	bc30      	pop	{r4, r5}
   9b964:	4770      	bx	lr
		return 0;
   9b966:	2000      	movs	r0, #0
}
   9b968:	bc30      	pop	{r4, r5}
   9b96a:	4770      	bx	lr
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   9b96c:	2201      	movs	r2, #1
   9b96e:	f000 001f 	and.w	r0, r0, #31
   9b972:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
   9b974:	07c8      	lsls	r0, r1, #31
	p_pio->PIO_IDR = ul_mask;
   9b976:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   9b978:	bf4c      	ite	mi
   9b97a:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   9b97c:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   9b97e:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
   9b982:	bf14      	ite	ne
   9b984:	621a      	strne	r2, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   9b986:	625a      	streq	r2, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   9b988:	0788      	lsls	r0, r1, #30
   9b98a:	d407      	bmi.n	9b99c <pio_configure_pin+0xe8>
		if (ul_attribute & PIO_DEBOUNCE) {
   9b98c:	0708      	lsls	r0, r1, #28
			p_pio->PIO_DIFSR = ul_mask;
   9b98e:	bf48      	it	mi
   9b990:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
	return 1;
   9b994:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   9b996:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   9b998:	601a      	str	r2, [r3, #0]
   9b99a:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   9b99c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return 1;
   9b9a0:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   9b9a2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   9b9a4:	601a      	str	r2, [r3, #0]
   9b9a6:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   9b9a8:	651a      	str	r2, [r3, #80]	; 0x50
   9b9aa:	e7d2      	b.n	9b952 <pio_configure_pin+0x9e>

0009b9ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   9b9ac:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
   9b9ae:	4b2e      	ldr	r3, [pc, #184]	; (9ba68 <PIOA_Handler+0xbc>)
   9b9b0:	482e      	ldr	r0, [pc, #184]	; (9ba6c <PIOA_Handler+0xc0>)
   9b9b2:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   9b9b4:	4b2e      	ldr	r3, [pc, #184]	; (9ba70 <PIOA_Handler+0xc4>)
	status = pio_get_interrupt_status(p_pio);
   9b9b6:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   9b9b8:	482c      	ldr	r0, [pc, #176]	; (9ba6c <PIOA_Handler+0xc0>)
   9b9ba:	4798      	blx	r3
	if (status != 0) {
   9b9bc:	4005      	ands	r5, r0
   9b9be:	d015      	beq.n	9b9ec <PIOA_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   9b9c0:	4c2c      	ldr	r4, [pc, #176]	; (9ba74 <PIOA_Handler+0xc8>)
   9b9c2:	6820      	ldr	r0, [r4, #0]
   9b9c4:	280b      	cmp	r0, #11
   9b9c6:	d012      	beq.n	9b9ee <PIOA_Handler+0x42>
   9b9c8:	6920      	ldr	r0, [r4, #16]
   9b9ca:	280b      	cmp	r0, #11
   9b9cc:	d018      	beq.n	9ba00 <PIOA_Handler+0x54>
   9b9ce:	6a20      	ldr	r0, [r4, #32]
   9b9d0:	280b      	cmp	r0, #11
   9b9d2:	d01e      	beq.n	9ba12 <PIOA_Handler+0x66>
   9b9d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   9b9d6:	280b      	cmp	r0, #11
   9b9d8:	d024      	beq.n	9ba24 <PIOA_Handler+0x78>
   9b9da:	6c20      	ldr	r0, [r4, #64]	; 0x40
   9b9dc:	280b      	cmp	r0, #11
   9b9de:	d02a      	beq.n	9ba36 <PIOA_Handler+0x8a>
   9b9e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   9b9e2:	280b      	cmp	r0, #11
   9b9e4:	d037      	beq.n	9ba56 <PIOA_Handler+0xaa>
   9b9e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
   9b9e8:	280b      	cmp	r0, #11
   9b9ea:	d02d      	beq.n	9ba48 <PIOA_Handler+0x9c>
   9b9ec:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9b9ee:	6861      	ldr	r1, [r4, #4]
   9b9f0:	420d      	tst	r5, r1
   9b9f2:	d0e9      	beq.n	9b9c8 <PIOA_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9b9f4:	68e3      	ldr	r3, [r4, #12]
   9b9f6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9b9f8:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
   9b9fa:	439d      	bics	r5, r3
   9b9fc:	d0f6      	beq.n	9b9ec <PIOA_Handler+0x40>
   9b9fe:	e7e3      	b.n	9b9c8 <PIOA_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9ba00:	6961      	ldr	r1, [r4, #20]
   9ba02:	4229      	tst	r1, r5
   9ba04:	d0e3      	beq.n	9b9ce <PIOA_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9ba06:	69e3      	ldr	r3, [r4, #28]
   9ba08:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9ba0a:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
   9ba0c:	439d      	bics	r5, r3
   9ba0e:	d0ed      	beq.n	9b9ec <PIOA_Handler+0x40>
   9ba10:	e7dd      	b.n	9b9ce <PIOA_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9ba12:	6a61      	ldr	r1, [r4, #36]	; 0x24
   9ba14:	4229      	tst	r1, r5
   9ba16:	d0dd      	beq.n	9b9d4 <PIOA_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9ba18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   9ba1a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9ba1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
   9ba1e:	439d      	bics	r5, r3
   9ba20:	d0e4      	beq.n	9b9ec <PIOA_Handler+0x40>
   9ba22:	e7d7      	b.n	9b9d4 <PIOA_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9ba24:	6b61      	ldr	r1, [r4, #52]	; 0x34
   9ba26:	4229      	tst	r1, r5
   9ba28:	d0d7      	beq.n	9b9da <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9ba2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   9ba2c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9ba2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
   9ba30:	439d      	bics	r5, r3
   9ba32:	d0db      	beq.n	9b9ec <PIOA_Handler+0x40>
   9ba34:	e7d1      	b.n	9b9da <PIOA_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9ba36:	6c61      	ldr	r1, [r4, #68]	; 0x44
   9ba38:	4229      	tst	r1, r5
   9ba3a:	d0d1      	beq.n	9b9e0 <PIOA_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9ba3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   9ba3e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9ba40:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
   9ba42:	439d      	bics	r5, r3
   9ba44:	d0d2      	beq.n	9b9ec <PIOA_Handler+0x40>
   9ba46:	e7cb      	b.n	9b9e0 <PIOA_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9ba48:	6e61      	ldr	r1, [r4, #100]	; 0x64
   9ba4a:	4229      	tst	r1, r5
   9ba4c:	d0ce      	beq.n	9b9ec <PIOA_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9ba4e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOA, ID_PIOA);
}
   9ba50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9ba54:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9ba56:	6d61      	ldr	r1, [r4, #84]	; 0x54
   9ba58:	4229      	tst	r1, r5
   9ba5a:	d0c4      	beq.n	9b9e6 <PIOA_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9ba5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   9ba5e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9ba60:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
   9ba62:	439d      	bics	r5, r3
   9ba64:	d0c2      	beq.n	9b9ec <PIOA_Handler+0x40>
   9ba66:	e7be      	b.n	9b9e6 <PIOA_Handler+0x3a>
   9ba68:	0009b851 	.word	0x0009b851
   9ba6c:	400e0e00 	.word	0x400e0e00
   9ba70:	0009b855 	.word	0x0009b855
   9ba74:	20072cd0 	.word	0x20072cd0

0009ba78 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   9ba78:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
   9ba7a:	4b2e      	ldr	r3, [pc, #184]	; (9bb34 <PIOB_Handler+0xbc>)
   9ba7c:	482e      	ldr	r0, [pc, #184]	; (9bb38 <PIOB_Handler+0xc0>)
   9ba7e:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   9ba80:	4b2e      	ldr	r3, [pc, #184]	; (9bb3c <PIOB_Handler+0xc4>)
	status = pio_get_interrupt_status(p_pio);
   9ba82:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   9ba84:	482c      	ldr	r0, [pc, #176]	; (9bb38 <PIOB_Handler+0xc0>)
   9ba86:	4798      	blx	r3
	if (status != 0) {
   9ba88:	4005      	ands	r5, r0
   9ba8a:	d015      	beq.n	9bab8 <PIOB_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   9ba8c:	4c2c      	ldr	r4, [pc, #176]	; (9bb40 <PIOB_Handler+0xc8>)
   9ba8e:	6820      	ldr	r0, [r4, #0]
   9ba90:	280c      	cmp	r0, #12
   9ba92:	d012      	beq.n	9baba <PIOB_Handler+0x42>
   9ba94:	6920      	ldr	r0, [r4, #16]
   9ba96:	280c      	cmp	r0, #12
   9ba98:	d018      	beq.n	9bacc <PIOB_Handler+0x54>
   9ba9a:	6a20      	ldr	r0, [r4, #32]
   9ba9c:	280c      	cmp	r0, #12
   9ba9e:	d01e      	beq.n	9bade <PIOB_Handler+0x66>
   9baa0:	6b20      	ldr	r0, [r4, #48]	; 0x30
   9baa2:	280c      	cmp	r0, #12
   9baa4:	d024      	beq.n	9baf0 <PIOB_Handler+0x78>
   9baa6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   9baa8:	280c      	cmp	r0, #12
   9baaa:	d02a      	beq.n	9bb02 <PIOB_Handler+0x8a>
   9baac:	6d20      	ldr	r0, [r4, #80]	; 0x50
   9baae:	280c      	cmp	r0, #12
   9bab0:	d037      	beq.n	9bb22 <PIOB_Handler+0xaa>
   9bab2:	6e20      	ldr	r0, [r4, #96]	; 0x60
   9bab4:	280c      	cmp	r0, #12
   9bab6:	d02d      	beq.n	9bb14 <PIOB_Handler+0x9c>
   9bab8:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9baba:	6861      	ldr	r1, [r4, #4]
   9babc:	420d      	tst	r5, r1
   9babe:	d0e9      	beq.n	9ba94 <PIOB_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bac0:	68e3      	ldr	r3, [r4, #12]
   9bac2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bac4:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
   9bac6:	439d      	bics	r5, r3
   9bac8:	d0f6      	beq.n	9bab8 <PIOB_Handler+0x40>
   9baca:	e7e3      	b.n	9ba94 <PIOB_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bacc:	6961      	ldr	r1, [r4, #20]
   9bace:	4229      	tst	r1, r5
   9bad0:	d0e3      	beq.n	9ba9a <PIOB_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bad2:	69e3      	ldr	r3, [r4, #28]
   9bad4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bad6:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
   9bad8:	439d      	bics	r5, r3
   9bada:	d0ed      	beq.n	9bab8 <PIOB_Handler+0x40>
   9badc:	e7dd      	b.n	9ba9a <PIOB_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bade:	6a61      	ldr	r1, [r4, #36]	; 0x24
   9bae0:	4229      	tst	r1, r5
   9bae2:	d0dd      	beq.n	9baa0 <PIOB_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bae4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   9bae6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
   9baea:	439d      	bics	r5, r3
   9baec:	d0e4      	beq.n	9bab8 <PIOB_Handler+0x40>
   9baee:	e7d7      	b.n	9baa0 <PIOB_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9baf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   9baf2:	4229      	tst	r1, r5
   9baf4:	d0d7      	beq.n	9baa6 <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9baf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   9baf8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bafa:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
   9bafc:	439d      	bics	r5, r3
   9bafe:	d0db      	beq.n	9bab8 <PIOB_Handler+0x40>
   9bb00:	e7d1      	b.n	9baa6 <PIOB_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bb02:	6c61      	ldr	r1, [r4, #68]	; 0x44
   9bb04:	4229      	tst	r1, r5
   9bb06:	d0d1      	beq.n	9baac <PIOB_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bb08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   9bb0a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bb0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
   9bb0e:	439d      	bics	r5, r3
   9bb10:	d0d2      	beq.n	9bab8 <PIOB_Handler+0x40>
   9bb12:	e7cb      	b.n	9baac <PIOB_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bb14:	6e61      	ldr	r1, [r4, #100]	; 0x64
   9bb16:	4229      	tst	r1, r5
   9bb18:	d0ce      	beq.n	9bab8 <PIOB_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bb1a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    pio_handler_process(PIOB, ID_PIOB);
}
   9bb1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bb20:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bb22:	6d61      	ldr	r1, [r4, #84]	; 0x54
   9bb24:	4229      	tst	r1, r5
   9bb26:	d0c4      	beq.n	9bab2 <PIOB_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bb28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   9bb2a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bb2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
   9bb2e:	439d      	bics	r5, r3
   9bb30:	d0c2      	beq.n	9bab8 <PIOB_Handler+0x40>
   9bb32:	e7be      	b.n	9bab2 <PIOB_Handler+0x3a>
   9bb34:	0009b851 	.word	0x0009b851
   9bb38:	400e1000 	.word	0x400e1000
   9bb3c:	0009b855 	.word	0x0009b855
   9bb40:	20072cd0 	.word	0x20072cd0

0009bb44 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   9bb44:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
   9bb46:	4b2e      	ldr	r3, [pc, #184]	; (9bc00 <PIOC_Handler+0xbc>)
   9bb48:	482e      	ldr	r0, [pc, #184]	; (9bc04 <PIOC_Handler+0xc0>)
   9bb4a:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   9bb4c:	4b2e      	ldr	r3, [pc, #184]	; (9bc08 <PIOC_Handler+0xc4>)
	status = pio_get_interrupt_status(p_pio);
   9bb4e:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   9bb50:	482c      	ldr	r0, [pc, #176]	; (9bc04 <PIOC_Handler+0xc0>)
   9bb52:	4798      	blx	r3
	if (status != 0) {
   9bb54:	4005      	ands	r5, r0
   9bb56:	d015      	beq.n	9bb84 <PIOC_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   9bb58:	4c2c      	ldr	r4, [pc, #176]	; (9bc0c <PIOC_Handler+0xc8>)
   9bb5a:	6820      	ldr	r0, [r4, #0]
   9bb5c:	280d      	cmp	r0, #13
   9bb5e:	d012      	beq.n	9bb86 <PIOC_Handler+0x42>
   9bb60:	6920      	ldr	r0, [r4, #16]
   9bb62:	280d      	cmp	r0, #13
   9bb64:	d018      	beq.n	9bb98 <PIOC_Handler+0x54>
   9bb66:	6a20      	ldr	r0, [r4, #32]
   9bb68:	280d      	cmp	r0, #13
   9bb6a:	d01e      	beq.n	9bbaa <PIOC_Handler+0x66>
   9bb6c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   9bb6e:	280d      	cmp	r0, #13
   9bb70:	d024      	beq.n	9bbbc <PIOC_Handler+0x78>
   9bb72:	6c20      	ldr	r0, [r4, #64]	; 0x40
   9bb74:	280d      	cmp	r0, #13
   9bb76:	d02a      	beq.n	9bbce <PIOC_Handler+0x8a>
   9bb78:	6d20      	ldr	r0, [r4, #80]	; 0x50
   9bb7a:	280d      	cmp	r0, #13
   9bb7c:	d037      	beq.n	9bbee <PIOC_Handler+0xaa>
   9bb7e:	6e20      	ldr	r0, [r4, #96]	; 0x60
   9bb80:	280d      	cmp	r0, #13
   9bb82:	d02d      	beq.n	9bbe0 <PIOC_Handler+0x9c>
   9bb84:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bb86:	6861      	ldr	r1, [r4, #4]
   9bb88:	420d      	tst	r5, r1
   9bb8a:	d0e9      	beq.n	9bb60 <PIOC_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bb8c:	68e3      	ldr	r3, [r4, #12]
   9bb8e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bb90:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
   9bb92:	439d      	bics	r5, r3
   9bb94:	d0f6      	beq.n	9bb84 <PIOC_Handler+0x40>
   9bb96:	e7e3      	b.n	9bb60 <PIOC_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bb98:	6961      	ldr	r1, [r4, #20]
   9bb9a:	4229      	tst	r1, r5
   9bb9c:	d0e3      	beq.n	9bb66 <PIOC_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bb9e:	69e3      	ldr	r3, [r4, #28]
   9bba0:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bba2:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
   9bba4:	439d      	bics	r5, r3
   9bba6:	d0ed      	beq.n	9bb84 <PIOC_Handler+0x40>
   9bba8:	e7dd      	b.n	9bb66 <PIOC_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bbaa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   9bbac:	4229      	tst	r1, r5
   9bbae:	d0dd      	beq.n	9bb6c <PIOC_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bbb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   9bbb2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bbb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
   9bbb6:	439d      	bics	r5, r3
   9bbb8:	d0e4      	beq.n	9bb84 <PIOC_Handler+0x40>
   9bbba:	e7d7      	b.n	9bb6c <PIOC_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bbbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   9bbbe:	4229      	tst	r1, r5
   9bbc0:	d0d7      	beq.n	9bb72 <PIOC_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bbc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   9bbc4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bbc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
   9bbc8:	439d      	bics	r5, r3
   9bbca:	d0db      	beq.n	9bb84 <PIOC_Handler+0x40>
   9bbcc:	e7d1      	b.n	9bb72 <PIOC_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bbce:	6c61      	ldr	r1, [r4, #68]	; 0x44
   9bbd0:	4229      	tst	r1, r5
   9bbd2:	d0d1      	beq.n	9bb78 <PIOC_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bbd4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   9bbd6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bbd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
   9bbda:	439d      	bics	r5, r3
   9bbdc:	d0d2      	beq.n	9bb84 <PIOC_Handler+0x40>
   9bbde:	e7cb      	b.n	9bb78 <PIOC_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bbe0:	6e61      	ldr	r1, [r4, #100]	; 0x64
   9bbe2:	4229      	tst	r1, r5
   9bbe4:	d0ce      	beq.n	9bb84 <PIOC_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bbe6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOC, ID_PIOC);
}
   9bbe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bbec:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bbee:	6d61      	ldr	r1, [r4, #84]	; 0x54
   9bbf0:	4229      	tst	r1, r5
   9bbf2:	d0c4      	beq.n	9bb7e <PIOC_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bbf4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   9bbf6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bbf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
   9bbfa:	439d      	bics	r5, r3
   9bbfc:	d0c2      	beq.n	9bb84 <PIOC_Handler+0x40>
   9bbfe:	e7be      	b.n	9bb7e <PIOC_Handler+0x3a>
   9bc00:	0009b851 	.word	0x0009b851
   9bc04:	400e1200 	.word	0x400e1200
   9bc08:	0009b855 	.word	0x0009b855
   9bc0c:	20072cd0 	.word	0x20072cd0

0009bc10 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   9bc10:	b570      	push	{r4, r5, r6, lr}
	status = pio_get_interrupt_status(p_pio);
   9bc12:	4b2e      	ldr	r3, [pc, #184]	; (9bccc <PIOD_Handler+0xbc>)
   9bc14:	482e      	ldr	r0, [pc, #184]	; (9bcd0 <PIOD_Handler+0xc0>)
   9bc16:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   9bc18:	4b2e      	ldr	r3, [pc, #184]	; (9bcd4 <PIOD_Handler+0xc4>)
	status = pio_get_interrupt_status(p_pio);
   9bc1a:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   9bc1c:	482c      	ldr	r0, [pc, #176]	; (9bcd0 <PIOD_Handler+0xc0>)
   9bc1e:	4798      	blx	r3
	if (status != 0) {
   9bc20:	4005      	ands	r5, r0
   9bc22:	d015      	beq.n	9bc50 <PIOD_Handler+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   9bc24:	4c2c      	ldr	r4, [pc, #176]	; (9bcd8 <PIOD_Handler+0xc8>)
   9bc26:	6820      	ldr	r0, [r4, #0]
   9bc28:	280e      	cmp	r0, #14
   9bc2a:	d012      	beq.n	9bc52 <PIOD_Handler+0x42>
   9bc2c:	6920      	ldr	r0, [r4, #16]
   9bc2e:	280e      	cmp	r0, #14
   9bc30:	d018      	beq.n	9bc64 <PIOD_Handler+0x54>
   9bc32:	6a20      	ldr	r0, [r4, #32]
   9bc34:	280e      	cmp	r0, #14
   9bc36:	d01e      	beq.n	9bc76 <PIOD_Handler+0x66>
   9bc38:	6b20      	ldr	r0, [r4, #48]	; 0x30
   9bc3a:	280e      	cmp	r0, #14
   9bc3c:	d024      	beq.n	9bc88 <PIOD_Handler+0x78>
   9bc3e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   9bc40:	280e      	cmp	r0, #14
   9bc42:	d02a      	beq.n	9bc9a <PIOD_Handler+0x8a>
   9bc44:	6d20      	ldr	r0, [r4, #80]	; 0x50
   9bc46:	280e      	cmp	r0, #14
   9bc48:	d037      	beq.n	9bcba <PIOD_Handler+0xaa>
   9bc4a:	6e20      	ldr	r0, [r4, #96]	; 0x60
   9bc4c:	280e      	cmp	r0, #14
   9bc4e:	d02d      	beq.n	9bcac <PIOD_Handler+0x9c>
   9bc50:	bd70      	pop	{r4, r5, r6, pc}
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bc52:	6861      	ldr	r1, [r4, #4]
   9bc54:	420d      	tst	r5, r1
   9bc56:	d0e9      	beq.n	9bc2c <PIOD_Handler+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bc58:	68e3      	ldr	r3, [r4, #12]
   9bc5a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bc5c:	6863      	ldr	r3, [r4, #4]
		while (status != 0) {
   9bc5e:	439d      	bics	r5, r3
   9bc60:	d0f6      	beq.n	9bc50 <PIOD_Handler+0x40>
   9bc62:	e7e3      	b.n	9bc2c <PIOD_Handler+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bc64:	6961      	ldr	r1, [r4, #20]
   9bc66:	4229      	tst	r1, r5
   9bc68:	d0e3      	beq.n	9bc32 <PIOD_Handler+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bc6a:	69e3      	ldr	r3, [r4, #28]
   9bc6c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bc6e:	6963      	ldr	r3, [r4, #20]
		while (status != 0) {
   9bc70:	439d      	bics	r5, r3
   9bc72:	d0ed      	beq.n	9bc50 <PIOD_Handler+0x40>
   9bc74:	e7dd      	b.n	9bc32 <PIOD_Handler+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bc76:	6a61      	ldr	r1, [r4, #36]	; 0x24
   9bc78:	4229      	tst	r1, r5
   9bc7a:	d0dd      	beq.n	9bc38 <PIOD_Handler+0x28>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bc7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   9bc7e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bc80:	6a63      	ldr	r3, [r4, #36]	; 0x24
		while (status != 0) {
   9bc82:	439d      	bics	r5, r3
   9bc84:	d0e4      	beq.n	9bc50 <PIOD_Handler+0x40>
   9bc86:	e7d7      	b.n	9bc38 <PIOD_Handler+0x28>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bc88:	6b61      	ldr	r1, [r4, #52]	; 0x34
   9bc8a:	4229      	tst	r1, r5
   9bc8c:	d0d7      	beq.n	9bc3e <PIOD_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bc8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   9bc90:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bc92:	6b63      	ldr	r3, [r4, #52]	; 0x34
		while (status != 0) {
   9bc94:	439d      	bics	r5, r3
   9bc96:	d0db      	beq.n	9bc50 <PIOD_Handler+0x40>
   9bc98:	e7d1      	b.n	9bc3e <PIOD_Handler+0x2e>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bc9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   9bc9c:	4229      	tst	r1, r5
   9bc9e:	d0d1      	beq.n	9bc44 <PIOD_Handler+0x34>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bca0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   9bca2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bca4:	6c63      	ldr	r3, [r4, #68]	; 0x44
		while (status != 0) {
   9bca6:	439d      	bics	r5, r3
   9bca8:	d0d2      	beq.n	9bc50 <PIOD_Handler+0x40>
   9bcaa:	e7cb      	b.n	9bc44 <PIOD_Handler+0x34>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bcac:	6e61      	ldr	r1, [r4, #100]	; 0x64
   9bcae:	4229      	tst	r1, r5
   9bcb0:	d0ce      	beq.n	9bc50 <PIOD_Handler+0x40>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bcb2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	pio_handler_process(PIOD, ID_PIOD);
}
   9bcb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bcb8:	4718      	bx	r3
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bcba:	6d61      	ldr	r1, [r4, #84]	; 0x54
   9bcbc:	4229      	tst	r1, r5
   9bcbe:	d0c4      	beq.n	9bc4a <PIOD_Handler+0x3a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bcc0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   9bcc2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   9bcc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
		while (status != 0) {
   9bcc6:	439d      	bics	r5, r3
   9bcc8:	d0c2      	beq.n	9bc50 <PIOD_Handler+0x40>
   9bcca:	e7be      	b.n	9bc4a <PIOD_Handler+0x3a>
   9bccc:	0009b851 	.word	0x0009b851
   9bcd0:	400e1400 	.word	0x400e1400
   9bcd4:	0009b855 	.word	0x0009b855
   9bcd8:	20072cd0 	.word	0x20072cd0

0009bcdc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   9bcdc:	4914      	ldr	r1, [pc, #80]	; (9bd30 <pmc_switch_mck_to_pllack+0x54>)
   9bcde:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   9bce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   9bce4:	4318      	orrs	r0, r3
   9bce6:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9bce8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   9bcea:	0718      	lsls	r0, r3, #28
   9bcec:	bf58      	it	pl
   9bcee:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   9bcf2:	d502      	bpl.n	9bcfa <pmc_switch_mck_to_pllack+0x1e>
   9bcf4:	e004      	b.n	9bd00 <pmc_switch_mck_to_pllack+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
   9bcf6:	3b01      	subs	r3, #1
   9bcf8:	d017      	beq.n	9bd2a <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9bcfa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   9bcfc:	0712      	lsls	r2, r2, #28
   9bcfe:	d5fa      	bpl.n	9bcf6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   9bd00:	490b      	ldr	r1, [pc, #44]	; (9bd30 <pmc_switch_mck_to_pllack+0x54>)
   9bd02:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   9bd04:	f023 0303 	bic.w	r3, r3, #3
   9bd08:	f043 0302 	orr.w	r3, r3, #2
   9bd0c:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9bd0e:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   9bd10:	0718      	lsls	r0, r3, #28
   9bd12:	bf58      	it	pl
   9bd14:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   9bd18:	d502      	bpl.n	9bd20 <pmc_switch_mck_to_pllack+0x44>
   9bd1a:	e004      	b.n	9bd26 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   9bd1c:	3b01      	subs	r3, #1
   9bd1e:	d004      	beq.n	9bd2a <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9bd20:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   9bd22:	0712      	lsls	r2, r2, #28
   9bd24:	d5fa      	bpl.n	9bd1c <pmc_switch_mck_to_pllack+0x40>
			return 1;
		}
	}

	return 0;
   9bd26:	2000      	movs	r0, #0
}
   9bd28:	4770      	bx	lr
			return 1;
   9bd2a:	2001      	movs	r0, #1
   9bd2c:	4770      	bx	lr
   9bd2e:	bf00      	nop
   9bd30:	400e0600 	.word	0x400e0600

0009bd34 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   9bd34:	b9c0      	cbnz	r0, 9bd68 <pmc_switch_mainck_to_xtal+0x34>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9bd36:	4810      	ldr	r0, [pc, #64]	; (9bd78 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   9bd38:	0209      	lsls	r1, r1, #8
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   9bd3a:	4602      	mov	r2, r0
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9bd3c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   9bd3e:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   9bd40:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9bd44:	f023 0303 	bic.w	r3, r3, #3
   9bd48:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9bd4c:	f043 0301 	orr.w	r3, r3, #1
   9bd50:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9bd52:	6203      	str	r3, [r0, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   9bd54:	6e93      	ldr	r3, [r2, #104]	; 0x68
   9bd56:	07db      	lsls	r3, r3, #31
   9bd58:	d5fc      	bpl.n	9bd54 <pmc_switch_mainck_to_xtal+0x20>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   9bd5a:	6a13      	ldr	r3, [r2, #32]
   9bd5c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   9bd60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   9bd64:	6213      	str	r3, [r2, #32]
   9bd66:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9bd68:	4903      	ldr	r1, [pc, #12]	; (9bd78 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   9bd6a:	4a04      	ldr	r2, [pc, #16]	; (9bd7c <pmc_switch_mainck_to_xtal+0x48>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9bd6c:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   9bd6e:	4b04      	ldr	r3, [pc, #16]	; (9bd80 <pmc_switch_mainck_to_xtal+0x4c>)
   9bd70:	4002      	ands	r2, r0
   9bd72:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9bd74:	620b      	str	r3, [r1, #32]
   9bd76:	4770      	bx	lr
   9bd78:	400e0600 	.word	0x400e0600
   9bd7c:	fec8fffc 	.word	0xfec8fffc
   9bd80:	01370002 	.word	0x01370002

0009bd84 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   9bd84:	4b02      	ldr	r3, [pc, #8]	; (9bd90 <pmc_osc_is_ready_mainck+0xc>)
   9bd86:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   9bd88:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   9bd8c:	4770      	bx	lr
   9bd8e:	bf00      	nop
   9bd90:	400e0600 	.word	0x400e0600

0009bd94 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   9bd94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   9bd98:	4b01      	ldr	r3, [pc, #4]	; (9bda0 <pmc_disable_pllack+0xc>)
   9bd9a:	629a      	str	r2, [r3, #40]	; 0x28
   9bd9c:	4770      	bx	lr
   9bd9e:	bf00      	nop
   9bda0:	400e0600 	.word	0x400e0600

0009bda4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   9bda4:	4b02      	ldr	r3, [pc, #8]	; (9bdb0 <pmc_is_locked_pllack+0xc>)
   9bda6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   9bda8:	f000 0002 	and.w	r0, r0, #2
   9bdac:	4770      	bx	lr
   9bdae:	bf00      	nop
   9bdb0:	400e0600 	.word	0x400e0600

0009bdb4 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   9bdb4:	4b04      	ldr	r3, [pc, #16]	; (9bdc8 <pmc_enable_upll_clock+0x14>)
   9bdb6:	f44f 1144 	mov.w	r1, #3211264	; 0x310000

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   9bdba:	461a      	mov	r2, r3
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   9bdbc:	61d9      	str	r1, [r3, #28]
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   9bdbe:	6e93      	ldr	r3, [r2, #104]	; 0x68
   9bdc0:	065b      	lsls	r3, r3, #25
   9bdc2:	d5fc      	bpl.n	9bdbe <pmc_enable_upll_clock+0xa>
}
   9bdc4:	4770      	bx	lr
   9bdc6:	bf00      	nop
   9bdc8:	400e0600 	.word	0x400e0600

0009bdcc <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   9bdcc:	4b06      	ldr	r3, [pc, #24]	; (9bde8 <pmc_enable_periph_clk+0x1c>)
   9bdce:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   9bdd2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   9bdd6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   9bdda:	2000      	movs	r0, #0
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   9bddc:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   9bde0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   9bde4:	4770      	bx	lr
   9bde6:	bf00      	nop
   9bde8:	400e0600 	.word	0x400e0600

0009bdec <pmc_disable_periph_clk>:
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   9bdec:	4b06      	ldr	r3, [pc, #24]	; (9be08 <pmc_disable_periph_clk+0x1c>)
   9bdee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   9bdf2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
   9bdf6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
		}
#endif
	}
	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   9bdfa:	2000      	movs	r0, #0
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
   9bdfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
	PMC->PMC_PCR = pcr;
   9be00:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   9be04:	4770      	bx	lr
   9be06:	bf00      	nop
   9be08:	400e0600 	.word	0x400e0600

0009be0c <pmc_switch_udpck_to_upllck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   9be0c:	0200      	lsls	r0, r0, #8
   9be0e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
   9be12:	4b02      	ldr	r3, [pc, #8]	; (9be1c <pmc_switch_udpck_to_upllck+0x10>)
   9be14:	f040 0001 	orr.w	r0, r0, #1
   9be18:	6398      	str	r0, [r3, #56]	; 0x38
   9be1a:	4770      	bx	lr
   9be1c:	400e0600 	.word	0x400e0600

0009be20 <pmc_enable_udpck>:
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   9be20:	2220      	movs	r2, #32
   9be22:	4b01      	ldr	r3, [pc, #4]	; (9be28 <pmc_enable_udpck+0x8>)
   9be24:	601a      	str	r2, [r3, #0]
   9be26:	4770      	bx	lr
   9be28:	400e0600 	.word	0x400e0600

0009be2c <pmc_disable_udpck>:
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCDR = PMC_SCDR_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCDR = PMC_SCDR_USBCLK;
#else
	PMC->PMC_SCDR = PMC_SCDR_UOTGCLK;
   9be2c:	2220      	movs	r2, #32
   9be2e:	4b01      	ldr	r3, [pc, #4]	; (9be34 <pmc_disable_udpck+0x8>)
   9be30:	605a      	str	r2, [r3, #4]
   9be32:	4770      	bx	lr
   9be34:	400e0600 	.word	0x400e0600

0009be38 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   9be38:	4b03      	ldr	r3, [pc, #12]	; (9be48 <pmc_set_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   9be3a:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   9be3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   9be40:	4310      	orrs	r0, r2
   9be42:	6718      	str	r0, [r3, #112]	; 0x70
   9be44:	4770      	bx	lr
   9be46:	bf00      	nop
   9be48:	400e0600 	.word	0x400e0600

0009be4c <pmc_clr_fast_startup_input>:
 * \param ul_inputs Wake up inputs to disable.
 */
void pmc_clr_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR &= ~ul_inputs;
   9be4c:	4a03      	ldr	r2, [pc, #12]	; (9be5c <pmc_clr_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   9be4e:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR &= ~ul_inputs;
   9be52:	6f13      	ldr	r3, [r2, #112]	; 0x70
   9be54:	ea23 0000 	bic.w	r0, r3, r0
   9be58:	6710      	str	r0, [r2, #112]	; 0x70
   9be5a:	4770      	bx	lr
   9be5c:	400e0600 	.word	0x400e0600

0009be60 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   9be60:	4b02      	ldr	r3, [pc, #8]	; (9be6c <pmc_is_wakeup_clocks_restored+0xc>)
   9be62:	7818      	ldrb	r0, [r3, #0]
}
   9be64:	f080 0001 	eor.w	r0, r0, #1
   9be68:	4770      	bx	lr
   9be6a:	bf00      	nop
   9be6c:	20072d40 	.word	0x20072d40

0009be70 <rtc_set_hour_mode>:
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
   9be70:	6843      	ldr	r3, [r0, #4]
	if (ul_mode) {
   9be72:	b919      	cbnz	r1, 9be7c <rtc_set_hour_mode+0xc>
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
   9be74:	f023 0301 	bic.w	r3, r3, #1
   9be78:	6043      	str	r3, [r0, #4]
   9be7a:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
   9be7c:	f043 0301 	orr.w	r3, r3, #1
   9be80:	6043      	str	r3, [r0, #4]
   9be82:	4770      	bx	lr

0009be84 <spi_enable_clock>:
{
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
   9be84:	4b03      	ldr	r3, [pc, #12]	; (9be94 <spi_enable_clock+0x10>)
   9be86:	4298      	cmp	r0, r3
   9be88:	d000      	beq.n	9be8c <spi_enable_clock+0x8>
   9be8a:	4770      	bx	lr
   9be8c:	2018      	movs	r0, #24
   9be8e:	4b02      	ldr	r3, [pc, #8]	; (9be98 <spi_enable_clock+0x14>)
   9be90:	4718      	bx	r3
   9be92:	bf00      	nop
   9be94:	40008000 	.word	0x40008000
   9be98:	0009bdcd 	.word	0x0009bdcd

0009be9c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   9be9c:	6843      	ldr	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   9be9e:	0409      	lsls	r1, r1, #16
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   9bea0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   9bea4:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   9bea6:	6843      	ldr	r3, [r0, #4]
   9bea8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   9beac:	4319      	orrs	r1, r3
   9beae:	6041      	str	r1, [r0, #4]
   9beb0:	4770      	bx	lr
   9beb2:	bf00      	nop

0009beb4 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   9beb4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	if (ul_polarity) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   9beb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if (ul_polarity) {
   9beba:	b91a      	cbnz	r2, 9bec4 <spi_set_clock_polarity+0x10>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   9bebc:	f023 0301 	bic.w	r3, r3, #1
   9bec0:	6303      	str	r3, [r0, #48]	; 0x30
   9bec2:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   9bec4:	f043 0301 	orr.w	r3, r3, #1
   9bec8:	6303      	str	r3, [r0, #48]	; 0x30
   9beca:	4770      	bx	lr

0009becc <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   9becc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	if (ul_phase) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   9bed0:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if (ul_phase) {
   9bed2:	b91a      	cbnz	r2, 9bedc <spi_set_clock_phase+0x10>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   9bed4:	f023 0302 	bic.w	r3, r3, #2
   9bed8:	6303      	str	r3, [r0, #48]	; 0x30
   9beda:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   9bedc:	f043 0302 	orr.w	r3, r3, #2
   9bee0:	6303      	str	r3, [r0, #48]	; 0x30
   9bee2:	4770      	bx	lr

0009bee4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   9bee4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   9bee8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   9beea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   9beee:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   9bef0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   9bef2:	431a      	orrs	r2, r3
   9bef4:	630a      	str	r2, [r1, #48]	; 0x30
   9bef6:	4770      	bx	lr

0009bef8 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
   9bef8:	b15a      	cbz	r2, 9bf12 <spi_set_baudrate_div+0x1a>
   9befa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   9befe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
   9bf00:	2000      	movs	r0, #0
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   9bf02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   9bf06:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   9bf08:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   9bf0a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   9bf0e:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   9bf10:	4770      	bx	lr
        return -1;
   9bf12:	f04f 30ff 	mov.w	r0, #4294967295
}
   9bf16:	4770      	bx	lr

0009bf18 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   9bf18:	b410      	push	{r4}
   9bf1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   9bf1e:	6b08      	ldr	r0, [r1, #48]	; 0x30
   9bf20:	b280      	uxth	r0, r0
   9bf22:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   9bf24:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   9bf26:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   9bf2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   9bf2e:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   9bf30:	bc10      	pop	{r4}
   9bf32:	4770      	bx	lr

0009bf34 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   9bf34:	b430      	push	{r4, r5}
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   9bf36:	2502      	movs	r5, #2

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   9bf38:	f04f 34ff 	mov.w	r4, #4294967295
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9bf3c:	0189      	lsls	r1, r1, #6
   9bf3e:	1843      	adds	r3, r0, r1
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   9bf40:	5045      	str	r5, [r0, r1]
	tc_channel->TC_IDR = 0xFFFFFFFF;
   9bf42:	629c      	str	r4, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   9bf44:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   9bf46:	605a      	str	r2, [r3, #4]
}
   9bf48:	bc30      	pop	{r4, r5}
   9bf4a:	4770      	bx	lr

0009bf4c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   9bf4c:	2305      	movs	r3, #5
   9bf4e:	0189      	lsls	r1, r1, #6
   9bf50:	5043      	str	r3, [r0, r1]
   9bf52:	4770      	bx	lr

0009bf54 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   9bf54:	2302      	movs	r3, #2
   9bf56:	0189      	lsls	r1, r1, #6
   9bf58:	5043      	str	r3, [r0, r1]
   9bf5a:	4770      	bx	lr

0009bf5c <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   9bf5c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   9bf60:	61ca      	str	r2, [r1, #28]
   9bf62:	4770      	bx	lr

0009bf64 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9bf64:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   9bf68:	624a      	str	r2, [r1, #36]	; 0x24
   9bf6a:	4770      	bx	lr

0009bf6c <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9bf6c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   9bf70:	6a08      	ldr	r0, [r1, #32]
}
   9bf72:	4770      	bx	lr

0009bf74 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
   9bf74:	b430      	push	{r4, r5}
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
   9bf76:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
{
   9bf7a:	9c02      	ldr	r4, [sp, #8]
		if (ul_freq > ul_high) {
   9bf7c:	d820      	bhi.n	9bfc0 <tc_find_mck_divisor+0x4c>
   9bf7e:	0c4d      	lsrs	r5, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
   9bf80:	42a8      	cmp	r0, r5
   9bf82:	d220      	bcs.n	9bfc6 <tc_find_mck_divisor+0x52>
		if (ul_freq > ul_high) {
   9bf84:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
		ul_low  = ul_high / TC_DIV_FACTOR;
   9bf88:	ea4f 45d1 	mov.w	r5, r1, lsr #19
		if (ul_freq > ul_high) {
   9bf8c:	d818      	bhi.n	9bfc0 <tc_find_mck_divisor+0x4c>
		} else if (ul_freq >= ul_low) {
   9bf8e:	42a8      	cmp	r0, r5
   9bf90:	d224      	bcs.n	9bfdc <tc_find_mck_divisor+0x68>
		if (ul_freq > ul_high) {
   9bf92:	ebb0 1f51 	cmp.w	r0, r1, lsr #5
		ul_low  = ul_high / TC_DIV_FACTOR;
   9bf96:	ea4f 5551 	mov.w	r5, r1, lsr #21
		if (ul_freq > ul_high) {
   9bf9a:	d811      	bhi.n	9bfc0 <tc_find_mck_divisor+0x4c>
		} else if (ul_freq >= ul_low) {
   9bf9c:	42a8      	cmp	r0, r5
   9bf9e:	d220      	bcs.n	9bfe2 <tc_find_mck_divisor+0x6e>
		if (ul_freq > ul_high) {
   9bfa0:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
		ul_low  = ul_high / TC_DIV_FACTOR;
   9bfa4:	ea4f 55d1 	mov.w	r5, r1, lsr #23
		if (ul_freq > ul_high) {
   9bfa8:	d80a      	bhi.n	9bfc0 <tc_find_mck_divisor+0x4c>
		} else if (ul_freq >= ul_low) {
   9bfaa:	42a8      	cmp	r0, r5
   9bfac:	d21c      	bcs.n	9bfe8 <tc_find_mck_divisor+0x74>
   9bfae:	0be4      	lsrs	r4, r4, #15
		ul_high = ul_mck / divisors[ul_index];
   9bfb0:	fbb1 f1f4 	udiv	r1, r1, r4
		if (ul_freq > ul_high) {
   9bfb4:	4281      	cmp	r1, r0
		ul_low  = ul_high / TC_DIV_FACTOR;
   9bfb6:	ea4f 4511 	mov.w	r5, r1, lsr #16
		if (ul_freq > ul_high) {
   9bfba:	d301      	bcc.n	9bfc0 <tc_find_mck_divisor+0x4c>
		} else if (ul_freq >= ul_low) {
   9bfbc:	4285      	cmp	r5, r0
   9bfbe:	d916      	bls.n	9bfee <tc_find_mck_divisor+0x7a>
			return 0;
   9bfc0:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
   9bfc2:	bc30      	pop	{r4, r5}
   9bfc4:	4770      	bx	lr
	for (ul_index = 0;
   9bfc6:	2100      	movs	r1, #0
		ul_high = ul_mck / divisors[ul_index];
   9bfc8:	2402      	movs	r4, #2
	if (p_uldiv) {
   9bfca:	b102      	cbz	r2, 9bfce <tc_find_mck_divisor+0x5a>
		*p_uldiv = divisors[ul_index];
   9bfcc:	6014      	str	r4, [r2, #0]
	if (p_ultcclks) {
   9bfce:	b11b      	cbz	r3, 9bfd8 <tc_find_mck_divisor+0x64>
}
   9bfd0:	bc30      	pop	{r4, r5}
	return 1;
   9bfd2:	2001      	movs	r0, #1
		*p_ultcclks = ul_index;
   9bfd4:	6019      	str	r1, [r3, #0]
}
   9bfd6:	4770      	bx	lr
	return 1;
   9bfd8:	2001      	movs	r0, #1
   9bfda:	e7f2      	b.n	9bfc2 <tc_find_mck_divisor+0x4e>
			ul_index++) {
   9bfdc:	2101      	movs	r1, #1
		ul_high = ul_mck / divisors[ul_index];
   9bfde:	2408      	movs	r4, #8
   9bfe0:	e7f3      	b.n	9bfca <tc_find_mck_divisor+0x56>
			ul_index++) {
   9bfe2:	2102      	movs	r1, #2
		ul_high = ul_mck / divisors[ul_index];
   9bfe4:	2420      	movs	r4, #32
   9bfe6:	e7f0      	b.n	9bfca <tc_find_mck_divisor+0x56>
			ul_index++) {
   9bfe8:	2103      	movs	r1, #3
		ul_high = ul_mck / divisors[ul_index];
   9bfea:	2480      	movs	r4, #128	; 0x80
   9bfec:	e7ed      	b.n	9bfca <tc_find_mck_divisor+0x56>
			ul_index++) {
   9bfee:	2104      	movs	r1, #4
   9bff0:	e7eb      	b.n	9bfca <tc_find_mck_divisor+0x56>
   9bff2:	bf00      	nop

0009bff4 <uhd_ctrl_phase_data_out>:
/**
 * \internal
 * \brief Manages the DATA OUT phase on control endpoint
 */
static void uhd_ctrl_phase_data_out(void)
{
   9bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
   9bff6:	2301      	movs	r3, #1

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
   9bff8:	4d4a      	ldr	r5, [pc, #296]	; (9c124 <uhd_ctrl_phase_data_out+0x130>)
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
   9bffa:	4f4b      	ldr	r7, [pc, #300]	; (9c128 <uhd_ctrl_phase_data_out+0x134>)
	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
   9bffc:	6829      	ldr	r1, [r5, #0]
   9bffe:	4c4b      	ldr	r4, [pc, #300]	; (9c12c <uhd_ctrl_phase_data_out+0x138>)
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
   9c000:	703b      	strb	r3, [r7, #0]
	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
   9c002:	f8b1 2017 	ldrh.w	r2, [r1, #23]
   9c006:	8826      	ldrh	r6, [r4, #0]
   9c008:	42b2      	cmp	r2, r6
   9c00a:	d070      	beq.n	9c0ee <uhd_ctrl_phase_data_out+0xfa>
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
   9c00c:	8b4b      	ldrh	r3, [r1, #26]
   9c00e:	2b00      	cmp	r3, #0
   9c010:	d043      	beq.n	9c09a <uhd_ctrl_phase_data_out+0xa6>
	ep_ctrl_size = uhd_get_pipe_size(0);
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_OUT);
	uhd_ack_out_ready(0);
   9c012:	f04f 0e02 	mov.w	lr, #2
	ep_ctrl_size = uhd_get_pipe_size(0);
   9c016:	2308      	movs	r3, #8
   9c018:	4845      	ldr	r0, [pc, #276]	; (9c130 <uhd_ctrl_phase_data_out+0x13c>)
   9c01a:	f8d0 7500 	ldr.w	r7, [r0, #1280]	; 0x500
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_OUT);
   9c01e:	f8d0 2500 	ldr.w	r2, [r0, #1280]	; 0x500
	ep_ctrl_size = uhd_get_pipe_size(0);
   9c022:	f3c7 1702 	ubfx	r7, r7, #4, #3
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_OUT);
   9c026:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   9c02a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   9c02e:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
	uhd_ack_out_ready(0);
   9c032:	f8c0 e560 	str.w	lr, [r0, #1376]	; 0x560
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
   9c036:	f8b1 2017 	ldrh.w	r2, [r1, #23]
	ep_ctrl_size = uhd_get_pipe_size(0);
   9c03a:	40bb      	lsls	r3, r7
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
   9c03c:	42b2      	cmp	r2, r6
	ep_ctrl_size = uhd_get_pipe_size(0);
   9c03e:	b2db      	uxtb	r3, r3
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
   9c040:	d91e      	bls.n	9c080 <uhd_ctrl_phase_data_out+0x8c>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
   9c042:	b1eb      	cbz	r3, 9c080 <uhd_ctrl_phase_data_out+0x8c>
   9c044:	8b4a      	ldrh	r2, [r1, #26]
   9c046:	b1da      	cbz	r2, 9c080 <uhd_ctrl_phase_data_out+0x8c>
   9c048:	3b01      	subs	r3, #1
   9c04a:	4f3a      	ldr	r7, [pc, #232]	; (9c134 <uhd_ctrl_phase_data_out+0x140>)
   9c04c:	b2db      	uxtb	r3, r3
   9c04e:	483a      	ldr	r0, [pc, #232]	; (9c138 <uhd_ctrl_phase_data_out+0x144>)
   9c050:	441f      	add	r7, r3
   9c052:	e002      	b.n	9c05a <uhd_ctrl_phase_data_out+0x66>
   9c054:	4287      	cmp	r7, r0
   9c056:	d013      	beq.n	9c080 <uhd_ctrl_phase_data_out+0x8c>
   9c058:	b192      	cbz	r2, 9c080 <uhd_ctrl_phase_data_out+0x8c>
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
   9c05a:	68cb      	ldr	r3, [r1, #12]
   9c05c:	1c5a      	adds	r2, r3, #1
   9c05e:	60ca      	str	r2, [r1, #12]
   9c060:	781b      	ldrb	r3, [r3, #0]
   9c062:	f800 3b01 	strb.w	r3, [r0], #1
		uhd_ctrl_nb_trans++;
   9c066:	8823      	ldrh	r3, [r4, #0]
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
   9c068:	6829      	ldr	r1, [r5, #0]
		uhd_ctrl_nb_trans++;
   9c06a:	3301      	adds	r3, #1
   9c06c:	b29b      	uxth	r3, r3
		uhd_ctrl_request_first->payload_size--;
   9c06e:	8b4a      	ldrh	r2, [r1, #26]
		uhd_ctrl_nb_trans++;
   9c070:	8023      	strh	r3, [r4, #0]
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
   9c072:	f8b1 6017 	ldrh.w	r6, [r1, #23]
		uhd_ctrl_request_first->payload_size--;
   9c076:	3a01      	subs	r2, #1
   9c078:	b292      	uxth	r2, r2
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
   9c07a:	429e      	cmp	r6, r3
		uhd_ctrl_request_first->payload_size--;
   9c07c:	834a      	strh	r2, [r1, #26]
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
   9c07e:	d8e9      	bhi.n	9c054 <uhd_ctrl_phase_data_out+0x60>
	}
	uhd_enable_out_ready_interrupt(0);
   9c080:	2002      	movs	r0, #2
	uhd_ack_fifocon(0);
   9c082:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	uhd_unfreeze_pipe(0);
   9c086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uhd_enable_out_ready_interrupt(0);
   9c08a:	4b29      	ldr	r3, [pc, #164]	; (9c130 <uhd_ctrl_phase_data_out+0x13c>)
   9c08c:	f8c3 05f0 	str.w	r0, [r3, #1520]	; 0x5f0
	uhd_ack_fifocon(0);
   9c090:	f8c3 1620 	str.w	r1, [r3, #1568]	; 0x620
	uhd_unfreeze_pipe(0);
   9c094:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
   9c098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (uhd_ctrl_request_first->callback_run==NULL
   9c09a:	684b      	ldr	r3, [r1, #4]
   9c09c:	b15b      	cbz	r3, 9c0b6 <uhd_ctrl_phase_data_out+0xc2>
				uhd_get_configured_address(0),
   9c09e:	4827      	ldr	r0, [pc, #156]	; (9c13c <uhd_ctrl_phase_data_out+0x148>)
				|| !uhd_ctrl_request_first->callback_run(
   9c0a0:	f101 021a 	add.w	r2, r1, #26
				uhd_get_configured_address(0),
   9c0a4:	6800      	ldr	r0, [r0, #0]
				|| !uhd_ctrl_request_first->callback_run(
   9c0a6:	310c      	adds	r1, #12
   9c0a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   9c0ac:	4798      	blx	r3
   9c0ae:	b110      	cbz	r0, 9c0b6 <uhd_ctrl_phase_data_out+0xc2>
   9c0b0:	6829      	ldr	r1, [r5, #0]
   9c0b2:	8826      	ldrh	r6, [r4, #0]
   9c0b4:	e7ad      	b.n	9c012 <uhd_ctrl_phase_data_out+0x1e>
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
   9c0b6:	2203      	movs	r2, #3
	uhd_ack_in_received(0);
   9c0b8:	2101      	movs	r1, #1
	uhd_ack_short_packet(0);
   9c0ba:	2580      	movs	r5, #128	; 0x80
	uhd_ack_fifocon(0);
   9c0bc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
	uhd_unfreeze_pipe(0);
   9c0c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_IN);
   9c0c4:	4b1a      	ldr	r3, [pc, #104]	; (9c130 <uhd_ctrl_phase_data_out+0x13c>)
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
   9c0c6:	703a      	strb	r2, [r7, #0]
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_IN);
   9c0c8:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
   9c0cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   9c0d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   9c0d4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	uhd_ack_in_received(0);
   9c0d8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
	uhd_ack_short_packet(0);
   9c0dc:	f8c3 5560 	str.w	r5, [r3, #1376]	; 0x560
	uhd_enable_in_received_interrupt(0);
   9c0e0:	f8c3 15f0 	str.w	r1, [r3, #1520]	; 0x5f0
	uhd_ack_fifocon(0);
   9c0e4:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	uhd_unfreeze_pipe(0);
   9c0e8:	f8c3 0620 	str.w	r0, [r3, #1568]	; 0x620
   9c0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
   9c0ee:	2103      	movs	r1, #3
	uhd_ack_short_packet(0);
   9c0f0:	2580      	movs	r5, #128	; 0x80
	uhd_ack_fifocon(0);
   9c0f2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
	uhd_unfreeze_pipe(0);
   9c0f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_IN);
   9c0fa:	4a0d      	ldr	r2, [pc, #52]	; (9c130 <uhd_ctrl_phase_data_out+0x13c>)
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
   9c0fc:	7039      	strb	r1, [r7, #0]
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_IN);
   9c0fe:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
   9c102:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   9c106:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   9c10a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
	uhd_ack_in_received(0);
   9c10e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
	uhd_ack_short_packet(0);
   9c112:	f8c2 5560 	str.w	r5, [r2, #1376]	; 0x560
	uhd_enable_in_received_interrupt(0);
   9c116:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	uhd_ack_fifocon(0);
   9c11a:	f8c2 4620 	str.w	r4, [r2, #1568]	; 0x620
	uhd_unfreeze_pipe(0);
   9c11e:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
   9c122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   9c124:	20072fa8 	.word	0x20072fa8
   9c128:	20072fa4 	.word	0x20072fa4
   9c12c:	20072fac 	.word	0x20072fac
   9c130:	400ac000 	.word	0x400ac000
   9c134:	20180001 	.word	0x20180001
   9c138:	20180000 	.word	0x20180000
   9c13c:	400ac424 	.word	0x400ac424

0009c140 <cpu_irq_restore.part.0>:
   9c140:	2201      	movs	r2, #1
   9c142:	4b03      	ldr	r3, [pc, #12]	; (9c150 <cpu_irq_restore.part.0+0x10>)
   9c144:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   9c146:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9c14a:	b662      	cpsie	i
   9c14c:	4770      	bx	lr
   9c14e:	bf00      	nop
   9c150:	2007026b 	.word	0x2007026b

0009c154 <uhd_sleep_mode.constprop.8>:
	enum sleepmgr_mode sleep_mode[] = {
   9c154:	2005      	movs	r0, #5
   9c156:	2302      	movs	r3, #2
   9c158:	2203      	movs	r2, #3
static void uhd_sleep_mode(enum uhd_uotghs_state_enum new_state)
   9c15a:	b530      	push	{r4, r5, lr}
	if (uhd_state == new_state) {
   9c15c:	4926      	ldr	r1, [pc, #152]	; (9c1f8 <uhd_sleep_mode.constprop.8+0xa4>)
static void uhd_sleep_mode(enum uhd_uotghs_state_enum new_state)
   9c15e:	b085      	sub	sp, #20
	enum sleepmgr_mode sleep_mode[] = {
   9c160:	f88d 0008 	strb.w	r0, [sp, #8]
	if (uhd_state == new_state) {
   9c164:	7808      	ldrb	r0, [r1, #0]
	enum sleepmgr_mode sleep_mode[] = {
   9c166:	f88d 2009 	strb.w	r2, [sp, #9]
	if (uhd_state == new_state) {
   9c16a:	2805      	cmp	r0, #5
	enum sleepmgr_mode sleep_mode[] = {
   9c16c:	f88d 200c 	strb.w	r2, [sp, #12]
   9c170:	f88d 300a 	strb.w	r3, [sp, #10]
   9c174:	f88d 300b 	strb.w	r3, [sp, #11]
   9c178:	f88d 300d 	strb.w	r3, [sp, #13]
	if (uhd_state == new_state) {
   9c17c:	d01d      	beq.n	9c1ba <uhd_sleep_mode.constprop.8+0x66>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   9c17e:	4b1f      	ldr	r3, [pc, #124]	; (9c1fc <uhd_sleep_mode.constprop.8+0xa8>)
   9c180:	789a      	ldrb	r2, [r3, #2]
   9c182:	2aff      	cmp	r2, #255	; 0xff
   9c184:	d01b      	beq.n	9c1be <uhd_sleep_mode.constprop.8+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9c186:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9c18a:	fab2 f282 	clz	r2, r2
   9c18e:	0952      	lsrs	r2, r2, #5
   9c190:	9200      	str	r2, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   9c192:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9c194:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9c198:	2000      	movs	r0, #0
   9c19a:	4c19      	ldr	r4, [pc, #100]	; (9c200 <uhd_sleep_mode.constprop.8+0xac>)
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   9c19c:	789a      	ldrb	r2, [r3, #2]
   9c19e:	7020      	strb	r0, [r4, #0]
	return flags;
   9c1a0:	9800      	ldr	r0, [sp, #0]
   9c1a2:	3201      	adds	r2, #1
   9c1a4:	709a      	strb	r2, [r3, #2]
	if (cpu_irq_is_enabled_flags(flags))
   9c1a6:	b120      	cbz	r0, 9c1b2 <uhd_sleep_mode.constprop.8+0x5e>
		cpu_irq_enable();
   9c1a8:	2201      	movs	r2, #1
   9c1aa:	7022      	strb	r2, [r4, #0]
   9c1ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9c1b0:	b662      	cpsie	i
	if (uhd_state != UHD_STATE_OFF) {
   9c1b2:	780a      	ldrb	r2, [r1, #0]
   9c1b4:	b922      	cbnz	r2, 9c1c0 <uhd_sleep_mode.constprop.8+0x6c>
	uhd_state = new_state;
   9c1b6:	2305      	movs	r3, #5
   9c1b8:	700b      	strb	r3, [r1, #0]
}
   9c1ba:	b005      	add	sp, #20
   9c1bc:	bd30      	pop	{r4, r5, pc}
   9c1be:	e7fe      	b.n	9c1be <uhd_sleep_mode.constprop.8+0x6a>
		sleepmgr_unlock_mode(sleep_mode[uhd_state]);
   9c1c0:	a804      	add	r0, sp, #16
   9c1c2:	4402      	add	r2, r0
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   9c1c4:	f812 0c08 	ldrb.w	r0, [r2, #-8]
   9c1c8:	5c1a      	ldrb	r2, [r3, r0]
   9c1ca:	b19a      	cbz	r2, 9c1f4 <uhd_sleep_mode.constprop.8+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9c1cc:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9c1d0:	fab2 f282 	clz	r2, r2
   9c1d4:	0952      	lsrs	r2, r2, #5
   9c1d6:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   9c1d8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9c1da:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9c1de:	2500      	movs	r5, #0
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   9c1e0:	5c1a      	ldrb	r2, [r3, r0]
   9c1e2:	7025      	strb	r5, [r4, #0]
	return flags;
   9c1e4:	9c01      	ldr	r4, [sp, #4]
   9c1e6:	3a01      	subs	r2, #1
   9c1e8:	541a      	strb	r2, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
   9c1ea:	2c00      	cmp	r4, #0
   9c1ec:	d0e3      	beq.n	9c1b6 <uhd_sleep_mode.constprop.8+0x62>
   9c1ee:	4b05      	ldr	r3, [pc, #20]	; (9c204 <uhd_sleep_mode.constprop.8+0xb0>)
   9c1f0:	4798      	blx	r3
   9c1f2:	e7e0      	b.n	9c1b6 <uhd_sleep_mode.constprop.8+0x62>
   9c1f4:	e7fe      	b.n	9c1f4 <uhd_sleep_mode.constprop.8+0xa0>
   9c1f6:	bf00      	nop
   9c1f8:	20072e25 	.word	0x20072e25
   9c1fc:	20072f9c 	.word	0x20072f9c
   9c200:	2007026b 	.word	0x2007026b
   9c204:	0009c141 	.word	0x0009c141

0009c208 <uhd_ctrl_request_end>:
	irqflags_t flags;
	uhd_callback_setup_end_t callback_end;
	struct uhd_ctrl_request_t *request_to_free;
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;
   9c208:	2100      	movs	r1, #0
{
   9c20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Remove request from the control request list
	callback_end = uhd_ctrl_request_first->callback_end;
   9c20e:	4c6a      	ldr	r4, [pc, #424]	; (9c3b8 <uhd_ctrl_request_end+0x1b0>)
	uhd_ctrl_request_timeout = 0;
   9c210:	4e6a      	ldr	r6, [pc, #424]	; (9c3bc <uhd_ctrl_request_end+0x1b4>)
	callback_end = uhd_ctrl_request_first->callback_end;
   9c212:	6822      	ldr	r2, [r4, #0]
{
   9c214:	b082      	sub	sp, #8
   9c216:	4607      	mov	r7, r0
	callback_end = uhd_ctrl_request_first->callback_end;
   9c218:	f8d2 8008 	ldr.w	r8, [r2, #8]
	uhd_ctrl_request_timeout = 0;
   9c21c:	8031      	strh	r1, [r6, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9c21e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9c222:	fab3 f383 	clz	r3, r3
   9c226:	095b      	lsrs	r3, r3, #5
   9c228:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   9c22a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9c22c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9c230:	4b63      	ldr	r3, [pc, #396]	; (9c3c0 <uhd_ctrl_request_end+0x1b8>)
	request_to_free = uhd_ctrl_request_first;
	flags = cpu_irq_save();
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
   9c232:	6820      	ldr	r0, [r4, #0]
   9c234:	7019      	strb	r1, [r3, #0]
   9c236:	6805      	ldr	r5, [r0, #0]
	return flags;
   9c238:	9901      	ldr	r1, [sp, #4]
   9c23a:	6025      	str	r5, [r4, #0]
	if (cpu_irq_is_enabled_flags(flags))
   9c23c:	2900      	cmp	r1, #0
   9c23e:	f040 80b5 	bne.w	9c3ac <uhd_ctrl_request_end+0x1a4>
	b_new_request = (uhd_ctrl_request_first != NULL);
	cpu_irq_restore(flags);
	free(request_to_free);
   9c242:	4610      	mov	r0, r2
   9c244:	4b5f      	ldr	r3, [pc, #380]	; (9c3c4 <uhd_ctrl_request_end+0x1bc>)
   9c246:	4798      	blx	r3

	// Call callback
	if (callback_end != NULL) {
   9c248:	f1b8 0f00 	cmp.w	r8, #0
   9c24c:	d007      	beq.n	9c25e <uhd_ctrl_request_end+0x56>
		callback_end(uhd_get_configured_address(0), status, uhd_ctrl_nb_trans);
   9c24e:	4a5e      	ldr	r2, [pc, #376]	; (9c3c8 <uhd_ctrl_request_end+0x1c0>)
   9c250:	4b5e      	ldr	r3, [pc, #376]	; (9c3cc <uhd_ctrl_request_end+0x1c4>)
   9c252:	6810      	ldr	r0, [r2, #0]
   9c254:	4639      	mov	r1, r7
   9c256:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   9c25a:	881a      	ldrh	r2, [r3, #0]
   9c25c:	47c0      	blx	r8
	}

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
   9c25e:	b1c5      	cbz	r5, 9c292 <uhd_ctrl_request_end+0x8a>
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
   9c260:	2200      	movs	r2, #0
	uhd_ctrl_nb_trans = 0;
   9c262:	495a      	ldr	r1, [pc, #360]	; (9c3cc <uhd_ctrl_request_end+0x1c4>)
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
   9c264:	485a      	ldr	r0, [pc, #360]	; (9c3d0 <uhd_ctrl_request_end+0x1c8>)
	if (!Is_uhd_pipe_enabled(0) ||
   9c266:	4b5b      	ldr	r3, [pc, #364]	; (9c3d4 <uhd_ctrl_request_end+0x1cc>)
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
   9c268:	7002      	strb	r2, [r0, #0]
	uhd_ctrl_nb_trans = 0;
   9c26a:	800a      	strh	r2, [r1, #0]
	if (!Is_uhd_pipe_enabled(0) ||
   9c26c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
	memcpy(&setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
   9c270:	6822      	ldr	r2, [r4, #0]
	if (!Is_uhd_pipe_enabled(0) ||
   9c272:	07c9      	lsls	r1, r1, #31
	memcpy(&setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
   9c274:	f8d2 5011 	ldr.w	r5, [r2, #17]
   9c278:	f8d2 4015 	ldr.w	r4, [r2, #21]
	if (!Is_uhd_pipe_enabled(0) ||
   9c27c:	d506      	bpl.n	9c28c <uhd_ctrl_request_end+0x84>
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
   9c27e:	4852      	ldr	r0, [pc, #328]	; (9c3c8 <uhd_ctrl_request_end+0x1c0>)
   9c280:	7c11      	ldrb	r1, [r2, #16]
   9c282:	6802      	ldr	r2, [r0, #0]
   9c284:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	if (!Is_uhd_pipe_enabled(0) ||
   9c288:	4291      	cmp	r1, r2
   9c28a:	d071      	beq.n	9c370 <uhd_ctrl_request_end+0x168>
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
   9c28c:	2001      	movs	r0, #1
   9c28e:	f7ff ffbb 	bl	9c208 <uhd_ctrl_request_end>
		uhd_ctrl_phase_setup();
	}
	if (uhd_b_suspend_requested) {
   9c292:	4b51      	ldr	r3, [pc, #324]	; (9c3d8 <uhd_ctrl_request_end+0x1d0>)
   9c294:	781a      	ldrb	r2, [r3, #0]
   9c296:	b132      	cbz	r2, 9c2a6 <uhd_ctrl_request_end+0x9e>
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
   9c298:	2100      	movs	r1, #0
	if (uhd_ctrl_request_timeout) {
   9c29a:	8832      	ldrh	r2, [r6, #0]
		uhd_b_suspend_requested = false;
   9c29c:	7019      	strb	r1, [r3, #0]
	if (uhd_ctrl_request_timeout) {
   9c29e:	b292      	uxth	r2, r2
   9c2a0:	b122      	cbz	r2, 9c2ac <uhd_ctrl_request_end+0xa4>
		uhd_b_suspend_requested = true;
   9c2a2:	2201      	movs	r2, #1
   9c2a4:	701a      	strb	r2, [r3, #0]
		uhd_suspend();
	}
}
   9c2a6:	b002      	add	sp, #8
   9c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uhd_freeze_pipe(pipe);
   9c2ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uhd_suspend_start = 3;
   9c2b0:	2103      	movs	r1, #3
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9c2b2:	484a      	ldr	r0, [pc, #296]	; (9c3dc <uhd_ctrl_request_end+0x1d4>)
   9c2b4:	4d4a      	ldr	r5, [pc, #296]	; (9c3e0 <uhd_ctrl_request_end+0x1d8>)
   9c2b6:	f8d0 35c0 	ldr.w	r3, [r0, #1472]	; 0x5c0
		uhd_freeze_pipe(pipe);
   9c2ba:	f8c0 25f0 	str.w	r2, [r0, #1520]	; 0x5f0
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9c2be:	f8d5 05c0 	ldr.w	r0, [r5, #1472]	; 0x5c0
   9c2c2:	4c48      	ldr	r4, [pc, #288]	; (9c3e4 <uhd_ctrl_request_end+0x1dc>)
		uhd_freeze_pipe(pipe);
   9c2c4:	f8c5 25f0 	str.w	r2, [r5, #1520]	; 0x5f0
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9c2c8:	4f47      	ldr	r7, [pc, #284]	; (9c3e8 <uhd_ctrl_request_end+0x1e0>)
   9c2ca:	4053      	eors	r3, r2
   9c2cc:	f8d4 65c0 	ldr.w	r6, [r4, #1472]	; 0x5c0
   9c2d0:	4050      	eors	r0, r2
		uhd_freeze_pipe(pipe);
   9c2d2:	f8c4 25f0 	str.w	r2, [r4, #1520]	; 0x5f0
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9c2d6:	f3c3 4340 	ubfx	r3, r3, #17, #1
   9c2da:	f8d7 45c0 	ldr.w	r4, [r7, #1472]	; 0x5c0
   9c2de:	f8df e114 	ldr.w	lr, [pc, #276]	; 9c3f4 <uhd_ctrl_request_end+0x1ec>
		uhd_freeze_pipe(pipe);
   9c2e2:	f8c7 25f0 	str.w	r2, [r7, #1520]	; 0x5f0
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9c2e6:	f3c0 4040 	ubfx	r0, r0, #17, #1
   9c2ea:	005b      	lsls	r3, r3, #1
   9c2ec:	4056      	eors	r6, r2
   9c2ee:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   9c2f2:	f8d5 05cc 	ldr.w	r0, [r5, #1484]	; 0x5cc
		uhd_freeze_pipe(pipe);
   9c2f6:	f8c5 25fc 	str.w	r2, [r5, #1532]	; 0x5fc
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9c2fa:	f8de 75c0 	ldr.w	r7, [lr, #1472]	; 0x5c0
   9c2fe:	f3c6 4640 	ubfx	r6, r6, #17, #1
		uhd_freeze_pipe(pipe);
   9c302:	f8ce 25f0 	str.w	r2, [lr, #1520]	; 0x5f0
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9c306:	4054      	eors	r4, r2
   9c308:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
   9c30c:	f3c4 4440 	ubfx	r4, r4, #17, #1
   9c310:	f8d5 65d4 	ldr.w	r6, [r5, #1492]	; 0x5d4
   9c314:	4050      	eors	r0, r2
		uhd_freeze_pipe(pipe);
   9c316:	f8c5 2604 	str.w	r2, [r5, #1540]	; 0x604
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9c31a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   9c31e:	f3c0 4040 	ubfx	r0, r0, #17, #1
   9c322:	f8de 45c8 	ldr.w	r4, [lr, #1480]	; 0x5c8
   9c326:	4057      	eors	r7, r2
		uhd_freeze_pipe(pipe);
   9c328:	f8ce 25f8 	str.w	r2, [lr, #1528]	; 0x5f8
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9c32c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   9c330:	f3c7 4740 	ubfx	r7, r7, #17, #1
   9c334:	f8d5 05dc 	ldr.w	r0, [r5, #1500]	; 0x5dc
   9c338:	4056      	eors	r6, r2
   9c33a:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
   9c33e:	f3c6 4640 	ubfx	r6, r6, #17, #1
   9c342:	4054      	eors	r4, r2
   9c344:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
   9c348:	f3c4 4440 	ubfx	r4, r4, #17, #1
   9c34c:	4050      	eors	r0, r2
   9c34e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   9c352:	f3c0 4040 	ubfx	r0, r0, #17, #1
   9c356:	4e25      	ldr	r6, [pc, #148]	; (9c3ec <uhd_ctrl_request_end+0x1e4>)
	uhd_suspend_start = 3;
   9c358:	4c25      	ldr	r4, [pc, #148]	; (9c3f0 <uhd_ctrl_request_end+0x1e8>)
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9c35a:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
   9c35e:	f10e 0e08 	add.w	lr, lr, #8
		uhd_freeze_pipe(pipe);
   9c362:	f8c5 260c 	str.w	r2, [r5, #1548]	; 0x60c
   9c366:	8033      	strh	r3, [r6, #0]
	uhd_suspend_start = 3;
   9c368:	7021      	strb	r1, [r4, #0]
}
   9c36a:	b002      	add	sp, #8
   9c36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*ptr_ep_data = setup.value64;
   9c370:	4628      	mov	r0, r5
   9c372:	4621      	mov	r1, r4
	uhd_ack_setup_ready(0);
   9c374:	2504      	movs	r5, #4
	uhd_ctrl_request_timeout = 5000;
   9c376:	f241 3e88 	movw	lr, #5000	; 0x1388
	uhd_ack_fifocon(0);
   9c37a:	f44f 4780 	mov.w	r7, #16384	; 0x4000
	uhd_unfreeze_pipe(0);
   9c37e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_SETUP);
   9c382:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
	*ptr_ep_data = setup.value64;
   9c386:	f8df c070 	ldr.w	ip, [pc, #112]	; 9c3f8 <uhd_ctrl_request_end+0x1f0>
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_SETUP);
   9c38a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   9c38e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	uhd_ack_setup_ready(0);
   9c392:	f8c3 5560 	str.w	r5, [r3, #1376]	; 0x560
	*ptr_ep_data = setup.value64;
   9c396:	e9cc 0100 	strd	r0, r1, [ip]
	uhd_ctrl_request_timeout = 5000;
   9c39a:	f8a6 e000 	strh.w	lr, [r6]
	uhd_enable_setup_ready_interrupt(0);
   9c39e:	f8c3 55f0 	str.w	r5, [r3, #1520]	; 0x5f0
	uhd_ack_fifocon(0);
   9c3a2:	f8c3 7620 	str.w	r7, [r3, #1568]	; 0x620
	uhd_unfreeze_pipe(0);
   9c3a6:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
   9c3aa:	e772      	b.n	9c292 <uhd_ctrl_request_end+0x8a>
		cpu_irq_enable();
   9c3ac:	2101      	movs	r1, #1
   9c3ae:	7019      	strb	r1, [r3, #0]
   9c3b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9c3b4:	b662      	cpsie	i
   9c3b6:	e744      	b.n	9c242 <uhd_ctrl_request_end+0x3a>
   9c3b8:	20072fa8 	.word	0x20072fa8
   9c3bc:	20072fb4 	.word	0x20072fb4
   9c3c0:	2007026b 	.word	0x2007026b
   9c3c4:	000a52f1 	.word	0x000a52f1
   9c3c8:	400ac424 	.word	0x400ac424
   9c3cc:	20072fac 	.word	0x20072fac
   9c3d0:	20072fa4 	.word	0x20072fa4
   9c3d4:	400ac000 	.word	0x400ac000
   9c3d8:	20072d43 	.word	0x20072d43
   9c3dc:	400ac004 	.word	0x400ac004
   9c3e0:	400ac008 	.word	0x400ac008
   9c3e4:	400ac00c 	.word	0x400ac00c
   9c3e8:	400ac010 	.word	0x400ac010
   9c3ec:	20072e1c 	.word	0x20072e1c
   9c3f0:	20072e26 	.word	0x20072e26
   9c3f4:	400ac018 	.word	0x400ac018
   9c3f8:	20180000 	.word	0x20180000

0009c3fc <uhd_ep_abort_pipe>:
 *
 * \param pipe   Pipe number
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
   9c3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Stop transfer
#ifdef UHD_PIPE_DMA_SUPPORTED
	if (Is_uhd_pipe_dma_supported(pipe)) {
   9c400:	1e46      	subs	r6, r0, #1
   9c402:	b2f3      	uxtb	r3, r6
   9c404:	2b05      	cmp	r3, #5
   9c406:	f200 8081 	bhi.w	9c50c <uhd_ep_abort_pipe+0x110>
		uhd_pipe_job_t *ptr_job = &uhd_pipe_job[pipe - 1];
		uhd_freeze_pipe(pipe);
   9c40a:	f44f 3700 	mov.w	r7, #131072	; 0x20000
		ptr_job->nb_trans =
				uhd_pipe_dma_get_addr(pipe) - (uint32_t)ptr_job->buf;
		uhd_pipe_dma_set_control(pipe, 0);
   9c40e:	f04f 0c00 	mov.w	ip, #0
		uhd_freeze_pipe(pipe);
   9c412:	4d49      	ldr	r5, [pc, #292]	; (9c538 <uhd_ep_abort_pipe+0x13c>)
   9c414:	f500 74be 	add.w	r4, r0, #380	; 0x17c
   9c418:	f845 7024 	str.w	r7, [r5, r4, lsl #2]
		ptr_job->nb_trans =
   9c41c:	00b3      	lsls	r3, r6, #2
   9c41e:	f8df e124 	ldr.w	lr, [pc, #292]	; 9c544 <uhd_ep_abort_pipe+0x148>
				uhd_pipe_dma_get_addr(pipe) - (uint32_t)ptr_job->buf;
   9c422:	4c46      	ldr	r4, [pc, #280]	; (9c53c <uhd_ep_abort_pipe+0x140>)
		ptr_job->nb_trans =
   9c424:	199a      	adds	r2, r3, r6
   9c426:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
				uhd_pipe_dma_get_addr(pipe) - (uint32_t)ptr_job->buf;
   9c42a:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   9c42e:	6867      	ldr	r7, [r4, #4]
   9c430:	6855      	ldr	r5, [r2, #4]
		uhd_pipe_dma_set_control(pipe, 0);
   9c432:	f8c4 c008 	str.w	ip, [r4, #8]
				uhd_pipe_dma_get_addr(pipe) - (uint32_t)ptr_job->buf;
   9c436:	1b7d      	subs	r5, r7, r5
		ptr_job->nb_trans =
   9c438:	60d5      	str	r5, [r2, #12]
 * \param status Status of the transfer
 */
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
	uhd_pipe_job_t *ptr_job;
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c43a:	277f      	movs	r7, #127	; 0x7f
	uhd_reset_pipe(pipe);
   9c43c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
   9c440:	4c3d      	ldr	r4, [pc, #244]	; (9c538 <uhd_ep_abort_pipe+0x13c>)
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c442:	00c2      	lsls	r2, r0, #3
   9c444:	f002 0218 	and.w	r2, r2, #24
	uhd_disable_out_ready_interrupt(pipe);
   9c448:	f04f 0802 	mov.w	r8, #2
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c44c:	4097      	lsls	r7, r2
	uhd_reset_pipe(pipe);
   9c44e:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
   9c452:	4085      	lsls	r5, r0
   9c454:	432a      	orrs	r2, r5
   9c456:	f8c4 241c 	str.w	r2, [r4, #1052]	; 0x41c
   9c45a:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
	uhd_enable_stall_interrupt(pipe);
   9c45e:	f04f 0a40 	mov.w	sl, #64	; 0x40
	uhd_reset_pipe(pipe);
   9c462:	ea22 0505 	bic.w	r5, r2, r5
   9c466:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
	uhd_enable_pipe_error_interrupt(pipe);
   9c46a:	f04f 0908 	mov.w	r9, #8
	uhd_disable_nak_received_interrupt(pipe);
   9c46e:	2510      	movs	r5, #16
	uhd_disable_in_received_interrupt(pipe);
   9c470:	f04f 0c01 	mov.w	ip, #1
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c474:	fa97 fba7 	rbit	fp, r7
   9c478:	fa00 f208 	lsl.w	r2, r0, r8
   9c47c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   9c480:	f502 222c 	add.w	r2, r2, #704512	; 0xac000
	uhd_enable_pipe_bank_autoswitch(pipe);
   9c484:	f8d2 4500 	ldr.w	r4, [r2, #1280]	; 0x500
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c488:	fabb fb8b 	clz	fp, fp
	uhd_enable_pipe_bank_autoswitch(pipe);
   9c48c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   9c490:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c494:	4c2a      	ldr	r4, [pc, #168]	; (9c540 <uhd_ep_abort_pipe+0x144>)
	uhd_enable_stall_interrupt(pipe);
   9c496:	f8c2 a5f0 	str.w	sl, [r2, #1520]	; 0x5f0
	uhd_enable_pipe_error_interrupt(pipe);
   9c49a:	f8c2 95f0 	str.w	r9, [r2, #1520]	; 0x5f0
	uhd_disable_out_ready_interrupt(pipe);
   9c49e:	f8c2 8620 	str.w	r8, [r2, #1568]	; 0x620
	uhd_disable_in_received_interrupt(pipe);
   9c4a2:	f8c2 c620 	str.w	ip, [r2, #1568]	; 0x620
	uhd_disable_nak_received_interrupt(pipe);
   9c4a6:	f8c2 5620 	str.w	r5, [r2, #1568]	; 0x620
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c4aa:	fa20 f508 	lsr.w	r5, r0, r8
   9c4ae:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9c4b2:	f8d2 4500 	ldr.w	r4, [r2, #1280]	; 0x500
   9c4b6:	f404 7440 	and.w	r4, r4, #768	; 0x300
   9c4ba:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   9c4be:	f8d2 4500 	ldr.w	r4, [r2, #1280]	; 0x500
   9c4c2:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9c4c6:	bf08      	it	eq
   9c4c8:	f044 0480 	orreq.w	r4, r4, #128	; 0x80

	if (status == UHD_TRANS_DISCONNECT) {
   9c4cc:	2901      	cmp	r1, #1
   9c4ce:	d021      	beq.n	9c514 <uhd_ep_abort_pipe+0x118>
		uhd_unallocate_memory(pipe);
	}

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
	if (ptr_job->busy == false) {
   9c4d0:	4433      	add	r3, r6
   9c4d2:	009b      	lsls	r3, r3, #2
   9c4d4:	eb0e 0203 	add.w	r2, lr, r3
   9c4d8:	7c90      	ldrb	r0, [r2, #18]
   9c4da:	07c0      	lsls	r0, r0, #31
   9c4dc:	d514      	bpl.n	9c508 <uhd_ep_abort_pipe+0x10c>
		return; // No job running
	}
	ptr_job->busy = false;
   9c4de:	f892 c012 	ldrb.w	ip, [r2, #18]
	if (NULL == ptr_job->call_end) {
   9c4e2:	f85e 6003 	ldr.w	r6, [lr, r3]
	ptr_job->busy = false;
   9c4e6:	f36f 0c00 	bfc	ip, #0, #1
   9c4ea:	f882 c012 	strb.w	ip, [r2, #18]
	if (NULL == ptr_job->call_end) {
   9c4ee:	b15e      	cbz	r6, 9c508 <uhd_ep_abort_pipe+0x10c>
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c4f0:	402f      	ands	r7, r5
   9c4f2:	fa27 fb0b 	lsr.w	fp, r7, fp
		return; // No callback linked to job
	}
	ptr_job->call_end(dev_addr, dev_ep, status, ptr_job->nb_trans);
   9c4f6:	fa5f f08b 	uxtb.w	r0, fp
   9c4fa:	68d3      	ldr	r3, [r2, #12]
   9c4fc:	46b4      	mov	ip, r6
   9c4fe:	460a      	mov	r2, r1
   9c500:	4621      	mov	r1, r4
}
   9c502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ptr_job->call_end(dev_addr, dev_ep, status, ptr_job->nb_trans);
   9c506:	4760      	bx	ip
   9c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9c50c:	f8df e034 	ldr.w	lr, [pc, #52]	; 9c544 <uhd_ep_abort_pipe+0x148>
   9c510:	00b3      	lsls	r3, r6, #2
   9c512:	e792      	b.n	9c43a <uhd_ep_abort_pipe+0x3e>
		uhd_disable_pipe(pipe);
   9c514:	f8df 8020 	ldr.w	r8, [pc, #32]	; 9c538 <uhd_ep_abort_pipe+0x13c>
   9c518:	fa01 f000 	lsl.w	r0, r1, r0
   9c51c:	f8d8 c41c 	ldr.w	ip, [r8, #1052]	; 0x41c
   9c520:	ea2c 0000 	bic.w	r0, ip, r0
   9c524:	f8c8 041c 	str.w	r0, [r8, #1052]	; 0x41c
		uhd_unallocate_memory(pipe);
   9c528:	f8d2 0500 	ldr.w	r0, [r2, #1280]	; 0x500
   9c52c:	f020 0002 	bic.w	r0, r0, #2
   9c530:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   9c534:	e7cc      	b.n	9c4d0 <uhd_ep_abort_pipe+0xd4>
   9c536:	bf00      	nop
   9c538:	400ac000 	.word	0x400ac000
   9c53c:	400ac700 	.word	0x400ac700
   9c540:	400ac424 	.word	0x400ac424
   9c544:	20072d44 	.word	0x20072d44

0009c548 <uhd_pipe_in_received>:
{
   9c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uhd_pipe_job_t *ptr_job = &uhd_pipe_job[pipe - 1];
   9c54c:	1e42      	subs	r2, r0, #1
	if (!ptr_job->busy) {
   9c54e:	4b9f      	ldr	r3, [pc, #636]	; (9c7cc <uhd_pipe_in_received+0x284>)
   9c550:	0095      	lsls	r5, r2, #2
   9c552:	18ae      	adds	r6, r5, r2
   9c554:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   9c558:	7cb7      	ldrb	r7, [r6, #18]
   9c55a:	0083      	lsls	r3, r0, #2
   9c55c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   9c560:	f503 232c 	add.w	r3, r3, #704512	; 0xac000
   9c564:	07ff      	lsls	r7, r7, #31
{
   9c566:	b085      	sub	sp, #20
	uint32_t pkt_size = uhd_get_pipe_size(pipe);
   9c568:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
	if (!ptr_job->busy) {
   9c56c:	f140 80f4 	bpl.w	9c758 <uhd_pipe_in_received+0x210>
	uint32_t pkt_size = uhd_get_pipe_size(pipe);
   9c570:	2708      	movs	r7, #8
	nb_data = uhd_byte_count(pipe);
   9c572:	f8d3 e530 	ldr.w	lr, [r3, #1328]	; 0x530
	uint32_t pkt_size = uhd_get_pipe_size(pipe);
   9c576:	f3c1 1102 	ubfx	r1, r1, #4, #3
   9c57a:	fa07 f101 	lsl.w	r1, r7, r1
	nb_data = uhd_byte_count(pipe);
   9c57e:	f3ce 5e0a 	ubfx	lr, lr, #20, #11
	if (nb_data < pkt_size) {
   9c582:	4571      	cmp	r1, lr
   9c584:	d960      	bls.n	9c648 <uhd_pipe_in_received+0x100>
	if (nb_data > 0) {
   9c586:	f1be 0f00 	cmp.w	lr, #0
   9c58a:	f040 8106 	bne.w	9c79a <uhd_pipe_in_received+0x252>
	uhd_ack_fifocon(pipe);
   9c58e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   9c592:	f8c3 1620 	str.w	r1, [r3, #1568]	; 0x620
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c596:	277f      	movs	r7, #127	; 0x7f
		uhd_disable_short_packet_interrupt(pipe);
   9c598:	f04f 0c80 	mov.w	ip, #128	; 0x80
		uhd_freeze_pipe(pipe);
   9c59c:	f44f 3900 	mov.w	r9, #131072	; 0x20000
		uhd_disable_nak_received_interrupt(pipe);
   9c5a0:	f04f 0810 	mov.w	r8, #16
		uhd_disable_pipe_interrupt(pipe);
   9c5a4:	f44f 7180 	mov.w	r1, #256	; 0x100
		uhd_disable_in_received_interrupt(pipe);
   9c5a8:	f04f 0e01 	mov.w	lr, #1
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c5ac:	00c6      	lsls	r6, r0, #3
   9c5ae:	f006 0618 	and.w	r6, r6, #24
   9c5b2:	fa07 f606 	lsl.w	r6, r7, r6
   9c5b6:	fa96 f7a6 	rbit	r7, r6
		uhd_freeze_pipe(pipe);
   9c5ba:	f8c3 95f0 	str.w	r9, [r3, #1520]	; 0x5f0
		uhd_disable_nak_received_interrupt(pipe);
   9c5be:	f8c3 8620 	str.w	r8, [r3, #1568]	; 0x620
		uhd_disable_short_packet_interrupt(pipe);
   9c5c2:	f8c3 c620 	str.w	ip, [r3, #1568]	; 0x620
		uhd_disable_pipe_interrupt(pipe);
   9c5c6:	f8df c20c 	ldr.w	ip, [pc, #524]	; 9c7d4 <uhd_pipe_in_received+0x28c>
   9c5ca:	4081      	lsls	r1, r0
		uhd_disable_in_received_interrupt(pipe);
   9c5cc:	f8c3 e620 	str.w	lr, [r3, #1568]	; 0x620
		uhd_disable_pipe_interrupt(pipe);
   9c5d0:	f8cc 1414 	str.w	r1, [ip, #1044]	; 0x414
		uhd_disable_continuous_in_mode(pipe);
   9c5d4:	f8d3 1650 	ldr.w	r1, [r3, #1616]	; 0x650
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c5d8:	ea4f 0e90 	mov.w	lr, r0, lsr #2
		uhd_disable_continuous_in_mode(pipe);
   9c5dc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c5e0:	487b      	ldr	r0, [pc, #492]	; (9c7d0 <uhd_pipe_in_received+0x288>)
		uhd_disable_continuous_in_mode(pipe);
   9c5e2:	f8c3 1650 	str.w	r1, [r3, #1616]	; 0x650
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c5e6:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9c5ea:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
	if (ptr_job->busy == false) {
   9c5ee:	442a      	add	r2, r5
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9c5f0:	f401 7140 	and.w	r1, r1, #768	; 0x300
   9c5f4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   9c5f8:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
	if (ptr_job->busy == false) {
   9c5fc:	4b73      	ldr	r3, [pc, #460]	; (9c7cc <uhd_pipe_in_received+0x284>)
   9c5fe:	ea4f 0282 	mov.w	r2, r2, lsl #2
   9c602:	4413      	add	r3, r2
   9c604:	7c9d      	ldrb	r5, [r3, #18]
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9c606:	f3c1 4103 	ubfx	r1, r1, #16, #4
   9c60a:	bf08      	it	eq
   9c60c:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
	if (ptr_job->busy == false) {
   9c610:	07ec      	lsls	r4, r5, #31
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c612:	fab7 f787 	clz	r7, r7
	if (ptr_job->busy == false) {
   9c616:	f140 809f 	bpl.w	9c758 <uhd_pipe_in_received+0x210>
	ptr_job->busy = false;
   9c61a:	f103 0510 	add.w	r5, r3, #16
	if (NULL == ptr_job->call_end) {
   9c61e:	4c6b      	ldr	r4, [pc, #428]	; (9c7cc <uhd_pipe_in_received+0x284>)
	ptr_job->busy = false;
   9c620:	f895 e002 	ldrb.w	lr, [r5, #2]
	if (NULL == ptr_job->call_end) {
   9c624:	58a4      	ldr	r4, [r4, r2]
	ptr_job->busy = false;
   9c626:	f36f 0e00 	bfc	lr, #0, #1
   9c62a:	f885 e002 	strb.w	lr, [r5, #2]
	if (NULL == ptr_job->call_end) {
   9c62e:	2c00      	cmp	r4, #0
   9c630:	f000 8092 	beq.w	9c758 <uhd_pipe_in_received+0x210>
	ptr_job->call_end(dev_addr, dev_ep, status, ptr_job->nb_trans);
   9c634:	2200      	movs	r2, #0
   9c636:	46a4      	mov	ip, r4
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c638:	4030      	ands	r0, r6
   9c63a:	40f8      	lsrs	r0, r7
	ptr_job->call_end(dev_addr, dev_ep, status, ptr_job->nb_trans);
   9c63c:	68db      	ldr	r3, [r3, #12]
   9c63e:	b2c0      	uxtb	r0, r0
}
   9c640:	b005      	add	sp, #20
   9c642:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ptr_job->call_end(dev_addr, dev_ep, status, ptr_job->nb_trans);
   9c646:	4760      	bx	ip
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->nb_trans;
   9c648:	f8d6 c008 	ldr.w	ip, [r6, #8]
   9c64c:	68f7      	ldr	r7, [r6, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->nb_trans];
   9c64e:	f8d6 b004 	ldr.w	fp, [r6, #4]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->nb_trans;
   9c652:	ebac 0107 	sub.w	r1, ip, r7
		if (nb_data >= nb_remain) {
   9c656:	4571      	cmp	r1, lr
   9c658:	f240 8081 	bls.w	9c75e <uhd_pipe_in_received+0x216>
	bool b_full = false, b_short = false;
   9c65c:	2100      	movs	r1, #0
   9c65e:	460c      	mov	r4, r1
   9c660:	9102      	str	r1, [sp, #8]
		ptr_job->nb_trans += nb_data;
   9c662:	eb07 010e 	add.w	r1, r7, lr
   9c666:	60f1      	str	r1, [r6, #12]
   9c668:	4671      	mov	r1, lr
	bool b_full = false, b_short = false;
   9c66a:	9401      	str	r4, [sp, #4]
	uint8_t *ptr_src = (uint8_t *) & uhd_get_pipe_fifo_access(pipe, 8);
   9c66c:	03c6      	lsls	r6, r0, #15
   9c66e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9c7d8 <uhd_pipe_in_received+0x290>
   9c672:	f106 5a00 	add.w	sl, r6, #536870912	; 0x20000000
   9c676:	f107 0e04 	add.w	lr, r7, #4
   9c67a:	44b0      	add	r8, r6
   9c67c:	44de      	add	lr, fp
   9c67e:	f50a 16c0 	add.w	r6, sl, #1572864	; 0x180000
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->nb_trans];
   9c682:	eb0b 0c07 	add.w	ip, fp, r7
   9c686:	45c4      	cmp	ip, r8
   9c688:	bf38      	it	cc
   9c68a:	4576      	cmpcc	r6, lr
   9c68c:	d379      	bcc.n	9c782 <uhd_pipe_in_received+0x23a>
   9c68e:	290b      	cmp	r1, #11
   9c690:	d977      	bls.n	9c782 <uhd_pipe_in_received+0x23a>
   9c692:	f04f 0e00 	mov.w	lr, #0
   9c696:	4571      	cmp	r1, lr
   9c698:	bf14      	ite	ne
   9c69a:	4689      	movne	r9, r1
   9c69c:	f04f 0901 	moveq.w	r9, #1
   9c6a0:	f1be 0f00 	cmp.w	lr, #0
   9c6a4:	d069      	beq.n	9c77a <uhd_pipe_in_received+0x232>
			*ptr_dst++ = *ptr_src++;
   9c6a6:	f896 8000 	ldrb.w	r8, [r6]
   9c6aa:	f10c 0402 	add.w	r4, ip, #2
   9c6ae:	f88c 8000 	strb.w	r8, [ip]
   9c6b2:	f896 8001 	ldrb.w	r8, [r6, #1]
   9c6b6:	45f1      	cmp	r9, lr
   9c6b8:	f88c 8001 	strb.w	r8, [ip, #1]
   9c6bc:	9400      	str	r4, [sp, #0]
   9c6be:	f106 0602 	add.w	r6, r6, #2
		for (i = 0; i < nb_data; i++) {
   9c6c2:	f04f 0c02 	mov.w	ip, #2
   9c6c6:	d03b      	beq.n	9c740 <uhd_pipe_in_received+0x1f8>
   9c6c8:	2900      	cmp	r1, #0
   9c6ca:	f101 38ff 	add.w	r8, r1, #4294967295
   9c6ce:	bf08      	it	eq
   9c6d0:	f04f 0800 	moveq.w	r8, #0
   9c6d4:	eba9 040e 	sub.w	r4, r9, lr
   9c6d8:	f1a4 0e04 	sub.w	lr, r4, #4
   9c6dc:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
   9c6e0:	f10e 0e01 	add.w	lr, lr, #1
   9c6e4:	f1b8 0f02 	cmp.w	r8, #2
   9c6e8:	9403      	str	r4, [sp, #12]
   9c6ea:	ea4f 098e 	mov.w	r9, lr, lsl #2
   9c6ee:	d916      	bls.n	9c71e <uhd_pipe_in_received+0x1d6>
   9c6f0:	445f      	add	r7, fp
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->nb_trans];
   9c6f2:	f04f 0800 	mov.w	r8, #0
   9c6f6:	469b      	mov	fp, r3
   9c6f8:	f50a 1ac0 	add.w	sl, sl, #1572864	; 0x180000
			*ptr_dst++ = *ptr_src++;
   9c6fc:	f85a 3b04 	ldr.w	r3, [sl], #4
   9c700:	f108 0801 	add.w	r8, r8, #1
   9c704:	45c6      	cmp	lr, r8
   9c706:	f847 3b04 	str.w	r3, [r7], #4
   9c70a:	d8f7      	bhi.n	9c6fc <uhd_pipe_in_received+0x1b4>
   9c70c:	9c00      	ldr	r4, [sp, #0]
   9c70e:	465b      	mov	r3, fp
   9c710:	444c      	add	r4, r9
   9c712:	9400      	str	r4, [sp, #0]
   9c714:	9c03      	ldr	r4, [sp, #12]
   9c716:	44cc      	add	ip, r9
   9c718:	454c      	cmp	r4, r9
   9c71a:	444e      	add	r6, r9
   9c71c:	d010      	beq.n	9c740 <uhd_pipe_in_received+0x1f8>
   9c71e:	f896 e000 	ldrb.w	lr, [r6]
		for (i = 0; i < nb_data; i++) {
   9c722:	f10c 0701 	add.w	r7, ip, #1
			*ptr_dst++ = *ptr_src++;
   9c726:	9c00      	ldr	r4, [sp, #0]
		for (i = 0; i < nb_data; i++) {
   9c728:	42b9      	cmp	r1, r7
			*ptr_dst++ = *ptr_src++;
   9c72a:	f884 e000 	strb.w	lr, [r4]
		for (i = 0; i < nb_data; i++) {
   9c72e:	d907      	bls.n	9c740 <uhd_pipe_in_received+0x1f8>
			*ptr_dst++ = *ptr_src++;
   9c730:	7877      	ldrb	r7, [r6, #1]
		for (i = 0; i < nb_data; i++) {
   9c732:	f10c 0c02 	add.w	ip, ip, #2
   9c736:	4561      	cmp	r1, ip
			*ptr_dst++ = *ptr_src++;
   9c738:	7067      	strb	r7, [r4, #1]
		for (i = 0; i < nb_data; i++) {
   9c73a:	d901      	bls.n	9c740 <uhd_pipe_in_received+0x1f8>
			*ptr_dst++ = *ptr_src++;
   9c73c:	78b1      	ldrb	r1, [r6, #2]
   9c73e:	70a1      	strb	r1, [r4, #2]
	uhd_ack_fifocon(pipe);
   9c740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   9c744:	f8c3 1620 	str.w	r1, [r3, #1568]	; 0x620
	if (b_full || b_short) {
   9c748:	9901      	ldr	r1, [sp, #4]
   9c74a:	2900      	cmp	r1, #0
   9c74c:	f47f af23 	bne.w	9c596 <uhd_pipe_in_received+0x4e>
   9c750:	9902      	ldr	r1, [sp, #8]
   9c752:	2900      	cmp	r1, #0
   9c754:	f47f af1f 	bne.w	9c596 <uhd_pipe_in_received+0x4e>
}
   9c758:	b005      	add	sp, #20
   9c75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool b_full = false, b_short = false;
   9c75e:	2400      	movs	r4, #0
   9c760:	9402      	str	r4, [sp, #8]
		ptr_job->nb_trans += nb_data;
   9c762:	4c1a      	ldr	r4, [pc, #104]	; (9c7cc <uhd_pipe_in_received+0x284>)
   9c764:	18ae      	adds	r6, r5, r2
   9c766:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   9c76a:	f8c6 c00c 	str.w	ip, [r6, #12]
		for (i = 0; i < nb_data; i++) {
   9c76e:	2900      	cmp	r1, #0
   9c770:	f43f af0d 	beq.w	9c58e <uhd_pipe_in_received+0x46>
			b_full = true;
   9c774:	2401      	movs	r4, #1
   9c776:	9401      	str	r4, [sp, #4]
   9c778:	e778      	b.n	9c66c <uhd_pipe_in_received+0x124>
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->nb_trans];
   9c77a:	f8cd c000 	str.w	ip, [sp]
   9c77e:	46f4      	mov	ip, lr
   9c780:	e7a2      	b.n	9c6c8 <uhd_pipe_in_received+0x180>
	uint8_t *ptr_src = (uint8_t *) & uhd_get_pipe_fifo_access(pipe, 8);
   9c782:	4637      	mov	r7, r6
   9c784:	f10c 3cff 	add.w	ip, ip, #4294967295
			*ptr_dst++ = *ptr_src++;
   9c788:	f817 8b01 	ldrb.w	r8, [r7], #1
		for (i = 0; i < nb_data; i++) {
   9c78c:	eba7 0e06 	sub.w	lr, r7, r6
   9c790:	4571      	cmp	r1, lr
			*ptr_dst++ = *ptr_src++;
   9c792:	f80c 8f01 	strb.w	r8, [ip, #1]!
		for (i = 0; i < nb_data; i++) {
   9c796:	d8f7      	bhi.n	9c788 <uhd_pipe_in_received+0x240>
   9c798:	e7d2      	b.n	9c740 <uhd_pipe_in_received+0x1f8>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->nb_trans;
   9c79a:	2614      	movs	r6, #20
   9c79c:	490b      	ldr	r1, [pc, #44]	; (9c7cc <uhd_pipe_in_received+0x284>)
   9c79e:	fb06 1602 	mla	r6, r6, r2, r1
   9c7a2:	f8d6 c008 	ldr.w	ip, [r6, #8]
   9c7a6:	68f7      	ldr	r7, [r6, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->nb_trans];
   9c7a8:	f8d6 b004 	ldr.w	fp, [r6, #4]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->nb_trans;
   9c7ac:	ebac 0107 	sub.w	r1, ip, r7
		if (nb_data >= nb_remain) {
   9c7b0:	458e      	cmp	lr, r1
   9c7b2:	d302      	bcc.n	9c7ba <uhd_pipe_in_received+0x272>
		b_short = true;
   9c7b4:	2401      	movs	r4, #1
   9c7b6:	9402      	str	r4, [sp, #8]
   9c7b8:	e7d3      	b.n	9c762 <uhd_pipe_in_received+0x21a>
   9c7ba:	2401      	movs	r4, #1
   9c7bc:	9402      	str	r4, [sp, #8]
	bool b_full = false, b_short = false;
   9c7be:	2400      	movs	r4, #0
		ptr_job->nb_trans += nb_data;
   9c7c0:	eb0e 0107 	add.w	r1, lr, r7
   9c7c4:	60f1      	str	r1, [r6, #12]
	bool b_full = false, b_short = false;
   9c7c6:	9401      	str	r4, [sp, #4]
		ptr_job->nb_trans += nb_data;
   9c7c8:	4671      	mov	r1, lr
   9c7ca:	e74f      	b.n	9c66c <uhd_pipe_in_received+0x124>
   9c7cc:	20072d44 	.word	0x20072d44
   9c7d0:	400ac424 	.word	0x400ac424
   9c7d4:	400ac000 	.word	0x400ac000
   9c7d8:	20180004 	.word	0x20180004

0009c7dc <uhd_pipe_trans_complet>:
{
   9c7dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ptr_job = &uhd_pipe_job[pipe - 1];
   9c7e0:	1e44      	subs	r4, r0, #1
	if (!ptr_job->busy) {
   9c7e2:	00a2      	lsls	r2, r4, #2
   9c7e4:	4d90      	ldr	r5, [pc, #576]	; (9ca28 <uhd_pipe_trans_complet+0x24c>)
   9c7e6:	1913      	adds	r3, r2, r4
   9c7e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   9c7ec:	7c9f      	ldrb	r7, [r3, #18]
{
   9c7ee:	b083      	sub	sp, #12
	if (!ptr_job->busy) {
   9c7f0:	07fe      	lsls	r6, r7, #31
   9c7f2:	d56f      	bpl.n	9c8d4 <uhd_pipe_trans_complet+0xf8>
	if (ptr_job->nb_trans != ptr_job->buf_size) {
   9c7f4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   9c7f8:	689e      	ldr	r6, [r3, #8]
   9c7fa:	0081      	lsls	r1, r0, #2
   9c7fc:	45b4      	cmp	ip, r6
   9c7fe:	d07a      	beq.n	9c8f6 <uhd_pipe_trans_complet+0x11a>
   9c800:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   9c804:	f503 232c 	add.w	r3, r3, #704512	; 0xac000
		if (Is_uhd_pipe_in(pipe)) {
   9c808:	f8d3 7500 	ldr.w	r7, [r3, #1280]	; 0x500
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
   9c80c:	eba6 060c 	sub.w	r6, r6, ip
		if (Is_uhd_pipe_in(pipe)) {
   9c810:	f407 7740 	and.w	r7, r7, #768	; 0x300
   9c814:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   9c818:	f000 80e1 	beq.w	9c9de <uhd_pipe_trans_complet+0x202>
		max_trans = UHD_PIPE_MAX_TRANS;
   9c81c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   9c820:	42be      	cmp	r6, r7
   9c822:	bf28      	it	cs
   9c824:	463e      	movcs	r6, r7
		if (uhd_is_pipe_out(pipe)) {
   9c826:	f8d3 7500 	ldr.w	r7, [r3, #1280]	; 0x500
		if (next_trans == UHD_PIPE_MAX_TRANS) {
   9c82a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
		if (uhd_is_pipe_out(pipe)) {
   9c82e:	f407 7740 	and.w	r7, r7, #768	; 0x300
			uhd_dma_ctrl = UOTGHS_HSTDMACONTROL_BUFF_LENGTH(next_trans);
   9c832:	bf14      	ite	ne
   9c834:	ea4f 4806 	movne.w	r8, r6, lsl #16
			uhd_dma_ctrl = UOTGHS_HSTDMACONTROL_BUFF_LENGTH(0);
   9c838:	f04f 0800 	moveq.w	r8, #0
		if (uhd_is_pipe_out(pipe)) {
   9c83c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   9c840:	f000 80b6 	beq.w	9c9b0 <uhd_pipe_trans_complet+0x1d4>
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
   9c844:	f8d3 7500 	ldr.w	r7, [r3, #1280]	; 0x500
				uhd_dma_ctrl |= UOTGHS_HSTDMACONTROL_END_TR_IT
   9c848:	f048 0814 	orr.w	r8, r8, #20
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
   9c84c:	1917      	adds	r7, r2, r4
   9c84e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
   9c852:	687f      	ldr	r7, [r7, #4]
   9c854:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 9ca38 <uhd_pipe_trans_complet+0x25c>
   9c858:	4467      	add	r7, ip
   9c85a:	eb0e 1e00 	add.w	lr, lr, r0, lsl #4
   9c85e:	f8ce 7004 	str.w	r7, [lr, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9c862:	f3ef 8710 	mrs	r7, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9c866:	fab7 f787 	clz	r7, r7
   9c86a:	097f      	lsrs	r7, r7, #5
   9c86c:	9701      	str	r7, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   9c86e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9c870:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9c874:	f04f 0c00 	mov.w	ip, #0
   9c878:	4f6c      	ldr	r7, [pc, #432]	; (9ca2c <uhd_pipe_trans_complet+0x250>)
   9c87a:	f887 c000 	strb.w	ip, [r7]
	return flags;
   9c87e:	f8dd 9004 	ldr.w	r9, [sp, #4]
		if (!(uhd_pipe_dma_get_status(pipe)
   9c882:	f8de c00c 	ldr.w	ip, [lr, #12]
   9c886:	f01c 0f10 	tst.w	ip, #16
   9c88a:	d126      	bne.n	9c8da <uhd_pipe_trans_complet+0xfe>
			if (Is_uhd_pipe_in(pipe)) {
   9c88c:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
   9c890:	f401 7140 	and.w	r1, r1, #768	; 0x300
   9c894:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   9c898:	d074      	beq.n	9c984 <uhd_pipe_trans_complet+0x1a8>
			if (!ptr_job->b_periodic_start) {
   9c89a:	4422      	add	r2, r4
   9c89c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
   9c8a0:	7caa      	ldrb	r2, [r5, #18]
   9c8a2:	0751      	lsls	r1, r2, #29
   9c8a4:	d469      	bmi.n	9c97a <uhd_pipe_trans_complet+0x19e>
					uhd_disable_bank_interrupt(pipe);
   9c8a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
					uhd_unfreeze_pipe(pipe);
   9c8aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
					uhd_disable_bank_interrupt(pipe);
   9c8ae:	f8c3 1620 	str.w	r1, [r3, #1568]	; 0x620
					uhd_unfreeze_pipe(pipe);
   9c8b2:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
			uhd_pipes_dma_nb_trans[pipe - 1] = next_trans;
   9c8b6:	4a5e      	ldr	r2, [pc, #376]	; (9ca30 <uhd_pipe_trans_complet+0x254>)
		uhd_dma_ctrl |= UOTGHS_HSTDMACONTROL_END_BUFFIT |
   9c8b8:	f048 0321 	orr.w	r3, r8, #33	; 0x21
			uhd_pipe_dma_set_control(pipe, uhd_dma_ctrl);
   9c8bc:	f8ce 3008 	str.w	r3, [lr, #8]
			uhd_pipes_dma_nb_trans[pipe - 1] = next_trans;
   9c8c0:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
   9c8c4:	f1b9 0f00 	cmp.w	r9, #0
   9c8c8:	d004      	beq.n	9c8d4 <uhd_pipe_trans_complet+0xf8>
		cpu_irq_enable();
   9c8ca:	2301      	movs	r3, #1
   9c8cc:	703b      	strb	r3, [r7, #0]
   9c8ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9c8d2:	b662      	cpsie	i
}
   9c8d4:	b003      	add	sp, #12
   9c8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cpu_irq_is_enabled_flags(flags))
   9c8da:	f1b9 0f00 	cmp.w	r9, #0
   9c8de:	d004      	beq.n	9c8ea <uhd_pipe_trans_complet+0x10e>
		cpu_irq_enable();
   9c8e0:	2301      	movs	r3, #1
   9c8e2:	703b      	strb	r3, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   9c8e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9c8e8:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->nb_trans;
   9c8ea:	1913      	adds	r3, r2, r4
   9c8ec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   9c8f0:	68de      	ldr	r6, [r3, #12]
   9c8f2:	7c9f      	ldrb	r7, [r3, #18]
   9c8f4:	609e      	str	r6, [r3, #8]
   9c8f6:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   9c8fa:	f503 232c 	add.w	r3, r3, #704512	; 0xac000
	if (uhd_is_pipe_out(pipe)) {
   9c8fe:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
   9c902:	f401 7140 	and.w	r1, r1, #768	; 0x300
   9c906:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   9c90a:	d07d      	beq.n	9ca08 <uhd_pipe_trans_complet+0x22c>
		uhd_disable_nak_received_interrupt(pipe);
   9c90c:	2110      	movs	r1, #16
   9c90e:	f8c3 1620 	str.w	r1, [r3, #1568]	; 0x620
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c912:	267f      	movs	r6, #127	; 0x7f
   9c914:	00c1      	lsls	r1, r0, #3
   9c916:	f001 0118 	and.w	r1, r1, #24
   9c91a:	408e      	lsls	r6, r1
   9c91c:	fa96 fea6 	rbit	lr, r6
   9c920:	4944      	ldr	r1, [pc, #272]	; (9ca34 <uhd_pipe_trans_complet+0x258>)
   9c922:	0880      	lsrs	r0, r0, #2
   9c924:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9c928:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c92c:	fabe fe8e 	clz	lr, lr
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9c930:	f401 7140 	and.w	r1, r1, #768	; 0x300
   9c934:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   9c938:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
   9c93c:	f3c1 4103 	ubfx	r1, r1, #16, #4
   9c940:	bf08      	it	eq
   9c942:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
	if (ptr_job->busy == false) {
   9c946:	07fb      	lsls	r3, r7, #31
   9c948:	d5c4      	bpl.n	9c8d4 <uhd_pipe_trans_complet+0xf8>
	ptr_job->busy = false;
   9c94a:	4422      	add	r2, r4
   9c94c:	0092      	lsls	r2, r2, #2
   9c94e:	eb05 0c02 	add.w	ip, r5, r2
   9c952:	f89c 7012 	ldrb.w	r7, [ip, #18]
	if (NULL == ptr_job->call_end) {
   9c956:	58ac      	ldr	r4, [r5, r2]
	ptr_job->busy = false;
   9c958:	f36f 0700 	bfc	r7, #0, #1
   9c95c:	f88c 7012 	strb.w	r7, [ip, #18]
	if (NULL == ptr_job->call_end) {
   9c960:	2c00      	cmp	r4, #0
   9c962:	d0b7      	beq.n	9c8d4 <uhd_pipe_trans_complet+0xf8>
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9c964:	4006      	ands	r6, r0
   9c966:	fa26 f00e 	lsr.w	r0, r6, lr
	ptr_job->call_end(dev_addr, dev_ep, status, ptr_job->nb_trans);
   9c96a:	b2c0      	uxtb	r0, r0
   9c96c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   9c970:	2200      	movs	r2, #0
   9c972:	47a0      	blx	r4
}
   9c974:	b003      	add	sp, #12
   9c976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				if (Is_uhd_bank_interrupt_enabled(pipe)) {
   9c97a:	f8d3 25c0 	ldr.w	r2, [r3, #1472]	; 0x5c0
   9c97e:	04d2      	lsls	r2, r2, #19
   9c980:	d599      	bpl.n	9c8b6 <uhd_pipe_trans_complet+0xda>
   9c982:	e790      	b.n	9c8a6 <uhd_pipe_trans_complet+0xca>
				uint32_t pipe_size = uhd_get_pipe_size(pipe);
   9c984:	2108      	movs	r1, #8
   9c986:	f8d3 c500 	ldr.w	ip, [r3, #1280]	; 0x500
				uhd_in_request_number(pipe,
   9c98a:	f8d3 0650 	ldr.w	r0, [r3, #1616]	; 0x650
				uint32_t pipe_size = uhd_get_pipe_size(pipe);
   9c98e:	f3cc 1c02 	ubfx	ip, ip, #4, #3
   9c992:	fa01 fc0c 	lsl.w	ip, r1, ip
				uhd_in_request_number(pipe,
   9c996:	f10c 31ff 	add.w	r1, ip, #4294967295
   9c99a:	4431      	add	r1, r6
   9c99c:	fbb1 f1fc 	udiv	r1, r1, ip
   9c9a0:	3901      	subs	r1, #1
   9c9a2:	b2c9      	uxtb	r1, r1
   9c9a4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   9c9a8:	4301      	orrs	r1, r0
   9c9aa:	f8c3 1650 	str.w	r1, [r3, #1616]	; 0x650
   9c9ae:	e774      	b.n	9c89a <uhd_pipe_trans_complet+0xbe>
			if (0 != (next_trans % uhd_get_pipe_size(pipe))) {
   9c9b0:	2708      	movs	r7, #8
   9c9b2:	f8d3 e500 	ldr.w	lr, [r3, #1280]	; 0x500
   9c9b6:	f3ce 1e02 	ubfx	lr, lr, #4, #3
   9c9ba:	fa07 f70e 	lsl.w	r7, r7, lr
   9c9be:	3f01      	subs	r7, #1
   9c9c0:	4237      	tst	r7, r6
   9c9c2:	f43f af43 	beq.w	9c84c <uhd_pipe_trans_complet+0x70>
				ptr_job->b_shortpacket = false;
   9c9c6:	1917      	adds	r7, r2, r4
   9c9c8:	eb05 0787 	add.w	r7, r5, r7, lsl #2
   9c9cc:	f897 e012 	ldrb.w	lr, [r7, #18]
				uhd_dma_ctrl |= UOTGHS_HSTDMACONTROL_END_B_EN;
   9c9d0:	f048 0808 	orr.w	r8, r8, #8
				ptr_job->b_shortpacket = false;
   9c9d4:	f36f 0e41 	bfc	lr, #1, #1
   9c9d8:	f887 e012 	strb.w	lr, [r7, #18]
   9c9dc:	e736      	b.n	9c84c <uhd_pipe_trans_complet+0x70>
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
   9c9de:	2708      	movs	r7, #8
   9c9e0:	f8d3 e500 	ldr.w	lr, [r3, #1280]	; 0x500
   9c9e4:	f3ce 1e02 	ubfx	lr, lr, #4, #3
   9c9e8:	fa07 fe0e 	lsl.w	lr, r7, lr
   9c9ec:	fa0e fe07 	lsl.w	lr, lr, r7
   9c9f0:	f5be 4f00 	cmp.w	lr, #32768	; 0x8000
   9c9f4:	f6bf af12 	bge.w	9c81c <uhd_pipe_trans_complet+0x40>
				max_trans = 256L * uhd_get_pipe_size(pipe);
   9c9f8:	f8d3 e500 	ldr.w	lr, [r3, #1280]	; 0x500
   9c9fc:	f3ce 1e02 	ubfx	lr, lr, #4, #3
   9ca00:	fa07 f70e 	lsl.w	r7, r7, lr
   9ca04:	023f      	lsls	r7, r7, #8
   9ca06:	e70b      	b.n	9c820 <uhd_pipe_trans_complet+0x44>
		if (ptr_job->b_shortpacket) {
   9ca08:	07be      	lsls	r6, r7, #30
   9ca0a:	d582      	bpl.n	9c912 <uhd_pipe_trans_complet+0x136>
			uhd_ack_out_ready(pipe);
   9ca0c:	2202      	movs	r2, #2
   9ca0e:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
			if (Is_uhd_write_enabled(pipe)) {
   9ca12:	f8d3 1530 	ldr.w	r1, [r3, #1328]	; 0x530
   9ca16:	03c9      	lsls	r1, r1, #15
				uhd_raise_out_ready(pipe);
   9ca18:	bf48      	it	mi
   9ca1a:	f8c3 2590 	strmi.w	r2, [r3, #1424]	; 0x590
			uhd_enable_out_ready_interrupt(pipe);
   9ca1e:	2202      	movs	r2, #2
   9ca20:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			return;
   9ca24:	e756      	b.n	9c8d4 <uhd_pipe_trans_complet+0xf8>
   9ca26:	bf00      	nop
   9ca28:	20072d44 	.word	0x20072d44
   9ca2c:	2007026b 	.word	0x2007026b
   9ca30:	20072df8 	.word	0x20072df8
   9ca34:	400ac424 	.word	0x400ac424
   9ca38:	400ac700 	.word	0x400ac700

0009ca3c <UOTGHS_Handler>:
{
   9ca3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pmc_enable_periph_clk(ID_UOTGHS);
   9ca40:	4b7d      	ldr	r3, [pc, #500]	; (9cc38 <UOTGHS_Handler+0x1fc>)
{
   9ca42:	b08f      	sub	sp, #60	; 0x3c
	pmc_enable_periph_clk(ID_UOTGHS);
   9ca44:	2028      	movs	r0, #40	; 0x28
   9ca46:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_otg_a_suspend()) {
   9ca48:	4b7c      	ldr	r3, [pc, #496]	; (9cc3c <UOTGHS_Handler+0x200>)
   9ca4a:	4798      	blx	r3
   9ca4c:	b970      	cbnz	r0, 9ca6c <UOTGHS_Handler+0x30>
   9ca4e:	4b7c      	ldr	r3, [pc, #496]	; (9cc40 <UOTGHS_Handler+0x204>)
   9ca50:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
   9ca54:	f003 030f 	and.w	r3, r3, #15
   9ca58:	2b04      	cmp	r3, #4
   9ca5a:	d007      	beq.n	9ca6c <UOTGHS_Handler+0x30>
  __ASM volatile ("cpsid i" : : : "memory");
   9ca5c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9ca5e:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   9ca62:	4b78      	ldr	r3, [pc, #480]	; (9cc44 <UOTGHS_Handler+0x208>)
   9ca64:	7018      	strb	r0, [r3, #0]
}
   9ca66:	b00f      	add	sp, #60	; 0x3c
   9ca68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Is_otg_id_transition()) {
   9ca6c:	4a74      	ldr	r2, [pc, #464]	; (9cc40 <UOTGHS_Handler+0x204>)
   9ca6e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   9ca72:	07d8      	lsls	r0, r3, #31
   9ca74:	d406      	bmi.n	9ca84 <UOTGHS_Handler+0x48>
	b_mode_device = Is_otg_id_device();
   9ca76:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
	if (b_mode_device) {
   9ca7a:	055f      	lsls	r7, r3, #21
   9ca7c:	d524      	bpl.n	9cac8 <UOTGHS_Handler+0x8c>
}
   9ca7e:	b00f      	add	sp, #60	; 0x3c
   9ca80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (!Is_otg_clock_usable());
   9ca84:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   9ca88:	0459      	lsls	r1, r3, #17
   9ca8a:	d5fb      	bpl.n	9ca84 <UOTGHS_Handler+0x48>
		otg_ack_id_transition();
   9ca8c:	2101      	movs	r1, #1
		otg_unfreeze_clock();
   9ca8e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   9ca92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   9ca96:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		otg_ack_id_transition();
   9ca9a:	f8c2 1808 	str.w	r1, [r2, #2056]	; 0x808
		otg_freeze_clock();
   9ca9e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   9caa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   9caa6:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		if (Is_otg_id_device()) {
   9caaa:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   9caae:	055b      	lsls	r3, r3, #21
   9cab0:	d505      	bpl.n	9cabe <UOTGHS_Handler+0x82>
			uhc_stop(false);
   9cab2:	2000      	movs	r0, #0
   9cab4:	4b64      	ldr	r3, [pc, #400]	; (9cc48 <UOTGHS_Handler+0x20c>)
   9cab6:	4798      	blx	r3
}
   9cab8:	b00f      	add	sp, #60	; 0x3c
   9caba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uhc_start();
   9cabe:	4b63      	ldr	r3, [pc, #396]	; (9cc4c <UOTGHS_Handler+0x210>)
   9cac0:	4798      	blx	r3
}
   9cac2:	b00f      	add	sp, #60	; 0x3c
   9cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Is_uhd_sof()) {
   9cac8:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
   9cacc:	069e      	lsls	r6, r3, #26
   9cace:	f100 80cb 	bmi.w	9cc68 <UOTGHS_Handler+0x22c>
#define Is_uhd_pipe_interrupt_enabled(p)   (Tst_bits(UOTGHS->UOTGHS_HSTIMR, UOTGHS_HSTIMR_PEP_0 << (p)))
#define Is_uhd_pipe_interrupt(p)           (Tst_bits(UOTGHS->UOTGHS_HSTISR, UOTGHS_HSTISR_PEP_0 << (p)))
//! returns the lowest pipe number generating a pipe interrupt or UOTGHS_EPT_NUM if none
static inline uint8_t uhd_get_interrupt_pipe_number(void)
{
	uint32_t status = UOTGHS->UOTGHS_HSTISR;
   9cad2:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
	uint32_t mask = UOTGHS->UOTGHS_HSTIMR;
   9cad6:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
	return ctz(((status & mask) >> 8) | (1 << UOTGHS_EPT_NUM));
   9cada:	400b      	ands	r3, r1
   9cadc:	0a1b      	lsrs	r3, r3, #8
   9cade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   9cae2:	fa93 f3a3 	rbit	r3, r3
   9cae6:	fab3 f383 	clz	r3, r3
   9caea:	b2d8      	uxtb	r0, r3
	if (pipe_int == 0) {
   9caec:	2b00      	cmp	r3, #0
   9caee:	f000 8264 	beq.w	9cfba <UOTGHS_Handler+0x57e>
	if (pipe_int != UOTGHS_EPT_NUM) {
   9caf2:	2b0a      	cmp	r3, #10
   9caf4:	d14f      	bne.n	9cb96 <UOTGHS_Handler+0x15a>
#define Is_uhd_pipe_dma_interrupt_enabled(p)     (Tst_bits(UOTGHS->UOTGHS_HSTPIPIMR[p], UOTGHS_HSTIMR_DMA_1<<((p)-1)))
#define Is_uhd_pipe_dma_interrupt(p)             (Tst_bits(UOTGHS->UOTGHS_HSTPIPISR[p], UOTGHS_HSTISR_DMA_1<<((p)-1)))

static inline uint8_t uhd_get_pipe_dma_interrupt_number(void)
{
	uint32_t status = UOTGHS->UOTGHS_HSTISR;
   9caf6:	f8d2 0404 	ldr.w	r0, [r2, #1028]	; 0x404
	uint32_t mask = UOTGHS->UOTGHS_HSTIMR;
   9cafa:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
	return (ctz(((status & mask) >> 25) | (1 << (UOTGHS_EPT_NUM-1))) + 1);
   9cafe:	4018      	ands	r0, r3
   9cb00:	0e40      	lsrs	r0, r0, #25
   9cb02:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   9cb06:	fa90 f0a0 	rbit	r0, r0
   9cb0a:	fab0 f080 	clz	r0, r0
   9cb0e:	3001      	adds	r0, #1
	if (pipe_int != UOTGHS_EPT_NUM) {
   9cb10:	280a      	cmp	r0, #10
   9cb12:	d10d      	bne.n	9cb30 <UOTGHS_Handler+0xf4>
	if (Is_uhd_reset_sent()) {
   9cb14:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
   9cb18:	0759      	lsls	r1, r3, #29
   9cb1a:	f140 82d2 	bpl.w	9d0c2 <UOTGHS_Handler+0x686>
		uhd_ack_reset_sent();
   9cb1e:	2104      	movs	r1, #4
		if (uhd_reset_callback != NULL) {
   9cb20:	4b4b      	ldr	r3, [pc, #300]	; (9cc50 <UOTGHS_Handler+0x214>)
		uhd_ack_reset_sent();
   9cb22:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
		if (uhd_reset_callback != NULL) {
   9cb26:	681b      	ldr	r3, [r3, #0]
   9cb28:	2b00      	cmp	r3, #0
   9cb2a:	d0a8      	beq.n	9ca7e <UOTGHS_Handler+0x42>
			uhd_reset_callback();
   9cb2c:	4798      	blx	r3
   9cb2e:	e7a6      	b.n	9ca7e <UOTGHS_Handler+0x42>
	if (uhd_pipe_dma_get_status(pipe)
   9cb30:	4b48      	ldr	r3, [pc, #288]	; (9cc54 <UOTGHS_Handler+0x218>)
   9cb32:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   9cb36:	68da      	ldr	r2, [r3, #12]
   9cb38:	07d7      	lsls	r7, r2, #31
   9cb3a:	d4a0      	bmi.n	9ca7e <UOTGHS_Handler+0x42>
	ptr_job->nb_trans = uhd_pipes_dma_nb_trans[pipe - 1] - nb_remaining;
   9cb3c:	4a46      	ldr	r2, [pc, #280]	; (9cc58 <UOTGHS_Handler+0x21c>)
	ptr_job = &uhd_pipe_job[pipe - 1];
   9cb3e:	1e45      	subs	r5, r0, #1
	nb_remaining = (uhd_pipe_dma_get_status(pipe) &
   9cb40:	68d9      	ldr	r1, [r3, #12]
	ptr_job->nb_trans = uhd_pipes_dma_nb_trans[pipe - 1] - nb_remaining;
   9cb42:	00ae      	lsls	r6, r5, #2
   9cb44:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
   9cb48:	4c44      	ldr	r4, [pc, #272]	; (9cc5c <UOTGHS_Handler+0x220>)
			>> UOTGHS_HSTDMASTATUS_BUFF_COUNT_Pos;
   9cb4a:	0c09      	lsrs	r1, r1, #16
	ptr_job->nb_trans = uhd_pipes_dma_nb_trans[pipe - 1] - nb_remaining;
   9cb4c:	1972      	adds	r2, r6, r5
   9cb4e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   9cb52:	1a5b      	subs	r3, r3, r1
   9cb54:	60d3      	str	r3, [r2, #12]
	if (nb_remaining) {
   9cb56:	b101      	cbz	r1, 9cb5a <UOTGHS_Handler+0x11e>
		ptr_job->buf_size = ptr_job->nb_trans;
   9cb58:	6093      	str	r3, [r2, #8]
   9cb5a:	0082      	lsls	r2, r0, #2
   9cb5c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   9cb60:	f502 222c 	add.w	r2, r2, #704512	; 0xac000
	if (uhd_is_pipe_out(pipe)) {
   9cb64:	f8d2 7500 	ldr.w	r7, [r2, #1280]	; 0x500
   9cb68:	f407 7740 	and.w	r7, r7, #768	; 0x300
   9cb6c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   9cb70:	f000 8504 	beq.w	9d57c <UOTGHS_Handler+0xb40>
		if (!Is_uhd_pipe_frozen(pipe)) {
   9cb74:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9cb78:	039d      	lsls	r5, r3, #14
   9cb7a:	d404      	bmi.n	9cb86 <UOTGHS_Handler+0x14a>
			if (nb_remaining) {
   9cb7c:	b131      	cbz	r1, 9cb8c <UOTGHS_Handler+0x150>
				uhd_freeze_pipe(pipe);
   9cb7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   9cb82:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
		uhd_pipe_trans_complet(pipe);
   9cb86:	4b36      	ldr	r3, [pc, #216]	; (9cc60 <UOTGHS_Handler+0x224>)
   9cb88:	4798      	blx	r3
   9cb8a:	e778      	b.n	9ca7e <UOTGHS_Handler+0x42>
				while (!Is_uhd_pipe_frozen(pipe)) {
   9cb8c:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9cb90:	039c      	lsls	r4, r3, #14
   9cb92:	d5fb      	bpl.n	9cb8c <UOTGHS_Handler+0x150>
   9cb94:	e7f7      	b.n	9cb86 <UOTGHS_Handler+0x14a>
   9cb96:	009a      	lsls	r2, r3, #2
   9cb98:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   9cb9c:	f502 222c 	add.w	r2, r2, #704512	; 0xac000
	if (Is_uhd_pipe_bulk_in(pipe)
   9cba0:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
   9cba4:	f401 514c 	and.w	r1, r1, #13056	; 0x3300
   9cba8:	f5b1 5f04 	cmp.w	r1, #8448	; 0x2100
   9cbac:	f000 8330 	beq.w	9d210 <UOTGHS_Handler+0x7d4>
	if (!Is_uhd_pipe_dma_supported(pipe)) {
   9cbb0:	1e41      	subs	r1, r0, #1
   9cbb2:	2905      	cmp	r1, #5
		if (Is_uhd_short_packet_interrupt_enabled(pipe)
   9cbb4:	f8d2 15c0 	ldr.w	r1, [r2, #1472]	; 0x5c0
	if (!Is_uhd_pipe_dma_supported(pipe)) {
   9cbb8:	f240 8234 	bls.w	9d024 <UOTGHS_Handler+0x5e8>
		if (Is_uhd_short_packet_interrupt_enabled(pipe)
   9cbbc:	060f      	lsls	r7, r1, #24
   9cbbe:	d504      	bpl.n	9cbca <UOTGHS_Handler+0x18e>
				&& Is_uhd_short_packet(pipe)) {
   9cbc0:	f8d2 1530 	ldr.w	r1, [r2, #1328]	; 0x530
   9cbc4:	060e      	lsls	r6, r1, #24
   9cbc6:	f100 8595 	bmi.w	9d6f4 <UOTGHS_Handler+0xcb8>
		if (Is_uhd_in_received_interrupt_enabled(pipe)
   9cbca:	f8d2 15c0 	ldr.w	r1, [r2, #1472]	; 0x5c0
   9cbce:	07cd      	lsls	r5, r1, #31
   9cbd0:	d504      	bpl.n	9cbdc <UOTGHS_Handler+0x1a0>
				&& Is_uhd_in_received(pipe)) {
   9cbd2:	f8d2 1530 	ldr.w	r1, [r2, #1328]	; 0x530
   9cbd6:	07cc      	lsls	r4, r1, #31
   9cbd8:	f100 8782 	bmi.w	9dae0 <UOTGHS_Handler+0x10a4>
		if (Is_uhd_out_ready_interrupt_enabled(pipe)
   9cbdc:	f8d2 15c0 	ldr.w	r1, [r2, #1472]	; 0x5c0
   9cbe0:	0789      	lsls	r1, r1, #30
   9cbe2:	d504      	bpl.n	9cbee <UOTGHS_Handler+0x1b2>
				&& Is_uhd_out_ready(pipe)) {
   9cbe4:	f8d2 1530 	ldr.w	r1, [r2, #1328]	; 0x530
   9cbe8:	078f      	lsls	r7, r1, #30
   9cbea:	f100 8697 	bmi.w	9d91c <UOTGHS_Handler+0xee0>
		if (Is_uhd_bank_interrupt_enabled(pipe)
   9cbee:	f8d2 15c0 	ldr.w	r1, [r2, #1472]	; 0x5c0
   9cbf2:	04cc      	lsls	r4, r1, #19
   9cbf4:	d505      	bpl.n	9cc02 <UOTGHS_Handler+0x1c6>
				&& (0==uhd_nb_busy_bank(pipe))) {
   9cbf6:	f8d2 1530 	ldr.w	r1, [r2, #1328]	; 0x530
   9cbfa:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   9cbfe:	f000 8730 	beq.w	9da62 <UOTGHS_Handler+0x1026>
	if (Is_uhd_stall(pipe)) {
   9cc02:	f8d2 1530 	ldr.w	r1, [r2, #1328]	; 0x530
   9cc06:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   9cc0a:	f040 849d 	bne.w	9d548 <UOTGHS_Handler+0xb0c>
	if (Is_uhd_pipe_error(pipe)) {
   9cc0e:	f8d2 3530 	ldr.w	r3, [r2, #1328]	; 0x530
   9cc12:	071b      	lsls	r3, r3, #28
   9cc14:	f57f af33 	bpl.w	9ca7e <UOTGHS_Handler+0x42>
	uint32_t error = uhd_error_status(pipe) &
   9cc18:	f8d2 3680 	ldr.w	r3, [r2, #1664]	; 0x680
	uhd_ack_all_errors(pipe);
   9cc1c:	f8c2 1680 	str.w	r1, [r2, #1664]	; 0x680
	uint32_t error = uhd_error_status(pipe) &
   9cc20:	f003 030f 	and.w	r3, r3, #15
	switch(error) {
   9cc24:	2b01      	cmp	r3, #1
   9cc26:	f000 8499 	beq.w	9d55c <UOTGHS_Handler+0xb20>
		return UHD_TRANS_PIDFAILURE;
   9cc2a:	2b08      	cmp	r3, #8
   9cc2c:	bf0c      	ite	eq
   9cc2e:	2105      	moveq	r1, #5
   9cc30:	2106      	movne	r1, #6
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
   9cc32:	4b0c      	ldr	r3, [pc, #48]	; (9cc64 <UOTGHS_Handler+0x228>)
   9cc34:	4798      	blx	r3
   9cc36:	e722      	b.n	9ca7e <UOTGHS_Handler+0x42>
   9cc38:	0009bdcd 	.word	0x0009bdcd
   9cc3c:	0009be61 	.word	0x0009be61
   9cc40:	400ac000 	.word	0x400ac000
   9cc44:	2007026b 	.word	0x2007026b
   9cc48:	0009b731 	.word	0x0009b731
   9cc4c:	0009b711 	.word	0x0009b711
   9cc50:	20072e20 	.word	0x20072e20
   9cc54:	400ac700 	.word	0x400ac700
   9cc58:	20072df8 	.word	0x20072df8
   9cc5c:	20072d44 	.word	0x20072d44
   9cc60:	0009c7dd 	.word	0x0009c7dd
   9cc64:	0009c3fd 	.word	0x0009c3fd
	uhd_ack_sof();
   9cc68:	2320      	movs	r3, #32
		if (!ptr_job->busy) {
   9cc6a:	4cb5      	ldr	r4, [pc, #724]	; (9cf40 <UOTGHS_Handler+0x504>)
	uhd_ack_sof();
   9cc6c:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		if (!ptr_job->busy) {
   9cc70:	7ca3      	ldrb	r3, [r4, #18]
   9cc72:	07dd      	lsls	r5, r3, #31
   9cc74:	d508      	bpl.n	9cc88 <UOTGHS_Handler+0x24c>
		if (!Is_uhd_pipe_bulk_in(pipe)) {
   9cc76:	4ab3      	ldr	r2, [pc, #716]	; (9cf44 <UOTGHS_Handler+0x508>)
   9cc78:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9cc7c:	f403 534c 	and.w	r3, r3, #13056	; 0x3300
   9cc80:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
   9cc84:	f000 84bd 	beq.w	9d602 <UOTGHS_Handler+0xbc6>
		if (!ptr_job->busy) {
   9cc88:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   9cc8c:	07da      	lsls	r2, r3, #31
   9cc8e:	d508      	bpl.n	9cca2 <UOTGHS_Handler+0x266>
		if (!Is_uhd_pipe_bulk_in(pipe)) {
   9cc90:	4aad      	ldr	r2, [pc, #692]	; (9cf48 <UOTGHS_Handler+0x50c>)
   9cc92:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9cc96:	f403 534c 	and.w	r3, r3, #13056	; 0x3300
   9cc9a:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
   9cc9e:	f000 84ba 	beq.w	9d616 <UOTGHS_Handler+0xbda>
		if (!ptr_job->busy) {
   9cca2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   9cca6:	07df      	lsls	r7, r3, #31
   9cca8:	d508      	bpl.n	9ccbc <UOTGHS_Handler+0x280>
		if (!Is_uhd_pipe_bulk_in(pipe)) {
   9ccaa:	4aa8      	ldr	r2, [pc, #672]	; (9cf4c <UOTGHS_Handler+0x510>)
   9ccac:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9ccb0:	f403 534c 	and.w	r3, r3, #13056	; 0x3300
   9ccb4:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
   9ccb8:	f000 84b7 	beq.w	9d62a <UOTGHS_Handler+0xbee>
		if (!ptr_job->busy) {
   9ccbc:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   9ccc0:	07dd      	lsls	r5, r3, #31
   9ccc2:	d508      	bpl.n	9ccd6 <UOTGHS_Handler+0x29a>
		if (!Is_uhd_pipe_bulk_in(pipe)) {
   9ccc4:	4aa2      	ldr	r2, [pc, #648]	; (9cf50 <UOTGHS_Handler+0x514>)
   9ccc6:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9ccca:	f403 534c 	and.w	r3, r3, #13056	; 0x3300
   9ccce:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
   9ccd2:	f000 84b4 	beq.w	9d63e <UOTGHS_Handler+0xc02>
		if (!ptr_job->busy) {
   9ccd6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   9ccda:	07da      	lsls	r2, r3, #31
   9ccdc:	d508      	bpl.n	9ccf0 <UOTGHS_Handler+0x2b4>
		if (!Is_uhd_pipe_bulk_in(pipe)) {
   9ccde:	4a9d      	ldr	r2, [pc, #628]	; (9cf54 <UOTGHS_Handler+0x518>)
   9cce0:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9cce4:	f403 534c 	and.w	r3, r3, #13056	; 0x3300
   9cce8:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
   9ccec:	f000 84b1 	beq.w	9d652 <UOTGHS_Handler+0xc16>
		if (!ptr_job->busy) {
   9ccf0:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   9ccf4:	07df      	lsls	r7, r3, #31
   9ccf6:	d508      	bpl.n	9cd0a <UOTGHS_Handler+0x2ce>
		if (!Is_uhd_pipe_bulk_in(pipe)) {
   9ccf8:	4a97      	ldr	r2, [pc, #604]	; (9cf58 <UOTGHS_Handler+0x51c>)
   9ccfa:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9ccfe:	f403 534c 	and.w	r3, r3, #13056	; 0x3300
   9cd02:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
   9cd06:	f000 84b2 	beq.w	9d66e <UOTGHS_Handler+0xc32>
		if (!ptr_job->busy) {
   9cd0a:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
   9cd0e:	07dd      	lsls	r5, r3, #31
   9cd10:	d508      	bpl.n	9cd24 <UOTGHS_Handler+0x2e8>
		if (!Is_uhd_pipe_bulk_in(pipe)) {
   9cd12:	4a92      	ldr	r2, [pc, #584]	; (9cf5c <UOTGHS_Handler+0x520>)
   9cd14:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9cd18:	f403 534c 	and.w	r3, r3, #13056	; 0x3300
   9cd1c:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
   9cd20:	f000 84af 	beq.w	9d682 <UOTGHS_Handler+0xc46>
		if (!ptr_job->busy) {
   9cd24:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   9cd28:	07da      	lsls	r2, r3, #31
   9cd2a:	d508      	bpl.n	9cd3e <UOTGHS_Handler+0x302>
		if (!Is_uhd_pipe_bulk_in(pipe)) {
   9cd2c:	4a8c      	ldr	r2, [pc, #560]	; (9cf60 <UOTGHS_Handler+0x524>)
   9cd2e:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9cd32:	f403 534c 	and.w	r3, r3, #13056	; 0x3300
   9cd36:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
   9cd3a:	f000 84ac 	beq.w	9d696 <UOTGHS_Handler+0xc5a>
		if (!ptr_job->busy) {
   9cd3e:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   9cd42:	07df      	lsls	r7, r3, #31
   9cd44:	d508      	bpl.n	9cd58 <UOTGHS_Handler+0x31c>
		if (!Is_uhd_pipe_bulk_in(pipe)) {
   9cd46:	4a87      	ldr	r2, [pc, #540]	; (9cf64 <UOTGHS_Handler+0x528>)
   9cd48:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9cd4c:	f403 534c 	and.w	r3, r3, #13056	; 0x3300
   9cd50:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
   9cd54:	f000 84a9 	beq.w	9d6aa <UOTGHS_Handler+0xc6e>
	if (Is_uhd_high_speed_mode()) {
   9cd58:	4b83      	ldr	r3, [pc, #524]	; (9cf68 <UOTGHS_Handler+0x52c>)
   9cd5a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   9cd5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   9cd62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   9cd66:	f000 8265 	beq.w	9d234 <UOTGHS_Handler+0x7f8>
	if (uhd_suspend_start) {
   9cd6a:	4a80      	ldr	r2, [pc, #512]	; (9cf6c <UOTGHS_Handler+0x530>)
   9cd6c:	7813      	ldrb	r3, [r2, #0]
   9cd6e:	2b00      	cmp	r3, #0
   9cd70:	f040 82d7 	bne.w	9d322 <UOTGHS_Handler+0x8e6>
	if (uhd_resume_start) {
   9cd74:	4a7e      	ldr	r2, [pc, #504]	; (9cf70 <UOTGHS_Handler+0x534>)
   9cd76:	7813      	ldrb	r3, [r2, #0]
   9cd78:	2b00      	cmp	r3, #0
   9cd7a:	f040 8287 	bne.w	9d28c <UOTGHS_Handler+0x850>
	if (uhd_ctrl_request_timeout) {
   9cd7e:	4a7d      	ldr	r2, [pc, #500]	; (9cf74 <UOTGHS_Handler+0x538>)
   9cd80:	8813      	ldrh	r3, [r2, #0]
   9cd82:	b29b      	uxth	r3, r3
   9cd84:	b163      	cbz	r3, 9cda0 <UOTGHS_Handler+0x364>
		if (--uhd_ctrl_request_timeout == 0) {
   9cd86:	8813      	ldrh	r3, [r2, #0]
   9cd88:	3b01      	subs	r3, #1
   9cd8a:	b29b      	uxth	r3, r3
   9cd8c:	8013      	strh	r3, [r2, #0]
   9cd8e:	b93b      	cbnz	r3, 9cda0 <UOTGHS_Handler+0x364>
			uhd_freeze_pipe(0);
   9cd90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   9cd94:	4b74      	ldr	r3, [pc, #464]	; (9cf68 <UOTGHS_Handler+0x52c>)
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
   9cd96:	2007      	movs	r0, #7
			uhd_freeze_pipe(0);
   9cd98:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
   9cd9c:	4b76      	ldr	r3, [pc, #472]	; (9cf78 <UOTGHS_Handler+0x53c>)
   9cd9e:	4798      	blx	r3
		if (ptr_job->busy == true) {
   9cda0:	7ca2      	ldrb	r2, [r4, #18]
   9cda2:	07d7      	lsls	r7, r2, #31
   9cda4:	d512      	bpl.n	9cdcc <UOTGHS_Handler+0x390>
			if (ptr_job->timeout) {
   9cda6:	8a23      	ldrh	r3, [r4, #16]
   9cda8:	b12b      	cbz	r3, 9cdb6 <UOTGHS_Handler+0x37a>
				if (--ptr_job->timeout == 0) {
   9cdaa:	3b01      	subs	r3, #1
   9cdac:	b29b      	uxth	r3, r3
   9cdae:	8223      	strh	r3, [r4, #16]
   9cdb0:	2b00      	cmp	r3, #0
   9cdb2:	f000 86e7 	beq.w	9db84 <UOTGHS_Handler+0x1148>
			if (ptr_job->b_periodic_start) {
   9cdb6:	0756      	lsls	r6, r2, #29
   9cdb8:	d508      	bpl.n	9cdcc <UOTGHS_Handler+0x390>
				uhd_unfreeze_pipe(pipe);
   9cdba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
				ptr_job->b_periodic_start = false;
   9cdbe:	7ca3      	ldrb	r3, [r4, #18]
				uhd_unfreeze_pipe(pipe);
   9cdc0:	4a69      	ldr	r2, [pc, #420]	; (9cf68 <UOTGHS_Handler+0x52c>)
				ptr_job->b_periodic_start = false;
   9cdc2:	f36f 0382 	bfc	r3, #2, #1
   9cdc6:	74a3      	strb	r3, [r4, #18]
				uhd_unfreeze_pipe(pipe);
   9cdc8:	f8c2 1624 	str.w	r1, [r2, #1572]	; 0x624
		if (ptr_job->busy == true) {
   9cdcc:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   9cdd0:	07d5      	lsls	r5, r2, #31
   9cdd2:	d514      	bpl.n	9cdfe <UOTGHS_Handler+0x3c2>
			if (ptr_job->timeout) {
   9cdd4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   9cdd6:	b12b      	cbz	r3, 9cde4 <UOTGHS_Handler+0x3a8>
				if (--ptr_job->timeout == 0) {
   9cdd8:	3b01      	subs	r3, #1
   9cdda:	b29b      	uxth	r3, r3
   9cddc:	84a3      	strh	r3, [r4, #36]	; 0x24
   9cdde:	2b00      	cmp	r3, #0
   9cde0:	f000 872a 	beq.w	9dc38 <UOTGHS_Handler+0x11fc>
			if (ptr_job->b_periodic_start) {
   9cde4:	0750      	lsls	r0, r2, #29
   9cde6:	d50a      	bpl.n	9cdfe <UOTGHS_Handler+0x3c2>
				uhd_unfreeze_pipe(pipe);
   9cde8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
				ptr_job->b_periodic_start = false;
   9cdec:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
				uhd_unfreeze_pipe(pipe);
   9cdf0:	4a5d      	ldr	r2, [pc, #372]	; (9cf68 <UOTGHS_Handler+0x52c>)
				ptr_job->b_periodic_start = false;
   9cdf2:	f36f 0382 	bfc	r3, #2, #1
   9cdf6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
				uhd_unfreeze_pipe(pipe);
   9cdfa:	f8c2 1628 	str.w	r1, [r2, #1576]	; 0x628
		if (ptr_job->busy == true) {
   9cdfe:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   9ce02:	07d1      	lsls	r1, r2, #31
   9ce04:	d514      	bpl.n	9ce30 <UOTGHS_Handler+0x3f4>
			if (ptr_job->timeout) {
   9ce06:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   9ce08:	b12b      	cbz	r3, 9ce16 <UOTGHS_Handler+0x3da>
				if (--ptr_job->timeout == 0) {
   9ce0a:	3b01      	subs	r3, #1
   9ce0c:	b29b      	uxth	r3, r3
   9ce0e:	8723      	strh	r3, [r4, #56]	; 0x38
   9ce10:	2b00      	cmp	r3, #0
   9ce12:	f000 8719 	beq.w	9dc48 <UOTGHS_Handler+0x120c>
			if (ptr_job->b_periodic_start) {
   9ce16:	0753      	lsls	r3, r2, #29
   9ce18:	d50a      	bpl.n	9ce30 <UOTGHS_Handler+0x3f4>
				uhd_unfreeze_pipe(pipe);
   9ce1a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
				ptr_job->b_periodic_start = false;
   9ce1e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
				uhd_unfreeze_pipe(pipe);
   9ce22:	4a51      	ldr	r2, [pc, #324]	; (9cf68 <UOTGHS_Handler+0x52c>)
				ptr_job->b_periodic_start = false;
   9ce24:	f36f 0382 	bfc	r3, #2, #1
   9ce28:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
				uhd_unfreeze_pipe(pipe);
   9ce2c:	f8c2 162c 	str.w	r1, [r2, #1580]	; 0x62c
		if (ptr_job->busy == true) {
   9ce30:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
   9ce34:	07d7      	lsls	r7, r2, #31
   9ce36:	d516      	bpl.n	9ce66 <UOTGHS_Handler+0x42a>
			if (ptr_job->timeout) {
   9ce38:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   9ce3c:	b133      	cbz	r3, 9ce4c <UOTGHS_Handler+0x410>
				if (--ptr_job->timeout == 0) {
   9ce3e:	3b01      	subs	r3, #1
   9ce40:	b29b      	uxth	r3, r3
   9ce42:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
   9ce46:	2b00      	cmp	r3, #0
   9ce48:	f000 8706 	beq.w	9dc58 <UOTGHS_Handler+0x121c>
			if (ptr_job->b_periodic_start) {
   9ce4c:	0756      	lsls	r6, r2, #29
   9ce4e:	d50a      	bpl.n	9ce66 <UOTGHS_Handler+0x42a>
				uhd_unfreeze_pipe(pipe);
   9ce50:	f44f 3100 	mov.w	r1, #131072	; 0x20000
				ptr_job->b_periodic_start = false;
   9ce54:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
				uhd_unfreeze_pipe(pipe);
   9ce58:	4a43      	ldr	r2, [pc, #268]	; (9cf68 <UOTGHS_Handler+0x52c>)
				ptr_job->b_periodic_start = false;
   9ce5a:	f36f 0382 	bfc	r3, #2, #1
   9ce5e:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
				uhd_unfreeze_pipe(pipe);
   9ce62:	f8c2 1630 	str.w	r1, [r2, #1584]	; 0x630
		if (ptr_job->busy == true) {
   9ce66:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   9ce6a:	07d5      	lsls	r5, r2, #31
   9ce6c:	d516      	bpl.n	9ce9c <UOTGHS_Handler+0x460>
			if (ptr_job->timeout) {
   9ce6e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
   9ce72:	b133      	cbz	r3, 9ce82 <UOTGHS_Handler+0x446>
				if (--ptr_job->timeout == 0) {
   9ce74:	3b01      	subs	r3, #1
   9ce76:	b29b      	uxth	r3, r3
   9ce78:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
   9ce7c:	2b00      	cmp	r3, #0
   9ce7e:	f000 86f3 	beq.w	9dc68 <UOTGHS_Handler+0x122c>
			if (ptr_job->b_periodic_start) {
   9ce82:	0750      	lsls	r0, r2, #29
   9ce84:	d50a      	bpl.n	9ce9c <UOTGHS_Handler+0x460>
				uhd_unfreeze_pipe(pipe);
   9ce86:	f44f 3100 	mov.w	r1, #131072	; 0x20000
				ptr_job->b_periodic_start = false;
   9ce8a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
				uhd_unfreeze_pipe(pipe);
   9ce8e:	4a36      	ldr	r2, [pc, #216]	; (9cf68 <UOTGHS_Handler+0x52c>)
				ptr_job->b_periodic_start = false;
   9ce90:	f36f 0382 	bfc	r3, #2, #1
   9ce94:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
				uhd_unfreeze_pipe(pipe);
   9ce98:	f8c2 1634 	str.w	r1, [r2, #1588]	; 0x634
		if (ptr_job->busy == true) {
   9ce9c:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
   9cea0:	07d1      	lsls	r1, r2, #31
   9cea2:	d516      	bpl.n	9ced2 <UOTGHS_Handler+0x496>
			if (ptr_job->timeout) {
   9cea4:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   9cea8:	b133      	cbz	r3, 9ceb8 <UOTGHS_Handler+0x47c>
				if (--ptr_job->timeout == 0) {
   9ceaa:	3b01      	subs	r3, #1
   9ceac:	b29b      	uxth	r3, r3
   9ceae:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
   9ceb2:	2b00      	cmp	r3, #0
   9ceb4:	f000 86e0 	beq.w	9dc78 <UOTGHS_Handler+0x123c>
			if (ptr_job->b_periodic_start) {
   9ceb8:	0753      	lsls	r3, r2, #29
   9ceba:	d50a      	bpl.n	9ced2 <UOTGHS_Handler+0x496>
				uhd_unfreeze_pipe(pipe);
   9cebc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
				ptr_job->b_periodic_start = false;
   9cec0:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
				uhd_unfreeze_pipe(pipe);
   9cec4:	4a28      	ldr	r2, [pc, #160]	; (9cf68 <UOTGHS_Handler+0x52c>)
				ptr_job->b_periodic_start = false;
   9cec6:	f36f 0382 	bfc	r3, #2, #1
   9ceca:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
				uhd_unfreeze_pipe(pipe);
   9cece:	f8c2 1638 	str.w	r1, [r2, #1592]	; 0x638
		if (ptr_job->busy == true) {
   9ced2:	f894 208a 	ldrb.w	r2, [r4, #138]	; 0x8a
   9ced6:	07d7      	lsls	r7, r2, #31
   9ced8:	d516      	bpl.n	9cf08 <UOTGHS_Handler+0x4cc>
			if (ptr_job->timeout) {
   9ceda:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
   9cede:	b133      	cbz	r3, 9ceee <UOTGHS_Handler+0x4b2>
				if (--ptr_job->timeout == 0) {
   9cee0:	3b01      	subs	r3, #1
   9cee2:	b29b      	uxth	r3, r3
   9cee4:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
   9cee8:	2b00      	cmp	r3, #0
   9ceea:	f000 86cd 	beq.w	9dc88 <UOTGHS_Handler+0x124c>
			if (ptr_job->b_periodic_start) {
   9ceee:	0756      	lsls	r6, r2, #29
   9cef0:	d50a      	bpl.n	9cf08 <UOTGHS_Handler+0x4cc>
				uhd_unfreeze_pipe(pipe);
   9cef2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
				ptr_job->b_periodic_start = false;
   9cef6:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
				uhd_unfreeze_pipe(pipe);
   9cefa:	4a1b      	ldr	r2, [pc, #108]	; (9cf68 <UOTGHS_Handler+0x52c>)
				ptr_job->b_periodic_start = false;
   9cefc:	f36f 0382 	bfc	r3, #2, #1
   9cf00:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
				uhd_unfreeze_pipe(pipe);
   9cf04:	f8c2 163c 	str.w	r1, [r2, #1596]	; 0x63c
		if (ptr_job->busy == true) {
   9cf08:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
   9cf0c:	07d5      	lsls	r5, r2, #31
   9cf0e:	d535      	bpl.n	9cf7c <UOTGHS_Handler+0x540>
			if (ptr_job->timeout) {
   9cf10:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
   9cf14:	b133      	cbz	r3, 9cf24 <UOTGHS_Handler+0x4e8>
				if (--ptr_job->timeout == 0) {
   9cf16:	3b01      	subs	r3, #1
   9cf18:	b29b      	uxth	r3, r3
   9cf1a:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
   9cf1e:	2b00      	cmp	r3, #0
   9cf20:	f000 86ba 	beq.w	9dc98 <UOTGHS_Handler+0x125c>
			if (ptr_job->b_periodic_start) {
   9cf24:	0750      	lsls	r0, r2, #29
   9cf26:	d529      	bpl.n	9cf7c <UOTGHS_Handler+0x540>
				uhd_unfreeze_pipe(pipe);
   9cf28:	f44f 3100 	mov.w	r1, #131072	; 0x20000
				ptr_job->b_periodic_start = false;
   9cf2c:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
				uhd_unfreeze_pipe(pipe);
   9cf30:	4a0d      	ldr	r2, [pc, #52]	; (9cf68 <UOTGHS_Handler+0x52c>)
				ptr_job->b_periodic_start = false;
   9cf32:	f36f 0382 	bfc	r3, #2, #1
   9cf36:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
				uhd_unfreeze_pipe(pipe);
   9cf3a:	f8c2 1640 	str.w	r1, [r2, #1600]	; 0x640
   9cf3e:	e01d      	b.n	9cf7c <UOTGHS_Handler+0x540>
   9cf40:	20072d44 	.word	0x20072d44
   9cf44:	400ac004 	.word	0x400ac004
   9cf48:	400ac008 	.word	0x400ac008
   9cf4c:	400ac00c 	.word	0x400ac00c
   9cf50:	400ac010 	.word	0x400ac010
   9cf54:	400ac014 	.word	0x400ac014
   9cf58:	400ac018 	.word	0x400ac018
   9cf5c:	400ac01c 	.word	0x400ac01c
   9cf60:	400ac020 	.word	0x400ac020
   9cf64:	400ac024 	.word	0x400ac024
   9cf68:	400ac000 	.word	0x400ac000
   9cf6c:	20072e26 	.word	0x20072e26
   9cf70:	20072e24 	.word	0x20072e24
   9cf74:	20072fb4 	.word	0x20072fb4
   9cf78:	0009c209 	.word	0x0009c209
		if (ptr_job->busy == true) {
   9cf7c:	f894 20b2 	ldrb.w	r2, [r4, #178]	; 0xb2
   9cf80:	07d1      	lsls	r1, r2, #31
   9cf82:	d516      	bpl.n	9cfb2 <UOTGHS_Handler+0x576>
			if (ptr_job->timeout) {
   9cf84:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   9cf88:	b133      	cbz	r3, 9cf98 <UOTGHS_Handler+0x55c>
				if (--ptr_job->timeout == 0) {
   9cf8a:	3b01      	subs	r3, #1
   9cf8c:	b29b      	uxth	r3, r3
   9cf8e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
   9cf92:	2b00      	cmp	r3, #0
   9cf94:	f000 8688 	beq.w	9dca8 <UOTGHS_Handler+0x126c>
			if (ptr_job->b_periodic_start) {
   9cf98:	0752      	lsls	r2, r2, #29
   9cf9a:	d50a      	bpl.n	9cfb2 <UOTGHS_Handler+0x576>
				uhd_unfreeze_pipe(pipe);
   9cf9c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
				ptr_job->b_periodic_start = false;
   9cfa0:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
				uhd_unfreeze_pipe(pipe);
   9cfa4:	4aae      	ldr	r2, [pc, #696]	; (9d260 <UOTGHS_Handler+0x824>)
				ptr_job->b_periodic_start = false;
   9cfa6:	f36f 0382 	bfc	r3, #2, #1
   9cfaa:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
				uhd_unfreeze_pipe(pipe);
   9cfae:	f8c2 1644 	str.w	r1, [r2, #1604]	; 0x644
	uhc_notify_sof(false);
   9cfb2:	2000      	movs	r0, #0
   9cfb4:	4bab      	ldr	r3, [pc, #684]	; (9d264 <UOTGHS_Handler+0x828>)
   9cfb6:	4798      	blx	r3
   9cfb8:	e561      	b.n	9ca7e <UOTGHS_Handler+0x42>
	UOTGHS->UOTGHS_HSTPIPIDR[0] = UOTGHS_HSTPIPIDR_TXSTPEC
   9cfba:	2307      	movs	r3, #7
   9cfbc:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
	if (Is_uhd_setup_ready(0)) {
   9cfc0:	f8d2 3530 	ldr.w	r3, [r2, #1328]	; 0x530
   9cfc4:	075b      	lsls	r3, r3, #29
   9cfc6:	f140 80f2 	bpl.w	9d1ae <UOTGHS_Handler+0x772>
		uhd_ack_setup_ready(0);
   9cfca:	2004      	movs	r0, #4
		uhd_freeze_pipe(0);
   9cfcc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
   9cfd0:	4ba5      	ldr	r3, [pc, #660]	; (9d268 <UOTGHS_Handler+0x82c>)
		uhd_freeze_pipe(0);
   9cfd2:	f8c2 15f0 	str.w	r1, [r2, #1520]	; 0x5f0
		uhd_ack_setup_ready(0);
   9cfd6:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
   9cfda:	681b      	ldr	r3, [r3, #0]
   9cfdc:	f993 0011 	ldrsb.w	r0, [r3, #17]
   9cfe0:	2800      	cmp	r0, #0
   9cfe2:	f2c0 8385 	blt.w	9d6f0 <UOTGHS_Handler+0xcb4>
			if (uhd_ctrl_request_first->req.wLength) {
   9cfe6:	f8b3 3017 	ldrh.w	r3, [r3, #23]
   9cfea:	2b00      	cmp	r3, #0
   9cfec:	f040 833b 	bne.w	9d666 <UOTGHS_Handler+0xc2a>
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
   9cff0:	2603      	movs	r6, #3
	uhd_ack_in_received(0);
   9cff2:	2001      	movs	r0, #1
	uhd_ack_short_packet(0);
   9cff4:	2580      	movs	r5, #128	; 0x80
	uhd_ack_fifocon(0);
   9cff6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
   9cffa:	4b9c      	ldr	r3, [pc, #624]	; (9d26c <UOTGHS_Handler+0x830>)
   9cffc:	701e      	strb	r6, [r3, #0]
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_IN);
   9cffe:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9d002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   9d006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   9d00a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
	uhd_ack_in_received(0);
   9d00e:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	uhd_ack_short_packet(0);
   9d012:	f8c2 5560 	str.w	r5, [r2, #1376]	; 0x560
	uhd_enable_in_received_interrupt(0);
   9d016:	f8c2 05f0 	str.w	r0, [r2, #1520]	; 0x5f0
	uhd_ack_fifocon(0);
   9d01a:	f8c2 4620 	str.w	r4, [r2, #1568]	; 0x620
	uhd_unfreeze_pipe(0);
   9d01e:	f8c2 1620 	str.w	r1, [r2, #1568]	; 0x620
   9d022:	e52c      	b.n	9ca7e <UOTGHS_Handler+0x42>
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
   9d024:	04c9      	lsls	r1, r1, #19
   9d026:	f140 80a6 	bpl.w	9d176 <UOTGHS_Handler+0x73a>
   9d02a:	f8d2 1530 	ldr.w	r1, [r2, #1328]	; 0x530
   9d02e:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   9d032:	f040 80a0 	bne.w	9d176 <UOTGHS_Handler+0x73a>
		uhd_disable_bank_interrupt(pipe);
   9d036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		uhd_freeze_pipe(pipe);
   9d03a:	f44f 3400 	mov.w	r4, #131072	; 0x20000
   9d03e:	f8c2 45f0 	str.w	r4, [r2, #1520]	; 0x5f0
		uhd_disable_bank_interrupt(pipe);
   9d042:	f8c2 1620 	str.w	r1, [r2, #1568]	; 0x620
		if (!Is_uhd_pipe_iso(pipe)) {
   9d046:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
   9d04a:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
   9d04e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   9d052:	f43f ad14 	beq.w	9ca7e <UOTGHS_Handler+0x42>
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9d056:	247f      	movs	r4, #127	; 0x7f
   9d058:	00d9      	lsls	r1, r3, #3
   9d05a:	f001 0118 	and.w	r1, r1, #24
   9d05e:	408c      	lsls	r4, r1
   9d060:	fa94 f5a4 	rbit	r5, r4
   9d064:	4982      	ldr	r1, [pc, #520]	; (9d270 <UOTGHS_Handler+0x834>)
   9d066:	0880      	lsrs	r0, r0, #2
   9d068:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9d06c:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
	ptr_job = &uhd_pipe_job[pipe - 1];
   9d070:	3b01      	subs	r3, #1
	if (ptr_job->busy == false) {
   9d072:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   9d076:	4e7f      	ldr	r6, [pc, #508]	; (9d274 <UOTGHS_Handler+0x838>)
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9d078:	f401 7140 	and.w	r1, r1, #768	; 0x300
	if (ptr_job->busy == false) {
   9d07c:	009b      	lsls	r3, r3, #2
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9d07e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   9d082:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
	if (ptr_job->busy == false) {
   9d086:	eb06 0203 	add.w	r2, r6, r3
   9d08a:	7c97      	ldrb	r7, [r2, #18]
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9d08c:	f3c1 4103 	ubfx	r1, r1, #16, #4
   9d090:	bf08      	it	eq
   9d092:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
	if (ptr_job->busy == false) {
   9d096:	07ff      	lsls	r7, r7, #31
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9d098:	fab5 f585 	clz	r5, r5
	if (ptr_job->busy == false) {
   9d09c:	f57f acef 	bpl.w	9ca7e <UOTGHS_Handler+0x42>
	ptr_job->busy = false;
   9d0a0:	f892 e012 	ldrb.w	lr, [r2, #18]
	if (NULL == ptr_job->call_end) {
   9d0a4:	58f6      	ldr	r6, [r6, r3]
	ptr_job->busy = false;
   9d0a6:	f36f 0e00 	bfc	lr, #0, #1
   9d0aa:	f882 e012 	strb.w	lr, [r2, #18]
	if (NULL == ptr_job->call_end) {
   9d0ae:	2e00      	cmp	r6, #0
   9d0b0:	f43f ace5 	beq.w	9ca7e <UOTGHS_Handler+0x42>
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9d0b4:	4020      	ands	r0, r4
   9d0b6:	40e8      	lsrs	r0, r5
	ptr_job->call_end(dev_addr, dev_ep, status, ptr_job->nb_trans);
   9d0b8:	68d3      	ldr	r3, [r2, #12]
   9d0ba:	b2c0      	uxtb	r0, r0
   9d0bc:	2200      	movs	r2, #0
   9d0be:	47b0      	blx	r6
   9d0c0:	e4dd      	b.n	9ca7e <UOTGHS_Handler+0x42>
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
   9d0c2:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
   9d0c6:	079b      	lsls	r3, r3, #30
   9d0c8:	d504      	bpl.n	9d0d4 <UOTGHS_Handler+0x698>
   9d0ca:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   9d0ce:	079f      	lsls	r7, r3, #30
   9d0d0:	f100 8366 	bmi.w	9d7a0 <UOTGHS_Handler+0xd64>
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
   9d0d4:	4b62      	ldr	r3, [pc, #392]	; (9d260 <UOTGHS_Handler+0x824>)
   9d0d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d0da:	07d6      	lsls	r6, r2, #31
   9d0dc:	d504      	bpl.n	9d0e8 <UOTGHS_Handler+0x6ac>
   9d0de:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   9d0e2:	07d5      	lsls	r5, r2, #31
   9d0e4:	f100 84e0 	bmi.w	9daa8 <UOTGHS_Handler+0x106c>
	if (Is_uhd_vbus_error_interrupt()) {
   9d0e8:	4b5d      	ldr	r3, [pc, #372]	; (9d260 <UOTGHS_Handler+0x824>)
   9d0ea:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   9d0ee:	0714      	lsls	r4, r2, #28
   9d0f0:	f100 81e3 	bmi.w	9d4ba <UOTGHS_Handler+0xa7e>
	while (!Is_otg_clock_usable());
   9d0f4:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   9d0f8:	0450      	lsls	r0, r2, #17
   9d0fa:	d5fb      	bpl.n	9d0f4 <UOTGHS_Handler+0x6b8>
	otg_unfreeze_clock();
   9d0fc:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   9d100:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   9d104:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
   9d108:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   9d10c:	0651      	lsls	r1, r2, #25
   9d10e:	f140 81d9 	bpl.w	9d4c4 <UOTGHS_Handler+0xa88>
   9d112:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d116:	0652      	lsls	r2, r2, #25
   9d118:	d408      	bmi.n	9d12c <UOTGHS_Handler+0x6f0>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
   9d11a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
   9d11e:	0717      	lsls	r7, r2, #28
   9d120:	d404      	bmi.n	9d12c <UOTGHS_Handler+0x6f0>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
   9d122:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
   9d126:	06de      	lsls	r6, r3, #27
   9d128:	f140 81cc 	bpl.w	9d4c4 <UOTGHS_Handler+0xa88>
		UOTGHS->UOTGHS_HSTIDR = UOTGHS_HSTIDR_HWUPIEC
   9d12c:	2258      	movs	r2, #88	; 0x58
   9d12e:	4b4c      	ldr	r3, [pc, #304]	; (9d260 <UOTGHS_Handler+0x824>)
   9d130:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
		uhd_enable_sof();
   9d134:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   9d138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   9d13c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		if ((!Is_uhd_downstream_resume())
   9d140:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d144:	0715      	lsls	r5, r2, #28
   9d146:	d410      	bmi.n	9d16a <UOTGHS_Handler+0x72e>
				&&(!Is_uhd_disconnection())) {
   9d148:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d14c:	0794      	lsls	r4, r2, #30
   9d14e:	d40c      	bmi.n	9d16a <UOTGHS_Handler+0x72e>
			if (Is_uhd_high_speed_mode()) {
   9d150:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   9d154:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
   9d158:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   9d15c:	d105      	bne.n	9d16a <UOTGHS_Handler+0x72e>
				uhd_send_resume();
   9d15e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   9d162:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   9d166:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		uhd_resume_start = 50;
   9d16a:	2132      	movs	r1, #50	; 0x32
   9d16c:	4a42      	ldr	r2, [pc, #264]	; (9d278 <UOTGHS_Handler+0x83c>)
		uhd_sleep_mode(UHD_STATE_IDLE);
   9d16e:	4b43      	ldr	r3, [pc, #268]	; (9d27c <UOTGHS_Handler+0x840>)
		uhd_resume_start = 50;
   9d170:	7011      	strb	r1, [r2, #0]
		uhd_sleep_mode(UHD_STATE_IDLE);
   9d172:	4798      	blx	r3
   9d174:	e483      	b.n	9ca7e <UOTGHS_Handler+0x42>
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
   9d176:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d17a:	079c      	lsls	r4, r3, #30
   9d17c:	f57f ad41 	bpl.w	9cc02 <UOTGHS_Handler+0x1c6>
   9d180:	f8d2 3530 	ldr.w	r3, [r2, #1328]	; 0x530
   9d184:	0799      	lsls	r1, r3, #30
   9d186:	f57f ad3c 	bpl.w	9cc02 <UOTGHS_Handler+0x1c6>
		uhd_disable_out_ready_interrupt(pipe);
   9d18a:	2302      	movs	r3, #2
		uhd_ack_fifocon(pipe);
   9d18c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
		uhd_unfreeze_pipe(pipe);
   9d190:	f44f 3000 	mov.w	r0, #131072	; 0x20000
		uhd_enable_bank_interrupt(pipe);
   9d194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		uhd_disable_out_ready_interrupt(pipe);
   9d198:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
		uhd_ack_out_ready(pipe);
   9d19c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
		uhd_ack_fifocon(pipe);
   9d1a0:	f8c2 4620 	str.w	r4, [r2, #1568]	; 0x620
		uhd_unfreeze_pipe(pipe);
   9d1a4:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
		uhd_enable_bank_interrupt(pipe);
   9d1a8:	f8c2 15f0 	str.w	r1, [r2, #1520]	; 0x5f0
   9d1ac:	e467      	b.n	9ca7e <UOTGHS_Handler+0x42>
	if (Is_uhd_in_received(0)) {
   9d1ae:	f8d2 0530 	ldr.w	r0, [r2, #1328]	; 0x530
   9d1b2:	f010 0001 	ands.w	r0, r0, #1
   9d1b6:	d116      	bne.n	9d1e6 <UOTGHS_Handler+0x7aa>
	if (Is_uhd_out_ready(0)) {
   9d1b8:	f8d2 3530 	ldr.w	r3, [r2, #1328]	; 0x530
   9d1bc:	079e      	lsls	r6, r3, #30
   9d1be:	f140 827e 	bpl.w	9d6be <UOTGHS_Handler+0xc82>
		uhd_freeze_pipe(0);
   9d1c2:	f44f 3400 	mov.w	r4, #131072	; 0x20000
		uhd_ack_out_ready(0);
   9d1c6:	2102      	movs	r1, #2
		switch(uhd_ctrl_request_phase) {
   9d1c8:	4b28      	ldr	r3, [pc, #160]	; (9d26c <UOTGHS_Handler+0x830>)
		uhd_freeze_pipe(0);
   9d1ca:	f8c2 45f0 	str.w	r4, [r2, #1520]	; 0x5f0
		uhd_ack_out_ready(0);
   9d1ce:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
		switch(uhd_ctrl_request_phase) {
   9d1d2:	781b      	ldrb	r3, [r3, #0]
   9d1d4:	2b01      	cmp	r3, #1
   9d1d6:	f000 8246 	beq.w	9d666 <UOTGHS_Handler+0xc2a>
   9d1da:	2b04      	cmp	r3, #4
   9d1dc:	f47f ac4f 	bne.w	9ca7e <UOTGHS_Handler+0x42>
		uhd_ctrl_request_end(UHD_TRANS_STALL);
   9d1e0:	4b27      	ldr	r3, [pc, #156]	; (9d280 <UOTGHS_Handler+0x844>)
   9d1e2:	4798      	blx	r3
   9d1e4:	e44b      	b.n	9ca7e <UOTGHS_Handler+0x42>
		while (!Is_uhd_pipe_frozen(0));
   9d1e6:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d1ea:	039f      	lsls	r7, r3, #14
   9d1ec:	d5fb      	bpl.n	9d1e6 <UOTGHS_Handler+0x7aa>
		uhd_ack_in_received(0);
   9d1ee:	2301      	movs	r3, #1
		switch(uhd_ctrl_request_phase) {
   9d1f0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 9d26c <UOTGHS_Handler+0x830>
		uhd_ack_in_received(0);
   9d1f4:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
		switch(uhd_ctrl_request_phase) {
   9d1f8:	f898 3000 	ldrb.w	r3, [r8]
   9d1fc:	2b02      	cmp	r3, #2
   9d1fe:	f000 8280 	beq.w	9d702 <UOTGHS_Handler+0xcc6>
   9d202:	2b03      	cmp	r3, #3
   9d204:	f47f ac3b 	bne.w	9ca7e <UOTGHS_Handler+0x42>
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
   9d208:	2000      	movs	r0, #0
   9d20a:	4b1d      	ldr	r3, [pc, #116]	; (9d280 <UOTGHS_Handler+0x844>)
   9d20c:	4798      	blx	r3
   9d20e:	e436      	b.n	9ca7e <UOTGHS_Handler+0x42>
		&& Is_uhd_nak_received_interrupt_enabled(pipe)
   9d210:	f8d2 15c0 	ldr.w	r1, [r2, #1472]	; 0x5c0
   9d214:	06cc      	lsls	r4, r1, #27
   9d216:	f57f accb 	bpl.w	9cbb0 <UOTGHS_Handler+0x174>
		&& Is_uhd_nak_received(pipe)) {
   9d21a:	f8d2 1530 	ldr.w	r1, [r2, #1328]	; 0x530
   9d21e:	06c9      	lsls	r1, r1, #27
   9d220:	f57f acc6 	bpl.w	9cbb0 <UOTGHS_Handler+0x174>
		uhd_freeze_pipe(pipe);
   9d224:	f44f 3100 	mov.w	r1, #131072	; 0x20000
		uhd_ack_nak_received(pipe);
   9d228:	2310      	movs	r3, #16
		uhd_freeze_pipe(pipe);
   9d22a:	f8c2 15f0 	str.w	r1, [r2, #1520]	; 0x5f0
		uhd_ack_nak_received(pipe);
   9d22e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
   9d232:	e424      	b.n	9ca7e <UOTGHS_Handler+0x42>
		if (++msof_cpt % 8) {
   9d234:	4a13      	ldr	r2, [pc, #76]	; (9d284 <UOTGHS_Handler+0x848>)
   9d236:	7813      	ldrb	r3, [r2, #0]
   9d238:	3301      	adds	r3, #1
   9d23a:	b2db      	uxtb	r3, r3
   9d23c:	075d      	lsls	r5, r3, #29
   9d23e:	7013      	strb	r3, [r2, #0]
   9d240:	f43f ad93 	beq.w	9cd6a <UOTGHS_Handler+0x32e>
			if (!uhd_suspend_start && !uhd_resume_start) {
   9d244:	4b10      	ldr	r3, [pc, #64]	; (9d288 <UOTGHS_Handler+0x84c>)
   9d246:	781b      	ldrb	r3, [r3, #0]
   9d248:	2b00      	cmp	r3, #0
   9d24a:	f47f ac18 	bne.w	9ca7e <UOTGHS_Handler+0x42>
   9d24e:	4b0a      	ldr	r3, [pc, #40]	; (9d278 <UOTGHS_Handler+0x83c>)
   9d250:	781b      	ldrb	r3, [r3, #0]
   9d252:	2b00      	cmp	r3, #0
   9d254:	f47f ac13 	bne.w	9ca7e <UOTGHS_Handler+0x42>
				uhc_notify_sof(true);
   9d258:	2001      	movs	r0, #1
   9d25a:	4b02      	ldr	r3, [pc, #8]	; (9d264 <UOTGHS_Handler+0x828>)
   9d25c:	4798      	blx	r3
   9d25e:	e40e      	b.n	9ca7e <UOTGHS_Handler+0x42>
   9d260:	400ac000 	.word	0x400ac000
   9d264:	0009b6a9 	.word	0x0009b6a9
   9d268:	20072fa8 	.word	0x20072fa8
   9d26c:	20072fa4 	.word	0x20072fa4
   9d270:	400ac424 	.word	0x400ac424
   9d274:	20072d44 	.word	0x20072d44
   9d278:	20072e24 	.word	0x20072e24
   9d27c:	0009c155 	.word	0x0009c155
   9d280:	0009c209 	.word	0x0009c209
   9d284:	20072d41 	.word	0x20072d41
   9d288:	20072e26 	.word	0x20072e26
	if (--uhd_resume_start == 0) {
   9d28c:	3b01      	subs	r3, #1
   9d28e:	b2db      	uxtb	r3, r3
   9d290:	7013      	strb	r3, [r2, #0]
   9d292:	2b00      	cmp	r3, #0
   9d294:	f47f abf3 	bne.w	9ca7e <UOTGHS_Handler+0x42>
   9d298:	4bb2      	ldr	r3, [pc, #712]	; (9d564 <UOTGHS_Handler+0xb28>)
   9d29a:	881b      	ldrh	r3, [r3, #0]
			if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
   9d29c:	079a      	lsls	r2, r3, #30
   9d29e:	d504      	bpl.n	9d2aa <UOTGHS_Handler+0x86e>
				uhd_unfreeze_pipe(pipe);
   9d2a0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   9d2a4:	4ab0      	ldr	r2, [pc, #704]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d2a6:	f8c2 1624 	str.w	r1, [r2, #1572]	; 0x624
			if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
   9d2aa:	075f      	lsls	r7, r3, #29
   9d2ac:	d504      	bpl.n	9d2b8 <UOTGHS_Handler+0x87c>
				uhd_unfreeze_pipe(pipe);
   9d2ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   9d2b2:	4aad      	ldr	r2, [pc, #692]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d2b4:	f8c2 1628 	str.w	r1, [r2, #1576]	; 0x628
			if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
   9d2b8:	071e      	lsls	r6, r3, #28
   9d2ba:	d504      	bpl.n	9d2c6 <UOTGHS_Handler+0x88a>
				uhd_unfreeze_pipe(pipe);
   9d2bc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   9d2c0:	4aa9      	ldr	r2, [pc, #676]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d2c2:	f8c2 162c 	str.w	r1, [r2, #1580]	; 0x62c
			if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
   9d2c6:	06dd      	lsls	r5, r3, #27
   9d2c8:	d504      	bpl.n	9d2d4 <UOTGHS_Handler+0x898>
				uhd_unfreeze_pipe(pipe);
   9d2ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   9d2ce:	4aa6      	ldr	r2, [pc, #664]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d2d0:	f8c2 1630 	str.w	r1, [r2, #1584]	; 0x630
			if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
   9d2d4:	069c      	lsls	r4, r3, #26
   9d2d6:	d504      	bpl.n	9d2e2 <UOTGHS_Handler+0x8a6>
				uhd_unfreeze_pipe(pipe);
   9d2d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   9d2dc:	4aa2      	ldr	r2, [pc, #648]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d2de:	f8c2 1634 	str.w	r1, [r2, #1588]	; 0x634
			if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
   9d2e2:	0658      	lsls	r0, r3, #25
   9d2e4:	d504      	bpl.n	9d2f0 <UOTGHS_Handler+0x8b4>
				uhd_unfreeze_pipe(pipe);
   9d2e6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   9d2ea:	4a9f      	ldr	r2, [pc, #636]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d2ec:	f8c2 1638 	str.w	r1, [r2, #1592]	; 0x638
			if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
   9d2f0:	0619      	lsls	r1, r3, #24
   9d2f2:	d504      	bpl.n	9d2fe <UOTGHS_Handler+0x8c2>
				uhd_unfreeze_pipe(pipe);
   9d2f4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   9d2f8:	4a9b      	ldr	r2, [pc, #620]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d2fa:	f8c2 163c 	str.w	r1, [r2, #1596]	; 0x63c
			if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
   9d2fe:	05da      	lsls	r2, r3, #23
   9d300:	d504      	bpl.n	9d30c <UOTGHS_Handler+0x8d0>
				uhd_unfreeze_pipe(pipe);
   9d302:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   9d306:	4a98      	ldr	r2, [pc, #608]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d308:	f8c2 1640 	str.w	r1, [r2, #1600]	; 0x640
			if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
   9d30c:	059b      	lsls	r3, r3, #22
   9d30e:	d504      	bpl.n	9d31a <UOTGHS_Handler+0x8de>
				uhd_unfreeze_pipe(pipe);
   9d310:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   9d314:	4b94      	ldr	r3, [pc, #592]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d316:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
		uhc_notify_resume();
   9d31a:	4b94      	ldr	r3, [pc, #592]	; (9d56c <UOTGHS_Handler+0xb30>)
   9d31c:	4798      	blx	r3
   9d31e:	f7ff bbae 	b.w	9ca7e <UOTGHS_Handler+0x42>
	if (--uhd_suspend_start == 0) {
   9d322:	3b01      	subs	r3, #1
   9d324:	b2db      	uxtb	r3, r3
   9d326:	7013      	strb	r3, [r2, #0]
   9d328:	2b00      	cmp	r3, #0
   9d32a:	f47f aba8 	bne.w	9ca7e <UOTGHS_Handler+0x42>
			(uhd_get_speed_mode() == UOTGHS_SR_SPEED_HIGH_SPEED) ?
   9d32e:	4a8e      	ldr	r2, [pc, #568]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d330:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   9d334:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uint8_t pos =
   9d338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   9d33c:	bf14      	ite	ne
   9d33e:	2172      	movne	r1, #114	; 0x72
   9d340:	210d      	moveq	r1, #13
   9d342:	e003      	b.n	9d34c <UOTGHS_Handler+0x910>
			if (Is_uhd_disconnection()) {
   9d344:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
   9d348:	0798      	lsls	r0, r3, #30
   9d34a:	d405      	bmi.n	9d358 <UOTGHS_Handler+0x91c>
		while (pos < uhd_get_frame_position()) {
   9d34c:	f8d2 3420 	ldr.w	r3, [r2, #1056]	; 0x420
   9d350:	f3c3 4307 	ubfx	r3, r3, #16, #8
   9d354:	428b      	cmp	r3, r1
   9d356:	d8f5      	bhi.n	9d344 <UOTGHS_Handler+0x908>
		uhd_disable_sof();
   9d358:	4b83      	ldr	r3, [pc, #524]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d35a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   9d35e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   9d362:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   9d366:	f3bf 8f5f 	dmb	sy
			if (UOTGHS->UOTGHS_HSTISR & (UOTGHS_HSTICR_HWUPIC
   9d36a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d36e:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d372:	d15f      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d374:	f3bf 8f5f 	dmb	sy
   9d378:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d37c:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d380:	d158      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d382:	f3bf 8f5f 	dmb	sy
   9d386:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d38a:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d38e:	d151      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d390:	f3bf 8f5f 	dmb	sy
   9d394:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d398:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d39c:	d14a      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d39e:	f3bf 8f5f 	dmb	sy
   9d3a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d3a6:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d3aa:	d143      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d3ac:	f3bf 8f5f 	dmb	sy
   9d3b0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d3b4:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d3b8:	d13c      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d3ba:	f3bf 8f5f 	dmb	sy
   9d3be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d3c2:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d3c6:	d135      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d3c8:	f3bf 8f5f 	dmb	sy
   9d3cc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d3d0:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d3d4:	d12e      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d3d6:	f3bf 8f5f 	dmb	sy
   9d3da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d3de:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d3e2:	d127      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d3e4:	f3bf 8f5f 	dmb	sy
   9d3e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
   9d3ec:	f013 0f58 	tst.w	r3, #88	; 0x58
   9d3f0:	d120      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d3f2:	f3bf 8f5f 	dmb	sy
   9d3f6:	4b5c      	ldr	r3, [pc, #368]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d3f8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d3fc:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d400:	d118      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d402:	f3bf 8f5f 	dmb	sy
   9d406:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d40a:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d40e:	d111      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d410:	f3bf 8f5f 	dmb	sy
   9d414:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d418:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d41c:	d10a      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d41e:	f3bf 8f5f 	dmb	sy
   9d422:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
   9d426:	f012 0f58 	tst.w	r2, #88	; 0x58
   9d42a:	d103      	bne.n	9d434 <UOTGHS_Handler+0x9f8>
   9d42c:	f3bf 8f5f 	dmb	sy
   9d430:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
		UOTGHS->UOTGHS_HSTICR = UOTGHS_HSTICR_HWUPIC
   9d434:	2058      	movs	r0, #88	; 0x58
	enum sleepmgr_mode sleep_mode[] = {
   9d436:	2202      	movs	r2, #2
   9d438:	2403      	movs	r4, #3
   9d43a:	2505      	movs	r5, #5
		UOTGHS->UOTGHS_HSTICR = UOTGHS_HSTICR_HWUPIC
   9d43c:	4b4a      	ldr	r3, [pc, #296]	; (9d568 <UOTGHS_Handler+0xb2c>)
	if (uhd_state == new_state) {
   9d43e:	494c      	ldr	r1, [pc, #304]	; (9d570 <UOTGHS_Handler+0xb34>)
		UOTGHS->UOTGHS_HSTICR = UOTGHS_HSTICR_HWUPIC
   9d440:	f8c3 0408 	str.w	r0, [r3, #1032]	; 0x408
		UOTGHS->UOTGHS_HSTIER = UOTGHS_HSTIER_HWUPIES
   9d444:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
		otg_freeze_clock();
   9d448:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   9d44c:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   9d450:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
	if (uhd_state == new_state) {
   9d454:	780b      	ldrb	r3, [r1, #0]
	enum sleepmgr_mode sleep_mode[] = {
   9d456:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
	if (uhd_state == new_state) {
   9d45a:	2b04      	cmp	r3, #4
	enum sleepmgr_mode sleep_mode[] = {
   9d45c:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
   9d460:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   9d464:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   9d468:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   9d46c:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	if (uhd_state == new_state) {
   9d470:	f43f ab05 	beq.w	9ca7e <UOTGHS_Handler+0x42>
	if(sleepmgr_locks[mode] >= 0xff) {
   9d474:	4b3f      	ldr	r3, [pc, #252]	; (9d574 <UOTGHS_Handler+0xb38>)
   9d476:	78da      	ldrb	r2, [r3, #3]
   9d478:	2aff      	cmp	r2, #255	; 0xff
   9d47a:	d01d      	beq.n	9d4b8 <UOTGHS_Handler+0xa7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9d47c:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9d480:	fab2 f282 	clz	r2, r2
   9d484:	0952      	lsrs	r2, r2, #5
   9d486:	9204      	str	r2, [sp, #16]
  __ASM volatile ("cpsid i" : : : "memory");
   9d488:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9d48a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9d48e:	2400      	movs	r4, #0
   9d490:	4a39      	ldr	r2, [pc, #228]	; (9d578 <UOTGHS_Handler+0xb3c>)
	++sleepmgr_locks[mode];
   9d492:	78d8      	ldrb	r0, [r3, #3]
   9d494:	7014      	strb	r4, [r2, #0]
	return flags;
   9d496:	9c04      	ldr	r4, [sp, #16]
   9d498:	3001      	adds	r0, #1
   9d49a:	70d8      	strb	r0, [r3, #3]
	if (cpu_irq_is_enabled_flags(flags))
   9d49c:	b124      	cbz	r4, 9d4a8 <UOTGHS_Handler+0xa6c>
		cpu_irq_enable();
   9d49e:	2001      	movs	r0, #1
   9d4a0:	7010      	strb	r0, [r2, #0]
   9d4a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9d4a6:	b662      	cpsie	i
	if (uhd_state != UHD_STATE_OFF) {
   9d4a8:	7808      	ldrb	r0, [r1, #0]
   9d4aa:	2800      	cmp	r0, #0
   9d4ac:	f040 8371 	bne.w	9db92 <UOTGHS_Handler+0x1156>
	uhd_state = new_state;
   9d4b0:	2304      	movs	r3, #4
   9d4b2:	700b      	strb	r3, [r1, #0]
   9d4b4:	f7ff bae3 	b.w	9ca7e <UOTGHS_Handler+0x42>
   9d4b8:	e7fe      	b.n	9d4b8 <UOTGHS_Handler+0xa7c>
		uhd_ack_vbus_error_interrupt();
   9d4ba:	2208      	movs	r2, #8
   9d4bc:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
   9d4c0:	f7ff badd 	b.w	9ca7e <UOTGHS_Handler+0x42>
	if (Is_otg_vbus_transition()) {
   9d4c4:	4a28      	ldr	r2, [pc, #160]	; (9d568 <UOTGHS_Handler+0xb2c>)
   9d4c6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   9d4ca:	0798      	lsls	r0, r3, #30
   9d4cc:	f140 81b9 	bpl.w	9d842 <UOTGHS_Handler+0xe06>
		otg_ack_vbus_transition();
   9d4d0:	2302      	movs	r3, #2
   9d4d2:	f8c2 3808 	str.w	r3, [r2, #2056]	; 0x808
		if (Is_otg_vbus_high()) {
   9d4d6:	f8d2 0804 	ldr.w	r0, [r2, #2052]	; 0x804
   9d4da:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
   9d4de:	f000 81e5 	beq.w	9d8ac <UOTGHS_Handler+0xe70>
	enum sleepmgr_mode sleep_mode[] = {
   9d4e2:	2203      	movs	r2, #3
   9d4e4:	2405      	movs	r4, #5
	if (uhd_state == new_state) {
   9d4e6:	4922      	ldr	r1, [pc, #136]	; (9d570 <UOTGHS_Handler+0xb34>)
	enum sleepmgr_mode sleep_mode[] = {
   9d4e8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	if (uhd_state == new_state) {
   9d4ec:	7808      	ldrb	r0, [r1, #0]
	enum sleepmgr_mode sleep_mode[] = {
   9d4ee:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	if (uhd_state == new_state) {
   9d4f2:	4290      	cmp	r0, r2
	enum sleepmgr_mode sleep_mode[] = {
   9d4f4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   9d4f8:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
   9d4fc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   9d500:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	if (uhd_state == new_state) {
   9d504:	f43f aabb 	beq.w	9ca7e <UOTGHS_Handler+0x42>
	if(sleepmgr_locks[mode] >= 0xff) {
   9d508:	4b1a      	ldr	r3, [pc, #104]	; (9d574 <UOTGHS_Handler+0xb38>)
   9d50a:	789a      	ldrb	r2, [r3, #2]
   9d50c:	2aff      	cmp	r2, #255	; 0xff
   9d50e:	d01a      	beq.n	9d546 <UOTGHS_Handler+0xb0a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9d510:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9d514:	fab2 f282 	clz	r2, r2
   9d518:	0952      	lsrs	r2, r2, #5
   9d51a:	9208      	str	r2, [sp, #32]
  __ASM volatile ("cpsid i" : : : "memory");
   9d51c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9d51e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9d522:	2400      	movs	r4, #0
   9d524:	4a14      	ldr	r2, [pc, #80]	; (9d578 <UOTGHS_Handler+0xb3c>)
	++sleepmgr_locks[mode];
   9d526:	7898      	ldrb	r0, [r3, #2]
   9d528:	7014      	strb	r4, [r2, #0]
	return flags;
   9d52a:	9c08      	ldr	r4, [sp, #32]
   9d52c:	3001      	adds	r0, #1
   9d52e:	7098      	strb	r0, [r3, #2]
	if (cpu_irq_is_enabled_flags(flags))
   9d530:	2c00      	cmp	r4, #0
   9d532:	f040 8413 	bne.w	9dd5c <UOTGHS_Handler+0x1320>
	if (uhd_state != UHD_STATE_OFF) {
   9d536:	7808      	ldrb	r0, [r1, #0]
   9d538:	2800      	cmp	r0, #0
   9d53a:	f040 83f2 	bne.w	9dd22 <UOTGHS_Handler+0x12e6>
	uhd_state = new_state;
   9d53e:	2303      	movs	r3, #3
   9d540:	700b      	strb	r3, [r1, #0]
   9d542:	f7ff ba9c 	b.w	9ca7e <UOTGHS_Handler+0x42>
   9d546:	e7fe      	b.n	9d546 <UOTGHS_Handler+0xb0a>
		uhd_ack_stall(pipe);
   9d548:	2140      	movs	r1, #64	; 0x40
		uhd_reset_data_toggle(pipe);
   9d54a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
		uhd_ack_stall(pipe);
   9d54e:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
   9d552:	2104      	movs	r1, #4
		uhd_reset_data_toggle(pipe);
   9d554:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
   9d558:	f7ff bb6b 	b.w	9cc32 <UOTGHS_Handler+0x1f6>
		return UHD_TRANS_DT_MISMATCH;
   9d55c:	2103      	movs	r1, #3
   9d55e:	f7ff bb68 	b.w	9cc32 <UOTGHS_Handler+0x1f6>
   9d562:	bf00      	nop
   9d564:	20072e1c 	.word	0x20072e1c
   9d568:	400ac000 	.word	0x400ac000
   9d56c:	0009b6c9 	.word	0x0009b6c9
   9d570:	20072e25 	.word	0x20072e25
   9d574:	20072f9c 	.word	0x20072f9c
   9d578:	2007026b 	.word	0x2007026b
		uhd_enable_bank_interrupt(pipe);
   9d57c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   9d580:	f8c2 15f0 	str.w	r1, [r2, #1520]	; 0x5f0
		if (Is_uhd_pipe_iso(pipe)) {
   9d584:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
   9d588:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
   9d58c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   9d590:	f47f aa75 	bne.w	9ca7e <UOTGHS_Handler+0x42>
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9d594:	277f      	movs	r7, #127	; 0x7f
   9d596:	00c1      	lsls	r1, r0, #3
   9d598:	f001 0118 	and.w	r1, r1, #24
   9d59c:	408f      	lsls	r7, r1
   9d59e:	fa97 fea7 	rbit	lr, r7
   9d5a2:	49b5      	ldr	r1, [pc, #724]	; (9d878 <UOTGHS_Handler+0xe3c>)
   9d5a4:	f3c0 0087 	ubfx	r0, r0, #2, #8
   9d5a8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9d5ac:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9d5b0:	fabe fe8e 	clz	lr, lr
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9d5b4:	f401 7140 	and.w	r1, r1, #768	; 0x300
   9d5b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   9d5bc:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
	if (ptr_job->busy == false) {
   9d5c0:	eb06 0205 	add.w	r2, r6, r5
   9d5c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   9d5c8:	7c92      	ldrb	r2, [r2, #18]
	uint32_t dev_ep = uhd_get_pipe_endpoint_address(pipe);
   9d5ca:	f3c1 4103 	ubfx	r1, r1, #16, #4
   9d5ce:	bf08      	it	eq
   9d5d0:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
	if (ptr_job->busy == false) {
   9d5d4:	07d6      	lsls	r6, r2, #31
   9d5d6:	f57f aa52 	bpl.w	9ca7e <UOTGHS_Handler+0x42>
	ptr_job->busy = false;
   9d5da:	2214      	movs	r2, #20
   9d5dc:	fb02 f505 	mul.w	r5, r2, r5
   9d5e0:	1962      	adds	r2, r4, r5
   9d5e2:	7c96      	ldrb	r6, [r2, #18]
	if (NULL == ptr_job->call_end) {
   9d5e4:	5964      	ldr	r4, [r4, r5]
	ptr_job->busy = false;
   9d5e6:	f36f 0600 	bfc	r6, #0, #1
   9d5ea:	7496      	strb	r6, [r2, #18]
	if (NULL == ptr_job->call_end) {
   9d5ec:	2c00      	cmp	r4, #0
   9d5ee:	f43f aa46 	beq.w	9ca7e <UOTGHS_Handler+0x42>
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9d5f2:	4038      	ands	r0, r7
   9d5f4:	fa20 f00e 	lsr.w	r0, r0, lr
	ptr_job->call_end(dev_addr, dev_ep, status, ptr_job->nb_trans);
   9d5f8:	b2c0      	uxtb	r0, r0
   9d5fa:	2200      	movs	r2, #0
   9d5fc:	47a0      	blx	r4
   9d5fe:	f7ff ba3e 	b.w	9ca7e <UOTGHS_Handler+0x42>
		if (!Is_uhd_pipe_frozen(pipe)) {
   9d602:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d606:	0398      	lsls	r0, r3, #14
		uhd_unfreeze_pipe(pipe);
   9d608:	bf44      	itt	mi
   9d60a:	f44f 3300 	movmi.w	r3, #131072	; 0x20000
   9d60e:	f8c2 3620 	strmi.w	r3, [r2, #1568]	; 0x620
   9d612:	f7ff bb39 	b.w	9cc88 <UOTGHS_Handler+0x24c>
		if (!Is_uhd_pipe_frozen(pipe)) {
   9d616:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d61a:	039b      	lsls	r3, r3, #14
		uhd_unfreeze_pipe(pipe);
   9d61c:	bf44      	itt	mi
   9d61e:	f44f 3300 	movmi.w	r3, #131072	; 0x20000
   9d622:	f8c2 3620 	strmi.w	r3, [r2, #1568]	; 0x620
   9d626:	f7ff bb3c 	b.w	9cca2 <UOTGHS_Handler+0x266>
		if (!Is_uhd_pipe_frozen(pipe)) {
   9d62a:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d62e:	039e      	lsls	r6, r3, #14
		uhd_unfreeze_pipe(pipe);
   9d630:	bf44      	itt	mi
   9d632:	f44f 3300 	movmi.w	r3, #131072	; 0x20000
   9d636:	f8c2 3620 	strmi.w	r3, [r2, #1568]	; 0x620
   9d63a:	f7ff bb3f 	b.w	9ccbc <UOTGHS_Handler+0x280>
		if (!Is_uhd_pipe_frozen(pipe)) {
   9d63e:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d642:	0398      	lsls	r0, r3, #14
		uhd_unfreeze_pipe(pipe);
   9d644:	bf44      	itt	mi
   9d646:	f44f 3300 	movmi.w	r3, #131072	; 0x20000
   9d64a:	f8c2 3620 	strmi.w	r3, [r2, #1568]	; 0x620
   9d64e:	f7ff bb42 	b.w	9ccd6 <UOTGHS_Handler+0x29a>
		if (!Is_uhd_pipe_frozen(pipe)) {
   9d652:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d656:	039b      	lsls	r3, r3, #14
		uhd_unfreeze_pipe(pipe);
   9d658:	bf44      	itt	mi
   9d65a:	f44f 3300 	movmi.w	r3, #131072	; 0x20000
   9d65e:	f8c2 3620 	strmi.w	r3, [r2, #1568]	; 0x620
   9d662:	f7ff bb45 	b.w	9ccf0 <UOTGHS_Handler+0x2b4>
			uhd_ctrl_phase_data_out();
   9d666:	4b85      	ldr	r3, [pc, #532]	; (9d87c <UOTGHS_Handler+0xe40>)
   9d668:	4798      	blx	r3
   9d66a:	f7ff ba08 	b.w	9ca7e <UOTGHS_Handler+0x42>
		if (!Is_uhd_pipe_frozen(pipe)) {
   9d66e:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d672:	039e      	lsls	r6, r3, #14
		uhd_unfreeze_pipe(pipe);
   9d674:	bf44      	itt	mi
   9d676:	f44f 3300 	movmi.w	r3, #131072	; 0x20000
   9d67a:	f8c2 3620 	strmi.w	r3, [r2, #1568]	; 0x620
   9d67e:	f7ff bb44 	b.w	9cd0a <UOTGHS_Handler+0x2ce>
		if (!Is_uhd_pipe_frozen(pipe)) {
   9d682:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d686:	0398      	lsls	r0, r3, #14
		uhd_unfreeze_pipe(pipe);
   9d688:	bf44      	itt	mi
   9d68a:	f44f 3300 	movmi.w	r3, #131072	; 0x20000
   9d68e:	f8c2 3620 	strmi.w	r3, [r2, #1568]	; 0x620
   9d692:	f7ff bb47 	b.w	9cd24 <UOTGHS_Handler+0x2e8>
		if (!Is_uhd_pipe_frozen(pipe)) {
   9d696:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d69a:	039b      	lsls	r3, r3, #14
		uhd_unfreeze_pipe(pipe);
   9d69c:	bf44      	itt	mi
   9d69e:	f44f 3300 	movmi.w	r3, #131072	; 0x20000
   9d6a2:	f8c2 3620 	strmi.w	r3, [r2, #1568]	; 0x620
   9d6a6:	f7ff bb4a 	b.w	9cd3e <UOTGHS_Handler+0x302>
		if (!Is_uhd_pipe_frozen(pipe)) {
   9d6aa:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	; 0x5c0
   9d6ae:	039e      	lsls	r6, r3, #14
		uhd_unfreeze_pipe(pipe);
   9d6b0:	bf44      	itt	mi
   9d6b2:	f44f 3300 	movmi.w	r3, #131072	; 0x20000
   9d6b6:	f8c2 3620 	strmi.w	r3, [r2, #1568]	; 0x620
   9d6ba:	f7ff bb4d 	b.w	9cd58 <UOTGHS_Handler+0x31c>
	if (Is_uhd_stall(0)) {
   9d6be:	f8d2 1530 	ldr.w	r1, [r2, #1328]	; 0x530
   9d6c2:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   9d6c6:	f040 8230 	bne.w	9db2a <UOTGHS_Handler+0x10ee>
	if (Is_uhd_pipe_error(0)) {
   9d6ca:	f8d2 3530 	ldr.w	r3, [r2, #1328]	; 0x530
   9d6ce:	071d      	lsls	r5, r3, #28
   9d6d0:	f57f a9d5 	bpl.w	9ca7e <UOTGHS_Handler+0x42>
	uint32_t error = uhd_error_status(pipe) &
   9d6d4:	f8d2 3680 	ldr.w	r3, [r2, #1664]	; 0x680
	uhd_ack_all_errors(pipe);
   9d6d8:	f8c2 1680 	str.w	r1, [r2, #1664]	; 0x680
	uint32_t error = uhd_error_status(pipe) &
   9d6dc:	f003 030f 	and.w	r3, r3, #15
	switch(error) {
   9d6e0:	2b01      	cmp	r3, #1
   9d6e2:	f000 821f 	beq.w	9db24 <UOTGHS_Handler+0x10e8>
		return UHD_TRANS_PIDFAILURE;
   9d6e6:	2b08      	cmp	r3, #8
   9d6e8:	bf0c      	ite	eq
   9d6ea:	2005      	moveq	r0, #5
   9d6ec:	2006      	movne	r0, #6
   9d6ee:	e577      	b.n	9d1e0 <UOTGHS_Handler+0x7a4>
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
   9d6f0:	2602      	movs	r6, #2
   9d6f2:	e47e      	b.n	9cff2 <UOTGHS_Handler+0x5b6>
			uhd_ack_short_packet(pipe);
   9d6f4:	2380      	movs	r3, #128	; 0x80
   9d6f6:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			uhd_pipe_in_received(pipe);
   9d6fa:	4b61      	ldr	r3, [pc, #388]	; (9d880 <UOTGHS_Handler+0xe44>)
   9d6fc:	4798      	blx	r3
   9d6fe:	f7ff b9be 	b.w	9ca7e <UOTGHS_Handler+0x42>
   9d702:	4d60      	ldr	r5, [pc, #384]	; (9d884 <UOTGHS_Handler+0xe48>)
	nb_byte_received = uhd_byte_count(0);
   9d704:	f8d2 4530 	ldr.w	r4, [r2, #1328]	; 0x530
   9d708:	682b      	ldr	r3, [r5, #0]
	b_short_packet = Is_uhd_short_packet(0);
   9d70a:	f8d2 a530 	ldr.w	sl, [r2, #1328]	; 0x530
   9d70e:	8b58      	ldrh	r0, [r3, #26]
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
   9d710:	4f5d      	ldr	r7, [pc, #372]	; (9d888 <UOTGHS_Handler+0xe4c>)
				uhd_get_configured_address(0),
   9d712:	4e59      	ldr	r6, [pc, #356]	; (9d878 <UOTGHS_Handler+0xe3c>)
		uhd_ctrl_nb_trans++;
   9d714:	f8df 9174 	ldr.w	r9, [pc, #372]	; 9d88c <UOTGHS_Handler+0xe50>
	nb_byte_received = uhd_byte_count(0);
   9d718:	f3c4 5407 	ubfx	r4, r4, #20, #8
				|| !uhd_ctrl_request_first->callback_run(
   9d71c:	f103 021a 	add.w	r2, r3, #26
   9d720:	f103 010c 	add.w	r1, r3, #12
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
   9d724:	b1c8      	cbz	r0, 9d75a <UOTGHS_Handler+0xd1e>
   9d726:	bb44      	cbnz	r4, 9d77a <UOTGHS_Handler+0xd3e>
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
   9d728:	4958      	ldr	r1, [pc, #352]	; (9d88c <UOTGHS_Handler+0xe50>)
   9d72a:	f8b3 2017 	ldrh.w	r2, [r3, #23]
   9d72e:	880b      	ldrh	r3, [r1, #0]
   9d730:	429a      	cmp	r2, r3
   9d732:	f000 81dc 	beq.w	9daee <UOTGHS_Handler+0x10b2>
			|| b_short_packet) {
   9d736:	f01a 0f80 	tst.w	sl, #128	; 0x80
   9d73a:	f040 81d8 	bne.w	9daee <UOTGHS_Handler+0x10b2>
	uhd_enable_in_received_interrupt(0);
   9d73e:	2001      	movs	r0, #1
	uhd_ack_fifocon(0);
   9d740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	uhd_unfreeze_pipe(0);
   9d744:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uhd_enable_in_received_interrupt(0);
   9d748:	4b51      	ldr	r3, [pc, #324]	; (9d890 <UOTGHS_Handler+0xe54>)
   9d74a:	f8c3 05f0 	str.w	r0, [r3, #1520]	; 0x5f0
	uhd_ack_fifocon(0);
   9d74e:	f8c3 1620 	str.w	r1, [r3, #1568]	; 0x620
	uhd_unfreeze_pipe(0);
   9d752:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
   9d756:	f7ff b992 	b.w	9ca7e <UOTGHS_Handler+0x42>
	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
   9d75a:	2c00      	cmp	r4, #0
   9d75c:	d0e4      	beq.n	9d728 <UOTGHS_Handler+0xcec>
		if (uhd_ctrl_request_first->callback_run == NULL
   9d75e:	685b      	ldr	r3, [r3, #4]
   9d760:	2b00      	cmp	r3, #0
   9d762:	f000 81c4 	beq.w	9daee <UOTGHS_Handler+0x10b2>
				uhd_get_configured_address(0),
   9d766:	6830      	ldr	r0, [r6, #0]
				|| !uhd_ctrl_request_first->callback_run(
   9d768:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   9d76c:	4798      	blx	r3
   9d76e:	2800      	cmp	r0, #0
   9d770:	f000 81bd 	beq.w	9daee <UOTGHS_Handler+0x10b2>
   9d774:	682b      	ldr	r3, [r5, #0]
   9d776:	8b58      	ldrh	r0, [r3, #26]
   9d778:	e7d0      	b.n	9d71c <UOTGHS_Handler+0xce0>
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
   9d77a:	68da      	ldr	r2, [r3, #12]
		nb_byte_received--;
   9d77c:	3c01      	subs	r4, #1
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
   9d77e:	1c51      	adds	r1, r2, #1
   9d780:	60d9      	str	r1, [r3, #12]
   9d782:	783b      	ldrb	r3, [r7, #0]
		nb_byte_received--;
   9d784:	b2e4      	uxtb	r4, r4
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
   9d786:	7013      	strb	r3, [r2, #0]
		uhd_ctrl_request_first->payload_size--;
   9d788:	682b      	ldr	r3, [r5, #0]
		uhd_ctrl_nb_trans++;
   9d78a:	f8b9 2000 	ldrh.w	r2, [r9]
		uhd_ctrl_request_first->payload_size--;
   9d78e:	8b58      	ldrh	r0, [r3, #26]
		uhd_ctrl_nb_trans++;
   9d790:	3201      	adds	r2, #1
		uhd_ctrl_request_first->payload_size--;
   9d792:	3801      	subs	r0, #1
   9d794:	b280      	uxth	r0, r0
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
   9d796:	3701      	adds	r7, #1
		uhd_ctrl_request_first->payload_size--;
   9d798:	8358      	strh	r0, [r3, #26]
		uhd_ctrl_nb_trans++;
   9d79a:	f8a9 2000 	strh.w	r2, [r9]
   9d79e:	e7bd      	b.n	9d71c <UOTGHS_Handler+0xce0>
		uhd_ack_disconnection();
   9d7a0:	2302      	movs	r3, #2
		UOTGHS->UOTGHS_HSTIDR = UOTGHS_HSTIDR_HWUPIEC
   9d7a2:	2658      	movs	r6, #88	; 0x58
	enum sleepmgr_mode sleep_mode[] = {
   9d7a4:	2403      	movs	r4, #3
   9d7a6:	2505      	movs	r5, #5
		uhd_ack_disconnection();
   9d7a8:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		uhd_disable_disconnection_int();
   9d7ac:	f8c2 3414 	str.w	r3, [r2, #1044]	; 0x414
		uhd_stop_reset();
   9d7b0:	f8d2 0400 	ldr.w	r0, [r2, #1024]	; 0x400
	if (uhd_state == new_state) {
   9d7b4:	4937      	ldr	r1, [pc, #220]	; (9d894 <UOTGHS_Handler+0xe58>)
		uhd_stop_reset();
   9d7b6:	f420 7000 	bic.w	r0, r0, #512	; 0x200
   9d7ba:	f8c2 0400 	str.w	r0, [r2, #1024]	; 0x400
		UOTGHS->UOTGHS_HSTIDR = UOTGHS_HSTIDR_HWUPIEC
   9d7be:	f8c2 6414 	str.w	r6, [r2, #1044]	; 0x414
	if (uhd_state == new_state) {
   9d7c2:	780a      	ldrb	r2, [r1, #0]
	enum sleepmgr_mode sleep_mode[] = {
   9d7c4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	if (uhd_state == new_state) {
   9d7c8:	42a2      	cmp	r2, r4
	enum sleepmgr_mode sleep_mode[] = {
   9d7ca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   9d7ce:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   9d7d2:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
   9d7d6:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
   9d7da:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	if (uhd_state == new_state) {
   9d7de:	d01f      	beq.n	9d820 <UOTGHS_Handler+0xde4>
	if(sleepmgr_locks[mode] >= 0xff) {
   9d7e0:	4b2d      	ldr	r3, [pc, #180]	; (9d898 <UOTGHS_Handler+0xe5c>)
   9d7e2:	789a      	ldrb	r2, [r3, #2]
   9d7e4:	2aff      	cmp	r2, #255	; 0xff
   9d7e6:	d02b      	beq.n	9d840 <UOTGHS_Handler+0xe04>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9d7e8:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9d7ec:	fab2 f282 	clz	r2, r2
   9d7f0:	0952      	lsrs	r2, r2, #5
   9d7f2:	9206      	str	r2, [sp, #24]
  __ASM volatile ("cpsid i" : : : "memory");
   9d7f4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9d7f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9d7fa:	2400      	movs	r4, #0
   9d7fc:	4a27      	ldr	r2, [pc, #156]	; (9d89c <UOTGHS_Handler+0xe60>)
	++sleepmgr_locks[mode];
   9d7fe:	7898      	ldrb	r0, [r3, #2]
   9d800:	7014      	strb	r4, [r2, #0]
	return flags;
   9d802:	9c06      	ldr	r4, [sp, #24]
   9d804:	3001      	adds	r0, #1
   9d806:	7098      	strb	r0, [r3, #2]
	if (cpu_irq_is_enabled_flags(flags))
   9d808:	b124      	cbz	r4, 9d814 <UOTGHS_Handler+0xdd8>
		cpu_irq_enable();
   9d80a:	2001      	movs	r0, #1
   9d80c:	7010      	strb	r0, [r2, #0]
   9d80e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9d812:	b662      	cpsie	i
	if (uhd_state != UHD_STATE_OFF) {
   9d814:	7808      	ldrb	r0, [r1, #0]
   9d816:	2800      	cmp	r0, #0
   9d818:	f040 81d7 	bne.w	9dbca <UOTGHS_Handler+0x118e>
	uhd_state = new_state;
   9d81c:	2303      	movs	r3, #3
   9d81e:	700b      	strb	r3, [r1, #0]
		uhd_suspend_start = 0;
   9d820:	2300      	movs	r3, #0
		uhd_ack_connection();
   9d822:	2101      	movs	r1, #1
   9d824:	4a1a      	ldr	r2, [pc, #104]	; (9d890 <UOTGHS_Handler+0xe54>)
		uhd_suspend_start = 0;
   9d826:	4d1e      	ldr	r5, [pc, #120]	; (9d8a0 <UOTGHS_Handler+0xe64>)
		uhd_resume_start = 0;
   9d828:	4c1e      	ldr	r4, [pc, #120]	; (9d8a4 <UOTGHS_Handler+0xe68>)
		uhd_ack_connection();
   9d82a:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
		uhc_notify_connection(false);
   9d82e:	4618      	mov	r0, r3
		uhd_enable_connection_int();
   9d830:	f8c2 1418 	str.w	r1, [r2, #1048]	; 0x418
		uhc_notify_connection(false);
   9d834:	4a1c      	ldr	r2, [pc, #112]	; (9d8a8 <UOTGHS_Handler+0xe6c>)
		uhd_suspend_start = 0;
   9d836:	702b      	strb	r3, [r5, #0]
		uhd_resume_start = 0;
   9d838:	7023      	strb	r3, [r4, #0]
		uhc_notify_connection(false);
   9d83a:	4790      	blx	r2
   9d83c:	f7ff b91f 	b.w	9ca7e <UOTGHS_Handler+0x42>
   9d840:	e7fe      	b.n	9d840 <UOTGHS_Handler+0xe04>
	if (Is_uhd_errors_interrupt_enabled() && Is_uhd_errors_interrupt()) {
   9d842:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   9d846:	f013 0fd8 	tst.w	r3, #216	; 0xd8
   9d84a:	d005      	beq.n	9d858 <UOTGHS_Handler+0xe1c>
   9d84c:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   9d850:	f013 0fd8 	tst.w	r3, #216	; 0xd8
   9d854:	f040 8191 	bne.w	9db7a <UOTGHS_Handler+0x113e>
	if (Is_uhd_vbus_enabled() && !Is_otg_vbus_high()) {
   9d858:	4b0d      	ldr	r3, [pc, #52]	; (9d890 <UOTGHS_Handler+0xe54>)
   9d85a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   9d85e:	0591      	lsls	r1, r2, #22
   9d860:	f57f a90d 	bpl.w	9ca7e <UOTGHS_Handler+0x42>
   9d864:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   9d868:	0512      	lsls	r2, r2, #20
   9d86a:	f53f a908 	bmi.w	9ca7e <UOTGHS_Handler+0x42>
		uhd_ack_errors_interrupt();
   9d86e:	22d8      	movs	r2, #216	; 0xd8
   9d870:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
   9d874:	f7ff b903 	b.w	9ca7e <UOTGHS_Handler+0x42>
   9d878:	400ac424 	.word	0x400ac424
   9d87c:	0009bff5 	.word	0x0009bff5
   9d880:	0009c549 	.word	0x0009c549
   9d884:	20072fa8 	.word	0x20072fa8
   9d888:	20180000 	.word	0x20180000
   9d88c:	20072fac 	.word	0x20072fac
   9d890:	400ac000 	.word	0x400ac000
   9d894:	20072e25 	.word	0x20072e25
   9d898:	20072f9c 	.word	0x20072f9c
   9d89c:	2007026b 	.word	0x2007026b
   9d8a0:	20072e26 	.word	0x20072e26
   9d8a4:	20072e24 	.word	0x20072e24
   9d8a8:	0009b63d 	.word	0x0009b63d
	enum sleepmgr_mode sleep_mode[] = {
   9d8ac:	2203      	movs	r2, #3
   9d8ae:	2505      	movs	r5, #5
	if (uhd_state == new_state) {
   9d8b0:	49d4      	ldr	r1, [pc, #848]	; (9dc04 <UOTGHS_Handler+0x11c8>)
	enum sleepmgr_mode sleep_mode[] = {
   9d8b2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	if (uhd_state == new_state) {
   9d8b6:	780c      	ldrb	r4, [r1, #0]
	enum sleepmgr_mode sleep_mode[] = {
   9d8b8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	if (uhd_state == new_state) {
   9d8bc:	2c02      	cmp	r4, #2
	enum sleepmgr_mode sleep_mode[] = {
   9d8be:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   9d8c2:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
   9d8c6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   9d8ca:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	if (uhd_state == new_state) {
   9d8ce:	d01b      	beq.n	9d908 <UOTGHS_Handler+0xecc>
	if(sleepmgr_locks[mode] >= 0xff) {
   9d8d0:	4bcd      	ldr	r3, [pc, #820]	; (9dc08 <UOTGHS_Handler+0x11cc>)
   9d8d2:	789a      	ldrb	r2, [r3, #2]
   9d8d4:	2aff      	cmp	r2, #255	; 0xff
   9d8d6:	d020      	beq.n	9d91a <UOTGHS_Handler+0xede>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9d8d8:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9d8dc:	fab2 f282 	clz	r2, r2
   9d8e0:	0952      	lsrs	r2, r2, #5
   9d8e2:	920a      	str	r2, [sp, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
   9d8e4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9d8e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9d8ea:	4ac8      	ldr	r2, [pc, #800]	; (9dc0c <UOTGHS_Handler+0x11d0>)
	++sleepmgr_locks[mode];
   9d8ec:	789c      	ldrb	r4, [r3, #2]
   9d8ee:	7010      	strb	r0, [r2, #0]
	return flags;
   9d8f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   9d8f2:	1c60      	adds	r0, r4, #1
   9d8f4:	7098      	strb	r0, [r3, #2]
	if (cpu_irq_is_enabled_flags(flags))
   9d8f6:	2d00      	cmp	r5, #0
   9d8f8:	f040 81de 	bne.w	9dcb8 <UOTGHS_Handler+0x127c>
	if (uhd_state != UHD_STATE_OFF) {
   9d8fc:	7808      	ldrb	r0, [r1, #0]
   9d8fe:	2800      	cmp	r0, #0
   9d900:	f040 81f3 	bne.w	9dcea <UOTGHS_Handler+0x12ae>
	uhd_state = new_state;
   9d904:	2302      	movs	r3, #2
   9d906:	700b      	strb	r3, [r1, #0]
			otg_freeze_clock();
   9d908:	4ac1      	ldr	r2, [pc, #772]	; (9dc10 <UOTGHS_Handler+0x11d4>)
   9d90a:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   9d90e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   9d912:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
   9d916:	f7ff b8b2 	b.w	9ca7e <UOTGHS_Handler+0x42>
   9d91a:	e7fe      	b.n	9d91a <UOTGHS_Handler+0xede>
	uhd_pipe_job_t *ptr_job = &uhd_pipe_job[pipe - 1];
   9d91c:	1e59      	subs	r1, r3, #1
	if (!ptr_job->busy) {
   9d91e:	ea4f 0881 	mov.w	r8, r1, lsl #2
   9d922:	4cbc      	ldr	r4, [pc, #752]	; (9dc14 <UOTGHS_Handler+0x11d8>)
	uhd_pipe_job_t *ptr_job = &uhd_pipe_job[pipe - 1];
   9d924:	9100      	str	r1, [sp, #0]
	if (!ptr_job->busy) {
   9d926:	4441      	add	r1, r8
   9d928:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   9d92c:	7c8d      	ldrb	r5, [r1, #18]
	uint32_t pkt_size = uhd_get_pipe_size(pipe);
   9d92e:	f8d2 0500 	ldr.w	r0, [r2, #1280]	; 0x500
	if (!ptr_job->busy) {
   9d932:	07ee      	lsls	r6, r5, #31
   9d934:	f57f a8a3 	bpl.w	9ca7e <UOTGHS_Handler+0x42>
	uint32_t pkt_size = uhd_get_pipe_size(pipe);
   9d938:	2508      	movs	r5, #8
	nb_remain = ptr_job->buf_size - ptr_job->nb_trans;
   9d93a:	688e      	ldr	r6, [r1, #8]
   9d93c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
	uint32_t pkt_size = uhd_get_pipe_size(pipe);
   9d940:	f3c0 1002 	ubfx	r0, r0, #4, #3
   9d944:	fa05 f000 	lsl.w	r0, r5, r0
	nb_remain = ptr_job->buf_size - ptr_job->nb_trans;
   9d948:	9602      	str	r6, [sp, #8]
   9d94a:	eba6 060c 	sub.w	r6, r6, ip
	nb_data = min(nb_remain, pkt_size);
   9d94e:	4286      	cmp	r6, r0
	uint32_t pkt_size = uhd_get_pipe_size(pipe);
   9d950:	9001      	str	r0, [sp, #4]
	nb_data = min(nb_remain, pkt_size);
   9d952:	bf28      	it	cs
   9d954:	4606      	movcs	r6, r0
	uhd_ack_out_ready(pipe);
   9d956:	2002      	movs	r0, #2
   9d958:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	if (nb_data) {
   9d95c:	2e00      	cmp	r6, #0
   9d95e:	f000 80ea 	beq.w	9db36 <UOTGHS_Handler+0x10fa>
		ptr_dst = (uint8_t *) & uhd_get_pipe_fifo_access(pipe, 8);
   9d962:	03db      	lsls	r3, r3, #15
		ptr_src = &ptr_job->buf[ptr_job->nb_trans];
   9d964:	f8d1 9004 	ldr.w	r9, [r1, #4]
   9d968:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 9dc34 <UOTGHS_Handler+0x11f8>
		ptr_dst = (uint8_t *) & uhd_get_pipe_fifo_access(pipe, 8);
   9d96c:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   9d970:	f10c 0e04 	add.w	lr, ip, #4
   9d974:	f500 10c0 	add.w	r0, r0, #1572864	; 0x180000
   9d978:	449a      	add	sl, r3
		ptr_src = &ptr_job->buf[ptr_job->nb_trans];
   9d97a:	eb09 050c 	add.w	r5, r9, ip
   9d97e:	44ce      	add	lr, r9
   9d980:	4555      	cmp	r5, sl
   9d982:	bf38      	it	cc
   9d984:	4570      	cmpcc	r0, lr
		ptr_job->nb_trans += nb_data;
   9d986:	eb0c 0b06 	add.w	fp, ip, r6
   9d98a:	f8c1 b00c 	str.w	fp, [r1, #12]
   9d98e:	f0c0 8199 	bcc.w	9dcc4 <UOTGHS_Handler+0x1288>
   9d992:	2e0b      	cmp	r6, #11
   9d994:	f240 8196 	bls.w	9dcc4 <UOTGHS_Handler+0x1288>
   9d998:	4269      	negs	r1, r5
   9d99a:	f011 0103 	ands.w	r1, r1, #3
   9d99e:	f000 81e9 	beq.w	9dd74 <UOTGHS_Handler+0x1338>
			*ptr_dst++ = *ptr_src++;
   9d9a2:	f819 e00c 	ldrb.w	lr, [r9, ip]
   9d9a6:	2901      	cmp	r1, #1
   9d9a8:	f100 0a01 	add.w	sl, r0, #1
   9d9ac:	f880 e000 	strb.w	lr, [r0]
   9d9b0:	f105 0b01 	add.w	fp, r5, #1
   9d9b4:	f000 81dc 	beq.w	9dd70 <UOTGHS_Handler+0x1334>
   9d9b8:	f895 e001 	ldrb.w	lr, [r5, #1]
   9d9bc:	2903      	cmp	r1, #3
   9d9be:	f100 0a02 	add.w	sl, r0, #2
   9d9c2:	f880 e001 	strb.w	lr, [r0, #1]
   9d9c6:	f105 0b02 	add.w	fp, r5, #2
   9d9ca:	f040 81ce 	bne.w	9dd6a <UOTGHS_Handler+0x132e>
   9d9ce:	f895 e002 	ldrb.w	lr, [r5, #2]
   9d9d2:	f105 0b03 	add.w	fp, r5, #3
   9d9d6:	f880 e002 	strb.w	lr, [r0, #2]
		for (i = 0; i < nb_data; i++) {
   9d9da:	468e      	mov	lr, r1
			*ptr_dst++ = *ptr_src++;
   9d9dc:	f100 0a03 	add.w	sl, r0, #3
   9d9e0:	465d      	mov	r5, fp
   9d9e2:	4650      	mov	r0, sl
		for (i = 0; i < nb_data; i++) {
   9d9e4:	f04f 0a00 	mov.w	sl, #0
   9d9e8:	1a77      	subs	r7, r6, r1
   9d9ea:	440b      	add	r3, r1
   9d9ec:	f1a7 0b04 	sub.w	fp, r7, #4
   9d9f0:	4461      	add	r1, ip
   9d9f2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
   9d9f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   9d9fa:	4489      	add	r9, r1
   9d9fc:	9703      	str	r7, [sp, #12]
   9d9fe:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   9da02:	f10b 0101 	add.w	r1, fp, #1
   9da06:	9f00      	ldr	r7, [sp, #0]
   9da08:	eba3 0c09 	sub.w	ip, r3, r9
   9da0c:	ea4f 0b81 	mov.w	fp, r1, lsl #2
			*ptr_dst++ = *ptr_src++;
   9da10:	f8d9 3000 	ldr.w	r3, [r9]
   9da14:	f10a 0a01 	add.w	sl, sl, #1
   9da18:	4551      	cmp	r1, sl
   9da1a:	f849 300c 	str.w	r3, [r9, ip]
   9da1e:	f109 0904 	add.w	r9, r9, #4
   9da22:	d8f5      	bhi.n	9da10 <UOTGHS_Handler+0xfd4>
   9da24:	9700      	str	r7, [sp, #0]
   9da26:	9f03      	ldr	r7, [sp, #12]
   9da28:	44de      	add	lr, fp
   9da2a:	455f      	cmp	r7, fp
   9da2c:	eb00 030b 	add.w	r3, r0, fp
   9da30:	eb05 0c0b 	add.w	ip, r5, fp
   9da34:	f000 8150 	beq.w	9dcd8 <UOTGHS_Handler+0x129c>
   9da38:	f815 9021 	ldrb.w	r9, [r5, r1, lsl #2]
		for (i = 0; i < nb_data; i++) {
   9da3c:	f10e 0501 	add.w	r5, lr, #1
   9da40:	42ae      	cmp	r6, r5
			*ptr_dst++ = *ptr_src++;
   9da42:	f800 9021 	strb.w	r9, [r0, r1, lsl #2]
		for (i = 0; i < nb_data; i++) {
   9da46:	f240 8147 	bls.w	9dcd8 <UOTGHS_Handler+0x129c>
			*ptr_dst++ = *ptr_src++;
   9da4a:	f89c 1001 	ldrb.w	r1, [ip, #1]
		for (i = 0; i < nb_data; i++) {
   9da4e:	f10e 0e02 	add.w	lr, lr, #2
   9da52:	4576      	cmp	r6, lr
			*ptr_dst++ = *ptr_src++;
   9da54:	7059      	strb	r1, [r3, #1]
		for (i = 0; i < nb_data; i++) {
   9da56:	f240 813f 	bls.w	9dcd8 <UOTGHS_Handler+0x129c>
			*ptr_dst++ = *ptr_src++;
   9da5a:	f89c 1002 	ldrb.w	r1, [ip, #2]
   9da5e:	7099      	strb	r1, [r3, #2]
   9da60:	e13a      	b.n	9dcd8 <UOTGHS_Handler+0x129c>
			uhd_freeze_pipe(pipe);
   9da62:	f44f 3600 	mov.w	r6, #131072	; 0x20000
			uhd_disable_pipe_interrupt(pipe);
   9da66:	f44f 7180 	mov.w	r1, #256	; 0x100
			uhd_disable_bank_interrupt(pipe);
   9da6a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9da6e:	257f      	movs	r5, #127	; 0x7f
			uhd_freeze_pipe(pipe);
   9da70:	f8c2 65f0 	str.w	r6, [r2, #1520]	; 0x5f0
			uhd_disable_pipe_interrupt(pipe);
   9da74:	4e66      	ldr	r6, [pc, #408]	; (9dc10 <UOTGHS_Handler+0x11d4>)
   9da76:	4099      	lsls	r1, r3
			uhd_disable_bank_interrupt(pipe);
   9da78:	f8c2 7620 	str.w	r7, [r2, #1568]	; 0x620
			uhd_disable_pipe_interrupt(pipe);
   9da7c:	f8c6 1414 	str.w	r1, [r6, #1044]	; 0x414
			uhd_enable_pipe_bank_autoswitch(pipe);
   9da80:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9da84:	00dc      	lsls	r4, r3, #3
   9da86:	f004 0418 	and.w	r4, r4, #24
			uhd_enable_pipe_bank_autoswitch(pipe);
   9da8a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9da8e:	fa05 f404 	lsl.w	r4, r5, r4
   9da92:	f206 4624 	addw	r6, r6, #1060	; 0x424
   9da96:	0880      	lsrs	r0, r0, #2
			uhd_enable_pipe_bank_autoswitch(pipe);
   9da98:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
	uint32_t dev_addr = uhd_get_configured_address(pipe);
   9da9c:	fa94 f5a4 	rbit	r5, r4
   9daa0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   9daa4:	f7ff bae2 	b.w	9d06c <UOTGHS_Handler+0x630>
		uhd_ack_connection();
   9daa8:	2401      	movs	r4, #1
		uhd_ack_disconnection();
   9daaa:	2202      	movs	r2, #2
		uhd_ack_connection();
   9daac:	f8c3 4408 	str.w	r4, [r3, #1032]	; 0x408
		uhd_disable_connection_int();
   9dab0:	f8c3 4414 	str.w	r4, [r3, #1044]	; 0x414
		uhd_ack_disconnection();
   9dab4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
		uhd_enable_disconnection_int();
   9dab8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		uhd_enable_sof();
   9dabc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
		uhd_sleep_mode(UHD_STATE_IDLE);
   9dac0:	4955      	ldr	r1, [pc, #340]	; (9dc18 <UOTGHS_Handler+0x11dc>)
		uhd_enable_sof();
   9dac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   9dac6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		uhd_sleep_mode(UHD_STATE_IDLE);
   9daca:	4788      	blx	r1
		uhd_suspend_start = 0;
   9dacc:	2300      	movs	r3, #0
   9dace:	4d53      	ldr	r5, [pc, #332]	; (9dc1c <UOTGHS_Handler+0x11e0>)
		uhd_resume_start = 0;
   9dad0:	4953      	ldr	r1, [pc, #332]	; (9dc20 <UOTGHS_Handler+0x11e4>)
		uhc_notify_connection(true);
   9dad2:	4620      	mov	r0, r4
   9dad4:	4a53      	ldr	r2, [pc, #332]	; (9dc24 <UOTGHS_Handler+0x11e8>)
		uhd_suspend_start = 0;
   9dad6:	702b      	strb	r3, [r5, #0]
		uhd_resume_start = 0;
   9dad8:	700b      	strb	r3, [r1, #0]
		uhc_notify_connection(true);
   9dada:	4790      	blx	r2
   9dadc:	f7fe bfcf 	b.w	9ca7e <UOTGHS_Handler+0x42>
			uhd_ack_in_received(pipe);
   9dae0:	2301      	movs	r3, #1
   9dae2:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			uhd_pipe_in_received(pipe);
   9dae6:	4b50      	ldr	r3, [pc, #320]	; (9dc28 <UOTGHS_Handler+0x11ec>)
   9dae8:	4798      	blx	r3
   9daea:	f7fe bfc8 	b.w	9ca7e <UOTGHS_Handler+0x42>
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
   9daee:	2204      	movs	r2, #4
	uhd_ack_out_ready(0);
   9daf0:	2102      	movs	r1, #2
	uhd_ack_fifocon(0);
   9daf2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
	uhd_unfreeze_pipe(0);
   9daf6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_OUT);
   9dafa:	4b45      	ldr	r3, [pc, #276]	; (9dc10 <UOTGHS_Handler+0x11d4>)
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
   9dafc:	f888 2000 	strb.w	r2, [r8]
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_OUT);
   9db00:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
   9db04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   9db08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   9db0c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	uhd_ack_out_ready(0);
   9db10:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
	uhd_enable_out_ready_interrupt(0);
   9db14:	f8c3 15f0 	str.w	r1, [r3, #1520]	; 0x5f0
	uhd_ack_fifocon(0);
   9db18:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	uhd_unfreeze_pipe(0);
   9db1c:	f8c3 0620 	str.w	r0, [r3, #1568]	; 0x620
   9db20:	f7fe bfad 	b.w	9ca7e <UOTGHS_Handler+0x42>
		return UHD_TRANS_DT_MISMATCH;
   9db24:	2003      	movs	r0, #3
   9db26:	f7ff bb5b 	b.w	9d1e0 <UOTGHS_Handler+0x7a4>
		uhd_ack_stall(0);
   9db2a:	2340      	movs	r3, #64	; 0x40
		uhd_ctrl_request_end(UHD_TRANS_STALL);
   9db2c:	2004      	movs	r0, #4
		uhd_ack_stall(0);
   9db2e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
   9db32:	f7ff bb55 	b.w	9d1e0 <UOTGHS_Handler+0x7a4>
	uhd_ack_fifocon(pipe);
   9db36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   9db3a:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
		ptr_job->b_shortpacket = false;
   9db3e:	9b00      	ldr	r3, [sp, #0]
   9db40:	4443      	add	r3, r8
   9db42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   9db46:	7c99      	ldrb	r1, [r3, #18]
   9db48:	f36f 0141 	bfc	r1, #1, #1
   9db4c:	7499      	strb	r1, [r3, #18]
	if (ptr_job->nb_trans >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   9db4e:	9b00      	ldr	r3, [sp, #0]
   9db50:	9902      	ldr	r1, [sp, #8]
   9db52:	4443      	add	r3, r8
   9db54:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   9db58:	68e3      	ldr	r3, [r4, #12]
   9db5a:	4299      	cmp	r1, r3
   9db5c:	f63e af8f 	bhi.w	9ca7e <UOTGHS_Handler+0x42>
   9db60:	7ca3      	ldrb	r3, [r4, #18]
   9db62:	079d      	lsls	r5, r3, #30
   9db64:	f53e af8b 	bmi.w	9ca7e <UOTGHS_Handler+0x42>
		uhd_disable_out_ready_interrupt(pipe);
   9db68:	2102      	movs	r1, #2
		uhd_enable_bank_interrupt(pipe);
   9db6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		uhd_disable_out_ready_interrupt(pipe);
   9db6e:	f8c2 1620 	str.w	r1, [r2, #1568]	; 0x620
		uhd_enable_bank_interrupt(pipe);
   9db72:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
   9db76:	f7fe bf82 	b.w	9ca7e <UOTGHS_Handler+0x42>
		uhd_ack_errors_interrupt();
   9db7a:	23d8      	movs	r3, #216	; 0xd8
   9db7c:	f8c2 3808 	str.w	r3, [r2, #2056]	; 0x808
   9db80:	f7fe bf7d 	b.w	9ca7e <UOTGHS_Handler+0x42>
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
   9db84:	2107      	movs	r1, #7
   9db86:	2001      	movs	r0, #1
   9db88:	4b28      	ldr	r3, [pc, #160]	; (9dc2c <UOTGHS_Handler+0x11f0>)
   9db8a:	4798      	blx	r3
   9db8c:	7ca2      	ldrb	r2, [r4, #18]
   9db8e:	f7ff b912 	b.w	9cdb6 <UOTGHS_Handler+0x37a>
		sleepmgr_unlock_mode(sleep_mode[uhd_state]);
   9db92:	ac0e      	add	r4, sp, #56	; 0x38
   9db94:	4420      	add	r0, r4
	if(sleepmgr_locks[mode] == 0) {
   9db96:	f810 4c08 	ldrb.w	r4, [r0, #-8]
   9db9a:	5d18      	ldrb	r0, [r3, r4]
   9db9c:	b1a0      	cbz	r0, 9dbc8 <UOTGHS_Handler+0x118c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9db9e:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9dba2:	fab0 f080 	clz	r0, r0
   9dba6:	0940      	lsrs	r0, r0, #5
   9dba8:	9005      	str	r0, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   9dbaa:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9dbac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9dbb0:	2500      	movs	r5, #0
	--sleepmgr_locks[mode];
   9dbb2:	5d18      	ldrb	r0, [r3, r4]
   9dbb4:	7015      	strb	r5, [r2, #0]
	return flags;
   9dbb6:	9d05      	ldr	r5, [sp, #20]
   9dbb8:	1e42      	subs	r2, r0, #1
   9dbba:	551a      	strb	r2, [r3, r4]
	if (cpu_irq_is_enabled_flags(flags))
   9dbbc:	2d00      	cmp	r5, #0
   9dbbe:	f43f ac77 	beq.w	9d4b0 <UOTGHS_Handler+0xa74>
   9dbc2:	4b1b      	ldr	r3, [pc, #108]	; (9dc30 <UOTGHS_Handler+0x11f4>)
   9dbc4:	4798      	blx	r3
   9dbc6:	e473      	b.n	9d4b0 <UOTGHS_Handler+0xa74>
   9dbc8:	e7fe      	b.n	9dbc8 <UOTGHS_Handler+0x118c>
   9dbca:	ac0e      	add	r4, sp, #56	; 0x38
   9dbcc:	4420      	add	r0, r4
	if(sleepmgr_locks[mode] == 0) {
   9dbce:	f810 4c08 	ldrb.w	r4, [r0, #-8]
   9dbd2:	5d18      	ldrb	r0, [r3, r4]
   9dbd4:	b1a0      	cbz	r0, 9dc00 <UOTGHS_Handler+0x11c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9dbd6:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9dbda:	fab0 f080 	clz	r0, r0
   9dbde:	0940      	lsrs	r0, r0, #5
   9dbe0:	9007      	str	r0, [sp, #28]
  __ASM volatile ("cpsid i" : : : "memory");
   9dbe2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9dbe4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9dbe8:	2500      	movs	r5, #0
	--sleepmgr_locks[mode];
   9dbea:	5d18      	ldrb	r0, [r3, r4]
   9dbec:	7015      	strb	r5, [r2, #0]
	return flags;
   9dbee:	9d07      	ldr	r5, [sp, #28]
   9dbf0:	1e42      	subs	r2, r0, #1
   9dbf2:	551a      	strb	r2, [r3, r4]
	if (cpu_irq_is_enabled_flags(flags))
   9dbf4:	2d00      	cmp	r5, #0
   9dbf6:	f43f ae11 	beq.w	9d81c <UOTGHS_Handler+0xde0>
   9dbfa:	4b0d      	ldr	r3, [pc, #52]	; (9dc30 <UOTGHS_Handler+0x11f4>)
   9dbfc:	4798      	blx	r3
   9dbfe:	e60d      	b.n	9d81c <UOTGHS_Handler+0xde0>
   9dc00:	e7fe      	b.n	9dc00 <UOTGHS_Handler+0x11c4>
   9dc02:	bf00      	nop
   9dc04:	20072e25 	.word	0x20072e25
   9dc08:	20072f9c 	.word	0x20072f9c
   9dc0c:	2007026b 	.word	0x2007026b
   9dc10:	400ac000 	.word	0x400ac000
   9dc14:	20072d44 	.word	0x20072d44
   9dc18:	0009c155 	.word	0x0009c155
   9dc1c:	20072e26 	.word	0x20072e26
   9dc20:	20072e24 	.word	0x20072e24
   9dc24:	0009b63d 	.word	0x0009b63d
   9dc28:	0009c549 	.word	0x0009c549
   9dc2c:	0009c3fd 	.word	0x0009c3fd
   9dc30:	0009c141 	.word	0x0009c141
   9dc34:	20180004 	.word	0x20180004
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
   9dc38:	2107      	movs	r1, #7
   9dc3a:	2002      	movs	r0, #2
   9dc3c:	4b4e      	ldr	r3, [pc, #312]	; (9dd78 <UOTGHS_Handler+0x133c>)
   9dc3e:	4798      	blx	r3
   9dc40:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   9dc44:	f7ff b8ce 	b.w	9cde4 <UOTGHS_Handler+0x3a8>
   9dc48:	2107      	movs	r1, #7
   9dc4a:	2003      	movs	r0, #3
   9dc4c:	4b4a      	ldr	r3, [pc, #296]	; (9dd78 <UOTGHS_Handler+0x133c>)
   9dc4e:	4798      	blx	r3
   9dc50:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   9dc54:	f7ff b8df 	b.w	9ce16 <UOTGHS_Handler+0x3da>
   9dc58:	2107      	movs	r1, #7
   9dc5a:	2004      	movs	r0, #4
   9dc5c:	4b46      	ldr	r3, [pc, #280]	; (9dd78 <UOTGHS_Handler+0x133c>)
   9dc5e:	4798      	blx	r3
   9dc60:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
   9dc64:	f7ff b8f2 	b.w	9ce4c <UOTGHS_Handler+0x410>
   9dc68:	2107      	movs	r1, #7
   9dc6a:	2005      	movs	r0, #5
   9dc6c:	4b42      	ldr	r3, [pc, #264]	; (9dd78 <UOTGHS_Handler+0x133c>)
   9dc6e:	4798      	blx	r3
   9dc70:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   9dc74:	f7ff b905 	b.w	9ce82 <UOTGHS_Handler+0x446>
   9dc78:	2107      	movs	r1, #7
   9dc7a:	2006      	movs	r0, #6
   9dc7c:	4b3e      	ldr	r3, [pc, #248]	; (9dd78 <UOTGHS_Handler+0x133c>)
   9dc7e:	4798      	blx	r3
   9dc80:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
   9dc84:	f7ff b918 	b.w	9ceb8 <UOTGHS_Handler+0x47c>
   9dc88:	2107      	movs	r1, #7
   9dc8a:	4b3b      	ldr	r3, [pc, #236]	; (9dd78 <UOTGHS_Handler+0x133c>)
   9dc8c:	4608      	mov	r0, r1
   9dc8e:	4798      	blx	r3
   9dc90:	f894 208a 	ldrb.w	r2, [r4, #138]	; 0x8a
   9dc94:	f7ff b92b 	b.w	9ceee <UOTGHS_Handler+0x4b2>
   9dc98:	2107      	movs	r1, #7
   9dc9a:	2008      	movs	r0, #8
   9dc9c:	4b36      	ldr	r3, [pc, #216]	; (9dd78 <UOTGHS_Handler+0x133c>)
   9dc9e:	4798      	blx	r3
   9dca0:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
   9dca4:	f7ff b93e 	b.w	9cf24 <UOTGHS_Handler+0x4e8>
   9dca8:	2107      	movs	r1, #7
   9dcaa:	2009      	movs	r0, #9
   9dcac:	4b32      	ldr	r3, [pc, #200]	; (9dd78 <UOTGHS_Handler+0x133c>)
   9dcae:	4798      	blx	r3
   9dcb0:	f894 20b2 	ldrb.w	r2, [r4, #178]	; 0xb2
   9dcb4:	f7ff b970 	b.w	9cf98 <UOTGHS_Handler+0x55c>
		cpu_irq_enable();
   9dcb8:	2001      	movs	r0, #1
   9dcba:	7010      	strb	r0, [r2, #0]
   9dcbc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9dcc0:	b662      	cpsie	i
   9dcc2:	e61b      	b.n	9d8fc <UOTGHS_Handler+0xec0>
   9dcc4:	9f00      	ldr	r7, [sp, #0]
   9dcc6:	3801      	subs	r0, #1
   9dcc8:	19ab      	adds	r3, r5, r6
			*ptr_dst++ = *ptr_src++;
   9dcca:	f815 1b01 	ldrb.w	r1, [r5], #1
		for (i = 0; i < nb_data; i++) {
   9dcce:	429d      	cmp	r5, r3
			*ptr_dst++ = *ptr_src++;
   9dcd0:	f800 1f01 	strb.w	r1, [r0, #1]!
		for (i = 0; i < nb_data; i++) {
   9dcd4:	d1f9      	bne.n	9dcca <UOTGHS_Handler+0x128e>
   9dcd6:	9700      	str	r7, [sp, #0]
	uhd_ack_fifocon(pipe);
   9dcd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   9dcdc:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
	if (nb_data < pkt_size) {
   9dce0:	9b01      	ldr	r3, [sp, #4]
   9dce2:	42b3      	cmp	r3, r6
   9dce4:	f67f af33 	bls.w	9db4e <UOTGHS_Handler+0x1112>
   9dce8:	e729      	b.n	9db3e <UOTGHS_Handler+0x1102>
		sleepmgr_unlock_mode(sleep_mode[uhd_state]);
   9dcea:	ac0e      	add	r4, sp, #56	; 0x38
   9dcec:	4420      	add	r0, r4
	if(sleepmgr_locks[mode] == 0) {
   9dcee:	f810 4c08 	ldrb.w	r4, [r0, #-8]
   9dcf2:	5d18      	ldrb	r0, [r3, r4]
   9dcf4:	b1a0      	cbz	r0, 9dd20 <UOTGHS_Handler+0x12e4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9dcf6:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9dcfa:	fab0 f080 	clz	r0, r0
   9dcfe:	0940      	lsrs	r0, r0, #5
   9dd00:	900b      	str	r0, [sp, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
   9dd02:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9dd04:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9dd08:	2500      	movs	r5, #0
	--sleepmgr_locks[mode];
   9dd0a:	5d18      	ldrb	r0, [r3, r4]
   9dd0c:	7015      	strb	r5, [r2, #0]
	return flags;
   9dd0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   9dd10:	1e42      	subs	r2, r0, #1
   9dd12:	551a      	strb	r2, [r3, r4]
	if (cpu_irq_is_enabled_flags(flags))
   9dd14:	2d00      	cmp	r5, #0
   9dd16:	f43f adf5 	beq.w	9d904 <UOTGHS_Handler+0xec8>
   9dd1a:	4b18      	ldr	r3, [pc, #96]	; (9dd7c <UOTGHS_Handler+0x1340>)
   9dd1c:	4798      	blx	r3
   9dd1e:	e5f1      	b.n	9d904 <UOTGHS_Handler+0xec8>
   9dd20:	e7fe      	b.n	9dd20 <UOTGHS_Handler+0x12e4>
   9dd22:	ac0e      	add	r4, sp, #56	; 0x38
   9dd24:	4420      	add	r0, r4
	if(sleepmgr_locks[mode] == 0) {
   9dd26:	f810 4c08 	ldrb.w	r4, [r0, #-8]
   9dd2a:	5d18      	ldrb	r0, [r3, r4]
   9dd2c:	b1a8      	cbz	r0, 9dd5a <UOTGHS_Handler+0x131e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9dd2e:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9dd32:	fab0 f080 	clz	r0, r0
   9dd36:	0940      	lsrs	r0, r0, #5
   9dd38:	9009      	str	r0, [sp, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
   9dd3a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9dd3c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9dd40:	2500      	movs	r5, #0
	--sleepmgr_locks[mode];
   9dd42:	5d18      	ldrb	r0, [r3, r4]
   9dd44:	7015      	strb	r5, [r2, #0]
	return flags;
   9dd46:	9d09      	ldr	r5, [sp, #36]	; 0x24
   9dd48:	1e42      	subs	r2, r0, #1
   9dd4a:	551a      	strb	r2, [r3, r4]
	if (cpu_irq_is_enabled_flags(flags))
   9dd4c:	2d00      	cmp	r5, #0
   9dd4e:	f43f abf6 	beq.w	9d53e <UOTGHS_Handler+0xb02>
   9dd52:	4b0a      	ldr	r3, [pc, #40]	; (9dd7c <UOTGHS_Handler+0x1340>)
   9dd54:	4798      	blx	r3
   9dd56:	f7ff bbf2 	b.w	9d53e <UOTGHS_Handler+0xb02>
   9dd5a:	e7fe      	b.n	9dd5a <UOTGHS_Handler+0x131e>
		cpu_irq_enable();
   9dd5c:	2001      	movs	r0, #1
   9dd5e:	7010      	strb	r0, [r2, #0]
   9dd60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9dd64:	b662      	cpsie	i
   9dd66:	f7ff bbe6 	b.w	9d536 <UOTGHS_Handler+0xafa>
		for (i = 0; i < nb_data; i++) {
   9dd6a:	f04f 0e02 	mov.w	lr, #2
   9dd6e:	e637      	b.n	9d9e0 <UOTGHS_Handler+0xfa4>
   9dd70:	468e      	mov	lr, r1
   9dd72:	e635      	b.n	9d9e0 <UOTGHS_Handler+0xfa4>
   9dd74:	468e      	mov	lr, r1
   9dd76:	e635      	b.n	9d9e4 <UOTGHS_Handler+0xfa8>
   9dd78:	0009c3fd 	.word	0x0009c3fd
   9dd7c:	0009c141 	.word	0x0009c141

0009dd80 <uhd_enable>:
{
   9dd80:	b5f0      	push	{r4, r5, r6, r7, lr}
   9dd82:	b089      	sub	sp, #36	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9dd84:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9dd88:	fab3 f383 	clz	r3, r3
   9dd8c:	095b      	lsrs	r3, r3, #5
   9dd8e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   9dd90:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9dd92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9dd96:	2200      	movs	r2, #0
	if (otg_initialized) {
   9dd98:	4b9b      	ldr	r3, [pc, #620]	; (9e008 <uhd_enable+0x288>)
   9dd9a:	4c9c      	ldr	r4, [pc, #624]	; (9e00c <uhd_enable+0x28c>)
   9dd9c:	781e      	ldrb	r6, [r3, #0]
   9dd9e:	7022      	strb	r2, [r4, #0]
	return flags;
   9dda0:	9d01      	ldr	r5, [sp, #4]
   9dda2:	b176      	cbz	r6, 9ddc2 <uhd_enable+0x42>
	sysclk_enable_usb();
   9dda4:	4b9a      	ldr	r3, [pc, #616]	; (9e010 <uhd_enable+0x290>)
   9dda6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_UOTGHS);
   9dda8:	4b9a      	ldr	r3, [pc, #616]	; (9e014 <uhd_enable+0x294>)
   9ddaa:	2028      	movs	r0, #40	; 0x28
   9ddac:	4798      	blx	r3
	if (!Is_otg_id_host()) {
   9ddae:	4a9a      	ldr	r2, [pc, #616]	; (9e018 <uhd_enable+0x298>)
   9ddb0:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   9ddb4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
   9ddb8:	d03f      	beq.n	9de3a <uhd_enable+0xba>
	if (cpu_irq_is_enabled_flags(flags))
   9ddba:	2d00      	cmp	r5, #0
   9ddbc:	d136      	bne.n	9de2c <uhd_enable+0xac>
}
   9ddbe:	b009      	add	sp, #36	; 0x24
   9ddc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	otg_initialized = true;
   9ddc2:	2701      	movs	r7, #1
	sysclk_enable_usb();
   9ddc4:	4a92      	ldr	r2, [pc, #584]	; (9e010 <uhd_enable+0x290>)
	otg_initialized = true;
   9ddc6:	701f      	strb	r7, [r3, #0]
	sysclk_enable_usb();
   9ddc8:	4790      	blx	r2
	pmc_enable_periph_clk(ID_UOTGHS);
   9ddca:	4b92      	ldr	r3, [pc, #584]	; (9e014 <uhd_enable+0x294>)
   9ddcc:	2028      	movs	r0, #40	; 0x28
   9ddce:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   9ddd0:	2150      	movs	r1, #80	; 0x50
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   9ddd2:	f44f 7280 	mov.w	r2, #256	; 0x100
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   9ddd6:	4b91      	ldr	r3, [pc, #580]	; (9e01c <uhd_enable+0x29c>)
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   9ddd8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   9dddc:	f883 1328 	strb.w	r1, [r3, #808]	; 0x328
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   9dde0:	605a      	str	r2, [r3, #4]
   9dde2:	4b8f      	ldr	r3, [pc, #572]	; (9e020 <uhd_enable+0x2a0>)
   9dde4:	4798      	blx	r3
	otg_enable();
   9dde6:	4b8c      	ldr	r3, [pc, #560]	; (9e018 <uhd_enable+0x298>)
   9dde8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   9ddec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   9ddf0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_unfreeze_clock();
   9ddf4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   9ddf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   9ddfc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable_id_interrupt();
   9de00:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   9de04:	433a      	orrs	r2, r7
   9de06:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_ack_id_transition();
   9de0a:	f8c3 7808 	str.w	r7, [r3, #2056]	; 0x808
	otg_freeze_clock();
   9de0e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   9de12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   9de16:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (Is_otg_id_device()) {
   9de1a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   9de1e:	0559      	lsls	r1, r3, #21
   9de20:	f100 808a 	bmi.w	9df38 <uhd_enable+0x1b8>
		uhc_start();
   9de24:	4b7f      	ldr	r3, [pc, #508]	; (9e024 <uhd_enable+0x2a4>)
   9de26:	4798      	blx	r3
   9de28:	2d00      	cmp	r5, #0
   9de2a:	d0c8      	beq.n	9ddbe <uhd_enable+0x3e>
		cpu_irq_enable();
   9de2c:	2301      	movs	r3, #1
   9de2e:	7023      	strb	r3, [r4, #0]
   9de30:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9de34:	b662      	cpsie	i
}
   9de36:	b009      	add	sp, #36	; 0x24
   9de38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (!Is_otg_clock_usable());
   9de3a:	4611      	mov	r1, r2
	uhd_set_vbof_active_low();
   9de3c:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
	uhd_ctrl_request_first = NULL;
   9de40:	4f79      	ldr	r7, [pc, #484]	; (9e028 <uhd_enable+0x2a8>)
	uhd_set_vbof_active_low();
   9de42:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
   9de46:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
	otg_enable_pad();
   9de4a:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
	uhd_ctrl_request_last = NULL;
   9de4e:	4e77      	ldr	r6, [pc, #476]	; (9e02c <uhd_enable+0x2ac>)
	otg_enable_pad();
   9de50:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   9de54:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
	otg_enable();
   9de58:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
	uhd_ctrl_request_timeout = 0;
   9de5c:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 9e048 <uhd_enable+0x2c8>
	otg_enable();
   9de60:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   9de64:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
	uhd_ctrl_request_first = NULL;
   9de68:	603b      	str	r3, [r7, #0]
	uhd_ctrl_request_last = NULL;
   9de6a:	6033      	str	r3, [r6, #0]
	uhd_suspend_start = 0;
   9de6c:	4f70      	ldr	r7, [pc, #448]	; (9e030 <uhd_enable+0x2b0>)
	uhd_resume_start = 0;
   9de6e:	4e71      	ldr	r6, [pc, #452]	; (9e034 <uhd_enable+0x2b4>)
	uhd_b_suspend_requested = false;
   9de70:	4871      	ldr	r0, [pc, #452]	; (9e038 <uhd_enable+0x2b8>)
	uhd_ctrl_request_timeout = 0;
   9de72:	f8ae 3000 	strh.w	r3, [lr]
	uhd_suspend_start = 0;
   9de76:	703b      	strb	r3, [r7, #0]
	uhd_resume_start = 0;
   9de78:	7033      	strb	r3, [r6, #0]
	uhd_b_suspend_requested = false;
   9de7a:	7003      	strb	r3, [r0, #0]
	otg_unfreeze_clock();
   9de7c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   9de80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   9de84:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   9de88:	f8d1 3804 	ldr.w	r3, [r1, #2052]	; 0x804
   9de8c:	045a      	lsls	r2, r3, #17
   9de8e:	d5fb      	bpl.n	9de88 <uhd_enable+0x108>
	otg_ack_vbus_transition();
   9de90:	2202      	movs	r2, #2
	UOTGHS->UOTGHS_HSTICR = UOTGHS_HSTICR_DCONNIC | UOTGHS_HSTICR_DDISCIC
   9de92:	237f      	movs	r3, #127	; 0x7f
	uhd_enable_vbus();
   9de94:	f44f 7000 	mov.w	r0, #512	; 0x200
	UOTGHS->UOTGHS_HSTICR = UOTGHS_HSTICR_DCONNIC | UOTGHS_HSTICR_DDISCIC
   9de98:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
	otg_ack_vbus_transition();
   9de9c:	f8c1 2808 	str.w	r2, [r1, #2056]	; 0x808
	Set_bits(UOTGHS->UOTGHS_CTRL,
   9dea0:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
	enum sleepmgr_mode sleep_mode[] = {
   9dea4:	2603      	movs	r6, #3
	Set_bits(UOTGHS->UOTGHS_CTRL,
   9dea6:	f443 7385 	orr.w	r3, r3, #266	; 0x10a
   9deaa:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
	uhd_enable_vbus();
   9deae:	f8c1 080c 	str.w	r0, [r1, #2060]	; 0x80c
	UOTGHS->UOTGHS_HSTIER = UOTGHS_HSTICR_DCONNIC | UOTGHS_HSTICR_HSOFIC
   9deb2:	2025      	movs	r0, #37	; 0x25
	if (Is_otg_vbus_high()) {
   9deb4:	f8d1 3804 	ldr.w	r3, [r1, #2052]	; 0x804
	enum sleepmgr_mode sleep_mode[] = {
   9deb8:	2705      	movs	r7, #5
	if (Is_otg_vbus_high()) {
   9deba:	051b      	lsls	r3, r3, #20
	enum sleepmgr_mode sleep_mode[] = {
   9debc:	f04f 0302 	mov.w	r3, #2
		otg_raise_vbus_transition();
   9dec0:	bf48      	it	mi
   9dec2:	f8c1 280c 	strmi.w	r2, [r1, #2060]	; 0x80c
	UOTGHS->UOTGHS_HSTIER = UOTGHS_HSTICR_DCONNIC | UOTGHS_HSTICR_HSOFIC
   9dec6:	4a54      	ldr	r2, [pc, #336]	; (9e018 <uhd_enable+0x298>)
	if (uhd_state == new_state) {
   9dec8:	495c      	ldr	r1, [pc, #368]	; (9e03c <uhd_enable+0x2bc>)
	UOTGHS->UOTGHS_HSTIER = UOTGHS_HSTICR_DCONNIC | UOTGHS_HSTICR_HSOFIC
   9deca:	f8c2 0418 	str.w	r0, [r2, #1048]	; 0x418
	otg_freeze_clock();
   9dece:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
   9ded2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   9ded6:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
	if (uhd_state == new_state) {
   9deda:	780a      	ldrb	r2, [r1, #0]
	enum sleepmgr_mode sleep_mode[] = {
   9dedc:	f88d 7018 	strb.w	r7, [sp, #24]
	if (uhd_state == new_state) {
   9dee0:	429a      	cmp	r2, r3
	enum sleepmgr_mode sleep_mode[] = {
   9dee2:	f88d 6019 	strb.w	r6, [sp, #25]
   9dee6:	f88d 601c 	strb.w	r6, [sp, #28]
   9deea:	f88d 301a 	strb.w	r3, [sp, #26]
   9deee:	f88d 301b 	strb.w	r3, [sp, #27]
   9def2:	f88d 301d 	strb.w	r3, [sp, #29]
	if (uhd_state == new_state) {
   9def6:	f43f af60 	beq.w	9ddba <uhd_enable+0x3a>
	if(sleepmgr_locks[mode] >= 0xff) {
   9defa:	4b51      	ldr	r3, [pc, #324]	; (9e040 <uhd_enable+0x2c0>)
   9defc:	789a      	ldrb	r2, [r3, #2]
   9defe:	2aff      	cmp	r2, #255	; 0xff
   9df00:	d019      	beq.n	9df36 <uhd_enable+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9df02:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9df06:	fab2 f282 	clz	r2, r2
   9df0a:	0952      	lsrs	r2, r2, #5
   9df0c:	9204      	str	r2, [sp, #16]
  __ASM volatile ("cpsid i" : : : "memory");
   9df0e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9df10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9df14:	2000      	movs	r0, #0
	++sleepmgr_locks[mode];
   9df16:	789a      	ldrb	r2, [r3, #2]
   9df18:	7020      	strb	r0, [r4, #0]
	return flags;
   9df1a:	9804      	ldr	r0, [sp, #16]
   9df1c:	3201      	adds	r2, #1
   9df1e:	709a      	strb	r2, [r3, #2]
	if (cpu_irq_is_enabled_flags(flags))
   9df20:	b120      	cbz	r0, 9df2c <uhd_enable+0x1ac>
		cpu_irq_enable();
   9df22:	2201      	movs	r2, #1
   9df24:	7022      	strb	r2, [r4, #0]
   9df26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9df2a:	b662      	cpsie	i
	if (uhd_state != UHD_STATE_OFF) {
   9df2c:	780a      	ldrb	r2, [r1, #0]
   9df2e:	bba2      	cbnz	r2, 9df9a <uhd_enable+0x21a>
	uhd_state = new_state;
   9df30:	2302      	movs	r3, #2
   9df32:	700b      	strb	r3, [r1, #0]
   9df34:	e741      	b.n	9ddba <uhd_enable+0x3a>
   9df36:	e7fe      	b.n	9df36 <uhd_enable+0x1b6>
	enum sleepmgr_mode sleep_mode[] = {
   9df38:	2005      	movs	r0, #5
   9df3a:	2302      	movs	r3, #2
   9df3c:	2203      	movs	r2, #3
	if (uhd_state == new_state) {
   9df3e:	493f      	ldr	r1, [pc, #252]	; (9e03c <uhd_enable+0x2bc>)
	enum sleepmgr_mode sleep_mode[] = {
   9df40:	f88d 0018 	strb.w	r0, [sp, #24]
	if (uhd_state == new_state) {
   9df44:	7808      	ldrb	r0, [r1, #0]
	enum sleepmgr_mode sleep_mode[] = {
   9df46:	f88d 2019 	strb.w	r2, [sp, #25]
	if (uhd_state == new_state) {
   9df4a:	42b8      	cmp	r0, r7
	enum sleepmgr_mode sleep_mode[] = {
   9df4c:	f88d 201c 	strb.w	r2, [sp, #28]
   9df50:	f88d 301a 	strb.w	r3, [sp, #26]
   9df54:	f88d 301b 	strb.w	r3, [sp, #27]
   9df58:	f88d 301d 	strb.w	r3, [sp, #29]
	if (uhd_state == new_state) {
   9df5c:	f43f af2d 	beq.w	9ddba <uhd_enable+0x3a>
	if(sleepmgr_locks[mode] >= 0xff) {
   9df60:	4b37      	ldr	r3, [pc, #220]	; (9e040 <uhd_enable+0x2c0>)
   9df62:	78da      	ldrb	r2, [r3, #3]
   9df64:	2aff      	cmp	r2, #255	; 0xff
   9df66:	d017      	beq.n	9df98 <uhd_enable+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9df68:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9df6c:	fab2 f282 	clz	r2, r2
   9df70:	0952      	lsrs	r2, r2, #5
   9df72:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   9df74:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9df76:	f3bf 8f5f 	dmb	sy
	++sleepmgr_locks[mode];
   9df7a:	78da      	ldrb	r2, [r3, #3]
	cpu_irq_disable();
   9df7c:	7026      	strb	r6, [r4, #0]
	return flags;
   9df7e:	9802      	ldr	r0, [sp, #8]
   9df80:	3201      	adds	r2, #1
   9df82:	70da      	strb	r2, [r3, #3]
	if (cpu_irq_is_enabled_flags(flags))
   9df84:	b118      	cbz	r0, 9df8e <uhd_enable+0x20e>
		cpu_irq_enable();
   9df86:	7027      	strb	r7, [r4, #0]
   9df88:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9df8c:	b662      	cpsie	i
	if (uhd_state != UHD_STATE_OFF) {
   9df8e:	780a      	ldrb	r2, [r1, #0]
   9df90:	b9f2      	cbnz	r2, 9dfd0 <uhd_enable+0x250>
	uhd_state = new_state;
   9df92:	2301      	movs	r3, #1
   9df94:	700b      	strb	r3, [r1, #0]
   9df96:	e710      	b.n	9ddba <uhd_enable+0x3a>
   9df98:	e7fe      	b.n	9df98 <uhd_enable+0x218>
		sleepmgr_unlock_mode(sleep_mode[uhd_state]);
   9df9a:	a808      	add	r0, sp, #32
   9df9c:	4402      	add	r2, r0
	if(sleepmgr_locks[mode] == 0) {
   9df9e:	f812 0c08 	ldrb.w	r0, [r2, #-8]
   9dfa2:	5c1a      	ldrb	r2, [r3, r0]
   9dfa4:	b19a      	cbz	r2, 9dfce <uhd_enable+0x24e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9dfa6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9dfaa:	fab2 f282 	clz	r2, r2
   9dfae:	0952      	lsrs	r2, r2, #5
   9dfb0:	9205      	str	r2, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   9dfb2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9dfb4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9dfb8:	2600      	movs	r6, #0
	--sleepmgr_locks[mode];
   9dfba:	5c1a      	ldrb	r2, [r3, r0]
   9dfbc:	7026      	strb	r6, [r4, #0]
	return flags;
   9dfbe:	9e05      	ldr	r6, [sp, #20]
   9dfc0:	3a01      	subs	r2, #1
   9dfc2:	541a      	strb	r2, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
   9dfc4:	2e00      	cmp	r6, #0
   9dfc6:	d0b3      	beq.n	9df30 <uhd_enable+0x1b0>
   9dfc8:	4b1e      	ldr	r3, [pc, #120]	; (9e044 <uhd_enable+0x2c4>)
   9dfca:	4798      	blx	r3
   9dfcc:	e7b0      	b.n	9df30 <uhd_enable+0x1b0>
   9dfce:	e7fe      	b.n	9dfce <uhd_enable+0x24e>
   9dfd0:	a808      	add	r0, sp, #32
   9dfd2:	4402      	add	r2, r0
	if(sleepmgr_locks[mode] == 0) {
   9dfd4:	f812 0c08 	ldrb.w	r0, [r2, #-8]
   9dfd8:	5c1a      	ldrb	r2, [r3, r0]
   9dfda:	b19a      	cbz	r2, 9e004 <uhd_enable+0x284>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9dfdc:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9dfe0:	fab2 f282 	clz	r2, r2
   9dfe4:	0952      	lsrs	r2, r2, #5
   9dfe6:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   9dfe8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9dfea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9dfee:	2600      	movs	r6, #0
	--sleepmgr_locks[mode];
   9dff0:	5c1a      	ldrb	r2, [r3, r0]
   9dff2:	7026      	strb	r6, [r4, #0]
	return flags;
   9dff4:	9e03      	ldr	r6, [sp, #12]
   9dff6:	3a01      	subs	r2, #1
   9dff8:	541a      	strb	r2, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
   9dffa:	2e00      	cmp	r6, #0
   9dffc:	d0c9      	beq.n	9df92 <uhd_enable+0x212>
   9dffe:	4b11      	ldr	r3, [pc, #68]	; (9e044 <uhd_enable+0x2c4>)
   9e000:	4798      	blx	r3
   9e002:	e7c6      	b.n	9df92 <uhd_enable+0x212>
   9e004:	e7fe      	b.n	9e004 <uhd_enable+0x284>
   9e006:	bf00      	nop
   9e008:	20072d42 	.word	0x20072d42
   9e00c:	2007026b 	.word	0x2007026b
   9e010:	00099e15 	.word	0x00099e15
   9e014:	0009bdcd 	.word	0x0009bdcd
   9e018:	400ac000 	.word	0x400ac000
   9e01c:	e000e100 	.word	0xe000e100
   9e020:	0009be39 	.word	0x0009be39
   9e024:	0009b711 	.word	0x0009b711
   9e028:	20072fa8 	.word	0x20072fa8
   9e02c:	20072fb0 	.word	0x20072fb0
   9e030:	20072e26 	.word	0x20072e26
   9e034:	20072e24 	.word	0x20072e24
   9e038:	20072d43 	.word	0x20072d43
   9e03c:	20072e25 	.word	0x20072e25
   9e040:	20072f9c 	.word	0x20072f9c
   9e044:	0009c141 	.word	0x0009c141
   9e048:	20072fb4 	.word	0x20072fb4

0009e04c <uhd_disable>:
{
   9e04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9e050:	4606      	mov	r6, r0
	while (!Is_otg_clock_usable());
   9e052:	4c81      	ldr	r4, [pc, #516]	; (9e258 <uhd_disable+0x20c>)
{
   9e054:	b086      	sub	sp, #24
	while (!Is_otg_clock_usable());
   9e056:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   9e05a:	045b      	lsls	r3, r3, #17
   9e05c:	d5fb      	bpl.n	9e056 <uhd_disable+0xa>
	UOTGHS->UOTGHS_HSTIDR = UOTGHS_HSTIDR_DCONNIEC | UOTGHS_HSTIDR_DDISCIEC
   9e05e:	257f      	movs	r5, #127	; 0x7f
	uhd_disable_vbus();
   9e060:	f44f 7100 	mov.w	r1, #512	; 0x200
	otg_unfreeze_clock();
   9e064:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
	uhc_notify_connection(false);
   9e068:	2000      	movs	r0, #0
	otg_unfreeze_clock();
   9e06a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   9e06e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	Clr_bits(UOTGHS->UOTGHS_CTRL, UOTGHS_CTRL_VBUSTE | UOTGHS_CTRL_VBERRE);
   9e072:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
	uhc_notify_connection(false);
   9e076:	4a79      	ldr	r2, [pc, #484]	; (9e25c <uhd_disable+0x210>)
	Clr_bits(UOTGHS->UOTGHS_CTRL, UOTGHS_CTRL_VBUSTE | UOTGHS_CTRL_VBERRE);
   9e078:	f023 030a 	bic.w	r3, r3, #10
   9e07c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	UOTGHS->UOTGHS_HSTIDR = UOTGHS_HSTIDR_DCONNIEC | UOTGHS_HSTIDR_DDISCIEC
   9e080:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
	uhd_disable_sof();
   9e084:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
   9e088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   9e08c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
	uhd_disable_vbus();
   9e090:	f8c4 1808 	str.w	r1, [r4, #2056]	; 0x808
	uhc_notify_connection(false);
   9e094:	4790      	blx	r2
	otg_freeze_clock();
   9e096:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
   9e09a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   9e09e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	if (!b_id_stop) {
   9e0a2:	2e00      	cmp	r6, #0
   9e0a4:	d077      	beq.n	9e196 <uhd_disable+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9e0a6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9e0aa:	fab3 f383 	clz	r3, r3
   9e0ae:	095b      	lsrs	r3, r3, #5
   9e0b0:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   9e0b2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9e0b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9e0b8:	f04f 0800 	mov.w	r8, #0
	if (!otg_initialized) {
   9e0bc:	4b68      	ldr	r3, [pc, #416]	; (9e260 <uhd_disable+0x214>)
   9e0be:	4d69      	ldr	r5, [pc, #420]	; (9e264 <uhd_disable+0x218>)
   9e0c0:	781a      	ldrb	r2, [r3, #0]
   9e0c2:	f885 8000 	strb.w	r8, [r5]
	return flags;
   9e0c6:	9e00      	ldr	r6, [sp, #0]
   9e0c8:	b95a      	cbnz	r2, 9e0e2 <uhd_disable+0x96>
	if (cpu_irq_is_enabled_flags(flags))
   9e0ca:	b916      	cbnz	r6, 9e0d2 <uhd_disable+0x86>
}
   9e0cc:	b006      	add	sp, #24
   9e0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cpu_irq_enable();
   9e0d2:	2301      	movs	r3, #1
   9e0d4:	702b      	strb	r3, [r5, #0]
   9e0d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9e0da:	b662      	cpsie	i
   9e0dc:	b006      	add	sp, #24
   9e0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pmc_clr_fast_startup_input(PMC_FSMR_USBAL);
   9e0e2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   9e0e6:	4a60      	ldr	r2, [pc, #384]	; (9e268 <uhd_disable+0x21c>)
	otg_initialized = false;
   9e0e8:	f883 8000 	strb.w	r8, [r3]
	pmc_clr_fast_startup_input(PMC_FSMR_USBAL);
   9e0ec:	4790      	blx	r2
	otg_unfreeze_clock();
   9e0ee:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
	sysclk_disable_usb();
   9e0f2:	4a5e      	ldr	r2, [pc, #376]	; (9e26c <uhd_disable+0x220>)
	otg_unfreeze_clock();
   9e0f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   9e0f8:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	otg_disable_id_interrupt();
   9e0fc:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
	if (uhd_state == new_state) {
   9e100:	4f5b      	ldr	r7, [pc, #364]	; (9e270 <uhd_disable+0x224>)
	otg_disable_id_interrupt();
   9e102:	f023 0301 	bic.w	r3, r3, #1
   9e106:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	otg_freeze_clock();
   9e10a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
   9e10e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   9e112:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	otg_disable();
   9e116:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
   9e11a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   9e11e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	otg_disable_pad();
   9e122:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
   9e126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   9e12a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	sysclk_disable_usb();
   9e12e:	4790      	blx	r2
	pmc_disable_periph_clk(ID_UOTGHS);
   9e130:	4b50      	ldr	r3, [pc, #320]	; (9e274 <uhd_disable+0x228>)
   9e132:	2028      	movs	r0, #40	; 0x28
   9e134:	4798      	blx	r3
	enum sleepmgr_mode sleep_mode[] = {
   9e136:	2202      	movs	r2, #2
   9e138:	2103      	movs	r1, #3
   9e13a:	2005      	movs	r0, #5
	if (uhd_state == new_state) {
   9e13c:	783b      	ldrb	r3, [r7, #0]
	enum sleepmgr_mode sleep_mode[] = {
   9e13e:	f88d 0010 	strb.w	r0, [sp, #16]
   9e142:	f88d 1011 	strb.w	r1, [sp, #17]
   9e146:	f88d 1014 	strb.w	r1, [sp, #20]
   9e14a:	f88d 2012 	strb.w	r2, [sp, #18]
   9e14e:	f88d 2013 	strb.w	r2, [sp, #19]
   9e152:	f88d 2015 	strb.w	r2, [sp, #21]
	if (uhd_state == new_state) {
   9e156:	2b00      	cmp	r3, #0
   9e158:	d0b7      	beq.n	9e0ca <uhd_disable+0x7e>
		sleepmgr_unlock_mode(sleep_mode[uhd_state]);
   9e15a:	aa06      	add	r2, sp, #24
   9e15c:	4413      	add	r3, r2
	if(sleepmgr_locks[mode] == 0) {
   9e15e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
   9e162:	4945      	ldr	r1, [pc, #276]	; (9e278 <uhd_disable+0x22c>)
   9e164:	5c8b      	ldrb	r3, [r1, r2]
   9e166:	b1ab      	cbz	r3, 9e194 <uhd_disable+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9e168:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9e16c:	fab3 f383 	clz	r3, r3
   9e170:	095b      	lsrs	r3, r3, #5
   9e172:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   9e174:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9e176:	f3bf 8f5f 	dmb	sy
	--sleepmgr_locks[mode];
   9e17a:	5c8b      	ldrb	r3, [r1, r2]
	cpu_irq_disable();
   9e17c:	f885 8000 	strb.w	r8, [r5]
	return flags;
   9e180:	9803      	ldr	r0, [sp, #12]
   9e182:	3b01      	subs	r3, #1
   9e184:	548b      	strb	r3, [r1, r2]
	if (cpu_irq_is_enabled_flags(flags))
   9e186:	2800      	cmp	r0, #0
   9e188:	d163      	bne.n	9e252 <uhd_disable+0x206>
	uhd_state = new_state;
   9e18a:	2300      	movs	r3, #0
   9e18c:	703b      	strb	r3, [r7, #0]
   9e18e:	2e00      	cmp	r6, #0
   9e190:	d09c      	beq.n	9e0cc <uhd_disable+0x80>
   9e192:	e79e      	b.n	9e0d2 <uhd_disable+0x86>
   9e194:	e7fe      	b.n	9e194 <uhd_disable+0x148>
	enum sleepmgr_mode sleep_mode[] = {
   9e196:	2302      	movs	r3, #2
   9e198:	2103      	movs	r1, #3
   9e19a:	2505      	movs	r5, #5
		otg_freeze_clock();
   9e19c:	f8d4 2800 	ldr.w	r2, [r4, #2048]	; 0x800
	if (uhd_state == new_state) {
   9e1a0:	4f33      	ldr	r7, [pc, #204]	; (9e270 <uhd_disable+0x224>)
		otg_freeze_clock();
   9e1a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   9e1a6:	f8c4 2800 	str.w	r2, [r4, #2048]	; 0x800
		otg_disable();
   9e1aa:	f8d4 2800 	ldr.w	r2, [r4, #2048]	; 0x800
		otg_initialized = false; // Need re-initialize
   9e1ae:	482c      	ldr	r0, [pc, #176]	; (9e260 <uhd_disable+0x214>)
		otg_disable();
   9e1b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   9e1b4:	f8c4 2800 	str.w	r2, [r4, #2048]	; 0x800
	if (uhd_state == new_state) {
   9e1b8:	783a      	ldrb	r2, [r7, #0]
	enum sleepmgr_mode sleep_mode[] = {
   9e1ba:	f88d 5010 	strb.w	r5, [sp, #16]
	if (uhd_state == new_state) {
   9e1be:	2a01      	cmp	r2, #1
	enum sleepmgr_mode sleep_mode[] = {
   9e1c0:	f88d 1011 	strb.w	r1, [sp, #17]
   9e1c4:	f88d 1014 	strb.w	r1, [sp, #20]
   9e1c8:	f88d 3012 	strb.w	r3, [sp, #18]
   9e1cc:	f88d 3013 	strb.w	r3, [sp, #19]
   9e1d0:	f88d 3015 	strb.w	r3, [sp, #21]
		otg_initialized = false; // Need re-initialize
   9e1d4:	7006      	strb	r6, [r0, #0]
	if (uhd_state == new_state) {
   9e1d6:	f43f af79 	beq.w	9e0cc <uhd_disable+0x80>
	if(sleepmgr_locks[mode] >= 0xff) {
   9e1da:	4b27      	ldr	r3, [pc, #156]	; (9e278 <uhd_disable+0x22c>)
   9e1dc:	78da      	ldrb	r2, [r3, #3]
   9e1de:	2aff      	cmp	r2, #255	; 0xff
   9e1e0:	d01b      	beq.n	9e21a <uhd_disable+0x1ce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9e1e2:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9e1e6:	fab2 f282 	clz	r2, r2
   9e1ea:	0952      	lsrs	r2, r2, #5
   9e1ec:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   9e1ee:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9e1f0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9e1f4:	4d1b      	ldr	r5, [pc, #108]	; (9e264 <uhd_disable+0x218>)
	++sleepmgr_locks[mode];
   9e1f6:	78da      	ldrb	r2, [r3, #3]
   9e1f8:	702e      	strb	r6, [r5, #0]
	return flags;
   9e1fa:	9901      	ldr	r1, [sp, #4]
   9e1fc:	3201      	adds	r2, #1
   9e1fe:	70da      	strb	r2, [r3, #3]
	if (cpu_irq_is_enabled_flags(flags))
   9e200:	b121      	cbz	r1, 9e20c <uhd_disable+0x1c0>
		cpu_irq_enable();
   9e202:	2201      	movs	r2, #1
   9e204:	702a      	strb	r2, [r5, #0]
   9e206:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9e20a:	b662      	cpsie	i
	if (uhd_state != UHD_STATE_OFF) {
   9e20c:	783a      	ldrb	r2, [r7, #0]
   9e20e:	b92a      	cbnz	r2, 9e21c <uhd_disable+0x1d0>
	uhd_state = new_state;
   9e210:	2301      	movs	r3, #1
   9e212:	703b      	strb	r3, [r7, #0]
}
   9e214:	b006      	add	sp, #24
   9e216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9e21a:	e7fe      	b.n	9e21a <uhd_disable+0x1ce>
		sleepmgr_unlock_mode(sleep_mode[uhd_state]);
   9e21c:	a906      	add	r1, sp, #24
   9e21e:	440a      	add	r2, r1
	if(sleepmgr_locks[mode] == 0) {
   9e220:	f812 1c08 	ldrb.w	r1, [r2, #-8]
   9e224:	5c5a      	ldrb	r2, [r3, r1]
   9e226:	b19a      	cbz	r2, 9e250 <uhd_disable+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9e228:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9e22c:	fab2 f282 	clz	r2, r2
   9e230:	0952      	lsrs	r2, r2, #5
   9e232:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   9e234:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9e236:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9e23a:	2000      	movs	r0, #0
	--sleepmgr_locks[mode];
   9e23c:	5c5a      	ldrb	r2, [r3, r1]
   9e23e:	7028      	strb	r0, [r5, #0]
	return flags;
   9e240:	9802      	ldr	r0, [sp, #8]
   9e242:	3a01      	subs	r2, #1
   9e244:	545a      	strb	r2, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
   9e246:	2800      	cmp	r0, #0
   9e248:	d0e2      	beq.n	9e210 <uhd_disable+0x1c4>
   9e24a:	4b0c      	ldr	r3, [pc, #48]	; (9e27c <uhd_disable+0x230>)
   9e24c:	4798      	blx	r3
   9e24e:	e7df      	b.n	9e210 <uhd_disable+0x1c4>
   9e250:	e7fe      	b.n	9e250 <uhd_disable+0x204>
   9e252:	4b0a      	ldr	r3, [pc, #40]	; (9e27c <uhd_disable+0x230>)
   9e254:	4798      	blx	r3
   9e256:	e798      	b.n	9e18a <uhd_disable+0x13e>
   9e258:	400ac000 	.word	0x400ac000
   9e25c:	0009b63d 	.word	0x0009b63d
   9e260:	20072d42 	.word	0x20072d42
   9e264:	2007026b 	.word	0x2007026b
   9e268:	0009be4d 	.word	0x0009be4d
   9e26c:	00099e35 	.word	0x00099e35
   9e270:	20072e25 	.word	0x20072e25
   9e274:	0009bded 	.word	0x0009bded
   9e278:	20072f9c 	.word	0x20072f9c
   9e27c:	0009c141 	.word	0x0009c141

0009e280 <uhd_get_speed>:
	switch (uhd_get_speed_mode()) {
   9e280:	4b08      	ldr	r3, [pc, #32]	; (9e2a4 <uhd_get_speed+0x24>)
   9e282:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
   9e286:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
   9e28a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   9e28e:	d007      	beq.n	9e2a0 <uhd_get_speed+0x20>
   9e290:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
		return UHD_SPEED_LOW;
   9e294:	bf1a      	itte	ne
   9e296:	fab0 f080 	clzne	r0, r0
   9e29a:	0940      	lsrne	r0, r0, #5
		return UHD_SPEED_LOW;
   9e29c:	2000      	moveq	r0, #0
   9e29e:	4770      	bx	lr
		return UHD_SPEED_HIGH;
   9e2a0:	2002      	movs	r0, #2
}
   9e2a2:	4770      	bx	lr
   9e2a4:	400ac000 	.word	0x400ac000

0009e2a8 <uhd_send_reset>:
	uhd_reset_callback = callback;
   9e2a8:	4b04      	ldr	r3, [pc, #16]	; (9e2bc <uhd_send_reset+0x14>)
	uhd_start_reset();
   9e2aa:	4a05      	ldr	r2, [pc, #20]	; (9e2c0 <uhd_send_reset+0x18>)
	uhd_reset_callback = callback;
   9e2ac:	6018      	str	r0, [r3, #0]
	uhd_start_reset();
   9e2ae:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   9e2b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   9e2b6:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
   9e2ba:	4770      	bx	lr
   9e2bc:	20072e20 	.word	0x20072e20
   9e2c0:	400ac000 	.word	0x400ac000

0009e2c4 <uhd_suspend>:
	if (uhd_ctrl_request_timeout) {
   9e2c4:	4b34      	ldr	r3, [pc, #208]	; (9e398 <uhd_suspend+0xd4>)
   9e2c6:	881b      	ldrh	r3, [r3, #0]
   9e2c8:	b29b      	uxth	r3, r3
   9e2ca:	2b00      	cmp	r3, #0
   9e2cc:	d160      	bne.n	9e390 <uhd_suspend+0xcc>
		uhd_freeze_pipe(pipe);
   9e2ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uhd_suspend_start = 3;
   9e2d2:	2103      	movs	r1, #3
{
   9e2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e2d6:	4831      	ldr	r0, [pc, #196]	; (9e39c <uhd_suspend+0xd8>)
   9e2d8:	4d31      	ldr	r5, [pc, #196]	; (9e3a0 <uhd_suspend+0xdc>)
   9e2da:	f8d0 35c0 	ldr.w	r3, [r0, #1472]	; 0x5c0
		uhd_freeze_pipe(pipe);
   9e2de:	f8c0 25f0 	str.w	r2, [r0, #1520]	; 0x5f0
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e2e2:	f8d5 05c0 	ldr.w	r0, [r5, #1472]	; 0x5c0
   9e2e6:	4c2f      	ldr	r4, [pc, #188]	; (9e3a4 <uhd_suspend+0xe0>)
		uhd_freeze_pipe(pipe);
   9e2e8:	f8c5 25f0 	str.w	r2, [r5, #1520]	; 0x5f0
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e2ec:	4f2e      	ldr	r7, [pc, #184]	; (9e3a8 <uhd_suspend+0xe4>)
   9e2ee:	4053      	eors	r3, r2
   9e2f0:	f8d4 65c0 	ldr.w	r6, [r4, #1472]	; 0x5c0
   9e2f4:	f3c3 4340 	ubfx	r3, r3, #17, #1
		uhd_freeze_pipe(pipe);
   9e2f8:	f8c4 25f0 	str.w	r2, [r4, #1520]	; 0x5f0
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e2fc:	4050      	eors	r0, r2
   9e2fe:	f8d7 45c0 	ldr.w	r4, [r7, #1472]	; 0x5c0
   9e302:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 9e3b8 <uhd_suspend+0xf4>
		uhd_freeze_pipe(pipe);
   9e306:	f8c7 25f0 	str.w	r2, [r7, #1520]	; 0x5f0
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e30a:	f3c0 4040 	ubfx	r0, r0, #17, #1
   9e30e:	005b      	lsls	r3, r3, #1
   9e310:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   9e314:	4056      	eors	r6, r2
   9e316:	f8d5 05cc 	ldr.w	r0, [r5, #1484]	; 0x5cc
		uhd_freeze_pipe(pipe);
   9e31a:	f8c5 25fc 	str.w	r2, [r5, #1532]	; 0x5fc
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e31e:	f8de 75c0 	ldr.w	r7, [lr, #1472]	; 0x5c0
   9e322:	f3c6 4640 	ubfx	r6, r6, #17, #1
		uhd_freeze_pipe(pipe);
   9e326:	f8ce 25f0 	str.w	r2, [lr, #1520]	; 0x5f0
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e32a:	4054      	eors	r4, r2
   9e32c:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
   9e330:	f3c4 4440 	ubfx	r4, r4, #17, #1
   9e334:	f8d5 65d4 	ldr.w	r6, [r5, #1492]	; 0x5d4
   9e338:	4050      	eors	r0, r2
		uhd_freeze_pipe(pipe);
   9e33a:	f8c5 2604 	str.w	r2, [r5, #1540]	; 0x604
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e33e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   9e342:	f3c0 4040 	ubfx	r0, r0, #17, #1
   9e346:	f8de 45c8 	ldr.w	r4, [lr, #1480]	; 0x5c8
   9e34a:	4057      	eors	r7, r2
		uhd_freeze_pipe(pipe);
   9e34c:	f8ce 25f8 	str.w	r2, [lr, #1528]	; 0x5f8
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e350:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   9e354:	f3c7 4740 	ubfx	r7, r7, #17, #1
   9e358:	f8d5 05dc 	ldr.w	r0, [r5, #1500]	; 0x5dc
   9e35c:	4056      	eors	r6, r2
   9e35e:	f3c6 4640 	ubfx	r6, r6, #17, #1
   9e362:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
   9e366:	4054      	eors	r4, r2
   9e368:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
   9e36c:	f3c4 4440 	ubfx	r4, r4, #17, #1
   9e370:	4050      	eors	r0, r2
   9e372:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   9e376:	f3c0 4040 	ubfx	r0, r0, #17, #1
   9e37a:	4e0c      	ldr	r6, [pc, #48]	; (9e3ac <uhd_suspend+0xe8>)
	uhd_suspend_start = 3;
   9e37c:	4c0c      	ldr	r4, [pc, #48]	; (9e3b0 <uhd_suspend+0xec>)
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e37e:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
		uhd_freeze_pipe(pipe);
   9e382:	f8c5 260c 	str.w	r2, [r5, #1548]	; 0x60c
   9e386:	8033      	strh	r3, [r6, #0]
	uhd_suspend_start = 3;
   9e388:	7021      	strb	r1, [r4, #0]
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
   9e38a:	f10e 0e08 	add.w	lr, lr, #8
   9e38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uhd_b_suspend_requested = true;
   9e390:	2201      	movs	r2, #1
   9e392:	4b08      	ldr	r3, [pc, #32]	; (9e3b4 <uhd_suspend+0xf0>)
   9e394:	701a      	strb	r2, [r3, #0]
		return;
   9e396:	4770      	bx	lr
   9e398:	20072fb4 	.word	0x20072fb4
   9e39c:	400ac004 	.word	0x400ac004
   9e3a0:	400ac008 	.word	0x400ac008
   9e3a4:	400ac00c 	.word	0x400ac00c
   9e3a8:	400ac010 	.word	0x400ac010
   9e3ac:	20072e1c 	.word	0x20072e1c
   9e3b0:	20072e26 	.word	0x20072e26
   9e3b4:	20072d43 	.word	0x20072d43
   9e3b8:	400ac018 	.word	0x400ac018

0009e3bc <uhd_ep0_alloc>:
	if (ep_size < 8) {
   9e3bc:	2907      	cmp	r1, #7
   9e3be:	d93a      	bls.n	9e436 <uhd_ep0_alloc+0x7a>
{
   9e3c0:	b4f0      	push	{r4, r5, r6, r7}
	uhd_enable_pipe(0);
   9e3c2:	4b22      	ldr	r3, [pc, #136]	; (9e44c <uhd_ep0_alloc+0x90>)
	uhd_configure_pipe(0, // Pipe 0
   9e3c4:	2908      	cmp	r1, #8
	uhd_enable_pipe(0);
   9e3c6:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   9e3ca:	f042 0201 	orr.w	r2, r2, #1
   9e3ce:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	uhd_configure_pipe(0, // Pipe 0
   9e3d2:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
   9e3d6:	d124      	bne.n	9e422 <uhd_ep0_alloc+0x66>
   9e3d8:	2300      	movs	r3, #0
   9e3da:	4a1c      	ldr	r2, [pc, #112]	; (9e44c <uhd_ep0_alloc+0x90>)
   9e3dc:	4323      	orrs	r3, r4
   9e3de:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
	uhd_allocate_memory(0);
   9e3e2:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
   9e3e6:	f043 0302 	orr.w	r3, r3, #2
   9e3ea:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
	if (!Is_uhd_pipe_configured(0)) {
   9e3ee:	f8d2 3530 	ldr.w	r3, [r2, #1328]	; 0x530
   9e3f2:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
   9e3f6:	d020      	beq.n	9e43a <uhd_ep0_alloc+0x7e>
	uhd_enable_stall_interrupt(0);
   9e3f8:	2740      	movs	r7, #64	; 0x40
	uhd_enable_pipe_error_interrupt(0);
   9e3fa:	2608      	movs	r6, #8
	uhd_enable_pipe_interrupt(0);
   9e3fc:	f44f 7580 	mov.w	r5, #256	; 0x100
	uhd_configure_address(0, add);
   9e400:	4c13      	ldr	r4, [pc, #76]	; (9e450 <uhd_ep0_alloc+0x94>)
   9e402:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   9e406:	6823      	ldr	r3, [r4, #0]
	return true;
   9e408:	2001      	movs	r0, #1
	uhd_configure_address(0, add);
   9e40a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   9e40e:	430b      	orrs	r3, r1
   9e410:	6023      	str	r3, [r4, #0]
	uhd_enable_stall_interrupt(0);
   9e412:	f8c2 75f0 	str.w	r7, [r2, #1520]	; 0x5f0
	uhd_enable_pipe_error_interrupt(0);
   9e416:	f8c2 65f0 	str.w	r6, [r2, #1520]	; 0x5f0
	uhd_enable_pipe_interrupt(0);
   9e41a:	f8c2 5418 	str.w	r5, [r2, #1048]	; 0x418
}
   9e41e:	bcf0      	pop	{r4, r5, r6, r7}
   9e420:	4770      	bx	lr
	uhd_configure_pipe(0, // Pipe 0
   9e422:	004b      	lsls	r3, r1, #1
   9e424:	3b01      	subs	r3, #1
   9e426:	fab3 f383 	clz	r3, r3
   9e42a:	f1c3 031c 	rsb	r3, r3, #28
   9e42e:	011b      	lsls	r3, r3, #4
   9e430:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9e434:	e7d1      	b.n	9e3da <uhd_ep0_alloc+0x1e>
		return false;
   9e436:	2000      	movs	r0, #0
   9e438:	4770      	bx	lr
		uhd_disable_pipe(0);
   9e43a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
		return false;
   9e43e:	4618      	mov	r0, r3
		uhd_disable_pipe(0);
   9e440:	f021 0101 	bic.w	r1, r1, #1
   9e444:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
}
   9e448:	bcf0      	pop	{r4, r5, r6, r7}
   9e44a:	4770      	bx	lr
   9e44c:	400ac000 	.word	0x400ac000
   9e450:	400ac424 	.word	0x400ac424

0009e454 <uhd_ep_alloc>:
{
   9e454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (Is_uhd_pipe_enabled(pipe)) {
   9e458:	4ba9      	ldr	r3, [pc, #676]	; (9e700 <uhd_ep_alloc+0x2ac>)
   9e45a:	f8d3 441c 	ldr.w	r4, [r3, #1052]	; 0x41c
   9e45e:	07a7      	lsls	r7, r4, #30
   9e460:	d52a      	bpl.n	9e4b8 <uhd_ep_alloc+0x64>
   9e462:	f8d3 441c 	ldr.w	r4, [r3, #1052]	; 0x41c
   9e466:	0766      	lsls	r6, r4, #29
   9e468:	d542      	bpl.n	9e4f0 <uhd_ep_alloc+0x9c>
   9e46a:	f8d3 441c 	ldr.w	r4, [r3, #1052]	; 0x41c
   9e46e:	0725      	lsls	r5, r4, #28
   9e470:	f140 80c9 	bpl.w	9e606 <uhd_ep_alloc+0x1b2>
   9e474:	f8d3 441c 	ldr.w	r4, [r3, #1052]	; 0x41c
   9e478:	06e4      	lsls	r4, r4, #27
   9e47a:	f140 80f6 	bpl.w	9e66a <uhd_ep_alloc+0x216>
   9e47e:	f8d3 441c 	ldr.w	r4, [r3, #1052]	; 0x41c
   9e482:	06a7      	lsls	r7, r4, #26
   9e484:	f140 8113 	bpl.w	9e6ae <uhd_ep_alloc+0x25a>
   9e488:	f8d3 441c 	ldr.w	r4, [r3, #1052]	; 0x41c
   9e48c:	0666      	lsls	r6, r4, #25
   9e48e:	f140 811d 	bpl.w	9e6cc <uhd_ep_alloc+0x278>
   9e492:	f8d3 441c 	ldr.w	r4, [r3, #1052]	; 0x41c
   9e496:	0625      	lsls	r5, r4, #24
   9e498:	f140 8128 	bpl.w	9e6ec <uhd_ep_alloc+0x298>
   9e49c:	f8d3 441c 	ldr.w	r4, [r3, #1052]	; 0x41c
   9e4a0:	05e4      	lsls	r4, r4, #23
   9e4a2:	f140 8127 	bpl.w	9e6f4 <uhd_ep_alloc+0x2a0>
   9e4a6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e4aa:	059b      	lsls	r3, r3, #22
   9e4ac:	d41d      	bmi.n	9e4ea <uhd_ep_alloc+0x96>
	for (uint8_t pipe = 1; pipe < UOTGHS_EPT_NUM; pipe++) {
   9e4ae:	2409      	movs	r4, #9
		if (Is_uhd_pipe_enabled(pipe)) {
   9e4b0:	f44f 7600 	mov.w	r6, #512	; 0x200
   9e4b4:	4625      	mov	r5, r4
   9e4b6:	e002      	b.n	9e4be <uhd_ep_alloc+0x6a>
	for (uint8_t pipe = 1; pipe < UOTGHS_EPT_NUM; pipe++) {
   9e4b8:	2401      	movs	r4, #1
		if (Is_uhd_pipe_enabled(pipe)) {
   9e4ba:	2602      	movs	r6, #2
   9e4bc:	4625      	mov	r5, r4
		uhd_enable_pipe(pipe);
   9e4be:	4f90      	ldr	r7, [pc, #576]	; (9e700 <uhd_ep_alloc+0x2ac>)
   9e4c0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
   9e4c4:	4333      	orrs	r3, r6
   9e4c6:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
   9e4ca:	f891 c002 	ldrb.w	ip, [r1, #2]
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
   9e4ce:	f01c 0f80 	tst.w	ip, #128	; 0x80
   9e4d2:	d111      	bne.n	9e4f8 <uhd_ep_alloc+0xa4>
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
   9e4d4:	78cb      	ldrb	r3, [r1, #3]
		switch(ep_type) {
   9e4d6:	f003 0303 	and.w	r3, r3, #3
   9e4da:	2b02      	cmp	r3, #2
   9e4dc:	d01a      	beq.n	9e514 <uhd_ep_alloc+0xc0>
   9e4de:	2b03      	cmp	r3, #3
   9e4e0:	f000 80b5 	beq.w	9e64e <uhd_ep_alloc+0x1fa>
   9e4e4:	2b01      	cmp	r3, #1
   9e4e6:	f000 8092 	beq.w	9e60e <uhd_ep_alloc+0x1ba>
			return false;
   9e4ea:	2000      	movs	r0, #0
   9e4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t pipe = 1; pipe < UOTGHS_EPT_NUM; pipe++) {
   9e4f0:	2402      	movs	r4, #2
		if (Is_uhd_pipe_enabled(pipe)) {
   9e4f2:	2604      	movs	r6, #4
   9e4f4:	4625      	mov	r5, r4
   9e4f6:	e7e2      	b.n	9e4be <uhd_ep_alloc+0x6a>
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
   9e4f8:	78cb      	ldrb	r3, [r1, #3]
		switch(ep_type) {
   9e4fa:	f003 0303 	and.w	r3, r3, #3
   9e4fe:	2b02      	cmp	r3, #2
   9e500:	f000 8090 	beq.w	9e624 <uhd_ep_alloc+0x1d0>
   9e504:	2b03      	cmp	r3, #3
   9e506:	f000 80cf 	beq.w	9e6a8 <uhd_ep_alloc+0x254>
   9e50a:	2b01      	cmp	r3, #1
   9e50c:	d1ed      	bne.n	9e4ea <uhd_ep_alloc+0x96>
   9e50e:	f44f 7980 	mov.w	r9, #256	; 0x100
   9e512:	e07e      	b.n	9e612 <uhd_ep_alloc+0x1be>
   9e514:	f891 8006 	ldrb.w	r8, [r1, #6]
   9e518:	461f      	mov	r7, r3
   9e51a:	4643      	mov	r3, r8
   9e51c:	2b01      	cmp	r3, #1
   9e51e:	bf38      	it	cc
   9e520:	2301      	movcc	r3, #1
   9e522:	f44f 7900 	mov.w	r9, #512	; 0x200
   9e526:	f04f 0a04 	mov.w	sl, #4
   9e52a:	ea4f 6803 	mov.w	r8, r3, lsl #24
		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
   9e52e:	888b      	ldrh	r3, [r1, #4]
   9e530:	00a9      	lsls	r1, r5, #2
   9e532:	f5a3 6e80 	sub.w	lr, r3, #1024	; 0x400
   9e536:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   9e53a:	fa1f fe8e 	uxth.w	lr, lr
   9e53e:	f501 212c 	add.w	r1, r1, #704512	; 0xac000
   9e542:	f5be 4f7c 	cmp.w	lr, #64512	; 0xfc00
   9e546:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
   9e54a:	d373      	bcc.n	9e634 <uhd_ep_alloc+0x1e0>
   9e54c:	2b08      	cmp	r3, #8
   9e54e:	f240 8089 	bls.w	9e664 <uhd_ep_alloc+0x210>
   9e552:	005b      	lsls	r3, r3, #1
   9e554:	3b01      	subs	r3, #1
   9e556:	fab3 f383 	clz	r3, r3
   9e55a:	f1c3 031c 	rsb	r3, r3, #28
   9e55e:	011b      	lsls	r3, r3, #4
   9e560:	f003 0e70 	and.w	lr, r3, #112	; 0x70
   9e564:	f00c 030f 	and.w	r3, ip, #15
   9e568:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   9e56c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   9e570:	ea43 030a 	orr.w	r3, r3, sl
   9e574:	ea43 0309 	orr.w	r3, r3, r9
   9e578:	ea43 0308 	orr.w	r3, r3, r8
   9e57c:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
   9e580:	ea43 030e 	orr.w	r3, r3, lr
   9e584:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
		uhd_allocate_memory(pipe);
   9e588:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
   9e58c:	f043 0302 	orr.w	r3, r3, #2
   9e590:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
		if (!Is_uhd_pipe_configured(pipe)) {
   9e594:	f8d1 3530 	ldr.w	r3, [r1, #1328]	; 0x530
   9e598:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
   9e59c:	d04d      	beq.n	9e63a <uhd_ep_alloc+0x1e6>
		uhd_configure_address(pipe, add);
   9e59e:	227f      	movs	r2, #127	; 0x7f
   9e5a0:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   9e5a4:	f009 0318 	and.w	r3, r9, #24
   9e5a8:	fa02 f903 	lsl.w	r9, r2, r3
   9e5ac:	fa99 f3a9 	rbit	r3, r9
   9e5b0:	fab3 f383 	clz	r3, r3
		uhd_enable_pipe_interrupt(pipe);
   9e5b4:	f44f 7280 	mov.w	r2, #256	; 0x100
		uhd_enable_pipe_dma_interrupt(pipe);
   9e5b8:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
		uhd_enable_stall_interrupt(pipe);
   9e5bc:	f04f 0c40 	mov.w	ip, #64	; 0x40
		uhd_enable_pipe_error_interrupt(pipe);
   9e5c0:	f04f 0e08 	mov.w	lr, #8
		uhd_configure_address(pipe, add);
   9e5c4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 9e704 <uhd_ep_alloc+0x2b0>
   9e5c8:	08a4      	lsrs	r4, r4, #2
   9e5ca:	fa00 f303 	lsl.w	r3, r0, r3
   9e5ce:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
		uhd_enable_pipe_interrupt(pipe);
   9e5d2:	40aa      	lsls	r2, r5
		uhd_configure_address(pipe, add);
   9e5d4:	4043      	eors	r3, r0
   9e5d6:	ea03 0309 	and.w	r3, r3, r9
   9e5da:	4043      	eors	r3, r0
   9e5dc:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
		uhd_enable_pipe(pipe);
   9e5e0:	4b47      	ldr	r3, [pc, #284]	; (9e700 <uhd_ep_alloc+0x2ac>)
		uhd_enable_pipe_dma_interrupt(pipe);
   9e5e2:	3d01      	subs	r5, #1
		uhd_enable_pipe(pipe);
   9e5e4:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
		uhd_enable_pipe_dma_interrupt(pipe);
   9e5e8:	40af      	lsls	r7, r5
		uhd_enable_pipe(pipe);
   9e5ea:	4306      	orrs	r6, r0
   9e5ec:	f8c3 641c 	str.w	r6, [r3, #1052]	; 0x41c
		uhd_enable_pipe_dma_interrupt(pipe);
   9e5f0:	f8c3 7418 	str.w	r7, [r3, #1048]	; 0x418
		uhd_enable_stall_interrupt(pipe);
   9e5f4:	f8c1 c5f0 	str.w	ip, [r1, #1520]	; 0x5f0
		uhd_enable_pipe_error_interrupt(pipe);
   9e5f8:	f8c1 e5f0 	str.w	lr, [r1, #1520]	; 0x5f0
		uhd_enable_pipe_interrupt(pipe);
   9e5fc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		return true;
   9e600:	2001      	movs	r0, #1
   9e602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t pipe = 1; pipe < UOTGHS_EPT_NUM; pipe++) {
   9e606:	2403      	movs	r4, #3
		if (Is_uhd_pipe_enabled(pipe)) {
   9e608:	2608      	movs	r6, #8
   9e60a:	4625      	mov	r5, r4
   9e60c:	e757      	b.n	9e4be <uhd_ep_alloc+0x6a>
		switch(ep_type) {
   9e60e:	f44f 7900 	mov.w	r9, #512	; 0x200
			if (speed == UHD_SPEED_HIGH) {
   9e612:	2a02      	cmp	r2, #2
   9e614:	d02d      	beq.n	9e672 <uhd_ep_alloc+0x21e>
   9e616:	798b      	ldrb	r3, [r1, #6]
				ep_interval = ep_desc->bInterval;
   9e618:	f04f 0a04 	mov.w	sl, #4
   9e61c:	ea4f 6803 	mov.w	r8, r3, lsl #24
   9e620:	2701      	movs	r7, #1
   9e622:	e784      	b.n	9e52e <uhd_ep_alloc+0xda>
		switch(ep_type) {
   9e624:	461f      	mov	r7, r3
   9e626:	f04f 0800 	mov.w	r8, #0
   9e62a:	f44f 7980 	mov.w	r9, #256	; 0x100
   9e62e:	f04f 0a04 	mov.w	sl, #4
   9e632:	e77c      	b.n	9e52e <uhd_ep_alloc+0xda>
   9e634:	f04f 0e70 	mov.w	lr, #112	; 0x70
   9e638:	e794      	b.n	9e564 <uhd_ep_alloc+0x110>
			uhd_disable_pipe(pipe);
   9e63a:	4a31      	ldr	r2, [pc, #196]	; (9e700 <uhd_ep_alloc+0x2ac>)
			return false;
   9e63c:	4618      	mov	r0, r3
			uhd_disable_pipe(pipe);
   9e63e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   9e642:	ea23 0606 	bic.w	r6, r3, r6
   9e646:	f8c2 641c 	str.w	r6, [r2, #1052]	; 0x41c
			return false;
   9e64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch(ep_type) {
   9e64e:	f44f 7900 	mov.w	r9, #512	; 0x200
			if (speed == UHD_SPEED_HIGH) {
   9e652:	2a02      	cmp	r2, #2
				if (ep_desc->bInterval < 1) {
   9e654:	798b      	ldrb	r3, [r1, #6]
			if (speed == UHD_SPEED_HIGH) {
   9e656:	d01b      	beq.n	9e690 <uhd_ep_alloc+0x23c>
				ep_interval = ep_desc->bInterval;
   9e658:	f04f 0a00 	mov.w	sl, #0
   9e65c:	ea4f 6803 	mov.w	r8, r3, lsl #24
   9e660:	2703      	movs	r7, #3
   9e662:	e764      	b.n	9e52e <uhd_ep_alloc+0xda>
   9e664:	f04f 0e00 	mov.w	lr, #0
   9e668:	e77c      	b.n	9e564 <uhd_ep_alloc+0x110>
	for (uint8_t pipe = 1; pipe < UOTGHS_EPT_NUM; pipe++) {
   9e66a:	2404      	movs	r4, #4
		if (Is_uhd_pipe_enabled(pipe)) {
   9e66c:	2610      	movs	r6, #16
   9e66e:	4625      	mov	r5, r4
   9e670:	e725      	b.n	9e4be <uhd_ep_alloc+0x6a>
				if (ep_desc->bInterval < 1) {
   9e672:	798a      	ldrb	r2, [r1, #6]
   9e674:	b322      	cbz	r2, 9e6c0 <uhd_ep_alloc+0x26c>
				} else if (ep_desc->bInterval >= 8) {
   9e676:	2a07      	cmp	r2, #7
   9e678:	d82c      	bhi.n	9e6d4 <uhd_ep_alloc+0x280>
					ep_interval = 1 << (ep_desc->bInterval - 1);
   9e67a:	2301      	movs	r3, #1
   9e67c:	f102 38ff 	add.w	r8, r2, #4294967295
   9e680:	fa03 f808 	lsl.w	r8, r3, r8
   9e684:	ea4f 6808 	mov.w	r8, r8, lsl #24
   9e688:	461f      	mov	r7, r3
   9e68a:	f04f 0a04 	mov.w	sl, #4
   9e68e:	e74e      	b.n	9e52e <uhd_ep_alloc+0xda>
				if (ep_desc->bInterval < 1) {
   9e690:	b18b      	cbz	r3, 9e6b6 <uhd_ep_alloc+0x262>
				} else if (ep_desc->bInterval >= 8) {
   9e692:	2b07      	cmp	r3, #7
   9e694:	d824      	bhi.n	9e6e0 <uhd_ep_alloc+0x28c>
					ep_interval = 1 << (ep_desc->bInterval - 1);
   9e696:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   9e69a:	3b01      	subs	r3, #1
   9e69c:	fa08 f803 	lsl.w	r8, r8, r3
   9e6a0:	f04f 0a00 	mov.w	sl, #0
   9e6a4:	2703      	movs	r7, #3
   9e6a6:	e742      	b.n	9e52e <uhd_ep_alloc+0xda>
		switch(ep_type) {
   9e6a8:	f44f 7980 	mov.w	r9, #256	; 0x100
   9e6ac:	e7d1      	b.n	9e652 <uhd_ep_alloc+0x1fe>
	for (uint8_t pipe = 1; pipe < UOTGHS_EPT_NUM; pipe++) {
   9e6ae:	2405      	movs	r4, #5
		if (Is_uhd_pipe_enabled(pipe)) {
   9e6b0:	2620      	movs	r6, #32
   9e6b2:	4625      	mov	r5, r4
   9e6b4:	e703      	b.n	9e4be <uhd_ep_alloc+0x6a>
   9e6b6:	469a      	mov	sl, r3
   9e6b8:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   9e6bc:	2703      	movs	r7, #3
   9e6be:	e736      	b.n	9e52e <uhd_ep_alloc+0xda>
   9e6c0:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   9e6c4:	f04f 0a04 	mov.w	sl, #4
   9e6c8:	2701      	movs	r7, #1
   9e6ca:	e730      	b.n	9e52e <uhd_ep_alloc+0xda>
	for (uint8_t pipe = 1; pipe < UOTGHS_EPT_NUM; pipe++) {
   9e6cc:	2406      	movs	r4, #6
		if (Is_uhd_pipe_enabled(pipe)) {
   9e6ce:	2640      	movs	r6, #64	; 0x40
   9e6d0:	4625      	mov	r5, r4
   9e6d2:	e6f4      	b.n	9e4be <uhd_ep_alloc+0x6a>
   9e6d4:	f04f 487f 	mov.w	r8, #4278190080	; 0xff000000
   9e6d8:	f04f 0a04 	mov.w	sl, #4
   9e6dc:	2701      	movs	r7, #1
   9e6de:	e726      	b.n	9e52e <uhd_ep_alloc+0xda>
   9e6e0:	f04f 487f 	mov.w	r8, #4278190080	; 0xff000000
   9e6e4:	f04f 0a00 	mov.w	sl, #0
   9e6e8:	2703      	movs	r7, #3
   9e6ea:	e720      	b.n	9e52e <uhd_ep_alloc+0xda>
	for (uint8_t pipe = 1; pipe < UOTGHS_EPT_NUM; pipe++) {
   9e6ec:	2407      	movs	r4, #7
		if (Is_uhd_pipe_enabled(pipe)) {
   9e6ee:	2680      	movs	r6, #128	; 0x80
   9e6f0:	4625      	mov	r5, r4
   9e6f2:	e6e4      	b.n	9e4be <uhd_ep_alloc+0x6a>
	for (uint8_t pipe = 1; pipe < UOTGHS_EPT_NUM; pipe++) {
   9e6f4:	2408      	movs	r4, #8
		if (Is_uhd_pipe_enabled(pipe)) {
   9e6f6:	f44f 7680 	mov.w	r6, #256	; 0x100
   9e6fa:	4625      	mov	r5, r4
   9e6fc:	e6df      	b.n	9e4be <uhd_ep_alloc+0x6a>
   9e6fe:	bf00      	nop
   9e700:	400ac000 	.word	0x400ac000
   9e704:	400ac424 	.word	0x400ac424

0009e708 <uhd_ep_free>:
{
   9e708:	29ff      	cmp	r1, #255	; 0xff
   9e70a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   9e70e:	4607      	mov	r7, r0
   9e710:	d046      	beq.n	9e7a0 <uhd_ep_free+0x98>
   9e712:	4689      	mov	r9, r1
   9e714:	2401      	movs	r4, #1
   9e716:	2500      	movs	r5, #0
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e718:	4e71      	ldr	r6, [pc, #452]	; (9e8e0 <uhd_ep_free+0x1d8>)
		if (add != uhd_get_configured_address(pipe)) {
   9e71a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 9e8ec <uhd_ep_free+0x1e4>
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e71e:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 9e8f0 <uhd_ep_free+0x1e8>
   9e722:	e005      	b.n	9e730 <uhd_ep_free+0x28>
	for (uint8_t pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9e724:	2c0a      	cmp	r4, #10
   9e726:	f000 80d0 	beq.w	9e8ca <uhd_ep_free+0x1c2>
   9e72a:	3401      	adds	r4, #1
   9e72c:	b2e4      	uxtb	r4, r4
   9e72e:	3501      	adds	r5, #1
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e730:	2301      	movs	r3, #1
   9e732:	f8d6 241c 	ldr.w	r2, [r6, #1052]	; 0x41c
   9e736:	40ab      	lsls	r3, r5
   9e738:	4213      	tst	r3, r2
   9e73a:	b2e8      	uxtb	r0, r5
   9e73c:	d0f2      	beq.n	9e724 <uhd_ep_free+0x1c>
		if (add != uhd_get_configured_address(pipe)) {
   9e73e:	237f      	movs	r3, #127	; 0x7f
   9e740:	00ea      	lsls	r2, r5, #3
   9e742:	f002 0218 	and.w	r2, r2, #24
   9e746:	fa03 f202 	lsl.w	r2, r3, r2
   9e74a:	fa92 f3a2 	rbit	r3, r2
   9e74e:	fab3 f183 	clz	r1, r3
   9e752:	0883      	lsrs	r3, r0, #2
   9e754:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   9e758:	4013      	ands	r3, r2
   9e75a:	40cb      	lsrs	r3, r1
   9e75c:	429f      	cmp	r7, r3
   9e75e:	d1e1      	bne.n	9e724 <uhd_ep_free+0x1c>
   9e760:	00ab      	lsls	r3, r5, #2
   9e762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   9e766:	f503 232c 	add.w	r3, r3, #704512	; 0xac000
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9e76a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
   9e76e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   9e772:	f402 7240 	and.w	r2, r2, #768	; 0x300
   9e776:	f3c3 4303 	ubfx	r3, r3, #16, #4
   9e77a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   9e77e:	bf08      	it	eq
   9e780:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
   9e784:	454b      	cmp	r3, r9
   9e786:	d1cd      	bne.n	9e724 <uhd_ep_free+0x1c>
		if (pipe == 0) {
   9e788:	2d00      	cmp	r5, #0
   9e78a:	f040 80a0 	bne.w	9e8ce <uhd_ep_free+0x1c6>
			if (uhd_ctrl_request_timeout) {
   9e78e:	4b55      	ldr	r3, [pc, #340]	; (9e8e4 <uhd_ep_free+0x1dc>)
   9e790:	881b      	ldrh	r3, [r3, #0]
   9e792:	b29b      	uxth	r3, r3
   9e794:	2b00      	cmp	r3, #0
   9e796:	d0c8      	beq.n	9e72a <uhd_ep_free+0x22>
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
   9e798:	2001      	movs	r0, #1
   9e79a:	4b53      	ldr	r3, [pc, #332]	; (9e8e8 <uhd_ep_free+0x1e0>)
   9e79c:	4798      	blx	r3
   9e79e:	e7c4      	b.n	9e72a <uhd_ep_free+0x22>
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e7a0:	4b4f      	ldr	r3, [pc, #316]	; (9e8e0 <uhd_ep_free+0x1d8>)
   9e7a2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e7a6:	07d9      	lsls	r1, r3, #31
   9e7a8:	d50c      	bpl.n	9e7c4 <uhd_ep_free+0xbc>
		if (add != uhd_get_configured_address(pipe)) {
   9e7aa:	4b50      	ldr	r3, [pc, #320]	; (9e8ec <uhd_ep_free+0x1e4>)
   9e7ac:	681b      	ldr	r3, [r3, #0]
   9e7ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   9e7b2:	4298      	cmp	r0, r3
   9e7b4:	d106      	bne.n	9e7c4 <uhd_ep_free+0xbc>
			if (uhd_ctrl_request_timeout) {
   9e7b6:	4b4b      	ldr	r3, [pc, #300]	; (9e8e4 <uhd_ep_free+0x1dc>)
   9e7b8:	881b      	ldrh	r3, [r3, #0]
   9e7ba:	b29b      	uxth	r3, r3
   9e7bc:	b113      	cbz	r3, 9e7c4 <uhd_ep_free+0xbc>
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
   9e7be:	2001      	movs	r0, #1
   9e7c0:	4b49      	ldr	r3, [pc, #292]	; (9e8e8 <uhd_ep_free+0x1e0>)
   9e7c2:	4798      	blx	r3
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e7c4:	4b46      	ldr	r3, [pc, #280]	; (9e8e0 <uhd_ep_free+0x1d8>)
   9e7c6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e7ca:	079a      	lsls	r2, r3, #30
   9e7cc:	d509      	bpl.n	9e7e2 <uhd_ep_free+0xda>
		if (add != uhd_get_configured_address(pipe)) {
   9e7ce:	4b47      	ldr	r3, [pc, #284]	; (9e8ec <uhd_ep_free+0x1e4>)
   9e7d0:	681b      	ldr	r3, [r3, #0]
   9e7d2:	f3c3 2306 	ubfx	r3, r3, #8, #7
   9e7d6:	429f      	cmp	r7, r3
   9e7d8:	d103      	bne.n	9e7e2 <uhd_ep_free+0xda>
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e7da:	2101      	movs	r1, #1
   9e7dc:	4b44      	ldr	r3, [pc, #272]	; (9e8f0 <uhd_ep_free+0x1e8>)
   9e7de:	4608      	mov	r0, r1
   9e7e0:	4798      	blx	r3
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e7e2:	4b3f      	ldr	r3, [pc, #252]	; (9e8e0 <uhd_ep_free+0x1d8>)
   9e7e4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e7e8:	075b      	lsls	r3, r3, #29
   9e7ea:	d509      	bpl.n	9e800 <uhd_ep_free+0xf8>
		if (add != uhd_get_configured_address(pipe)) {
   9e7ec:	4b3f      	ldr	r3, [pc, #252]	; (9e8ec <uhd_ep_free+0x1e4>)
   9e7ee:	681b      	ldr	r3, [r3, #0]
   9e7f0:	f3c3 4306 	ubfx	r3, r3, #16, #7
   9e7f4:	429f      	cmp	r7, r3
   9e7f6:	d103      	bne.n	9e800 <uhd_ep_free+0xf8>
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e7f8:	2101      	movs	r1, #1
   9e7fa:	2002      	movs	r0, #2
   9e7fc:	4b3c      	ldr	r3, [pc, #240]	; (9e8f0 <uhd_ep_free+0x1e8>)
   9e7fe:	4798      	blx	r3
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e800:	4b37      	ldr	r3, [pc, #220]	; (9e8e0 <uhd_ep_free+0x1d8>)
   9e802:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e806:	071e      	lsls	r6, r3, #28
   9e808:	d509      	bpl.n	9e81e <uhd_ep_free+0x116>
		if (add != uhd_get_configured_address(pipe)) {
   9e80a:	4b38      	ldr	r3, [pc, #224]	; (9e8ec <uhd_ep_free+0x1e4>)
   9e80c:	681b      	ldr	r3, [r3, #0]
   9e80e:	f3c3 6306 	ubfx	r3, r3, #24, #7
   9e812:	429f      	cmp	r7, r3
   9e814:	d103      	bne.n	9e81e <uhd_ep_free+0x116>
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e816:	2101      	movs	r1, #1
   9e818:	2003      	movs	r0, #3
   9e81a:	4b35      	ldr	r3, [pc, #212]	; (9e8f0 <uhd_ep_free+0x1e8>)
   9e81c:	4798      	blx	r3
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e81e:	4b30      	ldr	r3, [pc, #192]	; (9e8e0 <uhd_ep_free+0x1d8>)
   9e820:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e824:	06dd      	lsls	r5, r3, #27
   9e826:	d509      	bpl.n	9e83c <uhd_ep_free+0x134>
		if (add != uhd_get_configured_address(pipe)) {
   9e828:	4b32      	ldr	r3, [pc, #200]	; (9e8f4 <uhd_ep_free+0x1ec>)
   9e82a:	681b      	ldr	r3, [r3, #0]
   9e82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   9e830:	429f      	cmp	r7, r3
   9e832:	d103      	bne.n	9e83c <uhd_ep_free+0x134>
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e834:	2101      	movs	r1, #1
   9e836:	2004      	movs	r0, #4
   9e838:	4b2d      	ldr	r3, [pc, #180]	; (9e8f0 <uhd_ep_free+0x1e8>)
   9e83a:	4798      	blx	r3
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e83c:	4b28      	ldr	r3, [pc, #160]	; (9e8e0 <uhd_ep_free+0x1d8>)
   9e83e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e842:	069c      	lsls	r4, r3, #26
   9e844:	d509      	bpl.n	9e85a <uhd_ep_free+0x152>
		if (add != uhd_get_configured_address(pipe)) {
   9e846:	4b2b      	ldr	r3, [pc, #172]	; (9e8f4 <uhd_ep_free+0x1ec>)
   9e848:	681b      	ldr	r3, [r3, #0]
   9e84a:	f3c3 2306 	ubfx	r3, r3, #8, #7
   9e84e:	429f      	cmp	r7, r3
   9e850:	d103      	bne.n	9e85a <uhd_ep_free+0x152>
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e852:	2101      	movs	r1, #1
   9e854:	2005      	movs	r0, #5
   9e856:	4b26      	ldr	r3, [pc, #152]	; (9e8f0 <uhd_ep_free+0x1e8>)
   9e858:	4798      	blx	r3
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e85a:	4b21      	ldr	r3, [pc, #132]	; (9e8e0 <uhd_ep_free+0x1d8>)
   9e85c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e860:	0658      	lsls	r0, r3, #25
   9e862:	d509      	bpl.n	9e878 <uhd_ep_free+0x170>
		if (add != uhd_get_configured_address(pipe)) {
   9e864:	4b23      	ldr	r3, [pc, #140]	; (9e8f4 <uhd_ep_free+0x1ec>)
   9e866:	681b      	ldr	r3, [r3, #0]
   9e868:	f3c3 4306 	ubfx	r3, r3, #16, #7
   9e86c:	429f      	cmp	r7, r3
   9e86e:	d103      	bne.n	9e878 <uhd_ep_free+0x170>
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e870:	2101      	movs	r1, #1
   9e872:	2006      	movs	r0, #6
   9e874:	4b1e      	ldr	r3, [pc, #120]	; (9e8f0 <uhd_ep_free+0x1e8>)
   9e876:	4798      	blx	r3
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e878:	4b19      	ldr	r3, [pc, #100]	; (9e8e0 <uhd_ep_free+0x1d8>)
   9e87a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e87e:	0619      	lsls	r1, r3, #24
   9e880:	d509      	bpl.n	9e896 <uhd_ep_free+0x18e>
		if (add != uhd_get_configured_address(pipe)) {
   9e882:	4b1c      	ldr	r3, [pc, #112]	; (9e8f4 <uhd_ep_free+0x1ec>)
   9e884:	681b      	ldr	r3, [r3, #0]
   9e886:	f3c3 6306 	ubfx	r3, r3, #24, #7
   9e88a:	429f      	cmp	r7, r3
   9e88c:	d103      	bne.n	9e896 <uhd_ep_free+0x18e>
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e88e:	2101      	movs	r1, #1
   9e890:	2007      	movs	r0, #7
   9e892:	4b17      	ldr	r3, [pc, #92]	; (9e8f0 <uhd_ep_free+0x1e8>)
   9e894:	4798      	blx	r3
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e896:	4b12      	ldr	r3, [pc, #72]	; (9e8e0 <uhd_ep_free+0x1d8>)
   9e898:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e89c:	05da      	lsls	r2, r3, #23
   9e89e:	d509      	bpl.n	9e8b4 <uhd_ep_free+0x1ac>
		if (add != uhd_get_configured_address(pipe)) {
   9e8a0:	4b15      	ldr	r3, [pc, #84]	; (9e8f8 <uhd_ep_free+0x1f0>)
   9e8a2:	681b      	ldr	r3, [r3, #0]
   9e8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   9e8a8:	429f      	cmp	r7, r3
   9e8aa:	d103      	bne.n	9e8b4 <uhd_ep_free+0x1ac>
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e8ac:	2101      	movs	r1, #1
   9e8ae:	2008      	movs	r0, #8
   9e8b0:	4b0f      	ldr	r3, [pc, #60]	; (9e8f0 <uhd_ep_free+0x1e8>)
   9e8b2:	4798      	blx	r3
		if (!Is_uhd_pipe_enabled(pipe)) {
   9e8b4:	4b0a      	ldr	r3, [pc, #40]	; (9e8e0 <uhd_ep_free+0x1d8>)
   9e8b6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   9e8ba:	059b      	lsls	r3, r3, #22
   9e8bc:	d505      	bpl.n	9e8ca <uhd_ep_free+0x1c2>
		if (add != uhd_get_configured_address(pipe)) {
   9e8be:	4b0e      	ldr	r3, [pc, #56]	; (9e8f8 <uhd_ep_free+0x1f0>)
   9e8c0:	681b      	ldr	r3, [r3, #0]
   9e8c2:	f3c3 2306 	ubfx	r3, r3, #8, #7
   9e8c6:	429f      	cmp	r7, r3
   9e8c8:	d004      	beq.n	9e8d4 <uhd_ep_free+0x1cc>
   9e8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e8ce:	2101      	movs	r1, #1
   9e8d0:	47d0      	blx	sl
   9e8d2:	e727      	b.n	9e724 <uhd_ep_free+0x1c>
   9e8d4:	2101      	movs	r1, #1
}
   9e8d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
   9e8da:	2009      	movs	r0, #9
   9e8dc:	4b04      	ldr	r3, [pc, #16]	; (9e8f0 <uhd_ep_free+0x1e8>)
   9e8de:	4718      	bx	r3
   9e8e0:	400ac000 	.word	0x400ac000
   9e8e4:	20072fb4 	.word	0x20072fb4
   9e8e8:	0009c209 	.word	0x0009c209
   9e8ec:	400ac424 	.word	0x400ac424
   9e8f0:	0009c3fd 	.word	0x0009c3fd
   9e8f4:	400ac428 	.word	0x400ac428
   9e8f8:	400ac42c 	.word	0x400ac42c

0009e8fc <uhd_setup_request>:
{
   9e8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9e900:	4680      	mov	r8, r0
   9e902:	b082      	sub	sp, #8
	request = malloc(sizeof(struct uhd_ctrl_request_t));
   9e904:	4c3a      	ldr	r4, [pc, #232]	; (9e9f0 <uhd_setup_request+0xf4>)
   9e906:	201c      	movs	r0, #28
{
   9e908:	460d      	mov	r5, r1
   9e90a:	4617      	mov	r7, r2
   9e90c:	461e      	mov	r6, r3
	request = malloc(sizeof(struct uhd_ctrl_request_t));
   9e90e:	47a0      	blx	r4
	if (request == NULL) {
   9e910:	b320      	cbz	r0, 9e95c <uhd_setup_request+0x60>
	request->next_request = NULL;
   9e912:	2400      	movs	r4, #0
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
   9e914:	682a      	ldr	r2, [r5, #0]
   9e916:	686b      	ldr	r3, [r5, #4]
	request->callback_run = callback_run;
   9e918:	9d08      	ldr	r5, [sp, #32]
	request->add = (uint8_t) add;
   9e91a:	f880 8010 	strb.w	r8, [r0, #16]
	request->callback_run = callback_run;
   9e91e:	6045      	str	r5, [r0, #4]
	request->callback_end = callback_end;
   9e920:	9d09      	ldr	r5, [sp, #36]	; 0x24
	request->payload = payload;
   9e922:	60c7      	str	r7, [r0, #12]
	request->payload_size = payload_size;
   9e924:	8346      	strh	r6, [r0, #26]
	request->callback_end = callback_end;
   9e926:	6085      	str	r5, [r0, #8]
	request->next_request = NULL;
   9e928:	6004      	str	r4, [r0, #0]
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
   9e92a:	f8c0 2011 	str.w	r2, [r0, #17]
   9e92e:	f8c0 3015 	str.w	r3, [r0, #21]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9e932:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9e936:	fab3 f383 	clz	r3, r3
   9e93a:	095b      	lsrs	r3, r3, #5
   9e93c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   9e93e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9e940:	f3bf 8f5f 	dmb	sy
	if (uhd_ctrl_request_first == NULL) {
   9e944:	4a2b      	ldr	r2, [pc, #172]	; (9e9f4 <uhd_setup_request+0xf8>)
	cpu_irq_disable();
   9e946:	4d2c      	ldr	r5, [pc, #176]	; (9e9f8 <uhd_setup_request+0xfc>)
   9e948:	6813      	ldr	r3, [r2, #0]
   9e94a:	702c      	strb	r4, [r5, #0]
	return flags;
   9e94c:	9e01      	ldr	r6, [sp, #4]
   9e94e:	b143      	cbz	r3, 9e962 <uhd_setup_request+0x66>
		uhd_ctrl_request_last->next_request = request;
   9e950:	4b2a      	ldr	r3, [pc, #168]	; (9e9fc <uhd_setup_request+0x100>)
   9e952:	6819      	ldr	r1, [r3, #0]
   9e954:	6008      	str	r0, [r1, #0]
	uhd_ctrl_request_last = request;
   9e956:	6018      	str	r0, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   9e958:	b94e      	cbnz	r6, 9e96e <uhd_setup_request+0x72>
	return true;
   9e95a:	2001      	movs	r0, #1
}
   9e95c:	b002      	add	sp, #8
   9e95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uhd_ctrl_request_last = request;
   9e962:	4b26      	ldr	r3, [pc, #152]	; (9e9fc <uhd_setup_request+0x100>)
   9e964:	4601      	mov	r1, r0
		uhd_ctrl_request_first = request;
   9e966:	6010      	str	r0, [r2, #0]
	uhd_ctrl_request_last = request;
   9e968:	6018      	str	r0, [r3, #0]
   9e96a:	b146      	cbz	r6, 9e97e <uhd_setup_request+0x82>
		b_start_request = true;
   9e96c:	2401      	movs	r4, #1
		cpu_irq_enable();
   9e96e:	2301      	movs	r3, #1
   9e970:	702b      	strb	r3, [r5, #0]
   9e972:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9e976:	b662      	cpsie	i
	if (b_start_request) {
   9e978:	2c00      	cmp	r4, #0
   9e97a:	d0ee      	beq.n	9e95a <uhd_setup_request+0x5e>
   9e97c:	6811      	ldr	r1, [r2, #0]
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
   9e97e:	2200      	movs	r2, #0
   9e980:	4c1f      	ldr	r4, [pc, #124]	; (9ea00 <uhd_setup_request+0x104>)
	uhd_ctrl_nb_trans = 0;
   9e982:	4820      	ldr	r0, [pc, #128]	; (9ea04 <uhd_setup_request+0x108>)
	if (!Is_uhd_pipe_enabled(0) ||
   9e984:	4b20      	ldr	r3, [pc, #128]	; (9ea08 <uhd_setup_request+0x10c>)
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
   9e986:	7022      	strb	r2, [r4, #0]
	uhd_ctrl_nb_trans = 0;
   9e988:	8002      	strh	r2, [r0, #0]
	if (!Is_uhd_pipe_enabled(0) ||
   9e98a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
	memcpy(&setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
   9e98e:	f8d1 4011 	ldr.w	r4, [r1, #17]
	if (!Is_uhd_pipe_enabled(0) ||
   9e992:	07d2      	lsls	r2, r2, #31
	memcpy(&setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
   9e994:	f8d1 0015 	ldr.w	r0, [r1, #21]
	if (!Is_uhd_pipe_enabled(0) ||
   9e998:	d506      	bpl.n	9e9a8 <uhd_setup_request+0xac>
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
   9e99a:	4a1c      	ldr	r2, [pc, #112]	; (9ea0c <uhd_setup_request+0x110>)
   9e99c:	7c09      	ldrb	r1, [r1, #16]
   9e99e:	6812      	ldr	r2, [r2, #0]
   9e9a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	if (!Is_uhd_pipe_enabled(0) ||
   9e9a4:	4291      	cmp	r1, r2
   9e9a6:	d003      	beq.n	9e9b0 <uhd_setup_request+0xb4>
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
   9e9a8:	2001      	movs	r0, #1
   9e9aa:	4b19      	ldr	r3, [pc, #100]	; (9ea10 <uhd_setup_request+0x114>)
   9e9ac:	4798      	blx	r3
   9e9ae:	e7d4      	b.n	9e95a <uhd_setup_request+0x5e>
	*ptr_ep_data = setup.value64;
   9e9b0:	4626      	mov	r6, r4
	uhd_ack_setup_ready(0);
   9e9b2:	2104      	movs	r1, #4
	*ptr_ep_data = setup.value64;
   9e9b4:	4607      	mov	r7, r0
	uhd_ctrl_request_timeout = 5000;
   9e9b6:	f241 3e88 	movw	lr, #5000	; 0x1388
	uhd_ack_fifocon(0);
   9e9ba:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	uhd_unfreeze_pipe(0);
   9e9be:	f44f 3400 	mov.w	r4, #131072	; 0x20000
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_SETUP);
   9e9c2:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
	*ptr_ep_data = setup.value64;
   9e9c6:	4813      	ldr	r0, [pc, #76]	; (9ea14 <uhd_setup_request+0x118>)
	uhd_configure_pipe_token(0, UOTGHS_HSTPIPCFG_PTOKEN_SETUP);
   9e9c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   9e9cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	uhd_ctrl_request_timeout = 5000;
   9e9d0:	4a11      	ldr	r2, [pc, #68]	; (9ea18 <uhd_setup_request+0x11c>)
	uhd_ack_setup_ready(0);
   9e9d2:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
	*ptr_ep_data = setup.value64;
   9e9d6:	e9c0 6700 	strd	r6, r7, [r0]
	uhd_ctrl_request_timeout = 5000;
   9e9da:	f8a2 e000 	strh.w	lr, [r2]
	return true;
   9e9de:	2001      	movs	r0, #1
	uhd_enable_setup_ready_interrupt(0);
   9e9e0:	f8c3 15f0 	str.w	r1, [r3, #1520]	; 0x5f0
	uhd_ack_fifocon(0);
   9e9e4:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	uhd_unfreeze_pipe(0);
   9e9e8:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
   9e9ec:	e7b6      	b.n	9e95c <uhd_setup_request+0x60>
   9e9ee:	bf00      	nop
   9e9f0:	000a52e1 	.word	0x000a52e1
   9e9f4:	20072fa8 	.word	0x20072fa8
   9e9f8:	2007026b 	.word	0x2007026b
   9e9fc:	20072fb0 	.word	0x20072fb0
   9ea00:	20072fa4 	.word	0x20072fa4
   9ea04:	20072fac 	.word	0x20072fac
   9ea08:	400ac000 	.word	0x400ac000
   9ea0c:	400ac424 	.word	0x400ac424
   9ea10:	0009c209 	.word	0x0009c209
   9ea14:	20180000 	.word	0x20180000
   9ea18:	20072fb4 	.word	0x20072fb4

0009ea1c <uhd_ep_run>:
{
   9ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (!Is_uhd_pipe_enabled(pipe)) {
   9ea20:	4cbc      	ldr	r4, [pc, #752]	; (9ed14 <uhd_ep_run+0x2f8>)
{
   9ea22:	b087      	sub	sp, #28
		if (!Is_uhd_pipe_enabled(pipe)) {
   9ea24:	f8d4 541c 	ldr.w	r5, [r4, #1052]	; 0x41c
{
   9ea28:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
		if (!Is_uhd_pipe_enabled(pipe)) {
   9ea2c:	07ed      	lsls	r5, r5, #31
   9ea2e:	d506      	bpl.n	9ea3e <uhd_ep_run+0x22>
		if (add != uhd_get_configured_address(pipe)) {
   9ea30:	4db9      	ldr	r5, [pc, #740]	; (9ed18 <uhd_ep_run+0x2fc>)
   9ea32:	682d      	ldr	r5, [r5, #0]
   9ea34:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   9ea38:	42a8      	cmp	r0, r5
   9ea3a:	f000 8123 	beq.w	9ec84 <uhd_ep_run+0x268>
		if (!Is_uhd_pipe_enabled(pipe)) {
   9ea3e:	4cb5      	ldr	r4, [pc, #724]	; (9ed14 <uhd_ep_run+0x2f8>)
   9ea40:	f8d4 441c 	ldr.w	r4, [r4, #1052]	; 0x41c
   9ea44:	07a4      	lsls	r4, r4, #30
   9ea46:	d430      	bmi.n	9eaaa <uhd_ep_run+0x8e>
   9ea48:	4cb2      	ldr	r4, [pc, #712]	; (9ed14 <uhd_ep_run+0x2f8>)
   9ea4a:	f8d4 441c 	ldr.w	r4, [r4, #1052]	; 0x41c
   9ea4e:	0767      	lsls	r7, r4, #29
   9ea50:	d444      	bmi.n	9eadc <uhd_ep_run+0xc0>
   9ea52:	4cb0      	ldr	r4, [pc, #704]	; (9ed14 <uhd_ep_run+0x2f8>)
   9ea54:	f8d4 441c 	ldr.w	r4, [r4, #1052]	; 0x41c
   9ea58:	0726      	lsls	r6, r4, #28
   9ea5a:	d458      	bmi.n	9eb0e <uhd_ep_run+0xf2>
   9ea5c:	4cad      	ldr	r4, [pc, #692]	; (9ed14 <uhd_ep_run+0x2f8>)
   9ea5e:	f8d4 441c 	ldr.w	r4, [r4, #1052]	; 0x41c
   9ea62:	06e5      	lsls	r5, r4, #27
   9ea64:	d46c      	bmi.n	9eb40 <uhd_ep_run+0x124>
   9ea66:	4cab      	ldr	r4, [pc, #684]	; (9ed14 <uhd_ep_run+0x2f8>)
   9ea68:	f8d4 441c 	ldr.w	r4, [r4, #1052]	; 0x41c
   9ea6c:	06a4      	lsls	r4, r4, #26
   9ea6e:	f100 8081 	bmi.w	9eb74 <uhd_ep_run+0x158>
   9ea72:	4ca8      	ldr	r4, [pc, #672]	; (9ed14 <uhd_ep_run+0x2f8>)
   9ea74:	f8d4 441c 	ldr.w	r4, [r4, #1052]	; 0x41c
   9ea78:	0667      	lsls	r7, r4, #25
   9ea7a:	f100 8096 	bmi.w	9ebaa <uhd_ep_run+0x18e>
   9ea7e:	4ca5      	ldr	r4, [pc, #660]	; (9ed14 <uhd_ep_run+0x2f8>)
   9ea80:	f8d4 441c 	ldr.w	r4, [r4, #1052]	; 0x41c
   9ea84:	0626      	lsls	r6, r4, #24
   9ea86:	f100 80ab 	bmi.w	9ebe0 <uhd_ep_run+0x1c4>
   9ea8a:	4ca2      	ldr	r4, [pc, #648]	; (9ed14 <uhd_ep_run+0x2f8>)
   9ea8c:	f8d4 441c 	ldr.w	r4, [r4, #1052]	; 0x41c
   9ea90:	05e5      	lsls	r5, r4, #23
   9ea92:	f100 80c0 	bmi.w	9ec16 <uhd_ep_run+0x1fa>
   9ea96:	4c9f      	ldr	r4, [pc, #636]	; (9ed14 <uhd_ep_run+0x2f8>)
   9ea98:	f8d4 441c 	ldr.w	r4, [r4, #1052]	; 0x41c
   9ea9c:	05a4      	lsls	r4, r4, #22
   9ea9e:	f100 80d5 	bmi.w	9ec4c <uhd_ep_run+0x230>
		return false; // pipe not found
   9eaa2:	2000      	movs	r0, #0
}
   9eaa4:	b007      	add	sp, #28
   9eaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (add != uhd_get_configured_address(pipe)) {
   9eaaa:	4c9b      	ldr	r4, [pc, #620]	; (9ed18 <uhd_ep_run+0x2fc>)
   9eaac:	6824      	ldr	r4, [r4, #0]
   9eaae:	f3c4 2406 	ubfx	r4, r4, #8, #7
   9eab2:	42a0      	cmp	r0, r4
   9eab4:	d1c8      	bne.n	9ea48 <uhd_ep_run+0x2c>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9eab6:	4d99      	ldr	r5, [pc, #612]	; (9ed1c <uhd_ep_run+0x300>)
   9eab8:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eabc:	f404 7440 	and.w	r4, r4, #768	; 0x300
   9eac0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   9eac4:	f000 81f6 	beq.w	9eeb4 <uhd_ep_run+0x498>
   9eac8:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eacc:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9ead0:	42a1      	cmp	r1, r4
   9ead2:	d1b9      	bne.n	9ea48 <uhd_ep_run+0x2c>
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9ead4:	2101      	movs	r1, #1
   9ead6:	9102      	str	r1, [sp, #8]
		if (!Is_uhd_pipe_enabled(pipe)) {
   9ead8:	4688      	mov	r8, r1
   9eada:	e0e5      	b.n	9eca8 <uhd_ep_run+0x28c>
		if (add != uhd_get_configured_address(pipe)) {
   9eadc:	4c8e      	ldr	r4, [pc, #568]	; (9ed18 <uhd_ep_run+0x2fc>)
   9eade:	6824      	ldr	r4, [r4, #0]
   9eae0:	f3c4 4406 	ubfx	r4, r4, #16, #7
   9eae4:	42a0      	cmp	r0, r4
   9eae6:	d1b4      	bne.n	9ea52 <uhd_ep_run+0x36>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9eae8:	4d8d      	ldr	r5, [pc, #564]	; (9ed20 <uhd_ep_run+0x304>)
   9eaea:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eaee:	f404 7440 	and.w	r4, r4, #768	; 0x300
   9eaf2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   9eaf6:	f000 81e4 	beq.w	9eec2 <uhd_ep_run+0x4a6>
   9eafa:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eafe:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9eb02:	42a1      	cmp	r1, r4
   9eb04:	d1a5      	bne.n	9ea52 <uhd_ep_run+0x36>
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9eb06:	2102      	movs	r1, #2
   9eb08:	9102      	str	r1, [sp, #8]
		if (!Is_uhd_pipe_enabled(pipe)) {
   9eb0a:	4688      	mov	r8, r1
   9eb0c:	e0cc      	b.n	9eca8 <uhd_ep_run+0x28c>
		if (add != uhd_get_configured_address(pipe)) {
   9eb0e:	4c82      	ldr	r4, [pc, #520]	; (9ed18 <uhd_ep_run+0x2fc>)
   9eb10:	6824      	ldr	r4, [r4, #0]
   9eb12:	f3c4 6406 	ubfx	r4, r4, #24, #7
   9eb16:	42a0      	cmp	r0, r4
   9eb18:	d1a0      	bne.n	9ea5c <uhd_ep_run+0x40>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9eb1a:	4d82      	ldr	r5, [pc, #520]	; (9ed24 <uhd_ep_run+0x308>)
   9eb1c:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eb20:	f404 7440 	and.w	r4, r4, #768	; 0x300
   9eb24:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   9eb28:	f000 81d2 	beq.w	9eed0 <uhd_ep_run+0x4b4>
   9eb2c:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eb30:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9eb34:	42a1      	cmp	r1, r4
   9eb36:	d191      	bne.n	9ea5c <uhd_ep_run+0x40>
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9eb38:	2103      	movs	r1, #3
   9eb3a:	9102      	str	r1, [sp, #8]
		if (!Is_uhd_pipe_enabled(pipe)) {
   9eb3c:	4688      	mov	r8, r1
   9eb3e:	e0b3      	b.n	9eca8 <uhd_ep_run+0x28c>
		if (add != uhd_get_configured_address(pipe)) {
   9eb40:	4c79      	ldr	r4, [pc, #484]	; (9ed28 <uhd_ep_run+0x30c>)
   9eb42:	6824      	ldr	r4, [r4, #0]
   9eb44:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   9eb48:	42a0      	cmp	r0, r4
   9eb4a:	d18c      	bne.n	9ea66 <uhd_ep_run+0x4a>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9eb4c:	4d77      	ldr	r5, [pc, #476]	; (9ed2c <uhd_ep_run+0x310>)
   9eb4e:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eb52:	f404 7440 	and.w	r4, r4, #768	; 0x300
   9eb56:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   9eb5a:	f000 81c0 	beq.w	9eede <uhd_ep_run+0x4c2>
   9eb5e:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eb62:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9eb66:	42a1      	cmp	r1, r4
   9eb68:	f47f af7d 	bne.w	9ea66 <uhd_ep_run+0x4a>
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9eb6c:	2104      	movs	r1, #4
   9eb6e:	9102      	str	r1, [sp, #8]
		if (!Is_uhd_pipe_enabled(pipe)) {
   9eb70:	4688      	mov	r8, r1
   9eb72:	e099      	b.n	9eca8 <uhd_ep_run+0x28c>
		if (add != uhd_get_configured_address(pipe)) {
   9eb74:	4c6c      	ldr	r4, [pc, #432]	; (9ed28 <uhd_ep_run+0x30c>)
   9eb76:	6824      	ldr	r4, [r4, #0]
   9eb78:	f3c4 2406 	ubfx	r4, r4, #8, #7
   9eb7c:	42a0      	cmp	r0, r4
   9eb7e:	f47f af78 	bne.w	9ea72 <uhd_ep_run+0x56>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9eb82:	4d6b      	ldr	r5, [pc, #428]	; (9ed30 <uhd_ep_run+0x314>)
   9eb84:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eb88:	f404 7440 	and.w	r4, r4, #768	; 0x300
   9eb8c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   9eb90:	f000 81ac 	beq.w	9eeec <uhd_ep_run+0x4d0>
   9eb94:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eb98:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9eb9c:	42a1      	cmp	r1, r4
   9eb9e:	f47f af68 	bne.w	9ea72 <uhd_ep_run+0x56>
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9eba2:	2105      	movs	r1, #5
   9eba4:	9102      	str	r1, [sp, #8]
		if (!Is_uhd_pipe_enabled(pipe)) {
   9eba6:	4688      	mov	r8, r1
   9eba8:	e07e      	b.n	9eca8 <uhd_ep_run+0x28c>
		if (add != uhd_get_configured_address(pipe)) {
   9ebaa:	4c5f      	ldr	r4, [pc, #380]	; (9ed28 <uhd_ep_run+0x30c>)
   9ebac:	6824      	ldr	r4, [r4, #0]
   9ebae:	f3c4 4406 	ubfx	r4, r4, #16, #7
   9ebb2:	42a0      	cmp	r0, r4
   9ebb4:	f47f af63 	bne.w	9ea7e <uhd_ep_run+0x62>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9ebb8:	4d5e      	ldr	r5, [pc, #376]	; (9ed34 <uhd_ep_run+0x318>)
   9ebba:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9ebbe:	f404 7440 	and.w	r4, r4, #768	; 0x300
   9ebc2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   9ebc6:	f000 8198 	beq.w	9eefa <uhd_ep_run+0x4de>
   9ebca:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9ebce:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9ebd2:	42a1      	cmp	r1, r4
   9ebd4:	f47f af53 	bne.w	9ea7e <uhd_ep_run+0x62>
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9ebd8:	2106      	movs	r1, #6
   9ebda:	9102      	str	r1, [sp, #8]
		if (!Is_uhd_pipe_enabled(pipe)) {
   9ebdc:	4688      	mov	r8, r1
   9ebde:	e063      	b.n	9eca8 <uhd_ep_run+0x28c>
		if (add != uhd_get_configured_address(pipe)) {
   9ebe0:	4c51      	ldr	r4, [pc, #324]	; (9ed28 <uhd_ep_run+0x30c>)
   9ebe2:	6824      	ldr	r4, [r4, #0]
   9ebe4:	f3c4 6406 	ubfx	r4, r4, #24, #7
   9ebe8:	42a0      	cmp	r0, r4
   9ebea:	f47f af4e 	bne.w	9ea8a <uhd_ep_run+0x6e>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9ebee:	4d52      	ldr	r5, [pc, #328]	; (9ed38 <uhd_ep_run+0x31c>)
   9ebf0:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9ebf4:	f404 7440 	and.w	r4, r4, #768	; 0x300
   9ebf8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   9ebfc:	f000 8184 	beq.w	9ef08 <uhd_ep_run+0x4ec>
   9ec00:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9ec04:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9ec08:	42a1      	cmp	r1, r4
   9ec0a:	f47f af3e 	bne.w	9ea8a <uhd_ep_run+0x6e>
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9ec0e:	2107      	movs	r1, #7
   9ec10:	9102      	str	r1, [sp, #8]
		if (!Is_uhd_pipe_enabled(pipe)) {
   9ec12:	4688      	mov	r8, r1
   9ec14:	e048      	b.n	9eca8 <uhd_ep_run+0x28c>
		if (add != uhd_get_configured_address(pipe)) {
   9ec16:	4c49      	ldr	r4, [pc, #292]	; (9ed3c <uhd_ep_run+0x320>)
   9ec18:	6824      	ldr	r4, [r4, #0]
   9ec1a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   9ec1e:	42a0      	cmp	r0, r4
   9ec20:	f47f af39 	bne.w	9ea96 <uhd_ep_run+0x7a>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9ec24:	4d46      	ldr	r5, [pc, #280]	; (9ed40 <uhd_ep_run+0x324>)
   9ec26:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9ec2a:	f404 7440 	and.w	r4, r4, #768	; 0x300
   9ec2e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   9ec32:	f000 8170 	beq.w	9ef16 <uhd_ep_run+0x4fa>
   9ec36:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9ec3a:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9ec3e:	42a1      	cmp	r1, r4
   9ec40:	f47f af29 	bne.w	9ea96 <uhd_ep_run+0x7a>
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9ec44:	2108      	movs	r1, #8
   9ec46:	9102      	str	r1, [sp, #8]
		if (!Is_uhd_pipe_enabled(pipe)) {
   9ec48:	4688      	mov	r8, r1
   9ec4a:	e02d      	b.n	9eca8 <uhd_ep_run+0x28c>
		if (add != uhd_get_configured_address(pipe)) {
   9ec4c:	4c3b      	ldr	r4, [pc, #236]	; (9ed3c <uhd_ep_run+0x320>)
   9ec4e:	6824      	ldr	r4, [r4, #0]
   9ec50:	f3c4 2406 	ubfx	r4, r4, #8, #7
   9ec54:	42a0      	cmp	r0, r4
   9ec56:	f47f af24 	bne.w	9eaa2 <uhd_ep_run+0x86>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9ec5a:	4c3a      	ldr	r4, [pc, #232]	; (9ed44 <uhd_ep_run+0x328>)
   9ec5c:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   9ec60:	f400 7040 	and.w	r0, r0, #768	; 0x300
   9ec64:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   9ec68:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   9ec6c:	f3c0 4003 	ubfx	r0, r0, #16, #4
   9ec70:	bf08      	it	eq
   9ec72:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   9ec76:	4281      	cmp	r1, r0
   9ec78:	f47f af13 	bne.w	9eaa2 <uhd_ep_run+0x86>
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9ec7c:	2109      	movs	r1, #9
   9ec7e:	9102      	str	r1, [sp, #8]
		if (!Is_uhd_pipe_enabled(pipe)) {
   9ec80:	4688      	mov	r8, r1
   9ec82:	e011      	b.n	9eca8 <uhd_ep_run+0x28c>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9ec84:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   9ec88:	f405 7540 	and.w	r5, r5, #768	; 0x300
   9ec8c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   9ec90:	f000 8109 	beq.w	9eea6 <uhd_ep_run+0x48a>
   9ec94:	f8d4 4500 	ldr.w	r4, [r4, #1280]	; 0x500
   9ec98:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9ec9c:	42a1      	cmp	r1, r4
   9ec9e:	f47f aece 	bne.w	9ea3e <uhd_ep_run+0x22>
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9eca2:	2100      	movs	r1, #0
		if (!Is_uhd_pipe_enabled(pipe)) {
   9eca4:	4688      	mov	r8, r1
	for (pipe = 0; pipe < UOTGHS_EPT_NUM; pipe++) {
   9eca6:	9102      	str	r1, [sp, #8]
   9eca8:	ea4f 0188 	mov.w	r1, r8, lsl #2
   9ecac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   9ecb0:	f501 212c 	add.w	r1, r1, #704512	; 0xac000
	bool b_pipe_in = uhd_is_pipe_in(pipe);
   9ecb4:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
	ptr_job = &uhd_pipe_job[pipe-1];
   9ecb8:	f108 37ff 	add.w	r7, r8, #4294967295
	bool b_pipe_in = uhd_is_pipe_in(pipe);
   9ecbc:	9001      	str	r0, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9ecbe:	f3ef 8010 	mrs	r0, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9ecc2:	fab0 f080 	clz	r0, r0
   9ecc6:	0940      	lsrs	r0, r0, #5
   9ecc8:	9004      	str	r0, [sp, #16]
  __ASM volatile ("cpsid i" : : : "memory");
   9ecca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9eccc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9ecd0:	f04f 0a00 	mov.w	sl, #0
	if (ptr_job->busy == true) {
   9ecd4:	ea4f 0c87 	mov.w	ip, r7, lsl #2
   9ecd8:	eb0c 0407 	add.w	r4, ip, r7
   9ecdc:	f8df e06c 	ldr.w	lr, [pc, #108]	; 9ed4c <uhd_ep_run+0x330>
   9ece0:	00a4      	lsls	r4, r4, #2
   9ece2:	eb0e 0604 	add.w	r6, lr, r4
   9ece6:	7cb5      	ldrb	r5, [r6, #18]
   9ece8:	4817      	ldr	r0, [pc, #92]	; (9ed48 <uhd_ep_run+0x32c>)
   9ecea:	f015 0501 	ands.w	r5, r5, #1
   9ecee:	f880 a000 	strb.w	sl, [r0]
	return flags;
   9ecf2:	f8dd 9010 	ldr.w	r9, [sp, #16]
   9ecf6:	9500      	str	r5, [sp, #0]
   9ecf8:	d02a      	beq.n	9ed50 <uhd_ep_run+0x334>
	if (cpu_irq_is_enabled_flags(flags))
   9ecfa:	f1b9 0f00 	cmp.w	r9, #0
   9ecfe:	f43f aed0 	beq.w	9eaa2 <uhd_ep_run+0x86>
		cpu_irq_enable();
   9ed02:	2301      	movs	r3, #1
   9ed04:	7003      	strb	r3, [r0, #0]
   9ed06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9ed0a:	b662      	cpsie	i
		return false; // Job already on going
   9ed0c:	4650      	mov	r0, sl
}
   9ed0e:	b007      	add	sp, #28
   9ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9ed14:	400ac000 	.word	0x400ac000
   9ed18:	400ac424 	.word	0x400ac424
   9ed1c:	400ac004 	.word	0x400ac004
   9ed20:	400ac008 	.word	0x400ac008
   9ed24:	400ac00c 	.word	0x400ac00c
   9ed28:	400ac428 	.word	0x400ac428
   9ed2c:	400ac010 	.word	0x400ac010
   9ed30:	400ac014 	.word	0x400ac014
   9ed34:	400ac018 	.word	0x400ac018
   9ed38:	400ac01c 	.word	0x400ac01c
   9ed3c:	400ac42c 	.word	0x400ac42c
   9ed40:	400ac020 	.word	0x400ac020
   9ed44:	400ac024 	.word	0x400ac024
   9ed48:	2007026b 	.word	0x2007026b
   9ed4c:	20072d44 	.word	0x20072d44
	ptr_job->busy = true;
   9ed50:	f106 0510 	add.w	r5, r6, #16
   9ed54:	f896 a012 	ldrb.w	sl, [r6, #18]
   9ed58:	9503      	str	r5, [sp, #12]
	ptr_job->buf_size = buf_size;
   9ed5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
	ptr_job->buf = buf;
   9ed5c:	6073      	str	r3, [r6, #4]
	ptr_job->buf_size = buf_size;
   9ed5e:	60b5      	str	r5, [r6, #8]
	ptr_job->b_shortpacket = b_shortpacket;
   9ed60:	f04a 0301 	orr.w	r3, sl, #1
	ptr_job->nb_trans = 0;
   9ed64:	9d00      	ldr	r5, [sp, #0]
	if ((Is_uhd_pipe_int(pipe) || Is_uhd_pipe_iso(pipe))
   9ed66:	f8d1 a500 	ldr.w	sl, [r1, #1280]	; 0x500
	ptr_job->nb_trans = 0;
   9ed6a:	60f5      	str	r5, [r6, #12]
	if ((Is_uhd_pipe_int(pipe) || Is_uhd_pipe_iso(pipe))
   9ed6c:	f40a 5a40 	and.w	sl, sl, #12288	; 0x3000
	ptr_job->timeout = timeout;
   9ed70:	f8a6 b010 	strh.w	fp, [r6, #16]
	ptr_job->b_shortpacket = b_shortpacket;
   9ed74:	9d03      	ldr	r5, [sp, #12]
	ptr_job->call_end = callback;
   9ed76:	9e12      	ldr	r6, [sp, #72]	; 0x48
	ptr_job->b_shortpacket = b_shortpacket;
   9ed78:	f362 0341 	bfi	r3, r2, #1, #1
	if ((Is_uhd_pipe_int(pipe) || Is_uhd_pipe_iso(pipe))
   9ed7c:	f5ba 5f40 	cmp.w	sl, #12288	; 0x3000
	ptr_job->call_end = callback;
   9ed80:	f84e 6004 	str.w	r6, [lr, r4]
	ptr_job->b_shortpacket = b_shortpacket;
   9ed84:	70ab      	strb	r3, [r5, #2]
	if ((Is_uhd_pipe_int(pipe) || Is_uhd_pipe_iso(pipe))
   9ed86:	d03c      	beq.n	9ee02 <uhd_ep_run+0x3e6>
   9ed88:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
   9ed8c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   9ed90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   9ed94:	d035      	beq.n	9ee02 <uhd_ep_run+0x3e6>
	if (cpu_irq_is_enabled_flags(flags))
   9ed96:	f1b9 0f00 	cmp.w	r9, #0
   9ed9a:	d144      	bne.n	9ee26 <uhd_ep_run+0x40a>
	if (!Is_uhd_pipe_dma_supported(pipe)) {
   9ed9c:	9b02      	ldr	r3, [sp, #8]
   9ed9e:	3b01      	subs	r3, #1
   9eda0:	2b05      	cmp	r3, #5
   9eda2:	d949      	bls.n	9ee38 <uhd_ep_run+0x41c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   9eda4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   9eda8:	fab3 f383 	clz	r3, r3
   9edac:	095b      	lsrs	r3, r3, #5
   9edae:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   9edb0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   9edb2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   9edb6:	2300      	movs	r3, #0
		uhd_unfreeze_pipe(pipe);
   9edb8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   9edbc:	7003      	strb	r3, [r0, #0]
	bool b_pipe_in = uhd_is_pipe_in(pipe);
   9edbe:	9d01      	ldr	r5, [sp, #4]
	return flags;
   9edc0:	9c05      	ldr	r4, [sp, #20]
		uhd_disable_pipe_bank_autoswitch(pipe);
   9edc2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
	bool b_pipe_in = uhd_is_pipe_in(pipe);
   9edc6:	f405 7540 	and.w	r5, r5, #768	; 0x300
		uhd_disable_pipe_bank_autoswitch(pipe);
   9edca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
		if (b_pipe_in) {
   9edce:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
		uhd_disable_pipe_bank_autoswitch(pipe);
   9edd2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
		uhd_unfreeze_pipe(pipe);
   9edd6:	f8c1 6620 	str.w	r6, [r1, #1568]	; 0x620
		if (b_pipe_in) {
   9edda:	d044      	beq.n	9ee66 <uhd_ep_run+0x44a>
			uhd_disable_bank_interrupt(pipe);
   9eddc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
			uhd_enable_out_ready_interrupt(pipe);
   9ede0:	2302      	movs	r3, #2
			uhd_disable_bank_interrupt(pipe);
   9ede2:	f8c1 2620 	str.w	r2, [r1, #1568]	; 0x620
			uhd_enable_out_ready_interrupt(pipe);
   9ede6:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
		uhd_enable_pipe_interrupt(pipe);
   9edea:	f44f 7380 	mov.w	r3, #256	; 0x100
   9edee:	4a4d      	ldr	r2, [pc, #308]	; (9ef24 <uhd_ep_run+0x508>)
   9edf0:	fa03 f308 	lsl.w	r3, r3, r8
   9edf4:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
	if (cpu_irq_is_enabled_flags(flags))
   9edf8:	bb64      	cbnz	r4, 9ee54 <uhd_ep_run+0x438>
		return true;
   9edfa:	2001      	movs	r0, #1
}
   9edfc:	b007      	add	sp, #28
   9edfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& (Is_uhd_pipe_out(pipe))) {
   9ee02:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
   9ee06:	f403 7340 	and.w	r3, r3, #768	; 0x300
   9ee0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   9ee0e:	d1c2      	bne.n	9ed96 <uhd_ep_run+0x37a>
		ptr_job->b_periodic_start = true;
   9ee10:	eb0c 0307 	add.w	r3, ip, r7
   9ee14:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
   9ee18:	7c9c      	ldrb	r4, [r3, #18]
   9ee1a:	f044 0404 	orr.w	r4, r4, #4
   9ee1e:	749c      	strb	r4, [r3, #18]
   9ee20:	f1b9 0f00 	cmp.w	r9, #0
   9ee24:	d0ba      	beq.n	9ed9c <uhd_ep_run+0x380>
		cpu_irq_enable();
   9ee26:	2301      	movs	r3, #1
   9ee28:	7003      	strb	r3, [r0, #0]
   9ee2a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9ee2e:	b662      	cpsie	i
	if (!Is_uhd_pipe_dma_supported(pipe)) {
   9ee30:	9b02      	ldr	r3, [sp, #8]
   9ee32:	3b01      	subs	r3, #1
   9ee34:	2b05      	cmp	r3, #5
   9ee36:	d8b5      	bhi.n	9eda4 <uhd_ep_run+0x388>
	if (Is_uhd_pipe_bulk_in(pipe)) {
   9ee38:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
   9ee3c:	f403 534c 	and.w	r3, r3, #13056	; 0x3300
   9ee40:	f5b3 5f04 	cmp.w	r3, #8448	; 0x2100
   9ee44:	d029      	beq.n	9ee9a <uhd_ep_run+0x47e>
	uhd_pipe_trans_complet(pipe);
   9ee46:	9802      	ldr	r0, [sp, #8]
   9ee48:	4b37      	ldr	r3, [pc, #220]	; (9ef28 <uhd_ep_run+0x50c>)
   9ee4a:	4798      	blx	r3
	return true;
   9ee4c:	2001      	movs	r0, #1
}
   9ee4e:	b007      	add	sp, #28
   9ee50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9ee54:	f04f 0a01 	mov.w	sl, #1
   9ee58:	f880 a000 	strb.w	sl, [r0]
  __ASM volatile ("dmb 0xF":::"memory");
   9ee5c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   9ee60:	b662      	cpsie	i
		return true;
   9ee62:	4650      	mov	r0, sl
   9ee64:	e61e      	b.n	9eaa4 <uhd_ep_run+0x88>
			uhd_enable_in_received_interrupt(pipe);
   9ee66:	2501      	movs	r5, #1
			uhd_enable_continuous_in_mode(pipe);
   9ee68:	f8d1 3650 	ldr.w	r3, [r1, #1616]	; 0x650
   9ee6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   9ee70:	f8c1 3650 	str.w	r3, [r1, #1616]	; 0x650
			uhd_enable_in_received_interrupt(pipe);
   9ee74:	f8c1 55f0 	str.w	r5, [r1, #1520]	; 0x5f0
			if (b_shortpacket) {
   9ee78:	b112      	cbz	r2, 9ee80 <uhd_ep_run+0x464>
				uhd_enable_short_packet_interrupt(pipe);
   9ee7a:	2380      	movs	r3, #128	; 0x80
   9ee7c:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
			if (Is_uhd_pipe_bulk(pipe)) {
   9ee80:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
   9ee84:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   9ee88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   9ee8c:	d1ad      	bne.n	9edea <uhd_ep_run+0x3ce>
				uhd_ack_nak_received(pipe);
   9ee8e:	2310      	movs	r3, #16
   9ee90:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
				uhd_enable_nak_received_interrupt(pipe);
   9ee94:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
   9ee98:	e7a7      	b.n	9edea <uhd_ep_run+0x3ce>
		uhd_ack_nak_received(pipe);
   9ee9a:	2310      	movs	r3, #16
   9ee9c:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
		uhd_enable_nak_received_interrupt(pipe);
   9eea0:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
   9eea4:	e7cf      	b.n	9ee46 <uhd_ep_run+0x42a>
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
   9eea6:	f8d4 4500 	ldr.w	r4, [r4, #1280]	; 0x500
   9eeaa:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9eeae:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   9eeb2:	e6f3      	b.n	9ec9c <uhd_ep_run+0x280>
   9eeb4:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eeb8:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9eebc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   9eec0:	e606      	b.n	9ead0 <uhd_ep_run+0xb4>
   9eec2:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eec6:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9eeca:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   9eece:	e618      	b.n	9eb02 <uhd_ep_run+0xe6>
   9eed0:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eed4:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9eed8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   9eedc:	e62a      	b.n	9eb34 <uhd_ep_run+0x118>
   9eede:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eee2:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9eee6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   9eeea:	e63c      	b.n	9eb66 <uhd_ep_run+0x14a>
   9eeec:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eef0:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9eef4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   9eef8:	e650      	b.n	9eb9c <uhd_ep_run+0x180>
   9eefa:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9eefe:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9ef02:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   9ef06:	e664      	b.n	9ebd2 <uhd_ep_run+0x1b6>
   9ef08:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9ef0c:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9ef10:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   9ef14:	e678      	b.n	9ec08 <uhd_ep_run+0x1ec>
   9ef16:	f8d5 4500 	ldr.w	r4, [r5, #1280]	; 0x500
   9ef1a:	f3c4 4403 	ubfx	r4, r4, #16, #4
   9ef1e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   9ef22:	e68c      	b.n	9ec3e <uhd_ep_run+0x222>
   9ef24:	400ac000 	.word	0x400ac000
   9ef28:	0009c7dd 	.word	0x0009c7dd

0009ef2c <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   9ef2c:	b570      	push	{r4, r5, r6, lr}
   9ef2e:	4605      	mov	r5, r0
   9ef30:	460e      	mov	r6, r1
	efc_init(EFC, ul_mode, ul_fws);
   9ef32:	460a      	mov	r2, r1
   9ef34:	4c04      	ldr	r4, [pc, #16]	; (9ef48 <flash_init+0x1c>)
   9ef36:	4629      	mov	r1, r5
   9ef38:	4804      	ldr	r0, [pc, #16]	; (9ef4c <flash_init+0x20>)
   9ef3a:	47a0      	blx	r4

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   9ef3c:	4632      	mov	r2, r6
   9ef3e:	4629      	mov	r1, r5
   9ef40:	4803      	ldr	r0, [pc, #12]	; (9ef50 <flash_init+0x24>)
   9ef42:	47a0      	blx	r4
#endif

	return FLASH_RC_OK;
}
   9ef44:	2000      	movs	r0, #0
   9ef46:	bd70      	pop	{r4, r5, r6, pc}
   9ef48:	0009b7c5 	.word	0x0009b7c5
   9ef4c:	400e0a00 	.word	0x400e0a00
   9ef50:	400e0c00 	.word	0x400e0c00

0009ef54 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   9ef54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (ul_addr >= IFLASH1_ADDR) {
   9ef58:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
{
   9ef5c:	b085      	sub	sp, #20
   9ef5e:	468b      	mov	fp, r1
   9ef60:	4691      	mov	r9, r2
   9ef62:	9302      	str	r3, [sp, #8]
	if (ul_addr >= IFLASH1_ADDR) {
   9ef64:	d35f      	bcc.n	9f026 <flash_write+0xd2>
		p_efc = EFC1;
   9ef66:	4b34      	ldr	r3, [pc, #208]	; (9f038 <flash_write+0xe4>)
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   9ef68:	f5a0 2840 	sub.w	r8, r0, #786432	; 0xc0000
   9ef6c:	461c      	mov	r4, r3
   9ef6e:	f3c8 280f 	ubfx	r8, r8, #8, #16
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   9ef72:	b2c6      	uxtb	r6, r0
		p_efc = EFC1;
   9ef74:	9300      	str	r3, [sp, #0]

	translate_address(&p_efc, ul_address, &us_page, &us_offset);

#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   9ef76:	4b31      	ldr	r3, [pc, #196]	; (9f03c <flash_write+0xe8>)
   9ef78:	4620      	mov	r0, r4
   9ef7a:	4798      	blx	r3
	efc_set_wait_state(p_efc, 6);
   9ef7c:	2106      	movs	r1, #6
	ul_fws_temp = efc_get_wait_state(p_efc);
   9ef7e:	9003      	str	r0, [sp, #12]
	efc_set_wait_state(p_efc, 6);
   9ef80:	4b2f      	ldr	r3, [pc, #188]	; (9f040 <flash_write+0xec>)
   9ef82:	4620      	mov	r0, r4
   9ef84:	4798      	blx	r3
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
   9ef86:	f1b9 0f00 	cmp.w	r9, #0
   9ef8a:	d03f      	beq.n	9f00c <flash_write+0xb8>
   9ef8c:	4b2d      	ldr	r3, [pc, #180]	; (9f044 <flash_write+0xf0>)
   9ef8e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9f054 <flash_write+0x100>
   9ef92:	f103 05fc 	add.w	r5, r3, #252	; 0xfc
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   9ef96:	9a00      	ldr	r2, [sp, #0]
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   9ef98:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   9ef9c:	4611      	mov	r1, r2
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   9ef9e:	454b      	cmp	r3, r9
   9efa0:	461f      	mov	r7, r3
   9efa2:	bf28      	it	cs
   9efa4:	464f      	movcs	r7, r9
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   9efa6:	4a28      	ldr	r2, [pc, #160]	; (9f048 <flash_write+0xf4>)
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   9efa8:	4826      	ldr	r0, [pc, #152]	; (9f044 <flash_write+0xf0>)
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   9efaa:	4291      	cmp	r1, r2
   9efac:	bf0c      	ite	eq
   9efae:	f508 6400 	addeq.w	r4, r8, #2048	; 0x800
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   9efb2:	f508 6440 	addne.w	r4, r8, #3072	; 0xc00
   9efb6:	0224      	lsls	r4, r4, #8
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   9efb8:	4621      	mov	r1, r4
   9efba:	4632      	mov	r2, r6
   9efbc:	9301      	str	r3, [sp, #4]
   9efbe:	47d0      	blx	sl

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   9efc0:	4b20      	ldr	r3, [pc, #128]	; (9f044 <flash_write+0xf0>)
   9efc2:	463a      	mov	r2, r7
   9efc4:	4659      	mov	r1, fp
   9efc6:	1998      	adds	r0, r3, r6
   9efc8:	47d0      	blx	sl
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   9efca:	9b01      	ldr	r3, [sp, #4]

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   9efcc:	19f0      	adds	r0, r6, r7
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   9efce:	1bdb      	subs	r3, r3, r7
		memcpy(puc_page_buffer + us_offset + writeSize,
   9efd0:	b29a      	uxth	r2, r3
   9efd2:	4b1c      	ldr	r3, [pc, #112]	; (9f044 <flash_write+0xf0>)
   9efd4:	1901      	adds	r1, r0, r4
   9efd6:	4418      	add	r0, r3
   9efd8:	47d0      	blx	sl
   9efda:	4b1c      	ldr	r3, [pc, #112]	; (9f04c <flash_write+0xf8>)
   9efdc:	3c04      	subs	r4, #4
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   9efde:	f853 2f04 	ldr.w	r2, [r3, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   9efe2:	429d      	cmp	r5, r3
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   9efe4:	f844 2f04 	str.w	r2, [r4, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   9efe8:	d1f9      	bne.n	9efde <flash_write+0x8a>
		}

		if (ul_erase_flag) {
   9efea:	9b02      	ldr	r3, [sp, #8]
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   9efec:	4642      	mov	r2, r8
		if (ul_erase_flag) {
   9efee:	b1ab      	cbz	r3, 9f01c <flash_write+0xc8>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   9eff0:	2103      	movs	r1, #3
   9eff2:	9800      	ldr	r0, [sp, #0]
   9eff4:	4b16      	ldr	r3, [pc, #88]	; (9f050 <flash_write+0xfc>)
   9eff6:	4798      	blx	r3
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
					us_page);
		}

		if (ul_error) {
   9eff8:	b968      	cbnz	r0, 9f016 <flash_write+0xc2>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
		ul_size -= writeSize;
		us_page++;
   9effa:	f108 0801 	add.w	r8, r8, #1
	while (ul_size > 0) {
   9effe:	ebb9 0907 	subs.w	r9, r9, r7
		us_page++;
   9f002:	fa1f f888 	uxth.w	r8, r8
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   9f006:	44bb      	add	fp, r7
		us_offset = 0;
   9f008:	4606      	mov	r6, r0
	while (ul_size > 0) {
   9f00a:	d1c4      	bne.n	9ef96 <flash_write+0x42>
	}

#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   9f00c:	9800      	ldr	r0, [sp, #0]
   9f00e:	9903      	ldr	r1, [sp, #12]
   9f010:	4b0b      	ldr	r3, [pc, #44]	; (9f040 <flash_write+0xec>)
   9f012:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   9f014:	2000      	movs	r0, #0
}
   9f016:	b005      	add	sp, #20
   9f018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   9f01c:	2101      	movs	r1, #1
   9f01e:	9800      	ldr	r0, [sp, #0]
   9f020:	4b0b      	ldr	r3, [pc, #44]	; (9f050 <flash_write+0xfc>)
   9f022:	4798      	blx	r3
   9f024:	e7e8      	b.n	9eff8 <flash_write+0xa4>
		p_efc = EFC0;
   9f026:	4b08      	ldr	r3, [pc, #32]	; (9f048 <flash_write+0xf4>)
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   9f028:	f5a0 2800 	sub.w	r8, r0, #524288	; 0x80000
		p_efc = EFC0;
   9f02c:	9300      	str	r3, [sp, #0]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   9f02e:	f3c8 280f 	ubfx	r8, r8, #8, #16
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   9f032:	b2c6      	uxtb	r6, r0
   9f034:	461c      	mov	r4, r3
   9f036:	e79e      	b.n	9ef76 <flash_write+0x22>
   9f038:	400e0c00 	.word	0x400e0c00
   9f03c:	0009b7bd 	.word	0x0009b7bd
   9f040:	0009b7dd 	.word	0x0009b7dd
   9f044:	20072e28 	.word	0x20072e28
   9f048:	400e0a00 	.word	0x400e0a00
   9f04c:	20072e24 	.word	0x20072e24
   9f050:	0009b7f5 	.word	0x0009b7f5
   9f054:	000a5871 	.word	0x000a5871

0009f058 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   9f058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   9f05a:	4c19      	ldr	r4, [pc, #100]	; (9f0c0 <flash_lock+0x68>)
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   9f05c:	4021      	ands	r1, r4
   9f05e:	f501 557f 	add.w	r5, r1, #16320	; 0x3fc0
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   9f062:	4004      	ands	r4, r0
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   9f064:	353f      	adds	r5, #63	; 0x3f
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);

	if (pul_actual_start != NULL) {
   9f066:	b102      	cbz	r2, 9f06a <flash_lock+0x12>
		*pul_actual_start = ul_actual_start;
   9f068:	6014      	str	r4, [r2, #0]
	}

	if (pul_actual_end != NULL) {
   9f06a:	b103      	cbz	r3, 9f06e <flash_lock+0x16>
		*pul_actual_end = ul_actual_end;
   9f06c:	601d      	str	r5, [r3, #0]
	if (ul_addr >= IFLASH1_ADDR) {
   9f06e:	f5b4 2f40 	cmp.w	r4, #786432	; 0xc0000
   9f072:	d31f      	bcc.n	9f0b4 <flash_lock+0x5c>
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   9f074:	f5a4 2440 	sub.w	r4, r4, #786432	; 0xc0000
   9f078:	0a24      	lsrs	r4, r4, #8
		p_efc = EFC1;
   9f07a:	4e12      	ldr	r6, [pc, #72]	; (9f0c4 <flash_lock+0x6c>)
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   9f07c:	b2a4      	uxth	r4, r4
	if (ul_addr >= IFLASH1_ADDR) {
   9f07e:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   9f082:	bf2c      	ite	cs
   9f084:	f5a1 253c 	subcs.w	r5, r1, #770048	; 0xbc000
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   9f088:	f5a1 25f8 	subcc.w	r5, r1, #507904	; 0x7c000
   9f08c:	3d01      	subs	r5, #1
   9f08e:	f3c5 250f 	ubfx	r5, r5, #8, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   9f092:	42a5      	cmp	r5, r4
   9f094:	d90c      	bls.n	9f0b0 <flash_lock+0x58>
   9f096:	4f0c      	ldr	r7, [pc, #48]	; (9f0c8 <flash_lock+0x70>)
   9f098:	e001      	b.n	9f09e <flash_lock+0x46>
   9f09a:	42ac      	cmp	r4, r5
   9f09c:	d208      	bcs.n	9f0b0 <flash_lock+0x58>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   9f09e:	4622      	mov	r2, r4
   9f0a0:	2108      	movs	r1, #8
   9f0a2:	4630      	mov	r0, r6
   9f0a4:	47b8      	blx	r7

		if (ul_error) {
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   9f0a6:	3440      	adds	r4, #64	; 0x40
   9f0a8:	b2a4      	uxth	r4, r4
		if (ul_error) {
   9f0aa:	2800      	cmp	r0, #0
   9f0ac:	d0f5      	beq.n	9f09a <flash_lock+0x42>
	}

	return FLASH_RC_OK;
}
   9f0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FLASH_RC_OK;
   9f0b0:	2000      	movs	r0, #0
   9f0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   9f0b4:	f5a4 2400 	sub.w	r4, r4, #524288	; 0x80000
   9f0b8:	0a24      	lsrs	r4, r4, #8
		p_efc = EFC0;
   9f0ba:	4e04      	ldr	r6, [pc, #16]	; (9f0cc <flash_lock+0x74>)
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   9f0bc:	b2a4      	uxth	r4, r4
   9f0be:	e7de      	b.n	9f07e <flash_lock+0x26>
   9f0c0:	ffffc000 	.word	0xffffc000
   9f0c4:	400e0c00 	.word	0x400e0c00
   9f0c8:	0009b7f5 	.word	0x0009b7f5
   9f0cc:	400e0a00 	.word	0x400e0a00

0009f0d0 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   9f0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   9f0d2:	4c19      	ldr	r4, [pc, #100]	; (9f138 <flash_unlock+0x68>)
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   9f0d4:	4021      	ands	r1, r4
   9f0d6:	f501 557f 	add.w	r5, r1, #16320	; 0x3fc0
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   9f0da:	4004      	ands	r4, r0
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   9f0dc:	353f      	adds	r5, #63	; 0x3f
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
   9f0de:	b102      	cbz	r2, 9f0e2 <flash_unlock+0x12>
		*pul_actual_start = ul_actual_start;
   9f0e0:	6014      	str	r4, [r2, #0]
	}
	if (pul_actual_end != NULL) {
   9f0e2:	b103      	cbz	r3, 9f0e6 <flash_unlock+0x16>
		*pul_actual_end = ul_actual_end;
   9f0e4:	601d      	str	r5, [r3, #0]
	if (ul_addr >= IFLASH1_ADDR) {
   9f0e6:	f5b4 2f40 	cmp.w	r4, #786432	; 0xc0000
   9f0ea:	d31f      	bcc.n	9f12c <flash_unlock+0x5c>
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   9f0ec:	f5a4 2440 	sub.w	r4, r4, #786432	; 0xc0000
   9f0f0:	0a24      	lsrs	r4, r4, #8
		p_efc = EFC1;
   9f0f2:	4e12      	ldr	r6, [pc, #72]	; (9f13c <flash_unlock+0x6c>)
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   9f0f4:	b2a4      	uxth	r4, r4
	if (ul_addr >= IFLASH1_ADDR) {
   9f0f6:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   9f0fa:	bf2c      	ite	cs
   9f0fc:	f5a1 253c 	subcs.w	r5, r1, #770048	; 0xbc000
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   9f100:	f5a1 25f8 	subcc.w	r5, r1, #507904	; 0x7c000
   9f104:	3d01      	subs	r5, #1
   9f106:	f3c5 250f 	ubfx	r5, r5, #8, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   9f10a:	42a5      	cmp	r5, r4
   9f10c:	d90c      	bls.n	9f128 <flash_unlock+0x58>
   9f10e:	4f0c      	ldr	r7, [pc, #48]	; (9f140 <flash_unlock+0x70>)
   9f110:	e001      	b.n	9f116 <flash_unlock+0x46>
   9f112:	42ac      	cmp	r4, r5
   9f114:	d208      	bcs.n	9f128 <flash_unlock+0x58>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   9f116:	4622      	mov	r2, r4
   9f118:	2109      	movs	r1, #9
   9f11a:	4630      	mov	r0, r6
   9f11c:	47b8      	blx	r7
				us_start_page);
		if (ul_error) {
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   9f11e:	3440      	adds	r4, #64	; 0x40
   9f120:	b2a4      	uxth	r4, r4
		if (ul_error) {
   9f122:	2800      	cmp	r0, #0
   9f124:	d0f5      	beq.n	9f112 <flash_unlock+0x42>
	}

	return FLASH_RC_OK;
}
   9f126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FLASH_RC_OK;
   9f128:	2000      	movs	r0, #0
   9f12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   9f12c:	f5a4 2400 	sub.w	r4, r4, #524288	; 0x80000
   9f130:	0a24      	lsrs	r4, r4, #8
		p_efc = EFC0;
   9f132:	4e04      	ldr	r6, [pc, #16]	; (9f144 <flash_unlock+0x74>)
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   9f134:	b2a4      	uxth	r4, r4
   9f136:	e7de      	b.n	9f0f6 <flash_unlock+0x26>
   9f138:	ffffc000 	.word	0xffffc000
   9f13c:	400e0c00 	.word	0x400e0c00
   9f140:	0009b7f5 	.word	0x0009b7f5
   9f144:	400e0a00 	.word	0x400e0a00

0009f148 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   9f148:	e7fe      	b.n	9f148 <Dummy_Handler>
   9f14a:	bf00      	nop

0009f14c <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   9f14c:	4917      	ldr	r1, [pc, #92]	; (9f1ac <Reset_Handler+0x60>)
   9f14e:	4818      	ldr	r0, [pc, #96]	; (9f1b0 <Reset_Handler+0x64>)
{
   9f150:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   9f152:	4281      	cmp	r1, r0
   9f154:	d009      	beq.n	9f16a <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   9f156:	4b17      	ldr	r3, [pc, #92]	; (9f1b4 <Reset_Handler+0x68>)
   9f158:	4298      	cmp	r0, r3
   9f15a:	d206      	bcs.n	9f16a <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   9f15c:	43c2      	mvns	r2, r0
   9f15e:	441a      	add	r2, r3
   9f160:	f022 0203 	bic.w	r2, r2, #3
   9f164:	3204      	adds	r2, #4
   9f166:	4b14      	ldr	r3, [pc, #80]	; (9f1b8 <Reset_Handler+0x6c>)
   9f168:	4798      	blx	r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   9f16a:	4814      	ldr	r0, [pc, #80]	; (9f1bc <Reset_Handler+0x70>)
   9f16c:	4b14      	ldr	r3, [pc, #80]	; (9f1c0 <Reset_Handler+0x74>)
   9f16e:	4298      	cmp	r0, r3
   9f170:	d207      	bcs.n	9f182 <Reset_Handler+0x36>
		*pDest++ = 0;
   9f172:	43c2      	mvns	r2, r0
   9f174:	441a      	add	r2, r3
   9f176:	f022 0203 	bic.w	r2, r2, #3
   9f17a:	3204      	adds	r2, #4
   9f17c:	2100      	movs	r1, #0
   9f17e:	4b11      	ldr	r3, [pc, #68]	; (9f1c4 <Reset_Handler+0x78>)
   9f180:	4798      	blx	r3
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   9f182:	4b11      	ldr	r3, [pc, #68]	; (9f1c8 <Reset_Handler+0x7c>)
   9f184:	4a11      	ldr	r2, [pc, #68]	; (9f1cc <Reset_Handler+0x80>)
   9f186:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   9f18a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   9f18e:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   9f192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   9f196:	6091      	str	r1, [r2, #8]
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   9f198:	d203      	bcs.n	9f1a2 <Reset_Handler+0x56>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   9f19a:	6893      	ldr	r3, [r2, #8]
   9f19c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   9f1a0:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   9f1a2:	4b0b      	ldr	r3, [pc, #44]	; (9f1d0 <Reset_Handler+0x84>)
   9f1a4:	4798      	blx	r3

	/* Branch to main function */
	main();
   9f1a6:	4b0b      	ldr	r3, [pc, #44]	; (9f1d4 <Reset_Handler+0x88>)
   9f1a8:	4798      	blx	r3
   9f1aa:	e7fe      	b.n	9f1aa <Reset_Handler+0x5e>
   9f1ac:	000acc28 	.word	0x000acc28
   9f1b0:	20070000 	.word	0x20070000
   9f1b4:	20070c20 	.word	0x20070c20
   9f1b8:	000a5871 	.word	0x000a5871
   9f1bc:	20070c20 	.word	0x20070c20
   9f1c0:	20072fe0 	.word	0x20072fe0
   9f1c4:	000a5a25 	.word	0x000a5a25
   9f1c8:	00080000 	.word	0x00080000
   9f1cc:	e000ed00 	.word	0xe000ed00
   9f1d0:	000a5275 	.word	0x000a5275
   9f1d4:	00080161 	.word	0x00080161

0009f1d8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   9f1d8:	4a3b      	ldr	r2, [pc, #236]	; (9f2c8 <SystemCoreClockUpdate+0xf0>)
   9f1da:	6b13      	ldr	r3, [r2, #48]	; 0x30
   9f1dc:	f003 0303 	and.w	r3, r3, #3
   9f1e0:	2b01      	cmp	r3, #1
   9f1e2:	d02f      	beq.n	9f244 <SystemCoreClockUpdate+0x6c>
   9f1e4:	d318      	bcc.n	9f218 <SystemCoreClockUpdate+0x40>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   9f1e6:	6a13      	ldr	r3, [r2, #32]
   9f1e8:	01d9      	lsls	r1, r3, #7
   9f1ea:	d53b      	bpl.n	9f264 <SystemCoreClockUpdate+0x8c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   9f1ec:	4937      	ldr	r1, [pc, #220]	; (9f2cc <SystemCoreClockUpdate+0xf4>)
   9f1ee:	4b38      	ldr	r3, [pc, #224]	; (9f2d0 <SystemCoreClockUpdate+0xf8>)
   9f1f0:	600b      	str	r3, [r1, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   9f1f2:	4835      	ldr	r0, [pc, #212]	; (9f2c8 <SystemCoreClockUpdate+0xf0>)
   9f1f4:	6b02      	ldr	r2, [r0, #48]	; 0x30
   9f1f6:	f002 0203 	and.w	r2, r2, #3
   9f1fa:	2a02      	cmp	r2, #2
   9f1fc:	d042      	beq.n	9f284 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   9f1fe:	4832      	ldr	r0, [pc, #200]	; (9f2c8 <SystemCoreClockUpdate+0xf0>)
   9f200:	4b34      	ldr	r3, [pc, #208]	; (9f2d4 <SystemCoreClockUpdate+0xfc>)
   9f202:	6b02      	ldr	r2, [r0, #48]	; 0x30
   9f204:	f002 0270 	and.w	r2, r2, #112	; 0x70
   9f208:	2a70      	cmp	r2, #112	; 0x70
   9f20a:	d115      	bne.n	9f238 <SystemCoreClockUpdate+0x60>
		SystemCoreClock /= 3U;
   9f20c:	4a32      	ldr	r2, [pc, #200]	; (9f2d8 <SystemCoreClockUpdate+0x100>)
   9f20e:	fba2 2303 	umull	r2, r3, r2, r3
   9f212:	085b      	lsrs	r3, r3, #1
   9f214:	600b      	str	r3, [r1, #0]
   9f216:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   9f218:	4b30      	ldr	r3, [pc, #192]	; (9f2dc <SystemCoreClockUpdate+0x104>)
   9f21a:	492c      	ldr	r1, [pc, #176]	; (9f2cc <SystemCoreClockUpdate+0xf4>)
   9f21c:	695b      	ldr	r3, [r3, #20]
   9f21e:	f013 0f80 	tst.w	r3, #128	; 0x80
   9f222:	bf14      	ite	ne
   9f224:	f44f 4300 	movne.w	r3, #32768	; 0x8000
   9f228:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   9f22c:	4826      	ldr	r0, [pc, #152]	; (9f2c8 <SystemCoreClockUpdate+0xf0>)
   9f22e:	6b02      	ldr	r2, [r0, #48]	; 0x30
   9f230:	f002 0270 	and.w	r2, r2, #112	; 0x70
   9f234:	2a70      	cmp	r2, #112	; 0x70
   9f236:	d0e9      	beq.n	9f20c <SystemCoreClockUpdate+0x34>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   9f238:	6b02      	ldr	r2, [r0, #48]	; 0x30
   9f23a:	f3c2 1202 	ubfx	r2, r2, #4, #3
   9f23e:	40d3      	lsrs	r3, r2
   9f240:	600b      	str	r3, [r1, #0]
   9f242:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   9f244:	6a13      	ldr	r3, [r2, #32]
   9f246:	01db      	lsls	r3, r3, #7
   9f248:	d419      	bmi.n	9f27e <SystemCoreClockUpdate+0xa6>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9f24a:	4920      	ldr	r1, [pc, #128]	; (9f2cc <SystemCoreClockUpdate+0xf4>)
   9f24c:	4824      	ldr	r0, [pc, #144]	; (9f2e0 <SystemCoreClockUpdate+0x108>)
   9f24e:	6008      	str	r0, [r1, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9f250:	6a12      	ldr	r2, [r2, #32]
   9f252:	f002 0270 	and.w	r2, r2, #112	; 0x70
   9f256:	2a10      	cmp	r2, #16
   9f258:	d033      	beq.n	9f2c2 <SystemCoreClockUpdate+0xea>
   9f25a:	4b1d      	ldr	r3, [pc, #116]	; (9f2d0 <SystemCoreClockUpdate+0xf8>)
   9f25c:	2a20      	cmp	r2, #32
   9f25e:	bf18      	it	ne
   9f260:	4603      	movne	r3, r0
   9f262:	e7e3      	b.n	9f22c <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9f264:	4919      	ldr	r1, [pc, #100]	; (9f2cc <SystemCoreClockUpdate+0xf4>)
   9f266:	4b1e      	ldr	r3, [pc, #120]	; (9f2e0 <SystemCoreClockUpdate+0x108>)
   9f268:	600b      	str	r3, [r1, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9f26a:	6a12      	ldr	r2, [r2, #32]
   9f26c:	f002 0270 	and.w	r2, r2, #112	; 0x70
   9f270:	2a10      	cmp	r2, #16
   9f272:	d023      	beq.n	9f2bc <SystemCoreClockUpdate+0xe4>
   9f274:	2a20      	cmp	r2, #32
   9f276:	d1bc      	bne.n	9f1f2 <SystemCoreClockUpdate+0x1a>
				SystemCoreClock *= 3U;
   9f278:	4b15      	ldr	r3, [pc, #84]	; (9f2d0 <SystemCoreClockUpdate+0xf8>)
   9f27a:	600b      	str	r3, [r1, #0]
				break;
   9f27c:	e7b9      	b.n	9f1f2 <SystemCoreClockUpdate+0x1a>
   9f27e:	4b14      	ldr	r3, [pc, #80]	; (9f2d0 <SystemCoreClockUpdate+0xf8>)
   9f280:	4912      	ldr	r1, [pc, #72]	; (9f2cc <SystemCoreClockUpdate+0xf4>)
   9f282:	e7d3      	b.n	9f22c <SystemCoreClockUpdate+0x54>
{
   9f284:	b410      	push	{r4}
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9f286:	6a84      	ldr	r4, [r0, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   9f288:	6a82      	ldr	r2, [r0, #40]	; 0x28
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9f28a:	f3c4 400a 	ubfx	r0, r4, #16, #11
   9f28e:	fb00 3303 	mla	r3, r0, r3, r3
	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   9f292:	480d      	ldr	r0, [pc, #52]	; (9f2c8 <SystemCoreClockUpdate+0xf0>)
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   9f294:	b2d2      	uxtb	r2, r2
   9f296:	fbb3 f3f2 	udiv	r3, r3, r2
	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   9f29a:	6b02      	ldr	r2, [r0, #48]	; 0x30
   9f29c:	f002 0270 	and.w	r2, r2, #112	; 0x70
   9f2a0:	2a70      	cmp	r2, #112	; 0x70
   9f2a2:	d006      	beq.n	9f2b2 <SystemCoreClockUpdate+0xda>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   9f2a4:	6b02      	ldr	r2, [r0, #48]	; 0x30
   9f2a6:	f3c2 1202 	ubfx	r2, r2, #4, #3
   9f2aa:	40d3      	lsrs	r3, r2
   9f2ac:	600b      	str	r3, [r1, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   9f2ae:	bc10      	pop	{r4}
   9f2b0:	4770      	bx	lr
		SystemCoreClock /= 3U;
   9f2b2:	4a09      	ldr	r2, [pc, #36]	; (9f2d8 <SystemCoreClockUpdate+0x100>)
   9f2b4:	fba2 2303 	umull	r2, r3, r2, r3
   9f2b8:	085b      	lsrs	r3, r3, #1
   9f2ba:	e7f7      	b.n	9f2ac <SystemCoreClockUpdate+0xd4>
				SystemCoreClock *= 2U;
   9f2bc:	4b09      	ldr	r3, [pc, #36]	; (9f2e4 <SystemCoreClockUpdate+0x10c>)
   9f2be:	600b      	str	r3, [r1, #0]
				break;
   9f2c0:	e797      	b.n	9f1f2 <SystemCoreClockUpdate+0x1a>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9f2c2:	4b08      	ldr	r3, [pc, #32]	; (9f2e4 <SystemCoreClockUpdate+0x10c>)
   9f2c4:	e7b2      	b.n	9f22c <SystemCoreClockUpdate+0x54>
   9f2c6:	bf00      	nop
   9f2c8:	400e0600 	.word	0x400e0600
   9f2cc:	2007026c 	.word	0x2007026c
   9f2d0:	00b71b00 	.word	0x00b71b00
   9f2d4:	0e4e1c00 	.word	0x0e4e1c00
   9f2d8:	aaaaaaab 	.word	0xaaaaaaab
   9f2dc:	400e1a10 	.word	0x400e1a10
   9f2e0:	003d0900 	.word	0x003d0900
   9f2e4:	007a1200 	.word	0x007a1200

0009f2e8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   9f2e8:	4a0b      	ldr	r2, [pc, #44]	; (9f318 <_sbrk+0x30>)
	int ramend = (int)&__ram_end__;
   9f2ea:	490c      	ldr	r1, [pc, #48]	; (9f31c <_sbrk+0x34>)
	if (heap == NULL) {
   9f2ec:	6813      	ldr	r3, [r2, #0]
   9f2ee:	b13b      	cbz	r3, 9f300 <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
   9f2f0:	4418      	add	r0, r3
   9f2f2:	4281      	cmp	r1, r0
		return (caddr_t) -1;	
	}

	heap += incr;
   9f2f4:	bfa6      	itte	ge
   9f2f6:	6010      	strge	r0, [r2, #0]

	return (caddr_t) prev_heap;
   9f2f8:	4618      	movge	r0, r3
		return (caddr_t) -1;	
   9f2fa:	f04f 30ff 	movlt.w	r0, #4294967295
   9f2fe:	4770      	bx	lr
{
   9f300:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
   9f302:	4c07      	ldr	r4, [pc, #28]	; (9f320 <_sbrk+0x38>)
	if (((int)prev_heap + incr) > ramend) {
   9f304:	4420      	add	r0, r4
   9f306:	4281      	cmp	r1, r0
		heap = (unsigned char *)&_end;
   9f308:	6014      	str	r4, [r2, #0]
	heap += incr;
   9f30a:	bfaa      	itet	ge
   9f30c:	6010      	strge	r0, [r2, #0]
		return (caddr_t) -1;	
   9f30e:	f04f 30ff 	movlt.w	r0, #4294967295
	return (caddr_t) prev_heap;
   9f312:	4620      	movge	r0, r4
}
   9f314:	bc10      	pop	{r4}
   9f316:	4770      	bx	lr
   9f318:	20072f28 	.word	0x20072f28
   9f31c:	20087ffc 	.word	0x20087ffc
   9f320:	20074fe0 	.word	0x20074fe0

0009f324 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   9f324:	b538      	push	{r3, r4, r5, lr}
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
   9f326:	2100      	movs	r1, #0
{
   9f328:	4604      	mov	r4, r0
	rtc_set_hour_mode(RTC, 0);
   9f32a:	4b0c      	ldr	r3, [pc, #48]	; (9f35c <disk_initialize+0x38>)
   9f32c:	480c      	ldr	r0, [pc, #48]	; (9f360 <disk_initialize+0x3c>)
   9f32e:	4798      	blx	r3
	configure_rtc_calendar();
#endif

#if LUN_USB
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
   9f330:	4b0c      	ldr	r3, [pc, #48]	; (9f364 <disk_initialize+0x40>)
   9f332:	4798      	blx	r3
   9f334:	4284      	cmp	r4, r0
   9f336:	dc07      	bgt.n	9f348 <disk_initialize+0x24>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
   9f338:	4620      	mov	r0, r4
   9f33a:	4d0b      	ldr	r5, [pc, #44]	; (9f368 <disk_initialize+0x44>)
   9f33c:	47a8      	blx	r5
		if (CTRL_BUSY != mem_status) {
   9f33e:	2803      	cmp	r0, #3
   9f340:	d101      	bne.n	9f346 <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
   9f342:	4620      	mov	r0, r4
   9f344:	47a8      	blx	r5
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
   9f346:	b108      	cbz	r0, 9f34c <disk_initialize+0x28>
		return STA_NOINIT;
   9f348:	2001      	movs	r0, #1
   9f34a:	bd38      	pop	{r3, r4, r5, pc}
		return STA_NOINIT;
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   9f34c:	4620      	mov	r0, r4
   9f34e:	4b07      	ldr	r3, [pc, #28]	; (9f36c <disk_initialize+0x48>)
   9f350:	4798      	blx	r3
   9f352:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
   9f354:	bf14      	ite	ne
   9f356:	2004      	movne	r0, #4
   9f358:	2000      	moveq	r0, #0
}
   9f35a:	bd38      	pop	{r3, r4, r5, pc}
   9f35c:	0009be71 	.word	0x0009be71
   9f360:	400e1a60 	.word	0x400e1a60
   9f364:	0009ac71 	.word	0x0009ac71
   9f368:	00099ea5 	.word	0x00099ea5
   9f36c:	00099ebd 	.word	0x00099ebd

0009f370 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   9f370:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
   9f372:	4b04      	ldr	r3, [pc, #16]	; (9f384 <disk_status+0x14>)
   9f374:	4798      	blx	r3
   9f376:	b118      	cbz	r0, 9f380 <disk_status+0x10>
   9f378:	2802      	cmp	r0, #2
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
   9f37a:	bf0c      	ite	eq
   9f37c:	2003      	moveq	r0, #3
   9f37e:	2001      	movne	r0, #1
	}
}
   9f380:	bd08      	pop	{r3, pc}
   9f382:	bf00      	nop
   9f384:	00099ea5 	.word	0x00099ea5

0009f388 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   9f388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   9f38c:	4e18      	ldr	r6, [pc, #96]	; (9f3f0 <disk_read+0x68>)
{
   9f38e:	b083      	sub	sp, #12
   9f390:	460d      	mov	r5, r1
   9f392:	4614      	mov	r4, r2
   9f394:	4698      	mov	r8, r3
   9f396:	4681      	mov	r9, r0
	uint8_t uc_sector_size = mem_sector_size(drv);
   9f398:	47b0      	blx	r6
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   9f39a:	b918      	cbnz	r0, 9f3a4 <disk_read+0x1c>
		return RES_ERROR;
   9f39c:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   9f39e:	b003      	add	sp, #12
   9f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9f3a4:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
   9f3a6:	4b13      	ldr	r3, [pc, #76]	; (9f3f4 <disk_read+0x6c>)
   9f3a8:	a901      	add	r1, sp, #4
   9f3aa:	4648      	mov	r0, r9
   9f3ac:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   9f3ae:	9b01      	ldr	r3, [sp, #4]
	if ((sector + count * uc_sector_size) >
   9f3b0:	fb06 4208 	mla	r2, r6, r8, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   9f3b4:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
   9f3b8:	429a      	cmp	r2, r3
   9f3ba:	d903      	bls.n	9f3c4 <disk_read+0x3c>
		return RES_PARERR;
   9f3bc:	2004      	movs	r0, #4
}
   9f3be:	b003      	add	sp, #12
   9f3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < count; i++) {
   9f3c4:	f1b8 0f00 	cmp.w	r8, #0
   9f3c8:	d00f      	beq.n	9f3ea <disk_read+0x62>
   9f3ca:	2700      	movs	r7, #0
   9f3cc:	f8df b028 	ldr.w	fp, [pc, #40]	; 9f3f8 <disk_read+0x70>
   9f3d0:	ea4f 2a46 	mov.w	sl, r6, lsl #9
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   9f3d4:	462a      	mov	r2, r5
   9f3d6:	4621      	mov	r1, r4
   9f3d8:	4648      	mov	r0, r9
   9f3da:	47d8      	blx	fp
	for (i = 0; i < count; i++) {
   9f3dc:	3701      	adds	r7, #1
   9f3de:	4434      	add	r4, r6
   9f3e0:	4455      	add	r5, sl
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   9f3e2:	2800      	cmp	r0, #0
   9f3e4:	d1da      	bne.n	9f39c <disk_read+0x14>
	for (i = 0; i < count; i++) {
   9f3e6:	4547      	cmp	r7, r8
   9f3e8:	d1f4      	bne.n	9f3d4 <disk_read+0x4c>
	return RES_OK;
   9f3ea:	2000      	movs	r0, #0
   9f3ec:	e7d7      	b.n	9f39e <disk_read+0x16>
   9f3ee:	bf00      	nop
   9f3f0:	00099eb5 	.word	0x00099eb5
   9f3f4:	00099ead 	.word	0x00099ead
   9f3f8:	00099ec5 	.word	0x00099ec5

0009f3fc <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   9f3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   9f400:	4e18      	ldr	r6, [pc, #96]	; (9f464 <disk_write+0x68>)
{
   9f402:	b083      	sub	sp, #12
   9f404:	460d      	mov	r5, r1
   9f406:	4614      	mov	r4, r2
   9f408:	4698      	mov	r8, r3
   9f40a:	4681      	mov	r9, r0
	uint8_t uc_sector_size = mem_sector_size(drv);
   9f40c:	47b0      	blx	r6
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   9f40e:	b918      	cbnz	r0, 9f418 <disk_write+0x1c>
		return RES_ERROR;
   9f410:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   9f412:	b003      	add	sp, #12
   9f414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9f418:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
   9f41a:	4b13      	ldr	r3, [pc, #76]	; (9f468 <disk_write+0x6c>)
   9f41c:	a901      	add	r1, sp, #4
   9f41e:	4648      	mov	r0, r9
   9f420:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   9f422:	9b01      	ldr	r3, [sp, #4]
	if ((sector + count * uc_sector_size) >
   9f424:	fb06 4208 	mla	r2, r6, r8, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   9f428:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
   9f42c:	429a      	cmp	r2, r3
   9f42e:	d903      	bls.n	9f438 <disk_write+0x3c>
		return RES_PARERR;
   9f430:	2004      	movs	r0, #4
}
   9f432:	b003      	add	sp, #12
   9f434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < count; i++) {
   9f438:	f1b8 0f00 	cmp.w	r8, #0
   9f43c:	d00f      	beq.n	9f45e <disk_write+0x62>
   9f43e:	2700      	movs	r7, #0
   9f440:	f8df b028 	ldr.w	fp, [pc, #40]	; 9f46c <disk_write+0x70>
   9f444:	ea4f 2a46 	mov.w	sl, r6, lsl #9
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   9f448:	462a      	mov	r2, r5
   9f44a:	4621      	mov	r1, r4
   9f44c:	4648      	mov	r0, r9
   9f44e:	47d8      	blx	fp
	for (i = 0; i < count; i++) {
   9f450:	3701      	adds	r7, #1
   9f452:	4434      	add	r4, r6
   9f454:	4455      	add	r5, sl
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   9f456:	2800      	cmp	r0, #0
   9f458:	d1da      	bne.n	9f410 <disk_write+0x14>
	for (i = 0; i < count; i++) {
   9f45a:	4547      	cmp	r7, r8
   9f45c:	d1f4      	bne.n	9f448 <disk_write+0x4c>
	return RES_OK;
   9f45e:	2000      	movs	r0, #0
   9f460:	e7d7      	b.n	9f412 <disk_write+0x16>
   9f462:	bf00      	nop
   9f464:	00099eb5 	.word	0x00099eb5
   9f468:	00099ead 	.word	0x00099ead
   9f46c:	00099ed1 	.word	0x00099ed1

0009f470 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   9f470:	b510      	push	{r4, lr}
   9f472:	4614      	mov	r4, r2
   9f474:	b082      	sub	sp, #8
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   9f476:	2903      	cmp	r1, #3
   9f478:	d82b      	bhi.n	9f4d2 <disk_ioctl+0x62>
   9f47a:	e8df f001 	tbb	[pc, r1]
   9f47e:	161f      	.short	0x161f
   9f480:	0207      	.short	0x0207
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   9f482:	2301      	movs	r3, #1
		res = RES_OK;
   9f484:	2000      	movs	r0, #0
		*(DWORD *)buff = 1;
   9f486:	6013      	str	r3, [r2, #0]
	default:
		res = RES_PARERR;
	}

	return res;
}
   9f488:	b002      	add	sp, #8
   9f48a:	bd10      	pop	{r4, pc}
		uint8_t uc_sector_size = mem_sector_size(drv);
   9f48c:	4b12      	ldr	r3, [pc, #72]	; (9f4d8 <disk_ioctl+0x68>)
   9f48e:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   9f490:	2808      	cmp	r0, #8
   9f492:	d807      	bhi.n	9f4a4 <disk_ioctl+0x34>
   9f494:	f44f 738b 	mov.w	r3, #278	; 0x116
   9f498:	fa23 f000 	lsr.w	r0, r3, r0
   9f49c:	43c0      	mvns	r0, r0
   9f49e:	f010 0001 	ands.w	r0, r0, #1
   9f4a2:	d013      	beq.n	9f4cc <disk_ioctl+0x5c>
			return RES_ERROR;
   9f4a4:	2001      	movs	r0, #1
}
   9f4a6:	b002      	add	sp, #8
   9f4a8:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   9f4aa:	a901      	add	r1, sp, #4
   9f4ac:	4b0b      	ldr	r3, [pc, #44]	; (9f4dc <disk_ioctl+0x6c>)
   9f4ae:	4798      	blx	r3
		res = RES_OK;
   9f4b0:	2000      	movs	r0, #0
		*(DWORD *)buff = ul_last_sector_num + 1;
   9f4b2:	9b01      	ldr	r3, [sp, #4]
   9f4b4:	3301      	adds	r3, #1
   9f4b6:	6023      	str	r3, [r4, #0]
}
   9f4b8:	b002      	add	sp, #8
   9f4ba:	bd10      	pop	{r4, pc}
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   9f4bc:	4b08      	ldr	r3, [pc, #32]	; (9f4e0 <disk_ioctl+0x70>)
   9f4be:	4798      	blx	r3
   9f4c0:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
   9f4c2:	bf0c      	ite	eq
   9f4c4:	2000      	moveq	r0, #0
   9f4c6:	2003      	movne	r0, #3
}
   9f4c8:	b002      	add	sp, #8
   9f4ca:	bd10      	pop	{r4, pc}
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   9f4cc:	7020      	strb	r0, [r4, #0]
}
   9f4ce:	b002      	add	sp, #8
   9f4d0:	bd10      	pop	{r4, pc}
		res = RES_PARERR;
   9f4d2:	2004      	movs	r0, #4
   9f4d4:	e7d8      	b.n	9f488 <disk_ioctl+0x18>
   9f4d6:	bf00      	nop
   9f4d8:	00099eb5 	.word	0x00099eb5
   9f4dc:	00099ead 	.word	0x00099ead
   9f4e0:	00099ea5 	.word	0x00099ea5

0009f4e4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
   9f4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
	if (dj->sect) {
   9f4e8:	6903      	ldr	r3, [r0, #16]
	p = fno->fname;
   9f4ea:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
   9f4ee:	2b00      	cmp	r3, #0
   9f4f0:	f000 8089 	beq.w	9f606 <get_fileinfo+0x122>
		dir = dj->dir;
   9f4f4:	6943      	ldr	r3, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
   9f4f6:	7b1d      	ldrb	r5, [r3, #12]
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
   9f4f8:	781c      	ldrb	r4, [r3, #0]
   9f4fa:	072e      	lsls	r6, r5, #28
   9f4fc:	f100 80b1 	bmi.w	9f662 <get_fileinfo+0x17e>
			if (c == ' ') break;
   9f500:	2c20      	cmp	r4, #32
   9f502:	d044      	beq.n	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f504:	2c05      	cmp	r4, #5
   9f506:	bf08      	it	eq
   9f508:	24e5      	moveq	r4, #229	; 0xe5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
   9f50a:	724c      	strb	r4, [r1, #9]
			c = dir[i];
   9f50c:	785c      	ldrb	r4, [r3, #1]
			*p++ = c;
   9f50e:	f101 020a 	add.w	r2, r1, #10
			if (c == ' ') break;
   9f512:	2c20      	cmp	r4, #32
   9f514:	d03b      	beq.n	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f516:	2c05      	cmp	r4, #5
   9f518:	bf08      	it	eq
   9f51a:	24e5      	moveq	r4, #229	; 0xe5
			*p++ = c;
   9f51c:	728c      	strb	r4, [r1, #10]
			c = dir[i];
   9f51e:	789c      	ldrb	r4, [r3, #2]
			*p++ = c;
   9f520:	f101 020b 	add.w	r2, r1, #11
			if (c == ' ') break;
   9f524:	2c20      	cmp	r4, #32
   9f526:	d032      	beq.n	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f528:	2c05      	cmp	r4, #5
   9f52a:	bf08      	it	eq
   9f52c:	24e5      	moveq	r4, #229	; 0xe5
			*p++ = c;
   9f52e:	72cc      	strb	r4, [r1, #11]
			c = dir[i];
   9f530:	78dc      	ldrb	r4, [r3, #3]
			*p++ = c;
   9f532:	f101 020c 	add.w	r2, r1, #12
			if (c == ' ') break;
   9f536:	2c20      	cmp	r4, #32
   9f538:	d029      	beq.n	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f53a:	2c05      	cmp	r4, #5
   9f53c:	bf08      	it	eq
   9f53e:	24e5      	moveq	r4, #229	; 0xe5
			*p++ = c;
   9f540:	730c      	strb	r4, [r1, #12]
			c = dir[i];
   9f542:	791c      	ldrb	r4, [r3, #4]
			*p++ = c;
   9f544:	f101 020d 	add.w	r2, r1, #13
			if (c == ' ') break;
   9f548:	2c20      	cmp	r4, #32
   9f54a:	d020      	beq.n	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f54c:	2c05      	cmp	r4, #5
   9f54e:	bf08      	it	eq
   9f550:	24e5      	moveq	r4, #229	; 0xe5
			*p++ = c;
   9f552:	734c      	strb	r4, [r1, #13]
			c = dir[i];
   9f554:	795c      	ldrb	r4, [r3, #5]
			*p++ = c;
   9f556:	f101 020e 	add.w	r2, r1, #14
			if (c == ' ') break;
   9f55a:	2c20      	cmp	r4, #32
   9f55c:	d017      	beq.n	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f55e:	2c05      	cmp	r4, #5
   9f560:	bf08      	it	eq
   9f562:	24e5      	moveq	r4, #229	; 0xe5
			*p++ = c;
   9f564:	738c      	strb	r4, [r1, #14]
			c = dir[i];
   9f566:	799c      	ldrb	r4, [r3, #6]
			*p++ = c;
   9f568:	f101 020f 	add.w	r2, r1, #15
			if (c == ' ') break;
   9f56c:	2c20      	cmp	r4, #32
   9f56e:	d00e      	beq.n	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f570:	2c05      	cmp	r4, #5
   9f572:	bf08      	it	eq
   9f574:	24e5      	moveq	r4, #229	; 0xe5
			*p++ = c;
   9f576:	73cc      	strb	r4, [r1, #15]
			c = dir[i];
   9f578:	79dc      	ldrb	r4, [r3, #7]
			*p++ = c;
   9f57a:	f101 0210 	add.w	r2, r1, #16
			if (c == ' ') break;
   9f57e:	2c20      	cmp	r4, #32
   9f580:	d005      	beq.n	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f582:	2c05      	cmp	r4, #5
   9f584:	bf08      	it	eq
   9f586:	24e5      	moveq	r4, #229	; 0xe5
			*p++ = c;
   9f588:	f101 0211 	add.w	r2, r1, #17
   9f58c:	740c      	strb	r4, [r1, #16]
		}
		if (dir[8] != ' ') {		/* Copy name extension */
   9f58e:	7a1c      	ldrb	r4, [r3, #8]
   9f590:	2c20      	cmp	r4, #32
   9f592:	d02a      	beq.n	9f5ea <get_fileinfo+0x106>
			*p++ = '.';
   9f594:	242e      	movs	r4, #46	; 0x2e
   9f596:	06ed      	lsls	r5, r5, #27
   9f598:	7014      	strb	r4, [r2, #0]
   9f59a:	f102 0601 	add.w	r6, r2, #1
			for (i = 8; i < 11; i++) {
				c = dir[i];
   9f59e:	7a1c      	ldrb	r4, [r3, #8]
   9f5a0:	f140 80d6 	bpl.w	9f750 <get_fileinfo+0x26c>
				if (c == ' ') break;
   9f5a4:	2c20      	cmp	r4, #32
   9f5a6:	f000 80f2 	beq.w	9f78e <get_fileinfo+0x2aa>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
   9f5aa:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   9f5ae:	2d19      	cmp	r5, #25
   9f5b0:	bf9c      	itt	ls
   9f5b2:	3420      	addls	r4, #32
   9f5b4:	b2e4      	uxtbls	r4, r4
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
   9f5b6:	7054      	strb	r4, [r2, #1]
				c = dir[i];
   9f5b8:	7a5c      	ldrb	r4, [r3, #9]
				*p++ = c;
   9f5ba:	1c95      	adds	r5, r2, #2
				if (c == ' ') break;
   9f5bc:	2c20      	cmp	r4, #32
   9f5be:	f000 80d4 	beq.w	9f76a <get_fileinfo+0x286>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
   9f5c2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   9f5c6:	2d19      	cmp	r5, #25
   9f5c8:	bf9c      	itt	ls
   9f5ca:	3420      	addls	r4, #32
   9f5cc:	b2e4      	uxtbls	r4, r4
				*p++ = c;
   9f5ce:	7094      	strb	r4, [r2, #2]
				c = dir[i];
   9f5d0:	7a9c      	ldrb	r4, [r3, #10]
				*p++ = c;
   9f5d2:	1cd5      	adds	r5, r2, #3
				if (c == ' ') break;
   9f5d4:	2c20      	cmp	r4, #32
   9f5d6:	f000 80c8 	beq.w	9f76a <get_fileinfo+0x286>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
   9f5da:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   9f5de:	2d19      	cmp	r5, #25
   9f5e0:	bf9c      	itt	ls
   9f5e2:	3420      	addls	r4, #32
   9f5e4:	b2e4      	uxtbls	r4, r4
				*p++ = c;
   9f5e6:	70d4      	strb	r4, [r2, #3]
   9f5e8:	3204      	adds	r2, #4
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
   9f5ea:	7adc      	ldrb	r4, [r3, #11]
   9f5ec:	720c      	strb	r4, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
   9f5ee:	69dc      	ldr	r4, [r3, #28]
   9f5f0:	600c      	str	r4, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
   9f5f2:	7e5d      	ldrb	r5, [r3, #25]
   9f5f4:	7e1c      	ldrb	r4, [r3, #24]
   9f5f6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
   9f5fa:	808c      	strh	r4, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
   9f5fc:	7ddc      	ldrb	r4, [r3, #23]
   9f5fe:	7d9b      	ldrb	r3, [r3, #22]
   9f600:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   9f604:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
   9f606:	2500      	movs	r5, #0
   9f608:	7015      	strb	r5, [r2, #0]

#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
   9f60a:	698f      	ldr	r7, [r1, #24]
   9f60c:	b137      	cbz	r7, 9f61c <get_fileinfo+0x138>
   9f60e:	69cb      	ldr	r3, [r1, #28]
   9f610:	b123      	cbz	r3, 9f61c <get_fileinfo+0x138>
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
   9f612:	6903      	ldr	r3, [r0, #16]
   9f614:	b923      	cbnz	r3, 9f620 <get_fileinfo+0x13c>
		i = 0;
   9f616:	2500      	movs	r5, #0
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
				tp[i++] = (TCHAR)w;
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
   9f618:	2300      	movs	r3, #0
   9f61a:	557b      	strb	r3, [r7, r5]
   9f61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
   9f620:	f64f 73ff 	movw	r3, #65535	; 0xffff
   9f624:	8c02      	ldrh	r2, [r0, #32]
   9f626:	429a      	cmp	r2, r3
   9f628:	d0f5      	beq.n	9f616 <get_fileinfo+0x132>
			lfn = dj->lfn;
   9f62a:	f8d0 801c 	ldr.w	r8, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
   9f62e:	f8b8 0000 	ldrh.w	r0, [r8]
   9f632:	2800      	cmp	r0, #0
   9f634:	d0ef      	beq.n	9f616 <get_fileinfo+0x132>
   9f636:	460c      	mov	r4, r1
   9f638:	f8df 9158 	ldr.w	r9, [pc, #344]	; 9f794 <get_fileinfo+0x2b0>
   9f63c:	1e7e      	subs	r6, r7, #1
   9f63e:	e00b      	b.n	9f658 <get_fileinfo+0x174>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
   9f640:	69e3      	ldr	r3, [r4, #28]
   9f642:	3b01      	subs	r3, #1
   9f644:	42ab      	cmp	r3, r5
				tp[i++] = (TCHAR)w;
   9f646:	f105 0501 	add.w	r5, r5, #1
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
   9f64a:	d9e4      	bls.n	9f616 <get_fileinfo+0x132>
				tp[i++] = (TCHAR)w;
   9f64c:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
   9f650:	f838 0015 	ldrh.w	r0, [r8, r5, lsl #1]
   9f654:	2800      	cmp	r0, #0
   9f656:	d0df      	beq.n	9f618 <get_fileinfo+0x134>
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
   9f658:	2100      	movs	r1, #0
   9f65a:	47c8      	blx	r9
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
   9f65c:	2800      	cmp	r0, #0
   9f65e:	d1ef      	bne.n	9f640 <get_fileinfo+0x15c>
   9f660:	e7d9      	b.n	9f616 <get_fileinfo+0x132>
			if (c == ' ') break;
   9f662:	2c20      	cmp	r4, #32
   9f664:	d093      	beq.n	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f666:	2c05      	cmp	r4, #5
   9f668:	f000 8081 	beq.w	9f76e <get_fileinfo+0x28a>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   9f66c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   9f670:	2a19      	cmp	r2, #25
   9f672:	d801      	bhi.n	9f678 <get_fileinfo+0x194>
   9f674:	3420      	adds	r4, #32
   9f676:	b2e4      	uxtb	r4, r4
			*p++ = c;
   9f678:	724c      	strb	r4, [r1, #9]
			c = dir[i];
   9f67a:	785c      	ldrb	r4, [r3, #1]
			*p++ = c;
   9f67c:	f101 020a 	add.w	r2, r1, #10
			if (c == ' ') break;
   9f680:	2c20      	cmp	r4, #32
   9f682:	d084      	beq.n	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f684:	2c05      	cmp	r4, #5
   9f686:	d074      	beq.n	9f772 <get_fileinfo+0x28e>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   9f688:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   9f68c:	2a19      	cmp	r2, #25
   9f68e:	d801      	bhi.n	9f694 <get_fileinfo+0x1b0>
   9f690:	3420      	adds	r4, #32
   9f692:	b2e4      	uxtb	r4, r4
			*p++ = c;
   9f694:	728c      	strb	r4, [r1, #10]
			c = dir[i];
   9f696:	789c      	ldrb	r4, [r3, #2]
			*p++ = c;
   9f698:	f101 020b 	add.w	r2, r1, #11
			if (c == ' ') break;
   9f69c:	2c20      	cmp	r4, #32
   9f69e:	f43f af76 	beq.w	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f6a2:	2c05      	cmp	r4, #5
   9f6a4:	d067      	beq.n	9f776 <get_fileinfo+0x292>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   9f6a6:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   9f6aa:	2a19      	cmp	r2, #25
   9f6ac:	d801      	bhi.n	9f6b2 <get_fileinfo+0x1ce>
   9f6ae:	3420      	adds	r4, #32
   9f6b0:	b2e4      	uxtb	r4, r4
			*p++ = c;
   9f6b2:	72cc      	strb	r4, [r1, #11]
			c = dir[i];
   9f6b4:	78dc      	ldrb	r4, [r3, #3]
			*p++ = c;
   9f6b6:	f101 020c 	add.w	r2, r1, #12
			if (c == ' ') break;
   9f6ba:	2c20      	cmp	r4, #32
   9f6bc:	f43f af67 	beq.w	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f6c0:	2c05      	cmp	r4, #5
   9f6c2:	d05a      	beq.n	9f77a <get_fileinfo+0x296>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   9f6c4:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   9f6c8:	2a19      	cmp	r2, #25
   9f6ca:	d801      	bhi.n	9f6d0 <get_fileinfo+0x1ec>
   9f6cc:	3420      	adds	r4, #32
   9f6ce:	b2e4      	uxtb	r4, r4
			*p++ = c;
   9f6d0:	730c      	strb	r4, [r1, #12]
			c = dir[i];
   9f6d2:	791c      	ldrb	r4, [r3, #4]
			*p++ = c;
   9f6d4:	f101 020d 	add.w	r2, r1, #13
			if (c == ' ') break;
   9f6d8:	2c20      	cmp	r4, #32
   9f6da:	f43f af58 	beq.w	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f6de:	2c05      	cmp	r4, #5
   9f6e0:	d04d      	beq.n	9f77e <get_fileinfo+0x29a>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   9f6e2:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   9f6e6:	2a19      	cmp	r2, #25
   9f6e8:	d801      	bhi.n	9f6ee <get_fileinfo+0x20a>
   9f6ea:	3420      	adds	r4, #32
   9f6ec:	b2e4      	uxtb	r4, r4
			*p++ = c;
   9f6ee:	734c      	strb	r4, [r1, #13]
			c = dir[i];
   9f6f0:	795c      	ldrb	r4, [r3, #5]
			*p++ = c;
   9f6f2:	f101 020e 	add.w	r2, r1, #14
			if (c == ' ') break;
   9f6f6:	2c20      	cmp	r4, #32
   9f6f8:	f43f af49 	beq.w	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f6fc:	2c05      	cmp	r4, #5
   9f6fe:	d040      	beq.n	9f782 <get_fileinfo+0x29e>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   9f700:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   9f704:	2a19      	cmp	r2, #25
   9f706:	d801      	bhi.n	9f70c <get_fileinfo+0x228>
   9f708:	3420      	adds	r4, #32
   9f70a:	b2e4      	uxtb	r4, r4
			*p++ = c;
   9f70c:	738c      	strb	r4, [r1, #14]
			c = dir[i];
   9f70e:	799c      	ldrb	r4, [r3, #6]
			*p++ = c;
   9f710:	f101 020f 	add.w	r2, r1, #15
			if (c == ' ') break;
   9f714:	2c20      	cmp	r4, #32
   9f716:	f43f af3a 	beq.w	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f71a:	2c05      	cmp	r4, #5
   9f71c:	d033      	beq.n	9f786 <get_fileinfo+0x2a2>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   9f71e:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   9f722:	2a19      	cmp	r2, #25
   9f724:	d801      	bhi.n	9f72a <get_fileinfo+0x246>
   9f726:	3420      	adds	r4, #32
   9f728:	b2e4      	uxtb	r4, r4
			*p++ = c;
   9f72a:	73cc      	strb	r4, [r1, #15]
			c = dir[i];
   9f72c:	79dc      	ldrb	r4, [r3, #7]
			*p++ = c;
   9f72e:	f101 0210 	add.w	r2, r1, #16
			if (c == ' ') break;
   9f732:	2c20      	cmp	r4, #32
   9f734:	f43f af2b 	beq.w	9f58e <get_fileinfo+0xaa>
			if (c == NDDE) c = (TCHAR)DDE;
   9f738:	2c05      	cmp	r4, #5
   9f73a:	d026      	beq.n	9f78a <get_fileinfo+0x2a6>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   9f73c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   9f740:	2a19      	cmp	r2, #25
   9f742:	d801      	bhi.n	9f748 <get_fileinfo+0x264>
   9f744:	3420      	adds	r4, #32
   9f746:	b2e4      	uxtb	r4, r4
			*p++ = c;
   9f748:	740c      	strb	r4, [r1, #16]
   9f74a:	f101 0211 	add.w	r2, r1, #17
   9f74e:	e71e      	b.n	9f58e <get_fileinfo+0xaa>
				if (c == ' ') break;
   9f750:	2c20      	cmp	r4, #32
   9f752:	d01c      	beq.n	9f78e <get_fileinfo+0x2aa>
				*p++ = c;
   9f754:	7054      	strb	r4, [r2, #1]
				c = dir[i];
   9f756:	7a5c      	ldrb	r4, [r3, #9]
				*p++ = c;
   9f758:	1c95      	adds	r5, r2, #2
				if (c == ' ') break;
   9f75a:	2c20      	cmp	r4, #32
   9f75c:	d005      	beq.n	9f76a <get_fileinfo+0x286>
				*p++ = c;
   9f75e:	7094      	strb	r4, [r2, #2]
				c = dir[i];
   9f760:	7a9c      	ldrb	r4, [r3, #10]
				*p++ = c;
   9f762:	1cd5      	adds	r5, r2, #3
				if (c == ' ') break;
   9f764:	2c20      	cmp	r4, #32
   9f766:	f47f af3e 	bne.w	9f5e6 <get_fileinfo+0x102>
				*p++ = c;
   9f76a:	462a      	mov	r2, r5
   9f76c:	e73d      	b.n	9f5ea <get_fileinfo+0x106>
			if (c == NDDE) c = (TCHAR)DDE;
   9f76e:	24e5      	movs	r4, #229	; 0xe5
   9f770:	e782      	b.n	9f678 <get_fileinfo+0x194>
   9f772:	24e5      	movs	r4, #229	; 0xe5
   9f774:	e78e      	b.n	9f694 <get_fileinfo+0x1b0>
   9f776:	24e5      	movs	r4, #229	; 0xe5
   9f778:	e79b      	b.n	9f6b2 <get_fileinfo+0x1ce>
   9f77a:	24e5      	movs	r4, #229	; 0xe5
   9f77c:	e7a8      	b.n	9f6d0 <get_fileinfo+0x1ec>
   9f77e:	24e5      	movs	r4, #229	; 0xe5
   9f780:	e7b5      	b.n	9f6ee <get_fileinfo+0x20a>
   9f782:	24e5      	movs	r4, #229	; 0xe5
   9f784:	e7c2      	b.n	9f70c <get_fileinfo+0x228>
   9f786:	24e5      	movs	r4, #229	; 0xe5
   9f788:	e7cf      	b.n	9f72a <get_fileinfo+0x246>
   9f78a:	24e5      	movs	r4, #229	; 0xe5
   9f78c:	e7dc      	b.n	9f748 <get_fileinfo+0x264>
			*p++ = '.';
   9f78e:	4632      	mov	r2, r6
   9f790:	e72b      	b.n	9f5ea <get_fileinfo+0x106>
   9f792:	bf00      	nop
   9f794:	000a2fb1 	.word	0x000a2fb1

0009f798 <move_window>:
{
   9f798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	wsect = fs->winsect;
   9f79c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   9f79e:	428e      	cmp	r6, r1
   9f7a0:	d004      	beq.n	9f7ac <move_window+0x14>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9f7a2:	7903      	ldrb	r3, [r0, #4]
   9f7a4:	460f      	mov	r7, r1
   9f7a6:	4604      	mov	r4, r0
   9f7a8:	b973      	cbnz	r3, 9f7c8 <move_window+0x30>
		if (sector) {
   9f7aa:	b917      	cbnz	r7, 9f7b2 <move_window+0x1a>
	return FR_OK;
   9f7ac:	2000      	movs	r0, #0
   9f7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9f7b2:	2301      	movs	r3, #1
   9f7b4:	463a      	mov	r2, r7
   9f7b6:	f104 0130 	add.w	r1, r4, #48	; 0x30
   9f7ba:	7860      	ldrb	r0, [r4, #1]
   9f7bc:	4d15      	ldr	r5, [pc, #84]	; (9f814 <move_window+0x7c>)
   9f7be:	47a8      	blx	r5
   9f7c0:	bb20      	cbnz	r0, 9f80c <move_window+0x74>
			fs->winsect = sector;
   9f7c2:	62e7      	str	r7, [r4, #44]	; 0x2c
}
   9f7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9f7c8:	f100 0830 	add.w	r8, r0, #48	; 0x30
   9f7cc:	4641      	mov	r1, r8
   9f7ce:	2301      	movs	r3, #1
   9f7d0:	4632      	mov	r2, r6
   9f7d2:	7840      	ldrb	r0, [r0, #1]
   9f7d4:	f8df 9040 	ldr.w	r9, [pc, #64]	; 9f818 <move_window+0x80>
   9f7d8:	47c8      	blx	r9
   9f7da:	b9b8      	cbnz	r0, 9f80c <move_window+0x74>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9f7dc:	69e3      	ldr	r3, [r4, #28]
   9f7de:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   9f7e0:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9f7e2:	441a      	add	r2, r3
   9f7e4:	4296      	cmp	r6, r2
   9f7e6:	d2e0      	bcs.n	9f7aa <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f7e8:	78e5      	ldrb	r5, [r4, #3]
   9f7ea:	2d01      	cmp	r5, #1
   9f7ec:	d801      	bhi.n	9f7f2 <move_window+0x5a>
   9f7ee:	e7dc      	b.n	9f7aa <move_window+0x12>
   9f7f0:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   9f7f2:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f7f4:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   9f7f6:	4632      	mov	r2, r6
   9f7f8:	2301      	movs	r3, #1
   9f7fa:	4641      	mov	r1, r8
   9f7fc:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f7fe:	b2ed      	uxtb	r5, r5
					disk_write(fs->drv, fs->win, wsect, 1);
   9f800:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f802:	2d01      	cmp	r5, #1
   9f804:	d1f4      	bne.n	9f7f0 <move_window+0x58>
		if (sector) {
   9f806:	2f00      	cmp	r7, #0
   9f808:	d0d0      	beq.n	9f7ac <move_window+0x14>
   9f80a:	e7d2      	b.n	9f7b2 <move_window+0x1a>
				return FR_DISK_ERR;
   9f80c:	2001      	movs	r0, #1
   9f80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   9f812:	bf00      	nop
   9f814:	0009f389 	.word	0x0009f389
   9f818:	0009f3fd 	.word	0x0009f3fd

0009f81c <sync>:
{
   9f81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	wsect = fs->winsect;
   9f820:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
   9f822:	4604      	mov	r4, r0
	if (wsect != sector) {	/* Changed current window */
   9f824:	b10d      	cbz	r5, 9f82a <sync+0xe>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9f826:	7903      	ldrb	r3, [r0, #4]
   9f828:	b963      	cbnz	r3, 9f844 <sync+0x28>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   9f82a:	7823      	ldrb	r3, [r4, #0]
   9f82c:	2b03      	cmp	r3, #3
   9f82e:	d02c      	beq.n	9f88a <sync+0x6e>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   9f830:	2200      	movs	r2, #0
   9f832:	7860      	ldrb	r0, [r4, #1]
   9f834:	4611      	mov	r1, r2
   9f836:	4b32      	ldr	r3, [pc, #200]	; (9f900 <sync+0xe4>)
   9f838:	4798      	blx	r3
   9f83a:	3000      	adds	r0, #0
   9f83c:	bf18      	it	ne
   9f83e:	2001      	movne	r0, #1
   9f840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9f844:	f100 0730 	add.w	r7, r0, #48	; 0x30
   9f848:	4639      	mov	r1, r7
   9f84a:	2301      	movs	r3, #1
   9f84c:	462a      	mov	r2, r5
   9f84e:	7840      	ldrb	r0, [r0, #1]
   9f850:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 9f910 <sync+0xf4>
   9f854:	47c0      	blx	r8
   9f856:	b9a8      	cbnz	r0, 9f884 <sync+0x68>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9f858:	69e3      	ldr	r3, [r4, #28]
   9f85a:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   9f85c:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9f85e:	441a      	add	r2, r3
   9f860:	4295      	cmp	r5, r2
   9f862:	d2e2      	bcs.n	9f82a <sync+0xe>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f864:	78e6      	ldrb	r6, [r4, #3]
   9f866:	2e01      	cmp	r6, #1
   9f868:	d801      	bhi.n	9f86e <sync+0x52>
   9f86a:	e7de      	b.n	9f82a <sync+0xe>
   9f86c:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   9f86e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f870:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   9f872:	462a      	mov	r2, r5
   9f874:	2301      	movs	r3, #1
   9f876:	4639      	mov	r1, r7
   9f878:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f87a:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
   9f87c:	47c0      	blx	r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f87e:	2e01      	cmp	r6, #1
   9f880:	d1f4      	bne.n	9f86c <sync+0x50>
   9f882:	e7d2      	b.n	9f82a <sync+0xe>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9f884:	2001      	movs	r0, #1
	return res;
   9f886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   9f88a:	7963      	ldrb	r3, [r4, #5]
   9f88c:	2b00      	cmp	r3, #0
   9f88e:	d0cf      	beq.n	9f830 <sync+0x14>
			fs->winsect = 0;
   9f890:	2600      	movs	r6, #0
		*d++ = (BYTE)val;
   9f892:	f104 0530 	add.w	r5, r4, #48	; 0x30
   9f896:	4631      	mov	r1, r6
   9f898:	4628      	mov	r0, r5
   9f89a:	f44f 7200 	mov.w	r2, #512	; 0x200
   9f89e:	4b19      	ldr	r3, [pc, #100]	; (9f904 <sync+0xe8>)
			fs->winsect = 0;
   9f8a0:	62e6      	str	r6, [r4, #44]	; 0x2c
   9f8a2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   9f8a4:	27aa      	movs	r7, #170	; 0xaa
   9f8a6:	f04f 0e55 	mov.w	lr, #85	; 0x55
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   9f8aa:	6922      	ldr	r2, [r4, #16]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   9f8ac:	68e3      	ldr	r3, [r4, #12]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   9f8ae:	f3c2 2007 	ubfx	r0, r2, #8, #8
   9f8b2:	f884 2218 	strb.w	r2, [r4, #536]	; 0x218
   9f8b6:	f884 0219 	strb.w	r0, [r4, #537]	; 0x219
   9f8ba:	0c10      	lsrs	r0, r2, #16
   9f8bc:	0e12      	lsrs	r2, r2, #24
   9f8be:	f884 221b 	strb.w	r2, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   9f8c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   9f8c6:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
   9f8ca:	0c1a      	lsrs	r2, r3, #16
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   9f8cc:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   9f8d0:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   9f8d4:	480c      	ldr	r0, [pc, #48]	; (9f908 <sync+0xec>)
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   9f8d6:	4a0d      	ldr	r2, [pc, #52]	; (9f90c <sync+0xf0>)
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   9f8d8:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
   9f8dc:	0e1b      	lsrs	r3, r3, #24
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   9f8de:	4629      	mov	r1, r5
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   9f8e0:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   9f8e4:	6320      	str	r0, [r4, #48]	; 0x30
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   9f8e6:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   9f8ea:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
   9f8ee:	f884 722f 	strb.w	r7, [r4, #559]	; 0x22f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   9f8f2:	2301      	movs	r3, #1
   9f8f4:	6962      	ldr	r2, [r4, #20]
   9f8f6:	7860      	ldrb	r0, [r4, #1]
   9f8f8:	4d05      	ldr	r5, [pc, #20]	; (9f910 <sync+0xf4>)
   9f8fa:	47a8      	blx	r5
			fs->fsi_flag = 0;
   9f8fc:	7166      	strb	r6, [r4, #5]
   9f8fe:	e797      	b.n	9f830 <sync+0x14>
   9f900:	0009f471 	.word	0x0009f471
   9f904:	000a5a25 	.word	0x000a5a25
   9f908:	41615252 	.word	0x41615252
   9f90c:	61417272 	.word	0x61417272
   9f910:	0009f3fd 	.word	0x0009f3fd

0009f914 <put_fat.part.4>:
static FRESULT put_fat (
   9f914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
   9f918:	7803      	ldrb	r3, [r0, #0]
static FRESULT put_fat (
   9f91a:	b083      	sub	sp, #12
		switch (fs->fs_type) {
   9f91c:	2b02      	cmp	r3, #2
static FRESULT put_fat (
   9f91e:	4604      	mov	r4, r0
   9f920:	460d      	mov	r5, r1
   9f922:	4616      	mov	r6, r2
		switch (fs->fs_type) {
   9f924:	f000 80a2 	beq.w	9fa6c <put_fat.part.4+0x158>
   9f928:	2b03      	cmp	r3, #3
   9f92a:	d06d      	beq.n	9fa08 <put_fat.part.4+0xf4>
   9f92c:	2b01      	cmp	r3, #1
   9f92e:	d005      	beq.n	9f93c <put_fat.part.4+0x28>
			res = FR_INT_ERR;
   9f930:	2002      	movs	r0, #2
		fs->wflag = 1;
   9f932:	2301      	movs	r3, #1
   9f934:	7123      	strb	r3, [r4, #4]
}
   9f936:	b003      	add	sp, #12
   9f938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   9f93c:	6a02      	ldr	r2, [r0, #32]
			bc = clst; bc += bc / 2;
   9f93e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
	wsect = fs->winsect;
   9f942:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   9f944:	eb02 2b58 	add.w	fp, r2, r8, lsr #9
	if (wsect != sector) {	/* Changed current window */
   9f948:	45bb      	cmp	fp, r7
   9f94a:	d009      	beq.n	9f960 <put_fat.part.4+0x4c>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9f94c:	7902      	ldrb	r2, [r0, #4]
   9f94e:	2a00      	cmp	r2, #0
   9f950:	f040 8121 	bne.w	9fb96 <put_fat.part.4+0x282>
		if (sector) {
   9f954:	f1bb 0f00 	cmp.w	fp, #0
   9f958:	f040 814e 	bne.w	9fbf8 <put_fat.part.4+0x2e4>
   9f95c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   9f95e:	6a22      	ldr	r2, [r4, #32]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   9f960:	f015 0a01 	ands.w	sl, r5, #1
			p = &fs->win[bc % SS(fs)];
   9f964:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   9f968:	f000 80a7 	beq.w	9faba <put_fat.part.4+0x1a6>
			fs->wflag = 1;
   9f96c:	2001      	movs	r0, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   9f96e:	4423      	add	r3, r4
   9f970:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
			bc++;
   9f974:	4480      	add	r8, r0
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   9f976:	eb02 2558 	add.w	r5, r2, r8, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   9f97a:	f001 010f 	and.w	r1, r1, #15
   9f97e:	ea41 1206 	orr.w	r2, r1, r6, lsl #4
	if (wsect != sector) {	/* Changed current window */
   9f982:	42bd      	cmp	r5, r7
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   9f984:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fs->wflag = 1;
   9f988:	7120      	strb	r0, [r4, #4]
	if (wsect != sector) {	/* Changed current window */
   9f98a:	f000 8152 	beq.w	9fc32 <put_fat.part.4+0x31e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9f98e:	f104 0330 	add.w	r3, r4, #48	; 0x30
   9f992:	9300      	str	r3, [sp, #0]
   9f994:	4619      	mov	r1, r3
   9f996:	463a      	mov	r2, r7
   9f998:	2301      	movs	r3, #1
   9f99a:	7860      	ldrb	r0, [r4, #1]
   9f99c:	f8df 929c 	ldr.w	r9, [pc, #668]	; 9fc3c <put_fat.part.4+0x328>
   9f9a0:	47c8      	blx	r9
   9f9a2:	2800      	cmp	r0, #0
   9f9a4:	f040 8130 	bne.w	9fc08 <put_fat.part.4+0x2f4>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9f9a8:	69e3      	ldr	r3, [r4, #28]
   9f9aa:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   9f9ac:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9f9ae:	441a      	add	r2, r3
   9f9b0:	42ba      	cmp	r2, r7
   9f9b2:	d91d      	bls.n	9f9f0 <put_fat.part.4+0xdc>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f9b4:	f894 b003 	ldrb.w	fp, [r4, #3]
   9f9b8:	f1bb 0f01 	cmp.w	fp, #1
   9f9bc:	d918      	bls.n	9f9f0 <put_fat.part.4+0xdc>
   9f9be:	464a      	mov	r2, r9
   9f9c0:	f8cd a004 	str.w	sl, [sp, #4]
   9f9c4:	46a9      	mov	r9, r5
   9f9c6:	f8dd a000 	ldr.w	sl, [sp]
   9f9ca:	4615      	mov	r5, r2
   9f9cc:	e000      	b.n	9f9d0 <put_fat.part.4+0xbc>
   9f9ce:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   9f9d0:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f9d2:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   9f9d6:	463a      	mov	r2, r7
   9f9d8:	2301      	movs	r3, #1
   9f9da:	4651      	mov	r1, sl
   9f9dc:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f9de:	fa5f fb8b 	uxtb.w	fp, fp
					disk_write(fs->drv, fs->win, wsect, 1);
   9f9e2:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9f9e4:	f1bb 0f01 	cmp.w	fp, #1
   9f9e8:	d1f1      	bne.n	9f9ce <put_fat.part.4+0xba>
   9f9ea:	464d      	mov	r5, r9
   9f9ec:	f8dd a004 	ldr.w	sl, [sp, #4]
		if (sector) {
   9f9f0:	2d00      	cmp	r5, #0
   9f9f2:	f040 8114 	bne.w	9fc1e <put_fat.part.4+0x30a>
			p = &fs->win[bc % SS(fs)];
   9f9f6:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   9f9fa:	f1ba 0f00 	cmp.w	sl, #0
   9f9fe:	d069      	beq.n	9fad4 <put_fat.part.4+0x1c0>
   9fa00:	f3c6 1607 	ubfx	r6, r6, #4, #8
   9fa04:	44a0      	add	r8, r4
   9fa06:	e06d      	b.n	9fae4 <put_fat.part.4+0x1d0>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   9fa08:	6a07      	ldr	r7, [r0, #32]
	wsect = fs->winsect;
   9fa0a:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   9fa0e:	eb07 17d1 	add.w	r7, r7, r1, lsr #7
	if (wsect != sector) {	/* Changed current window */
   9fa12:	4547      	cmp	r7, r8
   9fa14:	d00f      	beq.n	9fa36 <put_fat.part.4+0x122>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9fa16:	7903      	ldrb	r3, [r0, #4]
   9fa18:	2b00      	cmp	r3, #0
   9fa1a:	d167      	bne.n	9faec <put_fat.part.4+0x1d8>
		if (sector) {
   9fa1c:	b15f      	cbz	r7, 9fa36 <put_fat.part.4+0x122>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9fa1e:	2301      	movs	r3, #1
   9fa20:	463a      	mov	r2, r7
   9fa22:	f104 0130 	add.w	r1, r4, #48	; 0x30
   9fa26:	7860      	ldrb	r0, [r4, #1]
   9fa28:	f8df 820c 	ldr.w	r8, [pc, #524]	; 9fc38 <put_fat.part.4+0x324>
   9fa2c:	47c0      	blx	r8
   9fa2e:	2800      	cmp	r0, #0
   9fa30:	f040 80ea 	bne.w	9fc08 <put_fat.part.4+0x2f4>
			fs->winsect = sector;
   9fa34:	62e7      	str	r7, [r4, #44]	; 0x2c
			p = &fs->win[clst * 4 % SS(fs)];
   9fa36:	00ad      	lsls	r5, r5, #2
   9fa38:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
   9fa3c:	f105 0230 	add.w	r2, r5, #48	; 0x30
   9fa40:	4422      	add	r2, r4
			val |= LD_DWORD(p) & 0xF0000000;
   9fa42:	78d3      	ldrb	r3, [r2, #3]
   9fa44:	4425      	add	r5, r4
   9fa46:	061b      	lsls	r3, r3, #24
   9fa48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
   9fa4c:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   9fa4e:	0e33      	lsrs	r3, r6, #24
   9fa50:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
   9fa54:	2000      	movs	r0, #0
   9fa56:	70d3      	strb	r3, [r2, #3]
		fs->wflag = 1;
   9fa58:	2301      	movs	r3, #1
			ST_DWORD(p, val);
   9fa5a:	f3c6 2707 	ubfx	r7, r6, #8, #8
   9fa5e:	0c31      	lsrs	r1, r6, #16
   9fa60:	7057      	strb	r7, [r2, #1]
   9fa62:	7091      	strb	r1, [r2, #2]
		fs->wflag = 1;
   9fa64:	7123      	strb	r3, [r4, #4]
}
   9fa66:	b003      	add	sp, #12
   9fa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   9fa6c:	6a07      	ldr	r7, [r0, #32]
	wsect = fs->winsect;
   9fa6e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   9fa72:	eb07 2711 	add.w	r7, r7, r1, lsr #8
	if (wsect != sector) {	/* Changed current window */
   9fa76:	4547      	cmp	r7, r8
   9fa78:	d00f      	beq.n	9fa9a <put_fat.part.4+0x186>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9fa7a:	7903      	ldrb	r3, [r0, #4]
   9fa7c:	2b00      	cmp	r3, #0
   9fa7e:	d160      	bne.n	9fb42 <put_fat.part.4+0x22e>
		if (sector) {
   9fa80:	b15f      	cbz	r7, 9fa9a <put_fat.part.4+0x186>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9fa82:	2301      	movs	r3, #1
   9fa84:	463a      	mov	r2, r7
   9fa86:	f104 0130 	add.w	r1, r4, #48	; 0x30
   9fa8a:	7860      	ldrb	r0, [r4, #1]
   9fa8c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 9fc38 <put_fat.part.4+0x324>
   9fa90:	47c0      	blx	r8
   9fa92:	2800      	cmp	r0, #0
   9fa94:	f040 80b8 	bne.w	9fc08 <put_fat.part.4+0x2f4>
			fs->winsect = sector;
   9fa98:	62e7      	str	r7, [r4, #44]	; 0x2c
			p = &fs->win[clst * 2 % SS(fs)];
   9fa9a:	006d      	lsls	r5, r5, #1
   9fa9c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
   9faa0:	4425      	add	r5, r4
   9faa2:	f3c6 2307 	ubfx	r3, r6, #8, #8
   9faa6:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   9faaa:	2000      	movs	r0, #0
		fs->wflag = 1;
   9faac:	2301      	movs	r3, #1
			ST_WORD(p, (WORD)val);
   9faae:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
		fs->wflag = 1;
   9fab2:	7123      	strb	r3, [r4, #4]
}
   9fab4:	b003      	add	sp, #12
   9fab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->wflag = 1;
   9faba:	2101      	movs	r1, #1
			bc++;
   9fabc:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   9fabe:	eb02 2558 	add.w	r5, r2, r8, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   9fac2:	4423      	add	r3, r4
	if (wsect != sector) {	/* Changed current window */
   9fac4:	42bd      	cmp	r5, r7
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   9fac6:	f883 6030 	strb.w	r6, [r3, #48]	; 0x30
			fs->wflag = 1;
   9faca:	7121      	strb	r1, [r4, #4]
	if (wsect != sector) {	/* Changed current window */
   9facc:	f47f af5f 	bne.w	9f98e <put_fat.part.4+0x7a>
			p = &fs->win[bc % SS(fs)];
   9fad0:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   9fad4:	44a0      	add	r8, r4
   9fad6:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
   9fada:	f3c6 2203 	ubfx	r2, r6, #8, #4
   9fade:	f023 060f 	bic.w	r6, r3, #15
   9fae2:	4316      	orrs	r6, r2
   9fae4:	f888 6030 	strb.w	r6, [r8, #48]	; 0x30
   9fae8:	2000      	movs	r0, #0
   9faea:	e722      	b.n	9f932 <put_fat.part.4+0x1e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9faec:	f100 0b30 	add.w	fp, r0, #48	; 0x30
   9faf0:	4659      	mov	r1, fp
   9faf2:	2301      	movs	r3, #1
   9faf4:	4642      	mov	r2, r8
   9faf6:	7840      	ldrb	r0, [r0, #1]
   9faf8:	f8df 9140 	ldr.w	r9, [pc, #320]	; 9fc3c <put_fat.part.4+0x328>
   9fafc:	47c8      	blx	r9
   9fafe:	2800      	cmp	r0, #0
   9fb00:	f040 8082 	bne.w	9fc08 <put_fat.part.4+0x2f4>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fb04:	69e3      	ldr	r3, [r4, #28]
   9fb06:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   9fb08:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fb0a:	441a      	add	r2, r3
   9fb0c:	4590      	cmp	r8, r2
   9fb0e:	d285      	bcs.n	9fa1c <put_fat.part.4+0x108>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fb10:	f894 a003 	ldrb.w	sl, [r4, #3]
   9fb14:	f1ba 0f01 	cmp.w	sl, #1
   9fb18:	d980      	bls.n	9fa1c <put_fat.part.4+0x108>
   9fb1a:	464a      	mov	r2, r9
   9fb1c:	46a9      	mov	r9, r5
   9fb1e:	4615      	mov	r5, r2
   9fb20:	e000      	b.n	9fb24 <put_fat.part.4+0x210>
   9fb22:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   9fb24:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fb26:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   9fb2a:	4642      	mov	r2, r8
   9fb2c:	2301      	movs	r3, #1
   9fb2e:	4659      	mov	r1, fp
   9fb30:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fb32:	fa5f fa8a 	uxtb.w	sl, sl
					disk_write(fs->drv, fs->win, wsect, 1);
   9fb36:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fb38:	f1ba 0f01 	cmp.w	sl, #1
   9fb3c:	d1f1      	bne.n	9fb22 <put_fat.part.4+0x20e>
   9fb3e:	464d      	mov	r5, r9
   9fb40:	e76c      	b.n	9fa1c <put_fat.part.4+0x108>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9fb42:	f100 0b30 	add.w	fp, r0, #48	; 0x30
   9fb46:	4659      	mov	r1, fp
   9fb48:	2301      	movs	r3, #1
   9fb4a:	4642      	mov	r2, r8
   9fb4c:	7840      	ldrb	r0, [r0, #1]
   9fb4e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 9fc3c <put_fat.part.4+0x328>
   9fb52:	47c8      	blx	r9
   9fb54:	2800      	cmp	r0, #0
   9fb56:	d157      	bne.n	9fc08 <put_fat.part.4+0x2f4>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fb58:	69e3      	ldr	r3, [r4, #28]
   9fb5a:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   9fb5c:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fb5e:	441a      	add	r2, r3
   9fb60:	4590      	cmp	r8, r2
   9fb62:	d28d      	bcs.n	9fa80 <put_fat.part.4+0x16c>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fb64:	f894 a003 	ldrb.w	sl, [r4, #3]
   9fb68:	f1ba 0f01 	cmp.w	sl, #1
   9fb6c:	d988      	bls.n	9fa80 <put_fat.part.4+0x16c>
   9fb6e:	464a      	mov	r2, r9
   9fb70:	46a9      	mov	r9, r5
   9fb72:	4615      	mov	r5, r2
   9fb74:	e000      	b.n	9fb78 <put_fat.part.4+0x264>
   9fb76:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   9fb78:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fb7a:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   9fb7e:	4642      	mov	r2, r8
   9fb80:	2301      	movs	r3, #1
   9fb82:	4659      	mov	r1, fp
   9fb84:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fb86:	fa5f fa8a 	uxtb.w	sl, sl
					disk_write(fs->drv, fs->win, wsect, 1);
   9fb8a:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fb8c:	f1ba 0f01 	cmp.w	sl, #1
   9fb90:	d1f1      	bne.n	9fb76 <put_fat.part.4+0x262>
   9fb92:	464d      	mov	r5, r9
   9fb94:	e774      	b.n	9fa80 <put_fat.part.4+0x16c>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9fb96:	f100 0230 	add.w	r2, r0, #48	; 0x30
   9fb9a:	9200      	str	r2, [sp, #0]
   9fb9c:	4611      	mov	r1, r2
   9fb9e:	7840      	ldrb	r0, [r0, #1]
   9fba0:	463a      	mov	r2, r7
   9fba2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 9fc3c <put_fat.part.4+0x328>
   9fba6:	47c8      	blx	r9
   9fba8:	bb70      	cbnz	r0, 9fc08 <put_fat.part.4+0x2f4>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fbaa:	69e3      	ldr	r3, [r4, #28]
   9fbac:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   9fbae:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fbb0:	441a      	add	r2, r3
   9fbb2:	4297      	cmp	r7, r2
   9fbb4:	f4bf aece 	bcs.w	9f954 <put_fat.part.4+0x40>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fbb8:	f894 a003 	ldrb.w	sl, [r4, #3]
   9fbbc:	f1ba 0f01 	cmp.w	sl, #1
   9fbc0:	f67f aec8 	bls.w	9f954 <put_fat.part.4+0x40>
   9fbc4:	464a      	mov	r2, r9
   9fbc6:	f8cd 8004 	str.w	r8, [sp, #4]
   9fbca:	46a9      	mov	r9, r5
   9fbcc:	f8dd 8000 	ldr.w	r8, [sp]
   9fbd0:	4615      	mov	r5, r2
   9fbd2:	e000      	b.n	9fbd6 <put_fat.part.4+0x2c2>
   9fbd4:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   9fbd6:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fbd8:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   9fbdc:	463a      	mov	r2, r7
   9fbde:	2301      	movs	r3, #1
   9fbe0:	4641      	mov	r1, r8
   9fbe2:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fbe4:	fa5f fa8a 	uxtb.w	sl, sl
					disk_write(fs->drv, fs->win, wsect, 1);
   9fbe8:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fbea:	f1ba 0f01 	cmp.w	sl, #1
   9fbee:	d1f1      	bne.n	9fbd4 <put_fat.part.4+0x2c0>
   9fbf0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   9fbf4:	464d      	mov	r5, r9
   9fbf6:	e6ad      	b.n	9f954 <put_fat.part.4+0x40>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9fbf8:	2301      	movs	r3, #1
   9fbfa:	465a      	mov	r2, fp
   9fbfc:	f104 0130 	add.w	r1, r4, #48	; 0x30
   9fc00:	7860      	ldrb	r0, [r4, #1]
   9fc02:	4f0d      	ldr	r7, [pc, #52]	; (9fc38 <put_fat.part.4+0x324>)
   9fc04:	47b8      	blx	r7
   9fc06:	b128      	cbz	r0, 9fc14 <put_fat.part.4+0x300>
			res = FR_INT_ERR;
   9fc08:	2001      	movs	r0, #1
		fs->wflag = 1;
   9fc0a:	2301      	movs	r3, #1
   9fc0c:	7123      	strb	r3, [r4, #4]
}
   9fc0e:	b003      	add	sp, #12
   9fc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
   9fc14:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
   9fc18:	465f      	mov	r7, fp
   9fc1a:	6a22      	ldr	r2, [r4, #32]
   9fc1c:	e6a0      	b.n	9f960 <put_fat.part.4+0x4c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9fc1e:	9900      	ldr	r1, [sp, #0]
   9fc20:	2301      	movs	r3, #1
   9fc22:	462a      	mov	r2, r5
   9fc24:	7860      	ldrb	r0, [r4, #1]
   9fc26:	4f04      	ldr	r7, [pc, #16]	; (9fc38 <put_fat.part.4+0x324>)
   9fc28:	47b8      	blx	r7
   9fc2a:	2800      	cmp	r0, #0
   9fc2c:	d1ec      	bne.n	9fc08 <put_fat.part.4+0x2f4>
			fs->winsect = sector;
   9fc2e:	62e5      	str	r5, [r4, #44]	; 0x2c
   9fc30:	e6e1      	b.n	9f9f6 <put_fat.part.4+0xe2>
			p = &fs->win[bc % SS(fs)];
   9fc32:	f3c8 0808 	ubfx	r8, r8, #0, #9
   9fc36:	e6e3      	b.n	9fa00 <put_fat.part.4+0xec>
   9fc38:	0009f389 	.word	0x0009f389
   9fc3c:	0009f3fd 	.word	0x0009f3fd

0009fc40 <remove_chain.part.6>:
FRESULT remove_chain (
   9fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   9fc44:	4604      	mov	r4, r0
   9fc46:	460e      	mov	r6, r1
		while (clst < fs->n_fatent) {			/* Not a last link? */
   9fc48:	69a3      	ldr	r3, [r4, #24]
FRESULT remove_chain (
   9fc4a:	b083      	sub	sp, #12
		while (clst < fs->n_fatent) {			/* Not a last link? */
   9fc4c:	429e      	cmp	r6, r3
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9fc4e:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 9ff24 <remove_chain.part.6+0x2e4>
		while (clst < fs->n_fatent) {			/* Not a last link? */
   9fc52:	f080 80c6 	bcs.w	9fde2 <remove_chain.part.6+0x1a2>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   9fc56:	2e01      	cmp	r6, #1
   9fc58:	d92c      	bls.n	9fcb4 <remove_chain.part.6+0x74>
	switch (fs->fs_type) {
   9fc5a:	7823      	ldrb	r3, [r4, #0]
   9fc5c:	2b02      	cmp	r3, #2
   9fc5e:	d008      	beq.n	9fc72 <remove_chain.part.6+0x32>
   9fc60:	2b03      	cmp	r3, #3
   9fc62:	f000 808a 	beq.w	9fd7a <remove_chain.part.6+0x13a>
   9fc66:	2b01      	cmp	r3, #1
   9fc68:	d028      	beq.n	9fcbc <remove_chain.part.6+0x7c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   9fc6a:	2001      	movs	r0, #1
}
   9fc6c:	b003      	add	sp, #12
   9fc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   9fc72:	6a25      	ldr	r5, [r4, #32]
	wsect = fs->winsect;
   9fc74:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   9fc78:	eb05 2516 	add.w	r5, r5, r6, lsr #8
	if (wsect != sector) {	/* Changed current window */
   9fc7c:	4545      	cmp	r5, r8
   9fc7e:	d006      	beq.n	9fc8e <remove_chain.part.6+0x4e>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9fc80:	7923      	ldrb	r3, [r4, #4]
   9fc82:	2b00      	cmp	r3, #0
   9fc84:	f040 80dc 	bne.w	9fe40 <remove_chain.part.6+0x200>
		if (sector) {
   9fc88:	2d00      	cmp	r5, #0
   9fc8a:	f040 80fc 	bne.w	9fe86 <remove_chain.part.6+0x246>
		p = &fs->win[clst * 2 % SS(fs)];
   9fc8e:	0073      	lsls	r3, r6, #1
   9fc90:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
		return LD_WORD(p);
   9fc94:	4423      	add	r3, r4
   9fc96:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
   9fc9a:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
   9fc9e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
			if (nxt == 0) break;				/* Empty cluster? */
   9fca2:	2d00      	cmp	r5, #0
   9fca4:	f000 809d 	beq.w	9fde2 <remove_chain.part.6+0x1a2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   9fca8:	2d01      	cmp	r5, #1
   9fcaa:	d003      	beq.n	9fcb4 <remove_chain.part.6+0x74>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   9fcac:	69a3      	ldr	r3, [r4, #24]
   9fcae:	429e      	cmp	r6, r3
   9fcb0:	f0c0 8083 	bcc.w	9fdba <remove_chain.part.6+0x17a>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   9fcb4:	2002      	movs	r0, #2
}
   9fcb6:	b003      	add	sp, #12
   9fcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   9fcbc:	6a22      	ldr	r2, [r4, #32]
		bc = (UINT)clst; bc += bc / 2;
   9fcbe:	eb06 0856 	add.w	r8, r6, r6, lsr #1
	wsect = fs->winsect;
   9fcc2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   9fcc4:	eb02 2558 	add.w	r5, r2, r8, lsr #9
	if (wsect != sector) {	/* Changed current window */
   9fcc8:	42bd      	cmp	r5, r7
   9fcca:	d005      	beq.n	9fcd8 <remove_chain.part.6+0x98>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9fccc:	7922      	ldrb	r2, [r4, #4]
   9fcce:	bb12      	cbnz	r2, 9fd16 <remove_chain.part.6+0xd6>
		if (sector) {
   9fcd0:	2d00      	cmp	r5, #0
   9fcd2:	d144      	bne.n	9fd5e <remove_chain.part.6+0x11e>
   9fcd4:	6a22      	ldr	r2, [r4, #32]
   9fcd6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
		wc = fs->win[bc % SS(fs)]; bc++;
   9fcd8:	f3c8 0308 	ubfx	r3, r8, #0, #9
   9fcdc:	f108 0801 	add.w	r8, r8, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   9fce0:	eb02 2958 	add.w	r9, r2, r8, lsr #9
		wc = fs->win[bc % SS(fs)]; bc++;
   9fce4:	4423      	add	r3, r4
	if (wsect != sector) {	/* Changed current window */
   9fce6:	45b9      	cmp	r9, r7
		wc = fs->win[bc % SS(fs)]; bc++;
   9fce8:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
	if (wsect != sector) {	/* Changed current window */
   9fcec:	d007      	beq.n	9fcfe <remove_chain.part.6+0xbe>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9fcee:	7923      	ldrb	r3, [r4, #4]
   9fcf0:	2b00      	cmp	r3, #0
   9fcf2:	f040 80e4 	bne.w	9febe <remove_chain.part.6+0x27e>
		if (sector) {
   9fcf6:	f1b9 0f00 	cmp.w	r9, #0
   9fcfa:	f040 80d3 	bne.w	9fea4 <remove_chain.part.6+0x264>
		wc |= fs->win[bc % SS(fs)] << 8;
   9fcfe:	f3c8 0808 	ubfx	r8, r8, #0, #9
   9fd02:	44a0      	add	r8, r4
   9fd04:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
   9fd08:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   9fd0c:	07f3      	lsls	r3, r6, #31
   9fd0e:	f140 80c6 	bpl.w	9fe9e <remove_chain.part.6+0x25e>
   9fd12:	092d      	lsrs	r5, r5, #4
   9fd14:	e7c5      	b.n	9fca2 <remove_chain.part.6+0x62>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9fd16:	f104 0930 	add.w	r9, r4, #48	; 0x30
   9fd1a:	4649      	mov	r1, r9
   9fd1c:	463a      	mov	r2, r7
   9fd1e:	7860      	ldrb	r0, [r4, #1]
   9fd20:	47d0      	blx	sl
   9fd22:	2800      	cmp	r0, #0
   9fd24:	d1a1      	bne.n	9fc6a <remove_chain.part.6+0x2a>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fd26:	69e3      	ldr	r3, [r4, #28]
   9fd28:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   9fd2a:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fd2c:	441a      	add	r2, r3
   9fd2e:	4297      	cmp	r7, r2
   9fd30:	d2ce      	bcs.n	9fcd0 <remove_chain.part.6+0x90>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fd32:	f894 b003 	ldrb.w	fp, [r4, #3]
   9fd36:	f1bb 0f01 	cmp.w	fp, #1
   9fd3a:	d801      	bhi.n	9fd40 <remove_chain.part.6+0x100>
   9fd3c:	e7c8      	b.n	9fcd0 <remove_chain.part.6+0x90>
   9fd3e:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   9fd40:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fd42:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   9fd46:	463a      	mov	r2, r7
   9fd48:	2301      	movs	r3, #1
   9fd4a:	4649      	mov	r1, r9
   9fd4c:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fd4e:	fa5f fb8b 	uxtb.w	fp, fp
					disk_write(fs->drv, fs->win, wsect, 1);
   9fd52:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fd54:	f1bb 0f01 	cmp.w	fp, #1
   9fd58:	d1f1      	bne.n	9fd3e <remove_chain.part.6+0xfe>
		if (sector) {
   9fd5a:	2d00      	cmp	r5, #0
   9fd5c:	d0ba      	beq.n	9fcd4 <remove_chain.part.6+0x94>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9fd5e:	2301      	movs	r3, #1
   9fd60:	462a      	mov	r2, r5
   9fd62:	f104 0130 	add.w	r1, r4, #48	; 0x30
   9fd66:	7860      	ldrb	r0, [r4, #1]
   9fd68:	4f6c      	ldr	r7, [pc, #432]	; (9ff1c <remove_chain.part.6+0x2dc>)
   9fd6a:	47b8      	blx	r7
   9fd6c:	2800      	cmp	r0, #0
   9fd6e:	f47f af7c 	bne.w	9fc6a <remove_chain.part.6+0x2a>
			fs->winsect = sector;
   9fd72:	62e5      	str	r5, [r4, #44]	; 0x2c
   9fd74:	462f      	mov	r7, r5
   9fd76:	6a22      	ldr	r2, [r4, #32]
   9fd78:	e7ae      	b.n	9fcd8 <remove_chain.part.6+0x98>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   9fd7a:	6a25      	ldr	r5, [r4, #32]
	wsect = fs->winsect;
   9fd7c:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   9fd80:	eb05 15d6 	add.w	r5, r5, r6, lsr #7
	if (wsect != sector) {	/* Changed current window */
   9fd84:	4545      	cmp	r5, r8
   9fd86:	d003      	beq.n	9fd90 <remove_chain.part.6+0x150>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9fd88:	7923      	ldrb	r3, [r4, #4]
   9fd8a:	bb63      	cbnz	r3, 9fde6 <remove_chain.part.6+0x1a6>
		if (sector) {
   9fd8c:	2d00      	cmp	r5, #0
   9fd8e:	d14b      	bne.n	9fe28 <remove_chain.part.6+0x1e8>
		p = &fs->win[clst * 4 % SS(fs)];
   9fd90:	00b3      	lsls	r3, r6, #2
   9fd92:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
   9fd96:	f103 0230 	add.w	r2, r3, #48	; 0x30
   9fd9a:	4422      	add	r2, r4
		return LD_DWORD(p) & 0x0FFFFFFF;
   9fd9c:	7895      	ldrb	r5, [r2, #2]
   9fd9e:	4423      	add	r3, r4
   9fda0:	78d0      	ldrb	r0, [r2, #3]
   9fda2:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
   9fda6:	042d      	lsls	r5, r5, #16
   9fda8:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
   9fdac:	7853      	ldrb	r3, [r2, #1]
   9fdae:	430d      	orrs	r5, r1
   9fdb0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
   9fdb4:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
   9fdb8:	e773      	b.n	9fca2 <remove_chain.part.6+0x62>
   9fdba:	4631      	mov	r1, r6
   9fdbc:	2200      	movs	r2, #0
   9fdbe:	4620      	mov	r0, r4
   9fdc0:	4b57      	ldr	r3, [pc, #348]	; (9ff20 <remove_chain.part.6+0x2e0>)
   9fdc2:	4798      	blx	r3
			if (res != FR_OK) break;
   9fdc4:	2800      	cmp	r0, #0
   9fdc6:	f47f af51 	bne.w	9fc6c <remove_chain.part.6+0x2c>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   9fdca:	6923      	ldr	r3, [r4, #16]
   9fdcc:	1c5a      	adds	r2, r3, #1
   9fdce:	d003      	beq.n	9fdd8 <remove_chain.part.6+0x198>
				fs->fsi_flag = 1;
   9fdd0:	2201      	movs	r2, #1
				fs->free_clust++;
   9fdd2:	4413      	add	r3, r2
   9fdd4:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   9fdd6:	7162      	strb	r2, [r4, #5]
FRESULT remove_chain (
   9fdd8:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
   9fdda:	69a3      	ldr	r3, [r4, #24]
   9fddc:	429e      	cmp	r6, r3
   9fdde:	f4ff af3a 	bcc.w	9fc56 <remove_chain.part.6+0x16>
FRESULT remove_chain (
   9fde2:	2000      	movs	r0, #0
   9fde4:	e742      	b.n	9fc6c <remove_chain.part.6+0x2c>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9fde6:	f104 0930 	add.w	r9, r4, #48	; 0x30
   9fdea:	4649      	mov	r1, r9
   9fdec:	2301      	movs	r3, #1
   9fdee:	4642      	mov	r2, r8
   9fdf0:	7860      	ldrb	r0, [r4, #1]
   9fdf2:	47d0      	blx	sl
   9fdf4:	2800      	cmp	r0, #0
   9fdf6:	f47f af38 	bne.w	9fc6a <remove_chain.part.6+0x2a>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fdfa:	69e3      	ldr	r3, [r4, #28]
   9fdfc:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   9fdfe:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fe00:	441a      	add	r2, r3
   9fe02:	4590      	cmp	r8, r2
   9fe04:	d2c2      	bcs.n	9fd8c <remove_chain.part.6+0x14c>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fe06:	78e7      	ldrb	r7, [r4, #3]
   9fe08:	2f01      	cmp	r7, #1
   9fe0a:	d801      	bhi.n	9fe10 <remove_chain.part.6+0x1d0>
   9fe0c:	e7be      	b.n	9fd8c <remove_chain.part.6+0x14c>
   9fe0e:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   9fe10:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fe12:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   9fe14:	4642      	mov	r2, r8
   9fe16:	2301      	movs	r3, #1
   9fe18:	4649      	mov	r1, r9
   9fe1a:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fe1c:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
   9fe1e:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fe20:	2f01      	cmp	r7, #1
   9fe22:	d1f4      	bne.n	9fe0e <remove_chain.part.6+0x1ce>
		if (sector) {
   9fe24:	2d00      	cmp	r5, #0
   9fe26:	d0b3      	beq.n	9fd90 <remove_chain.part.6+0x150>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9fe28:	2301      	movs	r3, #1
   9fe2a:	462a      	mov	r2, r5
   9fe2c:	f104 0130 	add.w	r1, r4, #48	; 0x30
   9fe30:	7860      	ldrb	r0, [r4, #1]
   9fe32:	4f3a      	ldr	r7, [pc, #232]	; (9ff1c <remove_chain.part.6+0x2dc>)
   9fe34:	47b8      	blx	r7
   9fe36:	2800      	cmp	r0, #0
   9fe38:	f47f af17 	bne.w	9fc6a <remove_chain.part.6+0x2a>
			fs->winsect = sector;
   9fe3c:	62e5      	str	r5, [r4, #44]	; 0x2c
   9fe3e:	e7a7      	b.n	9fd90 <remove_chain.part.6+0x150>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9fe40:	f104 0930 	add.w	r9, r4, #48	; 0x30
   9fe44:	4649      	mov	r1, r9
   9fe46:	2301      	movs	r3, #1
   9fe48:	4642      	mov	r2, r8
   9fe4a:	7860      	ldrb	r0, [r4, #1]
   9fe4c:	47d0      	blx	sl
   9fe4e:	2800      	cmp	r0, #0
   9fe50:	f47f af0b 	bne.w	9fc6a <remove_chain.part.6+0x2a>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fe54:	69e3      	ldr	r3, [r4, #28]
   9fe56:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   9fe58:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fe5a:	441a      	add	r2, r3
   9fe5c:	4590      	cmp	r8, r2
   9fe5e:	f4bf af13 	bcs.w	9fc88 <remove_chain.part.6+0x48>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fe62:	78e7      	ldrb	r7, [r4, #3]
   9fe64:	2f01      	cmp	r7, #1
   9fe66:	d801      	bhi.n	9fe6c <remove_chain.part.6+0x22c>
   9fe68:	e70e      	b.n	9fc88 <remove_chain.part.6+0x48>
   9fe6a:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   9fe6c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fe6e:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   9fe70:	4642      	mov	r2, r8
   9fe72:	2301      	movs	r3, #1
   9fe74:	4649      	mov	r1, r9
   9fe76:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fe78:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
   9fe7a:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fe7c:	2f01      	cmp	r7, #1
   9fe7e:	d1f4      	bne.n	9fe6a <remove_chain.part.6+0x22a>
		if (sector) {
   9fe80:	2d00      	cmp	r5, #0
   9fe82:	f43f af04 	beq.w	9fc8e <remove_chain.part.6+0x4e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9fe86:	2301      	movs	r3, #1
   9fe88:	462a      	mov	r2, r5
   9fe8a:	f104 0130 	add.w	r1, r4, #48	; 0x30
   9fe8e:	7860      	ldrb	r0, [r4, #1]
   9fe90:	4f22      	ldr	r7, [pc, #136]	; (9ff1c <remove_chain.part.6+0x2dc>)
   9fe92:	47b8      	blx	r7
   9fe94:	2800      	cmp	r0, #0
   9fe96:	f47f aee8 	bne.w	9fc6a <remove_chain.part.6+0x2a>
			fs->winsect = sector;
   9fe9a:	62e5      	str	r5, [r4, #44]	; 0x2c
   9fe9c:	e6f7      	b.n	9fc8e <remove_chain.part.6+0x4e>
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   9fe9e:	f3c5 050b 	ubfx	r5, r5, #0, #12
   9fea2:	e6fe      	b.n	9fca2 <remove_chain.part.6+0x62>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9fea4:	2301      	movs	r3, #1
   9fea6:	464a      	mov	r2, r9
   9fea8:	f104 0130 	add.w	r1, r4, #48	; 0x30
   9feac:	7860      	ldrb	r0, [r4, #1]
   9feae:	4f1b      	ldr	r7, [pc, #108]	; (9ff1c <remove_chain.part.6+0x2dc>)
   9feb0:	47b8      	blx	r7
   9feb2:	2800      	cmp	r0, #0
   9feb4:	f47f aed9 	bne.w	9fc6a <remove_chain.part.6+0x2a>
			fs->winsect = sector;
   9feb8:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
   9febc:	e71f      	b.n	9fcfe <remove_chain.part.6+0xbe>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   9febe:	f104 0330 	add.w	r3, r4, #48	; 0x30
   9fec2:	9300      	str	r3, [sp, #0]
   9fec4:	4619      	mov	r1, r3
   9fec6:	463a      	mov	r2, r7
   9fec8:	2301      	movs	r3, #1
   9feca:	7860      	ldrb	r0, [r4, #1]
   9fecc:	47d0      	blx	sl
   9fece:	2800      	cmp	r0, #0
   9fed0:	f47f aecb 	bne.w	9fc6a <remove_chain.part.6+0x2a>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9fed4:	69e3      	ldr	r3, [r4, #28]
   9fed6:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   9fed8:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   9feda:	441a      	add	r2, r3
   9fedc:	42ba      	cmp	r2, r7
   9fede:	f67f af0a 	bls.w	9fcf6 <remove_chain.part.6+0xb6>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fee2:	f894 b003 	ldrb.w	fp, [r4, #3]
   9fee6:	f1bb 0f01 	cmp.w	fp, #1
   9feea:	f67f af04 	bls.w	9fcf6 <remove_chain.part.6+0xb6>
   9feee:	9501      	str	r5, [sp, #4]
   9fef0:	9d00      	ldr	r5, [sp, #0]
   9fef2:	e000      	b.n	9fef6 <remove_chain.part.6+0x2b6>
   9fef4:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   9fef6:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9fef8:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   9fefc:	463a      	mov	r2, r7
   9fefe:	2301      	movs	r3, #1
   9ff00:	4629      	mov	r1, r5
   9ff02:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9ff04:	fa5f fb8b 	uxtb.w	fp, fp
					disk_write(fs->drv, fs->win, wsect, 1);
   9ff08:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   9ff0a:	f1bb 0f01 	cmp.w	fp, #1
   9ff0e:	d1f1      	bne.n	9fef4 <remove_chain.part.6+0x2b4>
   9ff10:	9d01      	ldr	r5, [sp, #4]
		if (sector) {
   9ff12:	f1b9 0f00 	cmp.w	r9, #0
   9ff16:	f43f aef2 	beq.w	9fcfe <remove_chain.part.6+0xbe>
   9ff1a:	e7c3      	b.n	9fea4 <remove_chain.part.6+0x264>
   9ff1c:	0009f389 	.word	0x0009f389
   9ff20:	0009f915 	.word	0x0009f915
   9ff24:	0009f3fd 	.word	0x0009f3fd

0009ff28 <get_fat.part.3>:
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   9ff28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (fs->fs_type) {
   9ff2c:	7803      	ldrb	r3, [r0, #0]
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   9ff2e:	b083      	sub	sp, #12
	switch (fs->fs_type) {
   9ff30:	2b02      	cmp	r3, #2
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   9ff32:	4604      	mov	r4, r0
   9ff34:	460d      	mov	r5, r1
	switch (fs->fs_type) {
   9ff36:	d06f      	beq.n	a0018 <get_fat.part.3+0xf0>
   9ff38:	2b03      	cmp	r3, #3
   9ff3a:	d040      	beq.n	9ffbe <get_fat.part.3+0x96>
   9ff3c:	2b01      	cmp	r3, #1
   9ff3e:	d004      	beq.n	9ff4a <get_fat.part.3+0x22>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   9ff40:	f04f 30ff 	mov.w	r0, #4294967295
}
   9ff44:	b003      	add	sp, #12
   9ff46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   9ff4a:	6a02      	ldr	r2, [r0, #32]
		bc = (UINT)clst; bc += bc / 2;
   9ff4c:	eb01 0851 	add.w	r8, r1, r1, lsr #1
	wsect = fs->winsect;
   9ff50:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   9ff52:	eb02 2658 	add.w	r6, r2, r8, lsr #9
	if (wsect != sector) {	/* Changed current window */
   9ff56:	42be      	cmp	r6, r7
   9ff58:	d008      	beq.n	9ff6c <get_fat.part.3+0x44>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9ff5a:	7902      	ldrb	r2, [r0, #4]
   9ff5c:	2a00      	cmp	r2, #0
   9ff5e:	f040 80a2 	bne.w	a00a6 <get_fat.part.3+0x17e>
		if (sector) {
   9ff62:	2e00      	cmp	r6, #0
   9ff64:	f040 80f3 	bne.w	a014e <get_fat.part.3+0x226>
   9ff68:	6a22      	ldr	r2, [r4, #32]
   9ff6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
		wc = fs->win[bc % SS(fs)]; bc++;
   9ff6c:	f3c8 0308 	ubfx	r3, r8, #0, #9
   9ff70:	f108 0801 	add.w	r8, r8, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   9ff74:	eb02 2958 	add.w	r9, r2, r8, lsr #9
		wc = fs->win[bc % SS(fs)]; bc++;
   9ff78:	4423      	add	r3, r4
	if (wsect != sector) {	/* Changed current window */
   9ff7a:	45b9      	cmp	r9, r7
		wc = fs->win[bc % SS(fs)]; bc++;
   9ff7c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	if (wsect != sector) {	/* Changed current window */
   9ff80:	d011      	beq.n	9ffa6 <get_fat.part.3+0x7e>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9ff82:	7923      	ldrb	r3, [r4, #4]
   9ff84:	2b00      	cmp	r3, #0
   9ff86:	f040 80f0 	bne.w	a016a <get_fat.part.3+0x242>
		if (sector) {
   9ff8a:	f1b9 0f00 	cmp.w	r9, #0
   9ff8e:	d00a      	beq.n	9ffa6 <get_fat.part.3+0x7e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9ff90:	2301      	movs	r3, #1
   9ff92:	464a      	mov	r2, r9
   9ff94:	f104 0130 	add.w	r1, r4, #48	; 0x30
   9ff98:	7860      	ldrb	r0, [r4, #1]
   9ff9a:	4f8e      	ldr	r7, [pc, #568]	; (a01d4 <get_fat.part.3+0x2ac>)
   9ff9c:	47b8      	blx	r7
   9ff9e:	2800      	cmp	r0, #0
   9ffa0:	d1ce      	bne.n	9ff40 <get_fat.part.3+0x18>
			fs->winsect = sector;
   9ffa2:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
		wc |= fs->win[bc % SS(fs)] << 8;
   9ffa6:	f3c8 0808 	ubfx	r8, r8, #0, #9
   9ffaa:	4444      	add	r4, r8
   9ffac:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   9ffb0:	07eb      	lsls	r3, r5, #31
		wc |= fs->win[bc % SS(fs)] << 8;
   9ffb2:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   9ffb6:	f140 8109 	bpl.w	a01cc <get_fat.part.3+0x2a4>
   9ffba:	0930      	lsrs	r0, r6, #4
   9ffbc:	e7c2      	b.n	9ff44 <get_fat.part.3+0x1c>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   9ffbe:	6a06      	ldr	r6, [r0, #32]
	wsect = fs->winsect;
   9ffc0:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   9ffc4:	eb06 16d1 	add.w	r6, r6, r1, lsr #7
	if (wsect != sector) {	/* Changed current window */
   9ffc8:	4546      	cmp	r6, r8
   9ffca:	d00e      	beq.n	9ffea <get_fat.part.3+0xc2>
		if (fs->wflag) {	/* Write back dirty window if needed */
   9ffcc:	7903      	ldrb	r3, [r0, #4]
   9ffce:	2b00      	cmp	r3, #0
   9ffd0:	f040 8095 	bne.w	a00fe <get_fat.part.3+0x1d6>
		if (sector) {
   9ffd4:	b14e      	cbz	r6, 9ffea <get_fat.part.3+0xc2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   9ffd6:	2301      	movs	r3, #1
   9ffd8:	4632      	mov	r2, r6
   9ffda:	f104 0130 	add.w	r1, r4, #48	; 0x30
   9ffde:	7860      	ldrb	r0, [r4, #1]
   9ffe0:	4f7c      	ldr	r7, [pc, #496]	; (a01d4 <get_fat.part.3+0x2ac>)
   9ffe2:	47b8      	blx	r7
   9ffe4:	2800      	cmp	r0, #0
   9ffe6:	d1ab      	bne.n	9ff40 <get_fat.part.3+0x18>
			fs->winsect = sector;
   9ffe8:	62e6      	str	r6, [r4, #44]	; 0x2c
		p = &fs->win[clst * 4 % SS(fs)];
   9ffea:	00ad      	lsls	r5, r5, #2
   9ffec:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
   9fff0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   9fff4:	4423      	add	r3, r4
		return LD_DWORD(p) & 0x0FFFFFFF;
   9fff6:	7898      	ldrb	r0, [r3, #2]
   9fff8:	442c      	add	r4, r5
   9fffa:	78d9      	ldrb	r1, [r3, #3]
   9fffc:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   a0000:	0400      	lsls	r0, r0, #16
   a0002:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   a0006:	785e      	ldrb	r6, [r3, #1]
   a0008:	4310      	orrs	r0, r2
   a000a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   a000e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
   a0012:	b003      	add	sp, #12
   a0014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   a0018:	6a06      	ldr	r6, [r0, #32]
	wsect = fs->winsect;
   a001a:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   a001e:	eb06 2611 	add.w	r6, r6, r1, lsr #8
	if (wsect != sector) {	/* Changed current window */
   a0022:	4546      	cmp	r6, r8
   a0024:	d00c      	beq.n	a0040 <get_fat.part.3+0x118>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a0026:	7903      	ldrb	r3, [r0, #4]
   a0028:	b9bb      	cbnz	r3, a005a <get_fat.part.3+0x132>
		if (sector) {
   a002a:	b14e      	cbz	r6, a0040 <get_fat.part.3+0x118>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a002c:	2301      	movs	r3, #1
   a002e:	4632      	mov	r2, r6
   a0030:	f104 0130 	add.w	r1, r4, #48	; 0x30
   a0034:	7860      	ldrb	r0, [r4, #1]
   a0036:	4f67      	ldr	r7, [pc, #412]	; (a01d4 <get_fat.part.3+0x2ac>)
   a0038:	47b8      	blx	r7
   a003a:	2800      	cmp	r0, #0
   a003c:	d180      	bne.n	9ff40 <get_fat.part.3+0x18>
			fs->winsect = sector;
   a003e:	62e6      	str	r6, [r4, #44]	; 0x2c
		p = &fs->win[clst * 2 % SS(fs)];
   a0040:	006d      	lsls	r5, r5, #1
   a0042:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
		return LD_WORD(p);
   a0046:	442c      	add	r4, r5
   a0048:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
   a004c:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
   a0050:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
}
   a0054:	b003      	add	sp, #12
   a0056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a005a:	f100 0930 	add.w	r9, r0, #48	; 0x30
   a005e:	4649      	mov	r1, r9
   a0060:	2301      	movs	r3, #1
   a0062:	4642      	mov	r2, r8
   a0064:	7840      	ldrb	r0, [r0, #1]
   a0066:	f8df a170 	ldr.w	sl, [pc, #368]	; a01d8 <get_fat.part.3+0x2b0>
   a006a:	47d0      	blx	sl
   a006c:	2800      	cmp	r0, #0
   a006e:	f47f af67 	bne.w	9ff40 <get_fat.part.3+0x18>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a0072:	69e3      	ldr	r3, [r4, #28]
   a0074:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   a0076:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a0078:	441a      	add	r2, r3
   a007a:	4590      	cmp	r8, r2
   a007c:	d2d5      	bcs.n	a002a <get_fat.part.3+0x102>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a007e:	78e7      	ldrb	r7, [r4, #3]
   a0080:	2f01      	cmp	r7, #1
   a0082:	d9d2      	bls.n	a002a <get_fat.part.3+0x102>
   a0084:	4652      	mov	r2, sl
   a0086:	46aa      	mov	sl, r5
   a0088:	4615      	mov	r5, r2
   a008a:	e000      	b.n	a008e <get_fat.part.3+0x166>
   a008c:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   a008e:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0090:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   a0092:	4642      	mov	r2, r8
   a0094:	2301      	movs	r3, #1
   a0096:	4649      	mov	r1, r9
   a0098:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a009a:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
   a009c:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a009e:	2f01      	cmp	r7, #1
   a00a0:	d1f4      	bne.n	a008c <get_fat.part.3+0x164>
   a00a2:	4655      	mov	r5, sl
   a00a4:	e7c1      	b.n	a002a <get_fat.part.3+0x102>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a00a6:	f100 0930 	add.w	r9, r0, #48	; 0x30
   a00aa:	4649      	mov	r1, r9
   a00ac:	463a      	mov	r2, r7
   a00ae:	7840      	ldrb	r0, [r0, #1]
   a00b0:	f8df a124 	ldr.w	sl, [pc, #292]	; a01d8 <get_fat.part.3+0x2b0>
   a00b4:	47d0      	blx	sl
   a00b6:	2800      	cmp	r0, #0
   a00b8:	f47f af42 	bne.w	9ff40 <get_fat.part.3+0x18>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a00bc:	69e3      	ldr	r3, [r4, #28]
   a00be:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   a00c0:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a00c2:	441a      	add	r2, r3
   a00c4:	4297      	cmp	r7, r2
   a00c6:	f4bf af4c 	bcs.w	9ff62 <get_fat.part.3+0x3a>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a00ca:	f894 b003 	ldrb.w	fp, [r4, #3]
   a00ce:	f1bb 0f01 	cmp.w	fp, #1
   a00d2:	f67f af46 	bls.w	9ff62 <get_fat.part.3+0x3a>
   a00d6:	4652      	mov	r2, sl
   a00d8:	46aa      	mov	sl, r5
   a00da:	4615      	mov	r5, r2
   a00dc:	e000      	b.n	a00e0 <get_fat.part.3+0x1b8>
   a00de:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   a00e0:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a00e2:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   a00e6:	463a      	mov	r2, r7
   a00e8:	2301      	movs	r3, #1
   a00ea:	4649      	mov	r1, r9
   a00ec:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a00ee:	fa5f fb8b 	uxtb.w	fp, fp
					disk_write(fs->drv, fs->win, wsect, 1);
   a00f2:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a00f4:	f1bb 0f01 	cmp.w	fp, #1
   a00f8:	d1f1      	bne.n	a00de <get_fat.part.3+0x1b6>
   a00fa:	4655      	mov	r5, sl
   a00fc:	e731      	b.n	9ff62 <get_fat.part.3+0x3a>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a00fe:	f100 0930 	add.w	r9, r0, #48	; 0x30
   a0102:	4649      	mov	r1, r9
   a0104:	2301      	movs	r3, #1
   a0106:	4642      	mov	r2, r8
   a0108:	7840      	ldrb	r0, [r0, #1]
   a010a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; a01d8 <get_fat.part.3+0x2b0>
   a010e:	47d0      	blx	sl
   a0110:	2800      	cmp	r0, #0
   a0112:	f47f af15 	bne.w	9ff40 <get_fat.part.3+0x18>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a0116:	69e3      	ldr	r3, [r4, #28]
   a0118:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   a011a:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a011c:	441a      	add	r2, r3
   a011e:	4590      	cmp	r8, r2
   a0120:	f4bf af58 	bcs.w	9ffd4 <get_fat.part.3+0xac>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0124:	78e7      	ldrb	r7, [r4, #3]
   a0126:	2f01      	cmp	r7, #1
   a0128:	f67f af54 	bls.w	9ffd4 <get_fat.part.3+0xac>
   a012c:	4652      	mov	r2, sl
   a012e:	46aa      	mov	sl, r5
   a0130:	4615      	mov	r5, r2
   a0132:	e000      	b.n	a0136 <get_fat.part.3+0x20e>
   a0134:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   a0136:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0138:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   a013a:	4642      	mov	r2, r8
   a013c:	2301      	movs	r3, #1
   a013e:	4649      	mov	r1, r9
   a0140:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0142:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
   a0144:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0146:	2f01      	cmp	r7, #1
   a0148:	d1f4      	bne.n	a0134 <get_fat.part.3+0x20c>
   a014a:	4655      	mov	r5, sl
   a014c:	e742      	b.n	9ffd4 <get_fat.part.3+0xac>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a014e:	2301      	movs	r3, #1
   a0150:	4632      	mov	r2, r6
   a0152:	f104 0130 	add.w	r1, r4, #48	; 0x30
   a0156:	7860      	ldrb	r0, [r4, #1]
   a0158:	4f1e      	ldr	r7, [pc, #120]	; (a01d4 <get_fat.part.3+0x2ac>)
   a015a:	47b8      	blx	r7
   a015c:	2800      	cmp	r0, #0
   a015e:	f47f aeef 	bne.w	9ff40 <get_fat.part.3+0x18>
			fs->winsect = sector;
   a0162:	62e6      	str	r6, [r4, #44]	; 0x2c
   a0164:	4637      	mov	r7, r6
   a0166:	6a22      	ldr	r2, [r4, #32]
   a0168:	e700      	b.n	9ff6c <get_fat.part.3+0x44>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a016a:	f104 0330 	add.w	r3, r4, #48	; 0x30
   a016e:	9300      	str	r3, [sp, #0]
   a0170:	4619      	mov	r1, r3
   a0172:	463a      	mov	r2, r7
   a0174:	2301      	movs	r3, #1
   a0176:	7860      	ldrb	r0, [r4, #1]
   a0178:	f8df a05c 	ldr.w	sl, [pc, #92]	; a01d8 <get_fat.part.3+0x2b0>
   a017c:	47d0      	blx	sl
   a017e:	2800      	cmp	r0, #0
   a0180:	f47f aede 	bne.w	9ff40 <get_fat.part.3+0x18>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a0184:	69e3      	ldr	r3, [r4, #28]
   a0186:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   a0188:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a018a:	441a      	add	r2, r3
   a018c:	42ba      	cmp	r2, r7
   a018e:	f67f aefc 	bls.w	9ff8a <get_fat.part.3+0x62>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0192:	f894 b003 	ldrb.w	fp, [r4, #3]
   a0196:	f1bb 0f01 	cmp.w	fp, #1
   a019a:	f67f aef6 	bls.w	9ff8a <get_fat.part.3+0x62>
   a019e:	4652      	mov	r2, sl
   a01a0:	9601      	str	r6, [sp, #4]
   a01a2:	46aa      	mov	sl, r5
   a01a4:	9e00      	ldr	r6, [sp, #0]
   a01a6:	4615      	mov	r5, r2
   a01a8:	e000      	b.n	a01ac <get_fat.part.3+0x284>
   a01aa:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   a01ac:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a01ae:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   a01b2:	463a      	mov	r2, r7
   a01b4:	2301      	movs	r3, #1
   a01b6:	4631      	mov	r1, r6
   a01b8:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a01ba:	fa5f fb8b 	uxtb.w	fp, fp
					disk_write(fs->drv, fs->win, wsect, 1);
   a01be:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a01c0:	f1bb 0f01 	cmp.w	fp, #1
   a01c4:	d1f1      	bne.n	a01aa <get_fat.part.3+0x282>
   a01c6:	9e01      	ldr	r6, [sp, #4]
   a01c8:	4655      	mov	r5, sl
   a01ca:	e6de      	b.n	9ff8a <get_fat.part.3+0x62>
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   a01cc:	f3c6 000b 	ubfx	r0, r6, #0, #12
   a01d0:	e6b8      	b.n	9ff44 <get_fat.part.3+0x1c>
   a01d2:	bf00      	nop
   a01d4:	0009f389 	.word	0x0009f389
   a01d8:	0009f3fd 	.word	0x0009f3fd

000a01dc <dir_sdi>:
{
   a01dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a01de:	460c      	mov	r4, r1
	clst = dj->sclust;
   a01e0:	6881      	ldr	r1, [r0, #8]
	dj->index = idx;
   a01e2:	80c4      	strh	r4, [r0, #6]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   a01e4:	2901      	cmp	r1, #1
   a01e6:	d004      	beq.n	a01f2 <dir_sdi+0x16>
   a01e8:	4605      	mov	r5, r0
   a01ea:	6800      	ldr	r0, [r0, #0]
   a01ec:	6983      	ldr	r3, [r0, #24]
   a01ee:	4299      	cmp	r1, r3
   a01f0:	d301      	bcc.n	a01f6 <dir_sdi+0x1a>
		return FR_INT_ERR;
   a01f2:	2002      	movs	r0, #2
   a01f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   a01f6:	b9b9      	cbnz	r1, a0228 <dir_sdi+0x4c>
   a01f8:	7802      	ldrb	r2, [r0, #0]
   a01fa:	2a03      	cmp	r2, #3
   a01fc:	d011      	beq.n	a0222 <dir_sdi+0x46>
		dj->clust = clst;
   a01fe:	2300      	movs	r3, #0
   a0200:	60eb      	str	r3, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   a0202:	8903      	ldrh	r3, [r0, #8]
   a0204:	42a3      	cmp	r3, r4
   a0206:	d9f4      	bls.n	a01f2 <dir_sdi+0x16>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   a0208:	6a43      	ldr	r3, [r0, #36]	; 0x24
   a020a:	f3c4 120f 	ubfx	r2, r4, #4, #16
   a020e:	4413      	add	r3, r2
   a0210:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   a0212:	3030      	adds	r0, #48	; 0x30
   a0214:	f004 040f 	and.w	r4, r4, #15
   a0218:	eb00 1444 	add.w	r4, r0, r4, lsl #5
   a021c:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
   a021e:	2000      	movs	r0, #0
   a0220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
   a0222:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   a0224:	2900      	cmp	r1, #0
   a0226:	d0ea      	beq.n	a01fe <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   a0228:	7887      	ldrb	r7, [r0, #2]
   a022a:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
   a022c:	42bc      	cmp	r4, r7
   a022e:	d318      	bcc.n	a0262 <dir_sdi+0x86>
   a0230:	1be4      	subs	r4, r4, r7
   a0232:	b2a4      	uxth	r4, r4
   a0234:	4e14      	ldr	r6, [pc, #80]	; (a0288 <dir_sdi+0xac>)
   a0236:	e00e      	b.n	a0256 <dir_sdi+0x7a>
   a0238:	47b0      	blx	r6
   a023a:	1be2      	subs	r2, r4, r7
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   a023c:	1c43      	adds	r3, r0, #1
   a023e:	4601      	mov	r1, r0
   a0240:	b292      	uxth	r2, r2
   a0242:	d01e      	beq.n	a0282 <dir_sdi+0xa6>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   a0244:	2801      	cmp	r0, #1
   a0246:	d9d4      	bls.n	a01f2 <dir_sdi+0x16>
   a0248:	6828      	ldr	r0, [r5, #0]
   a024a:	6983      	ldr	r3, [r0, #24]
   a024c:	428b      	cmp	r3, r1
   a024e:	d9d0      	bls.n	a01f2 <dir_sdi+0x16>
		while (idx >= ic) {	/* Follow cluster chain */
   a0250:	42a7      	cmp	r7, r4
   a0252:	d806      	bhi.n	a0262 <dir_sdi+0x86>
   a0254:	4614      	mov	r4, r2
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   a0256:	2901      	cmp	r1, #1
   a0258:	d9cb      	bls.n	a01f2 <dir_sdi+0x16>
   a025a:	4299      	cmp	r1, r3
   a025c:	d3ec      	bcc.n	a0238 <dir_sdi+0x5c>
		return FR_INT_ERR;
   a025e:	2002      	movs	r0, #2
   a0260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dj->clust = clst;
   a0262:	60e9      	str	r1, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a0264:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
   a0266:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a0268:	3b02      	subs	r3, #2
   a026a:	4299      	cmp	r1, r3
   a026c:	bf2f      	iteee	cs
   a026e:	2300      	movcs	r3, #0
	return clst * fs->csize + fs->database;
   a0270:	7883      	ldrbcc	r3, [r0, #2]
   a0272:	6a82      	ldrcc	r2, [r0, #40]	; 0x28
   a0274:	fb01 2303 	mlacc	r3, r1, r3, r2
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   a0278:	f3c4 110f 	ubfx	r1, r4, #4, #16
   a027c:	4419      	add	r1, r3
   a027e:	6129      	str	r1, [r5, #16]
   a0280:	e7c7      	b.n	a0212 <dir_sdi+0x36>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   a0282:	2001      	movs	r0, #1
}
   a0284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a0286:	bf00      	nop
   a0288:	0009ff29 	.word	0x0009ff29

000a028c <create_chain>:
{
   a028c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a0290:	b085      	sub	sp, #20
   a0292:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
   a0294:	9102      	str	r1, [sp, #8]
   a0296:	b9f9      	cbnz	r1, a02d8 <create_chain+0x4c>
		scl = fs->last_clust;			/* Get suggested start point */
   a0298:	68c7      	ldr	r7, [r0, #12]
   a029a:	6983      	ldr	r3, [r0, #24]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   a029c:	b33f      	cbz	r7, a02ee <create_chain+0x62>
   a029e:	429f      	cmp	r7, r3
   a02a0:	bf28      	it	cs
   a02a2:	2701      	movcs	r7, #1
   a02a4:	463c      	mov	r4, r7
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a02a6:	f105 0a30 	add.w	sl, r5, #48	; 0x30
		ncl++;							/* Next cluster */
   a02aa:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   a02ac:	429c      	cmp	r4, r3
   a02ae:	d320      	bcc.n	a02f2 <create_chain+0x66>
			if (ncl > scl) return 0;	/* No free cluster */
   a02b0:	2f01      	cmp	r7, #1
   a02b2:	f240 8140 	bls.w	a0536 <create_chain+0x2aa>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   a02b6:	2b02      	cmp	r3, #2
   a02b8:	d914      	bls.n	a02e4 <create_chain+0x58>
	switch (fs->fs_type) {
   a02ba:	782b      	ldrb	r3, [r5, #0]
			ncl = 2;
   a02bc:	2402      	movs	r4, #2
	switch (fs->fs_type) {
   a02be:	2b02      	cmp	r3, #2
   a02c0:	d01c      	beq.n	a02fc <create_chain+0x70>
   a02c2:	2b03      	cmp	r3, #3
   a02c4:	f000 80a5 	beq.w	a0412 <create_chain+0x186>
   a02c8:	2b01      	cmp	r3, #1
   a02ca:	d03a      	beq.n	a0342 <create_chain+0xb6>
   a02cc:	f04f 34ff 	mov.w	r4, #4294967295
}
   a02d0:	4620      	mov	r0, r4
   a02d2:	b005      	add	sp, #20
   a02d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   a02d8:	2901      	cmp	r1, #1
   a02da:	d903      	bls.n	a02e4 <create_chain+0x58>
   a02dc:	6983      	ldr	r3, [r0, #24]
   a02de:	4299      	cmp	r1, r3
   a02e0:	f0c0 812b 	bcc.w	a053a <create_chain+0x2ae>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   a02e4:	2401      	movs	r4, #1
}
   a02e6:	4620      	mov	r0, r4
   a02e8:	b005      	add	sp, #20
   a02ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!scl || scl >= fs->n_fatent) scl = 1;
   a02ee:	2701      	movs	r7, #1
   a02f0:	e7d8      	b.n	a02a4 <create_chain+0x18>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   a02f2:	2c01      	cmp	r4, #1
   a02f4:	d9f6      	bls.n	a02e4 <create_chain+0x58>
	switch (fs->fs_type) {
   a02f6:	782b      	ldrb	r3, [r5, #0]
   a02f8:	2b02      	cmp	r3, #2
   a02fa:	d1e2      	bne.n	a02c2 <create_chain+0x36>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   a02fc:	6a2e      	ldr	r6, [r5, #32]
	wsect = fs->winsect;
   a02fe:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   a0302:	eb06 2b14 	add.w	fp, r6, r4, lsr #8
	if (wsect != sector) {	/* Changed current window */
   a0306:	45cb      	cmp	fp, r9
   a0308:	d007      	beq.n	a031a <create_chain+0x8e>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a030a:	792b      	ldrb	r3, [r5, #4]
   a030c:	2b00      	cmp	r3, #0
   a030e:	f040 80d8 	bne.w	a04c2 <create_chain+0x236>
		if (sector) {
   a0312:	f1bb 0f00 	cmp.w	fp, #0
   a0316:	f040 8102 	bne.w	a051e <create_chain+0x292>
		p = &fs->win[clst * 2 % SS(fs)];
   a031a:	0062      	lsls	r2, r4, #1
   a031c:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
		return LD_WORD(p);
   a0320:	442a      	add	r2, r5
   a0322:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
   a0326:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   a032a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (cs == 0) break;				/* Found a free cluster */
   a032e:	2b00      	cmp	r3, #0
   a0330:	f000 8147 	beq.w	a05c2 <create_chain+0x336>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   a0334:	2b01      	cmp	r3, #1
   a0336:	d0d5      	beq.n	a02e4 <create_chain+0x58>
		if (ncl == scl) return 0;		/* No free cluster */
   a0338:	42a7      	cmp	r7, r4
   a033a:	f000 80fc 	beq.w	a0536 <create_chain+0x2aa>
   a033e:	69ab      	ldr	r3, [r5, #24]
   a0340:	e7b3      	b.n	a02aa <create_chain+0x1e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   a0342:	6a2a      	ldr	r2, [r5, #32]
	wsect = fs->winsect;
   a0344:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
		bc = (UINT)clst; bc += bc / 2;
   a0346:	eb04 0854 	add.w	r8, r4, r4, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   a034a:	eb02 2b58 	add.w	fp, r2, r8, lsr #9
	if (wsect != sector) {	/* Changed current window */
   a034e:	458b      	cmp	fp, r1
	wsect = fs->winsect;
   a0350:	9101      	str	r1, [sp, #4]
	if (wsect != sector) {	/* Changed current window */
   a0352:	d007      	beq.n	a0364 <create_chain+0xd8>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a0354:	792a      	ldrb	r2, [r5, #4]
   a0356:	bb2a      	cbnz	r2, a03a4 <create_chain+0x118>
		if (sector) {
   a0358:	f1bb 0f00 	cmp.w	fp, #0
   a035c:	d14a      	bne.n	a03f4 <create_chain+0x168>
   a035e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   a0360:	6a2a      	ldr	r2, [r5, #32]
   a0362:	9301      	str	r3, [sp, #4]
		wc = fs->win[bc % SS(fs)]; bc++;
   a0364:	f3c8 0308 	ubfx	r3, r8, #0, #9
   a0368:	442b      	add	r3, r5
   a036a:	f108 0801 	add.w	r8, r8, #1
   a036e:	f893 b030 	ldrb.w	fp, [r3, #48]	; 0x30
	if (wsect != sector) {	/* Changed current window */
   a0372:	9b01      	ldr	r3, [sp, #4]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   a0374:	eb02 2958 	add.w	r9, r2, r8, lsr #9
	if (wsect != sector) {	/* Changed current window */
   a0378:	4599      	cmp	r9, r3
   a037a:	d007      	beq.n	a038c <create_chain+0x100>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a037c:	792b      	ldrb	r3, [r5, #4]
   a037e:	2b00      	cmp	r3, #0
   a0380:	f040 80f3 	bne.w	a056a <create_chain+0x2de>
		if (sector) {
   a0384:	f1b9 0f00 	cmp.w	r9, #0
   a0388:	f040 80e3 	bne.w	a0552 <create_chain+0x2c6>
		wc |= fs->win[bc % SS(fs)] << 8;
   a038c:	f3c8 0808 	ubfx	r8, r8, #0, #9
   a0390:	44a8      	add	r8, r5
   a0392:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   a0396:	07e2      	lsls	r2, r4, #31
		wc |= fs->win[bc % SS(fs)] << 8;
   a0398:	ea4b 2303 	orr.w	r3, fp, r3, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   a039c:	f140 8135 	bpl.w	a060a <create_chain+0x37e>
   a03a0:	091b      	lsrs	r3, r3, #4
   a03a2:	e7c4      	b.n	a032e <create_chain+0xa2>
   a03a4:	460a      	mov	r2, r1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a03a6:	7868      	ldrb	r0, [r5, #1]
   a03a8:	4651      	mov	r1, sl
   a03aa:	4e9b      	ldr	r6, [pc, #620]	; (a0618 <create_chain+0x38c>)
   a03ac:	47b0      	blx	r6
   a03ae:	2800      	cmp	r0, #0
   a03b0:	d18c      	bne.n	a02cc <create_chain+0x40>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a03b2:	69eb      	ldr	r3, [r5, #28]
   a03b4:	6a2a      	ldr	r2, [r5, #32]
   a03b6:	9e01      	ldr	r6, [sp, #4]
   a03b8:	441a      	add	r2, r3
   a03ba:	4296      	cmp	r6, r2
			fs->wflag = 0;
   a03bc:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a03be:	d2cb      	bcs.n	a0358 <create_chain+0xcc>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a03c0:	f895 9003 	ldrb.w	r9, [r5, #3]
   a03c4:	f1b9 0f01 	cmp.w	r9, #1
   a03c8:	d9c6      	bls.n	a0358 <create_chain+0xcc>
   a03ca:	9401      	str	r4, [sp, #4]
   a03cc:	e000      	b.n	a03d0 <create_chain+0x144>
   a03ce:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
   a03d0:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a03d2:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   a03d6:	4632      	mov	r2, r6
   a03d8:	2301      	movs	r3, #1
   a03da:	4651      	mov	r1, sl
   a03dc:	7868      	ldrb	r0, [r5, #1]
   a03de:	4c8e      	ldr	r4, [pc, #568]	; (a0618 <create_chain+0x38c>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a03e0:	fa5f f989 	uxtb.w	r9, r9
					disk_write(fs->drv, fs->win, wsect, 1);
   a03e4:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a03e6:	f1b9 0f01 	cmp.w	r9, #1
   a03ea:	d1f0      	bne.n	a03ce <create_chain+0x142>
   a03ec:	9c01      	ldr	r4, [sp, #4]
		if (sector) {
   a03ee:	f1bb 0f00 	cmp.w	fp, #0
   a03f2:	d0b4      	beq.n	a035e <create_chain+0xd2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a03f4:	2301      	movs	r3, #1
   a03f6:	465a      	mov	r2, fp
   a03f8:	4651      	mov	r1, sl
   a03fa:	7868      	ldrb	r0, [r5, #1]
   a03fc:	4e87      	ldr	r6, [pc, #540]	; (a061c <create_chain+0x390>)
   a03fe:	47b0      	blx	r6
   a0400:	2800      	cmp	r0, #0
   a0402:	f47f af63 	bne.w	a02cc <create_chain+0x40>
			fs->winsect = sector;
   a0406:	f8c5 b02c 	str.w	fp, [r5, #44]	; 0x2c
   a040a:	f8cd b004 	str.w	fp, [sp, #4]
   a040e:	6a2a      	ldr	r2, [r5, #32]
   a0410:	e7a8      	b.n	a0364 <create_chain+0xd8>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   a0412:	6a2e      	ldr	r6, [r5, #32]
	wsect = fs->winsect;
   a0414:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   a0418:	eb06 1bd4 	add.w	fp, r6, r4, lsr #7
	if (wsect != sector) {	/* Changed current window */
   a041c:	45c3      	cmp	fp, r8
   a041e:	d004      	beq.n	a042a <create_chain+0x19e>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a0420:	792b      	ldrb	r3, [r5, #4]
   a0422:	b9bb      	cbnz	r3, a0454 <create_chain+0x1c8>
		if (sector) {
   a0424:	f1bb 0f00 	cmp.w	fp, #0
   a0428:	d13f      	bne.n	a04aa <create_chain+0x21e>
		p = &fs->win[clst * 4 % SS(fs)];
   a042a:	00a2      	lsls	r2, r4, #2
   a042c:	f402 72fe 	and.w	r2, r2, #508	; 0x1fc
   a0430:	f102 0130 	add.w	r1, r2, #48	; 0x30
   a0434:	4429      	add	r1, r5
		return LD_DWORD(p) & 0x0FFFFFFF;
   a0436:	788b      	ldrb	r3, [r1, #2]
   a0438:	442a      	add	r2, r5
   a043a:	78ce      	ldrb	r6, [r1, #3]
   a043c:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
   a0440:	041b      	lsls	r3, r3, #16
   a0442:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   a0446:	784a      	ldrb	r2, [r1, #1]
   a0448:	4303      	orrs	r3, r0
   a044a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   a044e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   a0452:	e76c      	b.n	a032e <create_chain+0xa2>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a0454:	2301      	movs	r3, #1
   a0456:	4642      	mov	r2, r8
   a0458:	4651      	mov	r1, sl
   a045a:	7868      	ldrb	r0, [r5, #1]
   a045c:	4e6e      	ldr	r6, [pc, #440]	; (a0618 <create_chain+0x38c>)
   a045e:	47b0      	blx	r6
   a0460:	2800      	cmp	r0, #0
   a0462:	f47f af33 	bne.w	a02cc <create_chain+0x40>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a0466:	69eb      	ldr	r3, [r5, #28]
   a0468:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
   a046a:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a046c:	441a      	add	r2, r3
   a046e:	4590      	cmp	r8, r2
   a0470:	d2d8      	bcs.n	a0424 <create_chain+0x198>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0472:	f895 9003 	ldrb.w	r9, [r5, #3]
   a0476:	f1b9 0f01 	cmp.w	r9, #1
   a047a:	d9d3      	bls.n	a0424 <create_chain+0x198>
   a047c:	465e      	mov	r6, fp
   a047e:	9401      	str	r4, [sp, #4]
   a0480:	e000      	b.n	a0484 <create_chain+0x1f8>
   a0482:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
   a0484:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0486:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   a048a:	4642      	mov	r2, r8
   a048c:	2301      	movs	r3, #1
   a048e:	4651      	mov	r1, sl
   a0490:	7868      	ldrb	r0, [r5, #1]
   a0492:	4c61      	ldr	r4, [pc, #388]	; (a0618 <create_chain+0x38c>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0494:	fa5f f989 	uxtb.w	r9, r9
					disk_write(fs->drv, fs->win, wsect, 1);
   a0498:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a049a:	f1b9 0f01 	cmp.w	r9, #1
   a049e:	d1f0      	bne.n	a0482 <create_chain+0x1f6>
   a04a0:	46b3      	mov	fp, r6
   a04a2:	9c01      	ldr	r4, [sp, #4]
		if (sector) {
   a04a4:	f1bb 0f00 	cmp.w	fp, #0
   a04a8:	d0bf      	beq.n	a042a <create_chain+0x19e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a04aa:	2301      	movs	r3, #1
   a04ac:	465a      	mov	r2, fp
   a04ae:	4651      	mov	r1, sl
   a04b0:	7868      	ldrb	r0, [r5, #1]
   a04b2:	4e5a      	ldr	r6, [pc, #360]	; (a061c <create_chain+0x390>)
   a04b4:	47b0      	blx	r6
   a04b6:	2800      	cmp	r0, #0
   a04b8:	f47f af08 	bne.w	a02cc <create_chain+0x40>
			fs->winsect = sector;
   a04bc:	f8c5 b02c 	str.w	fp, [r5, #44]	; 0x2c
   a04c0:	e7b3      	b.n	a042a <create_chain+0x19e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a04c2:	2301      	movs	r3, #1
   a04c4:	464a      	mov	r2, r9
   a04c6:	4651      	mov	r1, sl
   a04c8:	7868      	ldrb	r0, [r5, #1]
   a04ca:	4e53      	ldr	r6, [pc, #332]	; (a0618 <create_chain+0x38c>)
   a04cc:	47b0      	blx	r6
   a04ce:	2800      	cmp	r0, #0
   a04d0:	f47f aefc 	bne.w	a02cc <create_chain+0x40>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a04d4:	69eb      	ldr	r3, [r5, #28]
   a04d6:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
   a04d8:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a04da:	441a      	add	r2, r3
   a04dc:	4591      	cmp	r9, r2
   a04de:	f4bf af18 	bcs.w	a0312 <create_chain+0x86>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a04e2:	f895 8003 	ldrb.w	r8, [r5, #3]
   a04e6:	f1b8 0f01 	cmp.w	r8, #1
   a04ea:	f67f af12 	bls.w	a0312 <create_chain+0x86>
   a04ee:	465e      	mov	r6, fp
   a04f0:	9401      	str	r4, [sp, #4]
   a04f2:	e000      	b.n	a04f6 <create_chain+0x26a>
   a04f4:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
   a04f6:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a04f8:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   a04fc:	464a      	mov	r2, r9
   a04fe:	2301      	movs	r3, #1
   a0500:	4651      	mov	r1, sl
   a0502:	7868      	ldrb	r0, [r5, #1]
   a0504:	4c44      	ldr	r4, [pc, #272]	; (a0618 <create_chain+0x38c>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0506:	fa5f f888 	uxtb.w	r8, r8
					disk_write(fs->drv, fs->win, wsect, 1);
   a050a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a050c:	f1b8 0f01 	cmp.w	r8, #1
   a0510:	d1f0      	bne.n	a04f4 <create_chain+0x268>
   a0512:	46b3      	mov	fp, r6
   a0514:	9c01      	ldr	r4, [sp, #4]
		if (sector) {
   a0516:	f1bb 0f00 	cmp.w	fp, #0
   a051a:	f43f aefe 	beq.w	a031a <create_chain+0x8e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a051e:	2301      	movs	r3, #1
   a0520:	465a      	mov	r2, fp
   a0522:	4651      	mov	r1, sl
   a0524:	7868      	ldrb	r0, [r5, #1]
   a0526:	4e3d      	ldr	r6, [pc, #244]	; (a061c <create_chain+0x390>)
   a0528:	47b0      	blx	r6
   a052a:	2800      	cmp	r0, #0
   a052c:	f47f aece 	bne.w	a02cc <create_chain+0x40>
			fs->winsect = sector;
   a0530:	f8c5 b02c 	str.w	fp, [r5, #44]	; 0x2c
   a0534:	e6f1      	b.n	a031a <create_chain+0x8e>
		if (ncl == scl) return 0;		/* No free cluster */
   a0536:	2400      	movs	r4, #0
   a0538:	e6d5      	b.n	a02e6 <create_chain+0x5a>
   a053a:	4b39      	ldr	r3, [pc, #228]	; (a0620 <create_chain+0x394>)
   a053c:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   a053e:	2801      	cmp	r0, #1
   a0540:	4604      	mov	r4, r0
   a0542:	f67f aecf 	bls.w	a02e4 <create_chain+0x58>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   a0546:	69ab      	ldr	r3, [r5, #24]
   a0548:	4283      	cmp	r3, r0
   a054a:	f63f aecc 	bhi.w	a02e6 <create_chain+0x5a>
   a054e:	9f02      	ldr	r7, [sp, #8]
   a0550:	e6a8      	b.n	a02a4 <create_chain+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a0552:	2301      	movs	r3, #1
   a0554:	464a      	mov	r2, r9
   a0556:	4651      	mov	r1, sl
   a0558:	7868      	ldrb	r0, [r5, #1]
   a055a:	4e30      	ldr	r6, [pc, #192]	; (a061c <create_chain+0x390>)
   a055c:	47b0      	blx	r6
   a055e:	2800      	cmp	r0, #0
   a0560:	f47f aeb4 	bne.w	a02cc <create_chain+0x40>
			fs->winsect = sector;
   a0564:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
   a0568:	e710      	b.n	a038c <create_chain+0x100>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a056a:	2301      	movs	r3, #1
   a056c:	9a01      	ldr	r2, [sp, #4]
   a056e:	4651      	mov	r1, sl
   a0570:	7868      	ldrb	r0, [r5, #1]
   a0572:	4e29      	ldr	r6, [pc, #164]	; (a0618 <create_chain+0x38c>)
   a0574:	47b0      	blx	r6
   a0576:	2800      	cmp	r0, #0
   a0578:	f47f aea8 	bne.w	a02cc <create_chain+0x40>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a057c:	69eb      	ldr	r3, [r5, #28]
   a057e:	6a2a      	ldr	r2, [r5, #32]
   a0580:	9e01      	ldr	r6, [sp, #4]
   a0582:	441a      	add	r2, r3
   a0584:	42b2      	cmp	r2, r6
			fs->wflag = 0;
   a0586:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a0588:	f67f aefc 	bls.w	a0384 <create_chain+0xf8>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a058c:	78ea      	ldrb	r2, [r5, #3]
   a058e:	2a01      	cmp	r2, #1
   a0590:	f67f aef8 	bls.w	a0384 <create_chain+0xf8>
   a0594:	9701      	str	r7, [sp, #4]
   a0596:	9403      	str	r4, [sp, #12]
   a0598:	4617      	mov	r7, r2
   a059a:	e000      	b.n	a059e <create_chain+0x312>
   a059c:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
   a059e:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a05a0:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   a05a2:	4632      	mov	r2, r6
   a05a4:	2301      	movs	r3, #1
   a05a6:	4651      	mov	r1, sl
   a05a8:	7868      	ldrb	r0, [r5, #1]
   a05aa:	4c1b      	ldr	r4, [pc, #108]	; (a0618 <create_chain+0x38c>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a05ac:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
   a05ae:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a05b0:	2f01      	cmp	r7, #1
   a05b2:	d1f3      	bne.n	a059c <create_chain+0x310>
   a05b4:	9f01      	ldr	r7, [sp, #4]
   a05b6:	9c03      	ldr	r4, [sp, #12]
		if (sector) {
   a05b8:	f1b9 0f00 	cmp.w	r9, #0
   a05bc:	f43f aee6 	beq.w	a038c <create_chain+0x100>
   a05c0:	e7c7      	b.n	a0552 <create_chain+0x2c6>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   a05c2:	69ab      	ldr	r3, [r5, #24]
   a05c4:	42a3      	cmp	r3, r4
   a05c6:	f67f ae8d 	bls.w	a02e4 <create_chain+0x58>
   a05ca:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   a05ce:	4621      	mov	r1, r4
   a05d0:	4628      	mov	r0, r5
   a05d2:	4e14      	ldr	r6, [pc, #80]	; (a0624 <create_chain+0x398>)
   a05d4:	47b0      	blx	r6
	if (res == FR_OK && clst != 0) {
   a05d6:	b9d8      	cbnz	r0, a0610 <create_chain+0x384>
   a05d8:	9b02      	ldr	r3, [sp, #8]
   a05da:	b163      	cbz	r3, a05f6 <create_chain+0x36a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   a05dc:	2b01      	cmp	r3, #1
   a05de:	461a      	mov	r2, r3
   a05e0:	f67f ae80 	bls.w	a02e4 <create_chain+0x58>
   a05e4:	69ab      	ldr	r3, [r5, #24]
   a05e6:	429a      	cmp	r2, r3
   a05e8:	f4bf ae7c 	bcs.w	a02e4 <create_chain+0x58>
   a05ec:	4611      	mov	r1, r2
   a05ee:	4628      	mov	r0, r5
   a05f0:	4622      	mov	r2, r4
   a05f2:	47b0      	blx	r6
	if (res == FR_OK) {
   a05f4:	b960      	cbnz	r0, a0610 <create_chain+0x384>
		if (fs->free_clust != 0xFFFFFFFF) {
   a05f6:	692b      	ldr	r3, [r5, #16]
		fs->last_clust = ncl;			/* Update FSINFO */
   a05f8:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   a05fa:	1c59      	adds	r1, r3, #1
   a05fc:	f43f ae73 	beq.w	a02e6 <create_chain+0x5a>
			fs->fsi_flag = 1;
   a0600:	2201      	movs	r2, #1
			fs->free_clust--;
   a0602:	3b01      	subs	r3, #1
   a0604:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   a0606:	716a      	strb	r2, [r5, #5]
   a0608:	e66d      	b.n	a02e6 <create_chain+0x5a>
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   a060a:	f3c3 030b 	ubfx	r3, r3, #0, #12
   a060e:	e68e      	b.n	a032e <create_chain+0xa2>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   a0610:	2801      	cmp	r0, #1
   a0612:	f43f ae5b 	beq.w	a02cc <create_chain+0x40>
   a0616:	e665      	b.n	a02e4 <create_chain+0x58>
   a0618:	0009f3fd 	.word	0x0009f3fd
   a061c:	0009f389 	.word	0x0009f389
   a0620:	0009ff29 	.word	0x0009ff29
   a0624:	0009f915 	.word	0x0009f915

000a0628 <f_write.part.8>:
#if !_FS_READONLY
/*-----------------------------------------------------------------------*/
/* Write File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_write (
   a0628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a062c:	4692      	mov	sl, r2
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   a062e:	68c2      	ldr	r2, [r0, #12]
FRESULT f_write (
   a0630:	b089      	sub	sp, #36	; 0x24
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   a0632:	eb12 0f0a 	cmn.w	r2, sl
FRESULT f_write (
   a0636:	4607      	mov	r7, r0
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   a0638:	d30b      	bcc.n	a0652 <f_write.part.8+0x2a>
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
   a063a:	2000      	movs	r0, #0
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   a063c:	68bb      	ldr	r3, [r7, #8]
   a063e:	4293      	cmp	r3, r2
   a0640:	bf88      	it	hi
   a0642:	60fb      	strhi	r3, [r7, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   a0644:	79bb      	ldrb	r3, [r7, #6]
   a0646:	f043 0320 	orr.w	r3, r3, #32
   a064a:	71bb      	strb	r3, [r7, #6]
}
   a064c:	b009      	add	sp, #36	; 0x24
   a064e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for ( ;  btw;							/* Repeat until all data written */
   a0652:	f1ba 0f00 	cmp.w	sl, #0
   a0656:	d0f0      	beq.n	a063a <f_write.part.8+0x12>
   a0658:	4698      	mov	r8, r3
   a065a:	f100 0324 	add.w	r3, r0, #36	; 0x24
   a065e:	9303      	str	r3, [sp, #12]
   a0660:	425b      	negs	r3, r3
   a0662:	f003 0303 	and.w	r3, r3, #3
   a0666:	4689      	mov	r9, r1
   a0668:	4619      	mov	r1, r3
   a066a:	46c3      	mov	fp, r8
   a066c:	9305      	str	r3, [sp, #20]
   a066e:	f5c3 73fe 	rsb	r3, r3, #508	; 0x1fc
   a0672:	089b      	lsrs	r3, r3, #2
   a0674:	3301      	adds	r3, #1
   a0676:	9306      	str	r3, [sp, #24]
   a0678:	009b      	lsls	r3, r3, #2
   a067a:	9304      	str	r3, [sp, #16]
   a067c:	f5c1 7300 	rsb	r3, r1, #512	; 0x200
   a0680:	9307      	str	r3, [sp, #28]
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   a0682:	68bb      	ldr	r3, [r7, #8]
   a0684:	f3c3 0208 	ubfx	r2, r3, #0, #9
   a0688:	2a00      	cmp	r2, #0
   a068a:	f040 80af 	bne.w	a07ec <f_write.part.8+0x1c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   a068e:	6838      	ldr	r0, [r7, #0]
   a0690:	7886      	ldrb	r6, [r0, #2]
   a0692:	3e01      	subs	r6, #1
   a0694:	ea06 2653 	and.w	r6, r6, r3, lsr #9
			if (!csect) {					/* On the cluster boundary? */
   a0698:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   a069c:	d10e      	bne.n	a06bc <f_write.part.8+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
   a069e:	2b00      	cmp	r3, #0
   a06a0:	f040 8141 	bne.w	a0926 <f_write.part.8+0x2fe>
					clst = fp->sclust;		/* Follow from the origin */
   a06a4:	6939      	ldr	r1, [r7, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   a06a6:	2900      	cmp	r1, #0
   a06a8:	f000 8145 	beq.w	a0936 <f_write.part.8+0x30e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   a06ac:	2901      	cmp	r1, #1
   a06ae:	f000 816f 	beq.w	a0990 <f_write.part.8+0x368>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   a06b2:	1c4a      	adds	r2, r1, #1
   a06b4:	f000 812f 	beq.w	a0916 <f_write.part.8+0x2ee>
   a06b8:	6838      	ldr	r0, [r7, #0]
				fp->clust = clst;			/* Update current cluster */
   a06ba:	6179      	str	r1, [r7, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
   a06bc:	79b9      	ldrb	r1, [r7, #6]
   a06be:	064b      	lsls	r3, r1, #25
   a06c0:	f100 8112 	bmi.w	a08e8 <f_write.part.8+0x2c0>
	clst -= 2;
   a06c4:	697b      	ldr	r3, [r7, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a06c6:	6982      	ldr	r2, [r0, #24]
	clst -= 2;
   a06c8:	f1a3 0802 	sub.w	r8, r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a06cc:	3a02      	subs	r2, #2
   a06ce:	4590      	cmp	r8, r2
   a06d0:	f080 8159 	bcs.w	a0986 <f_write.part.8+0x35e>
	return clst * fs->csize + fs->database;
   a06d4:	7883      	ldrb	r3, [r0, #2]
   a06d6:	6a82      	ldr	r2, [r0, #40]	; 0x28
   a06d8:	fb08 f803 	mul.w	r8, r8, r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   a06dc:	eb18 0502 	adds.w	r5, r8, r2
	return clst * fs->csize + fs->database;
   a06e0:	9202      	str	r2, [sp, #8]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   a06e2:	f000 8150 	beq.w	a0986 <f_write.part.8+0x35e>
			sect += csect;
   a06e6:	19aa      	adds	r2, r5, r6
			if (cc) {						/* Write maximum contiguous sectors directly */
   a06e8:	ea5f 245a 	movs.w	r4, sl, lsr #9
			sect += csect;
   a06ec:	9201      	str	r2, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
   a06ee:	d071      	beq.n	a07d4 <f_write.part.8+0x1ac>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   a06f0:	1932      	adds	r2, r6, r4
   a06f2:	4293      	cmp	r3, r2
					cc = fp->fs->csize - csect;
   a06f4:	bf38      	it	cc
   a06f6:	1b9c      	subcc	r4, r3, r6
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   a06f8:	7840      	ldrb	r0, [r0, #1]
   a06fa:	b2e3      	uxtb	r3, r4
   a06fc:	9a01      	ldr	r2, [sp, #4]
   a06fe:	4649      	mov	r1, r9
   a0700:	4da6      	ldr	r5, [pc, #664]	; (a099c <f_write.part.8+0x374>)
   a0702:	47a8      	blx	r5
   a0704:	2800      	cmp	r0, #0
   a0706:	f040 8106 	bne.w	a0916 <f_write.part.8+0x2ee>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   a070a:	69b9      	ldr	r1, [r7, #24]
   a070c:	9b01      	ldr	r3, [sp, #4]
   a070e:	1acd      	subs	r5, r1, r3
   a0710:	42ac      	cmp	r4, r5
   a0712:	d95b      	bls.n	a07cc <f_write.part.8+0x1a4>
   a0714:	9b02      	ldr	r3, [sp, #8]
   a0716:	1b89      	subs	r1, r1, r6
   a0718:	1ac9      	subs	r1, r1, r3
   a071a:	eba1 0108 	sub.w	r1, r1, r8
   a071e:	0249      	lsls	r1, r1, #9
   a0720:	eb09 0001 	add.w	r0, r9, r1
   a0724:	f107 0228 	add.w	r2, r7, #40	; 0x28
   a0728:	4282      	cmp	r2, r0
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   a072a:	eb09 2345 	add.w	r3, r9, r5, lsl #9
   a072e:	d905      	bls.n	a073c <f_write.part.8+0x114>
   a0730:	1d0a      	adds	r2, r1, #4
   a0732:	9803      	ldr	r0, [sp, #12]
   a0734:	444a      	add	r2, r9
   a0736:	4290      	cmp	r0, r2
   a0738:	f0c0 8114 	bcc.w	a0964 <f_write.part.8+0x33c>
   a073c:	9805      	ldr	r0, [sp, #20]
   a073e:	2800      	cmp	r0, #0
   a0740:	f000 810b 	beq.w	a095a <f_write.part.8+0x332>
		*d++ = *s++;
   a0744:	781a      	ldrb	r2, [r3, #0]
   a0746:	2801      	cmp	r0, #1
   a0748:	f107 0625 	add.w	r6, r7, #37	; 0x25
   a074c:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
   a0750:	f103 0e01 	add.w	lr, r3, #1
   a0754:	f000 8114 	beq.w	a0980 <f_write.part.8+0x358>
   a0758:	785a      	ldrb	r2, [r3, #1]
   a075a:	2803      	cmp	r0, #3
   a075c:	f107 0626 	add.w	r6, r7, #38	; 0x26
   a0760:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
   a0764:	f103 0e02 	add.w	lr, r3, #2
   a0768:	f040 8107 	bne.w	a097a <f_write.part.8+0x352>
   a076c:	f240 15fd 	movw	r5, #509	; 0x1fd
   a0770:	789a      	ldrb	r2, [r3, #2]
   a0772:	f103 0e03 	add.w	lr, r3, #3
   a0776:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
   a077a:	f107 0627 	add.w	r6, r7, #39	; 0x27
   a077e:	4603      	mov	r3, r0
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   a0780:	2200      	movs	r2, #0
   a0782:	440b      	add	r3, r1
   a0784:	3024      	adds	r0, #36	; 0x24
   a0786:	f8dd c018 	ldr.w	ip, [sp, #24]
   a078a:	444b      	add	r3, r9
   a078c:	1839      	adds	r1, r7, r0
		*d++ = *s++;
   a078e:	f853 0b04 	ldr.w	r0, [r3], #4
   a0792:	3201      	adds	r2, #1
   a0794:	4594      	cmp	ip, r2
   a0796:	f841 0b04 	str.w	r0, [r1], #4
   a079a:	d8f8      	bhi.n	a078e <f_write.part.8+0x166>
   a079c:	9804      	ldr	r0, [sp, #16]
   a079e:	9907      	ldr	r1, [sp, #28]
   a07a0:	1a2d      	subs	r5, r5, r0
   a07a2:	4288      	cmp	r0, r1
   a07a4:	eb06 0300 	add.w	r3, r6, r0
   a07a8:	eb0e 0200 	add.w	r2, lr, r0
   a07ac:	d00a      	beq.n	a07c4 <f_write.part.8+0x19c>
   a07ae:	f81e 1000 	ldrb.w	r1, [lr, r0]
	while (cnt--)
   a07b2:	2d01      	cmp	r5, #1
		*d++ = *s++;
   a07b4:	5431      	strb	r1, [r6, r0]
	while (cnt--)
   a07b6:	d005      	beq.n	a07c4 <f_write.part.8+0x19c>
		*d++ = *s++;
   a07b8:	7851      	ldrb	r1, [r2, #1]
	while (cnt--)
   a07ba:	2d02      	cmp	r5, #2
		*d++ = *s++;
   a07bc:	7059      	strb	r1, [r3, #1]
	while (cnt--)
   a07be:	d001      	beq.n	a07c4 <f_write.part.8+0x19c>
		*d++ = *s++;
   a07c0:	7892      	ldrb	r2, [r2, #2]
   a07c2:	709a      	strb	r2, [r3, #2]
					fp->flag &= ~FA__DIRTY;
   a07c4:	79bb      	ldrb	r3, [r7, #6]
   a07c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   a07ca:	71bb      	strb	r3, [r7, #6]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   a07cc:	0263      	lsls	r3, r4, #9
   a07ce:	4499      	add	r9, r3
   a07d0:	68ba      	ldr	r2, [r7, #8]
   a07d2:	e076      	b.n	a08c2 <f_write.part.8+0x29a>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
   a07d4:	69bb      	ldr	r3, [r7, #24]
   a07d6:	429a      	cmp	r2, r3
				if (fp->fptr < fp->fsize &&
   a07d8:	68ba      	ldr	r2, [r7, #8]
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
   a07da:	d003      	beq.n	a07e4 <f_write.part.8+0x1bc>
				if (fp->fptr < fp->fsize &&
   a07dc:	68fb      	ldr	r3, [r7, #12]
   a07de:	429a      	cmp	r2, r3
   a07e0:	f0c0 80b1 	bcc.w	a0946 <f_write.part.8+0x31e>
			fp->dsect = sect;
   a07e4:	9b01      	ldr	r3, [sp, #4]
   a07e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
   a07ea:	61bb      	str	r3, [r7, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   a07ec:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
   a07f0:	f102 0124 	add.w	r1, r2, #36	; 0x24
   a07f4:	3228      	adds	r2, #40	; 0x28
   a07f6:	4553      	cmp	r3, sl
   a07f8:	443a      	add	r2, r7
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   a07fa:	eb07 0001 	add.w	r0, r7, r1
   a07fe:	f109 0404 	add.w	r4, r9, #4
   a0802:	bf28      	it	cs
   a0804:	4653      	movcs	r3, sl
   a0806:	42a0      	cmp	r0, r4
   a0808:	bf38      	it	cc
   a080a:	4591      	cmpcc	r9, r2
	while (cnt--)
   a080c:	f103 3eff 	add.w	lr, r3, #4294967295
   a0810:	d377      	bcc.n	a0902 <f_write.part.8+0x2da>
   a0812:	2b0b      	cmp	r3, #11
   a0814:	d975      	bls.n	a0902 <f_write.part.8+0x2da>
   a0816:	f1c9 0200 	rsb	r2, r9, #0
   a081a:	f012 0203 	ands.w	r2, r2, #3
   a081e:	d05f      	beq.n	a08e0 <f_write.part.8+0x2b8>
		*d++ = *s++;
   a0820:	f899 5000 	ldrb.w	r5, [r9]
   a0824:	2a01      	cmp	r2, #1
   a0826:	547d      	strb	r5, [r7, r1]
   a0828:	f100 0401 	add.w	r4, r0, #1
   a082c:	f109 0501 	add.w	r5, r9, #1
	while (cnt--)
   a0830:	f1a3 0602 	sub.w	r6, r3, #2
   a0834:	d011      	beq.n	a085a <f_write.part.8+0x232>
		*d++ = *s++;
   a0836:	f899 5001 	ldrb.w	r5, [r9, #1]
   a083a:	2a03      	cmp	r2, #3
   a083c:	7045      	strb	r5, [r0, #1]
   a083e:	f100 0402 	add.w	r4, r0, #2
   a0842:	f109 0502 	add.w	r5, r9, #2
	while (cnt--)
   a0846:	f1a3 0603 	sub.w	r6, r3, #3
   a084a:	d106      	bne.n	a085a <f_write.part.8+0x232>
		*d++ = *s++;
   a084c:	f899 5002 	ldrb.w	r5, [r9, #2]
   a0850:	1cc4      	adds	r4, r0, #3
   a0852:	7085      	strb	r5, [r0, #2]
	while (cnt--)
   a0854:	1f1e      	subs	r6, r3, #4
		*d++ = *s++;
   a0856:	f109 0503 	add.w	r5, r9, #3
   a085a:	eba3 0802 	sub.w	r8, r3, r2
   a085e:	f1a8 0004 	sub.w	r0, r8, #4
   a0862:	0880      	lsrs	r0, r0, #2
   a0864:	ebae 0e02 	sub.w	lr, lr, r2
   a0868:	3001      	adds	r0, #1
   a086a:	f1be 0f02 	cmp.w	lr, #2
   a086e:	ea4f 0c80 	mov.w	ip, r0, lsl #2
   a0872:	d917      	bls.n	a08a4 <f_write.part.8+0x27c>
   a0874:	4411      	add	r1, r2
   a0876:	f8cd 9004 	str.w	r9, [sp, #4]
   a087a:	444a      	add	r2, r9
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   a087c:	f04f 0e00 	mov.w	lr, #0
   a0880:	4681      	mov	r9, r0
   a0882:	4439      	add	r1, r7
		*d++ = *s++;
   a0884:	f852 0b04 	ldr.w	r0, [r2], #4
   a0888:	f10e 0e01 	add.w	lr, lr, #1
   a088c:	45f1      	cmp	r9, lr
   a088e:	f841 0b04 	str.w	r0, [r1], #4
   a0892:	d8f7      	bhi.n	a0884 <f_write.part.8+0x25c>
   a0894:	45e0      	cmp	r8, ip
   a0896:	f8dd 9004 	ldr.w	r9, [sp, #4]
   a089a:	4464      	add	r4, ip
   a089c:	4465      	add	r5, ip
   a089e:	eba6 060c 	sub.w	r6, r6, ip
   a08a2:	d01b      	beq.n	a08dc <f_write.part.8+0x2b4>
   a08a4:	782a      	ldrb	r2, [r5, #0]
   a08a6:	7022      	strb	r2, [r4, #0]
	while (cnt--)
   a08a8:	b1c6      	cbz	r6, a08dc <f_write.part.8+0x2b4>
		*d++ = *s++;
   a08aa:	786a      	ldrb	r2, [r5, #1]
	while (cnt--)
   a08ac:	2e01      	cmp	r6, #1
		*d++ = *s++;
   a08ae:	7062      	strb	r2, [r4, #1]
	while (cnt--)
   a08b0:	d014      	beq.n	a08dc <f_write.part.8+0x2b4>
		*d++ = *s++;
   a08b2:	78aa      	ldrb	r2, [r5, #2]
   a08b4:	4499      	add	r9, r3
   a08b6:	70a2      	strb	r2, [r4, #2]
		fp->flag |= FA__DIRTY;
   a08b8:	79b9      	ldrb	r1, [r7, #6]
   a08ba:	68ba      	ldr	r2, [r7, #8]
   a08bc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   a08c0:	71b9      	strb	r1, [r7, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   a08c2:	441a      	add	r2, r3
   a08c4:	60ba      	str	r2, [r7, #8]
   a08c6:	f8db 2000 	ldr.w	r2, [fp]
	for ( ;  btw;							/* Repeat until all data written */
   a08ca:	ebba 0a03 	subs.w	sl, sl, r3
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   a08ce:	441a      	add	r2, r3
   a08d0:	f8cb 2000 	str.w	r2, [fp]
	for ( ;  btw;							/* Repeat until all data written */
   a08d4:	f47f aed5 	bne.w	a0682 <f_write.part.8+0x5a>
   a08d8:	68fa      	ldr	r2, [r7, #12]
   a08da:	e6ae      	b.n	a063a <f_write.part.8+0x12>
   a08dc:	4499      	add	r9, r3
   a08de:	e7eb      	b.n	a08b8 <f_write.part.8+0x290>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   a08e0:	4604      	mov	r4, r0
	while (cnt--)
   a08e2:	4676      	mov	r6, lr
   a08e4:	464d      	mov	r5, r9
   a08e6:	e7b8      	b.n	a085a <f_write.part.8+0x232>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   a08e8:	7840      	ldrb	r0, [r0, #1]
   a08ea:	2301      	movs	r3, #1
   a08ec:	69ba      	ldr	r2, [r7, #24]
   a08ee:	9903      	ldr	r1, [sp, #12]
   a08f0:	4c2a      	ldr	r4, [pc, #168]	; (a099c <f_write.part.8+0x374>)
   a08f2:	47a0      	blx	r4
   a08f4:	b978      	cbnz	r0, a0916 <f_write.part.8+0x2ee>
				fp->flag &= ~FA__DIRTY;
   a08f6:	79b9      	ldrb	r1, [r7, #6]
   a08f8:	6838      	ldr	r0, [r7, #0]
   a08fa:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   a08fe:	71b9      	strb	r1, [r7, #6]
   a0900:	e6e0      	b.n	a06c4 <f_write.part.8+0x9c>
	while (cnt--)
   a0902:	464a      	mov	r2, r9
   a0904:	3801      	subs	r0, #1
   a0906:	4499      	add	r9, r3
		*d++ = *s++;
   a0908:	f812 1b01 	ldrb.w	r1, [r2], #1
	while (cnt--)
   a090c:	454a      	cmp	r2, r9
		*d++ = *s++;
   a090e:	f800 1f01 	strb.w	r1, [r0, #1]!
	while (cnt--)
   a0912:	d1f9      	bne.n	a0908 <f_write.part.8+0x2e0>
   a0914:	e7d0      	b.n	a08b8 <f_write.part.8+0x290>
						ABORT(fp->fs, FR_DISK_ERR);
   a0916:	2001      	movs	r0, #1
   a0918:	79bb      	ldrb	r3, [r7, #6]
   a091a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   a091e:	71bb      	strb	r3, [r7, #6]
}
   a0920:	b009      	add	sp, #36	; 0x24
   a0922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   a0926:	6979      	ldr	r1, [r7, #20]
   a0928:	4b1d      	ldr	r3, [pc, #116]	; (a09a0 <f_write.part.8+0x378>)
   a092a:	4798      	blx	r3
   a092c:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   a092e:	2900      	cmp	r1, #0
   a0930:	f47f aebc 	bne.w	a06ac <f_write.part.8+0x84>
   a0934:	e7d0      	b.n	a08d8 <f_write.part.8+0x2b0>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   a0936:	4b1a      	ldr	r3, [pc, #104]	; (a09a0 <f_write.part.8+0x378>)
   a0938:	4798      	blx	r3
   a093a:	4601      	mov	r1, r0
   a093c:	6138      	str	r0, [r7, #16]
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   a093e:	2900      	cmp	r1, #0
   a0940:	f47f aeb4 	bne.w	a06ac <f_write.part.8+0x84>
   a0944:	e7c8      	b.n	a08d8 <f_write.part.8+0x2b0>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
   a0946:	7840      	ldrb	r0, [r0, #1]
   a0948:	2301      	movs	r3, #1
   a094a:	9a01      	ldr	r2, [sp, #4]
   a094c:	9903      	ldr	r1, [sp, #12]
   a094e:	4c15      	ldr	r4, [pc, #84]	; (a09a4 <f_write.part.8+0x37c>)
   a0950:	47a0      	blx	r4
				if (fp->fptr < fp->fsize &&
   a0952:	2800      	cmp	r0, #0
   a0954:	d1df      	bne.n	a0916 <f_write.part.8+0x2ee>
   a0956:	68ba      	ldr	r2, [r7, #8]
   a0958:	e744      	b.n	a07e4 <f_write.part.8+0x1bc>
	const BYTE *s = (const BYTE*)src;
   a095a:	469e      	mov	lr, r3
	BYTE *d = (BYTE*)dst;
   a095c:	9e03      	ldr	r6, [sp, #12]
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   a095e:	f44f 7500 	mov.w	r5, #512	; 0x200
   a0962:	e70c      	b.n	a077e <f_write.part.8+0x156>
   a0964:	f107 0223 	add.w	r2, r7, #35	; 0x23
   a0968:	f503 7000 	add.w	r0, r3, #512	; 0x200
		*d++ = *s++;
   a096c:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
   a0970:	4283      	cmp	r3, r0
		*d++ = *s++;
   a0972:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
   a0976:	d1f9      	bne.n	a096c <f_write.part.8+0x344>
   a0978:	e724      	b.n	a07c4 <f_write.part.8+0x19c>
		*d++ = *s++;
   a097a:	f44f 75ff 	mov.w	r5, #510	; 0x1fe
   a097e:	e6fe      	b.n	a077e <f_write.part.8+0x156>
   a0980:	f240 15ff 	movw	r5, #511	; 0x1ff
   a0984:	e6fb      	b.n	a077e <f_write.part.8+0x156>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   a0986:	f061 017f 	orn	r1, r1, #127	; 0x7f
   a098a:	71b9      	strb	r1, [r7, #6]
   a098c:	2002      	movs	r0, #2
   a098e:	e65d      	b.n	a064c <f_write.part.8+0x24>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   a0990:	79bb      	ldrb	r3, [r7, #6]
   a0992:	2002      	movs	r0, #2
   a0994:	f063 037f 	orn	r3, r3, #127	; 0x7f
   a0998:	71bb      	strb	r3, [r7, #6]
   a099a:	e657      	b.n	a064c <f_write.part.8+0x24>
   a099c:	0009f3fd 	.word	0x0009f3fd
   a09a0:	000a028d 	.word	0x000a028d
   a09a4:	0009f389 	.word	0x0009f389

000a09a8 <dir_next.constprop.10>:
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
   a09a8:	b570      	push	{r4, r5, r6, lr}
	i = dj->index + 1;
   a09aa:	88c4      	ldrh	r4, [r0, #6]
   a09ac:	3401      	adds	r4, #1
   a09ae:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   a09b0:	b90c      	cbnz	r4, a09b6 <dir_next.constprop.10+0xe>
		return FR_NO_FILE;
   a09b2:	2004      	movs	r0, #4
   a09b4:	bd70      	pop	{r4, r5, r6, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   a09b6:	6903      	ldr	r3, [r0, #16]
   a09b8:	2b00      	cmp	r3, #0
   a09ba:	d0fa      	beq.n	a09b2 <dir_next.constprop.10+0xa>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   a09bc:	f014 060f 	ands.w	r6, r4, #15
   a09c0:	4605      	mov	r5, r0
   a09c2:	d007      	beq.n	a09d4 <dir_next.constprop.10+0x2c>
   a09c4:	6803      	ldr	r3, [r0, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   a09c6:	3330      	adds	r3, #48	; 0x30
   a09c8:	eb03 1346 	add.w	r3, r3, r6, lsl #5
   a09cc:	616b      	str	r3, [r5, #20]
	dj->index = i;
   a09ce:	80ec      	strh	r4, [r5, #6]
	return FR_OK;
   a09d0:	2000      	movs	r0, #0
   a09d2:	bd70      	pop	{r4, r5, r6, pc}
		if (dj->clust == 0) {	/* Static table */
   a09d4:	68c1      	ldr	r1, [r0, #12]
		dj->sect++;					/* Next sector */
   a09d6:	3301      	adds	r3, #1
   a09d8:	6103      	str	r3, [r0, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   a09da:	6803      	ldr	r3, [r0, #0]
		if (dj->clust == 0) {	/* Static table */
   a09dc:	b159      	cbz	r1, a09f6 <dir_next.constprop.10+0x4e>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   a09de:	789a      	ldrb	r2, [r3, #2]
   a09e0:	3a01      	subs	r2, #1
   a09e2:	ea12 1214 	ands.w	r2, r2, r4, lsr #4
   a09e6:	d1ee      	bne.n	a09c6 <dir_next.constprop.10+0x1e>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   a09e8:	2901      	cmp	r1, #1
   a09ea:	d902      	bls.n	a09f2 <dir_next.constprop.10+0x4a>
   a09ec:	699a      	ldr	r2, [r3, #24]
   a09ee:	4291      	cmp	r1, r2
   a09f0:	d305      	bcc.n	a09fe <dir_next.constprop.10+0x56>
				if (clst <= 1) return FR_INT_ERR;
   a09f2:	2002      	movs	r0, #2
   a09f4:	bd70      	pop	{r4, r5, r6, pc}
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   a09f6:	891a      	ldrh	r2, [r3, #8]
   a09f8:	42a2      	cmp	r2, r4
   a09fa:	d9da      	bls.n	a09b2 <dir_next.constprop.10+0xa>
   a09fc:	e7e3      	b.n	a09c6 <dir_next.constprop.10+0x1e>
   a09fe:	4618      	mov	r0, r3
   a0a00:	4b0c      	ldr	r3, [pc, #48]	; (a0a34 <dir_next.constprop.10+0x8c>)
   a0a02:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
   a0a04:	2801      	cmp	r0, #1
   a0a06:	d9f4      	bls.n	a09f2 <dir_next.constprop.10+0x4a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   a0a08:	1c43      	adds	r3, r0, #1
   a0a0a:	d010      	beq.n	a0a2e <dir_next.constprop.10+0x86>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   a0a0c:	682b      	ldr	r3, [r5, #0]
   a0a0e:	699a      	ldr	r2, [r3, #24]
   a0a10:	4290      	cmp	r0, r2
   a0a12:	d2ce      	bcs.n	a09b2 <dir_next.constprop.10+0xa>
				dj->clust = clst;				/* Initialize data for new cluster */
   a0a14:	60e8      	str	r0, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a0a16:	699a      	ldr	r2, [r3, #24]
	clst -= 2;
   a0a18:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a0a1a:	3a02      	subs	r2, #2
   a0a1c:	4290      	cmp	r0, r2
   a0a1e:	bf2f      	iteee	cs
   a0a20:	2000      	movcs	r0, #0
	return clst * fs->csize + fs->database;
   a0a22:	789a      	ldrbcc	r2, [r3, #2]
   a0a24:	6a99      	ldrcc	r1, [r3, #40]	; 0x28
   a0a26:	fb00 1002 	mlacc	r0, r0, r2, r1
				dj->sect = clust2sect(dj->fs, clst);
   a0a2a:	6128      	str	r0, [r5, #16]
   a0a2c:	e7cb      	b.n	a09c6 <dir_next.constprop.10+0x1e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   a0a2e:	2001      	movs	r0, #1
}
   a0a30:	bd70      	pop	{r4, r5, r6, pc}
   a0a32:	bf00      	nop
   a0a34:	0009ff29 	.word	0x0009ff29

000a0a38 <dir_find.part.5>:
FRESULT dir_find (
   a0a38:	23ff      	movs	r3, #255	; 0xff
   a0a3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a0a3e:	4606      	mov	r6, r0
   a0a40:	4699      	mov	r9, r3
   a0a42:	b085      	sub	sp, #20
   a0a44:	6804      	ldr	r4, [r0, #0]
   a0a46:	f8d0 8010 	ldr.w	r8, [r0, #16]
   a0a4a:	9301      	str	r3, [sp, #4]
	wsect = fs->winsect;
   a0a4c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   a0a4e:	4545      	cmp	r5, r8
   a0a50:	d010      	beq.n	a0a74 <dir_find.part.5+0x3c>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a0a52:	7923      	ldrb	r3, [r4, #4]
   a0a54:	bb3b      	cbnz	r3, a0aa6 <dir_find.part.5+0x6e>
		if (sector) {
   a0a56:	f1b8 0f00 	cmp.w	r8, #0
   a0a5a:	d00b      	beq.n	a0a74 <dir_find.part.5+0x3c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a0a5c:	2301      	movs	r3, #1
   a0a5e:	4642      	mov	r2, r8
   a0a60:	f104 0130 	add.w	r1, r4, #48	; 0x30
   a0a64:	7860      	ldrb	r0, [r4, #1]
   a0a66:	4dae      	ldr	r5, [pc, #696]	; (a0d20 <dir_find.part.5+0x2e8>)
   a0a68:	47a8      	blx	r5
   a0a6a:	2800      	cmp	r0, #0
   a0a6c:	f040 80df 	bne.w	a0c2e <dir_find.part.5+0x1f6>
			fs->winsect = sector;
   a0a70:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   a0a74:	6974      	ldr	r4, [r6, #20]
		c = dir[DIR_Name];
   a0a76:	7823      	ldrb	r3, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   a0a78:	b18b      	cbz	r3, a0a9e <dir_find.part.5+0x66>
		a = dir[DIR_Attr] & AM_MASK;
   a0a7a:	7ae2      	ldrb	r2, [r4, #11]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   a0a7c:	2be5      	cmp	r3, #229	; 0xe5
		a = dir[DIR_Attr] & AM_MASK;
   a0a7e:	f002 013f 	and.w	r1, r2, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   a0a82:	d004      	beq.n	a0a8e <dir_find.part.5+0x56>
   a0a84:	0712      	lsls	r2, r2, #28
   a0a86:	d530      	bpl.n	a0aea <dir_find.part.5+0xb2>
   a0a88:	290f      	cmp	r1, #15
   a0a8a:	f000 80d4 	beq.w	a0c36 <dir_find.part.5+0x1fe>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   a0a8e:	f04f 09ff 	mov.w	r9, #255	; 0xff
	i = dj->index + 1;
   a0a92:	88f5      	ldrh	r5, [r6, #6]
   a0a94:	3501      	adds	r5, #1
   a0a96:	b2ad      	uxth	r5, r5
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   a0a98:	2d00      	cmp	r5, #0
   a0a9a:	f040 80b7 	bne.w	a0c0c <dir_find.part.5+0x1d4>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   a0a9e:	2004      	movs	r0, #4
}
   a0aa0:	b005      	add	sp, #20
   a0aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a0aa6:	f104 0a30 	add.w	sl, r4, #48	; 0x30
   a0aaa:	4651      	mov	r1, sl
   a0aac:	2301      	movs	r3, #1
   a0aae:	462a      	mov	r2, r5
   a0ab0:	7860      	ldrb	r0, [r4, #1]
   a0ab2:	f8df b274 	ldr.w	fp, [pc, #628]	; a0d28 <dir_find.part.5+0x2f0>
   a0ab6:	47d8      	blx	fp
   a0ab8:	2800      	cmp	r0, #0
   a0aba:	f040 80b8 	bne.w	a0c2e <dir_find.part.5+0x1f6>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a0abe:	69e3      	ldr	r3, [r4, #28]
   a0ac0:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   a0ac2:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a0ac4:	441a      	add	r2, r3
   a0ac6:	4295      	cmp	r5, r2
   a0ac8:	d2c5      	bcs.n	a0a56 <dir_find.part.5+0x1e>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0aca:	78e7      	ldrb	r7, [r4, #3]
   a0acc:	2f01      	cmp	r7, #1
   a0ace:	d801      	bhi.n	a0ad4 <dir_find.part.5+0x9c>
   a0ad0:	e7c1      	b.n	a0a56 <dir_find.part.5+0x1e>
   a0ad2:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   a0ad4:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0ad6:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   a0ad8:	462a      	mov	r2, r5
   a0ada:	2301      	movs	r3, #1
   a0adc:	4651      	mov	r1, sl
   a0ade:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0ae0:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
   a0ae2:	47d8      	blx	fp
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a0ae4:	2f01      	cmp	r7, #1
   a0ae6:	d1f4      	bne.n	a0ad2 <dir_find.part.5+0x9a>
   a0ae8:	e7b5      	b.n	a0a56 <dir_find.part.5+0x1e>
			if (a == AM_LFN) {			/* An LFN entry is found */
   a0aea:	290f      	cmp	r1, #15
   a0aec:	f000 80a3 	beq.w	a0c36 <dir_find.part.5+0x1fe>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   a0af0:	f1b9 0f00 	cmp.w	r9, #0
   a0af4:	d147      	bne.n	a0b86 <dir_find.part.5+0x14e>
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   a0af6:	01da      	lsls	r2, r3, #7
   a0af8:	7861      	ldrb	r1, [r4, #1]
   a0afa:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
   a0afe:	185a      	adds	r2, r3, r1
   a0b00:	f3c2 0346 	ubfx	r3, r2, #1, #7
   a0b04:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   a0b08:	78a2      	ldrb	r2, [r4, #2]
   a0b0a:	b2db      	uxtb	r3, r3
   a0b0c:	441a      	add	r2, r3
   a0b0e:	f3c2 0346 	ubfx	r3, r2, #1, #7
   a0b12:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   a0b16:	78e2      	ldrb	r2, [r4, #3]
   a0b18:	b2db      	uxtb	r3, r3
   a0b1a:	441a      	add	r2, r3
   a0b1c:	f3c2 0346 	ubfx	r3, r2, #1, #7
   a0b20:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   a0b24:	7922      	ldrb	r2, [r4, #4]
   a0b26:	b2db      	uxtb	r3, r3
   a0b28:	441a      	add	r2, r3
   a0b2a:	f3c2 0346 	ubfx	r3, r2, #1, #7
   a0b2e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   a0b32:	7962      	ldrb	r2, [r4, #5]
   a0b34:	b2db      	uxtb	r3, r3
   a0b36:	441a      	add	r2, r3
   a0b38:	f3c2 0346 	ubfx	r3, r2, #1, #7
   a0b3c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   a0b40:	79a2      	ldrb	r2, [r4, #6]
   a0b42:	b2db      	uxtb	r3, r3
   a0b44:	441a      	add	r2, r3
   a0b46:	f3c2 0346 	ubfx	r3, r2, #1, #7
   a0b4a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   a0b4e:	79e2      	ldrb	r2, [r4, #7]
   a0b50:	b2db      	uxtb	r3, r3
   a0b52:	441a      	add	r2, r3
   a0b54:	f3c2 0346 	ubfx	r3, r2, #1, #7
   a0b58:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   a0b5c:	7a22      	ldrb	r2, [r4, #8]
   a0b5e:	b2db      	uxtb	r3, r3
   a0b60:	441a      	add	r2, r3
   a0b62:	f3c2 0346 	ubfx	r3, r2, #1, #7
   a0b66:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   a0b6a:	7a62      	ldrb	r2, [r4, #9]
   a0b6c:	b2db      	uxtb	r3, r3
   a0b6e:	4413      	add	r3, r2
   a0b70:	f3c3 0246 	ubfx	r2, r3, #1, #7
   a0b74:	7aa1      	ldrb	r1, [r4, #10]
   a0b76:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
   a0b7a:	440b      	add	r3, r1
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   a0b7c:	9a01      	ldr	r2, [sp, #4]
   a0b7e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   a0b82:	4293      	cmp	r3, r2
   a0b84:	d03e      	beq.n	a0c04 <dir_find.part.5+0x1cc>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   a0b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   a0b8a:	69b3      	ldr	r3, [r6, #24]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   a0b8c:	8432      	strh	r2, [r6, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   a0b8e:	7ada      	ldrb	r2, [r3, #11]
   a0b90:	07d2      	lsls	r2, r2, #31
   a0b92:	f53f af7c 	bmi.w	a0a8e <dir_find.part.5+0x56>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   a0b96:	7821      	ldrb	r1, [r4, #0]
   a0b98:	781a      	ldrb	r2, [r3, #0]
   a0b9a:	4291      	cmp	r1, r2
   a0b9c:	f47f af77 	bne.w	a0a8e <dir_find.part.5+0x56>
   a0ba0:	7861      	ldrb	r1, [r4, #1]
   a0ba2:	785a      	ldrb	r2, [r3, #1]
   a0ba4:	4291      	cmp	r1, r2
   a0ba6:	f47f af72 	bne.w	a0a8e <dir_find.part.5+0x56>
   a0baa:	7899      	ldrb	r1, [r3, #2]
   a0bac:	78a2      	ldrb	r2, [r4, #2]
   a0bae:	4291      	cmp	r1, r2
   a0bb0:	f47f af6d 	bne.w	a0a8e <dir_find.part.5+0x56>
   a0bb4:	78e1      	ldrb	r1, [r4, #3]
   a0bb6:	78da      	ldrb	r2, [r3, #3]
   a0bb8:	4291      	cmp	r1, r2
   a0bba:	f47f af68 	bne.w	a0a8e <dir_find.part.5+0x56>
   a0bbe:	7921      	ldrb	r1, [r4, #4]
   a0bc0:	791a      	ldrb	r2, [r3, #4]
   a0bc2:	4291      	cmp	r1, r2
   a0bc4:	f47f af63 	bne.w	a0a8e <dir_find.part.5+0x56>
   a0bc8:	7961      	ldrb	r1, [r4, #5]
   a0bca:	795a      	ldrb	r2, [r3, #5]
   a0bcc:	4291      	cmp	r1, r2
   a0bce:	f47f af5e 	bne.w	a0a8e <dir_find.part.5+0x56>
   a0bd2:	79a1      	ldrb	r1, [r4, #6]
   a0bd4:	799a      	ldrb	r2, [r3, #6]
   a0bd6:	4291      	cmp	r1, r2
   a0bd8:	f47f af59 	bne.w	a0a8e <dir_find.part.5+0x56>
   a0bdc:	79e1      	ldrb	r1, [r4, #7]
   a0bde:	79da      	ldrb	r2, [r3, #7]
   a0be0:	4291      	cmp	r1, r2
   a0be2:	f47f af54 	bne.w	a0a8e <dir_find.part.5+0x56>
   a0be6:	7a21      	ldrb	r1, [r4, #8]
   a0be8:	7a1a      	ldrb	r2, [r3, #8]
   a0bea:	4291      	cmp	r1, r2
   a0bec:	f47f af4f 	bne.w	a0a8e <dir_find.part.5+0x56>
   a0bf0:	7a61      	ldrb	r1, [r4, #9]
   a0bf2:	7a5a      	ldrb	r2, [r3, #9]
   a0bf4:	4291      	cmp	r1, r2
   a0bf6:	f47f af4a 	bne.w	a0a8e <dir_find.part.5+0x56>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   a0bfa:	7aa2      	ldrb	r2, [r4, #10]
   a0bfc:	7a9b      	ldrb	r3, [r3, #10]
   a0bfe:	429a      	cmp	r2, r3
   a0c00:	f47f af45 	bne.w	a0a8e <dir_find.part.5+0x56>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   a0c04:	2000      	movs	r0, #0
}
   a0c06:	b005      	add	sp, #20
   a0c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   a0c0c:	f8d6 8010 	ldr.w	r8, [r6, #16]
   a0c10:	f1b8 0f00 	cmp.w	r8, #0
   a0c14:	f43f af43 	beq.w	a0a9e <dir_find.part.5+0x66>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   a0c18:	f015 070f 	ands.w	r7, r5, #15
   a0c1c:	d055      	beq.n	a0cca <dir_find.part.5+0x292>
   a0c1e:	6834      	ldr	r4, [r6, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   a0c20:	f104 0330 	add.w	r3, r4, #48	; 0x30
   a0c24:	eb03 1347 	add.w	r3, r3, r7, lsl #5
	dj->index = i;
   a0c28:	80f5      	strh	r5, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   a0c2a:	6173      	str	r3, [r6, #20]
   a0c2c:	e70e      	b.n	a0a4c <dir_find.part.5+0x14>
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a0c2e:	2001      	movs	r0, #1
}
   a0c30:	b005      	add	sp, #20
   a0c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
   a0c36:	69f5      	ldr	r5, [r6, #28]
   a0c38:	2d00      	cmp	r5, #0
   a0c3a:	f43f af2a 	beq.w	a0a92 <dir_find.part.5+0x5a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   a0c3e:	065f      	lsls	r7, r3, #25
   a0c40:	d53f      	bpl.n	a0cc2 <dir_find.part.5+0x28a>
						dj->lfn_idx = dj->index;
   a0c42:	88f2      	ldrh	r2, [r6, #6]
						c &= ~LLE; ord = c;	/* LFN start order */
   a0c44:	f003 09bf 	and.w	r9, r3, #191	; 0xbf
						sum = dir[LDIR_Chksum];
   a0c48:	7b63      	ldrb	r3, [r4, #13]
						dj->lfn_idx = dj->index;
   a0c4a:	8432      	strh	r2, [r6, #32]
						sum = dir[LDIR_Chksum];
   a0c4c:	9301      	str	r3, [sp, #4]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   a0c4e:	7b63      	ldrb	r3, [r4, #13]
   a0c50:	9a01      	ldr	r2, [sp, #4]
   a0c52:	4293      	cmp	r3, r2
   a0c54:	f47f af1b 	bne.w	a0a8e <dir_find.part.5+0x56>
	s = 0; wc = 1;
   a0c58:	2101      	movs	r1, #1
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   a0c5a:	f894 b000 	ldrb.w	fp, [r4]
   a0c5e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; a0d2c <dir_find.part.5+0x2f4>
   a0c62:	f02b 0b40 	bic.w	fp, fp, #64	; 0x40
   a0c66:	f10b 3bff 	add.w	fp, fp, #4294967295
   a0c6a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
   a0c6e:	f64f 78ff 	movw	r8, #65535	; 0xffff
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   a0c72:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
   a0c76:	f10a 070d 	add.w	r7, sl, #13
   a0c7a:	f8cd 900c 	str.w	r9, [sp, #12]
   a0c7e:	4608      	mov	r0, r1
   a0c80:	9602      	str	r6, [sp, #8]
   a0c82:	e003      	b.n	a0c8c <dir_find.part.5+0x254>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   a0c84:	4543      	cmp	r3, r8
   a0c86:	d170      	bne.n	a0d6a <dir_find.part.5+0x332>
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   a0c88:	45ba      	cmp	sl, r7
   a0c8a:	d036      	beq.n	a0cfa <dir_find.part.5+0x2c2>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   a0c8c:	f81a 2b01 	ldrb.w	r2, [sl], #1
   a0c90:	18a3      	adds	r3, r4, r2
   a0c92:	f893 e001 	ldrb.w	lr, [r3, #1]
   a0c96:	5ca3      	ldrb	r3, [r4, r2]
   a0c98:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
		if (wc) {	/* Last char has not been processed */
   a0c9c:	2800      	cmp	r0, #0
   a0c9e:	d0f1      	beq.n	a0c84 <dir_find.part.5+0x24c>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   a0ca0:	4618      	mov	r0, r3
   a0ca2:	4b20      	ldr	r3, [pc, #128]	; (a0d24 <dir_find.part.5+0x2ec>)
   a0ca4:	4798      	blx	r3
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   a0ca6:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   a0caa:	4606      	mov	r6, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   a0cac:	f10b 0901 	add.w	r9, fp, #1
   a0cb0:	d85b      	bhi.n	a0d6a <dir_find.part.5+0x332>
   a0cb2:	f835 001b 	ldrh.w	r0, [r5, fp, lsl #1]
   a0cb6:	4b1b      	ldr	r3, [pc, #108]	; (a0d24 <dir_find.part.5+0x2ec>)
   a0cb8:	4798      	blx	r3
   a0cba:	4286      	cmp	r6, r0
   a0cbc:	d155      	bne.n	a0d6a <dir_find.part.5+0x332>
   a0cbe:	46cb      	mov	fp, r9
   a0cc0:	e7e2      	b.n	a0c88 <dir_find.part.5+0x250>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   a0cc2:	454b      	cmp	r3, r9
   a0cc4:	f47f aee3 	bne.w	a0a8e <dir_find.part.5+0x56>
   a0cc8:	e7c1      	b.n	a0c4e <dir_find.part.5+0x216>
		if (dj->clust == 0) {	/* Static table */
   a0cca:	68f1      	ldr	r1, [r6, #12]
		dj->sect++;					/* Next sector */
   a0ccc:	f108 0801 	add.w	r8, r8, #1
   a0cd0:	f8c6 8010 	str.w	r8, [r6, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   a0cd4:	6834      	ldr	r4, [r6, #0]
		if (dj->clust == 0) {	/* Static table */
   a0cd6:	b921      	cbnz	r1, a0ce2 <dir_find.part.5+0x2aa>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   a0cd8:	8923      	ldrh	r3, [r4, #8]
   a0cda:	42ab      	cmp	r3, r5
   a0cdc:	f67f aedf 	bls.w	a0a9e <dir_find.part.5+0x66>
   a0ce0:	e79e      	b.n	a0c20 <dir_find.part.5+0x1e8>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   a0ce2:	78a3      	ldrb	r3, [r4, #2]
   a0ce4:	3b01      	subs	r3, #1
   a0ce6:	ea13 1315 	ands.w	r3, r3, r5, lsr #4
   a0cea:	d199      	bne.n	a0c20 <dir_find.part.5+0x1e8>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   a0cec:	2901      	cmp	r1, #1
   a0cee:	d902      	bls.n	a0cf6 <dir_find.part.5+0x2be>
   a0cf0:	69a3      	ldr	r3, [r4, #24]
   a0cf2:	4299      	cmp	r1, r3
   a0cf4:	d31c      	bcc.n	a0d30 <dir_find.part.5+0x2f8>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   a0cf6:	2002      	movs	r0, #2
   a0cf8:	e6d2      	b.n	a0aa0 <dir_find.part.5+0x68>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   a0cfa:	7823      	ldrb	r3, [r4, #0]
   a0cfc:	4601      	mov	r1, r0
   a0cfe:	0658      	lsls	r0, r3, #25
   a0d00:	f8dd 900c 	ldr.w	r9, [sp, #12]
   a0d04:	9e02      	ldr	r6, [sp, #8]
   a0d06:	d505      	bpl.n	a0d14 <dir_find.part.5+0x2dc>
   a0d08:	b121      	cbz	r1, a0d14 <dir_find.part.5+0x2dc>
   a0d0a:	f835 301b 	ldrh.w	r3, [r5, fp, lsl #1]
   a0d0e:	2b00      	cmp	r3, #0
   a0d10:	f47f aebd 	bne.w	a0a8e <dir_find.part.5+0x56>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   a0d14:	f109 39ff 	add.w	r9, r9, #4294967295
   a0d18:	fa5f f989 	uxtb.w	r9, r9
   a0d1c:	e6b9      	b.n	a0a92 <dir_find.part.5+0x5a>
   a0d1e:	bf00      	nop
   a0d20:	0009f389 	.word	0x0009f389
   a0d24:	000a2ff9 	.word	0x000a2ff9
   a0d28:	0009f3fd 	.word	0x0009f3fd
   a0d2c:	000ac1b4 	.word	0x000ac1b4
   a0d30:	4620      	mov	r0, r4
   a0d32:	4b10      	ldr	r3, [pc, #64]	; (a0d74 <dir_find.part.5+0x33c>)
   a0d34:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
   a0d36:	2801      	cmp	r0, #1
   a0d38:	d9dd      	bls.n	a0cf6 <dir_find.part.5+0x2be>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   a0d3a:	1c43      	adds	r3, r0, #1
   a0d3c:	f43f af77 	beq.w	a0c2e <dir_find.part.5+0x1f6>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   a0d40:	6834      	ldr	r4, [r6, #0]
   a0d42:	69a3      	ldr	r3, [r4, #24]
   a0d44:	4298      	cmp	r0, r3
   a0d46:	f4bf aeaa 	bcs.w	a0a9e <dir_find.part.5+0x66>
				dj->clust = clst;				/* Initialize data for new cluster */
   a0d4a:	60f0      	str	r0, [r6, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a0d4c:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
   a0d4e:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a0d50:	3b02      	subs	r3, #2
   a0d52:	4298      	cmp	r0, r3
   a0d54:	bf2f      	iteee	cs
   a0d56:	f04f 0800 	movcs.w	r8, #0
	return clst * fs->csize + fs->database;
   a0d5a:	f894 8002 	ldrbcc.w	r8, [r4, #2]
   a0d5e:	6aa3      	ldrcc	r3, [r4, #40]	; 0x28
   a0d60:	fb00 3808 	mlacc	r8, r0, r8, r3
				dj->sect = clust2sect(dj->fs, clst);
   a0d64:	f8c6 8010 	str.w	r8, [r6, #16]
   a0d68:	e75a      	b.n	a0c20 <dir_find.part.5+0x1e8>
   a0d6a:	9e02      	ldr	r6, [sp, #8]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   a0d6c:	f04f 09ff 	mov.w	r9, #255	; 0xff
   a0d70:	e68f      	b.n	a0a92 <dir_find.part.5+0x5a>
   a0d72:	bf00      	nop
   a0d74:	0009ff29 	.word	0x0009ff29

000a0d78 <dir_register>:
{
   a0d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a0d7c:	4605      	mov	r5, r0
	fn = dj->fn; lfn = dj->lfn;
   a0d7e:	f8d0 9018 	ldr.w	r9, [r0, #24]
{
   a0d82:	b08d      	sub	sp, #52	; 0x34
   a0d84:	f8d9 0000 	ldr.w	r0, [r9]
   a0d88:	f8d9 1004 	ldr.w	r1, [r9, #4]
   a0d8c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   a0d90:	ab09      	add	r3, sp, #36	; 0x24
   a0d92:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   a0d94:	f89d 802f 	ldrb.w	r8, [sp, #47]	; 0x2f
	fn = dj->fn; lfn = dj->lfn;
   a0d98:	69ee      	ldr	r6, [r5, #28]
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   a0d9a:	f018 0f01 	tst.w	r8, #1
   a0d9e:	d13f      	bne.n	a0e20 <dir_register+0xa8>
   a0da0:	4bc9      	ldr	r3, [pc, #804]	; (a10c8 <dir_register+0x350>)
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   a0da2:	f018 0f02 	tst.w	r8, #2
   a0da6:	9302      	str	r3, [sp, #8]
   a0da8:	f040 8176 	bne.w	a1098 <dir_register+0x320>
		ne = 1;
   a0dac:	2301      	movs	r3, #1
   a0dae:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dj, 0);
   a0db0:	2100      	movs	r1, #0
   a0db2:	4628      	mov	r0, r5
   a0db4:	9b02      	ldr	r3, [sp, #8]
   a0db6:	4798      	blx	r3
	if (res != FR_OK) return res;
   a0db8:	4604      	mov	r4, r0
   a0dba:	bb68      	cbnz	r0, a0e18 <dir_register+0xa0>
   a0dbc:	4683      	mov	fp, r0
   a0dbe:	682f      	ldr	r7, [r5, #0]
   a0dc0:	f8d5 8010 	ldr.w	r8, [r5, #16]
   a0dc4:	f8dd a00c 	ldr.w	sl, [sp, #12]
   a0dc8:	9001      	str	r0, [sp, #4]
   a0dca:	9004      	str	r0, [sp, #16]
	wsect = fs->winsect;
   a0dcc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   a0dce:	4544      	cmp	r4, r8
   a0dd0:	d012      	beq.n	a0df8 <dir_register+0x80>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a0dd2:	793b      	ldrb	r3, [r7, #4]
   a0dd4:	2b00      	cmp	r3, #0
   a0dd6:	f040 81a5 	bne.w	a1124 <dir_register+0x3ac>
		if (sector) {
   a0dda:	f1b8 0f00 	cmp.w	r8, #0
   a0dde:	d00b      	beq.n	a0df8 <dir_register+0x80>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a0de0:	2301      	movs	r3, #1
   a0de2:	4642      	mov	r2, r8
   a0de4:	f107 0130 	add.w	r1, r7, #48	; 0x30
   a0de8:	7878      	ldrb	r0, [r7, #1]
   a0dea:	4cb8      	ldr	r4, [pc, #736]	; (a10cc <dir_register+0x354>)
   a0dec:	47a0      	blx	r4
   a0dee:	2800      	cmp	r0, #0
   a0df0:	f040 82e2 	bne.w	a13b8 <dir_register+0x640>
			fs->winsect = sector;
   a0df4:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
		c = *dj->dir;				/* Check the entry status */
   a0df8:	696b      	ldr	r3, [r5, #20]
   a0dfa:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   a0dfc:	2be5      	cmp	r3, #229	; 0xe5
   a0dfe:	f000 81b7 	beq.w	a1170 <dir_register+0x3f8>
   a0e02:	2b00      	cmp	r3, #0
   a0e04:	f000 81b4 	beq.w	a1170 <dir_register+0x3f8>
			n = 0;					/* Not a blank entry. Restart to search */
   a0e08:	2600      	movs	r6, #0
	i = dj->index + 1;
   a0e0a:	88ec      	ldrh	r4, [r5, #6]
   a0e0c:	3401      	adds	r4, #1
   a0e0e:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   a0e10:	2c00      	cmp	r4, #0
   a0e12:	f040 82b5 	bne.w	a1380 <dir_register+0x608>
		return FR_NO_FILE;
   a0e16:	2404      	movs	r4, #4
}
   a0e18:	4620      	mov	r0, r4
   a0e1a:	b00d      	add	sp, #52	; 0x34
   a0e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a0e20:	4aa9      	ldr	r2, [pc, #676]	; (a10c8 <dir_register+0x350>)
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   a0e22:	2300      	movs	r3, #0
		for (n = 1; n < 100; n++) {
   a0e24:	f04f 0a01 	mov.w	sl, #1
   a0e28:	4614      	mov	r4, r2
   a0e2a:	4fa9      	ldr	r7, [pc, #676]	; (a10d0 <dir_register+0x358>)
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   a0e2c:	f889 300b 	strb.w	r3, [r9, #11]
   a0e30:	9202      	str	r2, [sp, #8]
   a0e32:	61eb      	str	r3, [r5, #28]
		*d++ = *s++;
   a0e34:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   a0e38:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
   a0e3c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   a0e40:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   a0e44:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
   a0e48:	f89d b029 	ldrb.w	fp, [sp, #41]	; 0x29
   a0e4c:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   a0e50:	f889 0001 	strb.w	r0, [r9, #1]
   a0e54:	f889 1002 	strb.w	r1, [r9, #2]
   a0e58:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   a0e5c:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
   a0e60:	f889 2003 	strb.w	r2, [r9, #3]
   a0e64:	f889 3004 	strb.w	r3, [r9, #4]
   a0e68:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   a0e6c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   a0e70:	f1ba 0f05 	cmp.w	sl, #5
		*d++ = *s++;
   a0e74:	f889 e000 	strb.w	lr, [r9]
   a0e78:	f889 b005 	strb.w	fp, [r9, #5]
   a0e7c:	f889 c006 	strb.w	ip, [r9, #6]
   a0e80:	f889 0007 	strb.w	r0, [r9, #7]
   a0e84:	f889 1008 	strb.w	r1, [r9, #8]
   a0e88:	f889 2009 	strb.w	r2, [r9, #9]
   a0e8c:	f889 300a 	strb.w	r3, [r9, #10]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   a0e90:	f240 8117 	bls.w	a10c2 <dir_register+0x34a>
   a0e94:	4652      	mov	r2, sl
   a0e96:	4630      	mov	r0, r6
   a0e98:	8831      	ldrh	r1, [r6, #0]
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   a0e9a:	03d3      	lsls	r3, r2, #15
   a0e9c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   a0ea0:	440b      	add	r3, r1
   a0ea2:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   a0ea6:	b29a      	uxth	r2, r3
   a0ea8:	2900      	cmp	r1, #0
   a0eaa:	d1f6      	bne.n	a0e9a <dir_register+0x122>
		c = (seq % 16) + '0';
   a0eac:	f002 030f 	and.w	r3, r2, #15
   a0eb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
   a0eb4:	2939      	cmp	r1, #57	; 0x39
   a0eb6:	bf88      	it	hi
   a0eb8:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
		seq /= 16;
   a0ebc:	f3c2 130f 	ubfx	r3, r2, #4, #16
		ns[i--] = c;
   a0ec0:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
	} while (seq);
   a0ec4:	2b00      	cmp	r3, #0
   a0ec6:	f000 8124 	beq.w	a1112 <dir_register+0x39a>
		c = (seq % 16) + '0';
   a0eca:	f003 030f 	and.w	r3, r3, #15
   a0ece:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
   a0ed2:	2939      	cmp	r1, #57	; 0x39
   a0ed4:	bf88      	it	hi
   a0ed6:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
		seq /= 16;
   a0eda:	f3c2 230f 	ubfx	r3, r2, #8, #16
		ns[i--] = c;
   a0ede:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
	} while (seq);
   a0ee2:	2b00      	cmp	r3, #0
   a0ee4:	f000 811b 	beq.w	a111e <dir_register+0x3a6>
		c = (seq % 16) + '0';
   a0ee8:	f003 030f 	and.w	r3, r3, #15
   a0eec:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
   a0ef0:	2939      	cmp	r1, #57	; 0x39
   a0ef2:	bf88      	it	hi
   a0ef4:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
		seq /= 16;
   a0ef8:	f3c2 330f 	ubfx	r3, r2, #12, #16
		ns[i--] = c;
   a0efc:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
	} while (seq);
   a0f00:	2b00      	cmp	r3, #0
   a0f02:	f000 8109 	beq.w	a1118 <dir_register+0x3a0>
		c = (seq % 16) + '0';
   a0f06:	b2db      	uxtb	r3, r3
   a0f08:	f103 0230 	add.w	r2, r3, #48	; 0x30
   a0f0c:	b2d2      	uxtb	r2, r2
		if (c > '9') c += 7;
   a0f0e:	2a39      	cmp	r2, #57	; 0x39
   a0f10:	bf84      	itt	hi
   a0f12:	3337      	addhi	r3, #55	; 0x37
   a0f14:	b2da      	uxtbhi	r2, r3
		ns[i--] = c;
   a0f16:	f88d 2020 	strb.w	r2, [sp, #32]
   a0f1a:	2004      	movs	r0, #4
   a0f1c:	2203      	movs	r2, #3
	ns[i] = '~';
   a0f1e:	237e      	movs	r3, #126	; 0x7e
   a0f20:	a90c      	add	r1, sp, #48	; 0x30
   a0f22:	4411      	add	r1, r2
	for (j = 0; j < i && dst[j] != ' '; j++) {
   a0f24:	f1be 0f20 	cmp.w	lr, #32
	ns[i] = '~';
   a0f28:	f801 3c14 	strb.w	r3, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   a0f2c:	f000 80eb 	beq.w	a1106 <dir_register+0x38e>
   a0f30:	f899 3001 	ldrb.w	r3, [r9, #1]
   a0f34:	f109 0101 	add.w	r1, r9, #1
   a0f38:	2b20      	cmp	r3, #32
   a0f3a:	f000 8252 	beq.w	a13e2 <dir_register+0x66a>
   a0f3e:	f899 3002 	ldrb.w	r3, [r9, #2]
   a0f42:	f109 0102 	add.w	r1, r9, #2
   a0f46:	2b20      	cmp	r3, #32
   a0f48:	f000 8243 	beq.w	a13d2 <dir_register+0x65a>
   a0f4c:	2a03      	cmp	r2, #3
   a0f4e:	d01a      	beq.n	a0f86 <dir_register+0x20e>
   a0f50:	f899 3003 	ldrb.w	r3, [r9, #3]
   a0f54:	f109 0103 	add.w	r1, r9, #3
   a0f58:	2b20      	cmp	r3, #32
   a0f5a:	f000 8232 	beq.w	a13c2 <dir_register+0x64a>
   a0f5e:	2a04      	cmp	r2, #4
   a0f60:	d011      	beq.n	a0f86 <dir_register+0x20e>
   a0f62:	f899 3004 	ldrb.w	r3, [r9, #4]
   a0f66:	f109 0104 	add.w	r1, r9, #4
   a0f6a:	2b20      	cmp	r3, #32
   a0f6c:	d057      	beq.n	a101e <dir_register+0x2a6>
   a0f6e:	2a06      	cmp	r2, #6
   a0f70:	bf18      	it	ne
   a0f72:	2305      	movne	r3, #5
   a0f74:	d108      	bne.n	a0f88 <dir_register+0x210>
   a0f76:	f899 3005 	ldrb.w	r3, [r9, #5]
   a0f7a:	f109 0105 	add.w	r1, r9, #5
   a0f7e:	2b20      	cmp	r3, #32
   a0f80:	bf08      	it	eq
   a0f82:	2305      	moveq	r3, #5
   a0f84:	d04c      	beq.n	a1020 <dir_register+0x2a8>
   a0f86:	4613      	mov	r3, r2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0f88:	217e      	movs	r1, #126	; 0x7e
   a0f8a:	f103 0c01 	add.w	ip, r3, #1
   a0f8e:	f809 1003 	strb.w	r1, [r9, r3]
   a0f92:	a90c      	add	r1, sp, #48	; 0x30
   a0f94:	4408      	add	r0, r1
   a0f96:	f810 1c14 	ldrb.w	r1, [r0, #-20]
   a0f9a:	f103 0e02 	add.w	lr, r3, #2
	} while (j < 8);
   a0f9e:	f1be 0f08 	cmp.w	lr, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fa2:	f809 100c 	strb.w	r1, [r9, ip]
   a0fa6:	f102 0102 	add.w	r1, r2, #2
	} while (j < 8);
   a0faa:	d022      	beq.n	a0ff2 <dir_register+0x27a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fac:	2908      	cmp	r1, #8
   a0fae:	f103 0003 	add.w	r0, r3, #3
   a0fb2:	d13c      	bne.n	a102e <dir_register+0x2b6>
   a0fb4:	2220      	movs	r2, #32
	} while (j < 8);
   a0fb6:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fb8:	f809 200e 	strb.w	r2, [r9, lr]
	} while (j < 8);
   a0fbc:	d019      	beq.n	a0ff2 <dir_register+0x27a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fbe:	1d19      	adds	r1, r3, #4
	} while (j < 8);
   a0fc0:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fc2:	f809 2000 	strb.w	r2, [r9, r0]
	} while (j < 8);
   a0fc6:	d014      	beq.n	a0ff2 <dir_register+0x27a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fc8:	1d58      	adds	r0, r3, #5
   a0fca:	eb09 0e01 	add.w	lr, r9, r1
   a0fce:	2320      	movs	r3, #32
	} while (j < 8);
   a0fd0:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fd2:	f88e 3000 	strb.w	r3, [lr]
	} while (j < 8);
   a0fd6:	d00c      	beq.n	a0ff2 <dir_register+0x27a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fd8:	1c8a      	adds	r2, r1, #2
	} while (j < 8);
   a0fda:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fdc:	f809 3000 	strb.w	r3, [r9, r0]
	} while (j < 8);
   a0fe0:	d007      	beq.n	a0ff2 <dir_register+0x27a>
   a0fe2:	2904      	cmp	r1, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fe4:	f809 3002 	strb.w	r3, [r9, r2]
	} while (j < 8);
   a0fe8:	d103      	bne.n	a0ff2 <dir_register+0x27a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a0fea:	2320      	movs	r3, #32
   a0fec:	f109 0207 	add.w	r2, r9, #7
   a0ff0:	7013      	strb	r3, [r2, #0]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   a0ff2:	2100      	movs	r1, #0
   a0ff4:	4628      	mov	r0, r5
   a0ff6:	47a0      	blx	r4
	if (res != FR_OK) return res;
   a0ff8:	2800      	cmp	r0, #0
   a0ffa:	d142      	bne.n	a1082 <dir_register+0x30a>
   a0ffc:	4628      	mov	r0, r5
   a0ffe:	47b8      	blx	r7
			if (res != FR_OK) break;
   a1000:	2800      	cmp	r0, #0
   a1002:	d13e      	bne.n	a1082 <dir_register+0x30a>
		for (n = 1; n < 100; n++) {
   a1004:	f10a 0a01 	add.w	sl, sl, #1
   a1008:	fa1f fa8a 	uxth.w	sl, sl
   a100c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
   a1010:	f47f af10 	bne.w	a0e34 <dir_register+0xbc>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   a1014:	2407      	movs	r4, #7
}
   a1016:	4620      	mov	r0, r4
   a1018:	b00d      	add	sp, #52	; 0x34
   a101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i && dst[j] != ' '; j++) {
   a101e:	2304      	movs	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a1020:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   a1024:	f103 0c01 	add.w	ip, r3, #1
   a1028:	f881 e000 	strb.w	lr, [r1]
   a102c:	e7b1      	b.n	a0f92 <dir_register+0x21a>
   a102e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   a1032:	4461      	add	r1, ip
   a1034:	f811 1c14 	ldrb.w	r1, [r1, #-20]
	} while (j < 8);
   a1038:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a103a:	f102 0c03 	add.w	ip, r2, #3
   a103e:	f809 100e 	strb.w	r1, [r9, lr]
	} while (j < 8);
   a1042:	d0d6      	beq.n	a0ff2 <dir_register+0x27a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a1044:	f1bc 0f08 	cmp.w	ip, #8
   a1048:	f103 0104 	add.w	r1, r3, #4
   a104c:	d144      	bne.n	a10d8 <dir_register+0x360>
   a104e:	2220      	movs	r2, #32
	} while (j < 8);
   a1050:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a1052:	f809 2000 	strb.w	r2, [r9, r0]
	} while (j < 8);
   a1056:	d0cc      	beq.n	a0ff2 <dir_register+0x27a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a1058:	1d58      	adds	r0, r3, #5
	} while (j < 8);
   a105a:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a105c:	f809 2001 	strb.w	r2, [r9, r1]
	} while (j < 8);
   a1060:	d0c7      	beq.n	a0ff2 <dir_register+0x27a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a1062:	2220      	movs	r2, #32
   a1064:	3306      	adds	r3, #6
   a1066:	eb09 0100 	add.w	r1, r9, r0
	} while (j < 8);
   a106a:	2b08      	cmp	r3, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a106c:	700a      	strb	r2, [r1, #0]
	} while (j < 8);
   a106e:	d0c0      	beq.n	a0ff2 <dir_register+0x27a>
   a1070:	2805      	cmp	r0, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a1072:	f809 2003 	strb.w	r2, [r9, r3]
	} while (j < 8);
   a1076:	d0b8      	beq.n	a0fea <dir_register+0x272>
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   a1078:	2100      	movs	r1, #0
   a107a:	4628      	mov	r0, r5
   a107c:	47a0      	blx	r4
	if (res != FR_OK) return res;
   a107e:	2800      	cmp	r0, #0
   a1080:	d0bc      	beq.n	a0ffc <dir_register+0x284>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   a1082:	2804      	cmp	r0, #4
   a1084:	4604      	mov	r4, r0
   a1086:	f47f aec7 	bne.w	a0e18 <dir_register+0xa0>
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   a108a:	f018 0f02 	tst.w	r8, #2
		fn[NS] = sn[NS]; dj->lfn = lfn;
   a108e:	f889 800b 	strb.w	r8, [r9, #11]
   a1092:	61ee      	str	r6, [r5, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   a1094:	f43f ae8a 	beq.w	a0dac <dir_register+0x34>
		for (ne = 0; lfn[ne]; ne++) ;
   a1098:	8833      	ldrh	r3, [r6, #0]
   a109a:	2b00      	cmp	r3, #0
   a109c:	f43f ae86 	beq.w	a0dac <dir_register+0x34>
   a10a0:	2300      	movs	r3, #0
   a10a2:	3301      	adds	r3, #1
   a10a4:	b29b      	uxth	r3, r3
   a10a6:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
   a10aa:	2a00      	cmp	r2, #0
   a10ac:	d1f9      	bne.n	a10a2 <dir_register+0x32a>
   a10ae:	4a09      	ldr	r2, [pc, #36]	; (a10d4 <dir_register+0x35c>)
   a10b0:	3319      	adds	r3, #25
   a10b2:	fb82 1203 	smull	r1, r2, r2, r3
   a10b6:	17db      	asrs	r3, r3, #31
   a10b8:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   a10bc:	b29b      	uxth	r3, r3
   a10be:	9303      	str	r3, [sp, #12]
   a10c0:	e676      	b.n	a0db0 <dir_register+0x38>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   a10c2:	4652      	mov	r2, sl
   a10c4:	e6f2      	b.n	a0eac <dir_register+0x134>
   a10c6:	bf00      	nop
   a10c8:	000a01dd 	.word	0x000a01dd
   a10cc:	0009f389 	.word	0x0009f389
   a10d0:	000a0a39 	.word	0x000a0a39
   a10d4:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a10d8:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   a10dc:	44f4      	add	ip, lr
   a10de:	f81c ec14 	ldrb.w	lr, [ip, #-20]
	} while (j < 8);
   a10e2:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a10e4:	f809 e000 	strb.w	lr, [r9, r0]
	} while (j < 8);
   a10e8:	d083      	beq.n	a0ff2 <dir_register+0x27a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a10ea:	2a04      	cmp	r2, #4
   a10ec:	f103 0005 	add.w	r0, r3, #5
   a10f0:	eb09 0e01 	add.w	lr, r9, r1
   a10f4:	f43f af6b 	beq.w	a0fce <dir_register+0x256>
   a10f8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
	} while (j < 8);
   a10fc:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a10fe:	f809 2001 	strb.w	r2, [r9, r1]
	} while (j < 8);
   a1102:	d1ae      	bne.n	a1062 <dir_register+0x2ea>
   a1104:	e775      	b.n	a0ff2 <dir_register+0x27a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a1106:	f889 3000 	strb.w	r3, [r9]
   a110a:	f04f 0c01 	mov.w	ip, #1
	for (j = 0; j < i && dst[j] != ' '; j++) {
   a110e:	2300      	movs	r3, #0
   a1110:	e73f      	b.n	a0f92 <dir_register+0x21a>
	} while (seq);
   a1112:	2007      	movs	r0, #7
		ns[i--] = c;
   a1114:	2206      	movs	r2, #6
   a1116:	e702      	b.n	a0f1e <dir_register+0x1a6>
	} while (seq);
   a1118:	2005      	movs	r0, #5
		ns[i--] = c;
   a111a:	2204      	movs	r2, #4
   a111c:	e6ff      	b.n	a0f1e <dir_register+0x1a6>
	} while (seq);
   a111e:	2006      	movs	r0, #6
		ns[i--] = c;
   a1120:	2205      	movs	r2, #5
   a1122:	e6fc      	b.n	a0f1e <dir_register+0x1a6>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a1124:	f107 0930 	add.w	r9, r7, #48	; 0x30
   a1128:	4649      	mov	r1, r9
   a112a:	2301      	movs	r3, #1
   a112c:	4622      	mov	r2, r4
   a112e:	7878      	ldrb	r0, [r7, #1]
   a1130:	4ebc      	ldr	r6, [pc, #752]	; (a1424 <dir_register+0x6ac>)
   a1132:	47b0      	blx	r6
   a1134:	2800      	cmp	r0, #0
   a1136:	f040 813f 	bne.w	a13b8 <dir_register+0x640>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a113a:	69fb      	ldr	r3, [r7, #28]
   a113c:	6a3a      	ldr	r2, [r7, #32]
			fs->wflag = 0;
   a113e:	7138      	strb	r0, [r7, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a1140:	441a      	add	r2, r3
   a1142:	4294      	cmp	r4, r2
   a1144:	f4bf ae49 	bcs.w	a0dda <dir_register+0x62>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1148:	78fe      	ldrb	r6, [r7, #3]
   a114a:	2e01      	cmp	r6, #1
   a114c:	f67f ae45 	bls.w	a0dda <dir_register+0x62>
   a1150:	9505      	str	r5, [sp, #20]
   a1152:	e000      	b.n	a1156 <dir_register+0x3de>
   a1154:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
   a1156:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1158:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   a115a:	4622      	mov	r2, r4
   a115c:	2301      	movs	r3, #1
   a115e:	4649      	mov	r1, r9
   a1160:	7878      	ldrb	r0, [r7, #1]
   a1162:	4db0      	ldr	r5, [pc, #704]	; (a1424 <dir_register+0x6ac>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1164:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
   a1166:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1168:	2e01      	cmp	r6, #1
   a116a:	d1f3      	bne.n	a1154 <dir_register+0x3dc>
   a116c:	9d05      	ldr	r5, [sp, #20]
   a116e:	e634      	b.n	a0dda <dir_register+0x62>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   a1170:	f1bb 0f00 	cmp.w	fp, #0
   a1174:	d101      	bne.n	a117a <dir_register+0x402>
   a1176:	88eb      	ldrh	r3, [r5, #6]
   a1178:	9301      	str	r3, [sp, #4]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   a117a:	f10b 0601 	add.w	r6, fp, #1
   a117e:	b2b6      	uxth	r6, r6
   a1180:	45b2      	cmp	sl, r6
   a1182:	f47f ae42 	bne.w	a0e0a <dir_register+0x92>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   a1186:	9b03      	ldr	r3, [sp, #12]
   a1188:	9c04      	ldr	r4, [sp, #16]
   a118a:	2b01      	cmp	r3, #1
   a118c:	f000 80c3 	beq.w	a1316 <dir_register+0x59e>
		res = dir_sdi(dj, is);
   a1190:	9901      	ldr	r1, [sp, #4]
   a1192:	4628      	mov	r0, r5
   a1194:	9b02      	ldr	r3, [sp, #8]
   a1196:	4798      	blx	r3
		if (res == FR_OK) {
   a1198:	2800      	cmp	r0, #0
   a119a:	f040 822e 	bne.w	a15fa <dir_register+0x882>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   a119e:	69ab      	ldr	r3, [r5, #24]
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   a11a0:	465f      	mov	r7, fp
   a11a2:	7819      	ldrb	r1, [r3, #0]
   a11a4:	7858      	ldrb	r0, [r3, #1]
   a11a6:	01ca      	lsls	r2, r1, #7
   a11a8:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
   a11ac:	1811      	adds	r1, r2, r0
   a11ae:	f3c1 0246 	ubfx	r2, r1, #1, #7
   a11b2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   a11b6:	7899      	ldrb	r1, [r3, #2]
   a11b8:	b2d2      	uxtb	r2, r2
   a11ba:	4411      	add	r1, r2
   a11bc:	f3c1 0246 	ubfx	r2, r1, #1, #7
   a11c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   a11c4:	46a3      	mov	fp, r4
   a11c6:	78d9      	ldrb	r1, [r3, #3]
   a11c8:	b2d2      	uxtb	r2, r2
   a11ca:	4411      	add	r1, r2
   a11cc:	f3c1 0246 	ubfx	r2, r1, #1, #7
   a11d0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   a11d4:	7919      	ldrb	r1, [r3, #4]
   a11d6:	b2d2      	uxtb	r2, r2
   a11d8:	4411      	add	r1, r2
   a11da:	f3c1 0246 	ubfx	r2, r1, #1, #7
   a11de:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   a11e2:	7959      	ldrb	r1, [r3, #5]
   a11e4:	b2d2      	uxtb	r2, r2
   a11e6:	4411      	add	r1, r2
   a11e8:	f3c1 0246 	ubfx	r2, r1, #1, #7
   a11ec:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   a11f0:	7999      	ldrb	r1, [r3, #6]
   a11f2:	b2d2      	uxtb	r2, r2
   a11f4:	4411      	add	r1, r2
   a11f6:	f3c1 0246 	ubfx	r2, r1, #1, #7
   a11fa:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   a11fe:	79d9      	ldrb	r1, [r3, #7]
   a1200:	b2d2      	uxtb	r2, r2
   a1202:	4411      	add	r1, r2
   a1204:	f3c1 0246 	ubfx	r2, r1, #1, #7
   a1208:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   a120c:	7a19      	ldrb	r1, [r3, #8]
   a120e:	b2d2      	uxtb	r2, r2
   a1210:	4411      	add	r1, r2
   a1212:	f3c1 0246 	ubfx	r2, r1, #1, #7
   a1216:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   a121a:	7a59      	ldrb	r1, [r3, #9]
   a121c:	b2d2      	uxtb	r2, r2
   a121e:	440a      	add	r2, r1
   a1220:	7a99      	ldrb	r1, [r3, #10]
   a1222:	f3c2 0346 	ubfx	r3, r2, #1, #7
   a1226:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   a122a:	440b      	add	r3, r1
   a122c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   a1230:	9301      	str	r3, [sp, #4]
				res = move_window(dj->fs, dj->sect);
   a1232:	682e      	ldr	r6, [r5, #0]
   a1234:	f8d5 9010 	ldr.w	r9, [r5, #16]
	wsect = fs->winsect;
   a1238:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   a123a:	4599      	cmp	r9, r3
	wsect = fs->winsect;
   a123c:	461a      	mov	r2, r3
	if (wsect != sector) {	/* Changed current window */
   a123e:	d012      	beq.n	a1266 <dir_register+0x4ee>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a1240:	7933      	ldrb	r3, [r6, #4]
   a1242:	2b00      	cmp	r3, #0
   a1244:	f040 80f6 	bne.w	a1434 <dir_register+0x6bc>
		if (sector) {
   a1248:	f1b9 0f00 	cmp.w	r9, #0
   a124c:	d00b      	beq.n	a1266 <dir_register+0x4ee>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a124e:	2301      	movs	r3, #1
   a1250:	464a      	mov	r2, r9
   a1252:	f106 0130 	add.w	r1, r6, #48	; 0x30
   a1256:	7870      	ldrb	r0, [r6, #1]
   a1258:	4c73      	ldr	r4, [pc, #460]	; (a1428 <dir_register+0x6b0>)
   a125a:	47a0      	blx	r4
   a125c:	2800      	cmp	r0, #0
   a125e:	f040 80ab 	bne.w	a13b8 <dir_register+0x640>
			fs->winsect = sector;
   a1262:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c
	dir[LDIR_Type] = 0;
   a1266:	2600      	movs	r6, #0
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   a1268:	f04f 0c0f 	mov.w	ip, #15
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a126c:	f64f 71fd 	movw	r1, #65533	; 0xfffd
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   a1270:	b2fc      	uxtb	r4, r7
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   a1272:	1e62      	subs	r2, r4, #1
   a1274:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   a1278:	696b      	ldr	r3, [r5, #20]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   a127a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   a127e:	f89d 2004 	ldrb.w	r2, [sp, #4]
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   a1282:	69e8      	ldr	r0, [r5, #28]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   a1284:	f883 c00b 	strb.w	ip, [r3, #11]
	dir[LDIR_Type] = 0;
   a1288:	731e      	strb	r6, [r3, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   a128a:	769e      	strb	r6, [r3, #26]
   a128c:	76de      	strb	r6, [r3, #27]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   a128e:	735a      	strb	r2, [r3, #13]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a1290:	f830 201e 	ldrh.w	r2, [r0, lr, lsl #1]
   a1294:	ea4f 064e 	mov.w	r6, lr, lsl #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a1298:	ea4f 2c12 	mov.w	ip, r2, lsr #8
   a129c:	705a      	strb	r2, [r3, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a129e:	3a01      	subs	r2, #1
   a12a0:	b292      	uxth	r2, r2
   a12a2:	428a      	cmp	r2, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a12a4:	f883 c002 	strb.w	ip, [r3, #2]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a12a8:	f240 80ef 	bls.w	a148a <dir_register+0x712>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a12ac:	22ff      	movs	r2, #255	; 0xff
   a12ae:	70da      	strb	r2, [r3, #3]
   a12b0:	711a      	strb	r2, [r3, #4]
   a12b2:	22ff      	movs	r2, #255	; 0xff
   a12b4:	715a      	strb	r2, [r3, #5]
   a12b6:	719a      	strb	r2, [r3, #6]
   a12b8:	22ff      	movs	r2, #255	; 0xff
   a12ba:	71da      	strb	r2, [r3, #7]
   a12bc:	721a      	strb	r2, [r3, #8]
   a12be:	22ff      	movs	r2, #255	; 0xff
   a12c0:	725a      	strb	r2, [r3, #9]
   a12c2:	729a      	strb	r2, [r3, #10]
   a12c4:	22ff      	movs	r2, #255	; 0xff
   a12c6:	739a      	strb	r2, [r3, #14]
   a12c8:	73da      	strb	r2, [r3, #15]
   a12ca:	22ff      	movs	r2, #255	; 0xff
   a12cc:	741a      	strb	r2, [r3, #16]
   a12ce:	745a      	strb	r2, [r3, #17]
   a12d0:	22ff      	movs	r2, #255	; 0xff
   a12d2:	749a      	strb	r2, [r3, #18]
   a12d4:	74da      	strb	r2, [r3, #19]
   a12d6:	22ff      	movs	r2, #255	; 0xff
   a12d8:	751a      	strb	r2, [r3, #20]
   a12da:	755a      	strb	r2, [r3, #21]
   a12dc:	22ff      	movs	r2, #255	; 0xff
   a12de:	759a      	strb	r2, [r3, #22]
   a12e0:	75da      	strb	r2, [r3, #23]
   a12e2:	22ff      	movs	r2, #255	; 0xff
   a12e4:	761a      	strb	r2, [r3, #24]
   a12e6:	765a      	strb	r2, [r3, #25]
   a12e8:	22ff      	movs	r2, #255	; 0xff
   a12ea:	771a      	strb	r2, [r3, #28]
   a12ec:	775a      	strb	r2, [r3, #29]
   a12ee:	22ff      	movs	r2, #255	; 0xff
   a12f0:	779a      	strb	r2, [r3, #30]
   a12f2:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   a12f4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
				dj->fs->wflag = 1;
   a12f8:	2201      	movs	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   a12fa:	701c      	strb	r4, [r3, #0]
				dj->fs->wflag = 1;
   a12fc:	682b      	ldr	r3, [r5, #0]
				res = dir_next(dj, 0);	/* Next entry */
   a12fe:	4628      	mov	r0, r5
				dj->fs->wflag = 1;
   a1300:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   a1302:	4b4a      	ldr	r3, [pc, #296]	; (a142c <dir_register+0x6b4>)
   a1304:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   a1306:	2800      	cmp	r0, #0
   a1308:	f040 8177 	bne.w	a15fa <dir_register+0x882>
   a130c:	3f01      	subs	r7, #1
   a130e:	b2bf      	uxth	r7, r7
   a1310:	2f00      	cmp	r7, #0
   a1312:	d18e      	bne.n	a1232 <dir_register+0x4ba>
   a1314:	465c      	mov	r4, fp
		res = move_window(dj->fs, dj->sect);
   a1316:	682e      	ldr	r6, [r5, #0]
   a1318:	f8d5 9010 	ldr.w	r9, [r5, #16]
	wsect = fs->winsect;
   a131c:	6af7      	ldr	r7, [r6, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   a131e:	45b9      	cmp	r9, r7
   a1320:	d006      	beq.n	a1330 <dir_register+0x5b8>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a1322:	7933      	ldrb	r3, [r6, #4]
   a1324:	2b00      	cmp	r3, #0
   a1326:	f040 816a 	bne.w	a15fe <dir_register+0x886>
		if (sector) {
   a132a:	f1b9 0f00 	cmp.w	r9, #0
   a132e:	d139      	bne.n	a13a4 <dir_register+0x62c>
			dir = dj->dir;
   a1330:	696e      	ldr	r6, [r5, #20]
   a1332:	2220      	movs	r2, #32
   a1334:	2100      	movs	r1, #0
   a1336:	4b3e      	ldr	r3, [pc, #248]	; (a1430 <dir_register+0x6b8>)
   a1338:	4630      	mov	r0, r6
   a133a:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   a133c:	69a9      	ldr	r1, [r5, #24]
   a133e:	f106 0308 	add.w	r3, r6, #8
   a1342:	f101 0208 	add.w	r2, r1, #8
   a1346:	4299      	cmp	r1, r3
   a1348:	bf38      	it	cc
   a134a:	4296      	cmpcc	r6, r2
   a134c:	f0c0 81e8 	bcc.w	a1720 <dir_register+0x9a8>
   a1350:	ea41 0306 	orr.w	r3, r1, r6
   a1354:	075b      	lsls	r3, r3, #29
   a1356:	f040 81e3 	bne.w	a1720 <dir_register+0x9a8>
		*d++ = *s++;
   a135a:	e9d1 2300 	ldrd	r2, r3, [r1]
   a135e:	e9c6 2300 	strd	r2, r3, [r6]
			dj->fs->wflag = 1;
   a1362:	2201      	movs	r2, #1
		*d++ = *s++;
   a1364:	7a0b      	ldrb	r3, [r1, #8]
   a1366:	7233      	strb	r3, [r6, #8]
   a1368:	7a4b      	ldrb	r3, [r1, #9]
   a136a:	7273      	strb	r3, [r6, #9]
   a136c:	7a8b      	ldrb	r3, [r1, #10]
   a136e:	72b3      	strb	r3, [r6, #10]
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   a1370:	69ab      	ldr	r3, [r5, #24]
   a1372:	7adb      	ldrb	r3, [r3, #11]
   a1374:	f003 0318 	and.w	r3, r3, #24
   a1378:	7333      	strb	r3, [r6, #12]
			dj->fs->wflag = 1;
   a137a:	682b      	ldr	r3, [r5, #0]
   a137c:	711a      	strb	r2, [r3, #4]
   a137e:	e54b      	b.n	a0e18 <dir_register+0xa0>
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   a1380:	f8d5 8010 	ldr.w	r8, [r5, #16]
   a1384:	f1b8 0f00 	cmp.w	r8, #0
   a1388:	f43f ad45 	beq.w	a0e16 <dir_register+0x9e>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   a138c:	f014 090f 	ands.w	r9, r4, #15
   a1390:	d02f      	beq.n	a13f2 <dir_register+0x67a>
   a1392:	682f      	ldr	r7, [r5, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   a1394:	f107 0330 	add.w	r3, r7, #48	; 0x30
   a1398:	eb03 1349 	add.w	r3, r3, r9, lsl #5
	dj->index = i;
   a139c:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   a139e:	46b3      	mov	fp, r6
   a13a0:	616b      	str	r3, [r5, #20]
   a13a2:	e513      	b.n	a0dcc <dir_register+0x54>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a13a4:	2301      	movs	r3, #1
   a13a6:	464a      	mov	r2, r9
   a13a8:	f106 0130 	add.w	r1, r6, #48	; 0x30
   a13ac:	7870      	ldrb	r0, [r6, #1]
   a13ae:	4f1e      	ldr	r7, [pc, #120]	; (a1428 <dir_register+0x6b0>)
   a13b0:	47b8      	blx	r7
   a13b2:	2800      	cmp	r0, #0
   a13b4:	f000 814b 	beq.w	a164e <dir_register+0x8d6>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   a13b8:	2401      	movs	r4, #1
}
   a13ba:	4620      	mov	r0, r4
   a13bc:	b00d      	add	sp, #52	; 0x34
   a13be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i && dst[j] != ' '; j++) {
   a13c2:	2303      	movs	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a13c4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   a13c8:	f103 0c01 	add.w	ip, r3, #1
   a13cc:	f881 e000 	strb.w	lr, [r1]
   a13d0:	e5df      	b.n	a0f92 <dir_register+0x21a>
	for (j = 0; j < i && dst[j] != ' '; j++) {
   a13d2:	2302      	movs	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a13d4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   a13d8:	f103 0c01 	add.w	ip, r3, #1
   a13dc:	f881 e000 	strb.w	lr, [r1]
   a13e0:	e5d7      	b.n	a0f92 <dir_register+0x21a>
	for (j = 0; j < i && dst[j] != ' '; j++) {
   a13e2:	2301      	movs	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   a13e4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   a13e8:	f103 0c01 	add.w	ip, r3, #1
   a13ec:	f881 e000 	strb.w	lr, [r1]
   a13f0:	e5cf      	b.n	a0f92 <dir_register+0x21a>
		if (dj->clust == 0) {	/* Static table */
   a13f2:	68e9      	ldr	r1, [r5, #12]
		dj->sect++;					/* Next sector */
   a13f4:	f108 0801 	add.w	r8, r8, #1
   a13f8:	f8c5 8010 	str.w	r8, [r5, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   a13fc:	682f      	ldr	r7, [r5, #0]
		if (dj->clust == 0) {	/* Static table */
   a13fe:	b161      	cbz	r1, a141a <dir_register+0x6a2>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   a1400:	78bb      	ldrb	r3, [r7, #2]
   a1402:	3b01      	subs	r3, #1
   a1404:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
   a1408:	d1c4      	bne.n	a1394 <dir_register+0x61c>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   a140a:	2901      	cmp	r1, #1
   a140c:	d903      	bls.n	a1416 <dir_register+0x69e>
   a140e:	69bb      	ldr	r3, [r7, #24]
   a1410:	4299      	cmp	r1, r3
   a1412:	f0c0 811f 	bcc.w	a1654 <dir_register+0x8dc>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   a1416:	2402      	movs	r4, #2
   a1418:	e4fe      	b.n	a0e18 <dir_register+0xa0>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   a141a:	893b      	ldrh	r3, [r7, #8]
   a141c:	42a3      	cmp	r3, r4
   a141e:	f67f acfa 	bls.w	a0e16 <dir_register+0x9e>
   a1422:	e7b7      	b.n	a1394 <dir_register+0x61c>
   a1424:	0009f3fd 	.word	0x0009f3fd
   a1428:	0009f389 	.word	0x0009f389
   a142c:	000a09a9 	.word	0x000a09a9
   a1430:	000a5a25 	.word	0x000a5a25
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a1434:	f106 0a30 	add.w	sl, r6, #48	; 0x30
   a1438:	4651      	mov	r1, sl
   a143a:	2301      	movs	r3, #1
   a143c:	7870      	ldrb	r0, [r6, #1]
   a143e:	4cc3      	ldr	r4, [pc, #780]	; (a174c <dir_register+0x9d4>)
   a1440:	4690      	mov	r8, r2
   a1442:	47a0      	blx	r4
   a1444:	2800      	cmp	r0, #0
   a1446:	d1b7      	bne.n	a13b8 <dir_register+0x640>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a1448:	69f3      	ldr	r3, [r6, #28]
   a144a:	6a32      	ldr	r2, [r6, #32]
			fs->wflag = 0;
   a144c:	7130      	strb	r0, [r6, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a144e:	441a      	add	r2, r3
   a1450:	4590      	cmp	r8, r2
   a1452:	4644      	mov	r4, r8
   a1454:	f4bf aef8 	bcs.w	a1248 <dir_register+0x4d0>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1458:	f896 8003 	ldrb.w	r8, [r6, #3]
   a145c:	f1b8 0f01 	cmp.w	r8, #1
   a1460:	f67f aef2 	bls.w	a1248 <dir_register+0x4d0>
   a1464:	9502      	str	r5, [sp, #8]
   a1466:	e000      	b.n	a146a <dir_register+0x6f2>
   a1468:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
   a146a:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a146c:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   a1470:	4622      	mov	r2, r4
   a1472:	2301      	movs	r3, #1
   a1474:	4651      	mov	r1, sl
   a1476:	7870      	ldrb	r0, [r6, #1]
   a1478:	4db4      	ldr	r5, [pc, #720]	; (a174c <dir_register+0x9d4>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a147a:	fa5f f888 	uxtb.w	r8, r8
					disk_write(fs->drv, fs->win, wsect, 1);
   a147e:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1480:	f1b8 0f01 	cmp.w	r8, #1
   a1484:	d1f0      	bne.n	a1468 <dir_register+0x6f0>
   a1486:	9d02      	ldr	r5, [sp, #8]
   a1488:	e6de      	b.n	a1248 <dir_register+0x4d0>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a148a:	f10e 0201 	add.w	r2, lr, #1
   a148e:	f830 c012 	ldrh.w	ip, [r0, r2, lsl #1]
   a1492:	0052      	lsls	r2, r2, #1
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1494:	f10c 3eff 	add.w	lr, ip, #4294967295
   a1498:	fa1f fe8e 	uxth.w	lr, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a149c:	ea4f 281c 	mov.w	r8, ip, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a14a0:	458e      	cmp	lr, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a14a2:	f883 c003 	strb.w	ip, [r3, #3]
   a14a6:	f883 8004 	strb.w	r8, [r3, #4]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a14aa:	f63f af02 	bhi.w	a12b2 <dir_register+0x53a>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a14ae:	4402      	add	r2, r0
   a14b0:	f8b2 c002 	ldrh.w	ip, [r2, #2]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a14b4:	f10c 3eff 	add.w	lr, ip, #4294967295
   a14b8:	fa1f fe8e 	uxth.w	lr, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a14bc:	ea4f 281c 	mov.w	r8, ip, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a14c0:	458e      	cmp	lr, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a14c2:	f883 c005 	strb.w	ip, [r3, #5]
   a14c6:	f883 8006 	strb.w	r8, [r3, #6]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a14ca:	f63f aef5 	bhi.w	a12b8 <dir_register+0x540>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a14ce:	f8b2 c004 	ldrh.w	ip, [r2, #4]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a14d2:	f10c 3eff 	add.w	lr, ip, #4294967295
   a14d6:	fa1f fe8e 	uxth.w	lr, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a14da:	ea4f 281c 	mov.w	r8, ip, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a14de:	458e      	cmp	lr, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a14e0:	f883 c007 	strb.w	ip, [r3, #7]
   a14e4:	f883 8008 	strb.w	r8, [r3, #8]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a14e8:	f63f aee9 	bhi.w	a12be <dir_register+0x546>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a14ec:	f8b2 c006 	ldrh.w	ip, [r2, #6]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a14f0:	f10c 3eff 	add.w	lr, ip, #4294967295
   a14f4:	fa1f fe8e 	uxth.w	lr, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a14f8:	ea4f 281c 	mov.w	r8, ip, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a14fc:	458e      	cmp	lr, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a14fe:	f883 c009 	strb.w	ip, [r3, #9]
   a1502:	f883 800a 	strb.w	r8, [r3, #10]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1506:	f63f aedd 	bhi.w	a12c4 <dir_register+0x54c>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a150a:	f8b2 c008 	ldrh.w	ip, [r2, #8]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a150e:	f10c 3eff 	add.w	lr, ip, #4294967295
   a1512:	fa1f fe8e 	uxth.w	lr, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a1516:	ea4f 281c 	mov.w	r8, ip, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a151a:	458e      	cmp	lr, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a151c:	f883 c00e 	strb.w	ip, [r3, #14]
   a1520:	f883 800f 	strb.w	r8, [r3, #15]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1524:	f63f aed1 	bhi.w	a12ca <dir_register+0x552>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a1528:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a152c:	f10c 3eff 	add.w	lr, ip, #4294967295
   a1530:	fa1f fe8e 	uxth.w	lr, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a1534:	ea4f 281c 	mov.w	r8, ip, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1538:	458e      	cmp	lr, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a153a:	f883 c010 	strb.w	ip, [r3, #16]
   a153e:	f883 8011 	strb.w	r8, [r3, #17]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1542:	f63f aec5 	bhi.w	a12d0 <dir_register+0x558>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a1546:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a154a:	f10c 3eff 	add.w	lr, ip, #4294967295
   a154e:	fa1f fe8e 	uxth.w	lr, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a1552:	ea4f 281c 	mov.w	r8, ip, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1556:	458e      	cmp	lr, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a1558:	f883 c012 	strb.w	ip, [r3, #18]
   a155c:	f883 8013 	strb.w	r8, [r3, #19]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1560:	f63f aeb9 	bhi.w	a12d6 <dir_register+0x55e>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a1564:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1568:	f10c 3eff 	add.w	lr, ip, #4294967295
   a156c:	fa1f fe8e 	uxth.w	lr, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a1570:	ea4f 281c 	mov.w	r8, ip, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1574:	458e      	cmp	lr, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a1576:	f883 c014 	strb.w	ip, [r3, #20]
   a157a:	f883 8015 	strb.w	r8, [r3, #21]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a157e:	f63f aead 	bhi.w	a12dc <dir_register+0x564>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a1582:	f8b2 c010 	ldrh.w	ip, [r2, #16]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1586:	f10c 3eff 	add.w	lr, ip, #4294967295
   a158a:	fa1f fe8e 	uxth.w	lr, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a158e:	ea4f 281c 	mov.w	r8, ip, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a1592:	458e      	cmp	lr, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a1594:	f883 c016 	strb.w	ip, [r3, #22]
   a1598:	f883 8017 	strb.w	r8, [r3, #23]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a159c:	f63f aea1 	bhi.w	a12e2 <dir_register+0x56a>
   a15a0:	f64f 7efd 	movw	lr, #65533	; 0xfffd
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a15a4:	8a51      	ldrh	r1, [r2, #18]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a15a6:	f101 3cff 	add.w	ip, r1, #4294967295
   a15aa:	fa1f fc8c 	uxth.w	ip, ip
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a15ae:	7619      	strb	r1, [r3, #24]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a15b0:	45f4      	cmp	ip, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a15b2:	ea4f 2111 	mov.w	r1, r1, lsr #8
   a15b6:	7659      	strb	r1, [r3, #25]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a15b8:	f63f ae96 	bhi.w	a12e8 <dir_register+0x570>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a15bc:	f8b2 c014 	ldrh.w	ip, [r2, #20]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a15c0:	f10c 31ff 	add.w	r1, ip, #4294967295
   a15c4:	b289      	uxth	r1, r1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a15c6:	ea4f 281c 	mov.w	r8, ip, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a15ca:	4571      	cmp	r1, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a15cc:	f883 c01c 	strb.w	ip, [r3, #28]
   a15d0:	f883 801d 	strb.w	r8, [r3, #29]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a15d4:	f63f ae8b 	bhi.w	a12ee <dir_register+0x576>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   a15d8:	8ad1      	ldrh	r1, [r2, #22]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a15da:	1e4a      	subs	r2, r1, #1
   a15dc:	b292      	uxth	r2, r2
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a15de:	ea4f 2c11 	mov.w	ip, r1, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a15e2:	4572      	cmp	r2, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   a15e4:	7799      	strb	r1, [r3, #30]
   a15e6:	f883 c01f 	strb.w	ip, [r3, #31]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   a15ea:	f63f ae83 	bhi.w	a12f4 <dir_register+0x57c>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   a15ee:	4430      	add	r0, r6
   a15f0:	8b42      	ldrh	r2, [r0, #26]
   a15f2:	2a00      	cmp	r2, #0
   a15f4:	f43f ae7e 	beq.w	a12f4 <dir_register+0x57c>
   a15f8:	e67e      	b.n	a12f8 <dir_register+0x580>
				res = dir_next(dj, 0);	/* Next entry */
   a15fa:	4604      	mov	r4, r0
   a15fc:	e40c      	b.n	a0e18 <dir_register+0xa0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a15fe:	f106 0a30 	add.w	sl, r6, #48	; 0x30
   a1602:	4651      	mov	r1, sl
   a1604:	2301      	movs	r3, #1
   a1606:	463a      	mov	r2, r7
   a1608:	7870      	ldrb	r0, [r6, #1]
   a160a:	f8df b140 	ldr.w	fp, [pc, #320]	; a174c <dir_register+0x9d4>
   a160e:	47d8      	blx	fp
   a1610:	2800      	cmp	r0, #0
   a1612:	f47f aed1 	bne.w	a13b8 <dir_register+0x640>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a1616:	69f3      	ldr	r3, [r6, #28]
   a1618:	6a32      	ldr	r2, [r6, #32]
			fs->wflag = 0;
   a161a:	7130      	strb	r0, [r6, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a161c:	441a      	add	r2, r3
   a161e:	4297      	cmp	r7, r2
   a1620:	f4bf ae83 	bcs.w	a132a <dir_register+0x5b2>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1624:	f896 8003 	ldrb.w	r8, [r6, #3]
   a1628:	f1b8 0f01 	cmp.w	r8, #1
   a162c:	d801      	bhi.n	a1632 <dir_register+0x8ba>
   a162e:	e67c      	b.n	a132a <dir_register+0x5b2>
   a1630:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
   a1632:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1634:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   a1638:	463a      	mov	r2, r7
   a163a:	2301      	movs	r3, #1
   a163c:	4651      	mov	r1, sl
   a163e:	7870      	ldrb	r0, [r6, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1640:	fa5f f888 	uxtb.w	r8, r8
					disk_write(fs->drv, fs->win, wsect, 1);
   a1644:	47d8      	blx	fp
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1646:	f1b8 0f01 	cmp.w	r8, #1
   a164a:	d1f1      	bne.n	a1630 <dir_register+0x8b8>
   a164c:	e66d      	b.n	a132a <dir_register+0x5b2>
			fs->winsect = sector;
   a164e:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c
   a1652:	e66d      	b.n	a1330 <dir_register+0x5b8>
   a1654:	4638      	mov	r0, r7
   a1656:	4b3e      	ldr	r3, [pc, #248]	; (a1750 <dir_register+0x9d8>)
   a1658:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
   a165a:	2801      	cmp	r0, #1
   a165c:	4680      	mov	r8, r0
   a165e:	f67f aeda 	bls.w	a1416 <dir_register+0x69e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   a1662:	f1b0 3fff 	cmp.w	r0, #4294967295
   a1666:	f43f aea7 	beq.w	a13b8 <dir_register+0x640>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   a166a:	682f      	ldr	r7, [r5, #0]
   a166c:	69bb      	ldr	r3, [r7, #24]
   a166e:	4298      	cmp	r0, r3
   a1670:	d344      	bcc.n	a16fc <dir_register+0x984>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   a1672:	4638      	mov	r0, r7
   a1674:	68e9      	ldr	r1, [r5, #12]
   a1676:	4b37      	ldr	r3, [pc, #220]	; (a1754 <dir_register+0x9dc>)
   a1678:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   a167a:	4680      	mov	r8, r0
   a167c:	2800      	cmp	r0, #0
   a167e:	f43f acc9 	beq.w	a1014 <dir_register+0x29c>
					if (clst == 1) return FR_INT_ERR;
   a1682:	2801      	cmp	r0, #1
   a1684:	f43f aec7 	beq.w	a1416 <dir_register+0x69e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   a1688:	f1b0 3fff 	cmp.w	r0, #4294967295
   a168c:	f43f ae94 	beq.w	a13b8 <dir_register+0x640>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   a1690:	2100      	movs	r1, #0
   a1692:	6828      	ldr	r0, [r5, #0]
   a1694:	4b30      	ldr	r3, [pc, #192]	; (a1758 <dir_register+0x9e0>)
   a1696:	4798      	blx	r3
   a1698:	4607      	mov	r7, r0
   a169a:	2800      	cmp	r0, #0
   a169c:	f47f ae8c 	bne.w	a13b8 <dir_register+0x640>
		*d++ = (BYTE)val;
   a16a0:	6828      	ldr	r0, [r5, #0]
   a16a2:	f44f 7200 	mov.w	r2, #512	; 0x200
   a16a6:	4b2d      	ldr	r3, [pc, #180]	; (a175c <dir_register+0x9e4>)
   a16a8:	3030      	adds	r0, #48	; 0x30
   a16aa:	4639      	mov	r1, r7
   a16ac:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   a16ae:	682a      	ldr	r2, [r5, #0]
	clst -= 2;
   a16b0:	f1a8 0b02 	sub.w	fp, r8, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a16b4:	6993      	ldr	r3, [r2, #24]
   a16b6:	3b02      	subs	r3, #2
   a16b8:	459b      	cmp	fp, r3
   a16ba:	d203      	bcs.n	a16c4 <dir_register+0x94c>
	return clst * fs->csize + fs->database;
   a16bc:	7897      	ldrb	r7, [r2, #2]
   a16be:	6a93      	ldr	r3, [r2, #40]	; 0x28
   a16c0:	fb0b 3707 	mla	r7, fp, r7, r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   a16c4:	62d7      	str	r7, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   a16c6:	682a      	ldr	r2, [r5, #0]
   a16c8:	7897      	ldrb	r7, [r2, #2]
   a16ca:	2f00      	cmp	r7, #0
   a16cc:	d039      	beq.n	a1742 <dir_register+0x9ca>
   a16ce:	2700      	movs	r7, #0
						dj->fs->wflag = 1;
   a16d0:	2301      	movs	r3, #1
   a16d2:	e008      	b.n	a16e6 <dir_register+0x96e>
						dj->fs->winsect++;
   a16d4:	6829      	ldr	r1, [r5, #0]
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   a16d6:	9b05      	ldr	r3, [sp, #20]
						dj->fs->winsect++;
   a16d8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   a16da:	3201      	adds	r2, #1
   a16dc:	62ca      	str	r2, [r1, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   a16de:	682a      	ldr	r2, [r5, #0]
   a16e0:	7891      	ldrb	r1, [r2, #2]
   a16e2:	42b9      	cmp	r1, r7
   a16e4:	d92d      	bls.n	a1742 <dir_register+0x9ca>
						dj->fs->wflag = 1;
   a16e6:	7113      	strb	r3, [r2, #4]
   a16e8:	9305      	str	r3, [sp, #20]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   a16ea:	6828      	ldr	r0, [r5, #0]
   a16ec:	2100      	movs	r1, #0
   a16ee:	4b1a      	ldr	r3, [pc, #104]	; (a1758 <dir_register+0x9e0>)
   a16f0:	4798      	blx	r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   a16f2:	3701      	adds	r7, #1
   a16f4:	b2ff      	uxtb	r7, r7
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   a16f6:	2800      	cmp	r0, #0
   a16f8:	d0ec      	beq.n	a16d4 <dir_register+0x95c>
   a16fa:	e65d      	b.n	a13b8 <dir_register+0x640>
   a16fc:	f1a0 0b02 	sub.w	fp, r0, #2
				dj->clust = clst;				/* Initialize data for new cluster */
   a1700:	f8c5 800c 	str.w	r8, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a1704:	69bb      	ldr	r3, [r7, #24]
   a1706:	3b02      	subs	r3, #2
   a1708:	455b      	cmp	r3, fp
   a170a:	bf91      	iteee	ls
   a170c:	f04f 0800 	movls.w	r8, #0
	return clst * fs->csize + fs->database;
   a1710:	f897 8002 	ldrbhi.w	r8, [r7, #2]
   a1714:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
   a1716:	fb0b 3808 	mlahi	r8, fp, r8, r3
				dj->sect = clust2sect(dj->fs, clst);
   a171a:	f8c5 8010 	str.w	r8, [r5, #16]
   a171e:	e639      	b.n	a1394 <dir_register+0x61c>
		*d++ = *s++;
   a1720:	780b      	ldrb	r3, [r1, #0]
   a1722:	7033      	strb	r3, [r6, #0]
   a1724:	784b      	ldrb	r3, [r1, #1]
   a1726:	7073      	strb	r3, [r6, #1]
   a1728:	788b      	ldrb	r3, [r1, #2]
   a172a:	70b3      	strb	r3, [r6, #2]
   a172c:	78cb      	ldrb	r3, [r1, #3]
   a172e:	70f3      	strb	r3, [r6, #3]
   a1730:	790b      	ldrb	r3, [r1, #4]
   a1732:	7133      	strb	r3, [r6, #4]
   a1734:	794b      	ldrb	r3, [r1, #5]
   a1736:	7173      	strb	r3, [r6, #5]
   a1738:	798b      	ldrb	r3, [r1, #6]
   a173a:	71b3      	strb	r3, [r6, #6]
   a173c:	79cb      	ldrb	r3, [r1, #7]
   a173e:	71f3      	strb	r3, [r6, #7]
   a1740:	e60f      	b.n	a1362 <dir_register+0x5ea>
					dj->fs->winsect -= c;						/* Rewind window address */
   a1742:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   a1744:	1bdf      	subs	r7, r3, r7
   a1746:	62d7      	str	r7, [r2, #44]	; 0x2c
   a1748:	682f      	ldr	r7, [r5, #0]
   a174a:	e7d9      	b.n	a1700 <dir_register+0x988>
   a174c:	0009f3fd 	.word	0x0009f3fd
   a1750:	0009ff29 	.word	0x0009ff29
   a1754:	000a028d 	.word	0x000a028d
   a1758:	0009f799 	.word	0x0009f799
   a175c:	000a5a25 	.word	0x000a5a25

000a1760 <follow_path>:
{
   a1760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   a1764:	780b      	ldrb	r3, [r1, #0]
{
   a1766:	b083      	sub	sp, #12
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   a1768:	2b2f      	cmp	r3, #47	; 0x2f
{
   a176a:	460c      	mov	r4, r1
   a176c:	4681      	mov	r9, r0
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   a176e:	f000 812e 	beq.w	a19ce <follow_path+0x26e>
   a1772:	2b5c      	cmp	r3, #92	; 0x5c
   a1774:	f000 812b 	beq.w	a19ce <follow_path+0x26e>
	dj->sclust = 0;						/* Start from the root dir */
   a1778:	2500      	movs	r5, #0
   a177a:	f8c9 5008 	str.w	r5, [r9, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   a177e:	7823      	ldrb	r3, [r4, #0]
   a1780:	2b1f      	cmp	r3, #31
   a1782:	f240 812c 	bls.w	a19de <follow_path+0x27e>
   a1786:	4faf      	ldr	r7, [pc, #700]	; (a1a44 <follow_path+0x2e4>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   a1788:	4623      	mov	r3, r4
   a178a:	f813 0b01 	ldrb.w	r0, [r3], #1
   a178e:	4625      	mov	r5, r4
   a1790:	282f      	cmp	r0, #47	; 0x2f
   a1792:	d001      	beq.n	a1798 <follow_path+0x38>
   a1794:	285c      	cmp	r0, #92	; 0x5c
   a1796:	d101      	bne.n	a179c <follow_path+0x3c>
{
   a1798:	461c      	mov	r4, r3
   a179a:	e7f5      	b.n	a1788 <follow_path+0x28>
		w = p[si++];					/* Get a character */
   a179c:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   a179e:	281f      	cmp	r0, #31
	lfn = dj->lfn;
   a17a0:	f8d9 801c 	ldr.w	r8, [r9, #28]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   a17a4:	d92c      	bls.n	a1800 <follow_path+0xa0>
   a17a6:	282f      	cmp	r0, #47	; 0x2f
   a17a8:	d02a      	beq.n	a1800 <follow_path+0xa0>
   a17aa:	285c      	cmp	r0, #92	; 0x5c
   a17ac:	d028      	beq.n	a1800 <follow_path+0xa0>
   a17ae:	f1a8 0602 	sub.w	r6, r8, #2
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   a17b2:	2101      	movs	r1, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   a17b4:	46b3      	mov	fp, r6
   a17b6:	f04f 0a01 	mov.w	sl, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   a17ba:	47b8      	blx	r7
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   a17bc:	b300      	cbz	r0, a1800 <follow_path+0xa0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   a17be:	287f      	cmp	r0, #127	; 0x7f
   a17c0:	d809      	bhi.n	a17d6 <follow_path+0x76>
	while (*str && *str != chr) str++;
   a17c2:	2822      	cmp	r0, #34	; 0x22
   a17c4:	d01c      	beq.n	a1800 <follow_path+0xa0>
   a17c6:	232a      	movs	r3, #42	; 0x2a
   a17c8:	4a9f      	ldr	r2, [pc, #636]	; (a1a48 <follow_path+0x2e8>)
   a17ca:	4298      	cmp	r0, r3
   a17cc:	d018      	beq.n	a1800 <follow_path+0xa0>
   a17ce:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   a17d2:	2b00      	cmp	r3, #0
   a17d4:	d1f9      	bne.n	a17ca <follow_path+0x6a>
		lfn[di++] = w;					/* Store the Unicode char */
   a17d6:	f82b 0f02 	strh.w	r0, [fp, #2]!
		w = p[si++];					/* Get a character */
   a17da:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   a17de:	f10a 0301 	add.w	r3, sl, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   a17e2:	281f      	cmp	r0, #31
   a17e4:	f240 80cf 	bls.w	a1986 <follow_path+0x226>
   a17e8:	282f      	cmp	r0, #47	; 0x2f
   a17ea:	d00d      	beq.n	a1808 <follow_path+0xa8>
   a17ec:	285c      	cmp	r0, #92	; 0x5c
   a17ee:	d00b      	beq.n	a1808 <follow_path+0xa8>
		if (di >= _MAX_LFN)				/* Reject too long name */
   a17f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   a17f4:	d004      	beq.n	a1800 <follow_path+0xa0>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   a17f6:	2101      	movs	r1, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   a17f8:	469a      	mov	sl, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   a17fa:	47b8      	blx	r7
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   a17fc:	2800      	cmp	r0, #0
   a17fe:	d1de      	bne.n	a17be <follow_path+0x5e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   a1800:	2006      	movs	r0, #6
}
   a1802:	b003      	add	sp, #12
   a1804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   a1808:	f04f 0b00 	mov.w	fp, #0
	*path = &p[si];						/* Return pointer to the next segment */
   a180c:	18ec      	adds	r4, r5, r3
   a180e:	eb08 024a 	add.w	r2, r8, sl, lsl #1
		w = lfn[di-1];
   a1812:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
   a1816:	2b20      	cmp	r3, #32
   a1818:	d001      	beq.n	a181e <follow_path+0xbe>
   a181a:	2b2e      	cmp	r3, #46	; 0x2e
   a181c:	d103      	bne.n	a1826 <follow_path+0xc6>
	while (di) {						/* Strip trailing spaces and dots */
   a181e:	f1ba 0a01 	subs.w	sl, sl, #1
   a1822:	d1f6      	bne.n	a1812 <follow_path+0xb2>
   a1824:	e7ec      	b.n	a1800 <follow_path+0xa0>
	lfn[di] = 0;						/* LFN is created */
   a1826:	2500      	movs	r5, #0
		*d++ = (BYTE)val;
   a1828:	2220      	movs	r2, #32
	lfn[di] = 0;						/* LFN is created */
   a182a:	f828 501a 	strh.w	r5, [r8, sl, lsl #1]
	mem_set(dj->fn, ' ', 11);
   a182e:	f8d9 3018 	ldr.w	r3, [r9, #24]
		*d++ = (BYTE)val;
   a1832:	701a      	strb	r2, [r3, #0]
   a1834:	705a      	strb	r2, [r3, #1]
   a1836:	709a      	strb	r2, [r3, #2]
   a1838:	70da      	strb	r2, [r3, #3]
   a183a:	711a      	strb	r2, [r3, #4]
   a183c:	715a      	strb	r2, [r3, #5]
   a183e:	719a      	strb	r2, [r3, #6]
   a1840:	71da      	strb	r2, [r3, #7]
   a1842:	721a      	strb	r2, [r3, #8]
   a1844:	725a      	strb	r2, [r3, #9]
   a1846:	729a      	strb	r2, [r3, #10]
	lfn[di] = 0;						/* LFN is created */
   a1848:	eb08 034a 	add.w	r3, r8, sl, lsl #1
   a184c:	e000      	b.n	a1850 <follow_path+0xf0>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   a184e:	3501      	adds	r5, #1
   a1850:	f836 0f02 	ldrh.w	r0, [r6, #2]!
   a1854:	2820      	cmp	r0, #32
   a1856:	d0fa      	beq.n	a184e <follow_path+0xee>
   a1858:	282e      	cmp	r0, #46	; 0x2e
   a185a:	d0f8      	beq.n	a184e <follow_path+0xee>
	if (si) cf |= NS_LOSS | NS_LFN;
   a185c:	b10d      	cbz	r5, a1862 <follow_path+0x102>
   a185e:	f04b 0b03 	orr.w	fp, fp, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   a1862:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
   a1866:	2a2e      	cmp	r2, #46	; 0x2e
   a1868:	d002      	beq.n	a1870 <follow_path+0x110>
   a186a:	f1ba 0a01 	subs.w	sl, sl, #1
   a186e:	d1f8      	bne.n	a1862 <follow_path+0x102>
		dj->fn[i++] = (BYTE)w;
   a1870:	2300      	movs	r3, #0
   a1872:	4621      	mov	r1, r4
   a1874:	461e      	mov	r6, r3
   a1876:	4644      	mov	r4, r8
   a1878:	2208      	movs	r2, #8
   a187a:	4698      	mov	r8, r3
   a187c:	460b      	mov	r3, r1
		w = lfn[si++];					/* Get an LFN char */
   a187e:	3501      	adds	r5, #1
		if (!w) break;					/* Break on end of the LFN */
   a1880:	b390      	cbz	r0, a18e8 <follow_path+0x188>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   a1882:	2820      	cmp	r0, #32
   a1884:	d023      	beq.n	a18ce <follow_path+0x16e>
   a1886:	282e      	cmp	r0, #46	; 0x2e
   a1888:	d01f      	beq.n	a18ca <follow_path+0x16a>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   a188a:	4590      	cmp	r8, r2
   a188c:	d224      	bcs.n	a18d8 <follow_path+0x178>
   a188e:	4555      	cmp	r5, sl
   a1890:	d07d      	beq.n	a198e <follow_path+0x22e>
		if (w >= 0x80) {				/* Non ASCII char */
   a1892:	287f      	cmp	r0, #127	; 0x7f
   a1894:	f200 8087 	bhi.w	a19a6 <follow_path+0x246>
	while (*str && *str != chr) str++;
   a1898:	282b      	cmp	r0, #43	; 0x2b
   a189a:	d00a      	beq.n	a18b2 <follow_path+0x152>
   a189c:	212c      	movs	r1, #44	; 0x2c
   a189e:	f8df e1b8 	ldr.w	lr, [pc, #440]	; a1a58 <follow_path+0x2f8>
   a18a2:	e004      	b.n	a18ae <follow_path+0x14e>
   a18a4:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   a18a8:	2900      	cmp	r1, #0
   a18aa:	f000 80a6 	beq.w	a19fa <follow_path+0x29a>
   a18ae:	4281      	cmp	r1, r0
   a18b0:	d1f8      	bne.n	a18a4 <follow_path+0x144>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   a18b2:	205f      	movs	r0, #95	; 0x5f
   a18b4:	f04b 0b03 	orr.w	fp, fp, #3
		dj->fn[i++] = (BYTE)w;
   a18b8:	f8d9 1018 	ldr.w	r1, [r9, #24]
   a18bc:	f801 0008 	strb.w	r0, [r1, r8]
   a18c0:	f108 0801 	add.w	r8, r8, #1
   a18c4:	f834 0015 	ldrh.w	r0, [r4, r5, lsl #1]
   a18c8:	e7d9      	b.n	a187e <follow_path+0x11e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   a18ca:	4555      	cmp	r5, sl
   a18cc:	d002      	beq.n	a18d4 <follow_path+0x174>
			cf |= NS_LOSS | NS_LFN; continue;
   a18ce:	f04b 0b03 	orr.w	fp, fp, #3
   a18d2:	e7f7      	b.n	a18c4 <follow_path+0x164>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   a18d4:	4590      	cmp	r8, r2
   a18d6:	d35a      	bcc.n	a198e <follow_path+0x22e>
			if (ni == 11) {				/* Long extension */
   a18d8:	2a0b      	cmp	r2, #11
   a18da:	f000 80a4 	beq.w	a1a26 <follow_path+0x2c6>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   a18de:	4555      	cmp	r5, sl
   a18e0:	d057      	beq.n	a1992 <follow_path+0x232>
   a18e2:	f04b 0b03 	orr.w	fp, fp, #3
			if (si > di) break;			/* No extension */
   a18e6:	d954      	bls.n	a1992 <follow_path+0x232>
   a18e8:	461c      	mov	r4, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   a18ea:	f8d9 3018 	ldr.w	r3, [r9, #24]
   a18ee:	7819      	ldrb	r1, [r3, #0]
   a18f0:	29e5      	cmp	r1, #229	; 0xe5
   a18f2:	d07d      	beq.n	a19f0 <follow_path+0x290>
	if (ni == 8) b <<= 2;
   a18f4:	2a08      	cmp	r2, #8
   a18f6:	bf04      	itt	eq
   a18f8:	00b6      	lsleq	r6, r6, #2
   a18fa:	b2f6      	uxtbeq	r6, r6
   a18fc:	f006 020c 	and.w	r2, r6, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   a1900:	2a0c      	cmp	r2, #12
   a1902:	d04d      	beq.n	a19a0 <follow_path+0x240>
   a1904:	f006 0103 	and.w	r1, r6, #3
   a1908:	2903      	cmp	r1, #3
   a190a:	d049      	beq.n	a19a0 <follow_path+0x240>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   a190c:	f01b 0f02 	tst.w	fp, #2
   a1910:	d109      	bne.n	a1926 <follow_path+0x1c6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   a1912:	f006 0603 	and.w	r6, r6, #3
   a1916:	2e01      	cmp	r6, #1
   a1918:	bf08      	it	eq
   a191a:	f04b 0b10 	orreq.w	fp, fp, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   a191e:	2a04      	cmp	r2, #4
   a1920:	bf08      	it	eq
   a1922:	f04b 0b08 	orreq.w	fp, fp, #8
	dj->fn[NS] = cf;	/* SFN is created */
   a1926:	f883 b00b 	strb.w	fp, [r3, #11]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   a192a:	2100      	movs	r1, #0
   a192c:	4648      	mov	r0, r9
   a192e:	4b47      	ldr	r3, [pc, #284]	; (a1a4c <follow_path+0x2ec>)
   a1930:	4798      	blx	r3
	if (res != FR_OK) return res;
   a1932:	b9d8      	cbnz	r0, a196c <follow_path+0x20c>
   a1934:	4b46      	ldr	r3, [pc, #280]	; (a1a50 <follow_path+0x2f0>)
   a1936:	4648      	mov	r0, r9
   a1938:	4798      	blx	r3
			ns = *(dj->fn+NS);
   a193a:	f8d9 3018 	ldr.w	r3, [r9, #24]
   a193e:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   a1940:	b9b8      	cbnz	r0, a1972 <follow_path+0x212>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   a1942:	0759      	lsls	r1, r3, #29
   a1944:	f53f af5d 	bmi.w	a1802 <follow_path+0xa2>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   a1948:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   a194c:	7ada      	ldrb	r2, [r3, #11]
   a194e:	06d2      	lsls	r2, r2, #27
   a1950:	d55b      	bpl.n	a1a0a <follow_path+0x2aa>
			dj->sclust = LD_CLUST(dir);
   a1952:	7d58      	ldrb	r0, [r3, #21]
   a1954:	7d1a      	ldrb	r2, [r3, #20]
   a1956:	7ed9      	ldrb	r1, [r3, #27]
   a1958:	7e9b      	ldrb	r3, [r3, #26]
   a195a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   a195e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   a1962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   a1966:	f8c9 3008 	str.w	r3, [r9, #8]
			res = create_name(dj, &path);	/* Get a segment */
   a196a:	e70d      	b.n	a1788 <follow_path+0x28>
			ns = *(dj->fn+NS);
   a196c:	f8d9 3018 	ldr.w	r3, [r9, #24]
   a1970:	7adb      	ldrb	r3, [r3, #11]
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   a1972:	2804      	cmp	r0, #4
   a1974:	f47f af45 	bne.w	a1802 <follow_path+0xa2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   a1978:	f013 0f04 	tst.w	r3, #4
   a197c:	bf08      	it	eq
   a197e:	2005      	moveq	r0, #5
}
   a1980:	b003      	add	sp, #12
   a1982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*path = &p[si];						/* Return pointer to the next segment */
   a1986:	18ec      	adds	r4, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   a1988:	f04f 0b04 	mov.w	fp, #4
   a198c:	e73f      	b.n	a180e <follow_path+0xae>
			if (ni == 11) {				/* Long extension */
   a198e:	2a0b      	cmp	r2, #11
   a1990:	d049      	beq.n	a1a26 <follow_path+0x2c6>
			b <<= 2; continue;
   a1992:	00b6      	lsls	r6, r6, #2
   a1994:	b2f6      	uxtb	r6, r6
   a1996:	4655      	mov	r5, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
   a1998:	220b      	movs	r2, #11
   a199a:	f04f 0808 	mov.w	r8, #8
   a199e:	e791      	b.n	a18c4 <follow_path+0x164>
		cf |= NS_LFN;
   a19a0:	f04b 0b02 	orr.w	fp, fp, #2
   a19a4:	e7b2      	b.n	a190c <follow_path+0x1ac>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   a19a6:	2100      	movs	r1, #0
   a19a8:	e88d 000c 	stmia.w	sp, {r2, r3}
   a19ac:	47b8      	blx	r7
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   a19ae:	e89d 000c 	ldmia.w	sp, {r2, r3}
   a19b2:	b148      	cbz	r0, a19c8 <follow_path+0x268>
   a19b4:	4927      	ldr	r1, [pc, #156]	; (a1a54 <follow_path+0x2f4>)
			cf |= NS_LFN;				/* Force create LFN entry */
   a19b6:	f04b 0b02 	orr.w	fp, fp, #2
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   a19ba:	4408      	add	r0, r1
   a19bc:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   a19c0:	2800      	cmp	r0, #0
   a19c2:	f43f af76 	beq.w	a18b2 <follow_path+0x152>
   a19c6:	e767      	b.n	a1898 <follow_path+0x138>
			cf |= NS_LFN;				/* Force create LFN entry */
   a19c8:	f04b 0b02 	orr.w	fp, fp, #2
   a19cc:	e771      	b.n	a18b2 <follow_path+0x152>
	dj->sclust = 0;						/* Start from the root dir */
   a19ce:	2500      	movs	r5, #0
		path++;
   a19d0:	3401      	adds	r4, #1
	dj->sclust = 0;						/* Start from the root dir */
   a19d2:	f8c9 5008 	str.w	r5, [r9, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   a19d6:	7823      	ldrb	r3, [r4, #0]
   a19d8:	2b1f      	cmp	r3, #31
   a19da:	f63f aed4 	bhi.w	a1786 <follow_path+0x26>
		res = dir_sdi(dj, 0);
   a19de:	4629      	mov	r1, r5
   a19e0:	4648      	mov	r0, r9
   a19e2:	4b1a      	ldr	r3, [pc, #104]	; (a1a4c <follow_path+0x2ec>)
   a19e4:	4798      	blx	r3
		dj->dir = 0;
   a19e6:	f8c9 5014 	str.w	r5, [r9, #20]
}
   a19ea:	b003      	add	sp, #12
   a19ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   a19f0:	2105      	movs	r1, #5
   a19f2:	7019      	strb	r1, [r3, #0]
   a19f4:	f8d9 3018 	ldr.w	r3, [r9, #24]
   a19f8:	e77c      	b.n	a18f4 <follow_path+0x194>
				if (IsUpper(w)) {		/* ASCII large capital */
   a19fa:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
   a19fe:	2919      	cmp	r1, #25
   a1a00:	d807      	bhi.n	a1a12 <follow_path+0x2b2>
					b |= 2;
   a1a02:	f046 0602 	orr.w	r6, r6, #2
   a1a06:	b2c0      	uxtb	r0, r0
   a1a08:	e756      	b.n	a18b8 <follow_path+0x158>
				res = FR_NO_PATH; break;
   a1a0a:	2005      	movs	r0, #5
}
   a1a0c:	b003      	add	sp, #12
   a1a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (IsLower(w)) {	/* ASCII small capital */
   a1a12:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
   a1a16:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
   a1a18:	bf97      	itett	ls
   a1a1a:	3820      	subls	r0, #32
   a1a1c:	b2c0      	uxtbhi	r0, r0
   a1a1e:	b2c0      	uxtbls	r0, r0
   a1a20:	f046 0601 	orrls.w	r6, r6, #1
   a1a24:	e748      	b.n	a18b8 <follow_path+0x158>
   a1a26:	461c      	mov	r4, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   a1a28:	f8d9 3018 	ldr.w	r3, [r9, #24]
				cf |= NS_LOSS | NS_LFN; break;
   a1a2c:	f04b 0b03 	orr.w	fp, fp, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   a1a30:	781a      	ldrb	r2, [r3, #0]
   a1a32:	2ae5      	cmp	r2, #229	; 0xe5
   a1a34:	f47f af62 	bne.w	a18fc <follow_path+0x19c>
   a1a38:	2205      	movs	r2, #5
   a1a3a:	701a      	strb	r2, [r3, #0]
   a1a3c:	f8d9 3018 	ldr.w	r3, [r9, #24]
   a1a40:	e75c      	b.n	a18fc <follow_path+0x19c>
   a1a42:	bf00      	nop
   a1a44:	000a2fb1 	.word	0x000a2fb1
   a1a48:	000ac245 	.word	0x000ac245
   a1a4c:	000a01dd 	.word	0x000a01dd
   a1a50:	000a0a39 	.word	0x000a0a39
   a1a54:	000ac1c4 	.word	0x000ac1c4
   a1a58:	000ac251 	.word	0x000ac251

000a1a5c <dir_read>:
{
   a1a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dj->sect) {
   a1a60:	6907      	ldr	r7, [r0, #16]
{
   a1a62:	b083      	sub	sp, #12
   a1a64:	4605      	mov	r5, r0
	while (dj->sect) {
   a1a66:	b377      	cbz	r7, a1ac6 <dir_read+0x6a>
   a1a68:	23ff      	movs	r3, #255	; 0xff
   a1a6a:	469a      	mov	sl, r3
   a1a6c:	6804      	ldr	r4, [r0, #0]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a1a6e:	f8df b278 	ldr.w	fp, [pc, #632]	; a1ce8 <dir_read+0x28c>
	while (dj->sect) {
   a1a72:	9301      	str	r3, [sp, #4]
	wsect = fs->winsect;
   a1a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   a1a76:	42be      	cmp	r6, r7
   a1a78:	d00f      	beq.n	a1a9a <dir_read+0x3e>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a1a7a:	7923      	ldrb	r3, [r4, #4]
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a1a7c:	f104 0930 	add.w	r9, r4, #48	; 0x30
		if (fs->wflag) {	/* Write back dirty window if needed */
   a1a80:	2b00      	cmp	r3, #0
   a1a82:	f040 80de 	bne.w	a1c42 <dir_read+0x1e6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a1a86:	4649      	mov	r1, r9
   a1a88:	2301      	movs	r3, #1
   a1a8a:	463a      	mov	r2, r7
   a1a8c:	7860      	ldrb	r0, [r4, #1]
   a1a8e:	4e95      	ldr	r6, [pc, #596]	; (a1ce4 <dir_read+0x288>)
   a1a90:	47b0      	blx	r6
   a1a92:	2800      	cmp	r0, #0
   a1a94:	f040 80c4 	bne.w	a1c20 <dir_read+0x1c4>
			fs->winsect = sector;
   a1a98:	62e7      	str	r7, [r4, #44]	; 0x2c
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   a1a9a:	696a      	ldr	r2, [r5, #20]
		c = dir[DIR_Name];
   a1a9c:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   a1a9e:	b193      	cbz	r3, a1ac6 <dir_read+0x6a>
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   a1aa0:	2be5      	cmp	r3, #229	; 0xe5
   a1aa2:	d008      	beq.n	a1ab6 <dir_read+0x5a>
   a1aa4:	2b2e      	cmp	r3, #46	; 0x2e
   a1aa6:	d006      	beq.n	a1ab6 <dir_read+0x5a>
		a = dir[DIR_Attr] & AM_MASK;
   a1aa8:	7ad1      	ldrb	r1, [r2, #11]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   a1aaa:	070c      	lsls	r4, r1, #28
		a = dir[DIR_Attr] & AM_MASK;
   a1aac:	f001 003f 	and.w	r0, r1, #63	; 0x3f
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   a1ab0:	d50f      	bpl.n	a1ad2 <dir_read+0x76>
   a1ab2:	280f      	cmp	r0, #15
   a1ab4:	d010      	beq.n	a1ad8 <dir_read+0x7c>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   a1ab6:	f04f 0aff 	mov.w	sl, #255	; 0xff
	i = dj->index + 1;
   a1aba:	88ee      	ldrh	r6, [r5, #6]
   a1abc:	3601      	adds	r6, #1
   a1abe:	b2b6      	uxth	r6, r6
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   a1ac0:	2e00      	cmp	r6, #0
   a1ac2:	f040 80af 	bne.w	a1c24 <dir_read+0x1c8>
	res = FR_NO_FILE;
   a1ac6:	2004      	movs	r0, #4
	if (res != FR_OK) dj->sect = 0;
   a1ac8:	2300      	movs	r3, #0
   a1aca:	612b      	str	r3, [r5, #16]
}
   a1acc:	b003      	add	sp, #12
   a1ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
   a1ad2:	280f      	cmp	r0, #15
   a1ad4:	f040 80fd 	bne.w	a1cd2 <dir_read+0x276>
				if (c & LLE) {			/* Is it start of LFN sequence? */
   a1ad8:	0659      	lsls	r1, r3, #25
   a1ada:	f140 80d5 	bpl.w	a1c88 <dir_read+0x22c>
					sum = dir[LDIR_Chksum];
   a1ade:	7b50      	ldrb	r0, [r2, #13]
					dj->lfn_idx = dj->index;
   a1ae0:	88e9      	ldrh	r1, [r5, #6]
					c &= ~LLE; ord = c;
   a1ae2:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
					sum = dir[LDIR_Chksum];
   a1ae6:	9001      	str	r0, [sp, #4]
					dj->lfn_idx = dj->index;
   a1ae8:	8429      	strh	r1, [r5, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   a1aea:	7b51      	ldrb	r1, [r2, #13]
   a1aec:	9801      	ldr	r0, [sp, #4]
   a1aee:	4281      	cmp	r1, r0
   a1af0:	d1e1      	bne.n	a1ab6 <dir_read+0x5a>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   a1af2:	7810      	ldrb	r0, [r2, #0]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1af4:	7896      	ldrb	r6, [r2, #2]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   a1af6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   a1afa:	3801      	subs	r0, #1
   a1afc:	eb00 0740 	add.w	r7, r0, r0, lsl #1
   a1b00:	eb00 0087 	add.w	r0, r0, r7, lsl #2
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1b04:	7854      	ldrb	r4, [r2, #1]
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1b06:	28fe      	cmp	r0, #254	; 0xfe
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1b08:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   a1b0c:	69ef      	ldr	r7, [r5, #28]
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1b0e:	d8d2      	bhi.n	a1ab6 <dir_read+0x5a>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1b10:	f827 4010 	strh.w	r4, [r7, r0, lsl #1]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1b14:	f892 e004 	ldrb.w	lr, [r2, #4]
   a1b18:	78d6      	ldrb	r6, [r2, #3]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1b1a:	f100 0a01 	add.w	sl, r0, #1
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1b1e:	ea46 260e 	orr.w	r6, r6, lr, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1b22:	2c00      	cmp	r4, #0
   a1b24:	f040 80e2 	bne.w	a1cec <dir_read+0x290>
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1b28:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1b2c:	4286      	cmp	r6, r0
   a1b2e:	d1c2      	bne.n	a1ab6 <dir_read+0x5a>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1b30:	7990      	ldrb	r0, [r2, #6]
   a1b32:	f892 e005 	ldrb.w	lr, [r2, #5]
   a1b36:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1b3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1b3e:	4586      	cmp	lr, r0
   a1b40:	f040 81fa 	bne.w	a1f38 <dir_read+0x4dc>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1b44:	7a10      	ldrb	r0, [r2, #8]
   a1b46:	79d6      	ldrb	r6, [r2, #7]
   a1b48:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1b4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1b50:	4286      	cmp	r6, r0
   a1b52:	f040 81f1 	bne.w	a1f38 <dir_read+0x4dc>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1b56:	7a90      	ldrb	r0, [r2, #10]
   a1b58:	f892 e009 	ldrb.w	lr, [r2, #9]
   a1b5c:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1b60:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1b64:	4586      	cmp	lr, r0
   a1b66:	f040 81e7 	bne.w	a1f38 <dir_read+0x4dc>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1b6a:	7bd0      	ldrb	r0, [r2, #15]
   a1b6c:	7b96      	ldrb	r6, [r2, #14]
   a1b6e:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1b72:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1b76:	4286      	cmp	r6, r0
   a1b78:	f040 81de 	bne.w	a1f38 <dir_read+0x4dc>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1b7c:	7c50      	ldrb	r0, [r2, #17]
   a1b7e:	f892 c010 	ldrb.w	ip, [r2, #16]
   a1b82:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1b86:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1b8a:	4584      	cmp	ip, r0
   a1b8c:	f040 81d4 	bne.w	a1f38 <dir_read+0x4dc>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1b90:	7cd0      	ldrb	r0, [r2, #19]
   a1b92:	f892 e012 	ldrb.w	lr, [r2, #18]
   a1b96:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1b9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1b9e:	4586      	cmp	lr, r0
   a1ba0:	f040 81ca 	bne.w	a1f38 <dir_read+0x4dc>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1ba4:	7d50      	ldrb	r0, [r2, #21]
   a1ba6:	7d16      	ldrb	r6, [r2, #20]
   a1ba8:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1bac:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1bb0:	4286      	cmp	r6, r0
   a1bb2:	f040 81c1 	bne.w	a1f38 <dir_read+0x4dc>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1bb6:	7dd0      	ldrb	r0, [r2, #23]
   a1bb8:	f892 e016 	ldrb.w	lr, [r2, #22]
   a1bbc:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1bc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1bc4:	4586      	cmp	lr, r0
   a1bc6:	f040 81b7 	bne.w	a1f38 <dir_read+0x4dc>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1bca:	7e50      	ldrb	r0, [r2, #25]
   a1bcc:	7e16      	ldrb	r6, [r2, #24]
   a1bce:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1bd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1bd6:	4286      	cmp	r6, r0
   a1bd8:	f040 81ae 	bne.w	a1f38 <dir_read+0x4dc>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1bdc:	7f50      	ldrb	r0, [r2, #29]
   a1bde:	f892 e01c 	ldrb.w	lr, [r2, #28]
   a1be2:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1be6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1bea:	4586      	cmp	lr, r0
   a1bec:	f040 81a4 	bne.w	a1f38 <dir_read+0x4dc>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1bf0:	7fd0      	ldrb	r0, [r2, #31]
   a1bf2:	7f96      	ldrb	r6, [r2, #30]
   a1bf4:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1bf8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   a1bfc:	4286      	cmp	r6, r0
   a1bfe:	f040 819b 	bne.w	a1f38 <dir_read+0x4dc>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
   a1c02:	7812      	ldrb	r2, [r2, #0]
   a1c04:	0652      	lsls	r2, r2, #25
   a1c06:	d506      	bpl.n	a1c16 <dir_read+0x1ba>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   a1c08:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1c0c:	f000 8177 	beq.w	a1efe <dir_read+0x4a2>
		lfnbuf[i] = 0;
   a1c10:	2200      	movs	r2, #0
   a1c12:	f827 201a 	strh.w	r2, [r7, sl, lsl #1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   a1c16:	3b01      	subs	r3, #1
   a1c18:	fa5f fa83 	uxtb.w	sl, r3
   a1c1c:	9101      	str	r1, [sp, #4]
   a1c1e:	e74c      	b.n	a1aba <dir_read+0x5e>
	res = FR_NO_FILE;
   a1c20:	2001      	movs	r0, #1
   a1c22:	e751      	b.n	a1ac8 <dir_read+0x6c>
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   a1c24:	692f      	ldr	r7, [r5, #16]
   a1c26:	2f00      	cmp	r7, #0
   a1c28:	f43f af4d 	beq.w	a1ac6 <dir_read+0x6a>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   a1c2c:	f016 020f 	ands.w	r2, r6, #15
   a1c30:	d02e      	beq.n	a1c90 <dir_read+0x234>
   a1c32:	682c      	ldr	r4, [r5, #0]
	dj->index = i;
   a1c34:	80ee      	strh	r6, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   a1c36:	f104 0330 	add.w	r3, r4, #48	; 0x30
   a1c3a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   a1c3e:	616b      	str	r3, [r5, #20]
   a1c40:	e718      	b.n	a1a74 <dir_read+0x18>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a1c42:	4649      	mov	r1, r9
   a1c44:	2301      	movs	r3, #1
   a1c46:	4632      	mov	r2, r6
   a1c48:	7860      	ldrb	r0, [r4, #1]
   a1c4a:	47d8      	blx	fp
   a1c4c:	2800      	cmp	r0, #0
   a1c4e:	d1e7      	bne.n	a1c20 <dir_read+0x1c4>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a1c50:	69e3      	ldr	r3, [r4, #28]
   a1c52:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   a1c54:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a1c56:	441a      	add	r2, r3
   a1c58:	4296      	cmp	r6, r2
   a1c5a:	f4bf af14 	bcs.w	a1a86 <dir_read+0x2a>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1c5e:	f894 8003 	ldrb.w	r8, [r4, #3]
   a1c62:	f1b8 0f01 	cmp.w	r8, #1
   a1c66:	d801      	bhi.n	a1c6c <dir_read+0x210>
   a1c68:	e70d      	b.n	a1a86 <dir_read+0x2a>
   a1c6a:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   a1c6c:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1c6e:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   a1c72:	4632      	mov	r2, r6
   a1c74:	2301      	movs	r3, #1
   a1c76:	4649      	mov	r1, r9
   a1c78:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1c7a:	fa5f f888 	uxtb.w	r8, r8
					disk_write(fs->drv, fs->win, wsect, 1);
   a1c7e:	47d8      	blx	fp
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a1c80:	f1b8 0f01 	cmp.w	r8, #1
   a1c84:	d1f1      	bne.n	a1c6a <dir_read+0x20e>
   a1c86:	e6fe      	b.n	a1a86 <dir_read+0x2a>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   a1c88:	459a      	cmp	sl, r3
   a1c8a:	f47f af14 	bne.w	a1ab6 <dir_read+0x5a>
   a1c8e:	e72c      	b.n	a1aea <dir_read+0x8e>
		if (dj->clust == 0) {	/* Static table */
   a1c90:	68e9      	ldr	r1, [r5, #12]
		dj->sect++;					/* Next sector */
   a1c92:	3701      	adds	r7, #1
   a1c94:	612f      	str	r7, [r5, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   a1c96:	682c      	ldr	r4, [r5, #0]
		if (dj->clust == 0) {	/* Static table */
   a1c98:	b971      	cbnz	r1, a1cb8 <dir_read+0x25c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   a1c9a:	8923      	ldrh	r3, [r4, #8]
   a1c9c:	42b3      	cmp	r3, r6
   a1c9e:	f67f af12 	bls.w	a1ac6 <dir_read+0x6a>
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   a1ca2:	f104 0330 	add.w	r3, r4, #48	; 0x30
	dj->index = i;
   a1ca6:	80ee      	strh	r6, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   a1ca8:	616b      	str	r3, [r5, #20]
	while (dj->sect) {
   a1caa:	2f00      	cmp	r7, #0
   a1cac:	f47f aee2 	bne.w	a1a74 <dir_read+0x18>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
   a1cb0:	2000      	movs	r0, #0
}
   a1cb2:	b003      	add	sp, #12
   a1cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   a1cb8:	78a3      	ldrb	r3, [r4, #2]
   a1cba:	3b01      	subs	r3, #1
   a1cbc:	ea13 1316 	ands.w	r3, r3, r6, lsr #4
   a1cc0:	d1ef      	bne.n	a1ca2 <dir_read+0x246>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   a1cc2:	2901      	cmp	r1, #1
   a1cc4:	d903      	bls.n	a1cce <dir_read+0x272>
   a1cc6:	69a3      	ldr	r3, [r4, #24]
   a1cc8:	4299      	cmp	r1, r3
   a1cca:	f0c0 811a 	bcc.w	a1f02 <dir_read+0x4a6>
	res = FR_NO_FILE;
   a1cce:	2002      	movs	r0, #2
   a1cd0:	e6fa      	b.n	a1ac8 <dir_read+0x6c>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   a1cd2:	f1ba 0f00 	cmp.w	sl, #0
   a1cd6:	f000 80c8 	beq.w	a1e6a <dir_read+0x40e>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
   a1cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
   a1cde:	2000      	movs	r0, #0
   a1ce0:	842b      	strh	r3, [r5, #32]
   a1ce2:	e6f3      	b.n	a1acc <dir_read+0x70>
   a1ce4:	0009f389 	.word	0x0009f389
   a1ce8:	0009f3fd 	.word	0x0009f3fd
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1cec:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1cf0:	f43f aee3 	beq.w	a1aba <dir_read+0x5e>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1cf4:	f827 601a 	strh.w	r6, [r7, sl, lsl #1]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1cf8:	f892 c006 	ldrb.w	ip, [r2, #6]
   a1cfc:	f892 e005 	ldrb.w	lr, [r2, #5]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1d00:	ea4f 044a 	mov.w	r4, sl, lsl #1
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1d04:	ea4e 2e0c 	orr.w	lr, lr, ip, lsl #8
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1d08:	f100 0a02 	add.w	sl, r0, #2
		if (wc) {	/* Last char has not been processed */
   a1d0c:	2e00      	cmp	r6, #0
   a1d0e:	f43f af14 	beq.w	a1b3a <dir_read+0xde>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1d12:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1d16:	f43f aed0 	beq.w	a1aba <dir_read+0x5e>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1d1a:	443c      	add	r4, r7
   a1d1c:	f8a4 e002 	strh.w	lr, [r4, #2]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1d20:	f892 c008 	ldrb.w	ip, [r2, #8]
   a1d24:	79d6      	ldrb	r6, [r2, #7]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1d26:	f100 0a03 	add.w	sl, r0, #3
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1d2a:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1d2e:	f1be 0f00 	cmp.w	lr, #0
   a1d32:	f43f af0b 	beq.w	a1b4c <dir_read+0xf0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1d36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1d3a:	f43f aebe 	beq.w	a1aba <dir_read+0x5e>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1d3e:	80a6      	strh	r6, [r4, #4]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1d40:	f892 c00a 	ldrb.w	ip, [r2, #10]
   a1d44:	f892 e009 	ldrb.w	lr, [r2, #9]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1d48:	f100 0a04 	add.w	sl, r0, #4
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1d4c:	ea4e 2e0c 	orr.w	lr, lr, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1d50:	2e00      	cmp	r6, #0
   a1d52:	f43f af05 	beq.w	a1b60 <dir_read+0x104>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1d56:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1d5a:	f000 80ed 	beq.w	a1f38 <dir_read+0x4dc>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1d5e:	f8a4 e006 	strh.w	lr, [r4, #6]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1d62:	f892 c00f 	ldrb.w	ip, [r2, #15]
   a1d66:	7b96      	ldrb	r6, [r2, #14]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1d68:	f100 0a05 	add.w	sl, r0, #5
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1d6c:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1d70:	f1be 0f00 	cmp.w	lr, #0
   a1d74:	f43f aefd 	beq.w	a1b72 <dir_read+0x116>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1d78:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1d7c:	f000 80bf 	beq.w	a1efe <dir_read+0x4a2>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1d80:	8126      	strh	r6, [r4, #8]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1d82:	f892 e011 	ldrb.w	lr, [r2, #17]
   a1d86:	f892 c010 	ldrb.w	ip, [r2, #16]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1d8a:	f100 0a06 	add.w	sl, r0, #6
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1d8e:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1d92:	2e00      	cmp	r6, #0
   a1d94:	f43f aef7 	beq.w	a1b86 <dir_read+0x12a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1d98:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1d9c:	f000 80af 	beq.w	a1efe <dir_read+0x4a2>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1da0:	f8a4 c00a 	strh.w	ip, [r4, #10]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1da4:	7cd6      	ldrb	r6, [r2, #19]
   a1da6:	f892 e012 	ldrb.w	lr, [r2, #18]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1daa:	f100 0a07 	add.w	sl, r0, #7
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1dae:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1db2:	f1bc 0f00 	cmp.w	ip, #0
   a1db6:	f43f aef0 	beq.w	a1b9a <dir_read+0x13e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1dba:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1dbe:	f000 809e 	beq.w	a1efe <dir_read+0x4a2>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1dc2:	f8a4 e00c 	strh.w	lr, [r4, #12]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1dc6:	f892 c015 	ldrb.w	ip, [r2, #21]
   a1dca:	7d16      	ldrb	r6, [r2, #20]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1dcc:	f100 0a08 	add.w	sl, r0, #8
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1dd0:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1dd4:	f1be 0f00 	cmp.w	lr, #0
   a1dd8:	f43f aee8 	beq.w	a1bac <dir_read+0x150>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1ddc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1de0:	f000 808d 	beq.w	a1efe <dir_read+0x4a2>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1de4:	81e6      	strh	r6, [r4, #14]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1de6:	f892 c017 	ldrb.w	ip, [r2, #23]
   a1dea:	f892 e016 	ldrb.w	lr, [r2, #22]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1dee:	f100 0a09 	add.w	sl, r0, #9
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1df2:	ea4e 2e0c 	orr.w	lr, lr, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1df6:	2e00      	cmp	r6, #0
   a1df8:	f43f aee2 	beq.w	a1bc0 <dir_read+0x164>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1dfc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1e00:	f000 809a 	beq.w	a1f38 <dir_read+0x4dc>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1e04:	f8a4 e010 	strh.w	lr, [r4, #16]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1e08:	f892 c019 	ldrb.w	ip, [r2, #25]
   a1e0c:	7e16      	ldrb	r6, [r2, #24]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1e0e:	f100 0a0a 	add.w	sl, r0, #10
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1e12:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1e16:	f1be 0f00 	cmp.w	lr, #0
   a1e1a:	f43f aeda 	beq.w	a1bd2 <dir_read+0x176>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1e1e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1e22:	d06c      	beq.n	a1efe <dir_read+0x4a2>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1e24:	8266      	strh	r6, [r4, #18]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1e26:	f892 c01d 	ldrb.w	ip, [r2, #29]
   a1e2a:	f892 e01c 	ldrb.w	lr, [r2, #28]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1e2e:	f100 0a0b 	add.w	sl, r0, #11
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1e32:	ea4e 2e0c 	orr.w	lr, lr, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1e36:	2e00      	cmp	r6, #0
   a1e38:	f43f aed5 	beq.w	a1be6 <dir_read+0x18a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1e3c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1e40:	d05d      	beq.n	a1efe <dir_read+0x4a2>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1e42:	f8a4 e014 	strh.w	lr, [r4, #20]
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1e46:	f892 c01f 	ldrb.w	ip, [r2, #31]
   a1e4a:	7f96      	ldrb	r6, [r2, #30]
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1e4c:	f100 0a0c 	add.w	sl, r0, #12
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   a1e50:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
   a1e54:	f1be 0f00 	cmp.w	lr, #0
   a1e58:	f43f aece 	beq.w	a1bf8 <dir_read+0x19c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   a1e5c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   a1e60:	d04d      	beq.n	a1efe <dir_read+0x4a2>
			lfnbuf[i++] = wc = uc;			/* Store it */
   a1e62:	f100 0a0d 	add.w	sl, r0, #13
   a1e66:	82e6      	strh	r6, [r4, #22]
   a1e68:	e6cb      	b.n	a1c02 <dir_read+0x1a6>
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   a1e6a:	7851      	ldrb	r1, [r2, #1]
   a1e6c:	01d8      	lsls	r0, r3, #7
   a1e6e:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
   a1e72:	4419      	add	r1, r3
   a1e74:	f3c1 0346 	ubfx	r3, r1, #1, #7
   a1e78:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   a1e7c:	7891      	ldrb	r1, [r2, #2]
   a1e7e:	b2db      	uxtb	r3, r3
   a1e80:	4419      	add	r1, r3
   a1e82:	f3c1 0346 	ubfx	r3, r1, #1, #7
   a1e86:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   a1e8a:	78d1      	ldrb	r1, [r2, #3]
   a1e8c:	b2db      	uxtb	r3, r3
   a1e8e:	4419      	add	r1, r3
   a1e90:	f3c1 0346 	ubfx	r3, r1, #1, #7
   a1e94:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   a1e98:	7911      	ldrb	r1, [r2, #4]
   a1e9a:	b2db      	uxtb	r3, r3
   a1e9c:	4419      	add	r1, r3
   a1e9e:	f3c1 0346 	ubfx	r3, r1, #1, #7
   a1ea2:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   a1ea6:	7951      	ldrb	r1, [r2, #5]
   a1ea8:	b2db      	uxtb	r3, r3
   a1eaa:	4419      	add	r1, r3
   a1eac:	f3c1 0346 	ubfx	r3, r1, #1, #7
   a1eb0:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   a1eb4:	7991      	ldrb	r1, [r2, #6]
   a1eb6:	b2db      	uxtb	r3, r3
   a1eb8:	4419      	add	r1, r3
   a1eba:	f3c1 0346 	ubfx	r3, r1, #1, #7
   a1ebe:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   a1ec2:	79d1      	ldrb	r1, [r2, #7]
   a1ec4:	b2db      	uxtb	r3, r3
   a1ec6:	4419      	add	r1, r3
   a1ec8:	f3c1 0346 	ubfx	r3, r1, #1, #7
   a1ecc:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   a1ed0:	7a11      	ldrb	r1, [r2, #8]
   a1ed2:	b2db      	uxtb	r3, r3
   a1ed4:	4419      	add	r1, r3
   a1ed6:	f3c1 0346 	ubfx	r3, r1, #1, #7
   a1eda:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   a1ede:	7a51      	ldrb	r1, [r2, #9]
   a1ee0:	b2db      	uxtb	r3, r3
   a1ee2:	440b      	add	r3, r1
   a1ee4:	7a91      	ldrb	r1, [r2, #10]
   a1ee6:	f3c3 0246 	ubfx	r2, r3, #1, #7
   a1eea:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
   a1eee:	440b      	add	r3, r1
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   a1ef0:	9a01      	ldr	r2, [sp, #4]
   a1ef2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   a1ef6:	429a      	cmp	r2, r3
   a1ef8:	f47f aeef 	bne.w	a1cda <dir_read+0x27e>
   a1efc:	e6d8      	b.n	a1cb0 <dir_read+0x254>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   a1efe:	9101      	str	r1, [sp, #4]
   a1f00:	e5db      	b.n	a1aba <dir_read+0x5e>
   a1f02:	4620      	mov	r0, r4
   a1f04:	4b0d      	ldr	r3, [pc, #52]	; (a1f3c <dir_read+0x4e0>)
   a1f06:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;
   a1f08:	2801      	cmp	r0, #1
   a1f0a:	f67f aee0 	bls.w	a1cce <dir_read+0x272>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   a1f0e:	1c43      	adds	r3, r0, #1
   a1f10:	f43f ae86 	beq.w	a1c20 <dir_read+0x1c4>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   a1f14:	682c      	ldr	r4, [r5, #0]
   a1f16:	69a3      	ldr	r3, [r4, #24]
   a1f18:	4298      	cmp	r0, r3
   a1f1a:	f4bf add4 	bcs.w	a1ac6 <dir_read+0x6a>
				dj->clust = clst;				/* Initialize data for new cluster */
   a1f1e:	60e8      	str	r0, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a1f20:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
   a1f22:	3802      	subs	r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a1f24:	3b02      	subs	r3, #2
   a1f26:	4298      	cmp	r0, r3
   a1f28:	bf2f      	iteee	cs
   a1f2a:	2700      	movcs	r7, #0
	return clst * fs->csize + fs->database;
   a1f2c:	78a7      	ldrbcc	r7, [r4, #2]
   a1f2e:	6aa3      	ldrcc	r3, [r4, #40]	; 0x28
   a1f30:	fb00 3707 	mlacc	r7, r0, r7, r3
				dj->sect = clust2sect(dj->fs, clst);
   a1f34:	612f      	str	r7, [r5, #16]
   a1f36:	e6b4      	b.n	a1ca2 <dir_read+0x246>
			if (uc != 0xFFFF) return 0;		/* Check filler */
   a1f38:	9101      	str	r1, [sp, #4]
   a1f3a:	e5bc      	b.n	a1ab6 <dir_read+0x5a>
   a1f3c:	0009ff29 	.word	0x0009ff29

000a1f40 <f_mount>:
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   a1f40:	b108      	cbz	r0, a1f46 <f_mount+0x6>
		return FR_INVALID_DRIVE;
   a1f42:	200b      	movs	r0, #11
}
   a1f44:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   a1f46:	4b05      	ldr	r3, [pc, #20]	; (a1f5c <f_mount+0x1c>)
   a1f48:	681a      	ldr	r2, [r3, #0]
	if (rfs) {
   a1f4a:	b102      	cbz	r2, a1f4e <f_mount+0xe>
		rfs->fs_type = 0;		/* Clear old fs object */
   a1f4c:	7010      	strb	r0, [r2, #0]
	if (fs) {
   a1f4e:	b109      	cbz	r1, a1f54 <f_mount+0x14>
		fs->fs_type = 0;		/* Clear new fs object */
   a1f50:	2200      	movs	r2, #0
   a1f52:	700a      	strb	r2, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   a1f54:	6019      	str	r1, [r3, #0]
	return FR_OK;
   a1f56:	2000      	movs	r0, #0
   a1f58:	4770      	bx	lr
   a1f5a:	bf00      	nop
   a1f5c:	20072f2c 	.word	0x20072f2c

000a1f60 <f_open>:
	fp->fs = 0;			/* Clear file object */
   a1f60:	2300      	movs	r3, #0
{
   a1f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fp->fs = 0;			/* Clear file object */
   a1f66:	6003      	str	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   a1f68:	780b      	ldrb	r3, [r1, #0]
{
   a1f6a:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
	vol = p[0] - '0';					/* Is there a drive number? */
   a1f6e:	3b30      	subs	r3, #48	; 0x30
{
   a1f70:	4690      	mov	r8, r2
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   a1f72:	2b09      	cmp	r3, #9
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   a1f74:	f002 021f 	and.w	r2, r2, #31
{
   a1f78:	4604      	mov	r4, r0
   a1f7a:	460d      	mov	r5, r1
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   a1f7c:	9200      	str	r2, [sp, #0]
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   a1f7e:	d937      	bls.n	a1ff0 <f_open+0x90>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   a1f80:	4bab      	ldr	r3, [pc, #684]	; (a2230 <f_open+0x2d0>)
   a1f82:	ae07      	add	r6, sp, #28
   a1f84:	f8d3 9000 	ldr.w	r9, [r3]
   a1f88:	f8c6 9000 	str.w	r9, [r6]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   a1f8c:	f1b9 0f00 	cmp.w	r9, #0
   a1f90:	d07a      	beq.n	a2088 <f_open+0x128>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   a1f92:	f899 3000 	ldrb.w	r3, [r9]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   a1f96:	f008 0a1e 	and.w	sl, r8, #30
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   a1f9a:	2b00      	cmp	r3, #0
   a1f9c:	d069      	beq.n	a2072 <f_open+0x112>
		stat = disk_status(fs->drv);
   a1f9e:	f899 0001 	ldrb.w	r0, [r9, #1]
   a1fa2:	4ba4      	ldr	r3, [pc, #656]	; (a2234 <f_open+0x2d4>)
   a1fa4:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   a1fa6:	07c7      	lsls	r7, r0, #31
   a1fa8:	d463      	bmi.n	a2072 <f_open+0x112>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   a1faa:	f1ba 0f00 	cmp.w	sl, #0
   a1fae:	d002      	beq.n	a1fb6 <f_open+0x56>
   a1fb0:	0741      	lsls	r1, r0, #29
   a1fb2:	f100 80bf 	bmi.w	a2134 <f_open+0x1d4>
	INIT_BUF(dj);
   a1fb6:	ab04      	add	r3, sp, #16
		res = follow_path(&dj, path);	/* Follow the file path */
   a1fb8:	4629      	mov	r1, r5
	INIT_BUF(dj);
   a1fba:	aa10      	add	r2, sp, #64	; 0x40
   a1fbc:	61b3      	str	r3, [r6, #24]
		res = follow_path(&dj, path);	/* Follow the file path */
   a1fbe:	4630      	mov	r0, r6
   a1fc0:	4b9d      	ldr	r3, [pc, #628]	; (a2238 <f_open+0x2d8>)
	INIT_BUF(dj);
   a1fc2:	61f2      	str	r2, [r6, #28]
		res = follow_path(&dj, path);	/* Follow the file path */
   a1fc4:	4798      	blx	r3
	dir = dj.dir;
   a1fc6:	6975      	ldr	r5, [r6, #20]
	if (res == FR_OK) {
   a1fc8:	2800      	cmp	r0, #0
   a1fca:	f040 828a 	bne.w	a24e2 <f_open+0x582>
		if (!dir)	/* Current dir itself */
   a1fce:	2d00      	cmp	r5, #0
   a1fd0:	d07a      	beq.n	a20c8 <f_open+0x168>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   a1fd2:	f018 0f1c 	tst.w	r8, #28
   a1fd6:	d059      	beq.n	a208c <f_open+0x12c>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   a1fd8:	7aeb      	ldrb	r3, [r5, #11]
   a1fda:	f013 0f11 	tst.w	r3, #17
   a1fde:	d162      	bne.n	a20a6 <f_open+0x146>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   a1fe0:	f018 0f04 	tst.w	r8, #4
   a1fe4:	d01f      	beq.n	a2026 <f_open+0xc6>
					res = FR_EXIST;
   a1fe6:	2008      	movs	r0, #8
}
   a1fe8:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   a1fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   a1ff0:	784a      	ldrb	r2, [r1, #1]
   a1ff2:	2a3a      	cmp	r2, #58	; 0x3a
   a1ff4:	d1c4      	bne.n	a1f80 <f_open+0x20>
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   a1ff6:	2b00      	cmp	r3, #0
   a1ff8:	f000 8271 	beq.w	a24de <f_open+0x57e>
		return FR_INVALID_DRIVE;
   a1ffc:	200b      	movs	r0, #11
   a1ffe:	ae07      	add	r6, sp, #28
	INIT_BUF(dj);
   a2000:	ab10      	add	r3, sp, #64	; 0x40
   a2002:	aa04      	add	r2, sp, #16
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   a2004:	f018 0f1c 	tst.w	r8, #28
	INIT_BUF(dj);
   a2008:	61b2      	str	r2, [r6, #24]
   a200a:	61f3      	str	r3, [r6, #28]
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   a200c:	d0ec      	beq.n	a1fe8 <f_open+0x88>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   a200e:	2804      	cmp	r0, #4
   a2010:	d1ea      	bne.n	a1fe8 <f_open+0x88>
				res = dir_register(&dj);
   a2012:	4b8a      	ldr	r3, [pc, #552]	; (a223c <f_open+0x2dc>)
   a2014:	4630      	mov	r0, r6
   a2016:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   a2018:	9b00      	ldr	r3, [sp, #0]
   a201a:	6975      	ldr	r5, [r6, #20]
   a201c:	f043 0308 	orr.w	r3, r3, #8
   a2020:	9300      	str	r3, [sp, #0]
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   a2022:	2800      	cmp	r0, #0
   a2024:	d1e0      	bne.n	a1fe8 <f_open+0x88>
   a2026:	9b00      	ldr	r3, [sp, #0]
   a2028:	0719      	lsls	r1, r3, #28
   a202a:	d44f      	bmi.n	a20cc <f_open+0x16c>
   a202c:	f8d6 8000 	ldr.w	r8, [r6]
   a2030:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
		fp->fptr = 0;						/* File pointer */
   a2034:	2000      	movs	r0, #0
		fp->flag = mode;					/* File access mode */
   a2036:	f89d 3000 	ldrb.w	r3, [sp]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   a203a:	f8c4 901c 	str.w	r9, [r4, #28]
		fp->dir_ptr = dir;
   a203e:	6225      	str	r5, [r4, #32]
		fp->flag = mode;					/* File access mode */
   a2040:	71a3      	strb	r3, [r4, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   a2042:	7d6e      	ldrb	r6, [r5, #21]
   a2044:	7d2a      	ldrb	r2, [r5, #20]
   a2046:	7ee9      	ldrb	r1, [r5, #27]
   a2048:	7eab      	ldrb	r3, [r5, #26]
   a204a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   a204e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   a2052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   a2056:	6123      	str	r3, [r4, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   a2058:	69eb      	ldr	r3, [r5, #28]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   a205a:	f8c4 8000 	str.w	r8, [r4]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   a205e:	60e3      	str	r3, [r4, #12]
		fp->fptr = 0;						/* File pointer */
   a2060:	60a0      	str	r0, [r4, #8]
		fp->dsect = 0;
   a2062:	61a0      	str	r0, [r4, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   a2064:	f8b8 3006 	ldrh.w	r3, [r8, #6]
   a2068:	80a3      	strh	r3, [r4, #4]
}
   a206a:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   a206e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
   a2072:	2000      	movs	r0, #0
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   a2074:	4b72      	ldr	r3, [pc, #456]	; (a2240 <f_open+0x2e0>)
	fs->fs_type = 0;					/* Clear the file system object */
   a2076:	f889 0000 	strb.w	r0, [r9]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   a207a:	f889 0001 	strb.w	r0, [r9, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   a207e:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   a2080:	07c2      	lsls	r2, r0, #31
   a2082:	d552      	bpl.n	a212a <f_open+0x1ca>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   a2084:	2003      	movs	r0, #3
   a2086:	e7bb      	b.n	a2000 <f_open+0xa0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   a2088:	200c      	movs	r0, #12
   a208a:	e7b9      	b.n	a2000 <f_open+0xa0>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   a208c:	7aeb      	ldrb	r3, [r5, #11]
   a208e:	06da      	lsls	r2, r3, #27
   a2090:	d504      	bpl.n	a209c <f_open+0x13c>
				res = FR_NO_FILE;
   a2092:	2004      	movs	r0, #4
}
   a2094:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   a2098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   a209c:	f018 0f02 	tst.w	r8, #2
   a20a0:	d006      	beq.n	a20b0 <f_open+0x150>
   a20a2:	07db      	lsls	r3, r3, #31
   a20a4:	d504      	bpl.n	a20b0 <f_open+0x150>
				res = FR_DENIED;
   a20a6:	2007      	movs	r0, #7
}
   a20a8:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   a20ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   a20b0:	f018 0f08 	tst.w	r8, #8
   a20b4:	d0ba      	beq.n	a202c <f_open+0xcc>
   a20b6:	f8d6 8000 	ldr.w	r8, [r6]
   a20ba:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
			mode |= FA__WRITTEN;
   a20be:	9b00      	ldr	r3, [sp, #0]
   a20c0:	f043 0320 	orr.w	r3, r3, #32
   a20c4:	9300      	str	r3, [sp, #0]
   a20c6:	e7b5      	b.n	a2034 <f_open+0xd4>
			res = FR_INVALID_NAME;
   a20c8:	2006      	movs	r0, #6
   a20ca:	e78d      	b.n	a1fe8 <f_open+0x88>
			dw = get_fattime();					/* Created time */
   a20cc:	4b5d      	ldr	r3, [pc, #372]	; (a2244 <f_open+0x2e4>)
   a20ce:	4798      	blx	r3
			dj.fs->wflag = 1;
   a20d0:	f04f 0a01 	mov.w	sl, #1
			dir[DIR_Attr] = 0;					/* Reset attribute */
   a20d4:	2300      	movs	r3, #0
			cl = LD_CLUST(dir);					/* Get start cluster */
   a20d6:	7eea      	ldrb	r2, [r5, #27]
   a20d8:	f895 901a 	ldrb.w	r9, [r5, #26]
			ST_DWORD(dir+DIR_CrtTime, dw);
   a20dc:	f3c0 2107 	ubfx	r1, r0, #8, #8
   a20e0:	73e9      	strb	r1, [r5, #15]
   a20e2:	0c01      	lsrs	r1, r0, #16
			cl = LD_CLUST(dir);					/* Get start cluster */
   a20e4:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
			ST_DWORD(dir+DIR_CrtTime, dw);
   a20e8:	7429      	strb	r1, [r5, #16]
			cl = LD_CLUST(dir);					/* Get start cluster */
   a20ea:	7d2a      	ldrb	r2, [r5, #20]
   a20ec:	7d69      	ldrb	r1, [r5, #21]
			dj.fs->wflag = 1;
   a20ee:	f8d6 8000 	ldr.w	r8, [r6]
			cl = LD_CLUST(dir);					/* Get start cluster */
   a20f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_DWORD(dir+DIR_CrtTime, dw);
   a20f6:	73a8      	strb	r0, [r5, #14]
			if (cl) {							/* Remove the cluster chain if exist */
   a20f8:	ea59 4902 	orrs.w	r9, r9, r2, lsl #16
			ST_DWORD(dir+DIR_CrtTime, dw);
   a20fc:	ea4f 6010 	mov.w	r0, r0, lsr #24
   a2100:	7468      	strb	r0, [r5, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   a2102:	72eb      	strb	r3, [r5, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   a2104:	772b      	strb	r3, [r5, #28]
   a2106:	776b      	strb	r3, [r5, #29]
   a2108:	77ab      	strb	r3, [r5, #30]
   a210a:	77eb      	strb	r3, [r5, #31]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   a210c:	76ab      	strb	r3, [r5, #26]
   a210e:	76eb      	strb	r3, [r5, #27]
   a2110:	752b      	strb	r3, [r5, #20]
   a2112:	756b      	strb	r3, [r5, #21]
			dj.fs->wflag = 1;
   a2114:	f888 a004 	strb.w	sl, [r8, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   a2118:	d0cf      	beq.n	a20ba <f_open+0x15a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   a211a:	45d1      	cmp	r9, sl
   a211c:	d003      	beq.n	a2126 <f_open+0x1c6>
   a211e:	f8d8 3018 	ldr.w	r3, [r8, #24]
   a2122:	4599      	cmp	r9, r3
   a2124:	d321      	bcc.n	a216a <f_open+0x20a>
   a2126:	2002      	movs	r0, #2
   a2128:	e75e      	b.n	a1fe8 <f_open+0x88>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   a212a:	f1ba 0f00 	cmp.w	sl, #0
   a212e:	d003      	beq.n	a2138 <f_open+0x1d8>
   a2130:	0743      	lsls	r3, r0, #29
   a2132:	d501      	bpl.n	a2138 <f_open+0x1d8>
				return FR_WRITE_PROTECTED;
   a2134:	200a      	movs	r0, #10
   a2136:	e763      	b.n	a2000 <f_open+0xa0>
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   a2138:	f109 0b30 	add.w	fp, r9, #48	; 0x30
   a213c:	4659      	mov	r1, fp
   a213e:	2301      	movs	r3, #1
   a2140:	2200      	movs	r2, #0
   a2142:	f899 0001 	ldrb.w	r0, [r9, #1]
   a2146:	4f40      	ldr	r7, [pc, #256]	; (a2248 <f_open+0x2e8>)
   a2148:	47b8      	blx	r7
   a214a:	b108      	cbz	r0, a2150 <f_open+0x1f0>
	if (fmt == 3) return FR_DISK_ERR;
   a214c:	2001      	movs	r0, #1
   a214e:	e757      	b.n	a2000 <f_open+0xa0>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   a2150:	f899 222f 	ldrb.w	r2, [r9, #559]	; 0x22f
   a2154:	f899 a22e 	ldrb.w	sl, [r9, #558]	; 0x22e
   a2158:	4b3c      	ldr	r3, [pc, #240]	; (a224c <f_open+0x2ec>)
   a215a:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
   a215e:	fa0f fa8a 	sxth.w	sl, sl
   a2162:	459a      	cmp	sl, r3
   a2164:	d078      	beq.n	a2258 <f_open+0x2f8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   a2166:	200d      	movs	r0, #13
   a2168:	e74a      	b.n	a2000 <f_open+0xa0>
   a216a:	4649      	mov	r1, r9
   a216c:	4640      	mov	r0, r8
   a216e:	4b38      	ldr	r3, [pc, #224]	; (a2250 <f_open+0x2f0>)
				dw = dj.fs->winsect;
   a2170:	f8d8 b02c 	ldr.w	fp, [r8, #44]	; 0x2c
   a2174:	4798      	blx	r3
				if (res == FR_OK) {
   a2176:	2800      	cmp	r0, #0
   a2178:	f47f af36 	bne.w	a1fe8 <f_open+0x88>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   a217c:	f8d6 8000 	ldr.w	r8, [r6]
   a2180:	f109 32ff 	add.w	r2, r9, #4294967295
	wsect = fs->winsect;
   a2184:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   a2188:	f8c8 200c 	str.w	r2, [r8, #12]
	if (wsect != sector) {	/* Changed current window */
   a218c:	45cb      	cmp	fp, r9
   a218e:	d096      	beq.n	a20be <f_open+0x15e>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a2190:	f898 3004 	ldrb.w	r3, [r8, #4]
   a2194:	b9a3      	cbnz	r3, a21c0 <f_open+0x260>
		if (sector) {
   a2196:	f1bb 0f00 	cmp.w	fp, #0
   a219a:	d08c      	beq.n	a20b6 <f_open+0x156>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a219c:	2301      	movs	r3, #1
   a219e:	465a      	mov	r2, fp
   a21a0:	f108 0130 	add.w	r1, r8, #48	; 0x30
   a21a4:	f898 0001 	ldrb.w	r0, [r8, #1]
   a21a8:	f8df 909c 	ldr.w	r9, [pc, #156]	; a2248 <f_open+0x2e8>
   a21ac:	47c8      	blx	r9
   a21ae:	2800      	cmp	r0, #0
   a21b0:	d139      	bne.n	a2226 <f_open+0x2c6>
			fs->winsect = sector;
   a21b2:	f8c8 b02c 	str.w	fp, [r8, #44]	; 0x2c
   a21b6:	f8d6 8000 	ldr.w	r8, [r6]
   a21ba:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
   a21be:	e77e      	b.n	a20be <f_open+0x15e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a21c0:	f108 0330 	add.w	r3, r8, #48	; 0x30
   a21c4:	4619      	mov	r1, r3
   a21c6:	9301      	str	r3, [sp, #4]
   a21c8:	464a      	mov	r2, r9
   a21ca:	4653      	mov	r3, sl
   a21cc:	f898 0001 	ldrb.w	r0, [r8, #1]
   a21d0:	4f20      	ldr	r7, [pc, #128]	; (a2254 <f_open+0x2f4>)
   a21d2:	47b8      	blx	r7
   a21d4:	bb38      	cbnz	r0, a2226 <f_open+0x2c6>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a21d6:	f8d8 2020 	ldr.w	r2, [r8, #32]
   a21da:	f8d8 301c 	ldr.w	r3, [r8, #28]
			fs->wflag = 0;
   a21de:	f888 0004 	strb.w	r0, [r8, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a21e2:	441a      	add	r2, r3
   a21e4:	4591      	cmp	r9, r2
   a21e6:	d2d6      	bcs.n	a2196 <f_open+0x236>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a21e8:	f898 a003 	ldrb.w	sl, [r8, #3]
   a21ec:	f1ba 0f01 	cmp.w	sl, #1
   a21f0:	d9d1      	bls.n	a2196 <f_open+0x236>
   a21f2:	9403      	str	r4, [sp, #12]
   a21f4:	9f00      	ldr	r7, [sp, #0]
   a21f6:	9502      	str	r5, [sp, #8]
   a21f8:	9c01      	ldr	r4, [sp, #4]
   a21fa:	e001      	b.n	a2200 <f_open+0x2a0>
   a21fc:	f8d8 301c 	ldr.w	r3, [r8, #28]
					wsect += fs->fsize;
   a2200:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a2202:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
   a2206:	464a      	mov	r2, r9
   a2208:	2301      	movs	r3, #1
   a220a:	4621      	mov	r1, r4
   a220c:	f898 0001 	ldrb.w	r0, [r8, #1]
   a2210:	4d10      	ldr	r5, [pc, #64]	; (a2254 <f_open+0x2f4>)
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a2212:	fa5f fa8a 	uxtb.w	sl, sl
					disk_write(fs->drv, fs->win, wsect, 1);
   a2216:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a2218:	f1ba 0f01 	cmp.w	sl, #1
   a221c:	d1ee      	bne.n	a21fc <f_open+0x29c>
   a221e:	9700      	str	r7, [sp, #0]
   a2220:	9d02      	ldr	r5, [sp, #8]
   a2222:	9c03      	ldr	r4, [sp, #12]
   a2224:	e7b7      	b.n	a2196 <f_open+0x236>
				return FR_DISK_ERR;
   a2226:	2001      	movs	r0, #1
}
   a2228:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   a222c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a2230:	20072f2c 	.word	0x20072f2c
   a2234:	0009f371 	.word	0x0009f371
   a2238:	000a1761 	.word	0x000a1761
   a223c:	000a0d79 	.word	0x000a0d79
   a2240:	0009f325 	.word	0x0009f325
   a2244:	00099de1 	.word	0x00099de1
   a2248:	0009f389 	.word	0x0009f389
   a224c:	ffffaa55 	.word	0xffffaa55
   a2250:	0009fc41 	.word	0x0009fc41
   a2254:	0009f3fd 	.word	0x0009f3fd
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   a2258:	f8d9 3066 	ldr.w	r3, [r9, #102]	; 0x66
   a225c:	4aa3      	ldr	r2, [pc, #652]	; (a24ec <f_open+0x58c>)
   a225e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   a2262:	4293      	cmp	r3, r2
   a2264:	f000 80da 	beq.w	a241c <f_open+0x4bc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   a2268:	f8d9 3082 	ldr.w	r3, [r9, #130]	; 0x82
   a226c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   a2270:	4293      	cmp	r3, r2
   a2272:	f000 80d3 	beq.w	a241c <f_open+0x4bc>
		if (tbl[4]) {						/* Is the partition existing? */
   a2276:	f899 31f2 	ldrb.w	r3, [r9, #498]	; 0x1f2
   a227a:	2b00      	cmp	r3, #0
   a227c:	f43f af73 	beq.w	a2166 <f_open+0x206>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   a2280:	f8d9 31f6 	ldr.w	r3, [r9, #502]	; 0x1f6
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   a2284:	4659      	mov	r1, fp
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   a2286:	461a      	mov	r2, r3
   a2288:	9301      	str	r3, [sp, #4]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   a228a:	f899 0001 	ldrb.w	r0, [r9, #1]
   a228e:	2301      	movs	r3, #1
   a2290:	4f97      	ldr	r7, [pc, #604]	; (a24f0 <f_open+0x590>)
   a2292:	47b8      	blx	r7
   a2294:	2800      	cmp	r0, #0
   a2296:	d1c6      	bne.n	a2226 <f_open+0x2c6>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   a2298:	f899 222f 	ldrb.w	r2, [r9, #559]	; 0x22f
   a229c:	f899 322e 	ldrb.w	r3, [r9, #558]	; 0x22e
   a22a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   a22a4:	b21b      	sxth	r3, r3
   a22a6:	4553      	cmp	r3, sl
   a22a8:	f47f af5d 	bne.w	a2166 <f_open+0x206>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   a22ac:	f8d9 3066 	ldr.w	r3, [r9, #102]	; 0x66
   a22b0:	4a8e      	ldr	r2, [pc, #568]	; (a24ec <f_open+0x58c>)
   a22b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   a22b6:	4293      	cmp	r3, r2
   a22b8:	d006      	beq.n	a22c8 <f_open+0x368>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   a22ba:	f8d9 3082 	ldr.w	r3, [r9, #130]	; 0x82
   a22be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   a22c2:	4293      	cmp	r3, r2
   a22c4:	f47f af4f 	bne.w	a2166 <f_open+0x206>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   a22c8:	f899 203c 	ldrb.w	r2, [r9, #60]	; 0x3c
   a22cc:	f899 303b 	ldrb.w	r3, [r9, #59]	; 0x3b
   a22d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   a22d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a22d8:	f47f af45 	bne.w	a2166 <f_open+0x206>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   a22dc:	f899 2047 	ldrb.w	r2, [r9, #71]	; 0x47
   a22e0:	f899 3046 	ldrb.w	r3, [r9, #70]	; 0x46
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   a22e4:	f899 e040 	ldrb.w	lr, [r9, #64]	; 0x40
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   a22e8:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   a22ec:	bf14      	ite	ne
   a22ee:	461a      	movne	r2, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   a22f0:	f8d9 2054 	ldreq.w	r2, [r9, #84]	; 0x54
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   a22f4:	f10e 33ff 	add.w	r3, lr, #4294967295
   a22f8:	2b01      	cmp	r3, #1
	fs->fsize = fasize;
   a22fa:	f8c9 201c 	str.w	r2, [r9, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   a22fe:	f889 e003 	strb.w	lr, [r9, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   a2302:	f63f af30 	bhi.w	a2166 <f_open+0x206>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   a2306:	f899 003d 	ldrb.w	r0, [r9, #61]	; 0x3d
   a230a:	f889 0002 	strb.w	r0, [r9, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   a230e:	2800      	cmp	r0, #0
   a2310:	f43f af29 	beq.w	a2166 <f_open+0x206>
   a2314:	1e43      	subs	r3, r0, #1
   a2316:	4203      	tst	r3, r0
   a2318:	f47f af25 	bne.w	a2166 <f_open+0x206>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   a231c:	f899 3042 	ldrb.w	r3, [r9, #66]	; 0x42
   a2320:	f899 1041 	ldrb.w	r1, [r9, #65]	; 0x41
   a2324:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   a2328:	070f      	lsls	r7, r1, #28
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   a232a:	f8a9 1008 	strh.w	r1, [r9, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   a232e:	f47f af1a 	bne.w	a2166 <f_open+0x206>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   a2332:	f899 3044 	ldrb.w	r3, [r9, #68]	; 0x44
   a2336:	f899 a043 	ldrb.w	sl, [r9, #67]	; 0x43
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   a233a:	f899 c03f 	ldrb.w	ip, [r9, #63]	; 0x3f
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   a233e:	ea5a 2a03 	orrs.w	sl, sl, r3, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   a2342:	f899 303e 	ldrb.w	r3, [r9, #62]	; 0x3e
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   a2346:	bf08      	it	eq
   a2348:	f8d9 a050 	ldreq.w	sl, [r9, #80]	; 0x50
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   a234c:	ea53 230c 	orrs.w	r3, r3, ip, lsl #8
   a2350:	f43f af09 	beq.w	a2166 <f_open+0x206>
	fasize *= b;										/* Number of sectors for FAT area */
   a2354:	fb02 f70e 	mul.w	r7, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   a2358:	eb03 1e11 	add.w	lr, r3, r1, lsr #4
   a235c:	44be      	add	lr, r7
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   a235e:	45d6      	cmp	lr, sl
	fasize *= b;										/* Number of sectors for FAT area */
   a2360:	9702      	str	r7, [sp, #8]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   a2362:	f63f af00 	bhi.w	a2166 <f_open+0x206>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   a2366:	ebaa 0a0e 	sub.w	sl, sl, lr
   a236a:	fbba f0f0 	udiv	r0, sl, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   a236e:	2800      	cmp	r0, #0
   a2370:	f43f aef9 	beq.w	a2166 <f_open+0x206>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   a2374:	f640 7cf5 	movw	ip, #4085	; 0xff5
   a2378:	4560      	cmp	r0, ip
   a237a:	f240 808a 	bls.w	a2492 <f_open+0x532>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   a237e:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
   a2382:	4560      	cmp	r0, ip
   a2384:	d964      	bls.n	a2450 <f_open+0x4f0>
	fs->database = bsect + sysect;						/* Data start sector */
   a2386:	9f01      	ldr	r7, [sp, #4]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a2388:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
   a238a:	44be      	add	lr, r7
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a238c:	443b      	add	r3, r7
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a238e:	f8c9 0018 	str.w	r0, [r9, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   a2392:	f8c9 e028 	str.w	lr, [r9, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a2396:	f8c9 3020 	str.w	r3, [r9, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   a239a:	2900      	cmp	r1, #0
   a239c:	f47f aee3 	bne.w	a2166 <f_open+0x206>
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   a23a0:	0080      	lsls	r0, r0, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a23a2:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   a23a6:	f8d9 005c 	ldr.w	r0, [r9, #92]	; 0x5c
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a23aa:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   a23ae:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a23b2:	f4ff aed8 	bcc.w	a2166 <f_open+0x206>
	fs->free_clust = 0xFFFFFFFF;
   a23b6:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   a23ba:	f899 0061 	ldrb.w	r0, [r9, #97]	; 0x61
   a23be:	f899 2060 	ldrb.w	r2, [r9, #96]	; 0x60
	fs->last_clust = 0;
   a23c2:	f8c9 100c 	str.w	r1, [r9, #12]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   a23c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   a23ca:	9801      	ldr	r0, [sp, #4]
	 	fs->fsi_flag = 0;
   a23cc:	f889 1005 	strb.w	r1, [r9, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   a23d0:	4402      	add	r2, r0
	fs->free_clust = 0xFFFFFFFF;
   a23d2:	f8c9 3010 	str.w	r3, [r9, #16]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   a23d6:	4659      	mov	r1, fp
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   a23d8:	f8c9 2014 	str.w	r2, [r9, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   a23dc:	2301      	movs	r3, #1
   a23de:	f899 0001 	ldrb.w	r0, [r9, #1]
   a23e2:	4f43      	ldr	r7, [pc, #268]	; (a24f0 <f_open+0x590>)
   a23e4:	47b8      	blx	r7
   a23e6:	b948      	cbnz	r0, a23fc <f_open+0x49c>
   a23e8:	f64a 2255 	movw	r2, #43605	; 0xaa55
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   a23ec:	f899 122f 	ldrb.w	r1, [r9, #559]	; 0x22f
   a23f0:	f899 322e 	ldrb.w	r3, [r9, #558]	; 0x22e
   a23f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   a23f8:	4293      	cmp	r3, r2
   a23fa:	d011      	beq.n	a2420 <f_open+0x4c0>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   a23fc:	2303      	movs	r3, #3
	fs->winsect = 0;		/* Invalidate sector cache */
   a23fe:	2200      	movs	r2, #0
	fs->id = ++Fsid;		/* File system mount ID */
   a2400:	493c      	ldr	r1, [pc, #240]	; (a24f4 <f_open+0x594>)
	fs->fs_type = fmt;		/* FAT sub-type */
   a2402:	f889 3000 	strb.w	r3, [r9]
	fs->id = ++Fsid;		/* File system mount ID */
   a2406:	880b      	ldrh	r3, [r1, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
   a2408:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
	fs->id = ++Fsid;		/* File system mount ID */
   a240c:	3301      	adds	r3, #1
   a240e:	b29b      	uxth	r3, r3
   a2410:	800b      	strh	r3, [r1, #0]
   a2412:	f8a9 3006 	strh.w	r3, [r9, #6]
	fs->wflag = 0;
   a2416:	f889 2004 	strb.w	r2, [r9, #4]
   a241a:	e5cc      	b.n	a1fb6 <f_open+0x56>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   a241c:	9001      	str	r0, [sp, #4]
   a241e:	e753      	b.n	a22c8 <f_open+0x368>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   a2420:	4b35      	ldr	r3, [pc, #212]	; (a24f8 <f_open+0x598>)
   a2422:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
   a2426:	429a      	cmp	r2, r3
   a2428:	d1e8      	bne.n	a23fc <f_open+0x49c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   a242a:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
   a242e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   a2432:	f8d9 2214 	ldr.w	r2, [r9, #532]	; 0x214
   a2436:	3320      	adds	r3, #32
   a2438:	429a      	cmp	r2, r3
   a243a:	d1df      	bne.n	a23fc <f_open+0x49c>
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   a243c:	f8d9 3218 	ldr.w	r3, [r9, #536]	; 0x218
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   a2440:	f8d9 221c 	ldr.w	r2, [r9, #540]	; 0x21c
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   a2444:	f8c9 3010 	str.w	r3, [r9, #16]
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   a2448:	f8c9 200c 	str.w	r2, [r9, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   a244c:	2303      	movs	r3, #3
   a244e:	e7d6      	b.n	a23fe <f_open+0x49e>
	fs->database = bsect + sysect;						/* Data start sector */
   a2450:	9f01      	ldr	r7, [sp, #4]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a2452:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
   a2454:	44be      	add	lr, r7
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a2456:	443b      	add	r3, r7
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a2458:	f8c9 0018 	str.w	r0, [r9, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   a245c:	f8c9 e028 	str.w	lr, [r9, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a2460:	f8c9 3020 	str.w	r3, [r9, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   a2464:	2900      	cmp	r1, #0
   a2466:	f43f ae7e 	beq.w	a2166 <f_open+0x206>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   a246a:	0040      	lsls	r0, r0, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a246c:	f200 11ff 	addw	r1, r0, #511	; 0x1ff
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   a2470:	9802      	ldr	r0, [sp, #8]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a2472:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   a2476:	4418      	add	r0, r3
   a2478:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a247c:	f4ff ae73 	bcc.w	a2166 <f_open+0x206>
	fs->last_clust = 0;
   a2480:	2300      	movs	r3, #0
	fs->free_clust = 0xFFFFFFFF;
   a2482:	f04f 32ff 	mov.w	r2, #4294967295
	fs->last_clust = 0;
   a2486:	f8c9 300c 	str.w	r3, [r9, #12]
	fs->free_clust = 0xFFFFFFFF;
   a248a:	f8c9 2010 	str.w	r2, [r9, #16]
	fs->last_clust = 0;
   a248e:	2302      	movs	r3, #2
   a2490:	e7b5      	b.n	a23fe <f_open+0x49e>
	fs->database = bsect + sysect;						/* Data start sector */
   a2492:	9f01      	ldr	r7, [sp, #4]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a2494:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
   a2496:	44be      	add	lr, r7
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a2498:	443b      	add	r3, r7
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a249a:	f8c9 0018 	str.w	r0, [r9, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   a249e:	f8c9 e028 	str.w	lr, [r9, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a24a2:	f8c9 3020 	str.w	r3, [r9, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   a24a6:	2900      	cmp	r1, #0
   a24a8:	f43f ae5d 	beq.w	a2166 <f_open+0x206>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   a24ac:	f000 0101 	and.w	r1, r0, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a24b0:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   a24b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   a24b8:	9f02      	ldr	r7, [sp, #8]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a24ba:	eb01 0050 	add.w	r0, r1, r0, lsr #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   a24be:	443b      	add	r3, r7
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a24c0:	ebb2 2f50 	cmp.w	r2, r0, lsr #9
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   a24c4:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a24c8:	f4ff ae4d 	bcc.w	a2166 <f_open+0x206>
	fs->last_clust = 0;
   a24cc:	2300      	movs	r3, #0
	fs->free_clust = 0xFFFFFFFF;
   a24ce:	f04f 32ff 	mov.w	r2, #4294967295
	fs->last_clust = 0;
   a24d2:	f8c9 300c 	str.w	r3, [r9, #12]
	fs->free_clust = 0xFFFFFFFF;
   a24d6:	f8c9 2010 	str.w	r2, [r9, #16]
	fmt = FS_FAT12;
   a24da:	2301      	movs	r3, #1
   a24dc:	e78f      	b.n	a23fe <f_open+0x49e>
		p += 2; *path = p;				/* Return pointer to the path name */
   a24de:	3502      	adds	r5, #2
   a24e0:	e54e      	b.n	a1f80 <f_open+0x20>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   a24e2:	f018 0f1c 	tst.w	r8, #28
   a24e6:	f43f ad7f 	beq.w	a1fe8 <f_open+0x88>
   a24ea:	e590      	b.n	a200e <f_open+0xae>
   a24ec:	00544146 	.word	0x00544146
   a24f0:	0009f389 	.word	0x0009f389
   a24f4:	20072f30 	.word	0x20072f30
   a24f8:	41615252 	.word	0x41615252

000a24fc <f_read>:
{
   a24fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*br = 0;	/* Initialize byte counter */
   a2500:	2400      	movs	r4, #0
   a2502:	601c      	str	r4, [r3, #0]
	res = validate(fp->fs, fp->id);				/* Check validity */
   a2504:	6805      	ldr	r5, [r0, #0]
{
   a2506:	b089      	sub	sp, #36	; 0x24
	if (!fs || !fs->fs_type || fs->id != id)
   a2508:	b10d      	cbz	r5, a250e <f_read+0x12>
   a250a:	782c      	ldrb	r4, [r5, #0]
   a250c:	b91c      	cbnz	r4, a2516 <f_read+0x1a>
		return FR_INVALID_OBJECT;
   a250e:	2009      	movs	r0, #9
}
   a2510:	b009      	add	sp, #36	; 0x24
   a2512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   a2516:	8886      	ldrh	r6, [r0, #4]
   a2518:	88ec      	ldrh	r4, [r5, #6]
   a251a:	42a6      	cmp	r6, r4
   a251c:	d1f7      	bne.n	a250e <f_read+0x12>
   a251e:	4604      	mov	r4, r0
   a2520:	4698      	mov	r8, r3
	if (disk_status(fs->drv) & STA_NOINIT)
   a2522:	7868      	ldrb	r0, [r5, #1]
   a2524:	4bbf      	ldr	r3, [pc, #764]	; (a2824 <f_read+0x328>)
   a2526:	4692      	mov	sl, r2
   a2528:	4689      	mov	r9, r1
   a252a:	4798      	blx	r3
   a252c:	07c2      	lsls	r2, r0, #31
   a252e:	d501      	bpl.n	a2534 <f_read+0x38>
		return FR_NOT_READY;
   a2530:	2003      	movs	r0, #3
   a2532:	e7ed      	b.n	a2510 <f_read+0x14>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
   a2534:	79a3      	ldrb	r3, [r4, #6]
   a2536:	061a      	lsls	r2, r3, #24
   a2538:	d405      	bmi.n	a2546 <f_read+0x4a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
   a253a:	07db      	lsls	r3, r3, #31
   a253c:	d407      	bmi.n	a254e <f_read+0x52>
		LEAVE_FF(fp->fs, FR_DENIED);
   a253e:	2007      	movs	r0, #7
}
   a2540:	b009      	add	sp, #36	; 0x24
   a2542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LEAVE_FF(fp->fs, FR_INT_ERR);
   a2546:	2002      	movs	r0, #2
}
   a2548:	b009      	add	sp, #36	; 0x24
   a254a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->fsize - fp->fptr;
   a254e:	68a3      	ldr	r3, [r4, #8]
   a2550:	68e2      	ldr	r2, [r4, #12]
   a2552:	1ad2      	subs	r2, r2, r3
   a2554:	4592      	cmp	sl, r2
   a2556:	bf28      	it	cs
   a2558:	4692      	movcs	sl, r2
	for ( ;  btr;								/* Repeat until all data read */
   a255a:	f1ba 0f00 	cmp.w	sl, #0
   a255e:	f000 8171 	beq.w	a2844 <f_read+0x348>
   a2562:	f104 0224 	add.w	r2, r4, #36	; 0x24
   a2566:	9203      	str	r2, [sp, #12]
   a2568:	4252      	negs	r2, r2
   a256a:	f002 0203 	and.w	r2, r2, #3
   a256e:	4610      	mov	r0, r2
   a2570:	9204      	str	r2, [sp, #16]
   a2572:	f5c2 72fe 	rsb	r2, r2, #508	; 0x1fc
   a2576:	0892      	lsrs	r2, r2, #2
   a2578:	3201      	adds	r2, #1
   a257a:	9206      	str	r2, [sp, #24]
   a257c:	0092      	lsls	r2, r2, #2
   a257e:	9205      	str	r2, [sp, #20]
   a2580:	f5c0 7200 	rsb	r2, r0, #512	; 0x200
   a2584:	9207      	str	r2, [sp, #28]
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   a2586:	f3c3 0208 	ubfx	r2, r3, #0, #9
   a258a:	2a00      	cmp	r2, #0
   a258c:	f040 80ac 	bne.w	a26e8 <f_read+0x1ec>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   a2590:	6820      	ldr	r0, [r4, #0]
   a2592:	7885      	ldrb	r5, [r0, #2]
   a2594:	3d01      	subs	r5, #1
   a2596:	ea05 2553 	and.w	r5, r5, r3, lsr #9
			if (!csect) {						/* On the cluster boundary? */
   a259a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   a259e:	f040 8106 	bne.w	a27ae <f_read+0x2b2>
				if (fp->fptr == 0) {			/* On the top of the file? */
   a25a2:	2b00      	cmp	r3, #0
   a25a4:	f040 8132 	bne.w	a280c <f_read+0x310>
					clst = fp->sclust;			/* Follow from the origin */
   a25a8:	6926      	ldr	r6, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   a25aa:	2e01      	cmp	r6, #1
   a25ac:	f240 8134 	bls.w	a2818 <f_read+0x31c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   a25b0:	1c77      	adds	r7, r6, #1
   a25b2:	f000 813d 	beq.w	a2830 <f_read+0x334>
   a25b6:	6820      	ldr	r0, [r4, #0]
				fp->clust = clst;				/* Update current cluster */
   a25b8:	6166      	str	r6, [r4, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a25ba:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
   a25bc:	3e02      	subs	r6, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a25be:	3b02      	subs	r3, #2
   a25c0:	429e      	cmp	r6, r3
   a25c2:	f080 8129 	bcs.w	a2818 <f_read+0x31c>
	return clst * fs->csize + fs->database;
   a25c6:	7883      	ldrb	r3, [r0, #2]
   a25c8:	6a82      	ldr	r2, [r0, #40]	; 0x28
   a25ca:	fb06 f103 	mul.w	r1, r6, r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   a25ce:	188f      	adds	r7, r1, r2
	return clst * fs->csize + fs->database;
   a25d0:	9202      	str	r2, [sp, #8]
   a25d2:	9101      	str	r1, [sp, #4]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   a25d4:	f000 8120 	beq.w	a2818 <f_read+0x31c>
			if (cc) {							/* Read maximum contiguous sectors directly */
   a25d8:	ea5f 2b5a 	movs.w	fp, sl, lsr #9
			sect += csect;
   a25dc:	442f      	add	r7, r5
			if (cc) {							/* Read maximum contiguous sectors directly */
   a25de:	f000 80e8 	beq.w	a27b2 <f_read+0x2b6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   a25e2:	eb05 020b 	add.w	r2, r5, fp
   a25e6:	4293      	cmp	r3, r2
					cc = fp->fs->csize - csect;
   a25e8:	bf38      	it	cc
   a25ea:	eba3 0b05 	subcc.w	fp, r3, r5
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   a25ee:	fa5f f38b 	uxtb.w	r3, fp
   a25f2:	7840      	ldrb	r0, [r0, #1]
   a25f4:	463a      	mov	r2, r7
   a25f6:	4649      	mov	r1, r9
   a25f8:	4e8b      	ldr	r6, [pc, #556]	; (a2828 <f_read+0x32c>)
   a25fa:	47b0      	blx	r6
					ABORT(fp->fs, FR_DISK_ERR);
   a25fc:	79a3      	ldrb	r3, [r4, #6]
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   a25fe:	2800      	cmp	r0, #0
   a2600:	f040 8117 	bne.w	a2832 <f_read+0x336>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
   a2604:	0658      	lsls	r0, r3, #25
   a2606:	d55a      	bpl.n	a26be <f_read+0x1c2>
   a2608:	69a3      	ldr	r3, [r4, #24]
   a260a:	1bdf      	subs	r7, r3, r7
   a260c:	45bb      	cmp	fp, r7
   a260e:	d956      	bls.n	a26be <f_read+0x1c2>
   a2610:	9a02      	ldr	r2, [sp, #8]
   a2612:	1b5b      	subs	r3, r3, r5
   a2614:	1a9b      	subs	r3, r3, r2
   a2616:	9a01      	ldr	r2, [sp, #4]
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
   a2618:	eb09 2747 	add.w	r7, r9, r7, lsl #9
   a261c:	1a9b      	subs	r3, r3, r2
   a261e:	025b      	lsls	r3, r3, #9
   a2620:	eb09 0103 	add.w	r1, r9, r3
   a2624:	f104 0228 	add.w	r2, r4, #40	; 0x28
   a2628:	428a      	cmp	r2, r1
   a262a:	d905      	bls.n	a2638 <f_read+0x13c>
   a262c:	1d1a      	adds	r2, r3, #4
   a262e:	9903      	ldr	r1, [sp, #12]
   a2630:	444a      	add	r2, r9
   a2632:	4291      	cmp	r1, r2
   a2634:	f0c0 810e 	bcc.w	a2854 <f_read+0x358>
   a2638:	9904      	ldr	r1, [sp, #16]
   a263a:	2900      	cmp	r1, #0
   a263c:	f000 8104 	beq.w	a2848 <f_read+0x34c>
		*d++ = *s++;
   a2640:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   a2644:	2901      	cmp	r1, #1
   a2646:	f107 0001 	add.w	r0, r7, #1
   a264a:	703a      	strb	r2, [r7, #0]
   a264c:	f104 0525 	add.w	r5, r4, #37	; 0x25
   a2650:	f000 810b 	beq.w	a286a <f_read+0x36e>
   a2654:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   a2658:	2903      	cmp	r1, #3
   a265a:	f107 0002 	add.w	r0, r7, #2
   a265e:	707a      	strb	r2, [r7, #1]
   a2660:	f104 0526 	add.w	r5, r4, #38	; 0x26
   a2664:	f040 8105 	bne.w	a2872 <f_read+0x376>
   a2668:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   a266c:	1cf8      	adds	r0, r7, #3
   a266e:	70ba      	strb	r2, [r7, #2]
   a2670:	f240 16fd 	movw	r6, #509	; 0x1fd
   a2674:	460f      	mov	r7, r1
   a2676:	f104 0527 	add.w	r5, r4, #39	; 0x27
   a267a:	4639      	mov	r1, r7
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
   a267c:	2200      	movs	r2, #0
   a267e:	443b      	add	r3, r7
   a2680:	3124      	adds	r1, #36	; 0x24
   a2682:	f8dd e018 	ldr.w	lr, [sp, #24]
   a2686:	444b      	add	r3, r9
   a2688:	4421      	add	r1, r4
		*d++ = *s++;
   a268a:	f851 7b04 	ldr.w	r7, [r1], #4
   a268e:	3201      	adds	r2, #1
   a2690:	4596      	cmp	lr, r2
   a2692:	f843 7b04 	str.w	r7, [r3], #4
   a2696:	d8f8      	bhi.n	a268a <f_read+0x18e>
   a2698:	9f05      	ldr	r7, [sp, #20]
   a269a:	9907      	ldr	r1, [sp, #28]
   a269c:	1bf6      	subs	r6, r6, r7
   a269e:	428f      	cmp	r7, r1
   a26a0:	eb00 0307 	add.w	r3, r0, r7
   a26a4:	eb05 0207 	add.w	r2, r5, r7
   a26a8:	d009      	beq.n	a26be <f_read+0x1c2>
   a26aa:	5de9      	ldrb	r1, [r5, r7]
	while (cnt--)
   a26ac:	2e01      	cmp	r6, #1
		*d++ = *s++;
   a26ae:	55c1      	strb	r1, [r0, r7]
	while (cnt--)
   a26b0:	d005      	beq.n	a26be <f_read+0x1c2>
		*d++ = *s++;
   a26b2:	7851      	ldrb	r1, [r2, #1]
	while (cnt--)
   a26b4:	2e02      	cmp	r6, #2
		*d++ = *s++;
   a26b6:	7059      	strb	r1, [r3, #1]
	while (cnt--)
   a26b8:	d001      	beq.n	a26be <f_read+0x1c2>
		*d++ = *s++;
   a26ba:	7892      	ldrb	r2, [r2, #2]
   a26bc:	709a      	strb	r2, [r3, #2]
   a26be:	68a2      	ldr	r2, [r4, #8]
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
   a26c0:	ea4f 234b 	mov.w	r3, fp, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   a26c4:	441a      	add	r2, r3
   a26c6:	60a2      	str	r2, [r4, #8]
   a26c8:	f8d8 2000 	ldr.w	r2, [r8]
	for ( ;  btr;								/* Repeat until all data read */
   a26cc:	ebba 0a03 	subs.w	sl, sl, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   a26d0:	441a      	add	r2, r3
   a26d2:	4499      	add	r9, r3
   a26d4:	f8c8 2000 	str.w	r2, [r8]
	for ( ;  btr;								/* Repeat until all data read */
   a26d8:	f000 80b4 	beq.w	a2844 <f_read+0x348>
   a26dc:	68a3      	ldr	r3, [r4, #8]
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   a26de:	f3c3 0208 	ubfx	r2, r3, #0, #9
   a26e2:	2a00      	cmp	r2, #0
   a26e4:	f43f af54 	beq.w	a2590 <f_read+0x94>
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   a26e8:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
   a26ec:	f102 0124 	add.w	r1, r2, #36	; 0x24
   a26f0:	3228      	adds	r2, #40	; 0x28
   a26f2:	4553      	cmp	r3, sl
   a26f4:	4422      	add	r2, r4
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   a26f6:	eb04 0001 	add.w	r0, r4, r1
   a26fa:	f109 0504 	add.w	r5, r9, #4
   a26fe:	bf28      	it	cs
   a2700:	4653      	movcs	r3, sl
   a2702:	42a8      	cmp	r0, r5
   a2704:	bf38      	it	cc
   a2706:	4591      	cmpcc	r9, r2
	while (cnt--)
   a2708:	f103 3eff 	add.w	lr, r3, #4294967295
   a270c:	d373      	bcc.n	a27f6 <f_read+0x2fa>
   a270e:	2b0b      	cmp	r3, #11
   a2710:	d971      	bls.n	a27f6 <f_read+0x2fa>
   a2712:	4242      	negs	r2, r0
   a2714:	f012 0203 	ands.w	r2, r2, #3
   a2718:	d069      	beq.n	a27ee <f_read+0x2f2>
		*d++ = *s++;
   a271a:	5c66      	ldrb	r6, [r4, r1]
   a271c:	2a01      	cmp	r2, #1
   a271e:	f889 6000 	strb.w	r6, [r9]
   a2722:	f109 0501 	add.w	r5, r9, #1
   a2726:	f100 0601 	add.w	r6, r0, #1
	while (cnt--)
   a272a:	f1a3 0702 	sub.w	r7, r3, #2
   a272e:	d011      	beq.n	a2754 <f_read+0x258>
		*d++ = *s++;
   a2730:	7846      	ldrb	r6, [r0, #1]
   a2732:	2a03      	cmp	r2, #3
   a2734:	f889 6001 	strb.w	r6, [r9, #1]
   a2738:	f109 0502 	add.w	r5, r9, #2
   a273c:	f100 0602 	add.w	r6, r0, #2
	while (cnt--)
   a2740:	f1a3 0703 	sub.w	r7, r3, #3
   a2744:	d106      	bne.n	a2754 <f_read+0x258>
		*d++ = *s++;
   a2746:	7885      	ldrb	r5, [r0, #2]
   a2748:	1cc6      	adds	r6, r0, #3
   a274a:	f889 5002 	strb.w	r5, [r9, #2]
	while (cnt--)
   a274e:	1f1f      	subs	r7, r3, #4
		*d++ = *s++;
   a2750:	f109 0503 	add.w	r5, r9, #3
   a2754:	eba3 0b02 	sub.w	fp, r3, r2
   a2758:	f1ab 0004 	sub.w	r0, fp, #4
   a275c:	0880      	lsrs	r0, r0, #2
   a275e:	ebae 0e02 	sub.w	lr, lr, r2
   a2762:	3001      	adds	r0, #1
   a2764:	f1be 0f02 	cmp.w	lr, #2
   a2768:	ea4f 0c80 	mov.w	ip, r0, lsl #2
   a276c:	d914      	bls.n	a2798 <f_read+0x29c>
	while (cnt--)
   a276e:	f04f 0e00 	mov.w	lr, #0
   a2772:	4411      	add	r1, r2
   a2774:	4421      	add	r1, r4
   a2776:	444a      	add	r2, r9
   a2778:	9301      	str	r3, [sp, #4]
		*d++ = *s++;
   a277a:	f851 3b04 	ldr.w	r3, [r1], #4
   a277e:	f10e 0e01 	add.w	lr, lr, #1
   a2782:	4570      	cmp	r0, lr
   a2784:	f842 3b04 	str.w	r3, [r2], #4
   a2788:	d8f7      	bhi.n	a277a <f_read+0x27e>
   a278a:	45e3      	cmp	fp, ip
   a278c:	9b01      	ldr	r3, [sp, #4]
   a278e:	4465      	add	r5, ip
   a2790:	4466      	add	r6, ip
   a2792:	eba7 070c 	sub.w	r7, r7, ip
   a2796:	d008      	beq.n	a27aa <f_read+0x2ae>
   a2798:	7832      	ldrb	r2, [r6, #0]
   a279a:	702a      	strb	r2, [r5, #0]
	while (cnt--)
   a279c:	b12f      	cbz	r7, a27aa <f_read+0x2ae>
		*d++ = *s++;
   a279e:	7872      	ldrb	r2, [r6, #1]
	while (cnt--)
   a27a0:	2f01      	cmp	r7, #1
		*d++ = *s++;
   a27a2:	706a      	strb	r2, [r5, #1]
	while (cnt--)
   a27a4:	d001      	beq.n	a27aa <f_read+0x2ae>
		*d++ = *s++;
   a27a6:	78b2      	ldrb	r2, [r6, #2]
   a27a8:	70aa      	strb	r2, [r5, #2]
   a27aa:	68a2      	ldr	r2, [r4, #8]
   a27ac:	e78a      	b.n	a26c4 <f_read+0x1c8>
   a27ae:	6966      	ldr	r6, [r4, #20]
   a27b0:	e703      	b.n	a25ba <f_read+0xbe>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
   a27b2:	69a2      	ldr	r2, [r4, #24]
   a27b4:	4297      	cmp	r7, r2
   a27b6:	d015      	beq.n	a27e4 <f_read+0x2e8>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
   a27b8:	79a3      	ldrb	r3, [r4, #6]
   a27ba:	0659      	lsls	r1, r3, #25
   a27bc:	d50b      	bpl.n	a27d6 <f_read+0x2da>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   a27be:	2301      	movs	r3, #1
   a27c0:	7840      	ldrb	r0, [r0, #1]
   a27c2:	9903      	ldr	r1, [sp, #12]
   a27c4:	4d19      	ldr	r5, [pc, #100]	; (a282c <f_read+0x330>)
   a27c6:	47a8      	blx	r5
						ABORT(fp->fs, FR_DISK_ERR);
   a27c8:	79a3      	ldrb	r3, [r4, #6]
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   a27ca:	2800      	cmp	r0, #0
   a27cc:	d131      	bne.n	a2832 <f_read+0x336>
					fp->flag &= ~FA__DIRTY;
   a27ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   a27d2:	6820      	ldr	r0, [r4, #0]
   a27d4:	71a3      	strb	r3, [r4, #6]
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
   a27d6:	7840      	ldrb	r0, [r0, #1]
   a27d8:	2301      	movs	r3, #1
   a27da:	463a      	mov	r2, r7
   a27dc:	9903      	ldr	r1, [sp, #12]
   a27de:	4d12      	ldr	r5, [pc, #72]	; (a2828 <f_read+0x32c>)
   a27e0:	47a8      	blx	r5
   a27e2:	bb28      	cbnz	r0, a2830 <f_read+0x334>
   a27e4:	68a2      	ldr	r2, [r4, #8]
			fp->dsect = sect;
   a27e6:	61a7      	str	r7, [r4, #24]
   a27e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
   a27ec:	e77c      	b.n	a26e8 <f_read+0x1ec>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   a27ee:	4606      	mov	r6, r0
	while (cnt--)
   a27f0:	4677      	mov	r7, lr
   a27f2:	464d      	mov	r5, r9
   a27f4:	e7ae      	b.n	a2754 <f_read+0x258>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   a27f6:	4602      	mov	r2, r0
   a27f8:	f109 31ff 	add.w	r1, r9, #4294967295
   a27fc:	4418      	add	r0, r3
		*d++ = *s++;
   a27fe:	f812 5b01 	ldrb.w	r5, [r2], #1
	while (cnt--)
   a2802:	4282      	cmp	r2, r0
		*d++ = *s++;
   a2804:	f801 5f01 	strb.w	r5, [r1, #1]!
	while (cnt--)
   a2808:	d1f9      	bne.n	a27fe <f_read+0x302>
   a280a:	e7ce      	b.n	a27aa <f_read+0x2ae>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
   a280c:	6961      	ldr	r1, [r4, #20]
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   a280e:	2901      	cmp	r1, #1
   a2810:	d902      	bls.n	a2818 <f_read+0x31c>
   a2812:	6983      	ldr	r3, [r0, #24]
   a2814:	4299      	cmp	r1, r3
   a2816:	d311      	bcc.n	a283c <f_read+0x340>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   a2818:	79a3      	ldrb	r3, [r4, #6]
   a281a:	2002      	movs	r0, #2
   a281c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   a2820:	71a3      	strb	r3, [r4, #6]
   a2822:	e675      	b.n	a2510 <f_read+0x14>
   a2824:	0009f371 	.word	0x0009f371
   a2828:	0009f389 	.word	0x0009f389
   a282c:	0009f3fd 	.word	0x0009f3fd
					ABORT(fp->fs, FR_DISK_ERR);
   a2830:	79a3      	ldrb	r3, [r4, #6]
   a2832:	f063 037f 	orn	r3, r3, #127	; 0x7f
   a2836:	2001      	movs	r0, #1
   a2838:	71a3      	strb	r3, [r4, #6]
   a283a:	e669      	b.n	a2510 <f_read+0x14>
   a283c:	4b0f      	ldr	r3, [pc, #60]	; (a287c <f_read+0x380>)
   a283e:	4798      	blx	r3
   a2840:	4606      	mov	r6, r0
   a2842:	e6b2      	b.n	a25aa <f_read+0xae>
	LEAVE_FF(fp->fs, FR_OK);
   a2844:	2000      	movs	r0, #0
   a2846:	e663      	b.n	a2510 <f_read+0x14>
	BYTE *d = (BYTE*)dst;
   a2848:	4638      	mov	r0, r7
	const BYTE *s = (const BYTE*)src;
   a284a:	9d03      	ldr	r5, [sp, #12]
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
   a284c:	f44f 7600 	mov.w	r6, #512	; 0x200
   a2850:	460f      	mov	r7, r1
   a2852:	e712      	b.n	a267a <f_read+0x17e>
   a2854:	460b      	mov	r3, r1
   a2856:	1e7a      	subs	r2, r7, #1
   a2858:	f504 7009 	add.w	r0, r4, #548	; 0x224
		*d++ = *s++;
   a285c:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
   a2860:	4283      	cmp	r3, r0
		*d++ = *s++;
   a2862:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
   a2866:	d1f9      	bne.n	a285c <f_read+0x360>
   a2868:	e729      	b.n	a26be <f_read+0x1c2>
		*d++ = *s++;
   a286a:	f240 16ff 	movw	r6, #511	; 0x1ff
   a286e:	460f      	mov	r7, r1
   a2870:	e703      	b.n	a267a <f_read+0x17e>
   a2872:	f44f 76ff 	mov.w	r6, #510	; 0x1fe
   a2876:	460f      	mov	r7, r1
   a2878:	e6ff      	b.n	a267a <f_read+0x17e>
   a287a:	bf00      	nop
   a287c:	0009ff29 	.word	0x0009ff29

000a2880 <f_write>:
{
   a2880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*bw = 0;	/* Initialize byte counter */
   a2884:	2400      	movs	r4, #0
   a2886:	601c      	str	r4, [r3, #0]
	res = validate(fp->fs, fp->id);			/* Check validity */
   a2888:	6804      	ldr	r4, [r0, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   a288a:	b10c      	cbz	r4, a2890 <f_write+0x10>
   a288c:	7825      	ldrb	r5, [r4, #0]
   a288e:	b915      	cbnz	r5, a2896 <f_write+0x16>
		return FR_INVALID_OBJECT;
   a2890:	2009      	movs	r0, #9
   a2892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   a2896:	8886      	ldrh	r6, [r0, #4]
   a2898:	88e5      	ldrh	r5, [r4, #6]
   a289a:	42ae      	cmp	r6, r5
   a289c:	d1f8      	bne.n	a2890 <f_write+0x10>
   a289e:	4605      	mov	r5, r0
   a28a0:	461e      	mov	r6, r3
	if (disk_status(fs->drv) & STA_NOINIT)
   a28a2:	7860      	ldrb	r0, [r4, #1]
   a28a4:	4b0e      	ldr	r3, [pc, #56]	; (a28e0 <f_write+0x60>)
   a28a6:	4690      	mov	r8, r2
   a28a8:	460f      	mov	r7, r1
   a28aa:	4798      	blx	r3
   a28ac:	07c0      	lsls	r0, r0, #31
   a28ae:	d502      	bpl.n	a28b6 <f_write+0x36>
		return FR_NOT_READY;
   a28b0:	2003      	movs	r0, #3
   a28b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   a28b6:	79ab      	ldrb	r3, [r5, #6]
   a28b8:	061a      	lsls	r2, r3, #24
   a28ba:	d404      	bmi.n	a28c6 <f_write+0x46>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   a28bc:	0799      	lsls	r1, r3, #30
   a28be:	d405      	bmi.n	a28cc <f_write+0x4c>
		LEAVE_FF(fp->fs, FR_DENIED);
   a28c0:	2007      	movs	r0, #7
   a28c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LEAVE_FF(fp->fs, FR_INT_ERR);
   a28c6:	2002      	movs	r0, #2
   a28c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a28cc:	4c05      	ldr	r4, [pc, #20]	; (a28e4 <f_write+0x64>)
   a28ce:	4633      	mov	r3, r6
   a28d0:	4642      	mov	r2, r8
   a28d2:	4639      	mov	r1, r7
   a28d4:	4628      	mov	r0, r5
   a28d6:	46a4      	mov	ip, r4
}
   a28d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a28dc:	4760      	bx	ip
   a28de:	bf00      	nop
   a28e0:	0009f371 	.word	0x0009f371
   a28e4:	000a0629 	.word	0x000a0629

000a28e8 <f_close>:
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   a28e8:	6803      	ldr	r3, [r0, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   a28ea:	b10b      	cbz	r3, a28f0 <f_close+0x8>
   a28ec:	781a      	ldrb	r2, [r3, #0]
   a28ee:	b90a      	cbnz	r2, a28f4 <f_close+0xc>
		return FR_INVALID_OBJECT;
   a28f0:	2009      	movs	r0, #9
   a28f2:	4770      	bx	lr
	if (!fs || !fs->fs_type || fs->id != id)
   a28f4:	8881      	ldrh	r1, [r0, #4]
   a28f6:	88da      	ldrh	r2, [r3, #6]
   a28f8:	4291      	cmp	r1, r2
   a28fa:	d1f9      	bne.n	a28f0 <f_close+0x8>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   a28fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   a2900:	4604      	mov	r4, r0
	if (disk_status(fs->drv) & STA_NOINIT)
   a2902:	7858      	ldrb	r0, [r3, #1]
   a2904:	4b43      	ldr	r3, [pc, #268]	; (a2a14 <f_close+0x12c>)
   a2906:	4798      	blx	r3
   a2908:	07c0      	lsls	r0, r0, #31
   a290a:	d502      	bpl.n	a2912 <f_close+0x2a>
		return FR_NOT_READY;
   a290c:	2003      	movs	r0, #3
   a290e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   a2912:	79a3      	ldrb	r3, [r4, #6]
   a2914:	069a      	lsls	r2, r3, #26
   a2916:	d548      	bpl.n	a29aa <f_close+0xc2>
			if (fp->flag & FA__DIRTY) {
   a2918:	0659      	lsls	r1, r3, #25
   a291a:	d50d      	bpl.n	a2938 <f_close+0x50>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   a291c:	6822      	ldr	r2, [r4, #0]
   a291e:	2301      	movs	r3, #1
   a2920:	7850      	ldrb	r0, [r2, #1]
   a2922:	f104 0124 	add.w	r1, r4, #36	; 0x24
   a2926:	69a2      	ldr	r2, [r4, #24]
   a2928:	4d3b      	ldr	r5, [pc, #236]	; (a2a18 <f_close+0x130>)
   a292a:	47a8      	blx	r5
   a292c:	2800      	cmp	r0, #0
   a292e:	d160      	bne.n	a29f2 <f_close+0x10a>
				fp->flag &= ~FA__DIRTY;
   a2930:	79a3      	ldrb	r3, [r4, #6]
   a2932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   a2936:	71a3      	strb	r3, [r4, #6]
			res = move_window(fp->fs, fp->dir_sect);
   a2938:	6825      	ldr	r5, [r4, #0]
   a293a:	f8d4 801c 	ldr.w	r8, [r4, #28]
	wsect = fs->winsect;
   a293e:	6aee      	ldr	r6, [r5, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   a2940:	45b0      	cmp	r8, r6
   a2942:	d005      	beq.n	a2950 <f_close+0x68>
		if (fs->wflag) {	/* Write back dirty window if needed */
   a2944:	792b      	ldrb	r3, [r5, #4]
   a2946:	2b00      	cmp	r3, #0
   a2948:	d133      	bne.n	a29b2 <f_close+0xca>
		if (sector) {
   a294a:	f1b8 0f00 	cmp.w	r8, #0
   a294e:	d155      	bne.n	a29fc <f_close+0x114>
				dir = fp->dir_ptr;
   a2950:	6a25      	ldr	r5, [r4, #32]
				tim = get_fattime();						/* Update updated time */
   a2952:	4a32      	ldr	r2, [pc, #200]	; (a2a1c <f_close+0x134>)
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   a2954:	7aeb      	ldrb	r3, [r5, #11]
   a2956:	f043 0320 	orr.w	r3, r3, #32
   a295a:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   a295c:	68e3      	ldr	r3, [r4, #12]
   a295e:	772b      	strb	r3, [r5, #28]
   a2960:	89a3      	ldrh	r3, [r4, #12]
   a2962:	0a1b      	lsrs	r3, r3, #8
   a2964:	776b      	strb	r3, [r5, #29]
   a2966:	89e3      	ldrh	r3, [r4, #14]
   a2968:	77ab      	strb	r3, [r5, #30]
   a296a:	7be3      	ldrb	r3, [r4, #15]
   a296c:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   a296e:	6923      	ldr	r3, [r4, #16]
   a2970:	76ab      	strb	r3, [r5, #26]
   a2972:	8a23      	ldrh	r3, [r4, #16]
   a2974:	0a1b      	lsrs	r3, r3, #8
   a2976:	76eb      	strb	r3, [r5, #27]
   a2978:	8a63      	ldrh	r3, [r4, #18]
   a297a:	752b      	strb	r3, [r5, #20]
   a297c:	8a63      	ldrh	r3, [r4, #18]
   a297e:	0a1b      	lsrs	r3, r3, #8
   a2980:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   a2982:	4790      	blx	r2
				fp->fs->wflag = 1;
   a2984:	2101      	movs	r1, #1
				ST_DWORD(dir+DIR_WrtTime, tim);
   a2986:	0c02      	lsrs	r2, r0, #16
   a2988:	0e03      	lsrs	r3, r0, #24
   a298a:	f3c0 2607 	ubfx	r6, r0, #8, #8
   a298e:	75a8      	strb	r0, [r5, #22]
   a2990:	75ee      	strb	r6, [r5, #23]
   a2992:	762a      	strb	r2, [r5, #24]
   a2994:	766b      	strb	r3, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   a2996:	79a3      	ldrb	r3, [r4, #6]
				fp->fs->wflag = 1;
   a2998:	6822      	ldr	r2, [r4, #0]
				fp->flag &= ~FA__WRITTEN;
   a299a:	f023 0320 	bic.w	r3, r3, #32
   a299e:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   a29a0:	7111      	strb	r1, [r2, #4]
				res = sync(fp->fs);
   a29a2:	6820      	ldr	r0, [r4, #0]
   a29a4:	4b1e      	ldr	r3, [pc, #120]	; (a2a20 <f_close+0x138>)
   a29a6:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   a29a8:	bb30      	cbnz	r0, a29f8 <f_close+0x110>
   a29aa:	2000      	movs	r0, #0
   a29ac:	6020      	str	r0, [r4, #0]
   a29ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   a29b2:	f105 0930 	add.w	r9, r5, #48	; 0x30
   a29b6:	4649      	mov	r1, r9
   a29b8:	2301      	movs	r3, #1
   a29ba:	4632      	mov	r2, r6
   a29bc:	7868      	ldrb	r0, [r5, #1]
   a29be:	f8df a058 	ldr.w	sl, [pc, #88]	; a2a18 <f_close+0x130>
   a29c2:	47d0      	blx	sl
   a29c4:	b9a8      	cbnz	r0, a29f2 <f_close+0x10a>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a29c6:	69eb      	ldr	r3, [r5, #28]
   a29c8:	6a2a      	ldr	r2, [r5, #32]
			fs->wflag = 0;
   a29ca:	7128      	strb	r0, [r5, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   a29cc:	441a      	add	r2, r3
   a29ce:	4296      	cmp	r6, r2
   a29d0:	d2bb      	bcs.n	a294a <f_close+0x62>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a29d2:	78ef      	ldrb	r7, [r5, #3]
   a29d4:	2f01      	cmp	r7, #1
   a29d6:	d801      	bhi.n	a29dc <f_close+0xf4>
   a29d8:	e7b7      	b.n	a294a <f_close+0x62>
   a29da:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
   a29dc:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a29de:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   a29e0:	4632      	mov	r2, r6
   a29e2:	2301      	movs	r3, #1
   a29e4:	4649      	mov	r1, r9
   a29e6:	7868      	ldrb	r0, [r5, #1]
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a29e8:	b2ff      	uxtb	r7, r7
					disk_write(fs->drv, fs->win, wsect, 1);
   a29ea:	47d0      	blx	sl
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   a29ec:	2f01      	cmp	r7, #1
   a29ee:	d1f4      	bne.n	a29da <f_close+0xf2>
   a29f0:	e7ab      	b.n	a294a <f_close+0x62>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
   a29f2:	2001      	movs	r0, #1
   a29f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return res;
#endif
}
   a29f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   a29fc:	2301      	movs	r3, #1
   a29fe:	4642      	mov	r2, r8
   a2a00:	f105 0130 	add.w	r1, r5, #48	; 0x30
   a2a04:	7868      	ldrb	r0, [r5, #1]
   a2a06:	4e07      	ldr	r6, [pc, #28]	; (a2a24 <f_close+0x13c>)
   a2a08:	47b0      	blx	r6
   a2a0a:	2800      	cmp	r0, #0
   a2a0c:	d1f1      	bne.n	a29f2 <f_close+0x10a>
			fs->winsect = sector;
   a2a0e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a2a12:	e79d      	b.n	a2950 <f_close+0x68>
   a2a14:	0009f371 	.word	0x0009f371
   a2a18:	0009f3fd 	.word	0x0009f3fd
   a2a1c:	00099de1 	.word	0x00099de1
   a2a20:	0009f81d 	.word	0x0009f81d
   a2a24:	0009f389 	.word	0x0009f389

000a2a28 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
   a2a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   a2a2c:	6803      	ldr	r3, [r0, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   a2a2e:	b10b      	cbz	r3, a2a34 <f_lseek+0xc>
   a2a30:	781a      	ldrb	r2, [r3, #0]
   a2a32:	b912      	cbnz	r2, a2a3a <f_lseek+0x12>
		return FR_INVALID_OBJECT;
   a2a34:	2009      	movs	r0, #9
   a2a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a2a3a:	460d      	mov	r5, r1
	if (!fs || !fs->fs_type || fs->id != id)
   a2a3c:	88da      	ldrh	r2, [r3, #6]
   a2a3e:	8881      	ldrh	r1, [r0, #4]
   a2a40:	4604      	mov	r4, r0
   a2a42:	4291      	cmp	r1, r2
   a2a44:	d1f6      	bne.n	a2a34 <f_lseek+0xc>
	if (disk_status(fs->drv) & STA_NOINIT)
   a2a46:	7858      	ldrb	r0, [r3, #1]
   a2a48:	4b65      	ldr	r3, [pc, #404]	; (a2be0 <f_lseek+0x1b8>)
   a2a4a:	4798      	blx	r3
   a2a4c:	07c1      	lsls	r1, r0, #31
   a2a4e:	d502      	bpl.n	a2a56 <f_lseek+0x2e>
		return FR_NOT_READY;
   a2a50:	2003      	movs	r0, #3
   a2a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
   a2a56:	79a3      	ldrb	r3, [r4, #6]
   a2a58:	061a      	lsls	r2, r3, #24
   a2a5a:	d443      	bmi.n	a2ae4 <f_lseek+0xbc>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
   a2a5c:	68e2      	ldr	r2, [r4, #12]
   a2a5e:	42aa      	cmp	r2, r5
   a2a60:	d203      	bcs.n	a2a6a <f_lseek+0x42>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
   a2a62:	f013 0f02 	tst.w	r3, #2
   a2a66:	bf08      	it	eq
   a2a68:	4615      	moveq	r5, r2
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
   a2a6a:	2200      	movs	r2, #0
		ifptr = fp->fptr;
   a2a6c:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
   a2a6e:	60a2      	str	r2, [r4, #8]
		if (ofs) {
   a2a70:	2d00      	cmp	r5, #0
   a2a72:	d03a      	beq.n	a2aea <f_lseek+0xc2>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
   a2a74:	6820      	ldr	r0, [r4, #0]
   a2a76:	7887      	ldrb	r7, [r0, #2]
   a2a78:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
   a2a7a:	b143      	cbz	r3, a2a8e <f_lseek+0x66>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   a2a7c:	3b01      	subs	r3, #1
   a2a7e:	1e6a      	subs	r2, r5, #1
   a2a80:	fbb3 f1f7 	udiv	r1, r3, r7
   a2a84:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
   a2a88:	428a      	cmp	r2, r1
   a2a8a:	f080 8089 	bcs.w	a2ba0 <f_lseek+0x178>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
				ofs -= fp->fptr;
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
   a2a8e:	6926      	ldr	r6, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   a2a90:	2e00      	cmp	r6, #0
   a2a92:	f000 808b 	beq.w	a2bac <f_lseek+0x184>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
   a2a96:	6166      	str	r6, [r4, #20]
			}
			if (clst != 0) {
   a2a98:	bb56      	cbnz	r6, a2af0 <f_lseek+0xc8>
   a2a9a:	68a3      	ldr	r3, [r4, #8]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
   a2a9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   a2aa0:	2a00      	cmp	r2, #0
   a2aa2:	f000 808d 	beq.w	a2bc0 <f_lseek+0x198>
   a2aa6:	69a2      	ldr	r2, [r4, #24]
   a2aa8:	4296      	cmp	r6, r2
   a2aaa:	f000 8089 	beq.w	a2bc0 <f_lseek+0x198>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
   a2aae:	79a3      	ldrb	r3, [r4, #6]
   a2ab0:	0659      	lsls	r1, r3, #25
   a2ab2:	d466      	bmi.n	a2b82 <f_lseek+0x15a>
   a2ab4:	f104 0524 	add.w	r5, r4, #36	; 0x24
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
   a2ab8:	6823      	ldr	r3, [r4, #0]
   a2aba:	4629      	mov	r1, r5
   a2abc:	7858      	ldrb	r0, [r3, #1]
   a2abe:	4632      	mov	r2, r6
   a2ac0:	2301      	movs	r3, #1
   a2ac2:	4d48      	ldr	r5, [pc, #288]	; (a2be4 <f_lseek+0x1bc>)
   a2ac4:	47a8      	blx	r5
   a2ac6:	2800      	cmp	r0, #0
   a2ac8:	d154      	bne.n	a2b74 <f_lseek+0x14c>
   a2aca:	68a3      	ldr	r3, [r4, #8]
   a2acc:	68e2      	ldr	r2, [r4, #12]
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
   a2ace:	61a6      	str	r6, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
   a2ad0:	4293      	cmp	r3, r2
   a2ad2:	d90a      	bls.n	a2aea <f_lseek+0xc2>
			fp->fsize = fp->fptr;
			fp->flag |= FA__WRITTEN;
   a2ad4:	79a2      	ldrb	r2, [r4, #6]
			fp->fsize = fp->fptr;
   a2ad6:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
   a2ad8:	f042 0320 	orr.w	r3, r2, #32
   a2adc:	71a3      	strb	r3, [r4, #6]
   a2ade:	2000      	movs	r0, #0
   a2ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LEAVE_FF(fp->fs, FR_INT_ERR);
   a2ae4:	2002      	movs	r0, #2
   a2ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a2aea:	2000      	movs	r0, #0
   a2aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				while (ofs > bcs) {						/* Cluster following loop */
   a2af0:	42bd      	cmp	r5, r7
   a2af2:	d973      	bls.n	a2bdc <f_lseek+0x1b4>
   a2af4:	6820      	ldr	r0, [r4, #0]
   a2af6:	f8df 90f8 	ldr.w	r9, [pc, #248]	; a2bf0 <f_lseek+0x1c8>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
   a2afa:	f8df 80f0 	ldr.w	r8, [pc, #240]	; a2bec <f_lseek+0x1c4>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   a2afe:	79a2      	ldrb	r2, [r4, #6]
					ofs -= bcs;
   a2b00:	1bed      	subs	r5, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   a2b02:	0793      	lsls	r3, r2, #30
   a2b04:	d40a      	bmi.n	a2b1c <f_lseek+0xf4>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   a2b06:	2e01      	cmp	r6, #1
   a2b08:	d902      	bls.n	a2b10 <f_lseek+0xe8>
   a2b0a:	6983      	ldr	r3, [r0, #24]
   a2b0c:	42b3      	cmp	r3, r6
   a2b0e:	d82d      	bhi.n	a2b6c <f_lseek+0x144>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
   a2b10:	f062 027f 	orn	r2, r2, #127	; 0x7f
   a2b14:	71a2      	strb	r2, [r4, #6]
   a2b16:	2002      	movs	r0, #2
   a2b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
   a2b1c:	4631      	mov	r1, r6
   a2b1e:	47c0      	blx	r8
						if (clst == 0) {				/* When disk gets full, clip file size */
   a2b20:	4606      	mov	r6, r0
   a2b22:	2800      	cmp	r0, #0
   a2b24:	d059      	beq.n	a2bda <f_lseek+0x1b2>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   a2b26:	1c70      	adds	r0, r6, #1
   a2b28:	d024      	beq.n	a2b74 <f_lseek+0x14c>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
   a2b2a:	2e01      	cmp	r6, #1
   a2b2c:	d94a      	bls.n	a2bc4 <f_lseek+0x19c>
   a2b2e:	6820      	ldr	r0, [r4, #0]
   a2b30:	6983      	ldr	r3, [r0, #24]
   a2b32:	429e      	cmp	r6, r3
   a2b34:	d246      	bcs.n	a2bc4 <f_lseek+0x19c>
					fp->fptr += bcs;
   a2b36:	68a3      	ldr	r3, [r4, #8]
				while (ofs > bcs) {						/* Cluster following loop */
   a2b38:	42af      	cmp	r7, r5
					fp->fptr += bcs;
   a2b3a:	443b      	add	r3, r7
   a2b3c:	60a3      	str	r3, [r4, #8]
					fp->clust = clst;
   a2b3e:	6166      	str	r6, [r4, #20]
				while (ofs > bcs) {						/* Cluster following loop */
   a2b40:	d3dd      	bcc.n	a2afe <f_lseek+0xd6>
				fp->fptr += ofs;
   a2b42:	442b      	add	r3, r5
				if (ofs % SS(fp->fs)) {
   a2b44:	f3c5 0208 	ubfx	r2, r5, #0, #9
				fp->fptr += ofs;
   a2b48:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
   a2b4a:	2a00      	cmp	r2, #0
   a2b4c:	d043      	beq.n	a2bd6 <f_lseek+0x1ae>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
   a2b4e:	6821      	ldr	r1, [r4, #0]
	clst -= 2;
   a2b50:	3e02      	subs	r6, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   a2b52:	698a      	ldr	r2, [r1, #24]
   a2b54:	3a02      	subs	r2, #2
   a2b56:	4296      	cmp	r6, r2
   a2b58:	d236      	bcs.n	a2bc8 <f_lseek+0x1a0>
	return clst * fs->csize + fs->database;
   a2b5a:	788a      	ldrb	r2, [r1, #2]
   a2b5c:	6a89      	ldr	r1, [r1, #40]	; 0x28
   a2b5e:	fb06 1602 	mla	r6, r6, r2, r1
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
   a2b62:	2e00      	cmp	r6, #0
   a2b64:	d030      	beq.n	a2bc8 <f_lseek+0x1a0>
					nsect += ofs / SS(fp->fs);
   a2b66:	eb06 2655 	add.w	r6, r6, r5, lsr #9
   a2b6a:	e797      	b.n	a2a9c <f_lseek+0x74>
   a2b6c:	4631      	mov	r1, r6
   a2b6e:	47c8      	blx	r9
   a2b70:	4606      	mov	r6, r0
   a2b72:	e7d8      	b.n	a2b26 <f_lseek+0xfe>
				ABORT(fp->fs, FR_DISK_ERR);
   a2b74:	79a3      	ldrb	r3, [r4, #6]
   a2b76:	f063 037f 	orn	r3, r3, #127	; 0x7f
   a2b7a:	71a3      	strb	r3, [r4, #6]
   a2b7c:	2001      	movs	r0, #1
   a2b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   a2b82:	6823      	ldr	r3, [r4, #0]
   a2b84:	f104 0524 	add.w	r5, r4, #36	; 0x24
   a2b88:	7858      	ldrb	r0, [r3, #1]
   a2b8a:	4629      	mov	r1, r5
   a2b8c:	2301      	movs	r3, #1
   a2b8e:	4f16      	ldr	r7, [pc, #88]	; (a2be8 <f_lseek+0x1c0>)
   a2b90:	47b8      	blx	r7
					ABORT(fp->fs, FR_DISK_ERR);
   a2b92:	79a3      	ldrb	r3, [r4, #6]
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   a2b94:	2800      	cmp	r0, #0
   a2b96:	d1ee      	bne.n	a2b76 <f_lseek+0x14e>
				fp->flag &= ~FA__DIRTY;
   a2b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   a2b9c:	71a3      	strb	r3, [r4, #6]
   a2b9e:	e78b      	b.n	a2ab8 <f_lseek+0x90>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
   a2ba0:	427a      	negs	r2, r7
   a2ba2:	4013      	ands	r3, r2
   a2ba4:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
   a2ba6:	1aed      	subs	r5, r5, r3
				clst = fp->clust;
   a2ba8:	6966      	ldr	r6, [r4, #20]
   a2baa:	e775      	b.n	a2a98 <f_lseek+0x70>
					clst = create_chain(fp->fs, 0);
   a2bac:	4631      	mov	r1, r6
   a2bae:	4b0f      	ldr	r3, [pc, #60]	; (a2bec <f_lseek+0x1c4>)
   a2bb0:	4798      	blx	r3
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   a2bb2:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
   a2bb4:	4606      	mov	r6, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   a2bb6:	d007      	beq.n	a2bc8 <f_lseek+0x1a0>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   a2bb8:	1c42      	adds	r2, r0, #1
   a2bba:	d0db      	beq.n	a2b74 <f_lseek+0x14c>
					fp->sclust = clst;
   a2bbc:	6120      	str	r0, [r4, #16]
   a2bbe:	e76a      	b.n	a2a96 <f_lseek+0x6e>
   a2bc0:	68e2      	ldr	r2, [r4, #12]
   a2bc2:	e785      	b.n	a2ad0 <f_lseek+0xa8>
   a2bc4:	79a2      	ldrb	r2, [r4, #6]
   a2bc6:	e7a3      	b.n	a2b10 <f_lseek+0xe8>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
   a2bc8:	79a3      	ldrb	r3, [r4, #6]
   a2bca:	2002      	movs	r0, #2
   a2bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   a2bd0:	71a3      	strb	r3, [r4, #6]
   a2bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		fp->fptr = nsect = 0;
   a2bd6:	4616      	mov	r6, r2
   a2bd8:	e760      	b.n	a2a9c <f_lseek+0x74>
						if (clst == 0) {				/* When disk gets full, clip file size */
   a2bda:	463d      	mov	r5, r7
   a2bdc:	68a3      	ldr	r3, [r4, #8]
   a2bde:	e7b0      	b.n	a2b42 <f_lseek+0x11a>
   a2be0:	0009f371 	.word	0x0009f371
   a2be4:	0009f389 	.word	0x0009f389
   a2be8:	0009f3fd 	.word	0x0009f3fd
   a2bec:	000a028d 	.word	0x000a028d
   a2bf0:	0009ff29 	.word	0x0009ff29

000a2bf4 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
   a2bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	vol = p[0] - '0';					/* Is there a drive number? */
   a2bf8:	780b      	ldrb	r3, [r1, #0]
{
   a2bfa:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
	vol = p[0] - '0';					/* Is there a drive number? */
   a2bfe:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   a2c00:	2b09      	cmp	r3, #9
{
   a2c02:	460d      	mov	r5, r1
   a2c04:	4604      	mov	r4, r0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   a2c06:	d933      	bls.n	a2c70 <f_opendir+0x7c>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   a2c08:	4bbd      	ldr	r3, [pc, #756]	; (a2f00 <f_opendir+0x30c>)
   a2c0a:	681e      	ldr	r6, [r3, #0]
   a2c0c:	6026      	str	r6, [r4, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   a2c0e:	2e00      	cmp	r6, #0
   a2c10:	d046      	beq.n	a2ca0 <f_opendir+0xac>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   a2c12:	7833      	ldrb	r3, [r6, #0]
   a2c14:	2b00      	cmp	r3, #0
   a2c16:	d036      	beq.n	a2c86 <f_opendir+0x92>
		stat = disk_status(fs->drv);
   a2c18:	7870      	ldrb	r0, [r6, #1]
   a2c1a:	4bba      	ldr	r3, [pc, #744]	; (a2f04 <f_opendir+0x310>)
   a2c1c:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   a2c1e:	07c1      	lsls	r1, r0, #31
   a2c20:	d431      	bmi.n	a2c86 <f_opendir+0x92>
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
	if (res == FR_OK) {
		INIT_BUF(*dj);
   a2c22:	ab04      	add	r3, sp, #16
   a2c24:	aa01      	add	r2, sp, #4
   a2c26:	61e3      	str	r3, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
   a2c28:	4629      	mov	r1, r5
		INIT_BUF(*dj);
   a2c2a:	61a2      	str	r2, [r4, #24]
		res = follow_path(dj, path);			/* Follow the path to the directory */
   a2c2c:	4620      	mov	r0, r4
   a2c2e:	4bb6      	ldr	r3, [pc, #728]	; (a2f08 <f_opendir+0x314>)
   a2c30:	4798      	blx	r3
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
   a2c32:	b9b0      	cbnz	r0, a2c62 <f_opendir+0x6e>
			if (dj->dir) {						/* It is not the root dir */
   a2c34:	6963      	ldr	r3, [r4, #20]
   a2c36:	b16b      	cbz	r3, a2c54 <f_opendir+0x60>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
   a2c38:	7ada      	ldrb	r2, [r3, #11]
   a2c3a:	06d2      	lsls	r2, r2, #27
   a2c3c:	d513      	bpl.n	a2c66 <f_opendir+0x72>
					dj->sclust = LD_CLUST(dj->dir);
   a2c3e:	7d58      	ldrb	r0, [r3, #21]
   a2c40:	7d1a      	ldrb	r2, [r3, #20]
   a2c42:	7ed9      	ldrb	r1, [r3, #27]
   a2c44:	7e9b      	ldrb	r3, [r3, #26]
   a2c46:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   a2c4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   a2c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   a2c52:	60a3      	str	r3, [r4, #8]
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
   a2c54:	6823      	ldr	r3, [r4, #0]
				res = dir_sdi(dj, 0);			/* Rewind dir */
   a2c56:	4620      	mov	r0, r4
				dj->id = dj->fs->id;
   a2c58:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dj, 0);			/* Rewind dir */
   a2c5a:	2100      	movs	r1, #0
				dj->id = dj->fs->id;
   a2c5c:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
   a2c5e:	4bab      	ldr	r3, [pc, #684]	; (a2f0c <f_opendir+0x318>)
   a2c60:	4798      	blx	r3
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   a2c62:	2804      	cmp	r0, #4
   a2c64:	d10b      	bne.n	a2c7e <f_opendir+0x8a>
					res = FR_NO_PATH;
   a2c66:	2005      	movs	r0, #5
	}

	LEAVE_FF(dj->fs, res);
}
   a2c68:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   a2c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   a2c70:	784a      	ldrb	r2, [r1, #1]
   a2c72:	2a3a      	cmp	r2, #58	; 0x3a
   a2c74:	d1c8      	bne.n	a2c08 <f_opendir+0x14>
		return FR_INVALID_DRIVE;
   a2c76:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   a2c78:	2b00      	cmp	r3, #0
   a2c7a:	f000 810b 	beq.w	a2e94 <f_opendir+0x2a0>
}
   a2c7e:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   a2c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
   a2c86:	2000      	movs	r0, #0
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   a2c88:	4ba1      	ldr	r3, [pc, #644]	; (a2f10 <f_opendir+0x31c>)
	fs->fs_type = 0;					/* Clear the file system object */
   a2c8a:	7030      	strb	r0, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   a2c8c:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   a2c8e:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   a2c90:	f010 0201 	ands.w	r2, r0, #1
   a2c94:	d006      	beq.n	a2ca4 <f_opendir+0xb0>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   a2c96:	2003      	movs	r0, #3
}
   a2c98:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   a2c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   a2ca0:	200c      	movs	r0, #12
   a2ca2:	e7ec      	b.n	a2c7e <f_opendir+0x8a>
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   a2ca4:	f106 0830 	add.w	r8, r6, #48	; 0x30
   a2ca8:	4641      	mov	r1, r8
   a2caa:	2301      	movs	r3, #1
   a2cac:	7870      	ldrb	r0, [r6, #1]
   a2cae:	4f99      	ldr	r7, [pc, #612]	; (a2f14 <f_opendir+0x320>)
   a2cb0:	47b8      	blx	r7
   a2cb2:	b108      	cbz	r0, a2cb8 <f_opendir+0xc4>
	if (fmt == 3) return FR_DISK_ERR;
   a2cb4:	2001      	movs	r0, #1
   a2cb6:	e7e2      	b.n	a2c7e <f_opendir+0x8a>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   a2cb8:	f896 222f 	ldrb.w	r2, [r6, #559]	; 0x22f
   a2cbc:	f896 922e 	ldrb.w	r9, [r6, #558]	; 0x22e
   a2cc0:	4b95      	ldr	r3, [pc, #596]	; (a2f18 <f_opendir+0x324>)
   a2cc2:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
   a2cc6:	fa0f f989 	sxth.w	r9, r9
   a2cca:	4599      	cmp	r9, r3
   a2ccc:	d001      	beq.n	a2cd2 <f_opendir+0xde>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   a2cce:	200d      	movs	r0, #13
	LEAVE_FF(dj->fs, res);
   a2cd0:	e7d5      	b.n	a2c7e <f_opendir+0x8a>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   a2cd2:	f8d6 3066 	ldr.w	r3, [r6, #102]	; 0x66
   a2cd6:	f8df a24c 	ldr.w	sl, [pc, #588]	; a2f24 <f_opendir+0x330>
   a2cda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   a2cde:	4553      	cmp	r3, sl
   a2ce0:	f000 80bc 	beq.w	a2e5c <f_opendir+0x268>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   a2ce4:	f8d6 3082 	ldr.w	r3, [r6, #130]	; 0x82
   a2ce8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   a2cec:	4553      	cmp	r3, sl
   a2cee:	f000 80b5 	beq.w	a2e5c <f_opendir+0x268>
		if (tbl[4]) {						/* Is the partition existing? */
   a2cf2:	f896 31f2 	ldrb.w	r3, [r6, #498]	; 0x1f2
   a2cf6:	2b00      	cmp	r3, #0
   a2cf8:	d0e9      	beq.n	a2cce <f_opendir+0xda>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   a2cfa:	f8d6 b1f6 	ldr.w	fp, [r6, #502]	; 0x1f6
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   a2cfe:	2301      	movs	r3, #1
   a2d00:	465a      	mov	r2, fp
   a2d02:	4641      	mov	r1, r8
   a2d04:	7870      	ldrb	r0, [r6, #1]
   a2d06:	47b8      	blx	r7
   a2d08:	2800      	cmp	r0, #0
   a2d0a:	d1d3      	bne.n	a2cb4 <f_opendir+0xc0>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   a2d0c:	f896 222f 	ldrb.w	r2, [r6, #559]	; 0x22f
   a2d10:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
   a2d14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   a2d18:	b21b      	sxth	r3, r3
   a2d1a:	454b      	cmp	r3, r9
   a2d1c:	d1d7      	bne.n	a2cce <f_opendir+0xda>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   a2d1e:	f8d6 3066 	ldr.w	r3, [r6, #102]	; 0x66
   a2d22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   a2d26:	4553      	cmp	r3, sl
   a2d28:	d005      	beq.n	a2d36 <f_opendir+0x142>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   a2d2a:	f8d6 3082 	ldr.w	r3, [r6, #130]	; 0x82
   a2d2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   a2d32:	4553      	cmp	r3, sl
   a2d34:	d1cb      	bne.n	a2cce <f_opendir+0xda>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   a2d36:	f896 203c 	ldrb.w	r2, [r6, #60]	; 0x3c
   a2d3a:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   a2d3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   a2d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a2d46:	d1c2      	bne.n	a2cce <f_opendir+0xda>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   a2d48:	f896 1047 	ldrb.w	r1, [r6, #71]	; 0x47
   a2d4c:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   a2d50:	f896 e040 	ldrb.w	lr, [r6, #64]	; 0x40
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   a2d54:	ea53 2301 	orrs.w	r3, r3, r1, lsl #8
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   a2d58:	bf14      	ite	ne
   a2d5a:	4619      	movne	r1, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   a2d5c:	6d71      	ldreq	r1, [r6, #84]	; 0x54
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   a2d5e:	f10e 33ff 	add.w	r3, lr, #4294967295
   a2d62:	2b01      	cmp	r3, #1
	fs->fsize = fasize;
   a2d64:	61f1      	str	r1, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   a2d66:	f886 e003 	strb.w	lr, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   a2d6a:	d8b0      	bhi.n	a2cce <f_opendir+0xda>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   a2d6c:	f896 903d 	ldrb.w	r9, [r6, #61]	; 0x3d
   a2d70:	f886 9002 	strb.w	r9, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   a2d74:	f1b9 0f00 	cmp.w	r9, #0
   a2d78:	d0a9      	beq.n	a2cce <f_opendir+0xda>
   a2d7a:	f109 33ff 	add.w	r3, r9, #4294967295
   a2d7e:	ea13 0f09 	tst.w	r3, r9
   a2d82:	d1a4      	bne.n	a2cce <f_opendir+0xda>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   a2d84:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
   a2d88:	f896 c041 	ldrb.w	ip, [r6, #65]	; 0x41
   a2d8c:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   a2d90:	f01c 0f0f 	tst.w	ip, #15
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   a2d94:	f8a6 c008 	strh.w	ip, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   a2d98:	d199      	bne.n	a2cce <f_opendir+0xda>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   a2d9a:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
   a2d9e:	f896 3043 	ldrb.w	r3, [r6, #67]	; 0x43
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   a2da2:	f896 003f 	ldrb.w	r0, [r6, #63]	; 0x3f
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   a2da6:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   a2daa:	f896 203e 	ldrb.w	r2, [r6, #62]	; 0x3e
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   a2dae:	bf08      	it	eq
   a2db0:	6d33      	ldreq	r3, [r6, #80]	; 0x50
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   a2db2:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
   a2db6:	d08a      	beq.n	a2cce <f_opendir+0xda>
	fasize *= b;										/* Number of sectors for FAT area */
   a2db8:	fb01 fe0e 	mul.w	lr, r1, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   a2dbc:	eb02 101c 	add.w	r0, r2, ip, lsr #4
   a2dc0:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   a2dc2:	4298      	cmp	r0, r3
   a2dc4:	d883      	bhi.n	a2cce <f_opendir+0xda>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   a2dc6:	1a1b      	subs	r3, r3, r0
   a2dc8:	fbb3 f3f9 	udiv	r3, r3, r9
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   a2dcc:	2b00      	cmp	r3, #0
   a2dce:	f43f af7e 	beq.w	a2cce <f_opendir+0xda>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   a2dd2:	f640 79f5 	movw	r9, #4085	; 0xff5
   a2dd6:	454b      	cmp	r3, r9
   a2dd8:	d95e      	bls.n	a2e98 <f_opendir+0x2a4>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   a2dda:	f64f 79f5 	movw	r9, #65525	; 0xfff5
   a2dde:	454b      	cmp	r3, r9
   a2de0:	d93e      	bls.n	a2e60 <f_opendir+0x26c>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a2de2:	3302      	adds	r3, #2
	fs->database = bsect + sysect;						/* Data start sector */
   a2de4:	4458      	add	r0, fp
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a2de6:	445a      	add	r2, fp
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a2de8:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   a2dea:	62b0      	str	r0, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a2dec:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   a2dee:	f1bc 0f00 	cmp.w	ip, #0
   a2df2:	f47f af6c 	bne.w	a2cce <f_opendir+0xda>
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   a2df6:	009b      	lsls	r3, r3, #2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   a2df8:	6df2      	ldr	r2, [r6, #92]	; 0x5c
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a2dfa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
   a2dfe:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   a2e02:	6272      	str	r2, [r6, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a2e04:	f4ff af63 	bcc.w	a2cce <f_opendir+0xda>
	fs->free_clust = 0xFFFFFFFF;
   a2e08:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   a2e0c:	f896 1061 	ldrb.w	r1, [r6, #97]	; 0x61
   a2e10:	f896 2060 	ldrb.w	r2, [r6, #96]	; 0x60
	fs->free_clust = 0xFFFFFFFF;
   a2e14:	6133      	str	r3, [r6, #16]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   a2e16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   a2e1a:	445a      	add	r2, fp
	fs->last_clust = 0;
   a2e1c:	f8c6 c00c 	str.w	ip, [r6, #12]
	 	fs->fsi_flag = 0;
   a2e20:	f886 c005 	strb.w	ip, [r6, #5]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   a2e24:	4641      	mov	r1, r8
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   a2e26:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   a2e28:	2301      	movs	r3, #1
   a2e2a:	7870      	ldrb	r0, [r6, #1]
   a2e2c:	47b8      	blx	r7
   a2e2e:	b948      	cbnz	r0, a2e44 <f_opendir+0x250>
   a2e30:	f64a 2255 	movw	r2, #43605	; 0xaa55
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   a2e34:	f896 122f 	ldrb.w	r1, [r6, #559]	; 0x22f
   a2e38:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
   a2e3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   a2e40:	4293      	cmp	r3, r2
   a2e42:	d048      	beq.n	a2ed6 <f_opendir+0x2e2>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   a2e44:	2303      	movs	r3, #3
	fs->winsect = 0;		/* Invalidate sector cache */
   a2e46:	2200      	movs	r2, #0
	fs->id = ++Fsid;		/* File system mount ID */
   a2e48:	4934      	ldr	r1, [pc, #208]	; (a2f1c <f_opendir+0x328>)
	fs->fs_type = fmt;		/* FAT sub-type */
   a2e4a:	7033      	strb	r3, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   a2e4c:	880b      	ldrh	r3, [r1, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
   a2e4e:	62f2      	str	r2, [r6, #44]	; 0x2c
	fs->id = ++Fsid;		/* File system mount ID */
   a2e50:	3301      	adds	r3, #1
   a2e52:	b29b      	uxth	r3, r3
   a2e54:	800b      	strh	r3, [r1, #0]
   a2e56:	80f3      	strh	r3, [r6, #6]
	fs->wflag = 0;
   a2e58:	7132      	strb	r2, [r6, #4]
   a2e5a:	e6e2      	b.n	a2c22 <f_opendir+0x2e>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   a2e5c:	4683      	mov	fp, r0
   a2e5e:	e76a      	b.n	a2d36 <f_opendir+0x142>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a2e60:	3302      	adds	r3, #2
	fs->database = bsect + sysect;						/* Data start sector */
   a2e62:	4458      	add	r0, fp
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a2e64:	445a      	add	r2, fp
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a2e66:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   a2e68:	62b0      	str	r0, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a2e6a:	6232      	str	r2, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   a2e6c:	f1bc 0f00 	cmp.w	ip, #0
   a2e70:	f43f af2d 	beq.w	a2cce <f_opendir+0xda>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   a2e74:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a2e76:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   a2e7a:	4472      	add	r2, lr
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a2e7c:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   a2e80:	6272      	str	r2, [r6, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a2e82:	f4ff af24 	bcc.w	a2cce <f_opendir+0xda>
	fs->last_clust = 0;
   a2e86:	2300      	movs	r3, #0
	fs->free_clust = 0xFFFFFFFF;
   a2e88:	f04f 32ff 	mov.w	r2, #4294967295
	fs->last_clust = 0;
   a2e8c:	60f3      	str	r3, [r6, #12]
	fs->free_clust = 0xFFFFFFFF;
   a2e8e:	6132      	str	r2, [r6, #16]
	fs->last_clust = 0;
   a2e90:	2302      	movs	r3, #2
   a2e92:	e7d8      	b.n	a2e46 <f_opendir+0x252>
		p += 2; *path = p;				/* Return pointer to the path name */
   a2e94:	3502      	adds	r5, #2
   a2e96:	e6b7      	b.n	a2c08 <f_opendir+0x14>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a2e98:	3302      	adds	r3, #2
	fs->database = bsect + sysect;						/* Data start sector */
   a2e9a:	4458      	add	r0, fp
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a2e9c:	445a      	add	r2, fp
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   a2e9e:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   a2ea0:	62b0      	str	r0, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   a2ea2:	6232      	str	r2, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   a2ea4:	f1bc 0f00 	cmp.w	ip, #0
   a2ea8:	f43f af11 	beq.w	a2cce <f_opendir+0xda>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   a2eac:	f003 0001 	and.w	r0, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a2eb0:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   a2eb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a2eb8:	eb00 0353 	add.w	r3, r0, r3, lsr #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   a2ebc:	4472      	add	r2, lr
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a2ebe:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   a2ec2:	6272      	str	r2, [r6, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   a2ec4:	f4ff af03 	bcc.w	a2cce <f_opendir+0xda>
	fs->last_clust = 0;
   a2ec8:	2300      	movs	r3, #0
	fs->free_clust = 0xFFFFFFFF;
   a2eca:	f04f 32ff 	mov.w	r2, #4294967295
	fs->last_clust = 0;
   a2ece:	60f3      	str	r3, [r6, #12]
	fs->free_clust = 0xFFFFFFFF;
   a2ed0:	6132      	str	r2, [r6, #16]
	fmt = FS_FAT12;
   a2ed2:	2301      	movs	r3, #1
   a2ed4:	e7b7      	b.n	a2e46 <f_opendir+0x252>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   a2ed6:	4b12      	ldr	r3, [pc, #72]	; (a2f20 <f_opendir+0x32c>)
   a2ed8:	6b32      	ldr	r2, [r6, #48]	; 0x30
   a2eda:	429a      	cmp	r2, r3
   a2edc:	d1b2      	bne.n	a2e44 <f_opendir+0x250>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   a2ede:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
   a2ee2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   a2ee6:	f8d6 2214 	ldr.w	r2, [r6, #532]	; 0x214
   a2eea:	3320      	adds	r3, #32
   a2eec:	429a      	cmp	r2, r3
   a2eee:	d1a9      	bne.n	a2e44 <f_opendir+0x250>
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   a2ef0:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   a2ef4:	f8d6 221c 	ldr.w	r2, [r6, #540]	; 0x21c
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   a2ef8:	6133      	str	r3, [r6, #16]
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   a2efa:	60f2      	str	r2, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   a2efc:	2303      	movs	r3, #3
   a2efe:	e7a2      	b.n	a2e46 <f_opendir+0x252>
   a2f00:	20072f2c 	.word	0x20072f2c
   a2f04:	0009f371 	.word	0x0009f371
   a2f08:	000a1761 	.word	0x000a1761
   a2f0c:	000a01dd 	.word	0x000a01dd
   a2f10:	0009f325 	.word	0x0009f325
   a2f14:	0009f389 	.word	0x0009f389
   a2f18:	ffffaa55 	.word	0xffffaa55
   a2f1c:	20072f30 	.word	0x20072f30
   a2f20:	41615252 	.word	0x41615252
   a2f24:	00544146 	.word	0x00544146

000a2f28 <f_readdir>:
{
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
   a2f28:	6803      	ldr	r3, [r0, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   a2f2a:	b163      	cbz	r3, a2f46 <f_readdir+0x1e>
   a2f2c:	781a      	ldrb	r2, [r3, #0]
   a2f2e:	b152      	cbz	r2, a2f46 <f_readdir+0x1e>
{
   a2f30:	b570      	push	{r4, r5, r6, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   a2f32:	8884      	ldrh	r4, [r0, #4]
   a2f34:	88da      	ldrh	r2, [r3, #6]
{
   a2f36:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
	if (!fs || !fs->fs_type || fs->id != id)
   a2f3a:	4294      	cmp	r4, r2
   a2f3c:	d005      	beq.n	a2f4a <f_readdir+0x22>
		return FR_INVALID_OBJECT;
   a2f3e:	2009      	movs	r0, #9
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
   a2f40:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
   a2f44:	bd70      	pop	{r4, r5, r6, pc}
		return FR_INVALID_OBJECT;
   a2f46:	2009      	movs	r0, #9
   a2f48:	4770      	bx	lr
   a2f4a:	4604      	mov	r4, r0
	if (disk_status(fs->drv) & STA_NOINIT)
   a2f4c:	7858      	ldrb	r0, [r3, #1]
   a2f4e:	4b13      	ldr	r3, [pc, #76]	; (a2f9c <f_readdir+0x74>)
   a2f50:	460d      	mov	r5, r1
   a2f52:	4798      	blx	r3
   a2f54:	f010 0601 	ands.w	r6, r0, #1
   a2f58:	d001      	beq.n	a2f5e <f_readdir+0x36>
		return FR_NOT_READY;
   a2f5a:	2003      	movs	r0, #3
	LEAVE_FF(dj->fs, res);
   a2f5c:	e7f0      	b.n	a2f40 <f_readdir+0x18>
		if (!fno) {
   a2f5e:	b1c5      	cbz	r5, a2f92 <f_readdir+0x6a>
			INIT_BUF(*dj);
   a2f60:	aa01      	add	r2, sp, #4
   a2f62:	ab04      	add	r3, sp, #16
   a2f64:	61e3      	str	r3, [r4, #28]
   a2f66:	61a2      	str	r2, [r4, #24]
			res = dir_read(dj);				/* Read an directory item */
   a2f68:	4620      	mov	r0, r4
   a2f6a:	4b0d      	ldr	r3, [pc, #52]	; (a2fa0 <f_readdir+0x78>)
   a2f6c:	4798      	blx	r3
			if (res == FR_NO_FILE) {		/* Reached end of dir */
   a2f6e:	2804      	cmp	r0, #4
   a2f70:	d00d      	beq.n	a2f8e <f_readdir+0x66>
			if (res == FR_OK) {				/* A valid entry is found */
   a2f72:	2800      	cmp	r0, #0
   a2f74:	d1e4      	bne.n	a2f40 <f_readdir+0x18>
				get_fileinfo(dj, fno);		/* Get the object information */
   a2f76:	4629      	mov	r1, r5
   a2f78:	4620      	mov	r0, r4
   a2f7a:	4b0a      	ldr	r3, [pc, #40]	; (a2fa4 <f_readdir+0x7c>)
   a2f7c:	4798      	blx	r3
				res = dir_next(dj, 0);		/* Increment index for next */
   a2f7e:	4620      	mov	r0, r4
   a2f80:	4b09      	ldr	r3, [pc, #36]	; (a2fa8 <f_readdir+0x80>)
   a2f82:	4798      	blx	r3
				if (res == FR_NO_FILE) {
   a2f84:	2804      	cmp	r0, #4
   a2f86:	d1db      	bne.n	a2f40 <f_readdir+0x18>
					dj->sect = 0;
   a2f88:	2000      	movs	r0, #0
   a2f8a:	6120      	str	r0, [r4, #16]
   a2f8c:	e7d8      	b.n	a2f40 <f_readdir+0x18>
				dj->sect = 0;
   a2f8e:	6126      	str	r6, [r4, #16]
   a2f90:	e7f1      	b.n	a2f76 <f_readdir+0x4e>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
   a2f92:	4629      	mov	r1, r5
   a2f94:	4620      	mov	r0, r4
   a2f96:	4b05      	ldr	r3, [pc, #20]	; (a2fac <f_readdir+0x84>)
   a2f98:	4798      	blx	r3
   a2f9a:	e7d1      	b.n	a2f40 <f_readdir+0x18>
   a2f9c:	0009f371 	.word	0x0009f371
   a2fa0:	000a1a5d 	.word	0x000a1a5d
   a2fa4:	0009f4e5 	.word	0x0009f4e5
   a2fa8:	000a09a9 	.word	0x000a09a9
   a2fac:	000a01dd 	.word	0x000a01dd

000a2fb0 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   a2fb0:	287f      	cmp	r0, #127	; 0x7f
   a2fb2:	d910      	bls.n	a2fd6 <ff_convert+0x26>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
   a2fb4:	b981      	cbnz	r1, a2fd8 <ff_convert+0x28>
{
   a2fb6:	b410      	push	{r4}
   a2fb8:	4b0d      	ldr	r3, [pc, #52]	; (a2ff0 <ff_convert+0x40>)
   a2fba:	e001      	b.n	a2fc0 <ff_convert+0x10>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   a2fbc:	2980      	cmp	r1, #128	; 0x80
   a2fbe:	d014      	beq.n	a2fea <ff_convert+0x3a>
				if (src == Tbl[c]) break;
   a2fc0:	f833 2f02 	ldrh.w	r2, [r3, #2]!
   a2fc4:	b28c      	uxth	r4, r1
   a2fc6:	4282      	cmp	r2, r0
   a2fc8:	f101 0101 	add.w	r1, r1, #1
   a2fcc:	d1f6      	bne.n	a2fbc <ff_convert+0xc>
   a2fce:	f104 0080 	add.w	r0, r4, #128	; 0x80
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
   a2fd2:	bc10      	pop	{r4}
   a2fd4:	b280      	uxth	r0, r0
   a2fd6:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   a2fd8:	28ff      	cmp	r0, #255	; 0xff
   a2fda:	d804      	bhi.n	a2fe6 <ff_convert+0x36>
   a2fdc:	4b05      	ldr	r3, [pc, #20]	; (a2ff4 <ff_convert+0x44>)
   a2fde:	3880      	subs	r0, #128	; 0x80
   a2fe0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   a2fe4:	4770      	bx	lr
   a2fe6:	2000      	movs	r0, #0
   a2fe8:	4770      	bx	lr
   a2fea:	2000      	movs	r0, #0
}
   a2fec:	bc10      	pop	{r4}
   a2fee:	e7f2      	b.n	a2fd6 <ff_convert+0x26>
   a2ff0:	000ac256 	.word	0x000ac256
   a2ff4:	000ac258 	.word	0x000ac258

000a2ff8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   a2ff8:	2861      	cmp	r0, #97	; 0x61
   a2ffa:	d00e      	beq.n	a301a <ff_wtoupper+0x22>
   a2ffc:	2201      	movs	r2, #1
   a2ffe:	2362      	movs	r3, #98	; 0x62
   a3000:	4907      	ldr	r1, [pc, #28]	; (a3020 <ff_wtoupper+0x28>)
   a3002:	4298      	cmp	r0, r3
   a3004:	d005      	beq.n	a3012 <ff_wtoupper+0x1a>
   a3006:	f831 3f02 	ldrh.w	r3, [r1, #2]!
   a300a:	3201      	adds	r2, #1
   a300c:	2b00      	cmp	r3, #0
   a300e:	d1f8      	bne.n	a3002 <ff_wtoupper+0xa>
   a3010:	4770      	bx	lr
   a3012:	4b04      	ldr	r3, [pc, #16]	; (a3024 <ff_wtoupper+0x2c>)
   a3014:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
   a3018:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   a301a:	2041      	movs	r0, #65	; 0x41
   a301c:	4770      	bx	lr
   a301e:	bf00      	nop
   a3020:	000ac35a 	.word	0x000ac35a
   a3024:	000ac538 	.word	0x000ac538

000a3028 <floor>:
   a3028:	f3c1 520a 	ubfx	r2, r1, #20, #11
   a302c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a3030:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   a3034:	2e13      	cmp	r6, #19
   a3036:	460b      	mov	r3, r1
   a3038:	4604      	mov	r4, r0
   a303a:	460d      	mov	r5, r1
   a303c:	4688      	mov	r8, r1
   a303e:	4607      	mov	r7, r0
   a3040:	dc1d      	bgt.n	a307e <floor+0x56>
   a3042:	2e00      	cmp	r6, #0
   a3044:	db40      	blt.n	a30c8 <floor+0xa0>
   a3046:	4a3c      	ldr	r2, [pc, #240]	; (a3138 <floor+0x110>)
   a3048:	4686      	mov	lr, r0
   a304a:	fa42 f906 	asr.w	r9, r2, r6
   a304e:	ea01 0209 	and.w	r2, r1, r9
   a3052:	4302      	orrs	r2, r0
   a3054:	d018      	beq.n	a3088 <floor+0x60>
   a3056:	a336      	add	r3, pc, #216	; (adr r3, a3130 <floor+0x108>)
   a3058:	e9d3 2300 	ldrd	r2, r3, [r3]
   a305c:	f000 ffc4 	bl	a3fe8 <__adddf3>
   a3060:	2200      	movs	r2, #0
   a3062:	2300      	movs	r3, #0
   a3064:	f001 fc02 	bl	a486c <__aeabi_dcmpgt>
   a3068:	b120      	cbz	r0, a3074 <floor+0x4c>
   a306a:	2d00      	cmp	r5, #0
   a306c:	db42      	blt.n	a30f4 <floor+0xcc>
   a306e:	2700      	movs	r7, #0
   a3070:	ea28 0509 	bic.w	r5, r8, r9
   a3074:	463c      	mov	r4, r7
   a3076:	4629      	mov	r1, r5
   a3078:	4620      	mov	r0, r4
   a307a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a307e:	2e33      	cmp	r6, #51	; 0x33
   a3080:	dd06      	ble.n	a3090 <floor+0x68>
   a3082:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   a3086:	d02f      	beq.n	a30e8 <floor+0xc0>
   a3088:	4619      	mov	r1, r3
   a308a:	4620      	mov	r0, r4
   a308c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a3090:	f04f 39ff 	mov.w	r9, #4294967295
   a3094:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   a3098:	fa29 f902 	lsr.w	r9, r9, r2
   a309c:	ea10 0f09 	tst.w	r0, r9
   a30a0:	d0f2      	beq.n	a3088 <floor+0x60>
   a30a2:	a323      	add	r3, pc, #140	; (adr r3, a3130 <floor+0x108>)
   a30a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   a30a8:	f000 ff9e 	bl	a3fe8 <__adddf3>
   a30ac:	2200      	movs	r2, #0
   a30ae:	2300      	movs	r3, #0
   a30b0:	f001 fbdc 	bl	a486c <__aeabi_dcmpgt>
   a30b4:	2800      	cmp	r0, #0
   a30b6:	d0dd      	beq.n	a3074 <floor+0x4c>
   a30b8:	2d00      	cmp	r5, #0
   a30ba:	db21      	blt.n	a3100 <floor+0xd8>
   a30bc:	4645      	mov	r5, r8
   a30be:	ea27 0709 	bic.w	r7, r7, r9
   a30c2:	463c      	mov	r4, r7
   a30c4:	4629      	mov	r1, r5
   a30c6:	e7d7      	b.n	a3078 <floor+0x50>
   a30c8:	a319      	add	r3, pc, #100	; (adr r3, a3130 <floor+0x108>)
   a30ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   a30ce:	f000 ff8b 	bl	a3fe8 <__adddf3>
   a30d2:	2200      	movs	r2, #0
   a30d4:	2300      	movs	r3, #0
   a30d6:	f001 fbc9 	bl	a486c <__aeabi_dcmpgt>
   a30da:	2800      	cmp	r0, #0
   a30dc:	d0ca      	beq.n	a3074 <floor+0x4c>
   a30de:	2d00      	cmp	r5, #0
   a30e0:	db19      	blt.n	a3116 <floor+0xee>
   a30e2:	2700      	movs	r7, #0
   a30e4:	463d      	mov	r5, r7
   a30e6:	e7c5      	b.n	a3074 <floor+0x4c>
   a30e8:	4602      	mov	r2, r0
   a30ea:	460b      	mov	r3, r1
   a30ec:	f000 ff7c 	bl	a3fe8 <__adddf3>
   a30f0:	4604      	mov	r4, r0
   a30f2:	e7ca      	b.n	a308a <floor+0x62>
   a30f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   a30f8:	fa43 f606 	asr.w	r6, r3, r6
   a30fc:	44b0      	add	r8, r6
   a30fe:	e7b6      	b.n	a306e <floor+0x46>
   a3100:	2e14      	cmp	r6, #20
   a3102:	d010      	beq.n	a3126 <floor+0xfe>
   a3104:	2301      	movs	r3, #1
   a3106:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   a310a:	fa03 f606 	lsl.w	r6, r3, r6
   a310e:	1937      	adds	r7, r6, r4
   a3110:	bf28      	it	cs
   a3112:	4498      	addcs	r8, r3
   a3114:	e7d2      	b.n	a30bc <floor+0x94>
   a3116:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   a311a:	4b08      	ldr	r3, [pc, #32]	; (a313c <floor+0x114>)
   a311c:	4322      	orrs	r2, r4
   a311e:	bf18      	it	ne
   a3120:	461d      	movne	r5, r3
   a3122:	2700      	movs	r7, #0
   a3124:	e7a6      	b.n	a3074 <floor+0x4c>
   a3126:	f105 0801 	add.w	r8, r5, #1
   a312a:	e7c7      	b.n	a30bc <floor+0x94>
   a312c:	f3af 8000 	nop.w
   a3130:	8800759c 	.word	0x8800759c
   a3134:	7e37e43c 	.word	0x7e37e43c
   a3138:	000fffff 	.word	0x000fffff
   a313c:	bff00000 	.word	0xbff00000

000a3140 <cosf>:
   a3140:	b500      	push	{lr}
   a3142:	4a1c      	ldr	r2, [pc, #112]	; (a31b4 <cosf+0x74>)
   a3144:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
   a3148:	4293      	cmp	r3, r2
   a314a:	b083      	sub	sp, #12
   a314c:	dd18      	ble.n	a3180 <cosf+0x40>
   a314e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   a3152:	db05      	blt.n	a3160 <cosf+0x20>
   a3154:	4601      	mov	r1, r0
   a3156:	f001 fc0f 	bl	a4978 <__aeabi_fsub>
   a315a:	b003      	add	sp, #12
   a315c:	f85d fb04 	ldr.w	pc, [sp], #4
   a3160:	4669      	mov	r1, sp
   a3162:	f000 f867 	bl	a3234 <__ieee754_rem_pio2f>
   a3166:	f000 0203 	and.w	r2, r0, #3
   a316a:	2a01      	cmp	r2, #1
   a316c:	d015      	beq.n	a319a <cosf+0x5a>
   a316e:	2a02      	cmp	r2, #2
   a3170:	d00c      	beq.n	a318c <cosf+0x4c>
   a3172:	b1ca      	cbz	r2, a31a8 <cosf+0x68>
   a3174:	2201      	movs	r2, #1
   a3176:	9901      	ldr	r1, [sp, #4]
   a3178:	9800      	ldr	r0, [sp, #0]
   a317a:	f000 fe11 	bl	a3da0 <__kernel_sinf>
   a317e:	e7ec      	b.n	a315a <cosf+0x1a>
   a3180:	2100      	movs	r1, #0
   a3182:	f000 f9c5 	bl	a3510 <__kernel_cosf>
   a3186:	b003      	add	sp, #12
   a3188:	f85d fb04 	ldr.w	pc, [sp], #4
   a318c:	9901      	ldr	r1, [sp, #4]
   a318e:	9800      	ldr	r0, [sp, #0]
   a3190:	f000 f9be 	bl	a3510 <__kernel_cosf>
   a3194:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   a3198:	e7df      	b.n	a315a <cosf+0x1a>
   a319a:	9901      	ldr	r1, [sp, #4]
   a319c:	9800      	ldr	r0, [sp, #0]
   a319e:	f000 fdff 	bl	a3da0 <__kernel_sinf>
   a31a2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   a31a6:	e7d8      	b.n	a315a <cosf+0x1a>
   a31a8:	9901      	ldr	r1, [sp, #4]
   a31aa:	9800      	ldr	r0, [sp, #0]
   a31ac:	f000 f9b0 	bl	a3510 <__kernel_cosf>
   a31b0:	e7d3      	b.n	a315a <cosf+0x1a>
   a31b2:	bf00      	nop
   a31b4:	3f490fd8 	.word	0x3f490fd8

000a31b8 <sinf>:
   a31b8:	b500      	push	{lr}
   a31ba:	4a1d      	ldr	r2, [pc, #116]	; (a3230 <sinf+0x78>)
   a31bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
   a31c0:	4293      	cmp	r3, r2
   a31c2:	b083      	sub	sp, #12
   a31c4:	dd19      	ble.n	a31fa <sinf+0x42>
   a31c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   a31ca:	db05      	blt.n	a31d8 <sinf+0x20>
   a31cc:	4601      	mov	r1, r0
   a31ce:	f001 fbd3 	bl	a4978 <__aeabi_fsub>
   a31d2:	b003      	add	sp, #12
   a31d4:	f85d fb04 	ldr.w	pc, [sp], #4
   a31d8:	4669      	mov	r1, sp
   a31da:	f000 f82b 	bl	a3234 <__ieee754_rem_pio2f>
   a31de:	f000 0003 	and.w	r0, r0, #3
   a31e2:	2801      	cmp	r0, #1
   a31e4:	d018      	beq.n	a3218 <sinf+0x60>
   a31e6:	2802      	cmp	r0, #2
   a31e8:	d00e      	beq.n	a3208 <sinf+0x50>
   a31ea:	b1d0      	cbz	r0, a3222 <sinf+0x6a>
   a31ec:	9901      	ldr	r1, [sp, #4]
   a31ee:	9800      	ldr	r0, [sp, #0]
   a31f0:	f000 f98e 	bl	a3510 <__kernel_cosf>
   a31f4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   a31f8:	e7eb      	b.n	a31d2 <sinf+0x1a>
   a31fa:	2200      	movs	r2, #0
   a31fc:	2100      	movs	r1, #0
   a31fe:	f000 fdcf 	bl	a3da0 <__kernel_sinf>
   a3202:	b003      	add	sp, #12
   a3204:	f85d fb04 	ldr.w	pc, [sp], #4
   a3208:	2201      	movs	r2, #1
   a320a:	9901      	ldr	r1, [sp, #4]
   a320c:	9800      	ldr	r0, [sp, #0]
   a320e:	f000 fdc7 	bl	a3da0 <__kernel_sinf>
   a3212:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   a3216:	e7dc      	b.n	a31d2 <sinf+0x1a>
   a3218:	9901      	ldr	r1, [sp, #4]
   a321a:	9800      	ldr	r0, [sp, #0]
   a321c:	f000 f978 	bl	a3510 <__kernel_cosf>
   a3220:	e7d7      	b.n	a31d2 <sinf+0x1a>
   a3222:	2201      	movs	r2, #1
   a3224:	9901      	ldr	r1, [sp, #4]
   a3226:	9800      	ldr	r0, [sp, #0]
   a3228:	f000 fdba 	bl	a3da0 <__kernel_sinf>
   a322c:	e7d1      	b.n	a31d2 <sinf+0x1a>
   a322e:	bf00      	nop
   a3230:	3f490fd8 	.word	0x3f490fd8

000a3234 <__ieee754_rem_pio2f>:
   a3234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a3238:	4aa8      	ldr	r2, [pc, #672]	; (a34dc <__ieee754_rem_pio2f+0x2a8>)
   a323a:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
   a323e:	4294      	cmp	r4, r2
   a3240:	b089      	sub	sp, #36	; 0x24
   a3242:	dd6e      	ble.n	a3322 <__ieee754_rem_pio2f+0xee>
   a3244:	4aa6      	ldr	r2, [pc, #664]	; (a34e0 <__ieee754_rem_pio2f+0x2ac>)
   a3246:	4606      	mov	r6, r0
   a3248:	4294      	cmp	r4, r2
   a324a:	460d      	mov	r5, r1
   a324c:	dc1c      	bgt.n	a3288 <__ieee754_rem_pio2f+0x54>
   a324e:	2800      	cmp	r0, #0
   a3250:	49a4      	ldr	r1, [pc, #656]	; (a34e4 <__ieee754_rem_pio2f+0x2b0>)
   a3252:	f340 80fa 	ble.w	a344a <__ieee754_rem_pio2f+0x216>
   a3256:	f001 fb8f 	bl	a4978 <__aeabi_fsub>
   a325a:	4ba3      	ldr	r3, [pc, #652]	; (a34e8 <__ieee754_rem_pio2f+0x2b4>)
   a325c:	f024 040f 	bic.w	r4, r4, #15
   a3260:	429c      	cmp	r4, r3
   a3262:	4606      	mov	r6, r0
   a3264:	d06c      	beq.n	a3340 <__ieee754_rem_pio2f+0x10c>
   a3266:	49a1      	ldr	r1, [pc, #644]	; (a34ec <__ieee754_rem_pio2f+0x2b8>)
   a3268:	f001 fb86 	bl	a4978 <__aeabi_fsub>
   a326c:	4601      	mov	r1, r0
   a326e:	4630      	mov	r0, r6
   a3270:	6029      	str	r1, [r5, #0]
   a3272:	f001 fb81 	bl	a4978 <__aeabi_fsub>
   a3276:	499d      	ldr	r1, [pc, #628]	; (a34ec <__ieee754_rem_pio2f+0x2b8>)
   a3278:	f001 fb7e 	bl	a4978 <__aeabi_fsub>
   a327c:	2701      	movs	r7, #1
   a327e:	6068      	str	r0, [r5, #4]
   a3280:	4638      	mov	r0, r7
   a3282:	b009      	add	sp, #36	; 0x24
   a3284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3288:	4a99      	ldr	r2, [pc, #612]	; (a34f0 <__ieee754_rem_pio2f+0x2bc>)
   a328a:	4294      	cmp	r4, r2
   a328c:	dd6a      	ble.n	a3364 <__ieee754_rem_pio2f+0x130>
   a328e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   a3292:	da4e      	bge.n	a3332 <__ieee754_rem_pio2f+0xfe>
   a3294:	15e7      	asrs	r7, r4, #23
   a3296:	3f86      	subs	r7, #134	; 0x86
   a3298:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
   a329c:	4620      	mov	r0, r4
   a329e:	f001 fe3b 	bl	a4f18 <__aeabi_f2iz>
   a32a2:	f001 fc1f 	bl	a4ae4 <__aeabi_i2f>
   a32a6:	4603      	mov	r3, r0
   a32a8:	4620      	mov	r0, r4
   a32aa:	4619      	mov	r1, r3
   a32ac:	9305      	str	r3, [sp, #20]
   a32ae:	f001 fb63 	bl	a4978 <__aeabi_fsub>
   a32b2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
   a32b6:	f001 fc69 	bl	a4b8c <__aeabi_fmul>
   a32ba:	4680      	mov	r8, r0
   a32bc:	f001 fe2c 	bl	a4f18 <__aeabi_f2iz>
   a32c0:	f001 fc10 	bl	a4ae4 <__aeabi_i2f>
   a32c4:	4604      	mov	r4, r0
   a32c6:	4640      	mov	r0, r8
   a32c8:	4621      	mov	r1, r4
   a32ca:	9406      	str	r4, [sp, #24]
   a32cc:	f001 fb54 	bl	a4978 <__aeabi_fsub>
   a32d0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
   a32d4:	f001 fc5a 	bl	a4b8c <__aeabi_fmul>
   a32d8:	2100      	movs	r1, #0
   a32da:	9007      	str	r0, [sp, #28]
   a32dc:	f001 fdea 	bl	a4eb4 <__aeabi_fcmpeq>
   a32e0:	2800      	cmp	r0, #0
   a32e2:	f000 80c9 	beq.w	a3478 <__ieee754_rem_pio2f+0x244>
   a32e6:	4620      	mov	r0, r4
   a32e8:	2100      	movs	r1, #0
   a32ea:	f001 fde3 	bl	a4eb4 <__aeabi_fcmpeq>
   a32ee:	2800      	cmp	r0, #0
   a32f0:	bf14      	ite	ne
   a32f2:	2301      	movne	r3, #1
   a32f4:	2302      	moveq	r3, #2
   a32f6:	2002      	movs	r0, #2
   a32f8:	497e      	ldr	r1, [pc, #504]	; (a34f4 <__ieee754_rem_pio2f+0x2c0>)
   a32fa:	463a      	mov	r2, r7
   a32fc:	e88d 0003 	stmia.w	sp, {r0, r1}
   a3300:	4629      	mov	r1, r5
   a3302:	a805      	add	r0, sp, #20
   a3304:	f000 f9c8 	bl	a3698 <__kernel_rem_pio2f>
   a3308:	2e00      	cmp	r6, #0
   a330a:	4607      	mov	r7, r0
   a330c:	da0d      	bge.n	a332a <__ieee754_rem_pio2f+0xf6>
   a330e:	e895 000c 	ldmia.w	r5, {r2, r3}
   a3312:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   a3316:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   a331a:	4247      	negs	r7, r0
   a331c:	602a      	str	r2, [r5, #0]
   a331e:	606b      	str	r3, [r5, #4]
   a3320:	e003      	b.n	a332a <__ieee754_rem_pio2f+0xf6>
   a3322:	2200      	movs	r2, #0
   a3324:	2700      	movs	r7, #0
   a3326:	6008      	str	r0, [r1, #0]
   a3328:	604a      	str	r2, [r1, #4]
   a332a:	4638      	mov	r0, r7
   a332c:	b009      	add	sp, #36	; 0x24
   a332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3332:	4601      	mov	r1, r0
   a3334:	f001 fb20 	bl	a4978 <__aeabi_fsub>
   a3338:	2700      	movs	r7, #0
   a333a:	6068      	str	r0, [r5, #4]
   a333c:	6028      	str	r0, [r5, #0]
   a333e:	e7f4      	b.n	a332a <__ieee754_rem_pio2f+0xf6>
   a3340:	496d      	ldr	r1, [pc, #436]	; (a34f8 <__ieee754_rem_pio2f+0x2c4>)
   a3342:	f001 fb19 	bl	a4978 <__aeabi_fsub>
   a3346:	496d      	ldr	r1, [pc, #436]	; (a34fc <__ieee754_rem_pio2f+0x2c8>)
   a3348:	4604      	mov	r4, r0
   a334a:	f001 fb15 	bl	a4978 <__aeabi_fsub>
   a334e:	4601      	mov	r1, r0
   a3350:	4620      	mov	r0, r4
   a3352:	6029      	str	r1, [r5, #0]
   a3354:	f001 fb10 	bl	a4978 <__aeabi_fsub>
   a3358:	4968      	ldr	r1, [pc, #416]	; (a34fc <__ieee754_rem_pio2f+0x2c8>)
   a335a:	f001 fb0d 	bl	a4978 <__aeabi_fsub>
   a335e:	2701      	movs	r7, #1
   a3360:	6068      	str	r0, [r5, #4]
   a3362:	e7e2      	b.n	a332a <__ieee754_rem_pio2f+0xf6>
   a3364:	f000 fd92 	bl	a3e8c <fabsf>
   a3368:	4965      	ldr	r1, [pc, #404]	; (a3500 <__ieee754_rem_pio2f+0x2cc>)
   a336a:	4680      	mov	r8, r0
   a336c:	f001 fc0e 	bl	a4b8c <__aeabi_fmul>
   a3370:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   a3374:	f001 fb02 	bl	a497c <__addsf3>
   a3378:	f001 fdce 	bl	a4f18 <__aeabi_f2iz>
   a337c:	4607      	mov	r7, r0
   a337e:	f001 fbb1 	bl	a4ae4 <__aeabi_i2f>
   a3382:	4958      	ldr	r1, [pc, #352]	; (a34e4 <__ieee754_rem_pio2f+0x2b0>)
   a3384:	4683      	mov	fp, r0
   a3386:	f001 fc01 	bl	a4b8c <__aeabi_fmul>
   a338a:	4601      	mov	r1, r0
   a338c:	4640      	mov	r0, r8
   a338e:	f001 faf3 	bl	a4978 <__aeabi_fsub>
   a3392:	4956      	ldr	r1, [pc, #344]	; (a34ec <__ieee754_rem_pio2f+0x2b8>)
   a3394:	4681      	mov	r9, r0
   a3396:	4658      	mov	r0, fp
   a3398:	f001 fbf8 	bl	a4b8c <__aeabi_fmul>
   a339c:	2f1f      	cmp	r7, #31
   a339e:	4682      	mov	sl, r0
   a33a0:	4601      	mov	r1, r0
   a33a2:	4648      	mov	r0, r9
   a33a4:	dc1f      	bgt.n	a33e6 <__ieee754_rem_pio2f+0x1b2>
   a33a6:	4b57      	ldr	r3, [pc, #348]	; (a3504 <__ieee754_rem_pio2f+0x2d0>)
   a33a8:	1e7a      	subs	r2, r7, #1
   a33aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   a33ae:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
   a33b2:	429a      	cmp	r2, r3
   a33b4:	d017      	beq.n	a33e6 <__ieee754_rem_pio2f+0x1b2>
   a33b6:	f001 fadf 	bl	a4978 <__aeabi_fsub>
   a33ba:	4680      	mov	r8, r0
   a33bc:	f8c5 8000 	str.w	r8, [r5]
   a33c0:	4641      	mov	r1, r8
   a33c2:	4648      	mov	r0, r9
   a33c4:	f001 fad8 	bl	a4978 <__aeabi_fsub>
   a33c8:	4651      	mov	r1, sl
   a33ca:	f001 fad5 	bl	a4978 <__aeabi_fsub>
   a33ce:	2e00      	cmp	r6, #0
   a33d0:	6068      	str	r0, [r5, #4]
   a33d2:	daaa      	bge.n	a332a <__ieee754_rem_pio2f+0xf6>
   a33d4:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
   a33d8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   a33dc:	f8c5 8000 	str.w	r8, [r5]
   a33e0:	6068      	str	r0, [r5, #4]
   a33e2:	427f      	negs	r7, r7
   a33e4:	e7a1      	b.n	a332a <__ieee754_rem_pio2f+0xf6>
   a33e6:	f001 fac7 	bl	a4978 <__aeabi_fsub>
   a33ea:	15e2      	asrs	r2, r4, #23
   a33ec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
   a33f0:	1ad3      	subs	r3, r2, r3
   a33f2:	2b08      	cmp	r3, #8
   a33f4:	4680      	mov	r8, r0
   a33f6:	dde1      	ble.n	a33bc <__ieee754_rem_pio2f+0x188>
   a33f8:	493f      	ldr	r1, [pc, #252]	; (a34f8 <__ieee754_rem_pio2f+0x2c4>)
   a33fa:	4658      	mov	r0, fp
   a33fc:	9203      	str	r2, [sp, #12]
   a33fe:	f001 fbc5 	bl	a4b8c <__aeabi_fmul>
   a3402:	4680      	mov	r8, r0
   a3404:	4601      	mov	r1, r0
   a3406:	4648      	mov	r0, r9
   a3408:	f001 fab6 	bl	a4978 <__aeabi_fsub>
   a340c:	4601      	mov	r1, r0
   a340e:	4604      	mov	r4, r0
   a3410:	4648      	mov	r0, r9
   a3412:	f001 fab1 	bl	a4978 <__aeabi_fsub>
   a3416:	4641      	mov	r1, r8
   a3418:	f001 faae 	bl	a4978 <__aeabi_fsub>
   a341c:	4680      	mov	r8, r0
   a341e:	4937      	ldr	r1, [pc, #220]	; (a34fc <__ieee754_rem_pio2f+0x2c8>)
   a3420:	4658      	mov	r0, fp
   a3422:	f001 fbb3 	bl	a4b8c <__aeabi_fmul>
   a3426:	4641      	mov	r1, r8
   a3428:	f001 faa6 	bl	a4978 <__aeabi_fsub>
   a342c:	4601      	mov	r1, r0
   a342e:	4682      	mov	sl, r0
   a3430:	4620      	mov	r0, r4
   a3432:	f001 faa1 	bl	a4978 <__aeabi_fsub>
   a3436:	9a03      	ldr	r2, [sp, #12]
   a3438:	f3c0 53c7 	ubfx	r3, r0, #23, #8
   a343c:	1ad2      	subs	r2, r2, r3
   a343e:	2a19      	cmp	r2, #25
   a3440:	4680      	mov	r8, r0
   a3442:	dc2e      	bgt.n	a34a2 <__ieee754_rem_pio2f+0x26e>
   a3444:	6028      	str	r0, [r5, #0]
   a3446:	46a1      	mov	r9, r4
   a3448:	e7ba      	b.n	a33c0 <__ieee754_rem_pio2f+0x18c>
   a344a:	f001 fa97 	bl	a497c <__addsf3>
   a344e:	4b26      	ldr	r3, [pc, #152]	; (a34e8 <__ieee754_rem_pio2f+0x2b4>)
   a3450:	f024 040f 	bic.w	r4, r4, #15
   a3454:	429c      	cmp	r4, r3
   a3456:	4606      	mov	r6, r0
   a3458:	d010      	beq.n	a347c <__ieee754_rem_pio2f+0x248>
   a345a:	4924      	ldr	r1, [pc, #144]	; (a34ec <__ieee754_rem_pio2f+0x2b8>)
   a345c:	f001 fa8e 	bl	a497c <__addsf3>
   a3460:	4601      	mov	r1, r0
   a3462:	4630      	mov	r0, r6
   a3464:	6029      	str	r1, [r5, #0]
   a3466:	f001 fa87 	bl	a4978 <__aeabi_fsub>
   a346a:	4920      	ldr	r1, [pc, #128]	; (a34ec <__ieee754_rem_pio2f+0x2b8>)
   a346c:	f001 fa86 	bl	a497c <__addsf3>
   a3470:	f04f 37ff 	mov.w	r7, #4294967295
   a3474:	6068      	str	r0, [r5, #4]
   a3476:	e758      	b.n	a332a <__ieee754_rem_pio2f+0xf6>
   a3478:	2303      	movs	r3, #3
   a347a:	e73c      	b.n	a32f6 <__ieee754_rem_pio2f+0xc2>
   a347c:	491e      	ldr	r1, [pc, #120]	; (a34f8 <__ieee754_rem_pio2f+0x2c4>)
   a347e:	f001 fa7d 	bl	a497c <__addsf3>
   a3482:	491e      	ldr	r1, [pc, #120]	; (a34fc <__ieee754_rem_pio2f+0x2c8>)
   a3484:	4604      	mov	r4, r0
   a3486:	f001 fa79 	bl	a497c <__addsf3>
   a348a:	4601      	mov	r1, r0
   a348c:	4620      	mov	r0, r4
   a348e:	6029      	str	r1, [r5, #0]
   a3490:	f001 fa72 	bl	a4978 <__aeabi_fsub>
   a3494:	4919      	ldr	r1, [pc, #100]	; (a34fc <__ieee754_rem_pio2f+0x2c8>)
   a3496:	f001 fa71 	bl	a497c <__addsf3>
   a349a:	f04f 37ff 	mov.w	r7, #4294967295
   a349e:	6068      	str	r0, [r5, #4]
   a34a0:	e743      	b.n	a332a <__ieee754_rem_pio2f+0xf6>
   a34a2:	4919      	ldr	r1, [pc, #100]	; (a3508 <__ieee754_rem_pio2f+0x2d4>)
   a34a4:	4658      	mov	r0, fp
   a34a6:	f001 fb71 	bl	a4b8c <__aeabi_fmul>
   a34aa:	4601      	mov	r1, r0
   a34ac:	4680      	mov	r8, r0
   a34ae:	4620      	mov	r0, r4
   a34b0:	f001 fa62 	bl	a4978 <__aeabi_fsub>
   a34b4:	4601      	mov	r1, r0
   a34b6:	4681      	mov	r9, r0
   a34b8:	4620      	mov	r0, r4
   a34ba:	f001 fa5d 	bl	a4978 <__aeabi_fsub>
   a34be:	4641      	mov	r1, r8
   a34c0:	f001 fa5a 	bl	a4978 <__aeabi_fsub>
   a34c4:	4604      	mov	r4, r0
   a34c6:	4911      	ldr	r1, [pc, #68]	; (a350c <__ieee754_rem_pio2f+0x2d8>)
   a34c8:	4658      	mov	r0, fp
   a34ca:	f001 fb5f 	bl	a4b8c <__aeabi_fmul>
   a34ce:	4621      	mov	r1, r4
   a34d0:	f001 fa52 	bl	a4978 <__aeabi_fsub>
   a34d4:	4682      	mov	sl, r0
   a34d6:	4601      	mov	r1, r0
   a34d8:	4648      	mov	r0, r9
   a34da:	e76c      	b.n	a33b6 <__ieee754_rem_pio2f+0x182>
   a34dc:	3f490fd8 	.word	0x3f490fd8
   a34e0:	4016cbe3 	.word	0x4016cbe3
   a34e4:	3fc90f80 	.word	0x3fc90f80
   a34e8:	3fc90fd0 	.word	0x3fc90fd0
   a34ec:	37354443 	.word	0x37354443
   a34f0:	43490f80 	.word	0x43490f80
   a34f4:	000ac798 	.word	0x000ac798
   a34f8:	37354400 	.word	0x37354400
   a34fc:	2e85a308 	.word	0x2e85a308
   a3500:	3f22f984 	.word	0x3f22f984
   a3504:	000ac718 	.word	0x000ac718
   a3508:	2e85a300 	.word	0x2e85a300
   a350c:	248d3132 	.word	0x248d3132

000a3510 <__kernel_cosf>:
   a3510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a3514:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
   a3518:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
   a351c:	4606      	mov	r6, r0
   a351e:	460f      	mov	r7, r1
   a3520:	da49      	bge.n	a35b6 <__kernel_cosf+0xa6>
   a3522:	f001 fcf9 	bl	a4f18 <__aeabi_f2iz>
   a3526:	2800      	cmp	r0, #0
   a3528:	f000 809d 	beq.w	a3666 <__kernel_cosf+0x156>
   a352c:	4631      	mov	r1, r6
   a352e:	4630      	mov	r0, r6
   a3530:	f001 fb2c 	bl	a4b8c <__aeabi_fmul>
   a3534:	4605      	mov	r5, r0
   a3536:	494e      	ldr	r1, [pc, #312]	; (a3670 <__kernel_cosf+0x160>)
   a3538:	f001 fb28 	bl	a4b8c <__aeabi_fmul>
   a353c:	494d      	ldr	r1, [pc, #308]	; (a3674 <__kernel_cosf+0x164>)
   a353e:	f001 fa1d 	bl	a497c <__addsf3>
   a3542:	4629      	mov	r1, r5
   a3544:	f001 fb22 	bl	a4b8c <__aeabi_fmul>
   a3548:	494b      	ldr	r1, [pc, #300]	; (a3678 <__kernel_cosf+0x168>)
   a354a:	f001 fa15 	bl	a4978 <__aeabi_fsub>
   a354e:	4629      	mov	r1, r5
   a3550:	f001 fb1c 	bl	a4b8c <__aeabi_fmul>
   a3554:	4949      	ldr	r1, [pc, #292]	; (a367c <__kernel_cosf+0x16c>)
   a3556:	f001 fa11 	bl	a497c <__addsf3>
   a355a:	4629      	mov	r1, r5
   a355c:	f001 fb16 	bl	a4b8c <__aeabi_fmul>
   a3560:	4947      	ldr	r1, [pc, #284]	; (a3680 <__kernel_cosf+0x170>)
   a3562:	f001 fa09 	bl	a4978 <__aeabi_fsub>
   a3566:	4629      	mov	r1, r5
   a3568:	f001 fb10 	bl	a4b8c <__aeabi_fmul>
   a356c:	4945      	ldr	r1, [pc, #276]	; (a3684 <__kernel_cosf+0x174>)
   a356e:	f001 fa05 	bl	a497c <__addsf3>
   a3572:	4629      	mov	r1, r5
   a3574:	f001 fb0a 	bl	a4b8c <__aeabi_fmul>
   a3578:	4680      	mov	r8, r0
   a357a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   a357e:	4628      	mov	r0, r5
   a3580:	f001 fb04 	bl	a4b8c <__aeabi_fmul>
   a3584:	4641      	mov	r1, r8
   a3586:	4604      	mov	r4, r0
   a3588:	4628      	mov	r0, r5
   a358a:	f001 faff 	bl	a4b8c <__aeabi_fmul>
   a358e:	4639      	mov	r1, r7
   a3590:	4605      	mov	r5, r0
   a3592:	4630      	mov	r0, r6
   a3594:	f001 fafa 	bl	a4b8c <__aeabi_fmul>
   a3598:	4601      	mov	r1, r0
   a359a:	4628      	mov	r0, r5
   a359c:	f001 f9ec 	bl	a4978 <__aeabi_fsub>
   a35a0:	4601      	mov	r1, r0
   a35a2:	4620      	mov	r0, r4
   a35a4:	f001 f9e8 	bl	a4978 <__aeabi_fsub>
   a35a8:	4601      	mov	r1, r0
   a35aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   a35ae:	f001 f9e3 	bl	a4978 <__aeabi_fsub>
   a35b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a35b6:	4601      	mov	r1, r0
   a35b8:	f001 fae8 	bl	a4b8c <__aeabi_fmul>
   a35bc:	4605      	mov	r5, r0
   a35be:	492c      	ldr	r1, [pc, #176]	; (a3670 <__kernel_cosf+0x160>)
   a35c0:	f001 fae4 	bl	a4b8c <__aeabi_fmul>
   a35c4:	492b      	ldr	r1, [pc, #172]	; (a3674 <__kernel_cosf+0x164>)
   a35c6:	f001 f9d9 	bl	a497c <__addsf3>
   a35ca:	4629      	mov	r1, r5
   a35cc:	f001 fade 	bl	a4b8c <__aeabi_fmul>
   a35d0:	4929      	ldr	r1, [pc, #164]	; (a3678 <__kernel_cosf+0x168>)
   a35d2:	f001 f9d1 	bl	a4978 <__aeabi_fsub>
   a35d6:	4629      	mov	r1, r5
   a35d8:	f001 fad8 	bl	a4b8c <__aeabi_fmul>
   a35dc:	4927      	ldr	r1, [pc, #156]	; (a367c <__kernel_cosf+0x16c>)
   a35de:	f001 f9cd 	bl	a497c <__addsf3>
   a35e2:	4629      	mov	r1, r5
   a35e4:	f001 fad2 	bl	a4b8c <__aeabi_fmul>
   a35e8:	4925      	ldr	r1, [pc, #148]	; (a3680 <__kernel_cosf+0x170>)
   a35ea:	f001 f9c5 	bl	a4978 <__aeabi_fsub>
   a35ee:	4629      	mov	r1, r5
   a35f0:	f001 facc 	bl	a4b8c <__aeabi_fmul>
   a35f4:	4923      	ldr	r1, [pc, #140]	; (a3684 <__kernel_cosf+0x174>)
   a35f6:	f001 f9c1 	bl	a497c <__addsf3>
   a35fa:	4629      	mov	r1, r5
   a35fc:	f001 fac6 	bl	a4b8c <__aeabi_fmul>
   a3600:	4b21      	ldr	r3, [pc, #132]	; (a3688 <__kernel_cosf+0x178>)
   a3602:	4680      	mov	r8, r0
   a3604:	429c      	cmp	r4, r3
   a3606:	ddb8      	ble.n	a357a <__kernel_cosf+0x6a>
   a3608:	4b20      	ldr	r3, [pc, #128]	; (a368c <__kernel_cosf+0x17c>)
   a360a:	429c      	cmp	r4, r3
   a360c:	dc27      	bgt.n	a365e <__kernel_cosf+0x14e>
   a360e:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
   a3612:	4621      	mov	r1, r4
   a3614:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   a3618:	f001 f9ae 	bl	a4978 <__aeabi_fsub>
   a361c:	4681      	mov	r9, r0
   a361e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   a3622:	4628      	mov	r0, r5
   a3624:	f001 fab2 	bl	a4b8c <__aeabi_fmul>
   a3628:	4621      	mov	r1, r4
   a362a:	f001 f9a5 	bl	a4978 <__aeabi_fsub>
   a362e:	4641      	mov	r1, r8
   a3630:	4604      	mov	r4, r0
   a3632:	4628      	mov	r0, r5
   a3634:	f001 faaa 	bl	a4b8c <__aeabi_fmul>
   a3638:	4639      	mov	r1, r7
   a363a:	4605      	mov	r5, r0
   a363c:	4630      	mov	r0, r6
   a363e:	f001 faa5 	bl	a4b8c <__aeabi_fmul>
   a3642:	4601      	mov	r1, r0
   a3644:	4628      	mov	r0, r5
   a3646:	f001 f997 	bl	a4978 <__aeabi_fsub>
   a364a:	4601      	mov	r1, r0
   a364c:	4620      	mov	r0, r4
   a364e:	f001 f993 	bl	a4978 <__aeabi_fsub>
   a3652:	4601      	mov	r1, r0
   a3654:	4648      	mov	r0, r9
   a3656:	f001 f98f 	bl	a4978 <__aeabi_fsub>
   a365a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a365e:	f8df 9034 	ldr.w	r9, [pc, #52]	; a3694 <__kernel_cosf+0x184>
   a3662:	4c0b      	ldr	r4, [pc, #44]	; (a3690 <__kernel_cosf+0x180>)
   a3664:	e7db      	b.n	a361e <__kernel_cosf+0x10e>
   a3666:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   a366a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a366e:	bf00      	nop
   a3670:	ad47d74e 	.word	0xad47d74e
   a3674:	310f74f6 	.word	0x310f74f6
   a3678:	3493f27c 	.word	0x3493f27c
   a367c:	37d00d01 	.word	0x37d00d01
   a3680:	3ab60b61 	.word	0x3ab60b61
   a3684:	3d2aaaab 	.word	0x3d2aaaab
   a3688:	3e999999 	.word	0x3e999999
   a368c:	3f480000 	.word	0x3f480000
   a3690:	3e900000 	.word	0x3e900000
   a3694:	3f380000 	.word	0x3f380000

000a3698 <__kernel_rem_pio2f>:
   a3698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a369c:	461c      	mov	r4, r3
   a369e:	b0dd      	sub	sp, #372	; 0x174
   a36a0:	9107      	str	r1, [sp, #28]
   a36a2:	1e61      	subs	r1, r4, #1
   a36a4:	9101      	str	r1, [sp, #4]
   a36a6:	9308      	str	r3, [sp, #32]
   a36a8:	9966      	ldr	r1, [sp, #408]	; 0x198
   a36aa:	4b8c      	ldr	r3, [pc, #560]	; (a38dc <__kernel_rem_pio2f+0x244>)
   a36ac:	9002      	str	r0, [sp, #8]
   a36ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   a36b2:	9305      	str	r3, [sp, #20]
   a36b4:	1ed3      	subs	r3, r2, #3
   a36b6:	bf48      	it	mi
   a36b8:	1d13      	addmi	r3, r2, #4
   a36ba:	10db      	asrs	r3, r3, #3
   a36bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   a36c0:	4619      	mov	r1, r3
   a36c2:	9309      	str	r3, [sp, #36]	; 0x24
   a36c4:	3301      	adds	r3, #1
   a36c6:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   a36ca:	9304      	str	r3, [sp, #16]
   a36cc:	9a01      	ldr	r2, [sp, #4]
   a36ce:	9b05      	ldr	r3, [sp, #20]
   a36d0:	1a8e      	subs	r6, r1, r2
   a36d2:	189c      	adds	r4, r3, r2
   a36d4:	d417      	bmi.n	a3706 <__kernel_rem_pio2f+0x6e>
   a36d6:	4434      	add	r4, r6
   a36d8:	2500      	movs	r5, #0
   a36da:	3401      	adds	r4, #1
   a36dc:	af1f      	add	r7, sp, #124	; 0x7c
   a36de:	f8dd 819c 	ldr.w	r8, [sp, #412]	; 0x19c
   a36e2:	e008      	b.n	a36f6 <__kernel_rem_pio2f+0x5e>
   a36e4:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
   a36e8:	f001 f9fc 	bl	a4ae4 <__aeabi_i2f>
   a36ec:	3601      	adds	r6, #1
   a36ee:	42a6      	cmp	r6, r4
   a36f0:	f847 0f04 	str.w	r0, [r7, #4]!
   a36f4:	d007      	beq.n	a3706 <__kernel_rem_pio2f+0x6e>
   a36f6:	2e00      	cmp	r6, #0
   a36f8:	daf4      	bge.n	a36e4 <__kernel_rem_pio2f+0x4c>
   a36fa:	4628      	mov	r0, r5
   a36fc:	3601      	adds	r6, #1
   a36fe:	42a6      	cmp	r6, r4
   a3700:	f847 0f04 	str.w	r0, [r7, #4]!
   a3704:	d1f7      	bne.n	a36f6 <__kernel_rem_pio2f+0x5e>
   a3706:	9b05      	ldr	r3, [sp, #20]
   a3708:	2b00      	cmp	r3, #0
   a370a:	db28      	blt.n	a375e <__kernel_rem_pio2f+0xc6>
   a370c:	f04f 0900 	mov.w	r9, #0
   a3710:	9b08      	ldr	r3, [sp, #32]
   a3712:	aa48      	add	r2, sp, #288	; 0x120
   a3714:	009e      	lsls	r6, r3, #2
   a3716:	9b02      	ldr	r3, [sp, #8]
   a3718:	1f35      	subs	r5, r6, #4
   a371a:	441d      	add	r5, r3
   a371c:	ab20      	add	r3, sp, #128	; 0x80
   a371e:	441e      	add	r6, r3
   a3720:	9b05      	ldr	r3, [sp, #20]
   a3722:	af47      	add	r7, sp, #284	; 0x11c
   a3724:	eb02 0883 	add.w	r8, r2, r3, lsl #2
   a3728:	9b01      	ldr	r3, [sp, #4]
   a372a:	2b00      	cmp	r3, #0
   a372c:	f2c0 82b7 	blt.w	a3c9e <__kernel_rem_pio2f+0x606>
   a3730:	46b3      	mov	fp, r6
   a3732:	46ca      	mov	sl, r9
   a3734:	9b02      	ldr	r3, [sp, #8]
   a3736:	1f1c      	subs	r4, r3, #4
   a3738:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
   a373c:	f854 0f04 	ldr.w	r0, [r4, #4]!
   a3740:	f001 fa24 	bl	a4b8c <__aeabi_fmul>
   a3744:	4601      	mov	r1, r0
   a3746:	4650      	mov	r0, sl
   a3748:	f001 f918 	bl	a497c <__addsf3>
   a374c:	42ac      	cmp	r4, r5
   a374e:	4682      	mov	sl, r0
   a3750:	d1f2      	bne.n	a3738 <__kernel_rem_pio2f+0xa0>
   a3752:	f847 af04 	str.w	sl, [r7, #4]!
   a3756:	4547      	cmp	r7, r8
   a3758:	f106 0604 	add.w	r6, r6, #4
   a375c:	d1e4      	bne.n	a3728 <__kernel_rem_pio2f+0x90>
   a375e:	9b05      	ldr	r3, [sp, #20]
   a3760:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   a3764:	469b      	mov	fp, r3
   a3766:	46d8      	mov	r8, fp
   a3768:	4413      	add	r3, r2
   a376a:	9908      	ldr	r1, [sp, #32]
   a376c:	009b      	lsls	r3, r3, #2
   a376e:	9802      	ldr	r0, [sp, #8]
   a3770:	440a      	add	r2, r1
   a3772:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   a3776:	1f19      	subs	r1, r3, #4
   a3778:	eb00 0582 	add.w	r5, r0, r2, lsl #2
   a377c:	4453      	add	r3, sl
   a377e:	eb0a 0201 	add.w	r2, sl, r1
   a3782:	920a      	str	r2, [sp, #40]	; 0x28
   a3784:	930b      	str	r3, [sp, #44]	; 0x2c
   a3786:	ea4f 0388 	mov.w	r3, r8, lsl #2
   a378a:	aa5c      	add	r2, sp, #368	; 0x170
   a378c:	9303      	str	r3, [sp, #12]
   a378e:	f1b8 0f00 	cmp.w	r8, #0
   a3792:	4413      	add	r3, r2
   a3794:	f853 9c50 	ldr.w	r9, [r3, #-80]
   a3798:	dd22      	ble.n	a37e0 <__kernel_rem_pio2f+0x148>
   a379a:	eb02 0488 	add.w	r4, r2, r8, lsl #2
   a379e:	3c54      	subs	r4, #84	; 0x54
   a37a0:	ae0b      	add	r6, sp, #44	; 0x2c
   a37a2:	af47      	add	r7, sp, #284	; 0x11c
   a37a4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
   a37a8:	4648      	mov	r0, r9
   a37aa:	f001 f9ef 	bl	a4b8c <__aeabi_fmul>
   a37ae:	f001 fbb3 	bl	a4f18 <__aeabi_f2iz>
   a37b2:	f001 f997 	bl	a4ae4 <__aeabi_i2f>
   a37b6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
   a37ba:	4683      	mov	fp, r0
   a37bc:	f001 f9e6 	bl	a4b8c <__aeabi_fmul>
   a37c0:	4601      	mov	r1, r0
   a37c2:	4648      	mov	r0, r9
   a37c4:	f001 f8d8 	bl	a4978 <__aeabi_fsub>
   a37c8:	f001 fba6 	bl	a4f18 <__aeabi_f2iz>
   a37cc:	f854 1904 	ldr.w	r1, [r4], #-4
   a37d0:	f846 0f04 	str.w	r0, [r6, #4]!
   a37d4:	4658      	mov	r0, fp
   a37d6:	f001 f8d1 	bl	a497c <__addsf3>
   a37da:	42bc      	cmp	r4, r7
   a37dc:	4681      	mov	r9, r0
   a37de:	d1e1      	bne.n	a37a4 <__kernel_rem_pio2f+0x10c>
   a37e0:	9e04      	ldr	r6, [sp, #16]
   a37e2:	4648      	mov	r0, r9
   a37e4:	4631      	mov	r1, r6
   a37e6:	f000 fb9b 	bl	a3f20 <scalbnf>
   a37ea:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
   a37ee:	4604      	mov	r4, r0
   a37f0:	f001 f9cc 	bl	a4b8c <__aeabi_fmul>
   a37f4:	f000 fb4e 	bl	a3e94 <floorf>
   a37f8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
   a37fc:	f001 f9c6 	bl	a4b8c <__aeabi_fmul>
   a3800:	4601      	mov	r1, r0
   a3802:	4620      	mov	r0, r4
   a3804:	f001 f8b8 	bl	a4978 <__aeabi_fsub>
   a3808:	4604      	mov	r4, r0
   a380a:	f001 fb85 	bl	a4f18 <__aeabi_f2iz>
   a380e:	4681      	mov	r9, r0
   a3810:	9006      	str	r0, [sp, #24]
   a3812:	f001 f967 	bl	a4ae4 <__aeabi_i2f>
   a3816:	4601      	mov	r1, r0
   a3818:	4620      	mov	r0, r4
   a381a:	f001 f8ad 	bl	a4978 <__aeabi_fsub>
   a381e:	2e00      	cmp	r6, #0
   a3820:	4607      	mov	r7, r0
   a3822:	f340 80e4 	ble.w	a39ee <__kernel_rem_pio2f+0x356>
   a3826:	f108 31ff 	add.w	r1, r8, #4294967295
   a382a:	f85a 4021 	ldr.w	r4, [sl, r1, lsl #2]
   a382e:	f1c6 0308 	rsb	r3, r6, #8
   a3832:	fa44 f203 	asr.w	r2, r4, r3
   a3836:	fa02 f303 	lsl.w	r3, r2, r3
   a383a:	1ae4      	subs	r4, r4, r3
   a383c:	f84a 4021 	str.w	r4, [sl, r1, lsl #2]
   a3840:	4649      	mov	r1, r9
   a3842:	f1c6 0307 	rsb	r3, r6, #7
   a3846:	4411      	add	r1, r2
   a3848:	9106      	str	r1, [sp, #24]
   a384a:	411c      	asrs	r4, r3
   a384c:	2c00      	cmp	r4, #0
   a384e:	dd5a      	ble.n	a3906 <__kernel_rem_pio2f+0x26e>
   a3850:	9b06      	ldr	r3, [sp, #24]
   a3852:	f1b8 0f00 	cmp.w	r8, #0
   a3856:	f103 0301 	add.w	r3, r3, #1
   a385a:	9306      	str	r3, [sp, #24]
   a385c:	f340 823a 	ble.w	a3cd4 <__kernel_rem_pio2f+0x63c>
   a3860:	f8da 6000 	ldr.w	r6, [sl]
   a3864:	2e00      	cmp	r6, #0
   a3866:	f040 8293 	bne.w	a3d90 <__kernel_rem_pio2f+0x6f8>
   a386a:	f1b8 0f01 	cmp.w	r8, #1
   a386e:	f340 8254 	ble.w	a3d1a <__kernel_rem_pio2f+0x682>
   a3872:	4652      	mov	r2, sl
   a3874:	2301      	movs	r3, #1
   a3876:	f852 6f04 	ldr.w	r6, [r2, #4]!
   a387a:	2e00      	cmp	r6, #0
   a387c:	f000 8249 	beq.w	a3d12 <__kernel_rem_pio2f+0x67a>
   a3880:	1c59      	adds	r1, r3, #1
   a3882:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
   a3886:	4588      	cmp	r8, r1
   a3888:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
   a388c:	dd14      	ble.n	a38b8 <__kernel_rem_pio2f+0x220>
   a388e:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
   a3892:	3302      	adds	r3, #2
   a3894:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
   a3898:	4598      	cmp	r8, r3
   a389a:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
   a389e:	dd0b      	ble.n	a38b8 <__kernel_rem_pio2f+0x220>
   a38a0:	9a03      	ldr	r2, [sp, #12]
   a38a2:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   a38a6:	4452      	add	r2, sl
   a38a8:	4691      	mov	r9, r2
   a38aa:	681a      	ldr	r2, [r3, #0]
   a38ac:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
   a38b0:	f843 2b04 	str.w	r2, [r3], #4
   a38b4:	454b      	cmp	r3, r9
   a38b6:	d1f8      	bne.n	a38aa <__kernel_rem_pio2f+0x212>
   a38b8:	9b04      	ldr	r3, [sp, #16]
   a38ba:	2b00      	cmp	r3, #0
   a38bc:	dd10      	ble.n	a38e0 <__kernel_rem_pio2f+0x248>
   a38be:	9b04      	ldr	r3, [sp, #16]
   a38c0:	2601      	movs	r6, #1
   a38c2:	2b01      	cmp	r3, #1
   a38c4:	f040 820e 	bne.w	a3ce4 <__kernel_rem_pio2f+0x64c>
   a38c8:	f108 32ff 	add.w	r2, r8, #4294967295
   a38cc:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   a38d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   a38d4:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
   a38d8:	e20e      	b.n	a3cf8 <__kernel_rem_pio2f+0x660>
   a38da:	bf00      	nop
   a38dc:	000acadc 	.word	0x000acadc
   a38e0:	2c02      	cmp	r4, #2
   a38e2:	d110      	bne.n	a3906 <__kernel_rem_pio2f+0x26e>
   a38e4:	4639      	mov	r1, r7
   a38e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   a38ea:	f001 f845 	bl	a4978 <__aeabi_fsub>
   a38ee:	4607      	mov	r7, r0
   a38f0:	9904      	ldr	r1, [sp, #16]
   a38f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   a38f6:	f000 fb13 	bl	a3f20 <scalbnf>
   a38fa:	4601      	mov	r1, r0
   a38fc:	4638      	mov	r0, r7
   a38fe:	f001 f83b 	bl	a4978 <__aeabi_fsub>
   a3902:	2402      	movs	r4, #2
   a3904:	4607      	mov	r7, r0
   a3906:	2100      	movs	r1, #0
   a3908:	4638      	mov	r0, r7
   a390a:	f001 fad3 	bl	a4eb4 <__aeabi_fcmpeq>
   a390e:	2800      	cmp	r0, #0
   a3910:	f000 8083 	beq.w	a3a1a <__kernel_rem_pio2f+0x382>
   a3914:	9b05      	ldr	r3, [sp, #20]
   a3916:	f108 37ff 	add.w	r7, r8, #4294967295
   a391a:	42bb      	cmp	r3, r7
   a391c:	dc0f      	bgt.n	a393e <__kernel_rem_pio2f+0x2a6>
   a391e:	2200      	movs	r2, #0
   a3920:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
   a3924:	3b01      	subs	r3, #1
   a3926:	980b      	ldr	r0, [sp, #44]	; 0x2c
   a3928:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   a392c:	f853 1904 	ldr.w	r1, [r3], #-4
   a3930:	4283      	cmp	r3, r0
   a3932:	ea42 0201 	orr.w	r2, r2, r1
   a3936:	d1f9      	bne.n	a392c <__kernel_rem_pio2f+0x294>
   a3938:	2a00      	cmp	r2, #0
   a393a:	f040 809d 	bne.w	a3a78 <__kernel_rem_pio2f+0x3e0>
   a393e:	9b05      	ldr	r3, [sp, #20]
   a3940:	3b01      	subs	r3, #1
   a3942:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
   a3946:	2b00      	cmp	r3, #0
   a3948:	f040 81f4 	bne.w	a3d34 <__kernel_rem_pio2f+0x69c>
   a394c:	2301      	movs	r3, #1
   a394e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   a3950:	f852 1904 	ldr.w	r1, [r2], #-4
   a3954:	3301      	adds	r3, #1
   a3956:	2900      	cmp	r1, #0
   a3958:	d0fa      	beq.n	a3950 <__kernel_rem_pio2f+0x2b8>
   a395a:	4443      	add	r3, r8
   a395c:	461a      	mov	r2, r3
   a395e:	9306      	str	r3, [sp, #24]
   a3960:	f108 0301 	add.w	r3, r8, #1
   a3964:	4293      	cmp	r3, r2
   a3966:	dc37      	bgt.n	a39d8 <__kernel_rem_pio2f+0x340>
   a3968:	9908      	ldr	r1, [sp, #32]
   a396a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   a396c:	eb01 0708 	add.w	r7, r1, r8
   a3970:	a920      	add	r1, sp, #128	; 0x80
   a3972:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   a3976:	9906      	ldr	r1, [sp, #24]
   a3978:	189e      	adds	r6, r3, r2
   a397a:	eb01 0902 	add.w	r9, r1, r2
   a397e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   a3982:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   a3984:	3e01      	subs	r6, #1
   a3986:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   a398a:	aa48      	add	r2, sp, #288	; 0x120
   a398c:	eb02 0883 	add.w	r8, r2, r3, lsl #2
   a3990:	9b67      	ldr	r3, [sp, #412]	; 0x19c
   a3992:	eb03 0389 	add.w	r3, r3, r9, lsl #2
   a3996:	9303      	str	r3, [sp, #12]
   a3998:	f856 0f04 	ldr.w	r0, [r6, #4]!
   a399c:	f001 f8a2 	bl	a4ae4 <__aeabi_i2f>
   a39a0:	9b01      	ldr	r3, [sp, #4]
   a39a2:	f847 0b04 	str.w	r0, [r7], #4
   a39a6:	2b00      	cmp	r3, #0
   a39a8:	db19      	blt.n	a39de <__kernel_rem_pio2f+0x346>
   a39aa:	46bb      	mov	fp, r7
   a39ac:	f04f 0900 	mov.w	r9, #0
   a39b0:	9b02      	ldr	r3, [sp, #8]
   a39b2:	1f1c      	subs	r4, r3, #4
   a39b4:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
   a39b8:	f854 0f04 	ldr.w	r0, [r4, #4]!
   a39bc:	f001 f8e6 	bl	a4b8c <__aeabi_fmul>
   a39c0:	4601      	mov	r1, r0
   a39c2:	4648      	mov	r0, r9
   a39c4:	f000 ffda 	bl	a497c <__addsf3>
   a39c8:	42ac      	cmp	r4, r5
   a39ca:	4681      	mov	r9, r0
   a39cc:	d1f2      	bne.n	a39b4 <__kernel_rem_pio2f+0x31c>
   a39ce:	9b03      	ldr	r3, [sp, #12]
   a39d0:	f848 9b04 	str.w	r9, [r8], #4
   a39d4:	429e      	cmp	r6, r3
   a39d6:	d1df      	bne.n	a3998 <__kernel_rem_pio2f+0x300>
   a39d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   a39dc:	e6d3      	b.n	a3786 <__kernel_rem_pio2f+0xee>
   a39de:	f04f 0900 	mov.w	r9, #0
   a39e2:	9b03      	ldr	r3, [sp, #12]
   a39e4:	f848 9b04 	str.w	r9, [r8], #4
   a39e8:	429e      	cmp	r6, r3
   a39ea:	d1d5      	bne.n	a3998 <__kernel_rem_pio2f+0x300>
   a39ec:	e7f4      	b.n	a39d8 <__kernel_rem_pio2f+0x340>
   a39ee:	d105      	bne.n	a39fc <__kernel_rem_pio2f+0x364>
   a39f0:	f108 33ff 	add.w	r3, r8, #4294967295
   a39f4:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
   a39f8:	1224      	asrs	r4, r4, #8
   a39fa:	e727      	b.n	a384c <__kernel_rem_pio2f+0x1b4>
   a39fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   a3a00:	f001 fa76 	bl	a4ef0 <__aeabi_fcmpge>
   a3a04:	2800      	cmp	r0, #0
   a3a06:	f040 8153 	bne.w	a3cb0 <__kernel_rem_pio2f+0x618>
   a3a0a:	4604      	mov	r4, r0
   a3a0c:	2100      	movs	r1, #0
   a3a0e:	4638      	mov	r0, r7
   a3a10:	f001 fa50 	bl	a4eb4 <__aeabi_fcmpeq>
   a3a14:	2800      	cmp	r0, #0
   a3a16:	f47f af7d 	bne.w	a3914 <__kernel_rem_pio2f+0x27c>
   a3a1a:	9e04      	ldr	r6, [sp, #16]
   a3a1c:	4638      	mov	r0, r7
   a3a1e:	4271      	negs	r1, r6
   a3a20:	f000 fa7e 	bl	a3f20 <scalbnf>
   a3a24:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
   a3a28:	46a1      	mov	r9, r4
   a3a2a:	4604      	mov	r4, r0
   a3a2c:	f001 fa60 	bl	a4ef0 <__aeabi_fcmpge>
   a3a30:	2800      	cmp	r0, #0
   a3a32:	f000 818d 	beq.w	a3d50 <__kernel_rem_pio2f+0x6b8>
   a3a36:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
   a3a3a:	4620      	mov	r0, r4
   a3a3c:	f001 f8a6 	bl	a4b8c <__aeabi_fmul>
   a3a40:	f001 fa6a 	bl	a4f18 <__aeabi_f2iz>
   a3a44:	f001 f84e 	bl	a4ae4 <__aeabi_i2f>
   a3a48:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
   a3a4c:	4605      	mov	r5, r0
   a3a4e:	f001 f89d 	bl	a4b8c <__aeabi_fmul>
   a3a52:	4601      	mov	r1, r0
   a3a54:	4620      	mov	r0, r4
   a3a56:	f000 ff8f 	bl	a4978 <__aeabi_fsub>
   a3a5a:	f001 fa5d 	bl	a4f18 <__aeabi_f2iz>
   a3a5e:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
   a3a62:	4628      	mov	r0, r5
   a3a64:	f001 fa58 	bl	a4f18 <__aeabi_f2iz>
   a3a68:	4633      	mov	r3, r6
   a3a6a:	f108 0701 	add.w	r7, r8, #1
   a3a6e:	3308      	adds	r3, #8
   a3a70:	9304      	str	r3, [sp, #16]
   a3a72:	f84a 0027 	str.w	r0, [sl, r7, lsl #2]
   a3a76:	e012      	b.n	a3a9e <__kernel_rem_pio2f+0x406>
   a3a78:	9a04      	ldr	r2, [sp, #16]
   a3a7a:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
   a3a7e:	3a08      	subs	r2, #8
   a3a80:	46a1      	mov	r9, r4
   a3a82:	9204      	str	r2, [sp, #16]
   a3a84:	b95b      	cbnz	r3, a3a9e <__kernel_rem_pio2f+0x406>
   a3a86:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
   a3a8a:	3b01      	subs	r3, #1
   a3a8c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   a3a90:	f853 1904 	ldr.w	r1, [r3], #-4
   a3a94:	3f01      	subs	r7, #1
   a3a96:	3a08      	subs	r2, #8
   a3a98:	2900      	cmp	r1, #0
   a3a9a:	d0f9      	beq.n	a3a90 <__kernel_rem_pio2f+0x3f8>
   a3a9c:	9204      	str	r2, [sp, #16]
   a3a9e:	9904      	ldr	r1, [sp, #16]
   a3aa0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   a3aa4:	f000 fa3c 	bl	a3f20 <scalbnf>
   a3aa8:	2f00      	cmp	r7, #0
   a3aaa:	4604      	mov	r4, r0
   a3aac:	f2c0 815c 	blt.w	a3d68 <__kernel_rem_pio2f+0x6d0>
   a3ab0:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
   a3ab4:	00bb      	lsls	r3, r7, #2
   a3ab6:	a948      	add	r1, sp, #288	; 0x120
   a3ab8:	1d1a      	adds	r2, r3, #4
   a3aba:	eb01 0803 	add.w	r8, r1, r3
   a3abe:	9301      	str	r3, [sp, #4]
   a3ac0:	9202      	str	r2, [sp, #8]
   a3ac2:	eb0a 0b02 	add.w	fp, sl, r2
   a3ac6:	f108 0504 	add.w	r5, r8, #4
   a3aca:	f85b 0d04 	ldr.w	r0, [fp, #-4]!
   a3ace:	f001 f809 	bl	a4ae4 <__aeabi_i2f>
   a3ad2:	4621      	mov	r1, r4
   a3ad4:	f001 f85a 	bl	a4b8c <__aeabi_fmul>
   a3ad8:	4631      	mov	r1, r6
   a3ada:	f845 0d04 	str.w	r0, [r5, #-4]!
   a3ade:	4620      	mov	r0, r4
   a3ae0:	f001 f854 	bl	a4b8c <__aeabi_fmul>
   a3ae4:	45d3      	cmp	fp, sl
   a3ae6:	4604      	mov	r4, r0
   a3ae8:	d1ef      	bne.n	a3aca <__kernel_rem_pio2f+0x432>
   a3aea:	2600      	movs	r6, #0
   a3aec:	46b2      	mov	sl, r6
   a3aee:	f8dd b014 	ldr.w	fp, [sp, #20]
   a3af2:	f1a8 0804 	sub.w	r8, r8, #4
   a3af6:	9703      	str	r7, [sp, #12]
   a3af8:	f1bb 0f00 	cmp.w	fp, #0
   a3afc:	bfb8      	it	lt
   a3afe:	2500      	movlt	r5, #0
   a3b00:	db15      	blt.n	a3b2e <__kernel_rem_pio2f+0x496>
   a3b02:	4ea5      	ldr	r6, [pc, #660]	; (a3d98 <__kernel_rem_pio2f+0x700>)
   a3b04:	4647      	mov	r7, r8
   a3b06:	48a5      	ldr	r0, [pc, #660]	; (a3d9c <__kernel_rem_pio2f+0x704>)
   a3b08:	2500      	movs	r5, #0
   a3b0a:	2400      	movs	r4, #0
   a3b0c:	e003      	b.n	a3b16 <__kernel_rem_pio2f+0x47e>
   a3b0e:	4554      	cmp	r4, sl
   a3b10:	dc0d      	bgt.n	a3b2e <__kernel_rem_pio2f+0x496>
   a3b12:	f856 0f04 	ldr.w	r0, [r6, #4]!
   a3b16:	f857 1f04 	ldr.w	r1, [r7, #4]!
   a3b1a:	f001 f837 	bl	a4b8c <__aeabi_fmul>
   a3b1e:	4601      	mov	r1, r0
   a3b20:	4628      	mov	r0, r5
   a3b22:	f000 ff2b 	bl	a497c <__addsf3>
   a3b26:	3401      	adds	r4, #1
   a3b28:	45a3      	cmp	fp, r4
   a3b2a:	4605      	mov	r5, r0
   a3b2c:	daef      	bge.n	a3b0e <__kernel_rem_pio2f+0x476>
   a3b2e:	ab5c      	add	r3, sp, #368	; 0x170
   a3b30:	eb03 038a 	add.w	r3, r3, sl, lsl #2
   a3b34:	f1a8 0804 	sub.w	r8, r8, #4
   a3b38:	f843 5ca0 	str.w	r5, [r3, #-160]
   a3b3c:	ab46      	add	r3, sp, #280	; 0x118
   a3b3e:	4543      	cmp	r3, r8
   a3b40:	f10a 0a01 	add.w	sl, sl, #1
   a3b44:	d1d8      	bne.n	a3af8 <__kernel_rem_pio2f+0x460>
   a3b46:	9b66      	ldr	r3, [sp, #408]	; 0x198
   a3b48:	9f03      	ldr	r7, [sp, #12]
   a3b4a:	2b03      	cmp	r3, #3
   a3b4c:	d85a      	bhi.n	a3c04 <__kernel_rem_pio2f+0x56c>
   a3b4e:	e8df f003 	tbb	[pc, r3]
   a3b52:	5f8e      	.short	0x5f8e
   a3b54:	025f      	.short	0x025f
   a3b56:	2f00      	cmp	r7, #0
   a3b58:	f340 8104 	ble.w	a3d64 <__kernel_rem_pio2f+0x6cc>
   a3b5c:	9a01      	ldr	r2, [sp, #4]
   a3b5e:	a95c      	add	r1, sp, #368	; 0x170
   a3b60:	188b      	adds	r3, r1, r2
   a3b62:	ad34      	add	r5, sp, #208	; 0xd0
   a3b64:	f853 6ca0 	ldr.w	r6, [r3, #-160]
   a3b68:	18ac      	adds	r4, r5, r2
   a3b6a:	f854 ac04 	ldr.w	sl, [r4, #-4]
   a3b6e:	4631      	mov	r1, r6
   a3b70:	4650      	mov	r0, sl
   a3b72:	f000 ff03 	bl	a497c <__addsf3>
   a3b76:	4680      	mov	r8, r0
   a3b78:	4601      	mov	r1, r0
   a3b7a:	4650      	mov	r0, sl
   a3b7c:	f000 fefc 	bl	a4978 <__aeabi_fsub>
   a3b80:	4631      	mov	r1, r6
   a3b82:	f000 fefb 	bl	a497c <__addsf3>
   a3b86:	6020      	str	r0, [r4, #0]
   a3b88:	f844 8d04 	str.w	r8, [r4, #-4]!
   a3b8c:	42a5      	cmp	r5, r4
   a3b8e:	4646      	mov	r6, r8
   a3b90:	d1eb      	bne.n	a3b6a <__kernel_rem_pio2f+0x4d2>
   a3b92:	2f01      	cmp	r7, #1
   a3b94:	f340 80e6 	ble.w	a3d64 <__kernel_rem_pio2f+0x6cc>
   a3b98:	9b01      	ldr	r3, [sp, #4]
   a3b9a:	aa5c      	add	r2, sp, #368	; 0x170
   a3b9c:	18ec      	adds	r4, r5, r3
   a3b9e:	4625      	mov	r5, r4
   a3ba0:	18d3      	adds	r3, r2, r3
   a3ba2:	f853 6ca0 	ldr.w	r6, [r3, #-160]
   a3ba6:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
   a3baa:	f855 8c04 	ldr.w	r8, [r5, #-4]
   a3bae:	4631      	mov	r1, r6
   a3bb0:	4640      	mov	r0, r8
   a3bb2:	f000 fee3 	bl	a497c <__addsf3>
   a3bb6:	4607      	mov	r7, r0
   a3bb8:	4601      	mov	r1, r0
   a3bba:	4640      	mov	r0, r8
   a3bbc:	f000 fedc 	bl	a4978 <__aeabi_fsub>
   a3bc0:	4631      	mov	r1, r6
   a3bc2:	f000 fedb 	bl	a497c <__addsf3>
   a3bc6:	6028      	str	r0, [r5, #0]
   a3bc8:	f845 7d04 	str.w	r7, [r5, #-4]!
   a3bcc:	45aa      	cmp	sl, r5
   a3bce:	463e      	mov	r6, r7
   a3bd0:	d1eb      	bne.n	a3baa <__kernel_rem_pio2f+0x512>
   a3bd2:	2000      	movs	r0, #0
   a3bd4:	3404      	adds	r4, #4
   a3bd6:	ad36      	add	r5, sp, #216	; 0xd8
   a3bd8:	f854 1d04 	ldr.w	r1, [r4, #-4]!
   a3bdc:	f000 fece 	bl	a497c <__addsf3>
   a3be0:	42a5      	cmp	r5, r4
   a3be2:	d1f9      	bne.n	a3bd8 <__kernel_rem_pio2f+0x540>
   a3be4:	f1b9 0f00 	cmp.w	r9, #0
   a3be8:	f000 80b9 	beq.w	a3d5e <__kernel_rem_pio2f+0x6c6>
   a3bec:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   a3bee:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   a3bf0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   a3bf4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   a3bf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   a3bfc:	9c07      	ldr	r4, [sp, #28]
   a3bfe:	60a0      	str	r0, [r4, #8]
   a3c00:	6022      	str	r2, [r4, #0]
   a3c02:	6063      	str	r3, [r4, #4]
   a3c04:	9b06      	ldr	r3, [sp, #24]
   a3c06:	f003 0007 	and.w	r0, r3, #7
   a3c0a:	b05d      	add	sp, #372	; 0x174
   a3c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3c10:	2000      	movs	r0, #0
   a3c12:	9c01      	ldr	r4, [sp, #4]
   a3c14:	ad34      	add	r5, sp, #208	; 0xd0
   a3c16:	3404      	adds	r4, #4
   a3c18:	442c      	add	r4, r5
   a3c1a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
   a3c1e:	f000 fead 	bl	a497c <__addsf3>
   a3c22:	42ac      	cmp	r4, r5
   a3c24:	d1f9      	bne.n	a3c1a <__kernel_rem_pio2f+0x582>
   a3c26:	f1b9 0f00 	cmp.w	r9, #0
   a3c2a:	f000 8085 	beq.w	a3d38 <__kernel_rem_pio2f+0x6a0>
   a3c2e:	9a07      	ldr	r2, [sp, #28]
   a3c30:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   a3c34:	4601      	mov	r1, r0
   a3c36:	6013      	str	r3, [r2, #0]
   a3c38:	9834      	ldr	r0, [sp, #208]	; 0xd0
   a3c3a:	f000 fe9d 	bl	a4978 <__aeabi_fsub>
   a3c3e:	2f00      	cmp	r7, #0
   a3c40:	dd0b      	ble.n	a3c5a <__kernel_rem_pio2f+0x5c2>
   a3c42:	2401      	movs	r4, #1
   a3c44:	ad34      	add	r5, sp, #208	; 0xd0
   a3c46:	3401      	adds	r4, #1
   a3c48:	f855 1f04 	ldr.w	r1, [r5, #4]!
   a3c4c:	f000 fe96 	bl	a497c <__addsf3>
   a3c50:	42a7      	cmp	r7, r4
   a3c52:	daf8      	bge.n	a3c46 <__kernel_rem_pio2f+0x5ae>
   a3c54:	f1b9 0f00 	cmp.w	r9, #0
   a3c58:	d001      	beq.n	a3c5e <__kernel_rem_pio2f+0x5c6>
   a3c5a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   a3c5e:	9b07      	ldr	r3, [sp, #28]
   a3c60:	6058      	str	r0, [r3, #4]
   a3c62:	9b06      	ldr	r3, [sp, #24]
   a3c64:	f003 0007 	and.w	r0, r3, #7
   a3c68:	b05d      	add	sp, #372	; 0x174
   a3c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3c6e:	9b02      	ldr	r3, [sp, #8]
   a3c70:	ad34      	add	r5, sp, #208	; 0xd0
   a3c72:	442b      	add	r3, r5
   a3c74:	2000      	movs	r0, #0
   a3c76:	461c      	mov	r4, r3
   a3c78:	f854 1d04 	ldr.w	r1, [r4, #-4]!
   a3c7c:	f000 fe7e 	bl	a497c <__addsf3>
   a3c80:	42a5      	cmp	r5, r4
   a3c82:	d1f9      	bne.n	a3c78 <__kernel_rem_pio2f+0x5e0>
   a3c84:	f1b9 0f00 	cmp.w	r9, #0
   a3c88:	d001      	beq.n	a3c8e <__kernel_rem_pio2f+0x5f6>
   a3c8a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   a3c8e:	9b07      	ldr	r3, [sp, #28]
   a3c90:	6018      	str	r0, [r3, #0]
   a3c92:	9b06      	ldr	r3, [sp, #24]
   a3c94:	f003 0007 	and.w	r0, r3, #7
   a3c98:	b05d      	add	sp, #372	; 0x174
   a3c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3c9e:	46ca      	mov	sl, r9
   a3ca0:	f847 af04 	str.w	sl, [r7, #4]!
   a3ca4:	4547      	cmp	r7, r8
   a3ca6:	f106 0604 	add.w	r6, r6, #4
   a3caa:	f47f ad3d 	bne.w	a3728 <__kernel_rem_pio2f+0x90>
   a3cae:	e556      	b.n	a375e <__kernel_rem_pio2f+0xc6>
   a3cb0:	9b06      	ldr	r3, [sp, #24]
   a3cb2:	f1b8 0f00 	cmp.w	r8, #0
   a3cb6:	f103 0301 	add.w	r3, r3, #1
   a3cba:	9306      	str	r3, [sp, #24]
   a3cbc:	bfc8      	it	gt
   a3cbe:	2402      	movgt	r4, #2
   a3cc0:	f73f adce 	bgt.w	a3860 <__kernel_rem_pio2f+0x1c8>
   a3cc4:	4639      	mov	r1, r7
   a3cc6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   a3cca:	f000 fe55 	bl	a4978 <__aeabi_fsub>
   a3cce:	2402      	movs	r4, #2
   a3cd0:	4607      	mov	r7, r0
   a3cd2:	e618      	b.n	a3906 <__kernel_rem_pio2f+0x26e>
   a3cd4:	9b04      	ldr	r3, [sp, #16]
   a3cd6:	2b00      	cmp	r3, #0
   a3cd8:	dd22      	ble.n	a3d20 <__kernel_rem_pio2f+0x688>
   a3cda:	2600      	movs	r6, #0
   a3cdc:	9b04      	ldr	r3, [sp, #16]
   a3cde:	2b01      	cmp	r3, #1
   a3ce0:	f43f adf2 	beq.w	a38c8 <__kernel_rem_pio2f+0x230>
   a3ce4:	2b02      	cmp	r3, #2
   a3ce6:	d107      	bne.n	a3cf8 <__kernel_rem_pio2f+0x660>
   a3ce8:	f108 32ff 	add.w	r2, r8, #4294967295
   a3cec:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   a3cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   a3cf4:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
   a3cf8:	2c02      	cmp	r4, #2
   a3cfa:	f47f ae04 	bne.w	a3906 <__kernel_rem_pio2f+0x26e>
   a3cfe:	4639      	mov	r1, r7
   a3d00:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   a3d04:	f000 fe38 	bl	a4978 <__aeabi_fsub>
   a3d08:	4607      	mov	r7, r0
   a3d0a:	2e00      	cmp	r6, #0
   a3d0c:	f43f adfb 	beq.w	a3906 <__kernel_rem_pio2f+0x26e>
   a3d10:	e5ee      	b.n	a38f0 <__kernel_rem_pio2f+0x258>
   a3d12:	3301      	adds	r3, #1
   a3d14:	4598      	cmp	r8, r3
   a3d16:	f47f adae 	bne.w	a3876 <__kernel_rem_pio2f+0x1de>
   a3d1a:	9b04      	ldr	r3, [sp, #16]
   a3d1c:	2b00      	cmp	r3, #0
   a3d1e:	dcdd      	bgt.n	a3cdc <__kernel_rem_pio2f+0x644>
   a3d20:	2c02      	cmp	r4, #2
   a3d22:	f47f adf0 	bne.w	a3906 <__kernel_rem_pio2f+0x26e>
   a3d26:	4639      	mov	r1, r7
   a3d28:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   a3d2c:	f000 fe24 	bl	a4978 <__aeabi_fsub>
   a3d30:	4607      	mov	r7, r0
   a3d32:	e5e8      	b.n	a3906 <__kernel_rem_pio2f+0x26e>
   a3d34:	2301      	movs	r3, #1
   a3d36:	e610      	b.n	a395a <__kernel_rem_pio2f+0x2c2>
   a3d38:	9b07      	ldr	r3, [sp, #28]
   a3d3a:	4601      	mov	r1, r0
   a3d3c:	6018      	str	r0, [r3, #0]
   a3d3e:	9834      	ldr	r0, [sp, #208]	; 0xd0
   a3d40:	f000 fe1a 	bl	a4978 <__aeabi_fsub>
   a3d44:	2f00      	cmp	r7, #0
   a3d46:	f73f af7c 	bgt.w	a3c42 <__kernel_rem_pio2f+0x5aa>
   a3d4a:	9b07      	ldr	r3, [sp, #28]
   a3d4c:	6058      	str	r0, [r3, #4]
   a3d4e:	e788      	b.n	a3c62 <__kernel_rem_pio2f+0x5ca>
   a3d50:	4620      	mov	r0, r4
   a3d52:	f001 f8e1 	bl	a4f18 <__aeabi_f2iz>
   a3d56:	4647      	mov	r7, r8
   a3d58:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
   a3d5c:	e69f      	b.n	a3a9e <__kernel_rem_pio2f+0x406>
   a3d5e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   a3d60:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   a3d62:	e74b      	b.n	a3bfc <__kernel_rem_pio2f+0x564>
   a3d64:	2000      	movs	r0, #0
   a3d66:	e73d      	b.n	a3be4 <__kernel_rem_pio2f+0x54c>
   a3d68:	9b66      	ldr	r3, [sp, #408]	; 0x198
   a3d6a:	2b03      	cmp	r3, #3
   a3d6c:	f63f af4a 	bhi.w	a3c04 <__kernel_rem_pio2f+0x56c>
   a3d70:	a201      	add	r2, pc, #4	; (adr r2, a3d78 <__kernel_rem_pio2f+0x6e0>)
   a3d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3d76:	bf00      	nop
   a3d78:	000a3d8d 	.word	0x000a3d8d
   a3d7c:	000a3d89 	.word	0x000a3d89
   a3d80:	000a3d89 	.word	0x000a3d89
   a3d84:	000a3d65 	.word	0x000a3d65
   a3d88:	2000      	movs	r0, #0
   a3d8a:	e74c      	b.n	a3c26 <__kernel_rem_pio2f+0x58e>
   a3d8c:	2000      	movs	r0, #0
   a3d8e:	e779      	b.n	a3c84 <__kernel_rem_pio2f+0x5ec>
   a3d90:	2101      	movs	r1, #1
   a3d92:	2300      	movs	r3, #0
   a3d94:	e575      	b.n	a3882 <__kernel_rem_pio2f+0x1ea>
   a3d96:	bf00      	nop
   a3d98:	000acab0 	.word	0x000acab0
   a3d9c:	3fc90000 	.word	0x3fc90000

000a3da0 <__kernel_sinf>:
   a3da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a3da4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
   a3da8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   a3dac:	4604      	mov	r4, r0
   a3dae:	460f      	mov	r7, r1
   a3db0:	4690      	mov	r8, r2
   a3db2:	da03      	bge.n	a3dbc <__kernel_sinf+0x1c>
   a3db4:	f001 f8b0 	bl	a4f18 <__aeabi_f2iz>
   a3db8:	2800      	cmp	r0, #0
   a3dba:	d058      	beq.n	a3e6e <__kernel_sinf+0xce>
   a3dbc:	4621      	mov	r1, r4
   a3dbe:	4620      	mov	r0, r4
   a3dc0:	f000 fee4 	bl	a4b8c <__aeabi_fmul>
   a3dc4:	4605      	mov	r5, r0
   a3dc6:	4601      	mov	r1, r0
   a3dc8:	4620      	mov	r0, r4
   a3dca:	f000 fedf 	bl	a4b8c <__aeabi_fmul>
   a3dce:	4929      	ldr	r1, [pc, #164]	; (a3e74 <__kernel_sinf+0xd4>)
   a3dd0:	4606      	mov	r6, r0
   a3dd2:	4628      	mov	r0, r5
   a3dd4:	f000 feda 	bl	a4b8c <__aeabi_fmul>
   a3dd8:	4927      	ldr	r1, [pc, #156]	; (a3e78 <__kernel_sinf+0xd8>)
   a3dda:	f000 fdcd 	bl	a4978 <__aeabi_fsub>
   a3dde:	4629      	mov	r1, r5
   a3de0:	f000 fed4 	bl	a4b8c <__aeabi_fmul>
   a3de4:	4925      	ldr	r1, [pc, #148]	; (a3e7c <__kernel_sinf+0xdc>)
   a3de6:	f000 fdc9 	bl	a497c <__addsf3>
   a3dea:	4629      	mov	r1, r5
   a3dec:	f000 fece 	bl	a4b8c <__aeabi_fmul>
   a3df0:	4923      	ldr	r1, [pc, #140]	; (a3e80 <__kernel_sinf+0xe0>)
   a3df2:	f000 fdc1 	bl	a4978 <__aeabi_fsub>
   a3df6:	4629      	mov	r1, r5
   a3df8:	f000 fec8 	bl	a4b8c <__aeabi_fmul>
   a3dfc:	4921      	ldr	r1, [pc, #132]	; (a3e84 <__kernel_sinf+0xe4>)
   a3dfe:	f000 fdbd 	bl	a497c <__addsf3>
   a3e02:	4681      	mov	r9, r0
   a3e04:	f1b8 0f00 	cmp.w	r8, #0
   a3e08:	d022      	beq.n	a3e50 <__kernel_sinf+0xb0>
   a3e0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   a3e0e:	4638      	mov	r0, r7
   a3e10:	f000 febc 	bl	a4b8c <__aeabi_fmul>
   a3e14:	4649      	mov	r1, r9
   a3e16:	4680      	mov	r8, r0
   a3e18:	4630      	mov	r0, r6
   a3e1a:	f000 feb7 	bl	a4b8c <__aeabi_fmul>
   a3e1e:	4601      	mov	r1, r0
   a3e20:	4640      	mov	r0, r8
   a3e22:	f000 fda9 	bl	a4978 <__aeabi_fsub>
   a3e26:	4629      	mov	r1, r5
   a3e28:	f000 feb0 	bl	a4b8c <__aeabi_fmul>
   a3e2c:	4639      	mov	r1, r7
   a3e2e:	f000 fda3 	bl	a4978 <__aeabi_fsub>
   a3e32:	4915      	ldr	r1, [pc, #84]	; (a3e88 <__kernel_sinf+0xe8>)
   a3e34:	4605      	mov	r5, r0
   a3e36:	4630      	mov	r0, r6
   a3e38:	f000 fea8 	bl	a4b8c <__aeabi_fmul>
   a3e3c:	4601      	mov	r1, r0
   a3e3e:	4628      	mov	r0, r5
   a3e40:	f000 fd9c 	bl	a497c <__addsf3>
   a3e44:	4601      	mov	r1, r0
   a3e46:	4620      	mov	r0, r4
   a3e48:	f000 fd96 	bl	a4978 <__aeabi_fsub>
   a3e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a3e50:	4601      	mov	r1, r0
   a3e52:	4628      	mov	r0, r5
   a3e54:	f000 fe9a 	bl	a4b8c <__aeabi_fmul>
   a3e58:	490b      	ldr	r1, [pc, #44]	; (a3e88 <__kernel_sinf+0xe8>)
   a3e5a:	f000 fd8d 	bl	a4978 <__aeabi_fsub>
   a3e5e:	4631      	mov	r1, r6
   a3e60:	f000 fe94 	bl	a4b8c <__aeabi_fmul>
   a3e64:	4621      	mov	r1, r4
   a3e66:	f000 fd89 	bl	a497c <__addsf3>
   a3e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a3e6e:	4620      	mov	r0, r4
   a3e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a3e74:	2f2ec9d3 	.word	0x2f2ec9d3
   a3e78:	32d72f34 	.word	0x32d72f34
   a3e7c:	3638ef1b 	.word	0x3638ef1b
   a3e80:	39500d01 	.word	0x39500d01
   a3e84:	3c088889 	.word	0x3c088889
   a3e88:	3e2aaaab 	.word	0x3e2aaaab

000a3e8c <fabsf>:
   a3e8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   a3e90:	4770      	bx	lr
   a3e92:	bf00      	nop

000a3e94 <floorf>:
   a3e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a3e98:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
   a3e9c:	0dfc      	lsrs	r4, r7, #23
   a3e9e:	3c7f      	subs	r4, #127	; 0x7f
   a3ea0:	2c16      	cmp	r4, #22
   a3ea2:	4605      	mov	r5, r0
   a3ea4:	dc13      	bgt.n	a3ece <floorf+0x3a>
   a3ea6:	2c00      	cmp	r4, #0
   a3ea8:	4680      	mov	r8, r0
   a3eaa:	db1b      	blt.n	a3ee4 <floorf+0x50>
   a3eac:	4f19      	ldr	r7, [pc, #100]	; (a3f14 <floorf+0x80>)
   a3eae:	4127      	asrs	r7, r4
   a3eb0:	4238      	tst	r0, r7
   a3eb2:	d014      	beq.n	a3ede <floorf+0x4a>
   a3eb4:	4918      	ldr	r1, [pc, #96]	; (a3f18 <floorf+0x84>)
   a3eb6:	f000 fd61 	bl	a497c <__addsf3>
   a3eba:	2100      	movs	r1, #0
   a3ebc:	f001 f822 	bl	a4f04 <__aeabi_fcmpgt>
   a3ec0:	b168      	cbz	r0, a3ede <floorf+0x4a>
   a3ec2:	2d00      	cmp	r5, #0
   a3ec4:	db1b      	blt.n	a3efe <floorf+0x6a>
   a3ec6:	ea28 0007 	bic.w	r0, r8, r7
   a3eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a3ece:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   a3ed2:	d304      	bcc.n	a3ede <floorf+0x4a>
   a3ed4:	4601      	mov	r1, r0
   a3ed6:	f000 fd51 	bl	a497c <__addsf3>
   a3eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a3ede:	4628      	mov	r0, r5
   a3ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a3ee4:	490c      	ldr	r1, [pc, #48]	; (a3f18 <floorf+0x84>)
   a3ee6:	f000 fd49 	bl	a497c <__addsf3>
   a3eea:	2100      	movs	r1, #0
   a3eec:	f001 f80a 	bl	a4f04 <__aeabi_fcmpgt>
   a3ef0:	2800      	cmp	r0, #0
   a3ef2:	d0f4      	beq.n	a3ede <floorf+0x4a>
   a3ef4:	2d00      	cmp	r5, #0
   a3ef6:	db08      	blt.n	a3f0a <floorf+0x76>
   a3ef8:	2000      	movs	r0, #0
   a3efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a3efe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   a3f02:	fa43 f404 	asr.w	r4, r3, r4
   a3f06:	44a0      	add	r8, r4
   a3f08:	e7dd      	b.n	a3ec6 <floorf+0x32>
   a3f0a:	2f00      	cmp	r7, #0
   a3f0c:	d0e7      	beq.n	a3ede <floorf+0x4a>
   a3f0e:	4803      	ldr	r0, [pc, #12]	; (a3f1c <floorf+0x88>)
   a3f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a3f14:	007fffff 	.word	0x007fffff
   a3f18:	7149f2ca 	.word	0x7149f2ca
   a3f1c:	bf800000 	.word	0xbf800000

000a3f20 <scalbnf>:
   a3f20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   a3f24:	b538      	push	{r3, r4, r5, lr}
   a3f26:	4603      	mov	r3, r0
   a3f28:	d016      	beq.n	a3f58 <scalbnf+0x38>
   a3f2a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   a3f2e:	d20f      	bcs.n	a3f50 <scalbnf+0x30>
   a3f30:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   a3f34:	460d      	mov	r5, r1
   a3f36:	d310      	bcc.n	a3f5a <scalbnf+0x3a>
   a3f38:	4604      	mov	r4, r0
   a3f3a:	0dd0      	lsrs	r0, r2, #23
   a3f3c:	4428      	add	r0, r5
   a3f3e:	28fe      	cmp	r0, #254	; 0xfe
   a3f40:	dc2e      	bgt.n	a3fa0 <scalbnf+0x80>
   a3f42:	2800      	cmp	r0, #0
   a3f44:	dd1d      	ble.n	a3f82 <scalbnf+0x62>
   a3f46:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   a3f4a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
   a3f4e:	bd38      	pop	{r3, r4, r5, pc}
   a3f50:	4601      	mov	r1, r0
   a3f52:	f000 fd13 	bl	a497c <__addsf3>
   a3f56:	bd38      	pop	{r3, r4, r5, pc}
   a3f58:	bd38      	pop	{r3, r4, r5, pc}
   a3f5a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
   a3f5e:	f000 fe15 	bl	a4b8c <__aeabi_fmul>
   a3f62:	4a18      	ldr	r2, [pc, #96]	; (a3fc4 <scalbnf+0xa4>)
   a3f64:	4603      	mov	r3, r0
   a3f66:	4295      	cmp	r5, r2
   a3f68:	db07      	blt.n	a3f7a <scalbnf+0x5a>
   a3f6a:	4604      	mov	r4, r0
   a3f6c:	f3c0 50c7 	ubfx	r0, r0, #23, #8
   a3f70:	3819      	subs	r0, #25
   a3f72:	e7e3      	b.n	a3f3c <scalbnf+0x1c>
   a3f74:	4814      	ldr	r0, [pc, #80]	; (a3fc8 <scalbnf+0xa8>)
   a3f76:	f000 f82b 	bl	a3fd0 <copysignf>
   a3f7a:	4913      	ldr	r1, [pc, #76]	; (a3fc8 <scalbnf+0xa8>)
   a3f7c:	f000 fe06 	bl	a4b8c <__aeabi_fmul>
   a3f80:	bd38      	pop	{r3, r4, r5, pc}
   a3f82:	f110 0f16 	cmn.w	r0, #22
   a3f86:	da13      	bge.n	a3fb0 <scalbnf+0x90>
   a3f88:	f24c 3250 	movw	r2, #50000	; 0xc350
   a3f8c:	4295      	cmp	r5, r2
   a3f8e:	4619      	mov	r1, r3
   a3f90:	ddf0      	ble.n	a3f74 <scalbnf+0x54>
   a3f92:	480e      	ldr	r0, [pc, #56]	; (a3fcc <scalbnf+0xac>)
   a3f94:	f000 f81c 	bl	a3fd0 <copysignf>
   a3f98:	490c      	ldr	r1, [pc, #48]	; (a3fcc <scalbnf+0xac>)
   a3f9a:	f000 fdf7 	bl	a4b8c <__aeabi_fmul>
   a3f9e:	bd38      	pop	{r3, r4, r5, pc}
   a3fa0:	4619      	mov	r1, r3
   a3fa2:	480a      	ldr	r0, [pc, #40]	; (a3fcc <scalbnf+0xac>)
   a3fa4:	f000 f814 	bl	a3fd0 <copysignf>
   a3fa8:	4908      	ldr	r1, [pc, #32]	; (a3fcc <scalbnf+0xac>)
   a3faa:	f000 fdef 	bl	a4b8c <__aeabi_fmul>
   a3fae:	bd38      	pop	{r3, r4, r5, pc}
   a3fb0:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   a3fb4:	3019      	adds	r0, #25
   a3fb6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
   a3fba:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
   a3fbe:	f000 fde5 	bl	a4b8c <__aeabi_fmul>
   a3fc2:	bd38      	pop	{r3, r4, r5, pc}
   a3fc4:	ffff3cb0 	.word	0xffff3cb0
   a3fc8:	0da24260 	.word	0x0da24260
   a3fcc:	7149f2ca 	.word	0x7149f2ca

000a3fd0 <copysignf>:
   a3fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a3fd4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   a3fd8:	4308      	orrs	r0, r1
   a3fda:	4770      	bx	lr

000a3fdc <__aeabi_drsub>:
   a3fdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   a3fe0:	e002      	b.n	a3fe8 <__adddf3>
   a3fe2:	bf00      	nop

000a3fe4 <__aeabi_dsub>:
   a3fe4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000a3fe8 <__adddf3>:
   a3fe8:	b530      	push	{r4, r5, lr}
   a3fea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   a3fee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   a3ff2:	ea94 0f05 	teq	r4, r5
   a3ff6:	bf08      	it	eq
   a3ff8:	ea90 0f02 	teqeq	r0, r2
   a3ffc:	bf1f      	itttt	ne
   a3ffe:	ea54 0c00 	orrsne.w	ip, r4, r0
   a4002:	ea55 0c02 	orrsne.w	ip, r5, r2
   a4006:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   a400a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a400e:	f000 80e2 	beq.w	a41d6 <__adddf3+0x1ee>
   a4012:	ea4f 5454 	mov.w	r4, r4, lsr #21
   a4016:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   a401a:	bfb8      	it	lt
   a401c:	426d      	neglt	r5, r5
   a401e:	dd0c      	ble.n	a403a <__adddf3+0x52>
   a4020:	442c      	add	r4, r5
   a4022:	ea80 0202 	eor.w	r2, r0, r2
   a4026:	ea81 0303 	eor.w	r3, r1, r3
   a402a:	ea82 0000 	eor.w	r0, r2, r0
   a402e:	ea83 0101 	eor.w	r1, r3, r1
   a4032:	ea80 0202 	eor.w	r2, r0, r2
   a4036:	ea81 0303 	eor.w	r3, r1, r3
   a403a:	2d36      	cmp	r5, #54	; 0x36
   a403c:	bf88      	it	hi
   a403e:	bd30      	pophi	{r4, r5, pc}
   a4040:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a4044:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a4048:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   a404c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   a4050:	d002      	beq.n	a4058 <__adddf3+0x70>
   a4052:	4240      	negs	r0, r0
   a4054:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a4058:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   a405c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a4060:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   a4064:	d002      	beq.n	a406c <__adddf3+0x84>
   a4066:	4252      	negs	r2, r2
   a4068:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   a406c:	ea94 0f05 	teq	r4, r5
   a4070:	f000 80a7 	beq.w	a41c2 <__adddf3+0x1da>
   a4074:	f1a4 0401 	sub.w	r4, r4, #1
   a4078:	f1d5 0e20 	rsbs	lr, r5, #32
   a407c:	db0d      	blt.n	a409a <__adddf3+0xb2>
   a407e:	fa02 fc0e 	lsl.w	ip, r2, lr
   a4082:	fa22 f205 	lsr.w	r2, r2, r5
   a4086:	1880      	adds	r0, r0, r2
   a4088:	f141 0100 	adc.w	r1, r1, #0
   a408c:	fa03 f20e 	lsl.w	r2, r3, lr
   a4090:	1880      	adds	r0, r0, r2
   a4092:	fa43 f305 	asr.w	r3, r3, r5
   a4096:	4159      	adcs	r1, r3
   a4098:	e00e      	b.n	a40b8 <__adddf3+0xd0>
   a409a:	f1a5 0520 	sub.w	r5, r5, #32
   a409e:	f10e 0e20 	add.w	lr, lr, #32
   a40a2:	2a01      	cmp	r2, #1
   a40a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   a40a8:	bf28      	it	cs
   a40aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   a40ae:	fa43 f305 	asr.w	r3, r3, r5
   a40b2:	18c0      	adds	r0, r0, r3
   a40b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   a40b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a40bc:	d507      	bpl.n	a40ce <__adddf3+0xe6>
   a40be:	f04f 0e00 	mov.w	lr, #0
   a40c2:	f1dc 0c00 	rsbs	ip, ip, #0
   a40c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   a40ca:	eb6e 0101 	sbc.w	r1, lr, r1
   a40ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   a40d2:	d31b      	bcc.n	a410c <__adddf3+0x124>
   a40d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   a40d8:	d30c      	bcc.n	a40f4 <__adddf3+0x10c>
   a40da:	0849      	lsrs	r1, r1, #1
   a40dc:	ea5f 0030 	movs.w	r0, r0, rrx
   a40e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   a40e4:	f104 0401 	add.w	r4, r4, #1
   a40e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   a40ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   a40f0:	f080 809a 	bcs.w	a4228 <__adddf3+0x240>
   a40f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a40f8:	bf08      	it	eq
   a40fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a40fe:	f150 0000 	adcs.w	r0, r0, #0
   a4102:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a4106:	ea41 0105 	orr.w	r1, r1, r5
   a410a:	bd30      	pop	{r4, r5, pc}
   a410c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   a4110:	4140      	adcs	r0, r0
   a4112:	eb41 0101 	adc.w	r1, r1, r1
   a4116:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a411a:	f1a4 0401 	sub.w	r4, r4, #1
   a411e:	d1e9      	bne.n	a40f4 <__adddf3+0x10c>
   a4120:	f091 0f00 	teq	r1, #0
   a4124:	bf04      	itt	eq
   a4126:	4601      	moveq	r1, r0
   a4128:	2000      	moveq	r0, #0
   a412a:	fab1 f381 	clz	r3, r1
   a412e:	bf08      	it	eq
   a4130:	3320      	addeq	r3, #32
   a4132:	f1a3 030b 	sub.w	r3, r3, #11
   a4136:	f1b3 0220 	subs.w	r2, r3, #32
   a413a:	da0c      	bge.n	a4156 <__adddf3+0x16e>
   a413c:	320c      	adds	r2, #12
   a413e:	dd08      	ble.n	a4152 <__adddf3+0x16a>
   a4140:	f102 0c14 	add.w	ip, r2, #20
   a4144:	f1c2 020c 	rsb	r2, r2, #12
   a4148:	fa01 f00c 	lsl.w	r0, r1, ip
   a414c:	fa21 f102 	lsr.w	r1, r1, r2
   a4150:	e00c      	b.n	a416c <__adddf3+0x184>
   a4152:	f102 0214 	add.w	r2, r2, #20
   a4156:	bfd8      	it	le
   a4158:	f1c2 0c20 	rsble	ip, r2, #32
   a415c:	fa01 f102 	lsl.w	r1, r1, r2
   a4160:	fa20 fc0c 	lsr.w	ip, r0, ip
   a4164:	bfdc      	itt	le
   a4166:	ea41 010c 	orrle.w	r1, r1, ip
   a416a:	4090      	lslle	r0, r2
   a416c:	1ae4      	subs	r4, r4, r3
   a416e:	bfa2      	ittt	ge
   a4170:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   a4174:	4329      	orrge	r1, r5
   a4176:	bd30      	popge	{r4, r5, pc}
   a4178:	ea6f 0404 	mvn.w	r4, r4
   a417c:	3c1f      	subs	r4, #31
   a417e:	da1c      	bge.n	a41ba <__adddf3+0x1d2>
   a4180:	340c      	adds	r4, #12
   a4182:	dc0e      	bgt.n	a41a2 <__adddf3+0x1ba>
   a4184:	f104 0414 	add.w	r4, r4, #20
   a4188:	f1c4 0220 	rsb	r2, r4, #32
   a418c:	fa20 f004 	lsr.w	r0, r0, r4
   a4190:	fa01 f302 	lsl.w	r3, r1, r2
   a4194:	ea40 0003 	orr.w	r0, r0, r3
   a4198:	fa21 f304 	lsr.w	r3, r1, r4
   a419c:	ea45 0103 	orr.w	r1, r5, r3
   a41a0:	bd30      	pop	{r4, r5, pc}
   a41a2:	f1c4 040c 	rsb	r4, r4, #12
   a41a6:	f1c4 0220 	rsb	r2, r4, #32
   a41aa:	fa20 f002 	lsr.w	r0, r0, r2
   a41ae:	fa01 f304 	lsl.w	r3, r1, r4
   a41b2:	ea40 0003 	orr.w	r0, r0, r3
   a41b6:	4629      	mov	r1, r5
   a41b8:	bd30      	pop	{r4, r5, pc}
   a41ba:	fa21 f004 	lsr.w	r0, r1, r4
   a41be:	4629      	mov	r1, r5
   a41c0:	bd30      	pop	{r4, r5, pc}
   a41c2:	f094 0f00 	teq	r4, #0
   a41c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   a41ca:	bf06      	itte	eq
   a41cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   a41d0:	3401      	addeq	r4, #1
   a41d2:	3d01      	subne	r5, #1
   a41d4:	e74e      	b.n	a4074 <__adddf3+0x8c>
   a41d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a41da:	bf18      	it	ne
   a41dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a41e0:	d029      	beq.n	a4236 <__adddf3+0x24e>
   a41e2:	ea94 0f05 	teq	r4, r5
   a41e6:	bf08      	it	eq
   a41e8:	ea90 0f02 	teqeq	r0, r2
   a41ec:	d005      	beq.n	a41fa <__adddf3+0x212>
   a41ee:	ea54 0c00 	orrs.w	ip, r4, r0
   a41f2:	bf04      	itt	eq
   a41f4:	4619      	moveq	r1, r3
   a41f6:	4610      	moveq	r0, r2
   a41f8:	bd30      	pop	{r4, r5, pc}
   a41fa:	ea91 0f03 	teq	r1, r3
   a41fe:	bf1e      	ittt	ne
   a4200:	2100      	movne	r1, #0
   a4202:	2000      	movne	r0, #0
   a4204:	bd30      	popne	{r4, r5, pc}
   a4206:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   a420a:	d105      	bne.n	a4218 <__adddf3+0x230>
   a420c:	0040      	lsls	r0, r0, #1
   a420e:	4149      	adcs	r1, r1
   a4210:	bf28      	it	cs
   a4212:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   a4216:	bd30      	pop	{r4, r5, pc}
   a4218:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   a421c:	bf3c      	itt	cc
   a421e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   a4222:	bd30      	popcc	{r4, r5, pc}
   a4224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a4228:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   a422c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a4230:	f04f 0000 	mov.w	r0, #0
   a4234:	bd30      	pop	{r4, r5, pc}
   a4236:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a423a:	bf1a      	itte	ne
   a423c:	4619      	movne	r1, r3
   a423e:	4610      	movne	r0, r2
   a4240:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   a4244:	bf1c      	itt	ne
   a4246:	460b      	movne	r3, r1
   a4248:	4602      	movne	r2, r0
   a424a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a424e:	bf06      	itte	eq
   a4250:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   a4254:	ea91 0f03 	teqeq	r1, r3
   a4258:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   a425c:	bd30      	pop	{r4, r5, pc}
   a425e:	bf00      	nop

000a4260 <__aeabi_ui2d>:
   a4260:	f090 0f00 	teq	r0, #0
   a4264:	bf04      	itt	eq
   a4266:	2100      	moveq	r1, #0
   a4268:	4770      	bxeq	lr
   a426a:	b530      	push	{r4, r5, lr}
   a426c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a4270:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a4274:	f04f 0500 	mov.w	r5, #0
   a4278:	f04f 0100 	mov.w	r1, #0
   a427c:	e750      	b.n	a4120 <__adddf3+0x138>
   a427e:	bf00      	nop

000a4280 <__aeabi_i2d>:
   a4280:	f090 0f00 	teq	r0, #0
   a4284:	bf04      	itt	eq
   a4286:	2100      	moveq	r1, #0
   a4288:	4770      	bxeq	lr
   a428a:	b530      	push	{r4, r5, lr}
   a428c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a4290:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a4294:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   a4298:	bf48      	it	mi
   a429a:	4240      	negmi	r0, r0
   a429c:	f04f 0100 	mov.w	r1, #0
   a42a0:	e73e      	b.n	a4120 <__adddf3+0x138>
   a42a2:	bf00      	nop

000a42a4 <__aeabi_f2d>:
   a42a4:	0042      	lsls	r2, r0, #1
   a42a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   a42aa:	ea4f 0131 	mov.w	r1, r1, rrx
   a42ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   a42b2:	bf1f      	itttt	ne
   a42b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   a42b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a42bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   a42c0:	4770      	bxne	lr
   a42c2:	f092 0f00 	teq	r2, #0
   a42c6:	bf14      	ite	ne
   a42c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a42cc:	4770      	bxeq	lr
   a42ce:	b530      	push	{r4, r5, lr}
   a42d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   a42d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a42d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a42dc:	e720      	b.n	a4120 <__adddf3+0x138>
   a42de:	bf00      	nop

000a42e0 <__aeabi_ul2d>:
   a42e0:	ea50 0201 	orrs.w	r2, r0, r1
   a42e4:	bf08      	it	eq
   a42e6:	4770      	bxeq	lr
   a42e8:	b530      	push	{r4, r5, lr}
   a42ea:	f04f 0500 	mov.w	r5, #0
   a42ee:	e00a      	b.n	a4306 <__aeabi_l2d+0x16>

000a42f0 <__aeabi_l2d>:
   a42f0:	ea50 0201 	orrs.w	r2, r0, r1
   a42f4:	bf08      	it	eq
   a42f6:	4770      	bxeq	lr
   a42f8:	b530      	push	{r4, r5, lr}
   a42fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   a42fe:	d502      	bpl.n	a4306 <__aeabi_l2d+0x16>
   a4300:	4240      	negs	r0, r0
   a4302:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a4306:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a430a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a430e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   a4312:	f43f aedc 	beq.w	a40ce <__adddf3+0xe6>
   a4316:	f04f 0203 	mov.w	r2, #3
   a431a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a431e:	bf18      	it	ne
   a4320:	3203      	addne	r2, #3
   a4322:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a4326:	bf18      	it	ne
   a4328:	3203      	addne	r2, #3
   a432a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   a432e:	f1c2 0320 	rsb	r3, r2, #32
   a4332:	fa00 fc03 	lsl.w	ip, r0, r3
   a4336:	fa20 f002 	lsr.w	r0, r0, r2
   a433a:	fa01 fe03 	lsl.w	lr, r1, r3
   a433e:	ea40 000e 	orr.w	r0, r0, lr
   a4342:	fa21 f102 	lsr.w	r1, r1, r2
   a4346:	4414      	add	r4, r2
   a4348:	e6c1      	b.n	a40ce <__adddf3+0xe6>
   a434a:	bf00      	nop

000a434c <__aeabi_dmul>:
   a434c:	b570      	push	{r4, r5, r6, lr}
   a434e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a4352:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a4356:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a435a:	bf1d      	ittte	ne
   a435c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a4360:	ea94 0f0c 	teqne	r4, ip
   a4364:	ea95 0f0c 	teqne	r5, ip
   a4368:	f000 f8de 	bleq	a4528 <__aeabi_dmul+0x1dc>
   a436c:	442c      	add	r4, r5
   a436e:	ea81 0603 	eor.w	r6, r1, r3
   a4372:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   a4376:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   a437a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   a437e:	bf18      	it	ne
   a4380:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   a4384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a4388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   a438c:	d038      	beq.n	a4400 <__aeabi_dmul+0xb4>
   a438e:	fba0 ce02 	umull	ip, lr, r0, r2
   a4392:	f04f 0500 	mov.w	r5, #0
   a4396:	fbe1 e502 	umlal	lr, r5, r1, r2
   a439a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   a439e:	fbe0 e503 	umlal	lr, r5, r0, r3
   a43a2:	f04f 0600 	mov.w	r6, #0
   a43a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   a43aa:	f09c 0f00 	teq	ip, #0
   a43ae:	bf18      	it	ne
   a43b0:	f04e 0e01 	orrne.w	lr, lr, #1
   a43b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   a43b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   a43bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   a43c0:	d204      	bcs.n	a43cc <__aeabi_dmul+0x80>
   a43c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   a43c6:	416d      	adcs	r5, r5
   a43c8:	eb46 0606 	adc.w	r6, r6, r6
   a43cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   a43d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   a43d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   a43d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   a43dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   a43e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a43e4:	bf88      	it	hi
   a43e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a43ea:	d81e      	bhi.n	a442a <__aeabi_dmul+0xde>
   a43ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   a43f0:	bf08      	it	eq
   a43f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   a43f6:	f150 0000 	adcs.w	r0, r0, #0
   a43fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a43fe:	bd70      	pop	{r4, r5, r6, pc}
   a4400:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   a4404:	ea46 0101 	orr.w	r1, r6, r1
   a4408:	ea40 0002 	orr.w	r0, r0, r2
   a440c:	ea81 0103 	eor.w	r1, r1, r3
   a4410:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   a4414:	bfc2      	ittt	gt
   a4416:	ebd4 050c 	rsbsgt	r5, r4, ip
   a441a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a441e:	bd70      	popgt	{r4, r5, r6, pc}
   a4420:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a4424:	f04f 0e00 	mov.w	lr, #0
   a4428:	3c01      	subs	r4, #1
   a442a:	f300 80ab 	bgt.w	a4584 <__aeabi_dmul+0x238>
   a442e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   a4432:	bfde      	ittt	le
   a4434:	2000      	movle	r0, #0
   a4436:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   a443a:	bd70      	pople	{r4, r5, r6, pc}
   a443c:	f1c4 0400 	rsb	r4, r4, #0
   a4440:	3c20      	subs	r4, #32
   a4442:	da35      	bge.n	a44b0 <__aeabi_dmul+0x164>
   a4444:	340c      	adds	r4, #12
   a4446:	dc1b      	bgt.n	a4480 <__aeabi_dmul+0x134>
   a4448:	f104 0414 	add.w	r4, r4, #20
   a444c:	f1c4 0520 	rsb	r5, r4, #32
   a4450:	fa00 f305 	lsl.w	r3, r0, r5
   a4454:	fa20 f004 	lsr.w	r0, r0, r4
   a4458:	fa01 f205 	lsl.w	r2, r1, r5
   a445c:	ea40 0002 	orr.w	r0, r0, r2
   a4460:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   a4464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a4468:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a446c:	fa21 f604 	lsr.w	r6, r1, r4
   a4470:	eb42 0106 	adc.w	r1, r2, r6
   a4474:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a4478:	bf08      	it	eq
   a447a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a447e:	bd70      	pop	{r4, r5, r6, pc}
   a4480:	f1c4 040c 	rsb	r4, r4, #12
   a4484:	f1c4 0520 	rsb	r5, r4, #32
   a4488:	fa00 f304 	lsl.w	r3, r0, r4
   a448c:	fa20 f005 	lsr.w	r0, r0, r5
   a4490:	fa01 f204 	lsl.w	r2, r1, r4
   a4494:	ea40 0002 	orr.w	r0, r0, r2
   a4498:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a449c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a44a0:	f141 0100 	adc.w	r1, r1, #0
   a44a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a44a8:	bf08      	it	eq
   a44aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a44ae:	bd70      	pop	{r4, r5, r6, pc}
   a44b0:	f1c4 0520 	rsb	r5, r4, #32
   a44b4:	fa00 f205 	lsl.w	r2, r0, r5
   a44b8:	ea4e 0e02 	orr.w	lr, lr, r2
   a44bc:	fa20 f304 	lsr.w	r3, r0, r4
   a44c0:	fa01 f205 	lsl.w	r2, r1, r5
   a44c4:	ea43 0302 	orr.w	r3, r3, r2
   a44c8:	fa21 f004 	lsr.w	r0, r1, r4
   a44cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a44d0:	fa21 f204 	lsr.w	r2, r1, r4
   a44d4:	ea20 0002 	bic.w	r0, r0, r2
   a44d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   a44dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a44e0:	bf08      	it	eq
   a44e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a44e6:	bd70      	pop	{r4, r5, r6, pc}
   a44e8:	f094 0f00 	teq	r4, #0
   a44ec:	d10f      	bne.n	a450e <__aeabi_dmul+0x1c2>
   a44ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   a44f2:	0040      	lsls	r0, r0, #1
   a44f4:	eb41 0101 	adc.w	r1, r1, r1
   a44f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a44fc:	bf08      	it	eq
   a44fe:	3c01      	subeq	r4, #1
   a4500:	d0f7      	beq.n	a44f2 <__aeabi_dmul+0x1a6>
   a4502:	ea41 0106 	orr.w	r1, r1, r6
   a4506:	f095 0f00 	teq	r5, #0
   a450a:	bf18      	it	ne
   a450c:	4770      	bxne	lr
   a450e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   a4512:	0052      	lsls	r2, r2, #1
   a4514:	eb43 0303 	adc.w	r3, r3, r3
   a4518:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   a451c:	bf08      	it	eq
   a451e:	3d01      	subeq	r5, #1
   a4520:	d0f7      	beq.n	a4512 <__aeabi_dmul+0x1c6>
   a4522:	ea43 0306 	orr.w	r3, r3, r6
   a4526:	4770      	bx	lr
   a4528:	ea94 0f0c 	teq	r4, ip
   a452c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a4530:	bf18      	it	ne
   a4532:	ea95 0f0c 	teqne	r5, ip
   a4536:	d00c      	beq.n	a4552 <__aeabi_dmul+0x206>
   a4538:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a453c:	bf18      	it	ne
   a453e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a4542:	d1d1      	bne.n	a44e8 <__aeabi_dmul+0x19c>
   a4544:	ea81 0103 	eor.w	r1, r1, r3
   a4548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a454c:	f04f 0000 	mov.w	r0, #0
   a4550:	bd70      	pop	{r4, r5, r6, pc}
   a4552:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a4556:	bf06      	itte	eq
   a4558:	4610      	moveq	r0, r2
   a455a:	4619      	moveq	r1, r3
   a455c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a4560:	d019      	beq.n	a4596 <__aeabi_dmul+0x24a>
   a4562:	ea94 0f0c 	teq	r4, ip
   a4566:	d102      	bne.n	a456e <__aeabi_dmul+0x222>
   a4568:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   a456c:	d113      	bne.n	a4596 <__aeabi_dmul+0x24a>
   a456e:	ea95 0f0c 	teq	r5, ip
   a4572:	d105      	bne.n	a4580 <__aeabi_dmul+0x234>
   a4574:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   a4578:	bf1c      	itt	ne
   a457a:	4610      	movne	r0, r2
   a457c:	4619      	movne	r1, r3
   a457e:	d10a      	bne.n	a4596 <__aeabi_dmul+0x24a>
   a4580:	ea81 0103 	eor.w	r1, r1, r3
   a4584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a4588:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a458c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a4590:	f04f 0000 	mov.w	r0, #0
   a4594:	bd70      	pop	{r4, r5, r6, pc}
   a4596:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a459a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   a459e:	bd70      	pop	{r4, r5, r6, pc}

000a45a0 <__aeabi_ddiv>:
   a45a0:	b570      	push	{r4, r5, r6, lr}
   a45a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a45a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a45aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a45ae:	bf1d      	ittte	ne
   a45b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a45b4:	ea94 0f0c 	teqne	r4, ip
   a45b8:	ea95 0f0c 	teqne	r5, ip
   a45bc:	f000 f8a7 	bleq	a470e <__aeabi_ddiv+0x16e>
   a45c0:	eba4 0405 	sub.w	r4, r4, r5
   a45c4:	ea81 0e03 	eor.w	lr, r1, r3
   a45c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a45cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a45d0:	f000 8088 	beq.w	a46e4 <__aeabi_ddiv+0x144>
   a45d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a45d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   a45dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   a45e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   a45e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   a45e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   a45ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   a45f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   a45f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   a45f8:	429d      	cmp	r5, r3
   a45fa:	bf08      	it	eq
   a45fc:	4296      	cmpeq	r6, r2
   a45fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   a4602:	f504 7440 	add.w	r4, r4, #768	; 0x300
   a4606:	d202      	bcs.n	a460e <__aeabi_ddiv+0x6e>
   a4608:	085b      	lsrs	r3, r3, #1
   a460a:	ea4f 0232 	mov.w	r2, r2, rrx
   a460e:	1ab6      	subs	r6, r6, r2
   a4610:	eb65 0503 	sbc.w	r5, r5, r3
   a4614:	085b      	lsrs	r3, r3, #1
   a4616:	ea4f 0232 	mov.w	r2, r2, rrx
   a461a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   a461e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   a4622:	ebb6 0e02 	subs.w	lr, r6, r2
   a4626:	eb75 0e03 	sbcs.w	lr, r5, r3
   a462a:	bf22      	ittt	cs
   a462c:	1ab6      	subcs	r6, r6, r2
   a462e:	4675      	movcs	r5, lr
   a4630:	ea40 000c 	orrcs.w	r0, r0, ip
   a4634:	085b      	lsrs	r3, r3, #1
   a4636:	ea4f 0232 	mov.w	r2, r2, rrx
   a463a:	ebb6 0e02 	subs.w	lr, r6, r2
   a463e:	eb75 0e03 	sbcs.w	lr, r5, r3
   a4642:	bf22      	ittt	cs
   a4644:	1ab6      	subcs	r6, r6, r2
   a4646:	4675      	movcs	r5, lr
   a4648:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a464c:	085b      	lsrs	r3, r3, #1
   a464e:	ea4f 0232 	mov.w	r2, r2, rrx
   a4652:	ebb6 0e02 	subs.w	lr, r6, r2
   a4656:	eb75 0e03 	sbcs.w	lr, r5, r3
   a465a:	bf22      	ittt	cs
   a465c:	1ab6      	subcs	r6, r6, r2
   a465e:	4675      	movcs	r5, lr
   a4660:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a4664:	085b      	lsrs	r3, r3, #1
   a4666:	ea4f 0232 	mov.w	r2, r2, rrx
   a466a:	ebb6 0e02 	subs.w	lr, r6, r2
   a466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   a4672:	bf22      	ittt	cs
   a4674:	1ab6      	subcs	r6, r6, r2
   a4676:	4675      	movcs	r5, lr
   a4678:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a467c:	ea55 0e06 	orrs.w	lr, r5, r6
   a4680:	d018      	beq.n	a46b4 <__aeabi_ddiv+0x114>
   a4682:	ea4f 1505 	mov.w	r5, r5, lsl #4
   a4686:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   a468a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   a468e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   a4692:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   a4696:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   a469a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   a469e:	d1c0      	bne.n	a4622 <__aeabi_ddiv+0x82>
   a46a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a46a4:	d10b      	bne.n	a46be <__aeabi_ddiv+0x11e>
   a46a6:	ea41 0100 	orr.w	r1, r1, r0
   a46aa:	f04f 0000 	mov.w	r0, #0
   a46ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   a46b2:	e7b6      	b.n	a4622 <__aeabi_ddiv+0x82>
   a46b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a46b8:	bf04      	itt	eq
   a46ba:	4301      	orreq	r1, r0
   a46bc:	2000      	moveq	r0, #0
   a46be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a46c2:	bf88      	it	hi
   a46c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a46c8:	f63f aeaf 	bhi.w	a442a <__aeabi_dmul+0xde>
   a46cc:	ebb5 0c03 	subs.w	ip, r5, r3
   a46d0:	bf04      	itt	eq
   a46d2:	ebb6 0c02 	subseq.w	ip, r6, r2
   a46d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a46da:	f150 0000 	adcs.w	r0, r0, #0
   a46de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a46e2:	bd70      	pop	{r4, r5, r6, pc}
   a46e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   a46e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   a46ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   a46f0:	bfc2      	ittt	gt
   a46f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   a46f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a46fa:	bd70      	popgt	{r4, r5, r6, pc}
   a46fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a4700:	f04f 0e00 	mov.w	lr, #0
   a4704:	3c01      	subs	r4, #1
   a4706:	e690      	b.n	a442a <__aeabi_dmul+0xde>
   a4708:	ea45 0e06 	orr.w	lr, r5, r6
   a470c:	e68d      	b.n	a442a <__aeabi_dmul+0xde>
   a470e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a4712:	ea94 0f0c 	teq	r4, ip
   a4716:	bf08      	it	eq
   a4718:	ea95 0f0c 	teqeq	r5, ip
   a471c:	f43f af3b 	beq.w	a4596 <__aeabi_dmul+0x24a>
   a4720:	ea94 0f0c 	teq	r4, ip
   a4724:	d10a      	bne.n	a473c <__aeabi_ddiv+0x19c>
   a4726:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a472a:	f47f af34 	bne.w	a4596 <__aeabi_dmul+0x24a>
   a472e:	ea95 0f0c 	teq	r5, ip
   a4732:	f47f af25 	bne.w	a4580 <__aeabi_dmul+0x234>
   a4736:	4610      	mov	r0, r2
   a4738:	4619      	mov	r1, r3
   a473a:	e72c      	b.n	a4596 <__aeabi_dmul+0x24a>
   a473c:	ea95 0f0c 	teq	r5, ip
   a4740:	d106      	bne.n	a4750 <__aeabi_ddiv+0x1b0>
   a4742:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a4746:	f43f aefd 	beq.w	a4544 <__aeabi_dmul+0x1f8>
   a474a:	4610      	mov	r0, r2
   a474c:	4619      	mov	r1, r3
   a474e:	e722      	b.n	a4596 <__aeabi_dmul+0x24a>
   a4750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a4754:	bf18      	it	ne
   a4756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a475a:	f47f aec5 	bne.w	a44e8 <__aeabi_dmul+0x19c>
   a475e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   a4762:	f47f af0d 	bne.w	a4580 <__aeabi_dmul+0x234>
   a4766:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   a476a:	f47f aeeb 	bne.w	a4544 <__aeabi_dmul+0x1f8>
   a476e:	e712      	b.n	a4596 <__aeabi_dmul+0x24a>

000a4770 <__gedf2>:
   a4770:	f04f 3cff 	mov.w	ip, #4294967295
   a4774:	e006      	b.n	a4784 <__cmpdf2+0x4>
   a4776:	bf00      	nop

000a4778 <__ledf2>:
   a4778:	f04f 0c01 	mov.w	ip, #1
   a477c:	e002      	b.n	a4784 <__cmpdf2+0x4>
   a477e:	bf00      	nop

000a4780 <__cmpdf2>:
   a4780:	f04f 0c01 	mov.w	ip, #1
   a4784:	f84d cd04 	str.w	ip, [sp, #-4]!
   a4788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a478c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a4790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a4794:	bf18      	it	ne
   a4796:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   a479a:	d01b      	beq.n	a47d4 <__cmpdf2+0x54>
   a479c:	b001      	add	sp, #4
   a479e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   a47a2:	bf0c      	ite	eq
   a47a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   a47a8:	ea91 0f03 	teqne	r1, r3
   a47ac:	bf02      	ittt	eq
   a47ae:	ea90 0f02 	teqeq	r0, r2
   a47b2:	2000      	moveq	r0, #0
   a47b4:	4770      	bxeq	lr
   a47b6:	f110 0f00 	cmn.w	r0, #0
   a47ba:	ea91 0f03 	teq	r1, r3
   a47be:	bf58      	it	pl
   a47c0:	4299      	cmppl	r1, r3
   a47c2:	bf08      	it	eq
   a47c4:	4290      	cmpeq	r0, r2
   a47c6:	bf2c      	ite	cs
   a47c8:	17d8      	asrcs	r0, r3, #31
   a47ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   a47ce:	f040 0001 	orr.w	r0, r0, #1
   a47d2:	4770      	bx	lr
   a47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a47dc:	d102      	bne.n	a47e4 <__cmpdf2+0x64>
   a47de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   a47e2:	d107      	bne.n	a47f4 <__cmpdf2+0x74>
   a47e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a47e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a47ec:	d1d6      	bne.n	a479c <__cmpdf2+0x1c>
   a47ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   a47f2:	d0d3      	beq.n	a479c <__cmpdf2+0x1c>
   a47f4:	f85d 0b04 	ldr.w	r0, [sp], #4
   a47f8:	4770      	bx	lr
   a47fa:	bf00      	nop

000a47fc <__aeabi_cdrcmple>:
   a47fc:	4684      	mov	ip, r0
   a47fe:	4610      	mov	r0, r2
   a4800:	4662      	mov	r2, ip
   a4802:	468c      	mov	ip, r1
   a4804:	4619      	mov	r1, r3
   a4806:	4663      	mov	r3, ip
   a4808:	e000      	b.n	a480c <__aeabi_cdcmpeq>
   a480a:	bf00      	nop

000a480c <__aeabi_cdcmpeq>:
   a480c:	b501      	push	{r0, lr}
   a480e:	f7ff ffb7 	bl	a4780 <__cmpdf2>
   a4812:	2800      	cmp	r0, #0
   a4814:	bf48      	it	mi
   a4816:	f110 0f00 	cmnmi.w	r0, #0
   a481a:	bd01      	pop	{r0, pc}

000a481c <__aeabi_dcmpeq>:
   a481c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4820:	f7ff fff4 	bl	a480c <__aeabi_cdcmpeq>
   a4824:	bf0c      	ite	eq
   a4826:	2001      	moveq	r0, #1
   a4828:	2000      	movne	r0, #0
   a482a:	f85d fb08 	ldr.w	pc, [sp], #8
   a482e:	bf00      	nop

000a4830 <__aeabi_dcmplt>:
   a4830:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4834:	f7ff ffea 	bl	a480c <__aeabi_cdcmpeq>
   a4838:	bf34      	ite	cc
   a483a:	2001      	movcc	r0, #1
   a483c:	2000      	movcs	r0, #0
   a483e:	f85d fb08 	ldr.w	pc, [sp], #8
   a4842:	bf00      	nop

000a4844 <__aeabi_dcmple>:
   a4844:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4848:	f7ff ffe0 	bl	a480c <__aeabi_cdcmpeq>
   a484c:	bf94      	ite	ls
   a484e:	2001      	movls	r0, #1
   a4850:	2000      	movhi	r0, #0
   a4852:	f85d fb08 	ldr.w	pc, [sp], #8
   a4856:	bf00      	nop

000a4858 <__aeabi_dcmpge>:
   a4858:	f84d ed08 	str.w	lr, [sp, #-8]!
   a485c:	f7ff ffce 	bl	a47fc <__aeabi_cdrcmple>
   a4860:	bf94      	ite	ls
   a4862:	2001      	movls	r0, #1
   a4864:	2000      	movhi	r0, #0
   a4866:	f85d fb08 	ldr.w	pc, [sp], #8
   a486a:	bf00      	nop

000a486c <__aeabi_dcmpgt>:
   a486c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4870:	f7ff ffc4 	bl	a47fc <__aeabi_cdrcmple>
   a4874:	bf34      	ite	cc
   a4876:	2001      	movcc	r0, #1
   a4878:	2000      	movcs	r0, #0
   a487a:	f85d fb08 	ldr.w	pc, [sp], #8
   a487e:	bf00      	nop

000a4880 <__aeabi_d2iz>:
   a4880:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a4884:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a4888:	d215      	bcs.n	a48b6 <__aeabi_d2iz+0x36>
   a488a:	d511      	bpl.n	a48b0 <__aeabi_d2iz+0x30>
   a488c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a4890:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a4894:	d912      	bls.n	a48bc <__aeabi_d2iz+0x3c>
   a4896:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a489a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a489e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a48a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a48a6:	fa23 f002 	lsr.w	r0, r3, r2
   a48aa:	bf18      	it	ne
   a48ac:	4240      	negne	r0, r0
   a48ae:	4770      	bx	lr
   a48b0:	f04f 0000 	mov.w	r0, #0
   a48b4:	4770      	bx	lr
   a48b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a48ba:	d105      	bne.n	a48c8 <__aeabi_d2iz+0x48>
   a48bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   a48c0:	bf08      	it	eq
   a48c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a48c6:	4770      	bx	lr
   a48c8:	f04f 0000 	mov.w	r0, #0
   a48cc:	4770      	bx	lr
   a48ce:	bf00      	nop

000a48d0 <__aeabi_d2f>:
   a48d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a48d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   a48d8:	bf24      	itt	cs
   a48da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   a48de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   a48e2:	d90d      	bls.n	a4900 <__aeabi_d2f+0x30>
   a48e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a48e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   a48ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   a48f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   a48f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   a48f8:	bf08      	it	eq
   a48fa:	f020 0001 	biceq.w	r0, r0, #1
   a48fe:	4770      	bx	lr
   a4900:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   a4904:	d121      	bne.n	a494a <__aeabi_d2f+0x7a>
   a4906:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   a490a:	bfbc      	itt	lt
   a490c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   a4910:	4770      	bxlt	lr
   a4912:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a4916:	ea4f 5252 	mov.w	r2, r2, lsr #21
   a491a:	f1c2 0218 	rsb	r2, r2, #24
   a491e:	f1c2 0c20 	rsb	ip, r2, #32
   a4922:	fa10 f30c 	lsls.w	r3, r0, ip
   a4926:	fa20 f002 	lsr.w	r0, r0, r2
   a492a:	bf18      	it	ne
   a492c:	f040 0001 	orrne.w	r0, r0, #1
   a4930:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a4934:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   a4938:	fa03 fc0c 	lsl.w	ip, r3, ip
   a493c:	ea40 000c 	orr.w	r0, r0, ip
   a4940:	fa23 f302 	lsr.w	r3, r3, r2
   a4944:	ea4f 0343 	mov.w	r3, r3, lsl #1
   a4948:	e7cc      	b.n	a48e4 <__aeabi_d2f+0x14>
   a494a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   a494e:	d107      	bne.n	a4960 <__aeabi_d2f+0x90>
   a4950:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   a4954:	bf1e      	ittt	ne
   a4956:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   a495a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   a495e:	4770      	bxne	lr
   a4960:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   a4964:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a4968:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a496c:	4770      	bx	lr
   a496e:	bf00      	nop

000a4970 <__aeabi_frsub>:
   a4970:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   a4974:	e002      	b.n	a497c <__addsf3>
   a4976:	bf00      	nop

000a4978 <__aeabi_fsub>:
   a4978:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000a497c <__addsf3>:
   a497c:	0042      	lsls	r2, r0, #1
   a497e:	bf1f      	itttt	ne
   a4980:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   a4984:	ea92 0f03 	teqne	r2, r3
   a4988:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   a498c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a4990:	d06a      	beq.n	a4a68 <__addsf3+0xec>
   a4992:	ea4f 6212 	mov.w	r2, r2, lsr #24
   a4996:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   a499a:	bfc1      	itttt	gt
   a499c:	18d2      	addgt	r2, r2, r3
   a499e:	4041      	eorgt	r1, r0
   a49a0:	4048      	eorgt	r0, r1
   a49a2:	4041      	eorgt	r1, r0
   a49a4:	bfb8      	it	lt
   a49a6:	425b      	neglt	r3, r3
   a49a8:	2b19      	cmp	r3, #25
   a49aa:	bf88      	it	hi
   a49ac:	4770      	bxhi	lr
   a49ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a49b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a49b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   a49ba:	bf18      	it	ne
   a49bc:	4240      	negne	r0, r0
   a49be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a49c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   a49c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   a49ca:	bf18      	it	ne
   a49cc:	4249      	negne	r1, r1
   a49ce:	ea92 0f03 	teq	r2, r3
   a49d2:	d03f      	beq.n	a4a54 <__addsf3+0xd8>
   a49d4:	f1a2 0201 	sub.w	r2, r2, #1
   a49d8:	fa41 fc03 	asr.w	ip, r1, r3
   a49dc:	eb10 000c 	adds.w	r0, r0, ip
   a49e0:	f1c3 0320 	rsb	r3, r3, #32
   a49e4:	fa01 f103 	lsl.w	r1, r1, r3
   a49e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a49ec:	d502      	bpl.n	a49f4 <__addsf3+0x78>
   a49ee:	4249      	negs	r1, r1
   a49f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   a49f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   a49f8:	d313      	bcc.n	a4a22 <__addsf3+0xa6>
   a49fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   a49fe:	d306      	bcc.n	a4a0e <__addsf3+0x92>
   a4a00:	0840      	lsrs	r0, r0, #1
   a4a02:	ea4f 0131 	mov.w	r1, r1, rrx
   a4a06:	f102 0201 	add.w	r2, r2, #1
   a4a0a:	2afe      	cmp	r2, #254	; 0xfe
   a4a0c:	d251      	bcs.n	a4ab2 <__addsf3+0x136>
   a4a0e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   a4a12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a4a16:	bf08      	it	eq
   a4a18:	f020 0001 	biceq.w	r0, r0, #1
   a4a1c:	ea40 0003 	orr.w	r0, r0, r3
   a4a20:	4770      	bx	lr
   a4a22:	0049      	lsls	r1, r1, #1
   a4a24:	eb40 0000 	adc.w	r0, r0, r0
   a4a28:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   a4a2c:	f1a2 0201 	sub.w	r2, r2, #1
   a4a30:	d1ed      	bne.n	a4a0e <__addsf3+0x92>
   a4a32:	fab0 fc80 	clz	ip, r0
   a4a36:	f1ac 0c08 	sub.w	ip, ip, #8
   a4a3a:	ebb2 020c 	subs.w	r2, r2, ip
   a4a3e:	fa00 f00c 	lsl.w	r0, r0, ip
   a4a42:	bfaa      	itet	ge
   a4a44:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   a4a48:	4252      	neglt	r2, r2
   a4a4a:	4318      	orrge	r0, r3
   a4a4c:	bfbc      	itt	lt
   a4a4e:	40d0      	lsrlt	r0, r2
   a4a50:	4318      	orrlt	r0, r3
   a4a52:	4770      	bx	lr
   a4a54:	f092 0f00 	teq	r2, #0
   a4a58:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   a4a5c:	bf06      	itte	eq
   a4a5e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   a4a62:	3201      	addeq	r2, #1
   a4a64:	3b01      	subne	r3, #1
   a4a66:	e7b5      	b.n	a49d4 <__addsf3+0x58>
   a4a68:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a4a6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a4a70:	bf18      	it	ne
   a4a72:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a4a76:	d021      	beq.n	a4abc <__addsf3+0x140>
   a4a78:	ea92 0f03 	teq	r2, r3
   a4a7c:	d004      	beq.n	a4a88 <__addsf3+0x10c>
   a4a7e:	f092 0f00 	teq	r2, #0
   a4a82:	bf08      	it	eq
   a4a84:	4608      	moveq	r0, r1
   a4a86:	4770      	bx	lr
   a4a88:	ea90 0f01 	teq	r0, r1
   a4a8c:	bf1c      	itt	ne
   a4a8e:	2000      	movne	r0, #0
   a4a90:	4770      	bxne	lr
   a4a92:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   a4a96:	d104      	bne.n	a4aa2 <__addsf3+0x126>
   a4a98:	0040      	lsls	r0, r0, #1
   a4a9a:	bf28      	it	cs
   a4a9c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   a4aa0:	4770      	bx	lr
   a4aa2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   a4aa6:	bf3c      	itt	cc
   a4aa8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   a4aac:	4770      	bxcc	lr
   a4aae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a4ab2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   a4ab6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a4aba:	4770      	bx	lr
   a4abc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   a4ac0:	bf16      	itet	ne
   a4ac2:	4608      	movne	r0, r1
   a4ac4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   a4ac8:	4601      	movne	r1, r0
   a4aca:	0242      	lsls	r2, r0, #9
   a4acc:	bf06      	itte	eq
   a4ace:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   a4ad2:	ea90 0f01 	teqeq	r0, r1
   a4ad6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   a4ada:	4770      	bx	lr

000a4adc <__aeabi_ui2f>:
   a4adc:	f04f 0300 	mov.w	r3, #0
   a4ae0:	e004      	b.n	a4aec <__aeabi_i2f+0x8>
   a4ae2:	bf00      	nop

000a4ae4 <__aeabi_i2f>:
   a4ae4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   a4ae8:	bf48      	it	mi
   a4aea:	4240      	negmi	r0, r0
   a4aec:	ea5f 0c00 	movs.w	ip, r0
   a4af0:	bf08      	it	eq
   a4af2:	4770      	bxeq	lr
   a4af4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   a4af8:	4601      	mov	r1, r0
   a4afa:	f04f 0000 	mov.w	r0, #0
   a4afe:	e01c      	b.n	a4b3a <__aeabi_l2f+0x2a>

000a4b00 <__aeabi_ul2f>:
   a4b00:	ea50 0201 	orrs.w	r2, r0, r1
   a4b04:	bf08      	it	eq
   a4b06:	4770      	bxeq	lr
   a4b08:	f04f 0300 	mov.w	r3, #0
   a4b0c:	e00a      	b.n	a4b24 <__aeabi_l2f+0x14>
   a4b0e:	bf00      	nop

000a4b10 <__aeabi_l2f>:
   a4b10:	ea50 0201 	orrs.w	r2, r0, r1
   a4b14:	bf08      	it	eq
   a4b16:	4770      	bxeq	lr
   a4b18:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   a4b1c:	d502      	bpl.n	a4b24 <__aeabi_l2f+0x14>
   a4b1e:	4240      	negs	r0, r0
   a4b20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a4b24:	ea5f 0c01 	movs.w	ip, r1
   a4b28:	bf02      	ittt	eq
   a4b2a:	4684      	moveq	ip, r0
   a4b2c:	4601      	moveq	r1, r0
   a4b2e:	2000      	moveq	r0, #0
   a4b30:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   a4b34:	bf08      	it	eq
   a4b36:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   a4b3a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   a4b3e:	fabc f28c 	clz	r2, ip
   a4b42:	3a08      	subs	r2, #8
   a4b44:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   a4b48:	db10      	blt.n	a4b6c <__aeabi_l2f+0x5c>
   a4b4a:	fa01 fc02 	lsl.w	ip, r1, r2
   a4b4e:	4463      	add	r3, ip
   a4b50:	fa00 fc02 	lsl.w	ip, r0, r2
   a4b54:	f1c2 0220 	rsb	r2, r2, #32
   a4b58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a4b5c:	fa20 f202 	lsr.w	r2, r0, r2
   a4b60:	eb43 0002 	adc.w	r0, r3, r2
   a4b64:	bf08      	it	eq
   a4b66:	f020 0001 	biceq.w	r0, r0, #1
   a4b6a:	4770      	bx	lr
   a4b6c:	f102 0220 	add.w	r2, r2, #32
   a4b70:	fa01 fc02 	lsl.w	ip, r1, r2
   a4b74:	f1c2 0220 	rsb	r2, r2, #32
   a4b78:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   a4b7c:	fa21 f202 	lsr.w	r2, r1, r2
   a4b80:	eb43 0002 	adc.w	r0, r3, r2
   a4b84:	bf08      	it	eq
   a4b86:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a4b8a:	4770      	bx	lr

000a4b8c <__aeabi_fmul>:
   a4b8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a4b90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a4b94:	bf1e      	ittt	ne
   a4b96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a4b9a:	ea92 0f0c 	teqne	r2, ip
   a4b9e:	ea93 0f0c 	teqne	r3, ip
   a4ba2:	d06f      	beq.n	a4c84 <__aeabi_fmul+0xf8>
   a4ba4:	441a      	add	r2, r3
   a4ba6:	ea80 0c01 	eor.w	ip, r0, r1
   a4baa:	0240      	lsls	r0, r0, #9
   a4bac:	bf18      	it	ne
   a4bae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   a4bb2:	d01e      	beq.n	a4bf2 <__aeabi_fmul+0x66>
   a4bb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   a4bb8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   a4bbc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   a4bc0:	fba0 3101 	umull	r3, r1, r0, r1
   a4bc4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a4bc8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   a4bcc:	bf3e      	ittt	cc
   a4bce:	0049      	lslcc	r1, r1, #1
   a4bd0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   a4bd4:	005b      	lslcc	r3, r3, #1
   a4bd6:	ea40 0001 	orr.w	r0, r0, r1
   a4bda:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   a4bde:	2afd      	cmp	r2, #253	; 0xfd
   a4be0:	d81d      	bhi.n	a4c1e <__aeabi_fmul+0x92>
   a4be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   a4be6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a4bea:	bf08      	it	eq
   a4bec:	f020 0001 	biceq.w	r0, r0, #1
   a4bf0:	4770      	bx	lr
   a4bf2:	f090 0f00 	teq	r0, #0
   a4bf6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a4bfa:	bf08      	it	eq
   a4bfc:	0249      	lsleq	r1, r1, #9
   a4bfe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a4c02:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   a4c06:	3a7f      	subs	r2, #127	; 0x7f
   a4c08:	bfc2      	ittt	gt
   a4c0a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a4c0e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a4c12:	4770      	bxgt	lr
   a4c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a4c18:	f04f 0300 	mov.w	r3, #0
   a4c1c:	3a01      	subs	r2, #1
   a4c1e:	dc5d      	bgt.n	a4cdc <__aeabi_fmul+0x150>
   a4c20:	f112 0f19 	cmn.w	r2, #25
   a4c24:	bfdc      	itt	le
   a4c26:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   a4c2a:	4770      	bxle	lr
   a4c2c:	f1c2 0200 	rsb	r2, r2, #0
   a4c30:	0041      	lsls	r1, r0, #1
   a4c32:	fa21 f102 	lsr.w	r1, r1, r2
   a4c36:	f1c2 0220 	rsb	r2, r2, #32
   a4c3a:	fa00 fc02 	lsl.w	ip, r0, r2
   a4c3e:	ea5f 0031 	movs.w	r0, r1, rrx
   a4c42:	f140 0000 	adc.w	r0, r0, #0
   a4c46:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   a4c4a:	bf08      	it	eq
   a4c4c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a4c50:	4770      	bx	lr
   a4c52:	f092 0f00 	teq	r2, #0
   a4c56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a4c5a:	bf02      	ittt	eq
   a4c5c:	0040      	lsleq	r0, r0, #1
   a4c5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a4c62:	3a01      	subeq	r2, #1
   a4c64:	d0f9      	beq.n	a4c5a <__aeabi_fmul+0xce>
   a4c66:	ea40 000c 	orr.w	r0, r0, ip
   a4c6a:	f093 0f00 	teq	r3, #0
   a4c6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a4c72:	bf02      	ittt	eq
   a4c74:	0049      	lsleq	r1, r1, #1
   a4c76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a4c7a:	3b01      	subeq	r3, #1
   a4c7c:	d0f9      	beq.n	a4c72 <__aeabi_fmul+0xe6>
   a4c7e:	ea41 010c 	orr.w	r1, r1, ip
   a4c82:	e78f      	b.n	a4ba4 <__aeabi_fmul+0x18>
   a4c84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a4c88:	ea92 0f0c 	teq	r2, ip
   a4c8c:	bf18      	it	ne
   a4c8e:	ea93 0f0c 	teqne	r3, ip
   a4c92:	d00a      	beq.n	a4caa <__aeabi_fmul+0x11e>
   a4c94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a4c98:	bf18      	it	ne
   a4c9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a4c9e:	d1d8      	bne.n	a4c52 <__aeabi_fmul+0xc6>
   a4ca0:	ea80 0001 	eor.w	r0, r0, r1
   a4ca4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a4ca8:	4770      	bx	lr
   a4caa:	f090 0f00 	teq	r0, #0
   a4cae:	bf17      	itett	ne
   a4cb0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   a4cb4:	4608      	moveq	r0, r1
   a4cb6:	f091 0f00 	teqne	r1, #0
   a4cba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   a4cbe:	d014      	beq.n	a4cea <__aeabi_fmul+0x15e>
   a4cc0:	ea92 0f0c 	teq	r2, ip
   a4cc4:	d101      	bne.n	a4cca <__aeabi_fmul+0x13e>
   a4cc6:	0242      	lsls	r2, r0, #9
   a4cc8:	d10f      	bne.n	a4cea <__aeabi_fmul+0x15e>
   a4cca:	ea93 0f0c 	teq	r3, ip
   a4cce:	d103      	bne.n	a4cd8 <__aeabi_fmul+0x14c>
   a4cd0:	024b      	lsls	r3, r1, #9
   a4cd2:	bf18      	it	ne
   a4cd4:	4608      	movne	r0, r1
   a4cd6:	d108      	bne.n	a4cea <__aeabi_fmul+0x15e>
   a4cd8:	ea80 0001 	eor.w	r0, r0, r1
   a4cdc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a4ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a4ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a4ce8:	4770      	bx	lr
   a4cea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a4cee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   a4cf2:	4770      	bx	lr

000a4cf4 <__aeabi_fdiv>:
   a4cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a4cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a4cfc:	bf1e      	ittt	ne
   a4cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a4d02:	ea92 0f0c 	teqne	r2, ip
   a4d06:	ea93 0f0c 	teqne	r3, ip
   a4d0a:	d069      	beq.n	a4de0 <__aeabi_fdiv+0xec>
   a4d0c:	eba2 0203 	sub.w	r2, r2, r3
   a4d10:	ea80 0c01 	eor.w	ip, r0, r1
   a4d14:	0249      	lsls	r1, r1, #9
   a4d16:	ea4f 2040 	mov.w	r0, r0, lsl #9
   a4d1a:	d037      	beq.n	a4d8c <__aeabi_fdiv+0x98>
   a4d1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   a4d20:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   a4d24:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   a4d28:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a4d2c:	428b      	cmp	r3, r1
   a4d2e:	bf38      	it	cc
   a4d30:	005b      	lslcc	r3, r3, #1
   a4d32:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   a4d36:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   a4d3a:	428b      	cmp	r3, r1
   a4d3c:	bf24      	itt	cs
   a4d3e:	1a5b      	subcs	r3, r3, r1
   a4d40:	ea40 000c 	orrcs.w	r0, r0, ip
   a4d44:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   a4d48:	bf24      	itt	cs
   a4d4a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   a4d4e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a4d52:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   a4d56:	bf24      	itt	cs
   a4d58:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   a4d5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a4d60:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   a4d64:	bf24      	itt	cs
   a4d66:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   a4d6a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a4d6e:	011b      	lsls	r3, r3, #4
   a4d70:	bf18      	it	ne
   a4d72:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   a4d76:	d1e0      	bne.n	a4d3a <__aeabi_fdiv+0x46>
   a4d78:	2afd      	cmp	r2, #253	; 0xfd
   a4d7a:	f63f af50 	bhi.w	a4c1e <__aeabi_fmul+0x92>
   a4d7e:	428b      	cmp	r3, r1
   a4d80:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a4d84:	bf08      	it	eq
   a4d86:	f020 0001 	biceq.w	r0, r0, #1
   a4d8a:	4770      	bx	lr
   a4d8c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a4d90:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a4d94:	327f      	adds	r2, #127	; 0x7f
   a4d96:	bfc2      	ittt	gt
   a4d98:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a4d9c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a4da0:	4770      	bxgt	lr
   a4da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a4da6:	f04f 0300 	mov.w	r3, #0
   a4daa:	3a01      	subs	r2, #1
   a4dac:	e737      	b.n	a4c1e <__aeabi_fmul+0x92>
   a4dae:	f092 0f00 	teq	r2, #0
   a4db2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a4db6:	bf02      	ittt	eq
   a4db8:	0040      	lsleq	r0, r0, #1
   a4dba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a4dbe:	3a01      	subeq	r2, #1
   a4dc0:	d0f9      	beq.n	a4db6 <__aeabi_fdiv+0xc2>
   a4dc2:	ea40 000c 	orr.w	r0, r0, ip
   a4dc6:	f093 0f00 	teq	r3, #0
   a4dca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a4dce:	bf02      	ittt	eq
   a4dd0:	0049      	lsleq	r1, r1, #1
   a4dd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a4dd6:	3b01      	subeq	r3, #1
   a4dd8:	d0f9      	beq.n	a4dce <__aeabi_fdiv+0xda>
   a4dda:	ea41 010c 	orr.w	r1, r1, ip
   a4dde:	e795      	b.n	a4d0c <__aeabi_fdiv+0x18>
   a4de0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a4de4:	ea92 0f0c 	teq	r2, ip
   a4de8:	d108      	bne.n	a4dfc <__aeabi_fdiv+0x108>
   a4dea:	0242      	lsls	r2, r0, #9
   a4dec:	f47f af7d 	bne.w	a4cea <__aeabi_fmul+0x15e>
   a4df0:	ea93 0f0c 	teq	r3, ip
   a4df4:	f47f af70 	bne.w	a4cd8 <__aeabi_fmul+0x14c>
   a4df8:	4608      	mov	r0, r1
   a4dfa:	e776      	b.n	a4cea <__aeabi_fmul+0x15e>
   a4dfc:	ea93 0f0c 	teq	r3, ip
   a4e00:	d104      	bne.n	a4e0c <__aeabi_fdiv+0x118>
   a4e02:	024b      	lsls	r3, r1, #9
   a4e04:	f43f af4c 	beq.w	a4ca0 <__aeabi_fmul+0x114>
   a4e08:	4608      	mov	r0, r1
   a4e0a:	e76e      	b.n	a4cea <__aeabi_fmul+0x15e>
   a4e0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a4e10:	bf18      	it	ne
   a4e12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a4e16:	d1ca      	bne.n	a4dae <__aeabi_fdiv+0xba>
   a4e18:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   a4e1c:	f47f af5c 	bne.w	a4cd8 <__aeabi_fmul+0x14c>
   a4e20:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   a4e24:	f47f af3c 	bne.w	a4ca0 <__aeabi_fmul+0x114>
   a4e28:	e75f      	b.n	a4cea <__aeabi_fmul+0x15e>
   a4e2a:	bf00      	nop

000a4e2c <__gesf2>:
   a4e2c:	f04f 3cff 	mov.w	ip, #4294967295
   a4e30:	e006      	b.n	a4e40 <__cmpsf2+0x4>
   a4e32:	bf00      	nop

000a4e34 <__lesf2>:
   a4e34:	f04f 0c01 	mov.w	ip, #1
   a4e38:	e002      	b.n	a4e40 <__cmpsf2+0x4>
   a4e3a:	bf00      	nop

000a4e3c <__cmpsf2>:
   a4e3c:	f04f 0c01 	mov.w	ip, #1
   a4e40:	f84d cd04 	str.w	ip, [sp, #-4]!
   a4e44:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a4e48:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a4e4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a4e50:	bf18      	it	ne
   a4e52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a4e56:	d011      	beq.n	a4e7c <__cmpsf2+0x40>
   a4e58:	b001      	add	sp, #4
   a4e5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   a4e5e:	bf18      	it	ne
   a4e60:	ea90 0f01 	teqne	r0, r1
   a4e64:	bf58      	it	pl
   a4e66:	ebb2 0003 	subspl.w	r0, r2, r3
   a4e6a:	bf88      	it	hi
   a4e6c:	17c8      	asrhi	r0, r1, #31
   a4e6e:	bf38      	it	cc
   a4e70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   a4e74:	bf18      	it	ne
   a4e76:	f040 0001 	orrne.w	r0, r0, #1
   a4e7a:	4770      	bx	lr
   a4e7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a4e80:	d102      	bne.n	a4e88 <__cmpsf2+0x4c>
   a4e82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   a4e86:	d105      	bne.n	a4e94 <__cmpsf2+0x58>
   a4e88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   a4e8c:	d1e4      	bne.n	a4e58 <__cmpsf2+0x1c>
   a4e8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   a4e92:	d0e1      	beq.n	a4e58 <__cmpsf2+0x1c>
   a4e94:	f85d 0b04 	ldr.w	r0, [sp], #4
   a4e98:	4770      	bx	lr
   a4e9a:	bf00      	nop

000a4e9c <__aeabi_cfrcmple>:
   a4e9c:	4684      	mov	ip, r0
   a4e9e:	4608      	mov	r0, r1
   a4ea0:	4661      	mov	r1, ip
   a4ea2:	e7ff      	b.n	a4ea4 <__aeabi_cfcmpeq>

000a4ea4 <__aeabi_cfcmpeq>:
   a4ea4:	b50f      	push	{r0, r1, r2, r3, lr}
   a4ea6:	f7ff ffc9 	bl	a4e3c <__cmpsf2>
   a4eaa:	2800      	cmp	r0, #0
   a4eac:	bf48      	it	mi
   a4eae:	f110 0f00 	cmnmi.w	r0, #0
   a4eb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

000a4eb4 <__aeabi_fcmpeq>:
   a4eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4eb8:	f7ff fff4 	bl	a4ea4 <__aeabi_cfcmpeq>
   a4ebc:	bf0c      	ite	eq
   a4ebe:	2001      	moveq	r0, #1
   a4ec0:	2000      	movne	r0, #0
   a4ec2:	f85d fb08 	ldr.w	pc, [sp], #8
   a4ec6:	bf00      	nop

000a4ec8 <__aeabi_fcmplt>:
   a4ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4ecc:	f7ff ffea 	bl	a4ea4 <__aeabi_cfcmpeq>
   a4ed0:	bf34      	ite	cc
   a4ed2:	2001      	movcc	r0, #1
   a4ed4:	2000      	movcs	r0, #0
   a4ed6:	f85d fb08 	ldr.w	pc, [sp], #8
   a4eda:	bf00      	nop

000a4edc <__aeabi_fcmple>:
   a4edc:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4ee0:	f7ff ffe0 	bl	a4ea4 <__aeabi_cfcmpeq>
   a4ee4:	bf94      	ite	ls
   a4ee6:	2001      	movls	r0, #1
   a4ee8:	2000      	movhi	r0, #0
   a4eea:	f85d fb08 	ldr.w	pc, [sp], #8
   a4eee:	bf00      	nop

000a4ef0 <__aeabi_fcmpge>:
   a4ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4ef4:	f7ff ffd2 	bl	a4e9c <__aeabi_cfrcmple>
   a4ef8:	bf94      	ite	ls
   a4efa:	2001      	movls	r0, #1
   a4efc:	2000      	movhi	r0, #0
   a4efe:	f85d fb08 	ldr.w	pc, [sp], #8
   a4f02:	bf00      	nop

000a4f04 <__aeabi_fcmpgt>:
   a4f04:	f84d ed08 	str.w	lr, [sp, #-8]!
   a4f08:	f7ff ffc8 	bl	a4e9c <__aeabi_cfrcmple>
   a4f0c:	bf34      	ite	cc
   a4f0e:	2001      	movcc	r0, #1
   a4f10:	2000      	movcs	r0, #0
   a4f12:	f85d fb08 	ldr.w	pc, [sp], #8
   a4f16:	bf00      	nop

000a4f18 <__aeabi_f2iz>:
   a4f18:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a4f1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a4f20:	d30f      	bcc.n	a4f42 <__aeabi_f2iz+0x2a>
   a4f22:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a4f26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a4f2a:	d90d      	bls.n	a4f48 <__aeabi_f2iz+0x30>
   a4f2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a4f30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a4f34:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a4f38:	fa23 f002 	lsr.w	r0, r3, r2
   a4f3c:	bf18      	it	ne
   a4f3e:	4240      	negne	r0, r0
   a4f40:	4770      	bx	lr
   a4f42:	f04f 0000 	mov.w	r0, #0
   a4f46:	4770      	bx	lr
   a4f48:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a4f4c:	d101      	bne.n	a4f52 <__aeabi_f2iz+0x3a>
   a4f4e:	0242      	lsls	r2, r0, #9
   a4f50:	d105      	bne.n	a4f5e <__aeabi_f2iz+0x46>
   a4f52:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   a4f56:	bf08      	it	eq
   a4f58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a4f5c:	4770      	bx	lr
   a4f5e:	f04f 0000 	mov.w	r0, #0
   a4f62:	4770      	bx	lr

000a4f64 <__aeabi_uldivmod>:
   a4f64:	b953      	cbnz	r3, a4f7c <__aeabi_uldivmod+0x18>
   a4f66:	b94a      	cbnz	r2, a4f7c <__aeabi_uldivmod+0x18>
   a4f68:	2900      	cmp	r1, #0
   a4f6a:	bf08      	it	eq
   a4f6c:	2800      	cmpeq	r0, #0
   a4f6e:	bf1c      	itt	ne
   a4f70:	f04f 31ff 	movne.w	r1, #4294967295
   a4f74:	f04f 30ff 	movne.w	r0, #4294967295
   a4f78:	f000 b97a 	b.w	a5270 <__aeabi_idiv0>
   a4f7c:	f1ad 0c08 	sub.w	ip, sp, #8
   a4f80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   a4f84:	f000 f806 	bl	a4f94 <__udivmoddi4>
   a4f88:	f8dd e004 	ldr.w	lr, [sp, #4]
   a4f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   a4f90:	b004      	add	sp, #16
   a4f92:	4770      	bx	lr

000a4f94 <__udivmoddi4>:
   a4f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   a4f98:	468c      	mov	ip, r1
   a4f9a:	460e      	mov	r6, r1
   a4f9c:	4604      	mov	r4, r0
   a4f9e:	9d08      	ldr	r5, [sp, #32]
   a4fa0:	2b00      	cmp	r3, #0
   a4fa2:	d150      	bne.n	a5046 <__udivmoddi4+0xb2>
   a4fa4:	428a      	cmp	r2, r1
   a4fa6:	4617      	mov	r7, r2
   a4fa8:	d96c      	bls.n	a5084 <__udivmoddi4+0xf0>
   a4faa:	fab2 fe82 	clz	lr, r2
   a4fae:	f1be 0f00 	cmp.w	lr, #0
   a4fb2:	d00b      	beq.n	a4fcc <__udivmoddi4+0x38>
   a4fb4:	f1ce 0c20 	rsb	ip, lr, #32
   a4fb8:	fa01 f60e 	lsl.w	r6, r1, lr
   a4fbc:	fa20 fc0c 	lsr.w	ip, r0, ip
   a4fc0:	fa02 f70e 	lsl.w	r7, r2, lr
   a4fc4:	ea4c 0c06 	orr.w	ip, ip, r6
   a4fc8:	fa00 f40e 	lsl.w	r4, r0, lr
   a4fcc:	0c3a      	lsrs	r2, r7, #16
   a4fce:	fbbc f9f2 	udiv	r9, ip, r2
   a4fd2:	b2bb      	uxth	r3, r7
   a4fd4:	fb02 cc19 	mls	ip, r2, r9, ip
   a4fd8:	fb09 fa03 	mul.w	sl, r9, r3
   a4fdc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   a4fe0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   a4fe4:	45b2      	cmp	sl, r6
   a4fe6:	d90a      	bls.n	a4ffe <__udivmoddi4+0x6a>
   a4fe8:	19f6      	adds	r6, r6, r7
   a4fea:	f109 31ff 	add.w	r1, r9, #4294967295
   a4fee:	f080 8125 	bcs.w	a523c <__udivmoddi4+0x2a8>
   a4ff2:	45b2      	cmp	sl, r6
   a4ff4:	f240 8122 	bls.w	a523c <__udivmoddi4+0x2a8>
   a4ff8:	f1a9 0902 	sub.w	r9, r9, #2
   a4ffc:	443e      	add	r6, r7
   a4ffe:	eba6 060a 	sub.w	r6, r6, sl
   a5002:	fbb6 f0f2 	udiv	r0, r6, r2
   a5006:	fb02 6610 	mls	r6, r2, r0, r6
   a500a:	fb00 f303 	mul.w	r3, r0, r3
   a500e:	b2a4      	uxth	r4, r4
   a5010:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   a5014:	42a3      	cmp	r3, r4
   a5016:	d909      	bls.n	a502c <__udivmoddi4+0x98>
   a5018:	19e4      	adds	r4, r4, r7
   a501a:	f100 32ff 	add.w	r2, r0, #4294967295
   a501e:	f080 810b 	bcs.w	a5238 <__udivmoddi4+0x2a4>
   a5022:	42a3      	cmp	r3, r4
   a5024:	f240 8108 	bls.w	a5238 <__udivmoddi4+0x2a4>
   a5028:	3802      	subs	r0, #2
   a502a:	443c      	add	r4, r7
   a502c:	2100      	movs	r1, #0
   a502e:	1ae4      	subs	r4, r4, r3
   a5030:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   a5034:	2d00      	cmp	r5, #0
   a5036:	d062      	beq.n	a50fe <__udivmoddi4+0x16a>
   a5038:	2300      	movs	r3, #0
   a503a:	fa24 f40e 	lsr.w	r4, r4, lr
   a503e:	602c      	str	r4, [r5, #0]
   a5040:	606b      	str	r3, [r5, #4]
   a5042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a5046:	428b      	cmp	r3, r1
   a5048:	d907      	bls.n	a505a <__udivmoddi4+0xc6>
   a504a:	2d00      	cmp	r5, #0
   a504c:	d055      	beq.n	a50fa <__udivmoddi4+0x166>
   a504e:	2100      	movs	r1, #0
   a5050:	e885 0041 	stmia.w	r5, {r0, r6}
   a5054:	4608      	mov	r0, r1
   a5056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a505a:	fab3 f183 	clz	r1, r3
   a505e:	2900      	cmp	r1, #0
   a5060:	f040 808f 	bne.w	a5182 <__udivmoddi4+0x1ee>
   a5064:	42b3      	cmp	r3, r6
   a5066:	d302      	bcc.n	a506e <__udivmoddi4+0xda>
   a5068:	4282      	cmp	r2, r0
   a506a:	f200 80fc 	bhi.w	a5266 <__udivmoddi4+0x2d2>
   a506e:	1a84      	subs	r4, r0, r2
   a5070:	eb66 0603 	sbc.w	r6, r6, r3
   a5074:	2001      	movs	r0, #1
   a5076:	46b4      	mov	ip, r6
   a5078:	2d00      	cmp	r5, #0
   a507a:	d040      	beq.n	a50fe <__udivmoddi4+0x16a>
   a507c:	e885 1010 	stmia.w	r5, {r4, ip}
   a5080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a5084:	b912      	cbnz	r2, a508c <__udivmoddi4+0xf8>
   a5086:	2701      	movs	r7, #1
   a5088:	fbb7 f7f2 	udiv	r7, r7, r2
   a508c:	fab7 fe87 	clz	lr, r7
   a5090:	f1be 0f00 	cmp.w	lr, #0
   a5094:	d135      	bne.n	a5102 <__udivmoddi4+0x16e>
   a5096:	2101      	movs	r1, #1
   a5098:	1bf6      	subs	r6, r6, r7
   a509a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   a509e:	fa1f f887 	uxth.w	r8, r7
   a50a2:	fbb6 f2fc 	udiv	r2, r6, ip
   a50a6:	fb0c 6612 	mls	r6, ip, r2, r6
   a50aa:	fb08 f002 	mul.w	r0, r8, r2
   a50ae:	0c23      	lsrs	r3, r4, #16
   a50b0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   a50b4:	42b0      	cmp	r0, r6
   a50b6:	d907      	bls.n	a50c8 <__udivmoddi4+0x134>
   a50b8:	19f6      	adds	r6, r6, r7
   a50ba:	f102 33ff 	add.w	r3, r2, #4294967295
   a50be:	d202      	bcs.n	a50c6 <__udivmoddi4+0x132>
   a50c0:	42b0      	cmp	r0, r6
   a50c2:	f200 80d2 	bhi.w	a526a <__udivmoddi4+0x2d6>
   a50c6:	461a      	mov	r2, r3
   a50c8:	1a36      	subs	r6, r6, r0
   a50ca:	fbb6 f0fc 	udiv	r0, r6, ip
   a50ce:	fb0c 6610 	mls	r6, ip, r0, r6
   a50d2:	fb08 f800 	mul.w	r8, r8, r0
   a50d6:	b2a3      	uxth	r3, r4
   a50d8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   a50dc:	45a0      	cmp	r8, r4
   a50de:	d907      	bls.n	a50f0 <__udivmoddi4+0x15c>
   a50e0:	19e4      	adds	r4, r4, r7
   a50e2:	f100 33ff 	add.w	r3, r0, #4294967295
   a50e6:	d202      	bcs.n	a50ee <__udivmoddi4+0x15a>
   a50e8:	45a0      	cmp	r8, r4
   a50ea:	f200 80b9 	bhi.w	a5260 <__udivmoddi4+0x2cc>
   a50ee:	4618      	mov	r0, r3
   a50f0:	eba4 0408 	sub.w	r4, r4, r8
   a50f4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   a50f8:	e79c      	b.n	a5034 <__udivmoddi4+0xa0>
   a50fa:	4629      	mov	r1, r5
   a50fc:	4628      	mov	r0, r5
   a50fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a5102:	fa07 f70e 	lsl.w	r7, r7, lr
   a5106:	f1ce 0320 	rsb	r3, lr, #32
   a510a:	fa26 f203 	lsr.w	r2, r6, r3
   a510e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   a5112:	fbb2 f1fc 	udiv	r1, r2, ip
   a5116:	fa1f f887 	uxth.w	r8, r7
   a511a:	fb0c 2211 	mls	r2, ip, r1, r2
   a511e:	fa06 f60e 	lsl.w	r6, r6, lr
   a5122:	fa20 f303 	lsr.w	r3, r0, r3
   a5126:	fb01 f908 	mul.w	r9, r1, r8
   a512a:	4333      	orrs	r3, r6
   a512c:	0c1e      	lsrs	r6, r3, #16
   a512e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   a5132:	45b1      	cmp	r9, r6
   a5134:	fa00 f40e 	lsl.w	r4, r0, lr
   a5138:	d909      	bls.n	a514e <__udivmoddi4+0x1ba>
   a513a:	19f6      	adds	r6, r6, r7
   a513c:	f101 32ff 	add.w	r2, r1, #4294967295
   a5140:	f080 808c 	bcs.w	a525c <__udivmoddi4+0x2c8>
   a5144:	45b1      	cmp	r9, r6
   a5146:	f240 8089 	bls.w	a525c <__udivmoddi4+0x2c8>
   a514a:	3902      	subs	r1, #2
   a514c:	443e      	add	r6, r7
   a514e:	eba6 0609 	sub.w	r6, r6, r9
   a5152:	fbb6 f0fc 	udiv	r0, r6, ip
   a5156:	fb0c 6210 	mls	r2, ip, r0, r6
   a515a:	fb00 f908 	mul.w	r9, r0, r8
   a515e:	b29e      	uxth	r6, r3
   a5160:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   a5164:	45b1      	cmp	r9, r6
   a5166:	d907      	bls.n	a5178 <__udivmoddi4+0x1e4>
   a5168:	19f6      	adds	r6, r6, r7
   a516a:	f100 33ff 	add.w	r3, r0, #4294967295
   a516e:	d271      	bcs.n	a5254 <__udivmoddi4+0x2c0>
   a5170:	45b1      	cmp	r9, r6
   a5172:	d96f      	bls.n	a5254 <__udivmoddi4+0x2c0>
   a5174:	3802      	subs	r0, #2
   a5176:	443e      	add	r6, r7
   a5178:	eba6 0609 	sub.w	r6, r6, r9
   a517c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   a5180:	e78f      	b.n	a50a2 <__udivmoddi4+0x10e>
   a5182:	f1c1 0720 	rsb	r7, r1, #32
   a5186:	fa22 f807 	lsr.w	r8, r2, r7
   a518a:	408b      	lsls	r3, r1
   a518c:	ea48 0303 	orr.w	r3, r8, r3
   a5190:	fa26 f407 	lsr.w	r4, r6, r7
   a5194:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   a5198:	fbb4 f9fe 	udiv	r9, r4, lr
   a519c:	fa1f fc83 	uxth.w	ip, r3
   a51a0:	fb0e 4419 	mls	r4, lr, r9, r4
   a51a4:	408e      	lsls	r6, r1
   a51a6:	fa20 f807 	lsr.w	r8, r0, r7
   a51aa:	fb09 fa0c 	mul.w	sl, r9, ip
   a51ae:	ea48 0806 	orr.w	r8, r8, r6
   a51b2:	ea4f 4618 	mov.w	r6, r8, lsr #16
   a51b6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   a51ba:	45a2      	cmp	sl, r4
   a51bc:	fa02 f201 	lsl.w	r2, r2, r1
   a51c0:	fa00 f601 	lsl.w	r6, r0, r1
   a51c4:	d908      	bls.n	a51d8 <__udivmoddi4+0x244>
   a51c6:	18e4      	adds	r4, r4, r3
   a51c8:	f109 30ff 	add.w	r0, r9, #4294967295
   a51cc:	d244      	bcs.n	a5258 <__udivmoddi4+0x2c4>
   a51ce:	45a2      	cmp	sl, r4
   a51d0:	d942      	bls.n	a5258 <__udivmoddi4+0x2c4>
   a51d2:	f1a9 0902 	sub.w	r9, r9, #2
   a51d6:	441c      	add	r4, r3
   a51d8:	eba4 040a 	sub.w	r4, r4, sl
   a51dc:	fbb4 f0fe 	udiv	r0, r4, lr
   a51e0:	fb0e 4410 	mls	r4, lr, r0, r4
   a51e4:	fb00 fc0c 	mul.w	ip, r0, ip
   a51e8:	fa1f f888 	uxth.w	r8, r8
   a51ec:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   a51f0:	45a4      	cmp	ip, r4
   a51f2:	d907      	bls.n	a5204 <__udivmoddi4+0x270>
   a51f4:	18e4      	adds	r4, r4, r3
   a51f6:	f100 3eff 	add.w	lr, r0, #4294967295
   a51fa:	d229      	bcs.n	a5250 <__udivmoddi4+0x2bc>
   a51fc:	45a4      	cmp	ip, r4
   a51fe:	d927      	bls.n	a5250 <__udivmoddi4+0x2bc>
   a5200:	3802      	subs	r0, #2
   a5202:	441c      	add	r4, r3
   a5204:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   a5208:	fba0 8902 	umull	r8, r9, r0, r2
   a520c:	eba4 0c0c 	sub.w	ip, r4, ip
   a5210:	45cc      	cmp	ip, r9
   a5212:	46c2      	mov	sl, r8
   a5214:	46ce      	mov	lr, r9
   a5216:	d315      	bcc.n	a5244 <__udivmoddi4+0x2b0>
   a5218:	d012      	beq.n	a5240 <__udivmoddi4+0x2ac>
   a521a:	b155      	cbz	r5, a5232 <__udivmoddi4+0x29e>
   a521c:	ebb6 030a 	subs.w	r3, r6, sl
   a5220:	eb6c 060e 	sbc.w	r6, ip, lr
   a5224:	fa06 f707 	lsl.w	r7, r6, r7
   a5228:	40cb      	lsrs	r3, r1
   a522a:	431f      	orrs	r7, r3
   a522c:	40ce      	lsrs	r6, r1
   a522e:	602f      	str	r7, [r5, #0]
   a5230:	606e      	str	r6, [r5, #4]
   a5232:	2100      	movs	r1, #0
   a5234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a5238:	4610      	mov	r0, r2
   a523a:	e6f7      	b.n	a502c <__udivmoddi4+0x98>
   a523c:	4689      	mov	r9, r1
   a523e:	e6de      	b.n	a4ffe <__udivmoddi4+0x6a>
   a5240:	4546      	cmp	r6, r8
   a5242:	d2ea      	bcs.n	a521a <__udivmoddi4+0x286>
   a5244:	ebb8 0a02 	subs.w	sl, r8, r2
   a5248:	eb69 0e03 	sbc.w	lr, r9, r3
   a524c:	3801      	subs	r0, #1
   a524e:	e7e4      	b.n	a521a <__udivmoddi4+0x286>
   a5250:	4670      	mov	r0, lr
   a5252:	e7d7      	b.n	a5204 <__udivmoddi4+0x270>
   a5254:	4618      	mov	r0, r3
   a5256:	e78f      	b.n	a5178 <__udivmoddi4+0x1e4>
   a5258:	4681      	mov	r9, r0
   a525a:	e7bd      	b.n	a51d8 <__udivmoddi4+0x244>
   a525c:	4611      	mov	r1, r2
   a525e:	e776      	b.n	a514e <__udivmoddi4+0x1ba>
   a5260:	3802      	subs	r0, #2
   a5262:	443c      	add	r4, r7
   a5264:	e744      	b.n	a50f0 <__udivmoddi4+0x15c>
   a5266:	4608      	mov	r0, r1
   a5268:	e706      	b.n	a5078 <__udivmoddi4+0xe4>
   a526a:	3a02      	subs	r2, #2
   a526c:	443e      	add	r6, r7
   a526e:	e72b      	b.n	a50c8 <__udivmoddi4+0x134>

000a5270 <__aeabi_idiv0>:
   a5270:	4770      	bx	lr
   a5272:	bf00      	nop

000a5274 <__libc_init_array>:
   a5274:	b570      	push	{r4, r5, r6, lr}
   a5276:	4e0f      	ldr	r6, [pc, #60]	; (a52b4 <__libc_init_array+0x40>)
   a5278:	4d0f      	ldr	r5, [pc, #60]	; (a52b8 <__libc_init_array+0x44>)
   a527a:	1b76      	subs	r6, r6, r5
   a527c:	10b6      	asrs	r6, r6, #2
   a527e:	bf18      	it	ne
   a5280:	2400      	movne	r4, #0
   a5282:	d005      	beq.n	a5290 <__libc_init_array+0x1c>
   a5284:	3401      	adds	r4, #1
   a5286:	f855 3b04 	ldr.w	r3, [r5], #4
   a528a:	4798      	blx	r3
   a528c:	42a6      	cmp	r6, r4
   a528e:	d1f9      	bne.n	a5284 <__libc_init_array+0x10>
   a5290:	4e0a      	ldr	r6, [pc, #40]	; (a52bc <__libc_init_array+0x48>)
   a5292:	4d0b      	ldr	r5, [pc, #44]	; (a52c0 <__libc_init_array+0x4c>)
   a5294:	f007 fcb2 	bl	acbfc <_init>
   a5298:	1b76      	subs	r6, r6, r5
   a529a:	10b6      	asrs	r6, r6, #2
   a529c:	bf18      	it	ne
   a529e:	2400      	movne	r4, #0
   a52a0:	d006      	beq.n	a52b0 <__libc_init_array+0x3c>
   a52a2:	3401      	adds	r4, #1
   a52a4:	f855 3b04 	ldr.w	r3, [r5], #4
   a52a8:	4798      	blx	r3
   a52aa:	42a6      	cmp	r6, r4
   a52ac:	d1f9      	bne.n	a52a2 <__libc_init_array+0x2e>
   a52ae:	bd70      	pop	{r4, r5, r6, pc}
   a52b0:	bd70      	pop	{r4, r5, r6, pc}
   a52b2:	bf00      	nop
   a52b4:	000acc08 	.word	0x000acc08
   a52b8:	000acc08 	.word	0x000acc08
   a52bc:	000acc10 	.word	0x000acc10
   a52c0:	000acc08 	.word	0x000acc08

000a52c4 <__locale_ctype_ptr>:
   a52c4:	4b04      	ldr	r3, [pc, #16]	; (a52d8 <__locale_ctype_ptr+0x14>)
   a52c6:	4a05      	ldr	r2, [pc, #20]	; (a52dc <__locale_ctype_ptr+0x18>)
   a52c8:	681b      	ldr	r3, [r3, #0]
   a52ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   a52cc:	2b00      	cmp	r3, #0
   a52ce:	bf08      	it	eq
   a52d0:	4613      	moveq	r3, r2
   a52d2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   a52d6:	4770      	bx	lr
   a52d8:	20070270 	.word	0x20070270
   a52dc:	200706a0 	.word	0x200706a0

000a52e0 <malloc>:
   a52e0:	4b02      	ldr	r3, [pc, #8]	; (a52ec <malloc+0xc>)
   a52e2:	4601      	mov	r1, r0
   a52e4:	6818      	ldr	r0, [r3, #0]
   a52e6:	f000 b80b 	b.w	a5300 <_malloc_r>
   a52ea:	bf00      	nop
   a52ec:	20070270 	.word	0x20070270

000a52f0 <free>:
   a52f0:	4b02      	ldr	r3, [pc, #8]	; (a52fc <free+0xc>)
   a52f2:	4601      	mov	r1, r0
   a52f4:	6818      	ldr	r0, [r3, #0]
   a52f6:	f000 beb3 	b.w	a6060 <_free_r>
   a52fa:	bf00      	nop
   a52fc:	20070270 	.word	0x20070270

000a5300 <_malloc_r>:
   a5300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a5304:	f101 060b 	add.w	r6, r1, #11
   a5308:	2e16      	cmp	r6, #22
   a530a:	b083      	sub	sp, #12
   a530c:	4605      	mov	r5, r0
   a530e:	f240 809e 	bls.w	a544e <_malloc_r+0x14e>
   a5312:	f036 0607 	bics.w	r6, r6, #7
   a5316:	f100 80bd 	bmi.w	a5494 <_malloc_r+0x194>
   a531a:	42b1      	cmp	r1, r6
   a531c:	f200 80ba 	bhi.w	a5494 <_malloc_r+0x194>
   a5320:	f000 fbce 	bl	a5ac0 <__malloc_lock>
   a5324:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   a5328:	f0c0 8285 	bcc.w	a5836 <_malloc_r+0x536>
   a532c:	0a73      	lsrs	r3, r6, #9
   a532e:	f000 80b8 	beq.w	a54a2 <_malloc_r+0x1a2>
   a5332:	2b04      	cmp	r3, #4
   a5334:	f200 816c 	bhi.w	a5610 <_malloc_r+0x310>
   a5338:	09b3      	lsrs	r3, r6, #6
   a533a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   a533e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   a5342:	00c1      	lsls	r1, r0, #3
   a5344:	4fb8      	ldr	r7, [pc, #736]	; (a5628 <_malloc_r+0x328>)
   a5346:	4439      	add	r1, r7
   a5348:	684c      	ldr	r4, [r1, #4]
   a534a:	3908      	subs	r1, #8
   a534c:	42a1      	cmp	r1, r4
   a534e:	d106      	bne.n	a535e <_malloc_r+0x5e>
   a5350:	e00c      	b.n	a536c <_malloc_r+0x6c>
   a5352:	2a00      	cmp	r2, #0
   a5354:	f280 80ab 	bge.w	a54ae <_malloc_r+0x1ae>
   a5358:	68e4      	ldr	r4, [r4, #12]
   a535a:	42a1      	cmp	r1, r4
   a535c:	d006      	beq.n	a536c <_malloc_r+0x6c>
   a535e:	6863      	ldr	r3, [r4, #4]
   a5360:	f023 0303 	bic.w	r3, r3, #3
   a5364:	1b9a      	subs	r2, r3, r6
   a5366:	2a0f      	cmp	r2, #15
   a5368:	ddf3      	ble.n	a5352 <_malloc_r+0x52>
   a536a:	4670      	mov	r0, lr
   a536c:	693c      	ldr	r4, [r7, #16]
   a536e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; a563c <_malloc_r+0x33c>
   a5372:	4574      	cmp	r4, lr
   a5374:	f000 819e 	beq.w	a56b4 <_malloc_r+0x3b4>
   a5378:	6863      	ldr	r3, [r4, #4]
   a537a:	f023 0303 	bic.w	r3, r3, #3
   a537e:	1b9a      	subs	r2, r3, r6
   a5380:	2a0f      	cmp	r2, #15
   a5382:	f300 8183 	bgt.w	a568c <_malloc_r+0x38c>
   a5386:	2a00      	cmp	r2, #0
   a5388:	f8c7 e014 	str.w	lr, [r7, #20]
   a538c:	f8c7 e010 	str.w	lr, [r7, #16]
   a5390:	f280 8091 	bge.w	a54b6 <_malloc_r+0x1b6>
   a5394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a5398:	f080 8154 	bcs.w	a5644 <_malloc_r+0x344>
   a539c:	2201      	movs	r2, #1
   a539e:	08db      	lsrs	r3, r3, #3
   a53a0:	6879      	ldr	r1, [r7, #4]
   a53a2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   a53a6:	4413      	add	r3, r2
   a53a8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   a53ac:	fa02 f20c 	lsl.w	r2, r2, ip
   a53b0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   a53b4:	430a      	orrs	r2, r1
   a53b6:	f1ac 0108 	sub.w	r1, ip, #8
   a53ba:	60e1      	str	r1, [r4, #12]
   a53bc:	f8c4 8008 	str.w	r8, [r4, #8]
   a53c0:	607a      	str	r2, [r7, #4]
   a53c2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   a53c6:	f8c8 400c 	str.w	r4, [r8, #12]
   a53ca:	2401      	movs	r4, #1
   a53cc:	1083      	asrs	r3, r0, #2
   a53ce:	409c      	lsls	r4, r3
   a53d0:	4294      	cmp	r4, r2
   a53d2:	d87d      	bhi.n	a54d0 <_malloc_r+0x1d0>
   a53d4:	4214      	tst	r4, r2
   a53d6:	d106      	bne.n	a53e6 <_malloc_r+0xe6>
   a53d8:	f020 0003 	bic.w	r0, r0, #3
   a53dc:	0064      	lsls	r4, r4, #1
   a53de:	4214      	tst	r4, r2
   a53e0:	f100 0004 	add.w	r0, r0, #4
   a53e4:	d0fa      	beq.n	a53dc <_malloc_r+0xdc>
   a53e6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   a53ea:	46cc      	mov	ip, r9
   a53ec:	4680      	mov	r8, r0
   a53ee:	f8dc 300c 	ldr.w	r3, [ip, #12]
   a53f2:	459c      	cmp	ip, r3
   a53f4:	d107      	bne.n	a5406 <_malloc_r+0x106>
   a53f6:	e15f      	b.n	a56b8 <_malloc_r+0x3b8>
   a53f8:	2a00      	cmp	r2, #0
   a53fa:	f280 816d 	bge.w	a56d8 <_malloc_r+0x3d8>
   a53fe:	68db      	ldr	r3, [r3, #12]
   a5400:	459c      	cmp	ip, r3
   a5402:	f000 8159 	beq.w	a56b8 <_malloc_r+0x3b8>
   a5406:	6859      	ldr	r1, [r3, #4]
   a5408:	f021 0103 	bic.w	r1, r1, #3
   a540c:	1b8a      	subs	r2, r1, r6
   a540e:	2a0f      	cmp	r2, #15
   a5410:	ddf2      	ble.n	a53f8 <_malloc_r+0xf8>
   a5412:	68dc      	ldr	r4, [r3, #12]
   a5414:	f8d3 c008 	ldr.w	ip, [r3, #8]
   a5418:	f046 0801 	orr.w	r8, r6, #1
   a541c:	4628      	mov	r0, r5
   a541e:	441e      	add	r6, r3
   a5420:	f042 0501 	orr.w	r5, r2, #1
   a5424:	f8c3 8004 	str.w	r8, [r3, #4]
   a5428:	f8cc 400c 	str.w	r4, [ip, #12]
   a542c:	f8c4 c008 	str.w	ip, [r4, #8]
   a5430:	617e      	str	r6, [r7, #20]
   a5432:	613e      	str	r6, [r7, #16]
   a5434:	f8c6 e00c 	str.w	lr, [r6, #12]
   a5438:	f8c6 e008 	str.w	lr, [r6, #8]
   a543c:	6075      	str	r5, [r6, #4]
   a543e:	505a      	str	r2, [r3, r1]
   a5440:	9300      	str	r3, [sp, #0]
   a5442:	f000 fb43 	bl	a5acc <__malloc_unlock>
   a5446:	9b00      	ldr	r3, [sp, #0]
   a5448:	f103 0408 	add.w	r4, r3, #8
   a544c:	e01e      	b.n	a548c <_malloc_r+0x18c>
   a544e:	2910      	cmp	r1, #16
   a5450:	d820      	bhi.n	a5494 <_malloc_r+0x194>
   a5452:	f000 fb35 	bl	a5ac0 <__malloc_lock>
   a5456:	2610      	movs	r6, #16
   a5458:	2318      	movs	r3, #24
   a545a:	2002      	movs	r0, #2
   a545c:	4f72      	ldr	r7, [pc, #456]	; (a5628 <_malloc_r+0x328>)
   a545e:	443b      	add	r3, r7
   a5460:	685c      	ldr	r4, [r3, #4]
   a5462:	f1a3 0208 	sub.w	r2, r3, #8
   a5466:	4294      	cmp	r4, r2
   a5468:	f000 812f 	beq.w	a56ca <_malloc_r+0x3ca>
   a546c:	6863      	ldr	r3, [r4, #4]
   a546e:	68e1      	ldr	r1, [r4, #12]
   a5470:	f023 0303 	bic.w	r3, r3, #3
   a5474:	4423      	add	r3, r4
   a5476:	685a      	ldr	r2, [r3, #4]
   a5478:	68a6      	ldr	r6, [r4, #8]
   a547a:	f042 0201 	orr.w	r2, r2, #1
   a547e:	60f1      	str	r1, [r6, #12]
   a5480:	4628      	mov	r0, r5
   a5482:	608e      	str	r6, [r1, #8]
   a5484:	605a      	str	r2, [r3, #4]
   a5486:	f000 fb21 	bl	a5acc <__malloc_unlock>
   a548a:	3408      	adds	r4, #8
   a548c:	4620      	mov	r0, r4
   a548e:	b003      	add	sp, #12
   a5490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a5494:	2400      	movs	r4, #0
   a5496:	230c      	movs	r3, #12
   a5498:	4620      	mov	r0, r4
   a549a:	602b      	str	r3, [r5, #0]
   a549c:	b003      	add	sp, #12
   a549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a54a2:	2040      	movs	r0, #64	; 0x40
   a54a4:	f44f 7100 	mov.w	r1, #512	; 0x200
   a54a8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   a54ac:	e74a      	b.n	a5344 <_malloc_r+0x44>
   a54ae:	4423      	add	r3, r4
   a54b0:	685a      	ldr	r2, [r3, #4]
   a54b2:	68e1      	ldr	r1, [r4, #12]
   a54b4:	e7e0      	b.n	a5478 <_malloc_r+0x178>
   a54b6:	4423      	add	r3, r4
   a54b8:	685a      	ldr	r2, [r3, #4]
   a54ba:	4628      	mov	r0, r5
   a54bc:	f042 0201 	orr.w	r2, r2, #1
   a54c0:	605a      	str	r2, [r3, #4]
   a54c2:	3408      	adds	r4, #8
   a54c4:	f000 fb02 	bl	a5acc <__malloc_unlock>
   a54c8:	4620      	mov	r0, r4
   a54ca:	b003      	add	sp, #12
   a54cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a54d0:	68bc      	ldr	r4, [r7, #8]
   a54d2:	6863      	ldr	r3, [r4, #4]
   a54d4:	f023 0803 	bic.w	r8, r3, #3
   a54d8:	45b0      	cmp	r8, r6
   a54da:	d304      	bcc.n	a54e6 <_malloc_r+0x1e6>
   a54dc:	eba8 0306 	sub.w	r3, r8, r6
   a54e0:	2b0f      	cmp	r3, #15
   a54e2:	f300 8085 	bgt.w	a55f0 <_malloc_r+0x2f0>
   a54e6:	f8df 9158 	ldr.w	r9, [pc, #344]	; a5640 <_malloc_r+0x340>
   a54ea:	4b50      	ldr	r3, [pc, #320]	; (a562c <_malloc_r+0x32c>)
   a54ec:	f8d9 2000 	ldr.w	r2, [r9]
   a54f0:	681b      	ldr	r3, [r3, #0]
   a54f2:	3201      	adds	r2, #1
   a54f4:	4433      	add	r3, r6
   a54f6:	eb04 0a08 	add.w	sl, r4, r8
   a54fa:	f000 8154 	beq.w	a57a6 <_malloc_r+0x4a6>
   a54fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   a5502:	330f      	adds	r3, #15
   a5504:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   a5508:	f02b 0b0f 	bic.w	fp, fp, #15
   a550c:	4659      	mov	r1, fp
   a550e:	4628      	mov	r0, r5
   a5510:	f000 fca0 	bl	a5e54 <_sbrk_r>
   a5514:	1c41      	adds	r1, r0, #1
   a5516:	4602      	mov	r2, r0
   a5518:	f000 80fb 	beq.w	a5712 <_malloc_r+0x412>
   a551c:	4582      	cmp	sl, r0
   a551e:	f200 80f6 	bhi.w	a570e <_malloc_r+0x40e>
   a5522:	4b43      	ldr	r3, [pc, #268]	; (a5630 <_malloc_r+0x330>)
   a5524:	6819      	ldr	r1, [r3, #0]
   a5526:	4459      	add	r1, fp
   a5528:	6019      	str	r1, [r3, #0]
   a552a:	f000 814c 	beq.w	a57c6 <_malloc_r+0x4c6>
   a552e:	f8d9 0000 	ldr.w	r0, [r9]
   a5532:	3001      	adds	r0, #1
   a5534:	bf1b      	ittet	ne
   a5536:	eba2 0a0a 	subne.w	sl, r2, sl
   a553a:	4451      	addne	r1, sl
   a553c:	f8c9 2000 	streq.w	r2, [r9]
   a5540:	6019      	strne	r1, [r3, #0]
   a5542:	f012 0107 	ands.w	r1, r2, #7
   a5546:	f000 8114 	beq.w	a5772 <_malloc_r+0x472>
   a554a:	f1c1 0008 	rsb	r0, r1, #8
   a554e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   a5552:	4402      	add	r2, r0
   a5554:	3108      	adds	r1, #8
   a5556:	eb02 090b 	add.w	r9, r2, fp
   a555a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   a555e:	eba1 0909 	sub.w	r9, r1, r9
   a5562:	4649      	mov	r1, r9
   a5564:	4628      	mov	r0, r5
   a5566:	9301      	str	r3, [sp, #4]
   a5568:	9200      	str	r2, [sp, #0]
   a556a:	f000 fc73 	bl	a5e54 <_sbrk_r>
   a556e:	1c43      	adds	r3, r0, #1
   a5570:	e89d 000c 	ldmia.w	sp, {r2, r3}
   a5574:	f000 8142 	beq.w	a57fc <_malloc_r+0x4fc>
   a5578:	1a80      	subs	r0, r0, r2
   a557a:	4448      	add	r0, r9
   a557c:	f040 0001 	orr.w	r0, r0, #1
   a5580:	6819      	ldr	r1, [r3, #0]
   a5582:	42bc      	cmp	r4, r7
   a5584:	4449      	add	r1, r9
   a5586:	60ba      	str	r2, [r7, #8]
   a5588:	6019      	str	r1, [r3, #0]
   a558a:	6050      	str	r0, [r2, #4]
   a558c:	d017      	beq.n	a55be <_malloc_r+0x2be>
   a558e:	f1b8 0f0f 	cmp.w	r8, #15
   a5592:	f240 80fa 	bls.w	a578a <_malloc_r+0x48a>
   a5596:	f04f 0c05 	mov.w	ip, #5
   a559a:	6862      	ldr	r2, [r4, #4]
   a559c:	f1a8 000c 	sub.w	r0, r8, #12
   a55a0:	f020 0007 	bic.w	r0, r0, #7
   a55a4:	f002 0201 	and.w	r2, r2, #1
   a55a8:	eb04 0e00 	add.w	lr, r4, r0
   a55ac:	4302      	orrs	r2, r0
   a55ae:	280f      	cmp	r0, #15
   a55b0:	6062      	str	r2, [r4, #4]
   a55b2:	f8ce c004 	str.w	ip, [lr, #4]
   a55b6:	f8ce c008 	str.w	ip, [lr, #8]
   a55ba:	f200 8116 	bhi.w	a57ea <_malloc_r+0x4ea>
   a55be:	4b1d      	ldr	r3, [pc, #116]	; (a5634 <_malloc_r+0x334>)
   a55c0:	68bc      	ldr	r4, [r7, #8]
   a55c2:	681a      	ldr	r2, [r3, #0]
   a55c4:	4291      	cmp	r1, r2
   a55c6:	bf88      	it	hi
   a55c8:	6019      	strhi	r1, [r3, #0]
   a55ca:	4b1b      	ldr	r3, [pc, #108]	; (a5638 <_malloc_r+0x338>)
   a55cc:	681a      	ldr	r2, [r3, #0]
   a55ce:	4291      	cmp	r1, r2
   a55d0:	6862      	ldr	r2, [r4, #4]
   a55d2:	bf88      	it	hi
   a55d4:	6019      	strhi	r1, [r3, #0]
   a55d6:	f022 0203 	bic.w	r2, r2, #3
   a55da:	4296      	cmp	r6, r2
   a55dc:	eba2 0306 	sub.w	r3, r2, r6
   a55e0:	d801      	bhi.n	a55e6 <_malloc_r+0x2e6>
   a55e2:	2b0f      	cmp	r3, #15
   a55e4:	dc04      	bgt.n	a55f0 <_malloc_r+0x2f0>
   a55e6:	4628      	mov	r0, r5
   a55e8:	f000 fa70 	bl	a5acc <__malloc_unlock>
   a55ec:	2400      	movs	r4, #0
   a55ee:	e74d      	b.n	a548c <_malloc_r+0x18c>
   a55f0:	f046 0201 	orr.w	r2, r6, #1
   a55f4:	f043 0301 	orr.w	r3, r3, #1
   a55f8:	4426      	add	r6, r4
   a55fa:	6062      	str	r2, [r4, #4]
   a55fc:	4628      	mov	r0, r5
   a55fe:	60be      	str	r6, [r7, #8]
   a5600:	3408      	adds	r4, #8
   a5602:	6073      	str	r3, [r6, #4]
   a5604:	f000 fa62 	bl	a5acc <__malloc_unlock>
   a5608:	4620      	mov	r0, r4
   a560a:	b003      	add	sp, #12
   a560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a5610:	2b14      	cmp	r3, #20
   a5612:	d970      	bls.n	a56f6 <_malloc_r+0x3f6>
   a5614:	2b54      	cmp	r3, #84	; 0x54
   a5616:	f200 80a2 	bhi.w	a575e <_malloc_r+0x45e>
   a561a:	0b33      	lsrs	r3, r6, #12
   a561c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   a5620:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   a5624:	00c1      	lsls	r1, r0, #3
   a5626:	e68d      	b.n	a5344 <_malloc_r+0x44>
   a5628:	2007080c 	.word	0x2007080c
   a562c:	20072f64 	.word	0x20072f64
   a5630:	20072f34 	.word	0x20072f34
   a5634:	20072f5c 	.word	0x20072f5c
   a5638:	20072f60 	.word	0x20072f60
   a563c:	20070814 	.word	0x20070814
   a5640:	20070c14 	.word	0x20070c14
   a5644:	0a5a      	lsrs	r2, r3, #9
   a5646:	2a04      	cmp	r2, #4
   a5648:	d95b      	bls.n	a5702 <_malloc_r+0x402>
   a564a:	2a14      	cmp	r2, #20
   a564c:	f200 80ae 	bhi.w	a57ac <_malloc_r+0x4ac>
   a5650:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   a5654:	00c9      	lsls	r1, r1, #3
   a5656:	325b      	adds	r2, #91	; 0x5b
   a5658:	eb07 0c01 	add.w	ip, r7, r1
   a565c:	5879      	ldr	r1, [r7, r1]
   a565e:	f1ac 0c08 	sub.w	ip, ip, #8
   a5662:	458c      	cmp	ip, r1
   a5664:	f000 8088 	beq.w	a5778 <_malloc_r+0x478>
   a5668:	684a      	ldr	r2, [r1, #4]
   a566a:	f022 0203 	bic.w	r2, r2, #3
   a566e:	4293      	cmp	r3, r2
   a5670:	d273      	bcs.n	a575a <_malloc_r+0x45a>
   a5672:	6889      	ldr	r1, [r1, #8]
   a5674:	458c      	cmp	ip, r1
   a5676:	d1f7      	bne.n	a5668 <_malloc_r+0x368>
   a5678:	f8dc 300c 	ldr.w	r3, [ip, #12]
   a567c:	687a      	ldr	r2, [r7, #4]
   a567e:	60e3      	str	r3, [r4, #12]
   a5680:	f8c4 c008 	str.w	ip, [r4, #8]
   a5684:	609c      	str	r4, [r3, #8]
   a5686:	f8cc 400c 	str.w	r4, [ip, #12]
   a568a:	e69e      	b.n	a53ca <_malloc_r+0xca>
   a568c:	f046 0c01 	orr.w	ip, r6, #1
   a5690:	f042 0101 	orr.w	r1, r2, #1
   a5694:	4426      	add	r6, r4
   a5696:	f8c4 c004 	str.w	ip, [r4, #4]
   a569a:	4628      	mov	r0, r5
   a569c:	617e      	str	r6, [r7, #20]
   a569e:	613e      	str	r6, [r7, #16]
   a56a0:	f8c6 e00c 	str.w	lr, [r6, #12]
   a56a4:	f8c6 e008 	str.w	lr, [r6, #8]
   a56a8:	6071      	str	r1, [r6, #4]
   a56aa:	50e2      	str	r2, [r4, r3]
   a56ac:	f000 fa0e 	bl	a5acc <__malloc_unlock>
   a56b0:	3408      	adds	r4, #8
   a56b2:	e6eb      	b.n	a548c <_malloc_r+0x18c>
   a56b4:	687a      	ldr	r2, [r7, #4]
   a56b6:	e688      	b.n	a53ca <_malloc_r+0xca>
   a56b8:	f108 0801 	add.w	r8, r8, #1
   a56bc:	f018 0f03 	tst.w	r8, #3
   a56c0:	f10c 0c08 	add.w	ip, ip, #8
   a56c4:	f47f ae93 	bne.w	a53ee <_malloc_r+0xee>
   a56c8:	e02d      	b.n	a5726 <_malloc_r+0x426>
   a56ca:	68dc      	ldr	r4, [r3, #12]
   a56cc:	42a3      	cmp	r3, r4
   a56ce:	bf08      	it	eq
   a56d0:	3002      	addeq	r0, #2
   a56d2:	f43f ae4b 	beq.w	a536c <_malloc_r+0x6c>
   a56d6:	e6c9      	b.n	a546c <_malloc_r+0x16c>
   a56d8:	461c      	mov	r4, r3
   a56da:	4419      	add	r1, r3
   a56dc:	684a      	ldr	r2, [r1, #4]
   a56de:	68db      	ldr	r3, [r3, #12]
   a56e0:	f854 6f08 	ldr.w	r6, [r4, #8]!
   a56e4:	f042 0201 	orr.w	r2, r2, #1
   a56e8:	604a      	str	r2, [r1, #4]
   a56ea:	4628      	mov	r0, r5
   a56ec:	60f3      	str	r3, [r6, #12]
   a56ee:	609e      	str	r6, [r3, #8]
   a56f0:	f000 f9ec 	bl	a5acc <__malloc_unlock>
   a56f4:	e6ca      	b.n	a548c <_malloc_r+0x18c>
   a56f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   a56fa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   a56fe:	00c1      	lsls	r1, r0, #3
   a5700:	e620      	b.n	a5344 <_malloc_r+0x44>
   a5702:	099a      	lsrs	r2, r3, #6
   a5704:	f102 0139 	add.w	r1, r2, #57	; 0x39
   a5708:	00c9      	lsls	r1, r1, #3
   a570a:	3238      	adds	r2, #56	; 0x38
   a570c:	e7a4      	b.n	a5658 <_malloc_r+0x358>
   a570e:	42bc      	cmp	r4, r7
   a5710:	d054      	beq.n	a57bc <_malloc_r+0x4bc>
   a5712:	68bc      	ldr	r4, [r7, #8]
   a5714:	6862      	ldr	r2, [r4, #4]
   a5716:	f022 0203 	bic.w	r2, r2, #3
   a571a:	e75e      	b.n	a55da <_malloc_r+0x2da>
   a571c:	f859 3908 	ldr.w	r3, [r9], #-8
   a5720:	4599      	cmp	r9, r3
   a5722:	f040 8086 	bne.w	a5832 <_malloc_r+0x532>
   a5726:	f010 0f03 	tst.w	r0, #3
   a572a:	f100 30ff 	add.w	r0, r0, #4294967295
   a572e:	d1f5      	bne.n	a571c <_malloc_r+0x41c>
   a5730:	687b      	ldr	r3, [r7, #4]
   a5732:	ea23 0304 	bic.w	r3, r3, r4
   a5736:	607b      	str	r3, [r7, #4]
   a5738:	0064      	lsls	r4, r4, #1
   a573a:	429c      	cmp	r4, r3
   a573c:	f63f aec8 	bhi.w	a54d0 <_malloc_r+0x1d0>
   a5740:	2c00      	cmp	r4, #0
   a5742:	f43f aec5 	beq.w	a54d0 <_malloc_r+0x1d0>
   a5746:	421c      	tst	r4, r3
   a5748:	4640      	mov	r0, r8
   a574a:	f47f ae4c 	bne.w	a53e6 <_malloc_r+0xe6>
   a574e:	0064      	lsls	r4, r4, #1
   a5750:	421c      	tst	r4, r3
   a5752:	f100 0004 	add.w	r0, r0, #4
   a5756:	d0fa      	beq.n	a574e <_malloc_r+0x44e>
   a5758:	e645      	b.n	a53e6 <_malloc_r+0xe6>
   a575a:	468c      	mov	ip, r1
   a575c:	e78c      	b.n	a5678 <_malloc_r+0x378>
   a575e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   a5762:	d815      	bhi.n	a5790 <_malloc_r+0x490>
   a5764:	0bf3      	lsrs	r3, r6, #15
   a5766:	f103 0078 	add.w	r0, r3, #120	; 0x78
   a576a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   a576e:	00c1      	lsls	r1, r0, #3
   a5770:	e5e8      	b.n	a5344 <_malloc_r+0x44>
   a5772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   a5776:	e6ee      	b.n	a5556 <_malloc_r+0x256>
   a5778:	2101      	movs	r1, #1
   a577a:	687b      	ldr	r3, [r7, #4]
   a577c:	1092      	asrs	r2, r2, #2
   a577e:	fa01 f202 	lsl.w	r2, r1, r2
   a5782:	431a      	orrs	r2, r3
   a5784:	607a      	str	r2, [r7, #4]
   a5786:	4663      	mov	r3, ip
   a5788:	e779      	b.n	a567e <_malloc_r+0x37e>
   a578a:	2301      	movs	r3, #1
   a578c:	6053      	str	r3, [r2, #4]
   a578e:	e72a      	b.n	a55e6 <_malloc_r+0x2e6>
   a5790:	f240 5254 	movw	r2, #1364	; 0x554
   a5794:	4293      	cmp	r3, r2
   a5796:	d822      	bhi.n	a57de <_malloc_r+0x4de>
   a5798:	0cb3      	lsrs	r3, r6, #18
   a579a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   a579e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   a57a2:	00c1      	lsls	r1, r0, #3
   a57a4:	e5ce      	b.n	a5344 <_malloc_r+0x44>
   a57a6:	f103 0b10 	add.w	fp, r3, #16
   a57aa:	e6af      	b.n	a550c <_malloc_r+0x20c>
   a57ac:	2a54      	cmp	r2, #84	; 0x54
   a57ae:	d829      	bhi.n	a5804 <_malloc_r+0x504>
   a57b0:	0b1a      	lsrs	r2, r3, #12
   a57b2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   a57b6:	00c9      	lsls	r1, r1, #3
   a57b8:	326e      	adds	r2, #110	; 0x6e
   a57ba:	e74d      	b.n	a5658 <_malloc_r+0x358>
   a57bc:	4b20      	ldr	r3, [pc, #128]	; (a5840 <_malloc_r+0x540>)
   a57be:	6819      	ldr	r1, [r3, #0]
   a57c0:	4459      	add	r1, fp
   a57c2:	6019      	str	r1, [r3, #0]
   a57c4:	e6b3      	b.n	a552e <_malloc_r+0x22e>
   a57c6:	f3ca 000b 	ubfx	r0, sl, #0, #12
   a57ca:	2800      	cmp	r0, #0
   a57cc:	f47f aeaf 	bne.w	a552e <_malloc_r+0x22e>
   a57d0:	eb08 030b 	add.w	r3, r8, fp
   a57d4:	68ba      	ldr	r2, [r7, #8]
   a57d6:	f043 0301 	orr.w	r3, r3, #1
   a57da:	6053      	str	r3, [r2, #4]
   a57dc:	e6ef      	b.n	a55be <_malloc_r+0x2be>
   a57de:	207f      	movs	r0, #127	; 0x7f
   a57e0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   a57e4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   a57e8:	e5ac      	b.n	a5344 <_malloc_r+0x44>
   a57ea:	f104 0108 	add.w	r1, r4, #8
   a57ee:	4628      	mov	r0, r5
   a57f0:	9300      	str	r3, [sp, #0]
   a57f2:	f000 fc35 	bl	a6060 <_free_r>
   a57f6:	9b00      	ldr	r3, [sp, #0]
   a57f8:	6819      	ldr	r1, [r3, #0]
   a57fa:	e6e0      	b.n	a55be <_malloc_r+0x2be>
   a57fc:	2001      	movs	r0, #1
   a57fe:	f04f 0900 	mov.w	r9, #0
   a5802:	e6bd      	b.n	a5580 <_malloc_r+0x280>
   a5804:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a5808:	d805      	bhi.n	a5816 <_malloc_r+0x516>
   a580a:	0bda      	lsrs	r2, r3, #15
   a580c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   a5810:	00c9      	lsls	r1, r1, #3
   a5812:	3277      	adds	r2, #119	; 0x77
   a5814:	e720      	b.n	a5658 <_malloc_r+0x358>
   a5816:	f240 5154 	movw	r1, #1364	; 0x554
   a581a:	428a      	cmp	r2, r1
   a581c:	d805      	bhi.n	a582a <_malloc_r+0x52a>
   a581e:	0c9a      	lsrs	r2, r3, #18
   a5820:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   a5824:	00c9      	lsls	r1, r1, #3
   a5826:	327c      	adds	r2, #124	; 0x7c
   a5828:	e716      	b.n	a5658 <_malloc_r+0x358>
   a582a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   a582e:	227e      	movs	r2, #126	; 0x7e
   a5830:	e712      	b.n	a5658 <_malloc_r+0x358>
   a5832:	687b      	ldr	r3, [r7, #4]
   a5834:	e780      	b.n	a5738 <_malloc_r+0x438>
   a5836:	08f0      	lsrs	r0, r6, #3
   a5838:	f106 0308 	add.w	r3, r6, #8
   a583c:	e60e      	b.n	a545c <_malloc_r+0x15c>
   a583e:	bf00      	nop
   a5840:	20072f34 	.word	0x20072f34

000a5844 <__ascii_mbtowc>:
   a5844:	b082      	sub	sp, #8
   a5846:	b149      	cbz	r1, a585c <__ascii_mbtowc+0x18>
   a5848:	b15a      	cbz	r2, a5862 <__ascii_mbtowc+0x1e>
   a584a:	b16b      	cbz	r3, a5868 <__ascii_mbtowc+0x24>
   a584c:	7813      	ldrb	r3, [r2, #0]
   a584e:	600b      	str	r3, [r1, #0]
   a5850:	7812      	ldrb	r2, [r2, #0]
   a5852:	1c10      	adds	r0, r2, #0
   a5854:	bf18      	it	ne
   a5856:	2001      	movne	r0, #1
   a5858:	b002      	add	sp, #8
   a585a:	4770      	bx	lr
   a585c:	a901      	add	r1, sp, #4
   a585e:	2a00      	cmp	r2, #0
   a5860:	d1f3      	bne.n	a584a <__ascii_mbtowc+0x6>
   a5862:	4610      	mov	r0, r2
   a5864:	b002      	add	sp, #8
   a5866:	4770      	bx	lr
   a5868:	f06f 0001 	mvn.w	r0, #1
   a586c:	e7f4      	b.n	a5858 <__ascii_mbtowc+0x14>
   a586e:	bf00      	nop

000a5870 <memcpy>:
   a5870:	4684      	mov	ip, r0
   a5872:	ea41 0300 	orr.w	r3, r1, r0
   a5876:	f013 0303 	ands.w	r3, r3, #3
   a587a:	d149      	bne.n	a5910 <memcpy+0xa0>
   a587c:	3a40      	subs	r2, #64	; 0x40
   a587e:	d323      	bcc.n	a58c8 <memcpy+0x58>
   a5880:	680b      	ldr	r3, [r1, #0]
   a5882:	6003      	str	r3, [r0, #0]
   a5884:	684b      	ldr	r3, [r1, #4]
   a5886:	6043      	str	r3, [r0, #4]
   a5888:	688b      	ldr	r3, [r1, #8]
   a588a:	6083      	str	r3, [r0, #8]
   a588c:	68cb      	ldr	r3, [r1, #12]
   a588e:	60c3      	str	r3, [r0, #12]
   a5890:	690b      	ldr	r3, [r1, #16]
   a5892:	6103      	str	r3, [r0, #16]
   a5894:	694b      	ldr	r3, [r1, #20]
   a5896:	6143      	str	r3, [r0, #20]
   a5898:	698b      	ldr	r3, [r1, #24]
   a589a:	6183      	str	r3, [r0, #24]
   a589c:	69cb      	ldr	r3, [r1, #28]
   a589e:	61c3      	str	r3, [r0, #28]
   a58a0:	6a0b      	ldr	r3, [r1, #32]
   a58a2:	6203      	str	r3, [r0, #32]
   a58a4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   a58a6:	6243      	str	r3, [r0, #36]	; 0x24
   a58a8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   a58aa:	6283      	str	r3, [r0, #40]	; 0x28
   a58ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   a58ae:	62c3      	str	r3, [r0, #44]	; 0x2c
   a58b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   a58b2:	6303      	str	r3, [r0, #48]	; 0x30
   a58b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   a58b6:	6343      	str	r3, [r0, #52]	; 0x34
   a58b8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   a58ba:	6383      	str	r3, [r0, #56]	; 0x38
   a58bc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   a58be:	63c3      	str	r3, [r0, #60]	; 0x3c
   a58c0:	3040      	adds	r0, #64	; 0x40
   a58c2:	3140      	adds	r1, #64	; 0x40
   a58c4:	3a40      	subs	r2, #64	; 0x40
   a58c6:	d2db      	bcs.n	a5880 <memcpy+0x10>
   a58c8:	3230      	adds	r2, #48	; 0x30
   a58ca:	d30b      	bcc.n	a58e4 <memcpy+0x74>
   a58cc:	680b      	ldr	r3, [r1, #0]
   a58ce:	6003      	str	r3, [r0, #0]
   a58d0:	684b      	ldr	r3, [r1, #4]
   a58d2:	6043      	str	r3, [r0, #4]
   a58d4:	688b      	ldr	r3, [r1, #8]
   a58d6:	6083      	str	r3, [r0, #8]
   a58d8:	68cb      	ldr	r3, [r1, #12]
   a58da:	60c3      	str	r3, [r0, #12]
   a58dc:	3010      	adds	r0, #16
   a58de:	3110      	adds	r1, #16
   a58e0:	3a10      	subs	r2, #16
   a58e2:	d2f3      	bcs.n	a58cc <memcpy+0x5c>
   a58e4:	320c      	adds	r2, #12
   a58e6:	d305      	bcc.n	a58f4 <memcpy+0x84>
   a58e8:	f851 3b04 	ldr.w	r3, [r1], #4
   a58ec:	f840 3b04 	str.w	r3, [r0], #4
   a58f0:	3a04      	subs	r2, #4
   a58f2:	d2f9      	bcs.n	a58e8 <memcpy+0x78>
   a58f4:	3204      	adds	r2, #4
   a58f6:	d008      	beq.n	a590a <memcpy+0x9a>
   a58f8:	07d2      	lsls	r2, r2, #31
   a58fa:	bf1c      	itt	ne
   a58fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a5900:	f800 3b01 	strbne.w	r3, [r0], #1
   a5904:	d301      	bcc.n	a590a <memcpy+0x9a>
   a5906:	880b      	ldrh	r3, [r1, #0]
   a5908:	8003      	strh	r3, [r0, #0]
   a590a:	4660      	mov	r0, ip
   a590c:	4770      	bx	lr
   a590e:	bf00      	nop
   a5910:	2a08      	cmp	r2, #8
   a5912:	d313      	bcc.n	a593c <memcpy+0xcc>
   a5914:	078b      	lsls	r3, r1, #30
   a5916:	d0b1      	beq.n	a587c <memcpy+0xc>
   a5918:	f010 0303 	ands.w	r3, r0, #3
   a591c:	d0ae      	beq.n	a587c <memcpy+0xc>
   a591e:	f1c3 0304 	rsb	r3, r3, #4
   a5922:	1ad2      	subs	r2, r2, r3
   a5924:	07db      	lsls	r3, r3, #31
   a5926:	bf1c      	itt	ne
   a5928:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a592c:	f800 3b01 	strbne.w	r3, [r0], #1
   a5930:	d3a4      	bcc.n	a587c <memcpy+0xc>
   a5932:	f831 3b02 	ldrh.w	r3, [r1], #2
   a5936:	f820 3b02 	strh.w	r3, [r0], #2
   a593a:	e79f      	b.n	a587c <memcpy+0xc>
   a593c:	3a04      	subs	r2, #4
   a593e:	d3d9      	bcc.n	a58f4 <memcpy+0x84>
   a5940:	3a01      	subs	r2, #1
   a5942:	f811 3b01 	ldrb.w	r3, [r1], #1
   a5946:	f800 3b01 	strb.w	r3, [r0], #1
   a594a:	d2f9      	bcs.n	a5940 <memcpy+0xd0>
   a594c:	780b      	ldrb	r3, [r1, #0]
   a594e:	7003      	strb	r3, [r0, #0]
   a5950:	784b      	ldrb	r3, [r1, #1]
   a5952:	7043      	strb	r3, [r0, #1]
   a5954:	788b      	ldrb	r3, [r1, #2]
   a5956:	7083      	strb	r3, [r0, #2]
   a5958:	4660      	mov	r0, ip
   a595a:	4770      	bx	lr

000a595c <memmove>:
   a595c:	4288      	cmp	r0, r1
   a595e:	b5f0      	push	{r4, r5, r6, r7, lr}
   a5960:	d90d      	bls.n	a597e <memmove+0x22>
   a5962:	188b      	adds	r3, r1, r2
   a5964:	4298      	cmp	r0, r3
   a5966:	d20a      	bcs.n	a597e <memmove+0x22>
   a5968:	1884      	adds	r4, r0, r2
   a596a:	2a00      	cmp	r2, #0
   a596c:	d051      	beq.n	a5a12 <memmove+0xb6>
   a596e:	4622      	mov	r2, r4
   a5970:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   a5974:	4299      	cmp	r1, r3
   a5976:	f802 4d01 	strb.w	r4, [r2, #-1]!
   a597a:	d1f9      	bne.n	a5970 <memmove+0x14>
   a597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a597e:	2a0f      	cmp	r2, #15
   a5980:	d948      	bls.n	a5a14 <memmove+0xb8>
   a5982:	ea41 0300 	orr.w	r3, r1, r0
   a5986:	079b      	lsls	r3, r3, #30
   a5988:	d146      	bne.n	a5a18 <memmove+0xbc>
   a598a:	4615      	mov	r5, r2
   a598c:	f100 0410 	add.w	r4, r0, #16
   a5990:	f101 0310 	add.w	r3, r1, #16
   a5994:	f853 6c10 	ldr.w	r6, [r3, #-16]
   a5998:	3d10      	subs	r5, #16
   a599a:	f844 6c10 	str.w	r6, [r4, #-16]
   a599e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   a59a2:	2d0f      	cmp	r5, #15
   a59a4:	f844 6c0c 	str.w	r6, [r4, #-12]
   a59a8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   a59ac:	f104 0410 	add.w	r4, r4, #16
   a59b0:	f844 6c18 	str.w	r6, [r4, #-24]
   a59b4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   a59b8:	f103 0310 	add.w	r3, r3, #16
   a59bc:	f844 6c14 	str.w	r6, [r4, #-20]
   a59c0:	d8e8      	bhi.n	a5994 <memmove+0x38>
   a59c2:	f1a2 0310 	sub.w	r3, r2, #16
   a59c6:	f023 030f 	bic.w	r3, r3, #15
   a59ca:	f002 0e0f 	and.w	lr, r2, #15
   a59ce:	3310      	adds	r3, #16
   a59d0:	f1be 0f03 	cmp.w	lr, #3
   a59d4:	4419      	add	r1, r3
   a59d6:	4403      	add	r3, r0
   a59d8:	d921      	bls.n	a5a1e <memmove+0xc2>
   a59da:	460e      	mov	r6, r1
   a59dc:	4674      	mov	r4, lr
   a59de:	1f1d      	subs	r5, r3, #4
   a59e0:	f856 7b04 	ldr.w	r7, [r6], #4
   a59e4:	3c04      	subs	r4, #4
   a59e6:	2c03      	cmp	r4, #3
   a59e8:	f845 7f04 	str.w	r7, [r5, #4]!
   a59ec:	d8f8      	bhi.n	a59e0 <memmove+0x84>
   a59ee:	f1ae 0404 	sub.w	r4, lr, #4
   a59f2:	f024 0403 	bic.w	r4, r4, #3
   a59f6:	3404      	adds	r4, #4
   a59f8:	4421      	add	r1, r4
   a59fa:	4423      	add	r3, r4
   a59fc:	f002 0203 	and.w	r2, r2, #3
   a5a00:	b162      	cbz	r2, a5a1c <memmove+0xc0>
   a5a02:	3b01      	subs	r3, #1
   a5a04:	440a      	add	r2, r1
   a5a06:	f811 4b01 	ldrb.w	r4, [r1], #1
   a5a0a:	428a      	cmp	r2, r1
   a5a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
   a5a10:	d1f9      	bne.n	a5a06 <memmove+0xaa>
   a5a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a5a14:	4603      	mov	r3, r0
   a5a16:	e7f3      	b.n	a5a00 <memmove+0xa4>
   a5a18:	4603      	mov	r3, r0
   a5a1a:	e7f2      	b.n	a5a02 <memmove+0xa6>
   a5a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a5a1e:	4672      	mov	r2, lr
   a5a20:	e7ee      	b.n	a5a00 <memmove+0xa4>
   a5a22:	bf00      	nop

000a5a24 <memset>:
   a5a24:	b470      	push	{r4, r5, r6}
   a5a26:	0786      	lsls	r6, r0, #30
   a5a28:	d046      	beq.n	a5ab8 <memset+0x94>
   a5a2a:	1e54      	subs	r4, r2, #1
   a5a2c:	2a00      	cmp	r2, #0
   a5a2e:	d041      	beq.n	a5ab4 <memset+0x90>
   a5a30:	b2ca      	uxtb	r2, r1
   a5a32:	4603      	mov	r3, r0
   a5a34:	e002      	b.n	a5a3c <memset+0x18>
   a5a36:	f114 34ff 	adds.w	r4, r4, #4294967295
   a5a3a:	d33b      	bcc.n	a5ab4 <memset+0x90>
   a5a3c:	f803 2b01 	strb.w	r2, [r3], #1
   a5a40:	079d      	lsls	r5, r3, #30
   a5a42:	d1f8      	bne.n	a5a36 <memset+0x12>
   a5a44:	2c03      	cmp	r4, #3
   a5a46:	d92e      	bls.n	a5aa6 <memset+0x82>
   a5a48:	b2cd      	uxtb	r5, r1
   a5a4a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   a5a4e:	2c0f      	cmp	r4, #15
   a5a50:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   a5a54:	d919      	bls.n	a5a8a <memset+0x66>
   a5a56:	4626      	mov	r6, r4
   a5a58:	f103 0210 	add.w	r2, r3, #16
   a5a5c:	3e10      	subs	r6, #16
   a5a5e:	2e0f      	cmp	r6, #15
   a5a60:	f842 5c10 	str.w	r5, [r2, #-16]
   a5a64:	f842 5c0c 	str.w	r5, [r2, #-12]
   a5a68:	f842 5c08 	str.w	r5, [r2, #-8]
   a5a6c:	f842 5c04 	str.w	r5, [r2, #-4]
   a5a70:	f102 0210 	add.w	r2, r2, #16
   a5a74:	d8f2      	bhi.n	a5a5c <memset+0x38>
   a5a76:	f1a4 0210 	sub.w	r2, r4, #16
   a5a7a:	f022 020f 	bic.w	r2, r2, #15
   a5a7e:	f004 040f 	and.w	r4, r4, #15
   a5a82:	3210      	adds	r2, #16
   a5a84:	2c03      	cmp	r4, #3
   a5a86:	4413      	add	r3, r2
   a5a88:	d90d      	bls.n	a5aa6 <memset+0x82>
   a5a8a:	461e      	mov	r6, r3
   a5a8c:	4622      	mov	r2, r4
   a5a8e:	3a04      	subs	r2, #4
   a5a90:	2a03      	cmp	r2, #3
   a5a92:	f846 5b04 	str.w	r5, [r6], #4
   a5a96:	d8fa      	bhi.n	a5a8e <memset+0x6a>
   a5a98:	1f22      	subs	r2, r4, #4
   a5a9a:	f022 0203 	bic.w	r2, r2, #3
   a5a9e:	3204      	adds	r2, #4
   a5aa0:	4413      	add	r3, r2
   a5aa2:	f004 0403 	and.w	r4, r4, #3
   a5aa6:	b12c      	cbz	r4, a5ab4 <memset+0x90>
   a5aa8:	b2c9      	uxtb	r1, r1
   a5aaa:	441c      	add	r4, r3
   a5aac:	f803 1b01 	strb.w	r1, [r3], #1
   a5ab0:	429c      	cmp	r4, r3
   a5ab2:	d1fb      	bne.n	a5aac <memset+0x88>
   a5ab4:	bc70      	pop	{r4, r5, r6}
   a5ab6:	4770      	bx	lr
   a5ab8:	4614      	mov	r4, r2
   a5aba:	4603      	mov	r3, r0
   a5abc:	e7c2      	b.n	a5a44 <memset+0x20>
   a5abe:	bf00      	nop

000a5ac0 <__malloc_lock>:
   a5ac0:	4801      	ldr	r0, [pc, #4]	; (a5ac8 <__malloc_lock+0x8>)
   a5ac2:	f000 bbb3 	b.w	a622c <__retarget_lock_acquire_recursive>
   a5ac6:	bf00      	nop
   a5ac8:	20072fc8 	.word	0x20072fc8

000a5acc <__malloc_unlock>:
   a5acc:	4801      	ldr	r0, [pc, #4]	; (a5ad4 <__malloc_unlock+0x8>)
   a5ace:	f000 bbaf 	b.w	a6230 <__retarget_lock_release_recursive>
   a5ad2:	bf00      	nop
   a5ad4:	20072fc8 	.word	0x20072fc8

000a5ad8 <realloc>:
   a5ad8:	4b02      	ldr	r3, [pc, #8]	; (a5ae4 <realloc+0xc>)
   a5ada:	460a      	mov	r2, r1
   a5adc:	4601      	mov	r1, r0
   a5ade:	6818      	ldr	r0, [r3, #0]
   a5ae0:	f000 b802 	b.w	a5ae8 <_realloc_r>
   a5ae4:	20070270 	.word	0x20070270

000a5ae8 <_realloc_r>:
   a5ae8:	2900      	cmp	r1, #0
   a5aea:	f000 8094 	beq.w	a5c16 <_realloc_r+0x12e>
   a5aee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a5af2:	460c      	mov	r4, r1
   a5af4:	4615      	mov	r5, r2
   a5af6:	b083      	sub	sp, #12
   a5af8:	4680      	mov	r8, r0
   a5afa:	f105 060b 	add.w	r6, r5, #11
   a5afe:	f7ff ffdf 	bl	a5ac0 <__malloc_lock>
   a5b02:	f854 ec04 	ldr.w	lr, [r4, #-4]
   a5b06:	2e16      	cmp	r6, #22
   a5b08:	f02e 0703 	bic.w	r7, lr, #3
   a5b0c:	f1a4 0908 	sub.w	r9, r4, #8
   a5b10:	d83c      	bhi.n	a5b8c <_realloc_r+0xa4>
   a5b12:	2210      	movs	r2, #16
   a5b14:	4616      	mov	r6, r2
   a5b16:	42b5      	cmp	r5, r6
   a5b18:	d83d      	bhi.n	a5b96 <_realloc_r+0xae>
   a5b1a:	4297      	cmp	r7, r2
   a5b1c:	da43      	bge.n	a5ba6 <_realloc_r+0xbe>
   a5b1e:	4bc6      	ldr	r3, [pc, #792]	; (a5e38 <_realloc_r+0x350>)
   a5b20:	eb09 0007 	add.w	r0, r9, r7
   a5b24:	6899      	ldr	r1, [r3, #8]
   a5b26:	4288      	cmp	r0, r1
   a5b28:	f000 80c3 	beq.w	a5cb2 <_realloc_r+0x1ca>
   a5b2c:	6843      	ldr	r3, [r0, #4]
   a5b2e:	f023 0101 	bic.w	r1, r3, #1
   a5b32:	4401      	add	r1, r0
   a5b34:	6849      	ldr	r1, [r1, #4]
   a5b36:	07c9      	lsls	r1, r1, #31
   a5b38:	d54d      	bpl.n	a5bd6 <_realloc_r+0xee>
   a5b3a:	f01e 0f01 	tst.w	lr, #1
   a5b3e:	f000 809b 	beq.w	a5c78 <_realloc_r+0x190>
   a5b42:	4629      	mov	r1, r5
   a5b44:	4640      	mov	r0, r8
   a5b46:	f7ff fbdb 	bl	a5300 <_malloc_r>
   a5b4a:	4605      	mov	r5, r0
   a5b4c:	2800      	cmp	r0, #0
   a5b4e:	d03b      	beq.n	a5bc8 <_realloc_r+0xe0>
   a5b50:	f854 3c04 	ldr.w	r3, [r4, #-4]
   a5b54:	f1a0 0208 	sub.w	r2, r0, #8
   a5b58:	f023 0301 	bic.w	r3, r3, #1
   a5b5c:	444b      	add	r3, r9
   a5b5e:	429a      	cmp	r2, r3
   a5b60:	f000 812b 	beq.w	a5dba <_realloc_r+0x2d2>
   a5b64:	1f3a      	subs	r2, r7, #4
   a5b66:	2a24      	cmp	r2, #36	; 0x24
   a5b68:	f200 8118 	bhi.w	a5d9c <_realloc_r+0x2b4>
   a5b6c:	2a13      	cmp	r2, #19
   a5b6e:	f200 80eb 	bhi.w	a5d48 <_realloc_r+0x260>
   a5b72:	4603      	mov	r3, r0
   a5b74:	4622      	mov	r2, r4
   a5b76:	6811      	ldr	r1, [r2, #0]
   a5b78:	6019      	str	r1, [r3, #0]
   a5b7a:	6851      	ldr	r1, [r2, #4]
   a5b7c:	6059      	str	r1, [r3, #4]
   a5b7e:	6892      	ldr	r2, [r2, #8]
   a5b80:	609a      	str	r2, [r3, #8]
   a5b82:	4621      	mov	r1, r4
   a5b84:	4640      	mov	r0, r8
   a5b86:	f000 fa6b 	bl	a6060 <_free_r>
   a5b8a:	e01d      	b.n	a5bc8 <_realloc_r+0xe0>
   a5b8c:	f026 0607 	bic.w	r6, r6, #7
   a5b90:	2e00      	cmp	r6, #0
   a5b92:	4632      	mov	r2, r6
   a5b94:	dabf      	bge.n	a5b16 <_realloc_r+0x2e>
   a5b96:	2500      	movs	r5, #0
   a5b98:	230c      	movs	r3, #12
   a5b9a:	4628      	mov	r0, r5
   a5b9c:	f8c8 3000 	str.w	r3, [r8]
   a5ba0:	b003      	add	sp, #12
   a5ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a5ba6:	4625      	mov	r5, r4
   a5ba8:	1bbb      	subs	r3, r7, r6
   a5baa:	2b0f      	cmp	r3, #15
   a5bac:	f8d9 2004 	ldr.w	r2, [r9, #4]
   a5bb0:	d81d      	bhi.n	a5bee <_realloc_r+0x106>
   a5bb2:	f002 0201 	and.w	r2, r2, #1
   a5bb6:	433a      	orrs	r2, r7
   a5bb8:	eb09 0107 	add.w	r1, r9, r7
   a5bbc:	f8c9 2004 	str.w	r2, [r9, #4]
   a5bc0:	684b      	ldr	r3, [r1, #4]
   a5bc2:	f043 0301 	orr.w	r3, r3, #1
   a5bc6:	604b      	str	r3, [r1, #4]
   a5bc8:	4640      	mov	r0, r8
   a5bca:	f7ff ff7f 	bl	a5acc <__malloc_unlock>
   a5bce:	4628      	mov	r0, r5
   a5bd0:	b003      	add	sp, #12
   a5bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a5bd6:	f023 0303 	bic.w	r3, r3, #3
   a5bda:	18f9      	adds	r1, r7, r3
   a5bdc:	4291      	cmp	r1, r2
   a5bde:	db1d      	blt.n	a5c1c <_realloc_r+0x134>
   a5be0:	68c3      	ldr	r3, [r0, #12]
   a5be2:	6882      	ldr	r2, [r0, #8]
   a5be4:	4625      	mov	r5, r4
   a5be6:	60d3      	str	r3, [r2, #12]
   a5be8:	460f      	mov	r7, r1
   a5bea:	609a      	str	r2, [r3, #8]
   a5bec:	e7dc      	b.n	a5ba8 <_realloc_r+0xc0>
   a5bee:	f002 0201 	and.w	r2, r2, #1
   a5bf2:	eb09 0106 	add.w	r1, r9, r6
   a5bf6:	f043 0301 	orr.w	r3, r3, #1
   a5bfa:	4332      	orrs	r2, r6
   a5bfc:	f8c9 2004 	str.w	r2, [r9, #4]
   a5c00:	444f      	add	r7, r9
   a5c02:	604b      	str	r3, [r1, #4]
   a5c04:	687b      	ldr	r3, [r7, #4]
   a5c06:	3108      	adds	r1, #8
   a5c08:	f043 0301 	orr.w	r3, r3, #1
   a5c0c:	607b      	str	r3, [r7, #4]
   a5c0e:	4640      	mov	r0, r8
   a5c10:	f000 fa26 	bl	a6060 <_free_r>
   a5c14:	e7d8      	b.n	a5bc8 <_realloc_r+0xe0>
   a5c16:	4611      	mov	r1, r2
   a5c18:	f7ff bb72 	b.w	a5300 <_malloc_r>
   a5c1c:	f01e 0f01 	tst.w	lr, #1
   a5c20:	d18f      	bne.n	a5b42 <_realloc_r+0x5a>
   a5c22:	f854 1c08 	ldr.w	r1, [r4, #-8]
   a5c26:	eba9 0a01 	sub.w	sl, r9, r1
   a5c2a:	f8da 1004 	ldr.w	r1, [sl, #4]
   a5c2e:	f021 0103 	bic.w	r1, r1, #3
   a5c32:	440b      	add	r3, r1
   a5c34:	443b      	add	r3, r7
   a5c36:	4293      	cmp	r3, r2
   a5c38:	db26      	blt.n	a5c88 <_realloc_r+0x1a0>
   a5c3a:	4655      	mov	r5, sl
   a5c3c:	68c1      	ldr	r1, [r0, #12]
   a5c3e:	6880      	ldr	r0, [r0, #8]
   a5c40:	1f3a      	subs	r2, r7, #4
   a5c42:	60c1      	str	r1, [r0, #12]
   a5c44:	6088      	str	r0, [r1, #8]
   a5c46:	f855 0f08 	ldr.w	r0, [r5, #8]!
   a5c4a:	f8da 100c 	ldr.w	r1, [sl, #12]
   a5c4e:	2a24      	cmp	r2, #36	; 0x24
   a5c50:	60c1      	str	r1, [r0, #12]
   a5c52:	6088      	str	r0, [r1, #8]
   a5c54:	d826      	bhi.n	a5ca4 <_realloc_r+0x1bc>
   a5c56:	2a13      	cmp	r2, #19
   a5c58:	f240 8081 	bls.w	a5d5e <_realloc_r+0x276>
   a5c5c:	6821      	ldr	r1, [r4, #0]
   a5c5e:	2a1b      	cmp	r2, #27
   a5c60:	f8ca 1008 	str.w	r1, [sl, #8]
   a5c64:	6861      	ldr	r1, [r4, #4]
   a5c66:	f8ca 100c 	str.w	r1, [sl, #12]
   a5c6a:	f200 80ad 	bhi.w	a5dc8 <_realloc_r+0x2e0>
   a5c6e:	f104 0008 	add.w	r0, r4, #8
   a5c72:	f10a 0210 	add.w	r2, sl, #16
   a5c76:	e074      	b.n	a5d62 <_realloc_r+0x27a>
   a5c78:	f854 3c08 	ldr.w	r3, [r4, #-8]
   a5c7c:	eba9 0a03 	sub.w	sl, r9, r3
   a5c80:	f8da 1004 	ldr.w	r1, [sl, #4]
   a5c84:	f021 0103 	bic.w	r1, r1, #3
   a5c88:	187b      	adds	r3, r7, r1
   a5c8a:	4293      	cmp	r3, r2
   a5c8c:	f6ff af59 	blt.w	a5b42 <_realloc_r+0x5a>
   a5c90:	4655      	mov	r5, sl
   a5c92:	f8da 100c 	ldr.w	r1, [sl, #12]
   a5c96:	f855 0f08 	ldr.w	r0, [r5, #8]!
   a5c9a:	1f3a      	subs	r2, r7, #4
   a5c9c:	2a24      	cmp	r2, #36	; 0x24
   a5c9e:	60c1      	str	r1, [r0, #12]
   a5ca0:	6088      	str	r0, [r1, #8]
   a5ca2:	d9d8      	bls.n	a5c56 <_realloc_r+0x16e>
   a5ca4:	4621      	mov	r1, r4
   a5ca6:	4628      	mov	r0, r5
   a5ca8:	461f      	mov	r7, r3
   a5caa:	46d1      	mov	r9, sl
   a5cac:	f7ff fe56 	bl	a595c <memmove>
   a5cb0:	e77a      	b.n	a5ba8 <_realloc_r+0xc0>
   a5cb2:	6841      	ldr	r1, [r0, #4]
   a5cb4:	f106 0010 	add.w	r0, r6, #16
   a5cb8:	f021 0b03 	bic.w	fp, r1, #3
   a5cbc:	44bb      	add	fp, r7
   a5cbe:	4583      	cmp	fp, r0
   a5cc0:	da58      	bge.n	a5d74 <_realloc_r+0x28c>
   a5cc2:	f01e 0f01 	tst.w	lr, #1
   a5cc6:	f47f af3c 	bne.w	a5b42 <_realloc_r+0x5a>
   a5cca:	f854 1c08 	ldr.w	r1, [r4, #-8]
   a5cce:	eba9 0a01 	sub.w	sl, r9, r1
   a5cd2:	f8da 1004 	ldr.w	r1, [sl, #4]
   a5cd6:	f021 0103 	bic.w	r1, r1, #3
   a5cda:	448b      	add	fp, r1
   a5cdc:	4558      	cmp	r0, fp
   a5cde:	dcd3      	bgt.n	a5c88 <_realloc_r+0x1a0>
   a5ce0:	4655      	mov	r5, sl
   a5ce2:	f8da 100c 	ldr.w	r1, [sl, #12]
   a5ce6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   a5cea:	1f3a      	subs	r2, r7, #4
   a5cec:	2a24      	cmp	r2, #36	; 0x24
   a5cee:	60c1      	str	r1, [r0, #12]
   a5cf0:	6088      	str	r0, [r1, #8]
   a5cf2:	f200 808d 	bhi.w	a5e10 <_realloc_r+0x328>
   a5cf6:	2a13      	cmp	r2, #19
   a5cf8:	f240 8087 	bls.w	a5e0a <_realloc_r+0x322>
   a5cfc:	6821      	ldr	r1, [r4, #0]
   a5cfe:	2a1b      	cmp	r2, #27
   a5d00:	f8ca 1008 	str.w	r1, [sl, #8]
   a5d04:	6861      	ldr	r1, [r4, #4]
   a5d06:	f8ca 100c 	str.w	r1, [sl, #12]
   a5d0a:	f200 8088 	bhi.w	a5e1e <_realloc_r+0x336>
   a5d0e:	f104 0108 	add.w	r1, r4, #8
   a5d12:	f10a 0210 	add.w	r2, sl, #16
   a5d16:	6808      	ldr	r0, [r1, #0]
   a5d18:	6010      	str	r0, [r2, #0]
   a5d1a:	6848      	ldr	r0, [r1, #4]
   a5d1c:	6050      	str	r0, [r2, #4]
   a5d1e:	6889      	ldr	r1, [r1, #8]
   a5d20:	6091      	str	r1, [r2, #8]
   a5d22:	ebab 0206 	sub.w	r2, fp, r6
   a5d26:	eb0a 0106 	add.w	r1, sl, r6
   a5d2a:	f042 0201 	orr.w	r2, r2, #1
   a5d2e:	6099      	str	r1, [r3, #8]
   a5d30:	604a      	str	r2, [r1, #4]
   a5d32:	f8da 3004 	ldr.w	r3, [sl, #4]
   a5d36:	4640      	mov	r0, r8
   a5d38:	f003 0301 	and.w	r3, r3, #1
   a5d3c:	431e      	orrs	r6, r3
   a5d3e:	f8ca 6004 	str.w	r6, [sl, #4]
   a5d42:	f7ff fec3 	bl	a5acc <__malloc_unlock>
   a5d46:	e742      	b.n	a5bce <_realloc_r+0xe6>
   a5d48:	6823      	ldr	r3, [r4, #0]
   a5d4a:	2a1b      	cmp	r2, #27
   a5d4c:	6003      	str	r3, [r0, #0]
   a5d4e:	6863      	ldr	r3, [r4, #4]
   a5d50:	6043      	str	r3, [r0, #4]
   a5d52:	d827      	bhi.n	a5da4 <_realloc_r+0x2bc>
   a5d54:	f100 0308 	add.w	r3, r0, #8
   a5d58:	f104 0208 	add.w	r2, r4, #8
   a5d5c:	e70b      	b.n	a5b76 <_realloc_r+0x8e>
   a5d5e:	4620      	mov	r0, r4
   a5d60:	462a      	mov	r2, r5
   a5d62:	6801      	ldr	r1, [r0, #0]
   a5d64:	461f      	mov	r7, r3
   a5d66:	6011      	str	r1, [r2, #0]
   a5d68:	6841      	ldr	r1, [r0, #4]
   a5d6a:	46d1      	mov	r9, sl
   a5d6c:	6051      	str	r1, [r2, #4]
   a5d6e:	6883      	ldr	r3, [r0, #8]
   a5d70:	6093      	str	r3, [r2, #8]
   a5d72:	e719      	b.n	a5ba8 <_realloc_r+0xc0>
   a5d74:	ebab 0b06 	sub.w	fp, fp, r6
   a5d78:	eb09 0106 	add.w	r1, r9, r6
   a5d7c:	f04b 0201 	orr.w	r2, fp, #1
   a5d80:	6099      	str	r1, [r3, #8]
   a5d82:	604a      	str	r2, [r1, #4]
   a5d84:	f854 3c04 	ldr.w	r3, [r4, #-4]
   a5d88:	4640      	mov	r0, r8
   a5d8a:	f003 0301 	and.w	r3, r3, #1
   a5d8e:	431e      	orrs	r6, r3
   a5d90:	f844 6c04 	str.w	r6, [r4, #-4]
   a5d94:	f7ff fe9a 	bl	a5acc <__malloc_unlock>
   a5d98:	4625      	mov	r5, r4
   a5d9a:	e718      	b.n	a5bce <_realloc_r+0xe6>
   a5d9c:	4621      	mov	r1, r4
   a5d9e:	f7ff fddd 	bl	a595c <memmove>
   a5da2:	e6ee      	b.n	a5b82 <_realloc_r+0x9a>
   a5da4:	68a3      	ldr	r3, [r4, #8]
   a5da6:	2a24      	cmp	r2, #36	; 0x24
   a5da8:	6083      	str	r3, [r0, #8]
   a5daa:	68e3      	ldr	r3, [r4, #12]
   a5dac:	60c3      	str	r3, [r0, #12]
   a5dae:	d018      	beq.n	a5de2 <_realloc_r+0x2fa>
   a5db0:	f100 0310 	add.w	r3, r0, #16
   a5db4:	f104 0210 	add.w	r2, r4, #16
   a5db8:	e6dd      	b.n	a5b76 <_realloc_r+0x8e>
   a5dba:	f850 3c04 	ldr.w	r3, [r0, #-4]
   a5dbe:	4625      	mov	r5, r4
   a5dc0:	f023 0303 	bic.w	r3, r3, #3
   a5dc4:	441f      	add	r7, r3
   a5dc6:	e6ef      	b.n	a5ba8 <_realloc_r+0xc0>
   a5dc8:	68a1      	ldr	r1, [r4, #8]
   a5dca:	2a24      	cmp	r2, #36	; 0x24
   a5dcc:	f8ca 1010 	str.w	r1, [sl, #16]
   a5dd0:	68e1      	ldr	r1, [r4, #12]
   a5dd2:	f8ca 1014 	str.w	r1, [sl, #20]
   a5dd6:	d00d      	beq.n	a5df4 <_realloc_r+0x30c>
   a5dd8:	f104 0010 	add.w	r0, r4, #16
   a5ddc:	f10a 0218 	add.w	r2, sl, #24
   a5de0:	e7bf      	b.n	a5d62 <_realloc_r+0x27a>
   a5de2:	6922      	ldr	r2, [r4, #16]
   a5de4:	f100 0318 	add.w	r3, r0, #24
   a5de8:	6102      	str	r2, [r0, #16]
   a5dea:	6961      	ldr	r1, [r4, #20]
   a5dec:	f104 0218 	add.w	r2, r4, #24
   a5df0:	6141      	str	r1, [r0, #20]
   a5df2:	e6c0      	b.n	a5b76 <_realloc_r+0x8e>
   a5df4:	6922      	ldr	r2, [r4, #16]
   a5df6:	f104 0018 	add.w	r0, r4, #24
   a5dfa:	f8ca 2018 	str.w	r2, [sl, #24]
   a5dfe:	6961      	ldr	r1, [r4, #20]
   a5e00:	f10a 0220 	add.w	r2, sl, #32
   a5e04:	f8ca 101c 	str.w	r1, [sl, #28]
   a5e08:	e7ab      	b.n	a5d62 <_realloc_r+0x27a>
   a5e0a:	4621      	mov	r1, r4
   a5e0c:	462a      	mov	r2, r5
   a5e0e:	e782      	b.n	a5d16 <_realloc_r+0x22e>
   a5e10:	4621      	mov	r1, r4
   a5e12:	4628      	mov	r0, r5
   a5e14:	9301      	str	r3, [sp, #4]
   a5e16:	f7ff fda1 	bl	a595c <memmove>
   a5e1a:	9b01      	ldr	r3, [sp, #4]
   a5e1c:	e781      	b.n	a5d22 <_realloc_r+0x23a>
   a5e1e:	68a1      	ldr	r1, [r4, #8]
   a5e20:	2a24      	cmp	r2, #36	; 0x24
   a5e22:	f8ca 1010 	str.w	r1, [sl, #16]
   a5e26:	68e1      	ldr	r1, [r4, #12]
   a5e28:	f8ca 1014 	str.w	r1, [sl, #20]
   a5e2c:	d006      	beq.n	a5e3c <_realloc_r+0x354>
   a5e2e:	f104 0110 	add.w	r1, r4, #16
   a5e32:	f10a 0218 	add.w	r2, sl, #24
   a5e36:	e76e      	b.n	a5d16 <_realloc_r+0x22e>
   a5e38:	2007080c 	.word	0x2007080c
   a5e3c:	6922      	ldr	r2, [r4, #16]
   a5e3e:	f104 0118 	add.w	r1, r4, #24
   a5e42:	f8ca 2018 	str.w	r2, [sl, #24]
   a5e46:	6960      	ldr	r0, [r4, #20]
   a5e48:	f10a 0220 	add.w	r2, sl, #32
   a5e4c:	f8ca 001c 	str.w	r0, [sl, #28]
   a5e50:	e761      	b.n	a5d16 <_realloc_r+0x22e>
   a5e52:	bf00      	nop

000a5e54 <_sbrk_r>:
   a5e54:	b538      	push	{r3, r4, r5, lr}
   a5e56:	2300      	movs	r3, #0
   a5e58:	4c06      	ldr	r4, [pc, #24]	; (a5e74 <_sbrk_r+0x20>)
   a5e5a:	4605      	mov	r5, r0
   a5e5c:	4608      	mov	r0, r1
   a5e5e:	6023      	str	r3, [r4, #0]
   a5e60:	f7f9 fa42 	bl	9f2e8 <_sbrk>
   a5e64:	1c43      	adds	r3, r0, #1
   a5e66:	d000      	beq.n	a5e6a <_sbrk_r+0x16>
   a5e68:	bd38      	pop	{r3, r4, r5, pc}
   a5e6a:	6823      	ldr	r3, [r4, #0]
   a5e6c:	2b00      	cmp	r3, #0
   a5e6e:	d0fb      	beq.n	a5e68 <_sbrk_r+0x14>
   a5e70:	602b      	str	r3, [r5, #0]
   a5e72:	bd38      	pop	{r3, r4, r5, pc}
   a5e74:	20072fdc 	.word	0x20072fdc

000a5e78 <strlen>:
   a5e78:	f020 0103 	bic.w	r1, r0, #3
   a5e7c:	f010 0003 	ands.w	r0, r0, #3
   a5e80:	f1c0 0000 	rsb	r0, r0, #0
   a5e84:	f851 3b04 	ldr.w	r3, [r1], #4
   a5e88:	f100 0c04 	add.w	ip, r0, #4
   a5e8c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   a5e90:	f06f 0200 	mvn.w	r2, #0
   a5e94:	bf1c      	itt	ne
   a5e96:	fa22 f20c 	lsrne.w	r2, r2, ip
   a5e9a:	4313      	orrne	r3, r2
   a5e9c:	f04f 0c01 	mov.w	ip, #1
   a5ea0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   a5ea4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   a5ea8:	eba3 020c 	sub.w	r2, r3, ip
   a5eac:	ea22 0203 	bic.w	r2, r2, r3
   a5eb0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   a5eb4:	bf04      	itt	eq
   a5eb6:	f851 3b04 	ldreq.w	r3, [r1], #4
   a5eba:	3004      	addeq	r0, #4
   a5ebc:	d0f4      	beq.n	a5ea8 <strlen+0x30>
   a5ebe:	f1c2 0100 	rsb	r1, r2, #0
   a5ec2:	ea02 0201 	and.w	r2, r2, r1
   a5ec6:	fab2 f282 	clz	r2, r2
   a5eca:	f1c2 021f 	rsb	r2, r2, #31
   a5ece:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   a5ed2:	4770      	bx	lr

000a5ed4 <strncat>:
   a5ed4:	0783      	lsls	r3, r0, #30
   a5ed6:	b430      	push	{r4, r5}
   a5ed8:	d125      	bne.n	a5f26 <strncat+0x52>
   a5eda:	6804      	ldr	r4, [r0, #0]
   a5edc:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   a5ee0:	ea23 0304 	bic.w	r3, r3, r4
   a5ee4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   a5ee8:	4603      	mov	r3, r0
   a5eea:	d108      	bne.n	a5efe <strncat+0x2a>
   a5eec:	f853 5f04 	ldr.w	r5, [r3, #4]!
   a5ef0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   a5ef4:	ea24 0405 	bic.w	r4, r4, r5
   a5ef8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   a5efc:	d0f6      	beq.n	a5eec <strncat+0x18>
   a5efe:	781c      	ldrb	r4, [r3, #0]
   a5f00:	b11c      	cbz	r4, a5f0a <strncat+0x36>
   a5f02:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   a5f06:	2c00      	cmp	r4, #0
   a5f08:	d1fb      	bne.n	a5f02 <strncat+0x2e>
   a5f0a:	188d      	adds	r5, r1, r2
   a5f0c:	e005      	b.n	a5f1a <strncat+0x46>
   a5f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   a5f12:	f803 4b01 	strb.w	r4, [r3], #1
   a5f16:	b124      	cbz	r4, a5f22 <strncat+0x4e>
   a5f18:	b13a      	cbz	r2, a5f2a <strncat+0x56>
   a5f1a:	42a9      	cmp	r1, r5
   a5f1c:	f102 32ff 	add.w	r2, r2, #4294967295
   a5f20:	d1f5      	bne.n	a5f0e <strncat+0x3a>
   a5f22:	bc30      	pop	{r4, r5}
   a5f24:	4770      	bx	lr
   a5f26:	4603      	mov	r3, r0
   a5f28:	e7e9      	b.n	a5efe <strncat+0x2a>
   a5f2a:	701a      	strb	r2, [r3, #0]
   a5f2c:	e7f9      	b.n	a5f22 <strncat+0x4e>
   a5f2e:	bf00      	nop

000a5f30 <strrchr>:
   a5f30:	b171      	cbz	r1, a5f50 <strrchr+0x20>
   a5f32:	b538      	push	{r3, r4, r5, lr}
   a5f34:	4603      	mov	r3, r0
   a5f36:	460c      	mov	r4, r1
   a5f38:	2500      	movs	r5, #0
   a5f3a:	e001      	b.n	a5f40 <strrchr+0x10>
   a5f3c:	4605      	mov	r5, r0
   a5f3e:	1c43      	adds	r3, r0, #1
   a5f40:	4618      	mov	r0, r3
   a5f42:	4621      	mov	r1, r4
   a5f44:	f000 f976 	bl	a6234 <strchr>
   a5f48:	2800      	cmp	r0, #0
   a5f4a:	d1f7      	bne.n	a5f3c <strrchr+0xc>
   a5f4c:	4628      	mov	r0, r5
   a5f4e:	bd38      	pop	{r3, r4, r5, pc}
   a5f50:	f000 b970 	b.w	a6234 <strchr>

000a5f54 <__ascii_wctomb>:
   a5f54:	b119      	cbz	r1, a5f5e <__ascii_wctomb+0xa>
   a5f56:	2aff      	cmp	r2, #255	; 0xff
   a5f58:	d803      	bhi.n	a5f62 <__ascii_wctomb+0xe>
   a5f5a:	700a      	strb	r2, [r1, #0]
   a5f5c:	2101      	movs	r1, #1
   a5f5e:	4608      	mov	r0, r1
   a5f60:	4770      	bx	lr
   a5f62:	238a      	movs	r3, #138	; 0x8a
   a5f64:	f04f 31ff 	mov.w	r1, #4294967295
   a5f68:	6003      	str	r3, [r0, #0]
   a5f6a:	e7f8      	b.n	a5f5e <__ascii_wctomb+0xa>

000a5f6c <register_fini>:
   a5f6c:	4b02      	ldr	r3, [pc, #8]	; (a5f78 <register_fini+0xc>)
   a5f6e:	b113      	cbz	r3, a5f76 <register_fini+0xa>
   a5f70:	4802      	ldr	r0, [pc, #8]	; (a5f7c <register_fini+0x10>)
   a5f72:	f000 b805 	b.w	a5f80 <atexit>
   a5f76:	4770      	bx	lr
   a5f78:	00000000 	.word	0x00000000
   a5f7c:	000a5f8d 	.word	0x000a5f8d

000a5f80 <atexit>:
   a5f80:	2300      	movs	r3, #0
   a5f82:	4601      	mov	r1, r0
   a5f84:	461a      	mov	r2, r3
   a5f86:	4618      	mov	r0, r3
   a5f88:	f000 b9c8 	b.w	a631c <__register_exitproc>

000a5f8c <__libc_fini_array>:
   a5f8c:	b538      	push	{r3, r4, r5, lr}
   a5f8e:	4c0a      	ldr	r4, [pc, #40]	; (a5fb8 <__libc_fini_array+0x2c>)
   a5f90:	4d0a      	ldr	r5, [pc, #40]	; (a5fbc <__libc_fini_array+0x30>)
   a5f92:	1b64      	subs	r4, r4, r5
   a5f94:	10a4      	asrs	r4, r4, #2
   a5f96:	d00a      	beq.n	a5fae <__libc_fini_array+0x22>
   a5f98:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   a5f9c:	3b01      	subs	r3, #1
   a5f9e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   a5fa2:	3c01      	subs	r4, #1
   a5fa4:	f855 3904 	ldr.w	r3, [r5], #-4
   a5fa8:	4798      	blx	r3
   a5faa:	2c00      	cmp	r4, #0
   a5fac:	d1f9      	bne.n	a5fa2 <__libc_fini_array+0x16>
   a5fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   a5fb2:	f006 be2d 	b.w	acc10 <_fini>
   a5fb6:	bf00      	nop
   a5fb8:	000acc20 	.word	0x000acc20
   a5fbc:	000acc1c 	.word	0x000acc1c

000a5fc0 <_malloc_trim_r>:
   a5fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a5fc2:	460c      	mov	r4, r1
   a5fc4:	4f23      	ldr	r7, [pc, #140]	; (a6054 <_malloc_trim_r+0x94>)
   a5fc6:	4606      	mov	r6, r0
   a5fc8:	f7ff fd7a 	bl	a5ac0 <__malloc_lock>
   a5fcc:	68bb      	ldr	r3, [r7, #8]
   a5fce:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   a5fd2:	685d      	ldr	r5, [r3, #4]
   a5fd4:	310f      	adds	r1, #15
   a5fd6:	f025 0503 	bic.w	r5, r5, #3
   a5fda:	4429      	add	r1, r5
   a5fdc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   a5fe0:	f021 010f 	bic.w	r1, r1, #15
   a5fe4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   a5fe8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   a5fec:	db07      	blt.n	a5ffe <_malloc_trim_r+0x3e>
   a5fee:	2100      	movs	r1, #0
   a5ff0:	4630      	mov	r0, r6
   a5ff2:	f7ff ff2f 	bl	a5e54 <_sbrk_r>
   a5ff6:	68bb      	ldr	r3, [r7, #8]
   a5ff8:	442b      	add	r3, r5
   a5ffa:	4298      	cmp	r0, r3
   a5ffc:	d004      	beq.n	a6008 <_malloc_trim_r+0x48>
   a5ffe:	4630      	mov	r0, r6
   a6000:	f7ff fd64 	bl	a5acc <__malloc_unlock>
   a6004:	2000      	movs	r0, #0
   a6006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a6008:	4261      	negs	r1, r4
   a600a:	4630      	mov	r0, r6
   a600c:	f7ff ff22 	bl	a5e54 <_sbrk_r>
   a6010:	3001      	adds	r0, #1
   a6012:	d00d      	beq.n	a6030 <_malloc_trim_r+0x70>
   a6014:	4b10      	ldr	r3, [pc, #64]	; (a6058 <_malloc_trim_r+0x98>)
   a6016:	68ba      	ldr	r2, [r7, #8]
   a6018:	6819      	ldr	r1, [r3, #0]
   a601a:	1b2d      	subs	r5, r5, r4
   a601c:	f045 0501 	orr.w	r5, r5, #1
   a6020:	4630      	mov	r0, r6
   a6022:	1b09      	subs	r1, r1, r4
   a6024:	6055      	str	r5, [r2, #4]
   a6026:	6019      	str	r1, [r3, #0]
   a6028:	f7ff fd50 	bl	a5acc <__malloc_unlock>
   a602c:	2001      	movs	r0, #1
   a602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a6030:	2100      	movs	r1, #0
   a6032:	4630      	mov	r0, r6
   a6034:	f7ff ff0e 	bl	a5e54 <_sbrk_r>
   a6038:	68ba      	ldr	r2, [r7, #8]
   a603a:	1a83      	subs	r3, r0, r2
   a603c:	2b0f      	cmp	r3, #15
   a603e:	ddde      	ble.n	a5ffe <_malloc_trim_r+0x3e>
   a6040:	4c06      	ldr	r4, [pc, #24]	; (a605c <_malloc_trim_r+0x9c>)
   a6042:	4905      	ldr	r1, [pc, #20]	; (a6058 <_malloc_trim_r+0x98>)
   a6044:	6824      	ldr	r4, [r4, #0]
   a6046:	f043 0301 	orr.w	r3, r3, #1
   a604a:	1b00      	subs	r0, r0, r4
   a604c:	6053      	str	r3, [r2, #4]
   a604e:	6008      	str	r0, [r1, #0]
   a6050:	e7d5      	b.n	a5ffe <_malloc_trim_r+0x3e>
   a6052:	bf00      	nop
   a6054:	2007080c 	.word	0x2007080c
   a6058:	20072f34 	.word	0x20072f34
   a605c:	20070c14 	.word	0x20070c14

000a6060 <_free_r>:
   a6060:	2900      	cmp	r1, #0
   a6062:	d044      	beq.n	a60ee <_free_r+0x8e>
   a6064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a6068:	460d      	mov	r5, r1
   a606a:	4680      	mov	r8, r0
   a606c:	f7ff fd28 	bl	a5ac0 <__malloc_lock>
   a6070:	f855 7c04 	ldr.w	r7, [r5, #-4]
   a6074:	4969      	ldr	r1, [pc, #420]	; (a621c <_free_r+0x1bc>)
   a6076:	f1a5 0408 	sub.w	r4, r5, #8
   a607a:	f027 0301 	bic.w	r3, r7, #1
   a607e:	18e2      	adds	r2, r4, r3
   a6080:	688e      	ldr	r6, [r1, #8]
   a6082:	6850      	ldr	r0, [r2, #4]
   a6084:	42b2      	cmp	r2, r6
   a6086:	f020 0003 	bic.w	r0, r0, #3
   a608a:	d05e      	beq.n	a614a <_free_r+0xea>
   a608c:	07fe      	lsls	r6, r7, #31
   a608e:	6050      	str	r0, [r2, #4]
   a6090:	d40b      	bmi.n	a60aa <_free_r+0x4a>
   a6092:	f855 7c08 	ldr.w	r7, [r5, #-8]
   a6096:	f101 0e08 	add.w	lr, r1, #8
   a609a:	1be4      	subs	r4, r4, r7
   a609c:	68a5      	ldr	r5, [r4, #8]
   a609e:	443b      	add	r3, r7
   a60a0:	4575      	cmp	r5, lr
   a60a2:	d06d      	beq.n	a6180 <_free_r+0x120>
   a60a4:	68e7      	ldr	r7, [r4, #12]
   a60a6:	60ef      	str	r7, [r5, #12]
   a60a8:	60bd      	str	r5, [r7, #8]
   a60aa:	1815      	adds	r5, r2, r0
   a60ac:	686d      	ldr	r5, [r5, #4]
   a60ae:	07ed      	lsls	r5, r5, #31
   a60b0:	d53e      	bpl.n	a6130 <_free_r+0xd0>
   a60b2:	f043 0201 	orr.w	r2, r3, #1
   a60b6:	6062      	str	r2, [r4, #4]
   a60b8:	50e3      	str	r3, [r4, r3]
   a60ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a60be:	d217      	bcs.n	a60f0 <_free_r+0x90>
   a60c0:	2201      	movs	r2, #1
   a60c2:	08db      	lsrs	r3, r3, #3
   a60c4:	1098      	asrs	r0, r3, #2
   a60c6:	684d      	ldr	r5, [r1, #4]
   a60c8:	4413      	add	r3, r2
   a60ca:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   a60ce:	4082      	lsls	r2, r0
   a60d0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   a60d4:	432a      	orrs	r2, r5
   a60d6:	3808      	subs	r0, #8
   a60d8:	60e0      	str	r0, [r4, #12]
   a60da:	60a7      	str	r7, [r4, #8]
   a60dc:	604a      	str	r2, [r1, #4]
   a60de:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a60e2:	60fc      	str	r4, [r7, #12]
   a60e4:	4640      	mov	r0, r8
   a60e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a60ea:	f7ff bcef 	b.w	a5acc <__malloc_unlock>
   a60ee:	4770      	bx	lr
   a60f0:	0a5a      	lsrs	r2, r3, #9
   a60f2:	2a04      	cmp	r2, #4
   a60f4:	d852      	bhi.n	a619c <_free_r+0x13c>
   a60f6:	099a      	lsrs	r2, r3, #6
   a60f8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   a60fc:	00ff      	lsls	r7, r7, #3
   a60fe:	f102 0538 	add.w	r5, r2, #56	; 0x38
   a6102:	19c8      	adds	r0, r1, r7
   a6104:	59ca      	ldr	r2, [r1, r7]
   a6106:	3808      	subs	r0, #8
   a6108:	4290      	cmp	r0, r2
   a610a:	d04f      	beq.n	a61ac <_free_r+0x14c>
   a610c:	6851      	ldr	r1, [r2, #4]
   a610e:	f021 0103 	bic.w	r1, r1, #3
   a6112:	428b      	cmp	r3, r1
   a6114:	d232      	bcs.n	a617c <_free_r+0x11c>
   a6116:	6892      	ldr	r2, [r2, #8]
   a6118:	4290      	cmp	r0, r2
   a611a:	d1f7      	bne.n	a610c <_free_r+0xac>
   a611c:	68c3      	ldr	r3, [r0, #12]
   a611e:	60a0      	str	r0, [r4, #8]
   a6120:	60e3      	str	r3, [r4, #12]
   a6122:	609c      	str	r4, [r3, #8]
   a6124:	60c4      	str	r4, [r0, #12]
   a6126:	4640      	mov	r0, r8
   a6128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a612c:	f7ff bcce 	b.w	a5acc <__malloc_unlock>
   a6130:	6895      	ldr	r5, [r2, #8]
   a6132:	4f3b      	ldr	r7, [pc, #236]	; (a6220 <_free_r+0x1c0>)
   a6134:	4403      	add	r3, r0
   a6136:	42bd      	cmp	r5, r7
   a6138:	d040      	beq.n	a61bc <_free_r+0x15c>
   a613a:	68d0      	ldr	r0, [r2, #12]
   a613c:	f043 0201 	orr.w	r2, r3, #1
   a6140:	60e8      	str	r0, [r5, #12]
   a6142:	6085      	str	r5, [r0, #8]
   a6144:	6062      	str	r2, [r4, #4]
   a6146:	50e3      	str	r3, [r4, r3]
   a6148:	e7b7      	b.n	a60ba <_free_r+0x5a>
   a614a:	07ff      	lsls	r7, r7, #31
   a614c:	4403      	add	r3, r0
   a614e:	d407      	bmi.n	a6160 <_free_r+0x100>
   a6150:	f855 5c08 	ldr.w	r5, [r5, #-8]
   a6154:	1b64      	subs	r4, r4, r5
   a6156:	68e2      	ldr	r2, [r4, #12]
   a6158:	68a0      	ldr	r0, [r4, #8]
   a615a:	442b      	add	r3, r5
   a615c:	60c2      	str	r2, [r0, #12]
   a615e:	6090      	str	r0, [r2, #8]
   a6160:	4a30      	ldr	r2, [pc, #192]	; (a6224 <_free_r+0x1c4>)
   a6162:	f043 0001 	orr.w	r0, r3, #1
   a6166:	6812      	ldr	r2, [r2, #0]
   a6168:	6060      	str	r0, [r4, #4]
   a616a:	4293      	cmp	r3, r2
   a616c:	608c      	str	r4, [r1, #8]
   a616e:	d3b9      	bcc.n	a60e4 <_free_r+0x84>
   a6170:	4b2d      	ldr	r3, [pc, #180]	; (a6228 <_free_r+0x1c8>)
   a6172:	4640      	mov	r0, r8
   a6174:	6819      	ldr	r1, [r3, #0]
   a6176:	f7ff ff23 	bl	a5fc0 <_malloc_trim_r>
   a617a:	e7b3      	b.n	a60e4 <_free_r+0x84>
   a617c:	4610      	mov	r0, r2
   a617e:	e7cd      	b.n	a611c <_free_r+0xbc>
   a6180:	1811      	adds	r1, r2, r0
   a6182:	6849      	ldr	r1, [r1, #4]
   a6184:	07c9      	lsls	r1, r1, #31
   a6186:	d444      	bmi.n	a6212 <_free_r+0x1b2>
   a6188:	6891      	ldr	r1, [r2, #8]
   a618a:	4403      	add	r3, r0
   a618c:	68d2      	ldr	r2, [r2, #12]
   a618e:	f043 0001 	orr.w	r0, r3, #1
   a6192:	60ca      	str	r2, [r1, #12]
   a6194:	6091      	str	r1, [r2, #8]
   a6196:	6060      	str	r0, [r4, #4]
   a6198:	50e3      	str	r3, [r4, r3]
   a619a:	e7a3      	b.n	a60e4 <_free_r+0x84>
   a619c:	2a14      	cmp	r2, #20
   a619e:	d816      	bhi.n	a61ce <_free_r+0x16e>
   a61a0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   a61a4:	00ff      	lsls	r7, r7, #3
   a61a6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   a61aa:	e7aa      	b.n	a6102 <_free_r+0xa2>
   a61ac:	2301      	movs	r3, #1
   a61ae:	10aa      	asrs	r2, r5, #2
   a61b0:	684d      	ldr	r5, [r1, #4]
   a61b2:	4093      	lsls	r3, r2
   a61b4:	432b      	orrs	r3, r5
   a61b6:	604b      	str	r3, [r1, #4]
   a61b8:	4603      	mov	r3, r0
   a61ba:	e7b0      	b.n	a611e <_free_r+0xbe>
   a61bc:	f043 0201 	orr.w	r2, r3, #1
   a61c0:	614c      	str	r4, [r1, #20]
   a61c2:	610c      	str	r4, [r1, #16]
   a61c4:	60e5      	str	r5, [r4, #12]
   a61c6:	60a5      	str	r5, [r4, #8]
   a61c8:	6062      	str	r2, [r4, #4]
   a61ca:	50e3      	str	r3, [r4, r3]
   a61cc:	e78a      	b.n	a60e4 <_free_r+0x84>
   a61ce:	2a54      	cmp	r2, #84	; 0x54
   a61d0:	d806      	bhi.n	a61e0 <_free_r+0x180>
   a61d2:	0b1a      	lsrs	r2, r3, #12
   a61d4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   a61d8:	00ff      	lsls	r7, r7, #3
   a61da:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   a61de:	e790      	b.n	a6102 <_free_r+0xa2>
   a61e0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a61e4:	d806      	bhi.n	a61f4 <_free_r+0x194>
   a61e6:	0bda      	lsrs	r2, r3, #15
   a61e8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   a61ec:	00ff      	lsls	r7, r7, #3
   a61ee:	f102 0577 	add.w	r5, r2, #119	; 0x77
   a61f2:	e786      	b.n	a6102 <_free_r+0xa2>
   a61f4:	f240 5054 	movw	r0, #1364	; 0x554
   a61f8:	4282      	cmp	r2, r0
   a61fa:	d806      	bhi.n	a620a <_free_r+0x1aa>
   a61fc:	0c9a      	lsrs	r2, r3, #18
   a61fe:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   a6202:	00ff      	lsls	r7, r7, #3
   a6204:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   a6208:	e77b      	b.n	a6102 <_free_r+0xa2>
   a620a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   a620e:	257e      	movs	r5, #126	; 0x7e
   a6210:	e777      	b.n	a6102 <_free_r+0xa2>
   a6212:	f043 0101 	orr.w	r1, r3, #1
   a6216:	6061      	str	r1, [r4, #4]
   a6218:	6013      	str	r3, [r2, #0]
   a621a:	e763      	b.n	a60e4 <_free_r+0x84>
   a621c:	2007080c 	.word	0x2007080c
   a6220:	20070814 	.word	0x20070814
   a6224:	20070c18 	.word	0x20070c18
   a6228:	20072f64 	.word	0x20072f64

000a622c <__retarget_lock_acquire_recursive>:
   a622c:	4770      	bx	lr
   a622e:	bf00      	nop

000a6230 <__retarget_lock_release_recursive>:
   a6230:	4770      	bx	lr
   a6232:	bf00      	nop

000a6234 <strchr>:
   a6234:	b2c9      	uxtb	r1, r1
   a6236:	2900      	cmp	r1, #0
   a6238:	d041      	beq.n	a62be <strchr+0x8a>
   a623a:	0782      	lsls	r2, r0, #30
   a623c:	b4f0      	push	{r4, r5, r6, r7}
   a623e:	d067      	beq.n	a6310 <strchr+0xdc>
   a6240:	7803      	ldrb	r3, [r0, #0]
   a6242:	2b00      	cmp	r3, #0
   a6244:	d068      	beq.n	a6318 <strchr+0xe4>
   a6246:	4299      	cmp	r1, r3
   a6248:	d037      	beq.n	a62ba <strchr+0x86>
   a624a:	1c43      	adds	r3, r0, #1
   a624c:	e004      	b.n	a6258 <strchr+0x24>
   a624e:	f813 0b01 	ldrb.w	r0, [r3], #1
   a6252:	b390      	cbz	r0, a62ba <strchr+0x86>
   a6254:	4281      	cmp	r1, r0
   a6256:	d02f      	beq.n	a62b8 <strchr+0x84>
   a6258:	079a      	lsls	r2, r3, #30
   a625a:	461c      	mov	r4, r3
   a625c:	d1f7      	bne.n	a624e <strchr+0x1a>
   a625e:	6825      	ldr	r5, [r4, #0]
   a6260:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   a6264:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   a6268:	ea83 0605 	eor.w	r6, r3, r5
   a626c:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   a6270:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   a6274:	ea20 0006 	bic.w	r0, r0, r6
   a6278:	ea22 0205 	bic.w	r2, r2, r5
   a627c:	4302      	orrs	r2, r0
   a627e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   a6282:	d111      	bne.n	a62a8 <strchr+0x74>
   a6284:	4620      	mov	r0, r4
   a6286:	f850 6f04 	ldr.w	r6, [r0, #4]!
   a628a:	ea83 0706 	eor.w	r7, r3, r6
   a628e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   a6292:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   a6296:	ea25 0507 	bic.w	r5, r5, r7
   a629a:	ea22 0206 	bic.w	r2, r2, r6
   a629e:	432a      	orrs	r2, r5
   a62a0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   a62a4:	d0ef      	beq.n	a6286 <strchr+0x52>
   a62a6:	4604      	mov	r4, r0
   a62a8:	7820      	ldrb	r0, [r4, #0]
   a62aa:	b918      	cbnz	r0, a62b4 <strchr+0x80>
   a62ac:	e005      	b.n	a62ba <strchr+0x86>
   a62ae:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   a62b2:	b110      	cbz	r0, a62ba <strchr+0x86>
   a62b4:	4281      	cmp	r1, r0
   a62b6:	d1fa      	bne.n	a62ae <strchr+0x7a>
   a62b8:	4620      	mov	r0, r4
   a62ba:	bcf0      	pop	{r4, r5, r6, r7}
   a62bc:	4770      	bx	lr
   a62be:	0783      	lsls	r3, r0, #30
   a62c0:	d024      	beq.n	a630c <strchr+0xd8>
   a62c2:	7803      	ldrb	r3, [r0, #0]
   a62c4:	2b00      	cmp	r3, #0
   a62c6:	d0f9      	beq.n	a62bc <strchr+0x88>
   a62c8:	1c43      	adds	r3, r0, #1
   a62ca:	e003      	b.n	a62d4 <strchr+0xa0>
   a62cc:	7802      	ldrb	r2, [r0, #0]
   a62ce:	3301      	adds	r3, #1
   a62d0:	2a00      	cmp	r2, #0
   a62d2:	d0f3      	beq.n	a62bc <strchr+0x88>
   a62d4:	0799      	lsls	r1, r3, #30
   a62d6:	4618      	mov	r0, r3
   a62d8:	d1f8      	bne.n	a62cc <strchr+0x98>
   a62da:	6819      	ldr	r1, [r3, #0]
   a62dc:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   a62e0:	ea22 0201 	bic.w	r2, r2, r1
   a62e4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   a62e8:	d108      	bne.n	a62fc <strchr+0xc8>
   a62ea:	f853 1f04 	ldr.w	r1, [r3, #4]!
   a62ee:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   a62f2:	ea22 0201 	bic.w	r2, r2, r1
   a62f6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   a62fa:	d0f6      	beq.n	a62ea <strchr+0xb6>
   a62fc:	781a      	ldrb	r2, [r3, #0]
   a62fe:	4618      	mov	r0, r3
   a6300:	b142      	cbz	r2, a6314 <strchr+0xe0>
   a6302:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   a6306:	2b00      	cmp	r3, #0
   a6308:	d1fb      	bne.n	a6302 <strchr+0xce>
   a630a:	4770      	bx	lr
   a630c:	4603      	mov	r3, r0
   a630e:	e7e4      	b.n	a62da <strchr+0xa6>
   a6310:	4604      	mov	r4, r0
   a6312:	e7a4      	b.n	a625e <strchr+0x2a>
   a6314:	4618      	mov	r0, r3
   a6316:	4770      	bx	lr
   a6318:	4618      	mov	r0, r3
   a631a:	e7ce      	b.n	a62ba <strchr+0x86>

000a631c <__register_exitproc>:
   a631c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a6320:	4d2c      	ldr	r5, [pc, #176]	; (a63d4 <__register_exitproc+0xb8>)
   a6322:	4606      	mov	r6, r0
   a6324:	6828      	ldr	r0, [r5, #0]
   a6326:	4698      	mov	r8, r3
   a6328:	460f      	mov	r7, r1
   a632a:	4691      	mov	r9, r2
   a632c:	f7ff ff7e 	bl	a622c <__retarget_lock_acquire_recursive>
   a6330:	4b29      	ldr	r3, [pc, #164]	; (a63d8 <__register_exitproc+0xbc>)
   a6332:	681c      	ldr	r4, [r3, #0]
   a6334:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   a6338:	2b00      	cmp	r3, #0
   a633a:	d03e      	beq.n	a63ba <__register_exitproc+0x9e>
   a633c:	685a      	ldr	r2, [r3, #4]
   a633e:	2a1f      	cmp	r2, #31
   a6340:	dc1c      	bgt.n	a637c <__register_exitproc+0x60>
   a6342:	f102 0e01 	add.w	lr, r2, #1
   a6346:	b176      	cbz	r6, a6366 <__register_exitproc+0x4a>
   a6348:	2101      	movs	r1, #1
   a634a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   a634e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   a6352:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   a6356:	4091      	lsls	r1, r2
   a6358:	4308      	orrs	r0, r1
   a635a:	2e02      	cmp	r6, #2
   a635c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   a6360:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   a6364:	d023      	beq.n	a63ae <__register_exitproc+0x92>
   a6366:	3202      	adds	r2, #2
   a6368:	f8c3 e004 	str.w	lr, [r3, #4]
   a636c:	6828      	ldr	r0, [r5, #0]
   a636e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   a6372:	f7ff ff5d 	bl	a6230 <__retarget_lock_release_recursive>
   a6376:	2000      	movs	r0, #0
   a6378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a637c:	4b17      	ldr	r3, [pc, #92]	; (a63dc <__register_exitproc+0xc0>)
   a637e:	b30b      	cbz	r3, a63c4 <__register_exitproc+0xa8>
   a6380:	f44f 70c8 	mov.w	r0, #400	; 0x190
   a6384:	f7fe ffac 	bl	a52e0 <malloc>
   a6388:	4603      	mov	r3, r0
   a638a:	b1d8      	cbz	r0, a63c4 <__register_exitproc+0xa8>
   a638c:	2000      	movs	r0, #0
   a638e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   a6392:	f04f 0e01 	mov.w	lr, #1
   a6396:	6058      	str	r0, [r3, #4]
   a6398:	6019      	str	r1, [r3, #0]
   a639a:	4602      	mov	r2, r0
   a639c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   a63a0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   a63a4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   a63a8:	2e00      	cmp	r6, #0
   a63aa:	d0dc      	beq.n	a6366 <__register_exitproc+0x4a>
   a63ac:	e7cc      	b.n	a6348 <__register_exitproc+0x2c>
   a63ae:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   a63b2:	4301      	orrs	r1, r0
   a63b4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   a63b8:	e7d5      	b.n	a6366 <__register_exitproc+0x4a>
   a63ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   a63be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   a63c2:	e7bb      	b.n	a633c <__register_exitproc+0x20>
   a63c4:	6828      	ldr	r0, [r5, #0]
   a63c6:	f7ff ff33 	bl	a6230 <__retarget_lock_release_recursive>
   a63ca:	f04f 30ff 	mov.w	r0, #4294967295
   a63ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a63d2:	bf00      	nop
   a63d4:	20070c1c 	.word	0x20070c1c
   a63d8:	000acae8 	.word	0x000acae8
   a63dc:	000a52e1 	.word	0x000a52e1
   a63e0:	656c6946 	.word	0x656c6946
   a63e4:	65725420 	.word	0x65725420
   a63e8:	00000065 	.word	0x00000065
   a63ec:	20746f4e 	.word	0x20746f4e
   a63f0:	00746573 	.word	0x00746573
   a63f4:	776f6853 	.word	0x776f6853
   a63f8:	00000000 	.word	0x00000000
   a63fc:	656c6946 	.word	0x656c6946
   a6400:	6d654420 	.word	0x6d654420
   a6404:	0000006f 	.word	0x0000006f
   a6408:	6e65704f 	.word	0x6e65704f
   a640c:	00000000 	.word	0x00000000
   a6410:	00746553 	.word	0x00746553
   a6414:	61657243 	.word	0x61657243
   a6418:	00006574 	.word	0x00006574
   a641c:	74696157 	.word	0x74696157
   a6420:	2e676e69 	.word	0x2e676e69
   a6424:	00002e2e 	.word	0x00002e2e
   a6428:	656c6553 	.word	0x656c6553
   a642c:	6f697463 	.word	0x6f697463
   a6430:	0000006e 	.word	0x0000006e

000a6434 <__func__.6090>:
   a6434:	5f646461 74786574 6e69775f 00776f64     add_text_window.

000a6444 <__func__.6101>:
   a6444:	5f646461 67616d69 69775f65 776f646e     add_image_window
   a6454:	00000000                                ....

000a6458 <__func__.6109>:
   a6458:	646e6977 665f776f 5f656c69 6e696170     window_file_pain
   a6468:	75665f74 6974636e 00006e6f              t_function..

000a6474 <__func__.6113>:
   a6474:	646e6977 665f776f 5f656c69 7373656d     window_file_mess
   a6484:	5f656761 636e7566 6e6f6974 00000000     age_function....
   a6494:	0000003a 0000002f 00747874 6c6c754e     :.../...txt.Null
   a64a4:	696f7020 7265746e 00000000 66206f4e      pointer....No f
   a64b4:	6e656c69 20656d61 6e756f66 00000064     ilename found...
   a64c4:	00706d62 6d726f46 6e207461 7320746f     bmp.Format not s
   a64d4:	6f707075 64657472 0000002e 61657243     upported....Crea
   a64e4:	20646574 4d207962 57696e69 46206e69     ted by MiniWin F
   a64f4:	20656c69 6d617865 20656c70 2e707061     ile example app.
   a6504:	0000000a 656c6946 65726320 00657461     ....File create.
   a6514:	00006b4f 656c6946 65726320 64657461     Ok..File created
   a6524:	63757320 73736563 6c6c7566 00000079      successfully...
   a6534:	6c756f43 6f6e2064 72632074 65746165     Could not create
   a6544:	6c696620 00000065 6e726157 00676e69      file...Warning.
   a6554:	00004b4f 20646142 656c6966 726f6620     OK..Bad file for
   a6564:	2e74616d 00000000 6c6c754e 696f7020     mat.....Null poi
   a6574:	7265746e 72617020 74656d61 00007265     nter parameter..
   a6584:	656d6954 7461442f 00000065 656c6946     Time/Date...File
   a6594:	00000000                                ....

000a6598 <__func__.6033>:
   a6598:	646e6977 665f776f 5f656c69 65657274     window_file_tree
   a65a8:	6961705f 665f746e 74636e75 006e6f69     _paint_function.

000a65b8 <__func__.6038>:
   a65b8:	646e6977 665f776f 5f656c69 65657274     window_file_tree
   a65c8:	73656d5f 65676173 6e75665f 6f697463     _message_functio
   a65d8:	0000006e                                n...

000a65dc <__func__.5877>:
   a65dc:	646e6977 695f776f 6567616d 6961705f     window_image_pai
   a65ec:	665f746e 74636e75 006e6f69              nt_function.

000a65f8 <__func__.5891>:
   a65f8:	646e6977 695f776f 6567616d 73656d5f     window_image_mes
   a6608:	65676173 6e75665f 6f697463 0000006e     sage_function...
   a6618:	6c6c754e 696f7020 7265746e 67726120     Null pointer arg
   a6628:	6e656d75 00000074 6c756f43 74276e64     ument...Couldn't
   a6638:	6e696620 69772064 776f646e 736e6920      find window ins
   a6648:	636e6174 61642065 00006174              tance data..

000a6654 <__func__.5798>:
   a6654:	646e6977 735f776f 63656c65 6e6f6974     window_selection
   a6664:	6961705f 665f746e 74636e75 006e6f69     _paint_function.

000a6674 <__func__.5802>:
   a6674:	646e6977 735f776f 63656c65 6e6f6974     window_selection
   a6684:	73656d5f 65676173 6e75665f 6f697463     _message_functio
   a6694:	0000006e                                n...

000a6698 <__func__.5882>:
   a6698:	646e6977 745f776f 5f747865 6e696170     window_text_pain
   a66a8:	75665f74 6974636e 00006e6f              t_function..

000a66b4 <__func__.5891>:
   a66b4:	646e6977 745f776f 5f747865 7373656d     window_text_mess
   a66c4:	5f656761 636e7566 6e6f6974 00000000     age_function....

000a66d4 <mw_bitmaps_backspace_key>:
   a66d4:	ffffffff c3fdc3ff c3f1c3f9 03c003e0     ................
   a66e4:	03e003c0 c3f9c3f1 c3ffc3fd ffffffff     ................

000a66f4 <mw_bitmaps_close_icon>:
   a66f4:	0480fcff c4a7e48f 34b994b3 74bc74bc     ...........4.t.t
   a6704:	94b334b9 e48fc4a7 fcff0480              .4..........

000a6710 <mw_bitmaps_close_icon_large>:
   a6710:	80f0ffff 00801000 10fe8710 9110fc83     ................
   a6720:	f19890f8 90639c90 9f90079e 0f9f900f     ......c.........
   a6730:	90079e90 9890639c f89190f1 10fc8390     .....c..........
   a6740:	8010fe87 00801000 f0ffff10              ............

000a674c <mw_bitmaps_file_icon_large>:
   a674c:	cfdf1fc0 c3dfc7df fbdffbdf fbdffbdf     ................
   a675c:	fbdffbdf fbdffbdf fbdffbdf 03c0fbdf     ................

000a676c <mw_bitmaps_file_icon_small>:
   a676c:	bdb1b387 81bdbdbd                       ........

000a6774 <mw_bitmaps_folder_close_icon_large>:
   a6774:	ffffffff ffffffff e73ff77f 9fcfcf9f     ..........?.....
   a6784:	7ff23fe7 fffdfff8 ffffffff ffffffff     .?..............

000a6794 <mw_bitmaps_folder_close_icon_small>:
   a6794:	bb7dffff ffffefd7                       ..}.....

000a679c <mw_bitmaps_folder_icon_large>:
   a679c:	ffffffff 0160ff0f fe7f0060 fe7ffe7f     ......`.`.......
   a67ac:	fe7ffe7f fe7ffe7f 0000fe7f ffffffff     ................

000a67bc <mw_bitmaps_folder_icon_small>:
   a67bc:	7e401fff ff007e7e                       ..@~~~..

000a67c4 <mw_bitmaps_folder_open_icon_large>:
   a67c4:	fff9fff3 7ffefffc 9fff3fff 9fffcfff     .........?......
   a67d4:	7ffe3fff fff9fffc fffffff3 ffffffff     .?..............

000a67e4 <mw_bitmaps_folder_open_icon_small>:
   a67e4:	fbf7efdf ffdfeff7                       ........

000a67ec <mw_bitmaps_let_key>:
   a67ec:	ffffffff fbbb83c7 f7bbf7bb 2fbaf7bb     .............../
   a67fc:	df83efbb dfbbdfbb 83bbbfbb ffffffff     ................

000a680c <mw_bitmaps_maximise_icon>:
   a680c:	0480fcff 04800480 f4bff4bf f4bff4bf     ................
   a681c:	f4bff4bf f4bff4bf fcff0480              ............

000a6828 <mw_bitmaps_maximise_icon_large>:
   a6828:	80f0ffff 00801000 10008010 80100080     ................
   a6838:	ff9f1000 90ff9f90 9f90ff9f ff9f90ff     ................
   a6848:	90ff9f90 9f90ff9f ff9f90ff 90ff9f90     ................
   a6858:	8090ff9f 00801000 f0ffff10              ............

000a6864 <mw_bitmaps_minimise_icon>:
   a6864:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
   a6874:	fcfffcff 04800480 fcff0480              ............

000a6880 <mw_bitmaps_minimise_icon_large>:
   a6880:	fff0ffff fffff0ff f0fffff0 fff0ffff     ................
   a6890:	fffff0ff f0fffff0 fff0ffff fffff0ff     ................
   a68a0:	f0fffff0 fff0ffff fffff0ff 100080f0     ................
   a68b0:	80100080 00801000 f0ffff10              ............

000a68bc <mw_bitmaps_num_key>:
   a68bc:	ffffffff bbe7c3f7 bbf7bbd7 bbf4bbf7     ................
   a68cc:	fbf7c3f7 fbf7fbf7 fbe3fbf7 ffffffff     ................

000a68dc <mw_bitmaps_resize_icon>:
   a68dc:	04000000 1c000c00 7c003c00 fc01fc00     .........<.|....
   a68ec:	fc07fc03 fc1ffc0f fc7ffc3f              ........?...

000a68f8 <mw_bitmaps_resize_icon_large>:
   a68f8:	00000000 00001000 70000030 00f00000     ........0..p....
   a6908:	0300f001 f00700f0 00f00f00 3f00f01f     ...............?
   a6918:	f07f00f0 01f0ff00 ff03f0ff f0ff07f0     ................
   a6928:	1ff0ff0f ff3ff0ff f0ff7ff0              ......?.....

000a6934 <mw_bitmaps_shift_key>:
   a6934:	ffffffff 7ffcfffe 1ff03ff8 7ffc0fe0     .........?......
   a6944:	7ffc7ffc 7ffc7ffc 7ffc7ffc ffffffff     ................

000a6954 <mw_bitmaps_sym_key>:
   a6954:	ffffffff 7bef87ef fbeffbef f7effbef     .......{........
   a6964:	dfefefec dfefdfef dfefffff ffffffff     ................

000a6974 <__func__.6011>:
   a6974:	645f776d 6f6c6169 61645f67 635f6574     mw_dialog_date_c
   a6984:	736f6f68 705f7265 746e6961 6e75665f     hooser_paint_fun
   a6994:	6f697463 0000006e                       ction...

000a699c <__func__.6015>:
   a699c:	645f776d 6f6c6169 61645f67 635f6574     mw_dialog_date_c
   a69ac:	736f6f68 6d5f7265 61737365 665f6567     hooser_message_f
   a69bc:	74636e75 006e6f69                       unction.

000a69c4 <days_in_months>:
   a69c4:	1f1c1f00 1f1e1f1e 1e1f1e1f 0000001f     ................
   a69d4:	636e6143 00006c65 20746553 65746164     Cancel..Set date
   a69e4:	00000000 6e6b6e55 206e776f 746e6f63     ....Unknown cont
   a69f4:	206c6f72 00006469 72616559 0000203a     rol id..Year: ..
   a6a04:	746e6f4d 00203a68 65746144 0000203a     Month: .Date: ..

000a6a14 <text_rect_large>:
   a6a14:	0024008b 00b20020                       ..$. ...

000a6a1c <text_rect_standard>:
   a6a1c:	00140035 00580018                       5.....X.

000a6a24 <__func__.6055>:
   a6a24:	645f776d 6f6c6169 69665f67 635f656c     mw_dialog_file_c
   a6a34:	736f6f68 705f7265 746e6961 6e75665f     hooser_paint_fun
   a6a44:	6f697463 0000006e                       ction...

000a6a4c <__func__.6060>:
   a6a4c:	645f776d 6f6c6169 69665f67 635f656c     mw_dialog_file_c
   a6a5c:	736f6f68 6d5f7265 61737365 665f6567     hooser_message_f
   a6a6c:	74636e75 006e6f69                       unction.

000a6a74 <__func__.6081>:
   a6a74:	635f776d 74616572 69775f65 776f646e     mw_create_window
   a6a84:	6169645f 5f676f6c 656c6966 6f68635f     _dialog_file_cho
   a6a94:	7265736f 00000000 46206f4e 00656c69     oser....No File.

000a6aa4 <__func__.5975>:
   a6aa4:	645f776d 6f6c6169 6e6f5f67 75625f65     mw_dialog_one_bu
   a6ab4:	6e6f7474 6961705f 665f746e 74636e75     tton_paint_funct
   a6ac4:	006e6f69                                ion.

000a6ac8 <__func__.5979>:
   a6ac8:	645f776d 6f6c6169 6e6f5f67 75625f65     mw_dialog_one_bu
   a6ad8:	6e6f7474 73656d5f 65676173 6e75665f     tton_message_fun
   a6ae8:	6f697463 0000006e                       ction...

000a6af0 <__func__.5996>:
   a6af0:	635f776d 74616572 69775f65 776f646e     mw_create_window
   a6b00:	6169645f 5f676f6c 5f656e6f 74747562     _dialog_one_butt
   a6b10:	00006e6f                                on..

000a6b14 <__func__.5993>:
   a6b14:	645f776d 6f6c6169 65745f67 655f7478     mw_dialog_text_e
   a6b24:	7972746e 6961705f 665f746e 74636e75     ntry_paint_funct
   a6b34:	006e6f69                                ion.

000a6b38 <__func__.6001>:
   a6b38:	645f776d 6f6c6169 65745f67 655f7478     mw_dialog_text_e
   a6b48:	7972746e 73656d5f 65676173 6e75665f     ntry_message_fun
   a6b58:	6f697463 0000006e                       ction...

000a6b60 <__func__.6022>:
   a6b60:	635f776d 74616572 69775f65 776f646e     mw_create_window
   a6b70:	6169645f 5f676f6c 74786574 746e655f     _dialog_text_ent
   a6b80:	00007972                                ry..

000a6b84 <text_display_rect>:
   a6b84:	00050033 000e007d                       3...}...

000a6b8c <text_display_rect_large>:
   a6b8c:	00050079 001800cd                       y.......

000a6b94 <__func__.5996>:
   a6b94:	645f776d 6f6c6169 69745f67 635f656d     mw_dialog_time_c
   a6ba4:	736f6f68 705f7265 746e6961 6e75665f     hooser_paint_fun
   a6bb4:	6f697463 0000006e                       ction...

000a6bbc <__func__.6000>:
   a6bbc:	645f776d 6f6c6169 69745f67 635f656d     mw_dialog_time_c
   a6bcc:	736f6f68 6d5f7265 61737365 665f6567     hooser_message_f
   a6bdc:	74636e75 006e6f69 20746553 656d6974     unction.Set time
   a6bec:	00000000 72756f48 0000203a 756e694d     ....Hour: ..Minu
   a6bfc:	203a6574 00000000                       te: ....

000a6c04 <text_rect_large>:
   a6c04:	0028008c 005f0014                       ..(..._.

000a6c0c <text_rect_standard>:
   a6c0c:	00140042 0032000c                       B.....2.

000a6c14 <__func__.5977>:
   a6c14:	645f776d 6f6c6169 77745f67 75625f6f     mw_dialog_two_bu
   a6c24:	6e6f7474 6961705f 665f746e 74636e75     tton_paint_funct
   a6c34:	006e6f69                                ion.

000a6c38 <__func__.5981>:
   a6c38:	645f776d 6f6c6169 77745f67 75625f6f     mw_dialog_two_bu
   a6c48:	6e6f7474 73656d5f 65676173 6e75665f     tton_message_fun
   a6c58:	6f697463 0000006e                       ction...

000a6c60 <__func__.6000>:
   a6c60:	635f776d 74616572 69775f65 776f646e     mw_create_window
   a6c70:	6169645f 5f676f6c 5f6f7774 74747562     _dialog_two_butt
   a6c80:	00006e6f                                on..

000a6c84 <Font12>:
   a6c84:	000a6c8c 000c0007                       .l......

000a6c8c <Font12_Table>:
	...
   a6c98:	10101000 00001010 00000010 48486c00     .............lHH
	...
   a6cb0:	28141400 287c287c 00005050 40381000     ...(|(|(PP....8@
   a6cc0:	70483840 00001010 20502000 1408700c     @8Hp..... P .p..
   a6cd0:	00000008 18000000 48542020 00000034     ........  TH4...
   a6ce0:	10101000 00000010 00000000 10080800     ................
   a6cf0:	10101010 00080810 10202000 10101010     .........  .....
   a6d00:	00202010 107c1000 00002828 00000000     .  ...|.((......
   a6d10:	10100000 1010fe10 00000010 00000000     ................
   a6d20:	18000000 00203010 00000000 00007c00     .....0 ......|..
	...
   a6d38:	30000000 00000030 08040400 20101008     ...00.......... 
   a6d48:	00004020 44443800 44444444 00000038      @...8DDDDDD8...
   a6d58:	10103000 10101010 0000007c 04443800     .0......|....8D.
   a6d68:	44201008 0000007c 04443800 44040418     .. D|....8D....D
   a6d78:	00000038 14140c00 047e4424 0000000e     8.......$D~.....
   a6d88:	20203c00 44040438 00000038 40201c00     .<  8..D8..... @
   a6d98:	44444478 00000038 04447c00 10080808     xDDD8....|D.....
   a6da8:	00000010 44443800 44444438 00000038     .....8DD8DDD8...
   a6db8:	44443800 08043c44 00000070 30000000     .8DDD<..p......0
   a6dc8:	30000030 00000030 18000000 18000018     0..00...........
   a6dd8:	00002030 100c0000 10608060 0000000c     0 ......`.`.....
   a6de8:	00000000 007c007c 00000000 20c00000     ....|.|........ 
   a6df8:	20180418 000000c0 24180000 00100804     ... .......$....
   a6e08:	00000030 4c444438 404c5454 00003844     0...8DDLTTL@D8..
   a6e18:	28103000 447c2828 000000ee 4444f800     .0.(((|D......DD
   a6e28:	44444478 000000f8 40443c00 44404040     xDDD.....<D@@@@D
   a6e38:	00000038 4448f000 48444444 000000f0     8.....HDDDDH....
   a6e48:	5044fc00 44405070 000000fc 28227e00     ..DPpP@D.....~"(
   a6e58:	20202838 00000070 40443c00 44444e40     8(  p....<D@@NDD
   a6e68:	00000038 4444ee00 4444447c 000000ee     8.....DD|DDD....
   a6e78:	10107c00 10101010 0000007c 08083c00     .|......|....<..
   a6e88:	48484808 00000030 4844ee00 44487050     .HHH0.....DHPpHD
   a6e98:	000000e6 20207000 24242020 0000007c     .....p    $$|...
   a6ea8:	6c6cee00 44445454 000000ee 6464ee00     ..llTTDD......dd
   a6eb8:	4c545454 000000ec 44443800 44444444     TTTL.....8DDDDDD
   a6ec8:	00000038 24247800 20203824 00000070     8....x$$$8  p...
   a6ed8:	44443800 44444444 00001c38 4444f800     .8DDDDDD8.....DD
   a6ee8:	44487844 000000e2 404c3400 64040438     DxHD.....4L@8..d
   a6ef8:	00000058 1092fe00 10101010 00000038     X...........8...
   a6f08:	4444ee00 44444444 00000038 4444ee00     ..DDDDDD8.....DD
   a6f18:	10282828 00000010 4444ee00 54545454     (((.......DDTTTT
   a6f28:	00000028 2844c600 44281010 000000c6     (.....D(..(D....
   a6f38:	2844ee00 10101028 00000038 08447c00     ..D((...8....|D.
   a6f48:	44201010 0000007c 20203800 20202020     .. D|....8      
   a6f58:	00382020 20204000 08101020 00000808       8..@   .......
   a6f68:	08083800 08080808 00380808 28101000     .8........8....(
   a6f78:	00000044 00000000 00000000 00000000     D...............
   a6f88:	fe000000 00081000 00000000 00000000     ................
   a6f98:	38000000 44443c44 0000003e 5840c000     ...8D<DD>.....@X
   a6fa8:	44444464 000000f8 3c000000 44404044     dDDD.......<D@@D
   a6fb8:	00000038 34040c00 4444444c 0000003e     8......4LDDD>...
   a6fc8:	38000000 40407c44 0000003c 7c201c00     ...8D|@@<..... |
   a6fd8:	20202020 0000007c 36000000 4444444c         |......6LDDD
   a6fe8:	0038043c 5840c000 44444464 000000ee     <.8...@XdDDD....
   a6ff8:	70001000 10101010 0000007c 78001000     ...p....|......x
   a7008:	08080808 00700808 5c40c000 48507048     ......p...@\HpPH
   a7018:	000000dc 10103000 10101010 0000007c     .....0......|...
   a7028:	e8000000 54545454 000000fe d8000000     ....TTTT........
   a7038:	44444464 000000ee 38000000 44444444     dDDD.......8DDDD
   a7048:	00000038 d8000000 44444464 00e04078     8.......dDDDx@..
   a7058:	36000000 4444444c 000e043c 6c000000     ...6LDDD<......l
   a7068:	20202030 0000007c 3c000000 44043844     0   |......<D8.D
   a7078:	00000078 7c200000 22202020 0000001c     x..... |   "....
   a7088:	cc000000 4c444444 00000036 ee000000     ....DDDL6.......
   a7098:	28284444 00000010 ee000000 54545444     DD((........DTTT
   a70a8:	00000028 cc000000 48303048 000000cc     (.......H00H....
   a70b8:	ee000000 18282444 00781010 7c000000     ....D$(...x....|
   a70c8:	44201048 0000007c 10100800 10201010     H. D|......... .
   a70d8:	00081010 10101000 10101010 00001010     ................
   a70e8:	10102000 10081010 00201010 00000000     . ........ .....
   a70f8:	00582400 00000000                       .$X.....

000a7100 <Font16>:
   a7100:	000a7108 0010000b                       .q......

000a7108 <Font16_Table>:
	...
   a7128:	000c0000 000c000c 000c000c 000c000c     ................
   a7138:	0000000c 0000000c 00000000 00000000     ................
   a7148:	00000000 c01dc01d 80088008 00008008     ................
	...
   a7168:	800d0000 800d800d c03f800d c03f001b     ..........?...?.
   a7178:	001b001b 001b001b 00000000 00000000     ................
   a7188:	801f0004 80318031 001e0038 8003000f     ....1.1.8.......
   a7198:	80318031 0004003f 00000004 00000000     1.1.?...........
   a71a8:	00180000 00240024 8007c018 8031001e     ....$.$.......1.
   a71b8:	40024002 00008001 00000000 00000000     .@.@............
   a71c8:	00000000 0018000f 00180018 801d000c     ................
   a71d8:	00330037 0000801d 00000000 00000000     7.3.............
   a71e8:	00000000 00070007 00020002 00000002     ................
	...
   a7208:	00030000 00060003 000c000e 000c000c     ................
   a7218:	000e000c 00030006 00000003 00000000     ................
   a7228:	00180000 000c0018 00060006 00060006     ................
   a7238:	00060006 001c000c 00000018 00000000     ................
   a7248:	00060000 c03f0006 000fc03f 8019801f     ......?.?.......
	...
   a726c:	00040000 00040004 0004803f 00040004     ........?.......
	...
   a7298:	00060000 000c0004 00080008 00000000     ................
	...
   a72b4:	0000803f 00000000 00000000 00000000     ?...............
	...
   a72d8:	000c0000 0000000c 00000000 00000000     ................
   a72e8:	c000c000 80018001 00030003 000c0006     ................
   a72f8:	0018000c 00300018 00000030 00000000     ......0.0.......
   a7308:	000e0000 8031001b 80318031 80318031     ......1.1.1.1.1.
   a7318:	001b8031 0000000e 00000000 00000000     1...............
   a7328:	00060000 0006003e 00060006 00060006     ....>...........
   a7338:	00060006 0000c03f 00000000 00000000     ....?...........
   a7348:	000f0000 80318019 00038031 000c0006     ......1.1.......
   a7358:	00300018 0000803f 00000000 00000000     ..0.?...........
   a7368:	003f0000 80018061 001f0003 80018003     ..?.a...........
   a7378:	80618001 0000003f 00000000 00000000     ..a.?...........
   a7388:	00070000 000f0007 001b000b 00330013     ..............3.
   a7398:	0003803f 0000800f 00000000 00000000     ?...............
   a73a8:	801f0000 00180018 001f0018 80018011     ................
   a73b8:	80218001 0000001f 00000000 00000000     ..!.............
   a73c8:	80070000 0018001c 00370030 80318039     ........0.7.9.1.
   a73d8:	80198031 0000000f 00000000 00000000     1...............
   a73e8:	007f0000 00030043 00060006 00060006     ....C...........
   a73f8:	000c000c 0000000c 00000000 00000000     ................
   a7408:	001f0000 80318031 001f8031 80318031     ....1.1.1...1.1.
   a7418:	80318031 0000001f 00000000 00000000     1.1.............
   a7428:	001e0000 80310033 80338031 8001801d     ....3.1.1.3.....
   a7438:	00070003 0000003c 00000000 00000000     ....<...........
	...
   a7450:	000c000c 00000000 000c0000 0000000c     ................
	...
   a7470:	00030003 00000000 00060000 00080004     ................
   a7480:	00000008 00000000 00000000 0003c000     ................
   a7490:	00180004 00180060 00030004 0000c000     ....`...........
	...
   a74b0:	c07f0000 c07f0000 00000000 00000000     ................
	...
   a74cc:	00180060 00030004 0003c000 00180004     `...............
   a74dc:	00000060 00000000 00000000 00000000     `...............
   a74ec:	8031001f 80018031 000c0007 0000000c     ..1.1...........
   a74fc:	0000000c 00000000 00000000 000e0000     ................
   a750c:	00210011 00270021 00290029 00200027     ..!.!.'.).).'. .
   a751c:	000e0011 00000000 00000000 00000000     ................
   a752c:	000f003f 80190009 801f8019 c030c030     ?...........0.0.
   a753c:	0000e079 00000000 00000000 00000000     y...............
   a754c:	8031007f 80318031 8031003f 80318031     ..1.1.1.?.1.1.1.
   a755c:	0000007f 00000000 00000000 00000000     ................
   a756c:	c030401f 00604060 00600060 80304060     .@0.`@`.`.`.`@0.
   a757c:	0000001f 00000000 00000000 00000000     ................
   a758c:	8031007f c030c030 c030c030 8031c030     ..1.0.0.0.0.0.1.
   a759c:	0000007f 00000000 00000000 00000000     ................
   a75ac:	8030807f 00328030 0032003e 80308030     ..0.0.2.>.2.0.0.
   a75bc:	0000807f 00000000 00000000 00000000     ................
   a75cc:	4030c07f 00324030 0032003e 00300030     ..0@0@2.>.2.0.0.
   a75dc:	0000007c 00000000 00000000 00000000     |...............
   a75ec:	8031801e 00608060 c0670060 80318061     ..1.`.`.`.g.a.1.
   a75fc:	0000001f 00000000 00000000 00000000     ................
   a760c:	8031c07b 80318031 8031803f 80318031     {.1.1.1.?.1.1.1.
   a761c:	0000c07b 00000000 00000000 00000000     {...............
   a762c:	0006c03f 00060006 00060006 00060006     ?...............
   a763c:	0000c03f 00000000 00000000 00000000     ?...............
   a764c:	0003c01f 00030003 00630003 00630063     ..........c.c.c.
   a765c:	0000003e 00000000 00000000 00000000     >...............
   a766c:	8031c07b 00360033 003e003c 80310033     {.1.3.6.<.>.3.1.
   a767c:	0000c079 00000000 00000000 00000000     y...............
   a768c:	0018007e 00180018 40180018 40184018     ~..........@.@.@
   a769c:	0000c07f 00000000 00000000 00000000     ................
   a76ac:	c060e0e0 c07bc071 c06ec06a c060c064     ..`.q.{.j.n.d.`.
   a76bc:	0000e0fb 00000000 00000000 00000000     ................
   a76cc:	8031c073 803d8039 80378035 80318033     s.1.9.=.5.7.3.1.
   a76dc:	00008079 00000000 00000000 00000000     y...............
   a76ec:	8031001f c060c060 c060c060 8031c060     ..1.`.`.`.`.`.1.
   a76fc:	0000001f 00000000 00000000 00000000     ................
   a770c:	8031007f 80318031 003f8031 00300030     ..1.1.1.1.?.0.0.
   a771c:	0000007e 00000000 00000000 00000000     ~...............
   a772c:	8031001f c060c060 c060c060 8031c060     ..1.`.`.`.`.`.1.
   a773c:	c00c001f 0000801f 00000000 00000000     ................
   a774c:	8031007f 80318031 0033003e 80318031     ..1.1.1.>.3.1.1.
   a775c:	0000e07c 00000000 00000000 00000000     |...............
   a776c:	8031801f 00388031 8003001f 80318031     ..1.1.8.....1.1.
   a777c:	0000003f 00000000 00000000 00000000     ?...............
   a778c:	804c807f 804c804c 000c000c 000c000c     ..L.L.L.........
   a779c:	0000003f 00000000 00000000 00000000     ?...............
   a77ac:	8031c07b 80318031 80318031 80318031     {.1.1.1.1.1.1.1.
   a77bc:	0000001f 00000000 00000000 00000000     ................
   a77cc:	8031c07b 001b8031 001b001b 000e000a     {.1.1...........
   a77dc:	0000000e 00000000 00000000 00000000     ................
   a77ec:	c060e0fb c06ec064 802ac06e 803b803b     ..`.d.n.n.*.;.;.
   a77fc:	00008031 00000000 00000000 00000000     1...............
   a780c:	8031c07b 000e001b 000e000e 8031001b     {.1...........1.
   a781c:	0000c07b 00000000 00000000 00000000     {...............
   a782c:	c030e079 000f8019 00060006 00060006     y.0.............
   a783c:	0000801f 00000000 00000000 00000000     ................
   a784c:	8021803f 00060023 000c0004 80308018     ?.!.#.........0.
   a785c:	0000803f 00000000 00000000 80070000     ?...............
   a786c:	00060006 00060006 00060006 00060006     ................
   a787c:	00060006 00008007 00000000 00300030     ............0.0.
   a788c:	00180018 000c000c 00030006 80010003     ................
   a789c:	c0008001 0000c000 00000000 001e0000     ................
   a78ac:	00060006 00060006 00060006 00060006     ................
   a78bc:	00060006 0000001e 00000000 000a0004     ................
   a78cc:	0011000a 80208020 00000000 00000000     .... . .........
	...
   a7904:	e0ff0000 00040008 00000002 00000000     ................
	...
   a7930:	8001001f 801f8001 80338031 0000c01d     ........1.3.....
	...
   a7948:	00700000 00300030 80390037 c030c030     ..p.0.0.7.9.0.0.
   a7958:	8039c030 00000077 00000000 00000000     0.9.w...........
	...
   a7970:	8031801e 00608060 80318060 0000001f     ..1.`.`.`.1.....
	...
   a7988:	80030000 80018001 8033801d 80618061     ..........3.a.a.
   a7998:	80338061 0000c01d 00000000 00000000     a.3.............
	...
   a79b0:	8031001f c07fc060 c0300060 0000801f     ..1.`...`.0.....
	...
   a79c8:	e0070000 000c000c 000c803f 000c000c     ........?.......
   a79d8:	000c000c 0000803f 00000000 00000000     ....?...........
	...
   a79f0:	8033c01d 80618061 80338061 8001801d     ..3.a.a.a.3.....
   a7a00:	001f8001 00000000 00700000 00300030     ..........p.0.0.
   a7a10:	80390037 80318031 80318031 0000c07b     7.9.1.1.1.1.{...
	...
   a7a28:	00060000 00000006 0006001e 00060006     ................
   a7a38:	00060006 0000c03f 00000000 00000000     ....?...........
   a7a48:	00060000 00000006 0003003f 00030003     ........?.......
   a7a58:	00030003 00030003 003e0003 00000000     ..........>.....
   a7a68:	00700000 00300030 00368037 003c003c     ..p.0.0.7.6.<.<.
   a7a78:	00330036 0000c077 00000000 00000000     6.3.w...........
   a7a88:	001e0000 00060006 00060006 00060006     ................
   a7a98:	00060006 0000c03f 00000000 00000000     ....?...........
	...
   a7ab0:	c036807f c036c036 c036c036 0000e076     ..6.6.6.6.6.v...
	...
   a7ad0:	80390077 80318031 80318031 0000c07b     w.9.1.1.1.1.{...
	...
   a7af0:	8031001f c060c060 8031c060 0000001f     ..1.`.`.`.1.....
	...
   a7b10:	80390077 c030c030 8039c030 00300037     w.9.0.0.0.9.7.0.
   a7b20:	007c0030 00000000 00000000 00000000     0.|.............
   a7b30:	8033c01d 80618061 80338061 8001801d     ..3.a.a.a.3.....
   a7b40:	c0078001 00000000 00000000 00000000     ................
   a7b50:	c01c807b 00180018 00180018 0000007f     {...............
	...
   a7b70:	8031801f 001f003c 80318003 0000003f     ..1.<.....1.?...
	...
   a7b88:	00180000 00180018 0018007f 00180018     ................
   a7b98:	80180018 0000000f 00000000 00000000     ................
	...
   a7bb0:	80318073 80318031 80338031 0000c01d     s.1.1.1.1.3.....
	...
   a7bd0:	8031c07b 001b8031 000e001b 0000000e     {.1.1...........
	...
   a7bf0:	c060e0f1 c06ec064 803b803b 00008031     ..`.d.n.;.;.1...
	...
   a7c10:	001bc07b 000e000e 001b000e 0000c07b     {...........{...
	...
   a7c30:	c030e079 80198019 000f000b 00060006     y.0.............
   a7c40:	003e000c 00000000 00000000 00000000     ..>.............
   a7c50:	8021803f 000e0003 80300018 0000803f     ?.!.......0.?...
	...
   a7c68:	00060000 000c000c 000c000c 0018000c     ................
   a7c78:	000c000c 000c000c 00000006 00000000     ................
   a7c88:	00060000 00060006 00060006 00060006     ................
   a7c98:	00060006 00060006 00000006 00000000     ................
   a7ca8:	000c0000 00060006 00060006 00030006     ................
   a7cb8:	00060006 00060006 0000000c 00000000     ................
	...
   a7cd0:	00180000 00038024 00000000 00000000     ....$...........
	...

000a7ce8 <Font20>:
   a7ce8:	000a7cf0 0014000e                       .|......

000a7cf0 <Font20_Table>:
	...
   a7d18:	00070000 00070007 00070007 00070007     ................
   a7d28:	00020002 00000000 00070007 00000000     ................
	...
   a7d44:	e01ce01c 4008e01c 40084008 00000000     .......@.@.@....
	...
   a7d68:	c00cc00c c00cc00c f03fc00c c00cf03f     ..........?.?...
   a7d78:	f03fc00c c00cf03f c00cc00c c00cc00c     ..?.?...........
	...
   a7d90:	00030003 e00fe007 00186018 c00f001f     .........`......
   a7da0:	6018e000 c01f6018 0003801f 00030003     ...`.`..........
	...
   a7db8:	001c0000 00220022 601c0022 800fe001     ...."."."..`....
   a7dc8:	c031003c 20022002 c0012002 00000000     <.1.. . . ......
	...
   a7de4:	e0030000 000ce00f 0006000c f01f300f     .............0..
   a7df4:	c018e019 b007f01f 00000000 00000000     ................
	...
   a7e0c:	80038003 00018003 00010001 00000000     ................
	...
   a7e30:	c0000000 8001c000 80018001 00030003     ................
   a7e40:	00030003 00030003 80018001 c0008001     ................
   a7e50:	0000c000 00000000 000c0000 0006000c     ................
   a7e60:	00060006 00030003 00030003 00030003     ................
   a7e70:	00060006 000c0006 0000000c 00000000     ................
   a7e80:	00030000 00030003 e01f601b 80078007     .........`......
   a7e90:	c00cc00f 00000000 00000000 00000000     ................
	...
   a7eac:	00030000 00030003 f03f0003 0003f03f     ..........?.?...
   a7ebc:	00030003 00000003 00000000 00000000     ................
	...
   a7ee4:	80030000 00030003 00060006 00000004     ................
	...
   a7f04:	e03f0000 0000e03f 00000000 00000000     ..?.?...........
	...
   a7f34:	80030000 80038003 00000000 00000000     ................
   a7f44:	00000000 60006000 c000c000 8001c000     .....`.`........
   a7f54:	00038001 00060003 000c0006 000c000c     ................
   a7f64:	00180018 00000000 00000000 800f0000     ................
   a7f74:	c018c01f 60306030 60306030 60306030     ....0`0`0`0`0`0`
   a7f84:	c0186030 800fc01f 00000000 00000000     0`..............
   a7f94:	00000000 00030000 001f001f 00030003     ................
   a7fa4:	00030003 00030003 00030003 e01fe01f     ................
	...
   a7fc0:	800f0000 e038c01f 60006030 8001c000     ......8.0`.`....
   a7fd0:	00060003 0018000c e03fe03f 00000000     ........?.?.....
	...
   a7fe8:	800f0000 e030c03f e0006000 c007c007     ....?.0..`......
   a7ff8:	6000e000 e0606000 803fc07f 00000000     ...`.``...?.....
	...
   a8010:	c0010000 c003c003 c00cc006 c018c00c     ................
   a8020:	e03fc030 c000e03f e003e003 00000000     0.?.?...........
	...
   a8038:	c01f0000 0018c01f 801f0018 e018c01f     ................
   a8048:	60006000 e0306000 801fc03f 00000000     .`.`.`0.?.......
	...
   a8060:	e0030000 001ee00f 00380018 c03f8037     ..........8.7.?.
   a8070:	6030e038 e0186030 8007c01f 00000000     8.0`0`..........
	...
   a8088:	e03f0000 6030e03f c0006000 c000c000     ..?.?.0`.`......
   a8098:	80018001 00038001 00030003 00000000     ................
	...
   a80b0:	800f0000 e038c01f e0386030 c01fc01f     ......8.0`8.....
   a80c0:	6030e038 e0386030 800fc01f 00000000     8.0`0`8.........
	...
   a80d8:	000f0000 c038c01f 60306030 e01fe038     ......8.0`0`8...
   a80e8:	e000600f c003c000 003e803f 00000000     .`......?.>.....
	...
   a8108:	80030000 80038003 00000000 80030000     ................
   a8118:	80038003 00000000 00000000 00000000     ................
	...
   a8130:	c0010000 c001c001 00000000 80030000     ................
   a8140:	00060003 00040006 00000000 00000000     ................
   a8150:	00000000 30000000 c003f000 001c0007     .......0........
   a8160:	001c0078 c0030007 3000f000 00000000     x..........0....
	...
   a8180:	f07f0000 0000f07f f07f0000 0000f07f     ................
	...
   a81a4:	00300000 000f003c e0008003 e0007800     ..0.<........x..
   a81b4:	000f8003 0030003c 00000000 00000000     ....<.0.........
	...
   a81cc:	c01f800f 60186018 c0016000 00038003     .....`.`.`......
   a81dc:	00000000 00070007 00000000 00000000     ................
   a81ec:	00000000 80030000 4008800c 40104010     ...........@.@.@
   a81fc:	4012c011 40124012 0010c011 40080008     ...@.@.@.......@
   a820c:	00008007 00000000 00000000 00000000     ................
   a821c:	801f801f c0068003 c00cc006 e01f600c     .............`..
   a822c:	3030e01f 78787878 00000000 00000000     ..00xxxx........
	...
   a8244:	c03f803f 60186018 c01fe018 7018e01f     ?.?..`.`.......p
   a8254:	30183018 e03ff03f 00000000 00000000     .0.0?.?.........
	...
   a826c:	f00fb007 3038701c 00300030 00300030     .....p800.0.0.0.
   a827c:	701c3038 c007e00f 00000000 00000000     80.p............
	...
   a8294:	c07f807f 7030e030 30303030 30303030     ....0.0p00000000
   a82a4:	e0307030 807fc07f 00000000 00000000     0p0.............
	...
   a82bc:	f03ff03f 30183018 801f8019 8019801f     ?.?..0.0........
   a82cc:	30183018 f03ff03f 00000000 00000000     .0.0?.?.........
	...
   a82e4:	f03ff03f 30183018 801f8019 8019801f     ?.?..0.0........
   a82f4:	00180018 003f003f 00000000 00000000     ....?.?.........
	...
   a830c:	f01fb007 30307018 00300030 f831f831     .....p000.0.1.1.
   a831c:	30183030 c007f01f 00000000 00000000     00.0............
	...
   a8334:	f03cf03c 60186018 e01f6018 6018e01f     <.<..`.`.`.....`
   a8344:	60186018 f03cf03c 00000000 00000000     .`.`<.<.........
	...
   a835c:	e01fe01f 00030003 00030003 00030003     ................
   a836c:	00030003 e01fe01f 00000000 00000000     ................
	...
   a8384:	f803f803 60006000 60006000 60306030     .....`.`.`.`0`0`
   a8394:	e0306030 800fc03f 00000000 00000000     0`0.?...........
	...
   a83ac:	f83ef83e 8019e018 001f001b c018801d     >.>.............
   a83bc:	6018c018 383e783e 00000000 00000000     ...`>x>8........
	...
   a83d4:	003f003f 000c000c 000c000c 300c000c     ?.?............0
   a83e4:	300c300c f03ff03f 00000000 00000000     .0.0?.?.........
	...
   a83fc:	78787878 f03c7038 b037b034 3033b037     xxxx8p<.4.7.7.30
   a840c:	30303033 f87cf87c 00000000 00000000     3000|.|.........
	...
   a8424:	f03df039 601e601c 601b601e e019601b     9.=..`.`.`.`.`..
   a8434:	e018e019 603ee03e 00000000 00000000     ....>.>`........
	...
   a844c:	c00f8007 7038e01c 30303030 30303030     ......8p00000000
   a845c:	e01c7038 8007c00f 00000000 00000000     8p..............
	...
   a8474:	e03fc03f 30187018 70183018 c01fe01f     ?.?..p.0.0.p....
   a8484:	00180018 003f003f 00000000 00000000     ....?.?.........
	...
   a849c:	c00f8007 7038e01c 30303030 30303030     ......8p00000000
   a84ac:	e01c7038 8007c00f f00fb007 0000e00c     8p..............
	...
   a84c4:	e03fc03f 30187018 e01f7018 e018c01f     ?.?..p.0.p......
   a84d4:	70186018 183e383e 00000000 00000000     .`.p>8>.........
	...
   a84ec:	f01fb00f 30307038 801f0038 7000e007     ....8p008......p
   a84fc:	70383030 c037e03f 00000000 00000000     008p?.7.........
	...
   a8514:	f03ff03f 30333033 00033033 00030003     ?.?.303030......
   a8524:	00030003 c00fc00f 00000000 00000000     ................
	...
   a853c:	f03cf03c 60186018 60186018 60186018     <.<..`.`.`.`.`.`
   a854c:	e01c6018 8007c00f 00000000 00000000     .`..............
	...
   a8564:	f078f078 60306030 c018c018 800d800d     x.x.0`0`........
   a8574:	0007800d 00070007 00000000 00000000     ................
	...
   a858c:	7c7c7c7c 98331830 98339833 d016d836     ||||0.3.3.3.6...
   a859c:	701c701c 3018701c 00000000 00000000     .p.p.p.0........
	...
   a85b4:	f078f078 c0186030 0007800d 800d0007     x.x.0`..........
   a85c4:	6030c018 f078f078 00000000 00000000     ..0`x.x.........
	...
   a85dc:	f03cf03c c00c6018 80078007 00030003     <.<..`..........
   a85ec:	00030003 c00fc00f 00000000 00000000     ................
	...
   a8604:	e01fe01f c0186018 00038001 00060003     .....`..........
   a8614:	6018600c e01fe01f 00000000 00000000     .`.`............
   a8624:	00000000 c0030000 0003c003 00030003     ................
   a8634:	00030003 00030003 00030003 00030003     ................
   a8644:	c0030003 0000c003 00000000 00180018     ................
   a8654:	000c000c 0006000c 00030006 80010003     ................
   a8664:	c0008001 c000c000 60006000 00000000     .........`.`....
   a8674:	00000000 000f0000 0003000f 00030003     ................
   a8684:	00030003 00030003 00030003 00030003     ................
   a8694:	000f0003 0000000f 00000000 00020000     ................
   a86a4:	800d0007 6030c018 00002020 00000000     ......0`  ......
	...
   a86ec:	fcfffcff 00040000 80000003 00000000     ................
	...
   a8720:	c00f0000 6000e01f e01fe00f e0306038     .......`....8`0.
   a8730:	701ff03f 00000000 00000000 00000000     ?..p............
   a8740:	00700000 00300070 80370030 6038e03f     ..p.p.0.0.7.?.8`
   a8750:	30303030 60383030 8077e07f 00000000     0000008`..w.....
	...
   a8770:	b0070000 3018f01f 00303030 30380030     .......0000.0.80
   a8780:	c00ff01f 00000000 00000000 00000000     ................
   a8790:	70000000 30007000 b0073000 7018f01f     ...p.p.0.0.....p
   a87a0:	30303030 70383030 b807f81f 00000000     0000008p........
	...
   a87c0:	80070000 6018e01f f03ff03f 30180030     .......`?.?.0..0
   a87d0:	c007f01f 00000000 00000000 00000000     ................
   a87e0:	f0030000 0006f007 e01f0006 0006e01f     ................
   a87f0:	00060006 00060006 e01fe01f 00000000     ................
	...
   a8810:	b8070000 7018f81f 30303030 70183030     .......p000000.p
   a8820:	b007f01f 70003000 c00fe00f 00000000     .....0.p........
   a8830:	00380000 00180038 c01b0018 601ce01f     ..8.8..........`
   a8840:	60186018 60186018 f03cf03c 00000000     .`.`.`.`<.<.....
	...
   a8858:	00030000 00000003 001f0000 0003001f     ................
   a8868:	00030003 00030003 e01fe01f 00000000     ................
	...
   a8880:	00030000 00000003 c01f0000 c000c01f     ................
   a8890:	c000c000 c000c000 c000c000 c001c000     ................
   a88a0:	003f803f 00000000 00380000 00180038     ?.?.......8.8...
   a88b0:	e01b0018 001be01b 001e001e 8019001b     ................
   a88c0:	f039f039 00000000 00000000 00000000     9.9.............
   a88d0:	001f0000 0003001f 00030003 00030003     ................
   a88e0:	00030003 00030003 e01fe01f 00000000     ................
	...
   a8900:	e07e0000 3033f07f 30333033 30333033     ..~...3030303030
   a8910:	b87bb87b 00000000 00000000 00000000     {.{.............
	...
   a8928:	c03b0000 601ce03f 60186018 60186018     ..;.?..`.`.`.`.`
   a8938:	f03cf03c 00000000 00000000 00000000     <.<.............
	...
   a8950:	80070000 6018e01f 30303030 60183030     .......`000000.`
   a8960:	8007e01f 00000000 00000000 00000000     ................
	...
   a8978:	80770000 6038e07f 30303030 60383030     ..w...8`0000008`
   a8988:	8037e03f 00300030 007c007c 00000000     ?.7.0.0.|.|.....
	...
   a89a0:	b8070000 7018f81f 30303030 70183030     .......p000000.p
   a89b0:	b007f01f 30003000 f800f800 00000000     .....0.0........
	...
   a89c8:	e03c0000 300ff03d 000c000e 000c000c     ..<.=..0........
   a89d8:	c03fc03f 00000000 00000000 00000000     ?.?.............
	...
   a89f0:	e0070000 6018e01f c00f001e 6018e001     .......`.......`
   a8a00:	801fe01f 00000000 00000000 00000000     ................
   a8a10:	00000000 000c000c e03f000c 000ce03f     ..........?.?...
   a8a20:	000c000c 300c000c c007f00f 00000000     .......0........
	...
   a8a40:	e0380000 6018e038 60186018 e0186018     ..8.8..`.`.`.`..
   a8a50:	700ff01f 00000000 00000000 00000000     ...p............
	...
   a8a68:	f0780000 6030f078 c018c018 800d800d     ..x.x.0`........
   a8a78:	00070007 00000000 00000000 00000000     ................
	...
   a8a90:	f0780000 6032f078 e0376032 c01dc01d     ..x.x.2`2`7.....
   a8aa0:	c018c018 00000000 00000000 00000000     ................
	...
   a8ab8:	f03c0000 c00cf03c 00038007 c00c8007     ..<.<...........
   a8ac8:	f03cf03c 00000000 00000000 00000000     <.<.............
	...
   a8ae0:	f0780000 6030f078 c018c018 800f800d     ..x.x.0`........
   a8af0:	00060007 000c0006 007f007f 00000000     ................
	...
   a8b08:	e01f0000 c018e01f 00038001 600c0006     ...............`
   a8b18:	e01fe01f 00000000 00000000 00000000     ................
   a8b28:	c0010000 0003c003 00030003 00030003     ................
   a8b38:	000e0007 00030007 00030003 c0030003     ................
   a8b48:	0000c001 00000000 00030000 00030003     ................
   a8b58:	00030003 00030003 00030003 00030003     ................
   a8b68:	00030003 00030003 00000003 00000000     ................
   a8b78:	001c0000 0006001e 00060006 00060006     ................
   a8b88:	80030007 00060007 00060006 001e0006     ................
   a8b98:	0000001c 00000000 00000000 00000000     ................
   a8ba8:	00000000 303f000e e001f033 00000000     ......?03.......
	...

000a8bc8 <Font24>:
   a8bc8:	000a8bd0 00180011                       ........

000a8bd0 <Font24_Table>:
	...
   a8c1c:	80030000 00800300 03008003 80030080     ................
   a8c2c:	00800300 03008003 80030080 00000100     ................
   a8c3c:	00000001 00000000 00800300 00008003     ................
	...
   a8c68:	00700e00 0e00700e 20040070 00200400     ..p..p..p.. .. .
   a8c78:	04002004 00000020 00000000 00000000     . .. ...........
	...
   a8cac:	60060000 00600600 06006006 60060060     ...`..`..`..`..`
   a8cbc:	00f83f00 0600f83f c00c0060 00f83f00     .?..?...`....?..
   a8ccc:	0c00f83f c00c00c0 00c00c00 0c00c00c     ?...............
   a8cdc:	000000c0 00000000 00000000 00000000     ................
   a8cec:	00000000 01000000 80010080 00b00700     ................
   a8cfc:	1800f00f 70180070 00001c00 0700800f     ....p..p........
   a8d0c:	f00000e0 00301800 1c00301c e01f0070     ......0..0..p...
   a8d1c:	00c01b00 01008001 80010080 00800100     ................
	...
   a8d3c:	80070000 00c00f00 1800e01c 60180060     ............`..`
   a8d4c:	00e01c00 0700f80f f01f00e0 00380700     ..............8.
   a8d5c:	06001806 38070018 00f00300 0000e001     .......8........
	...
   a8d8c:	0700f003 600c00f0 00000c00 0600000c     .......`........
   a8d9c:	00070000 009c0f00 1800fc1d 701800f0     ...............p
   a8dac:	00fc0f00 0000dc07 00000000 00000000     ................
	...
   a8dd0:	00800300 03008003 00010080 00000100     ................
   a8de0:	01000001 00000000 00000000 00000000     ................
	...
   a8e14:	18000000 00380000 00007000 e00000f0     ......8..p......
   a8e24:	00e00000 0100c001 c00100c0 00c00100     ................
   a8e34:	0100c001 e00000c0 00e00000 00007000     .............p..
   a8e44:	38000070 00180000 00000000 00000000     p..8............
	...
   a8e5c:	00180000 00001c00 0e00000e 00070000     ................
   a8e6c:	00000700 03008003 80030080 00800300     ................
   a8e7c:	03008003 00070080 00000700 0e00000f     ................
   a8e8c:	001c0000 00001800 00000000 00000000     ................
	...
   a8ea4:	80010000 00800100 1d008001 f81f00b8     ................
   a8eb4:	00e00700 0300c003 600600c0 00600600     ...........`..`.
	...
   a8ef4:	01008001 80010080 00800100 3f008001     ...............?
   a8f04:	fc3f00fc 00800100 01008001 80010080     ..?.............
   a8f14:	00800100 00000000 00000000 00000000     ................
	...
   a8f58:	e0000000 00c00000 0100c001 80010080     ................
   a8f68:	00000300 00000003 00000000 00000000     ................
	...
   a8f90:	1f000000 f81f00f8 00000000 00000000     ................
	...
   a8fe8:	c0030000 00c00300 0000c003 00000000     ................
	...
   a9008:	00001800 38000018 00300000 00007000     .......8..0..p..
   a9018:	60000060 00c00000 0100c000 80010080     `..`............
   a9028:	00000300 06000003 00060000 00000e00     ................
   a9038:	1c00000c 00180000 00001800 00000000     ................
	...
   a9054:	c0030000 00e00700 0c00300c 18180030     .........0..0...
   a9064:	00181800 18001818 18180018 00181800     ................
   a9074:	0c001818 300c0030 00e00700 0000c003     ....0..0........
	...
   a909c:	80000000 00800700 1d00801f 80010080     ................
   a90ac:	00800100 01008001 80010080 00800100     ................
   a90bc:	01008001 80010080 00f81f00 0000f81f     ................
	...
   a90e4:	c0070000 00f01f00 30003038 18300018     ........80.0..0.
   a90f4:	00180000 00003000 c0010060 00800300     .....0..`.......
   a9104:	0c000006 00180000 00f83f00 0000f83f     .........?..?...
	...
   a912c:	c0030000 00e00f00 0000700c 30000030     .........p..0..0
   a913c:	00600000 0300c003 700000e0 00180000     ..`........p....
   a914c:	00001800 38180018 00f01f00 0000c00f     .......8........
	...
   a9174:	e0000000 00e00100 0300e001 60060060     ............`..`
   a9184:	00600600 0c00600c 60180060 00603000     ..`..`..`..`.0`.
   a9194:	3f00f83f 600000f8 00f80300 0000f803     ?..?...`........
	...
   a91bc:	f01f0000 00f01f00 18000018 00180000     ................
   a91cc:	00c01b00 1c00f01f 18000030 00180000     ........0.......
   a91dc:	00001800 30300018 00f03f00 0000c00f     ......00.?......
	...
   a9204:	f8000000 00f80300 0e000007 000c0000     ................
   a9214:	00001800 1f00c01b 301c00f0 00181800     ...........0....
   a9224:	18001818 380c0018 00f00f00 0000e003     .......8........
	...
   a924c:	f81f0000 00f81f00 18001818 30000038     ............8..0
   a925c:	00300000 00007000 60000060 00e00000     ..0..p..`..`....
   a926c:	0000c000 c00100c0 00800100 00008001     ................
	...
   a9294:	e0070000 00f00f00 1800381c 18180018     .........8......
   a92a4:	00300c00 0700e007 300c00e0 00181800     ..0........0....
   a92b4:	18001818 381c0018 00f00f00 0000e007     .......8........
	...
   a92dc:	c0070000 00f00f00 1800301c 18180018     .........0......
   a92ec:	00181800 0f00380c d80300f8 00180000     .....8..........
   a92fc:	00003000 e0000070 00c01f00 0000001f     .0..p...........
	...
   a9330:	c0030000 00c00300 0000c003 00000000     ................
	...
   a9348:	c0030000 00c00300 0000c003 00000000     ................
	...
   a9378:	f0000000 00f00000 0000f000 00000000     ................
	...
   a9390:	c00100e0 00800100 03008001 00020000     ................
	...
   a93bc:	00001c00 f000003c 00c00300 3c00000f     ....<..........<
   a93cc:	00f00000 00003c00 0300000f f00000c0     .....<..........
   a93dc:	003c0000 00001c00 00000000 00000000     ..<.............
	...
   a940c:	00fc7f00 0000fc7f 00000000 00fc7f00     ................
   a941c:	0000fc7f 00000000 00000000 00000000     ................
	...
   a944c:	78000070 001e0000 00800700 0000e001     p..x............
   a945c:	1e000078 00780000 0700e001 001e0080     x.....x.........
   a946c:	00007800 00000070 00000000 00000000     .x..p...........
	...
   a9490:	00c00700 1800e00f 30180070 00301800     ........p..0..0.
   a94a0:	00007000 c00300e0 00800300 00000003     .p..............
   a94b0:	00000000 00000700 00000007 00000000     ................
	...
   a94d4:	e0030000 00f00700 0c00380e 78180018     .........8.....x
   a94e4:	00f81800 1900d819 98190098 00981900     ................
   a94f4:	1800f818 00180078 00000c00 0700180e     ....x...........
   a9504:	e00300f8 00000000 00000000 00000000     ................
	...
   a9520:	00801f00 0100c01f 600300c0 00600300     ...........`..`.
   a9530:	06003006 300c0030 00f80f00 1800f81f     .0..0..0........
   a9540:	0c30000c 007ffc00 00007ffc 00000000     ..0.............
	...
   a9568:	00e07f00 1800f07f 18180038 00181800     ........8.......
   a9578:	1f003818 f81f00f0 001c1800 18000c18     .8..............
   a9588:	0c18000c 00f87f00 0000f07f 00000000     ................
	...
   a95b0:	00ec0300 1c00fc0f 0c18001c 000c3000     .............0..
   a95c0:	30000030 00300000 00003000 18000030     0..0..0..0..0...
   a95d0:	1c1c000c 00f80f00 0000f003 00000000     ................
	...
   a95f8:	00c07f00 1800f07f 18180038 000c1800     ........8.......
   a9608:	18000c18 0c18000c 000c1800 18000c18     ................
   a9618:	38180018 00f07f00 0000e07f 00000000     ...8............
	...
   a9640:	00f87f00 1800f87f 18180018 00981900     ................
   a9650:	1f008019 801f0080 00801900 18009819     ................
   a9660:	18180018 00f87f00 0000f87f 00000000     ................
	...
   a9688:	00fc3f00 0c00fc3f 0c0c000c 00cc0c00     .?..?...........
   a9698:	0f00c00c c00f00c0 00c00c00 0c00c00c     ................
   a96a8:	000c0000 00c03f00 0000c03f 00000000     .....?..?.......
	...
   a96d0:	00ec0300 1c00fc0f 0c18001c 000c3000     .............0..
   a96e0:	30000030 fe300000 00fe3000 38000c30     0..0..0..0..0..8
   a96f0:	1c1c000c 00fc0f00 0000f003 00000000     ................
	...
   a9718:	007e7e00 18007e7e 18180018 00181800     .~~.~~..........
   a9728:	1f001818 f81f00f8 00181800 18001818     ................
   a9738:	18180018 007e7e00 00007e7e 00000000     .....~~.~~......
	...
   a9760:	00f81f00 0100f81f 80010080 00800100     ................
   a9770:	01008001 80010080 00800100 01008001     ................
   a9780:	80010080 00f81f00 0000f81f 00000000     ................
	...
   a97a8:	00fe0700 0000fe07 30000030 00300000     ........0..0..0.
   a97b8:	00003000 30300030 00303000 30003030     .0..0.00.00.00.0
   a97c8:	60300030 00e03f00 0000800f 00000000     0.0`.?..........
	...
   a97f0:	003e7f00 18003e7f 60180030 00c01800     ..>..>..0..`....
   a9800:	1b008019 c01f0080 00e01c00 18007018     .............p..
   a9810:	38180030 001f7f00 00001f7f 00000000     0..8............
	...
   a9838:	00807f00 0c00807f 000c0000 00000c00     ................
   a9848:	0c00000c 000c0000 000c0c00 0c000c0c     ................
   a9858:	0c0c000c 00fc7f00 0000fc7f 00000000     ................
	...
   a9880:	000ff000 38001ff8 3c3c001c 003c3c00     .......8..<<.<<.
   a9890:	36006c36 cc33006c 00cc3300 30008c31     6l.6l.3..3..1..0
   a98a0:	0c30000c 007ffe00 00007ffe 00000000     ..0.............
	...
   a98c8:	00fe7800 1c00fe78 181e0018 00181f00     .x..x...........
   a98d8:	1b00181b d8190098 00d81800 1800f818     ................
   a98e8:	38180078 00187f00 0000187f 00000000     x..8............
	...
   a9910:	00c00300 1c00f00f 18180038 001c3800     ........8....8..
   a9920:	30000c30 0c30000c 000c3000 18001c38     0..0..0..0..8...
   a9930:	381c0018 00f00f00 0000c003 00000000     ...8............
	...
   a9958:	00f03f00 0c00f83f 0c0c001c 000c0c00     .?..?...........
   a9968:	0c000c0c f80f0018 00e00f00 0c00000c     ................
   a9978:	000c0000 00c03f00 0000c03f 00000000     .....?..?.......
	...
   a99a0:	00c00300 1c00f00f 18180038 001c3800     ........8....8..
   a99b0:	30000c30 0c30000c 000c3000 18001c38     0..0..0..0..8...
   a99c0:	381c0018 00f00f00 0700c007 fc0f00cc     ...8............
   a99d0:	00380c00 00000000 00000000 00000000     ..8.............
	...
   a99e8:	00e07f00 1800f07f 18180038 00181800     ........8.......
   a99f8:	1f003818 c01f00f0 00e01800 18007018     .8...........p..
   a9a08:	38180030 001e7f00 00000e7f 00000000     0..8............
	...
   a9a30:	00d80700 1c00f80f 18180038 00181800     ........8.......
   a9a40:	0f00001e f00300c0 00780000 18001818     ..........x.....
   a9a50:	381c0018 00f01f00 0000e01b 00000000     ...8............
	...
   a9a78:	00fc3f00 3100fc3f 8c31008c 008c3100     .?..?..1..1..1..
   a9a88:	01008c31 80010080 00800100 01008001     1...............
   a9a98:	80010080 00f00f00 0000f00f 00000000     ................
	...
   a9ac0:	007e7e00 18007e7e 18180018 00181800     .~~.~~..........
   a9ad0:	18001818 18180018 00181800 18001818     ................
   a9ae0:	300c0018 00f00f00 0000c003 00000000     ...0............
	...
   a9b08:	007f7f00 18007f7f 180c000c 00180c00     ................
   a9b18:	0600180c 30060030 00600300 03006003     ....0..0..`..`..
   a9b28:	c0010060 00c00100 00008000 00000000     `...............
	...
   a9b50:	803ffe00 30803ffe 06300006 00863000     ..?..?.0..0..0..
   a9b60:	1900cc19 6c1b00cc 006c1b00 0e007c1e     .......l..l..|..
   a9b70:	380e0038 00180c00 0000180c 00000000     8..8............
	...
   a9b98:	007e7e00 18007e7e 300c0018 00600600     .~~.~~.....0..`.
   a9ba8:	0100c003 80010080 00c00300 0c006006     .............`..
   a9bb8:	18180030 007e7e00 00007e7e 00000000     0....~~.~~......
	...
   a9be0:	007e7c00 18007e7c 300c0018 00600600     .|~.|~.....0..`.
   a9bf0:	03006006 800100c0 00800100 01008001     .`..............
   a9c00:	80010080 00f00f00 0000f00f 00000000     ................
	...
   a9c28:	00f81f00 1800f81f 30180018 00601800     ...........0..`.
   a9c38:	0100c018 00030080 00180600 1800180c     ................
   a9c48:	18300018 00f83f00 0000f83f 00000000     ..0..?..?.......
	...
   a9c6c:	f0010000 00f00100 01008001 80010080     ................
   a9c7c:	00800100 01008001 80010080 00800100     ................
   a9c8c:	01008001 80010080 00800100 01008001     ................
   a9c9c:	f0010080 00f00100 00000000 00000000     ................
   a9cac:	00000000 18000018 001c0000 00000c00     ................
   a9cbc:	0600000e 00060000 00000300 01000003     ................
   a9ccc:	80010080 00c00000 0000c000 60000060     ............`..`
   a9cdc:	00700000 00003000 18000038 00180000     ..p..0..8.......
	...
   a9cfc:	800f0000 00800f00 01008001 80010080     ................
   a9d0c:	00800100 01008001 80010080 00800100     ................
   a9d1c:	01008001 80010080 00800100 01008001     ................
   a9d2c:	800f0080 00800f00 00000000 00000000     ................
	...
   a9d44:	c0010080 00e00300 06007007 180c0030     .........p..0...
   a9d54:	000c1800 00000410 00000000 00000000     ................
	...
   a9dc8:	ffff0000 00ffff00 03000000 80030000     ................
   a9dd8:	00e00000 00006000 00000000 00000000     .....`..........
	...
   a9e28:	c00f0000 00e01f00 00003000 f0070030     .........0..0...
   a9e38:	00f01f00 30003038 70300030 00fc1f00     ....80.00.0p....
   a9e48:	0000bc0f 00000000 00000000 00000000     ................
	...
   a9e64:	00780000 00007800 18000018 e01b0000     ..x..x..........
   a9e74:	00f81f00 1800181c 0c18000c 000c1800     ................
   a9e84:	18000c18 181c000c 00f87f00 0000e07b     ............{...
	...
   a9eb8:	ec030000 00fc0f00 38001c1c 0c30000c     ...........8..0.
   a9ec8:	00003000 38000030 1c1c000c 00f80f00     .0..0..8........
   a9ed8:	0000f003 00000000 00000000 00000000     ................
	...
   a9ef4:	78000000 00780000 00001800 d8070018     ...x..x.........
   a9f04:	00f81f00 30003818 18300018 00183000     .....8.0..0..0..
   a9f14:	30001830 38180018 00fe1f00 0000de07     0..0...8........
	...
   a9f48:	e0070000 00f81f00 30001818 fc3f000c     ...........0..?.
   a9f58:	00fc3f00 30000030 0c180000 00fc1f00     .?..0..0........
   a9f68:	0000f007 00000000 00000000 00000000     ................
	...
   a9f84:	fc010000 00fc0300 06000006 f83f0000     ..............?.
   a9f94:	00f83f00 06000006 00060000 00000600     .?..............
   a9fa4:	06000006 00060000 00f03f00 0000f03f     .........?..?...
	...
   a9fd8:	de070000 00fe1f00 30003818 18300018     .........8.0..0.
   a9fe8:	00183000 30001830 38180018 00f81f00     .0..0..0...8....
   a9ff8:	0000d807 18000018 00380000 0f00f00f     ..........8.....
   aa008:	000000c0 00000000 00000000 00780000     ..............x.
   aa018:	00007800 18000018 e01b0000 00f01f00     .x..............
   aa028:	1800381c 18180018 00181800 18001818     .8..............
   aa038:	18180018 007e7e00 00007e7e 00000000     .....~~.~~......
	...
   aa05c:	80010000 00800100 00000000 801f0000     ................
   aa06c:	00801f00 01008001 80010080 00800100     ................
   aa07c:	01008001 80010080 00fc3f00 0000fc3f     .........?..?...
	...
   aa0a4:	c0000000 00c00000 00000000 f01f0000     ................
   aa0b4:	00f01f00 00003000 30000030 00300000     .....0..0..0..0.
   aa0c4:	00003000 30000030 00300000 00003000     .0..0..0..0..0..
   aa0d4:	30000030 00700000 1f00e01f 00000080     0..0..p.........
	...
   aa0ec:	003c0000 00003c00 0c00000c f80c0000     ..<..<..........
   aa0fc:	00f80c00 0d00c00c 800f0080 00000f00     ................
   aa10c:	0d00800f e00c00c0 007c3c00 00007c3c     .........<|.<|..
	...
   aa134:	801f0000 00801f00 01008001 80010080     ................
   aa144:	00800100 01008001 80010080 00800100     ................
   aa154:	01008001 80010080 00fc3f00 0000fc3f     .........?..?...
	...
   aa188:	78f70000 00fcff00 3100cc39 8c31008c     ...x....9..1..1.
   aa198:	008c3100 31008c31 8c31008c 00effd00     .1..1..1..1.....
   aa1a8:	0000effd 00000000 00000000 00000000     ................
	...
   aa1d0:	e07b0000 00f07f00 1800381c 18180018     ..{......8......
   aa1e0:	00181800 18001818 18180018 007e7e00     .............~~.
   aa1f0:	00007e7e 00000000 00000000 00000000     ~~..............
	...
   aa218:	c0030000 00f00f00 3800381c 0c30001c     .........8.8..0.
   aa228:	000c3000 38000c30 381c001c 00f00f00     .0..0..8...8....
   aa238:	0000c003 00000000 00000000 00000000     ................
	...
   aa260:	e07b0000 00f87f00 1800181c 0c18000c     ..{.............
   aa270:	000c1800 18000c18 181c000c 00f81f00     ................
   aa280:	1800e01b 00180000 00001800 7f00007f     ................
	...
   aa2a8:	de070000 00fe1f00 30003818 18300018     .........8.0..0.
   aa2b8:	00183000 30001830 38180018 00f81f00     .0..0..0...8....
   aa2c8:	0000d807 18000018 00180000 0000fe00     ................
   aa2d8:	000000fe 00000000 00000000 00000000     ................
	...
   aa2f0:	783e0000 00fc3e00 0700cc07 00060000     ..>x.>..........
   aa300:	00000600 06000006 00060000 00f03f00     .............?..
   aa310:	0000f03f 00000000 00000000 00000000     ?...............
	...
   aa338:	f8070000 00f80f00 18001818 801f0018     ................
   aa348:	00f00f00 1800f800 38180018 00f01f00     ...........8....
   aa358:	0000e01f 00000000 00000000 00000000     ................
	...
   aa374:	000c0000 00000c00 0c00000c f03f0000     ..............?.
   aa384:	00f03f00 0c00000c 000c0000 00000c00     .?..............
   aa394:	0c00000c 1c0c0000 00fc0700 0000f003     ................
	...
   aa3c8:	78780000 00787800 18001818 18180018     ..xx.xx.........
   aa3d8:	00181800 18001818 38180018 00fe0f00     ...........8....
   aa3e8:	0000de07 00000000 00000000 00000000     ................
	...
   aa410:	3e7c0000 003e7c00 18001818 300c0018     ..|>.|>........0
   aa420:	00300c00 06006006 e0070060 00c00300     ..0..`..`.......
   aa430:	0000c003 00000000 00000000 00000000     ................
	...
   aa458:	3c780000 003c7800 33001831 98330098     ..x<.x<.1..3..3.
   aa468:	00b01a00 1e00f01e 601c00f0 00600c00     ...........`..`.
   aa478:	0000600c 00000000 00000000 00000000     .`..............
	...
   aa4a0:	7c3e0000 007c3e00 0600300c c0030060     ..>|.>|..0..`...
   aa4b0:	00800100 0600c003 300c0060 007c3e00     ........`..0.>|.
   aa4c0:	00007c3e 00000000 00000000 00000000     >|..............
	...
   aa4e8:	1f7e0000 001f7e00 0c000c18 180c0018     ..~..~..........
   aa4f8:	00300600 03003006 e0030060 00c00100     ..0..0..`.......
   aa508:	0100c000 80010080 00000300 3f00c03f     ............?..?
   aa518:	000000c0 00000000 00000000 00000000     ................
	...
   aa530:	f81f0000 00f81f00 18003018 c0000060     .........0..`...
   aa540:	00800100 06000003 180c0018 00f81f00     ................
   aa550:	0000f81f 00000000 00000000 00000000     ................
	...
   aa56c:	e0000000 00e00100 01008001 80010080     ................
   aa57c:	00800100 01008001 80030080 00000700     ................
   aa58c:	01008003 80010080 00800100 01008001     ................
   aa59c:	e0010080 00e00000 00000000 00000000     ................
	...
   aa5b4:	80010000 00800100 01008001 80010080     ................
   aa5c4:	00800100 01008001 80010080 00800100     ................
   aa5d4:	01008001 80010080 00800100 01008001     ................
   aa5e4:	80010080 00800100 00000000 00000000     ................
	...
   aa5fc:	00070000 00800700 01008001 80010080     ................
   aa60c:	00800100 01008001 c0010080 00e00000     ................
   aa61c:	0100c001 80010080 00800100 01008001     ................
   aa62c:	80070080 00000700 00000000 00000000     ................
	...
   aa658:	1f00000e b83b0018 00f03100 0000e000     ......;..1......
	...

000aa688 <Font9>:
   aa688:	000aa690 00090005                       ........

000aa690 <Font9_Table>:
	...
   aa698:	20202000 20002020 50500000 00000000     .     . ..PP....
   aa6a8:	50000000 f850f850 00005050 70a07820     ...PP.P.PP.. x.p
   aa6b8:	0020f028 10c8c000 18984020 90600000     (. ..... @....`.
   aa6c8:	90a840a0 20000068 00000020 00000000     .@..h..  .......
   aa6d8:	40402010 00102040 10204000 40201010     . @@@ ...@ ... @
   aa6e8:	20000000 20a870a8 00000000 20f82020     ... .p. ....  . 
   aa6f8:	00000020 00000000 40200000 00000000      ......... @....
   aa708:	000000f8 00000000 00000000 10000020     ............ ...
   aa718:	20202010 00004040 a8988870 007088c8     .   @@..p.....p.
   aa728:	20602000 20202020 88700000 40201008     . `     ..p... @
   aa738:	700000f8 08300888 00007088 90503010     ...p..0..p...0P.
   aa748:	001010f8 f080f800 70880808 40300000     ...........p..0@
   aa758:	8888f080 f8000070 40201008 00004040     ....p..... @@@..
   aa768:	70888870 00708888 88887000 60100878     p..p..p..p..x..`
   aa778:	00000000 20000020 00000000 00002000     .... .. ..... ..
   aa788:	00004020 40201000 00001020 f8000000      @.... @ .......
   aa798:	0000f800 80000000 80402040 70000000     ........@ @....p
   aa7a8:	20100888 00002000 b8888870 007880b0     ... . ..p.....x.
   aa7b8:	88502000 8888f888 88f00000 8888f088     . P.............
   aa7c8:	700000f0 80808088 00007088 888890e0     ...p.....p......
   aa7d8:	00e09088 8080f800 f88080f0 80f80000     ................
   aa7e8:	8080f080 70000080 88988088 00007888     .......p.....x..
   aa7f8:	f8888888 00888888 20207000 70202020     .........p     p
   aa808:	10380000 90101010 88000060 a0c0a090     ..8.....`.......
   aa818:	00008890 80808080 00f88080 a8d88800     ................
   aa828:	888888a8 88880000 8898a8c8 70000088     ...............p
   aa838:	88888888 00007088 f08888f0 00808080     .....p..........
   aa848:	88887000 6890a888 88f00000 90a0f088     .p.....h........
   aa858:	70000088 08708088 00007088 202020f8     ...p..p..p...   
   aa868:	00202020 88888800 70888888 88880000        ........p....
   aa878:	50888888 88000020 a8888888 000050a8     ...P ........P..
   aa888:	20508888 00888850 88888800 20202050     ..P P.......P   
   aa898:	08f80000 80402010 700000f8 40404040     ..... @....p@@@@
   aa8a8:	00007040 20204040 00101020 10107000     @p..@@   ....p..
   aa8b8:	70101010 50200000 00000088 00000000     ...p.. P........
   aa8c8:	00000000 0000f800 00102040 00000000     ........@ ......
   aa8d8:	70000000 78887808 80800000 8888c8b0     ...p.x.x........
   aa8e8:	000000f0 80807000 00007088 98680808     .....p...p....h.
   aa8f8:	00788888 70000000 7080f888 20180000     ..x....p...p... 
   aa908:	20207020 00000020 88986800 70087888      p   ....h...x.p
   aa918:	c8b08080 00888888 20002000 20202020     ......... .     
   aa928:	10000000 10101000 80609010 c0a09080     ..........`.....
   aa938:	000090a0 20202020 00102020 d0000000     ....      ......
   aa948:	8888a8a8 00000000 8888c8b0 00000088     ................
   aa958:	88887000 00007088 c8b00000 80f08888     .p...p..........
   aa968:	68000080 78888898 00000808 8080c8b0     ...h...x........
   aa978:	00000080 70807000 0000f008 40e04040     .....p.p....@@.@
   aa988:	00304840 88000000 68988888 00000000     @H0........h....
   aa998:	50888888 00000020 a8888800 000050a8     ...P ........P..
   aa9a8:	50880000 00885020 88000000 68988888     ...P P.........h
   aa9b8:	00007008 402010f8 100000f8 20402020     .p.... @....  @ 
   aa9c8:	00001020 20202020 00202020 20204000      ...       ..@  
   aa9d8:	40202010 00000000 0010a840 00000000     .  @....@.......

000aa9e8 <mw_title_font_bitmap>:
   aa9e8:	9fff27f9 9f3c071f ffffffff 70b00fe6     .'....<........p
   aa9f8:	6038607e ff7f7030 e0e0ffff c1e0c0f1     ~`8`0p..........
   aaa08:	ce6040c0 7e7af243 070673fa 04060706     .@`.C.z~.s......
   aaa18:	e4e4e4e4 e14f08c8 f99fffef ffcfffff     ......O.........
   aaa28:	c9f9f91f fffffff9 ffffffff ffffffff     ................
   aaa38:	fcffffff f9ffff48 4e064e26 ff8f3803     ....H...&N.N.8..
   aaa48:	e4ffffff 3c202007 20203060 7ffe3f20     .....  <`0   ?..
   aaa58:	6040c0cf c04040c0 434e4040 727e72f2     ..@`.@@.@@NC.r~r
   aaa68:	02020272 e4040202 c8e4e4e4 c7e14f08     r............O..
   aaa78:	fff99fff 0ffecfff f9c9f9f9 ffffffff     ................
   aaa88:	f3ffffff ffffffff ccf8ffff 26f9ff7f     ...............&
   aaa98:	73ee024c ffffc731 e6c4ffff 673c2727     L..s1.......''<g
   aaaa8:	27273fe7 c77ffc3f 4e444ece cf4f4e4e     .?''?....NDNNNO.
   aaab8:	f2674ece 32227e62 72727272 e4e49c73     .Ng.b~"2rrrrs...
   aaac8:	89cf44e4 ff83f9c7 fffff9cf f94ffecf     .D............O.
   aaad8:	fff9f9ff ffffffff fff3ffff ffffffff     ................
   aaae8:	7fcef9ff 4cfef9ff f3634a9e ffff53e6     .......L.Jc..S..
   aaaf8:	3fe4ccff e767383f 3f2767fe fe63c0f8     ...??8g..g'?..c.
   aab08:	4f4e4e4c cfcf4fce 46f267ce 7232027e     LNNO.O...g.F~.2r
   aab18:	7f727272 e6e4e49c e799cf4c ffff11f9     rrr.....L.......
   aab28:	cffffff9 fff97ffe fffff9f9 ffffffff     ................
   aab38:	fffff3ff ffffffff ff7fcef9 9f04fcf9     ................
   aab48:	f2e72713 ffff9f53 3f3fc78c fee76038     .'..S.....??8`..
   aab58:	71262767 48fe71c0 ce4f4e4e cecfcf4f     g'&q.q.HNNO.O...
   aab68:	7e0ef267 72721202 9c3f7272 0ca6e4e4     g..~..rrrr?.....
   aab78:	f9e339cf 18fcff39 1e0c1c1c c919087c     .9..9.......|...
   aab88:	e0c0ccc9 e040e0c0 4f4ecec0 19909327     ......@...NO'...
   aab98:	f9ff7fce e71f04fc 07f3e78d 9cffff9f     ................
   aaba8:	72383e87 707e6060 ff632667 4ecafcf8     .>8r``~pg&c....N
   aabb8:	41cecf40 67c0cfcf 527e1ef2 72727212     @..A...g..~R.rrr
   aabc8:	e49c1f73 0f1ca7e4 fff9f339 0808fcff     s.......9.......
   aabd8:	18080808 89c90908 40404080 40404040     .........@@@@@@@
   aabe8:	234f4ece ce199013 fef9ff7f 19cf0f4e     .NO#........N...
   aabf8:	0702f2e7 071c7fc0 7f72783c 60f03c20     ........<xr. <.`
   aac08:	fcffc73f 404eca79 c141cecf f267c0cf     ?...y.N@..A...g.
   aac18:	02527e3e 03720272 e4e49c8f 391ebe07     >~R.r.r........9
   aac28:	fffff9f1 c9c9c9ff c919c8c9 8019c9c9     ................
   aac38:	4e4e4e4e ce734e4e 3330494e 31ce119f     NNNNNNs.NI03...1
   aac48:	4ffef99f e7019e07 c00702f2 31273c7f     ...O.........<'1
   aac58:	277f26ff 3f30e73c 73fcffc7 4f4e40ca     .&.'<.0?...s.@NO
   aac68:	cfc14fce 1ef267ce 7242727e c7077206     .O...g..~rBr.r..
   aac78:	07e4e49c f9793e1f fcfffff9 c8f9c909     .....>y.........
   aac88:	c9c9790e 4e9239c8 4f4e4e4e 4ecef3e3     .y...9.NNNNO...N
   aac98:	9e733849 1f20ce31 8307fcf9 f3e7633e     I8s.1. .....>c..
   aaca8:	feff9f07 ff23673c 39273f20 e33f3fe7     ....<g#. ?'9.??.
   aacb8:	caf378c0 ce4f4e40 4ecccf4f 7e0ef267     .x..@NO.O..Ng..~
   aacc8:	7e724272 9ce34f72 0f46e4e4 f9f8793c     rBr~rO....F.<y..
   aacd8:	09f8ffff 1ec8f9c9 c8c9c979 4e4e9279     ........y...y.NN
   aace8:	f14f4e4e 494ecef3 799cf33c ff3f66ce     NNO...NI<..y.f?.
   aacf8:	469207fc 53e6f367 7cfeff9f 20ff27e7     ...Fg..S...|.'. 
   aad08:	e739273f c0f13f3f cec8f371 4fce4f4e     ?'9.??..q...NO.O
   aad18:	664ececf 727e4672 727e7262 e69cf367     ..NfrF~rbr~rg...
   aad28:	3c4f464c fff9fcf9 c9c9f9ff 79fec9f9     LFO<...........y
   aad38:	39c8c9c9 4e4e4e92 f3f84f4e 384944ce     ...9.NNNNO...DI8
   aad48:	cef99873 feffff7f 6792924f ff53c6f1     s.......O..g..S.
   aad58:	e77cfcff 673ee727 3ee73927 e3fff827     ..|.'.>g'9.>'...
   aad68:	4ececfff cf4f4e4e 72664ece 62727e62     ...NNNO..Nfrb~rb
   aad78:	66727e72 0ce69c73 f93847e4 fffff9fc     r~rfs....G8.....
   aad88:	c9c9c9f9 0978cec9 9219c9c9 40404e4e     ......x.....NN@@
   aad98:	4e72ce4f 3030c060 7fcef911 4cfef9ff     O.rN`.00.......L
   aada8:	f801ba03 7ffeff8f 2007fccc 60603e20     ...........  >``
   aadb8:	6630e033 f3c77f7c 4040cec0 c04f4040     3.0f|.....@@@@O.
   aadc8:	7202424e 02727202 0372027e e41c079c     NB.r.rr.~.r.....
   aadd8:	7e0838e7 f8ffff61 08080808 c9097c0e     .8.~a........|..
   aade8:	4e9e88c9 4fe04040 714070c0 101823c6     ...N@@.O.p@q.#..
   aadf8:	ff7fce19 074efef9 9ffc0993 c87ffeff     ......N.........
   aae08:	30200ffe 7370707e 7efe70f0 e0f3cf7f     .. 0~pps.p.~....
   aae18:	c0e040ce cee04fc0 027a0643 7f067372     .@...O..C.z.rs..
   aae28:	9e077306 e7f4bd0f 617e0838 08fcffff     .s......8.~a....
   aae38:	1e0c1c1c c9c9c97f 604e9ecc e04ffecf     ..........N`..O.
   aae48:	effbe0f8 18909f67 ffff7fcc c79fffff     ....g...........
   aae58:	ffffffff fff97ffe ffffffff ffffffff     ................
   aae68:	ff7ffeff ffffffff ffffffff ffffffff     ................
   aae78:	ffffffff e3ffffff ffffffff ffffffff     ................
   aae88:	ff3fffff ffffff00 fcffffff ff0fff0f     ..?.............
   aae98:	cfffffff ffff7ffe ffffffff 48fc1ff8     ...............H
   aaea8:	ffffffff ffffffff fcffffff fffff9ff     ................
   aaeb8:	ffffffff ffffffff fffffffc ffffffff     ................
   aaec8:	ffffffff ffffffff ffffffff fff3ffff     ................
   aaed8:	ffffffff ffffffff 00ff3fff ffffffff     .........?......
   aaee8:	1ffcffff ffff1fff fecfffff ffffff7f     ................
   aaef8:	f8ffffff ffcfff3f ffffffff ffffffff     ....?...........
   aaf08:	ffffffff ffffffff ffffffff ffffffff     ................
   aaf18:	ffffffff ffffffff ffffffff ffffffff     ................
   aaf28:	ffffffff ffffffff ffffffff ffffffff     ................
   aaf38:	ffffffff ffffffff ffffffff ffffffff     ................
   aaf48:	ffffffff ffffffff ffffffff ffffffff     ................

000aaf58 <mw_title_font_positions>:
   aaf58:	00050000 000e0008 001f0016 00300027     ............'.0.
   aaf68:	00390033 0047003f 0052004e 005d005a     3.9.?.G.N.R.Z.].
   aaf78:	006e0066 007b0073 008b0083 009b0093     f.n.s.{.........
   aaf88:	00ab00a3 00b600b3 00c200ba 00d200ca     ................
   aaf98:	00e200da 00f200ea 010200fa 0112010a     ................
   aafa8:	0122011a 012f0127 013f0137 014f0147     ..".'./.7.?.G.O.
   aafb8:	015f0157 016f0167 017e0177 018e0186     W._.g.o.w.~.....
   aafc8:	019e0196 01ad01a5 01bb01b2 01c801c0     ................
   aafd8:	01d501d1 01e501dd 01f501ed 020501fd     ................
   aafe8:	0215020d 021d0218 02290225 023a0232     ........%.).2.:.
   aaff8:	024a0242 025a0252 026a0262 027a0272     B.J.R.Z.b.j.r.z.
   ab008:	028c0283 029c0294 02a502a2 02b402ab     ................

000ab018 <__func__.6043>:
   ab018:	65786970 0000006c                       pixel...

000ab020 <__func__.6055>:
   ab020:	6c6c6966 725f6465 61746365 656c676e     filled_rectangle
   ab030:	00000000                                ....

000ab034 <__func__.6074>:
   ab034:	6c6c6966 705f6465 00796c6f              filled_poly.

000ab040 <__func__.6315>:
   ab040:	6c746974 6f665f65 735f746e 6e697274     title_font_strin
   ab050:	00000067                                g...

000ab054 <__func__.6427>:
   ab054:	675f776d 65735f6c 6f665f74 0000746e     mw_gl_set_font..

000ab064 <__func__.6463>:
   ab064:	675f776d 67665f6c 7869705f 00006c65     mw_gl_fg_pixel..

000ab074 <__func__.6469>:
   ab074:	675f776d 67625f6c 7869705f 00006c65     mw_gl_bg_pixel..

000ab084 <__func__.6479>:
   ab084:	675f776d 6c685f6c 00656e69              mw_gl_hline.

000ab090 <__func__.6492>:
   ab090:	675f776d 6c765f6c 00656e69              mw_gl_vline.

000ab09c <__func__.6513>:
   ab09c:	675f776d 696c5f6c 0000656e              mw_gl_line..

000ab0a8 <__func__.6535>:
   ab0a8:	675f776d 65725f6c 6e617463 00656c67     mw_gl_rectangle.

000ab0b8 <__func__.6555>:
   ab0b8:	675f776d 68635f6c 63617261 00726574     mw_gl_character.

000ab0c8 <__func__.6570>:
   ab0c8:	675f776d 74735f6c 676e6972 00000000     mw_gl_string....

000ab0d8 <__func__.6585>:
   ab0d8:	675f776d 65675f6c 74735f74 676e6972     mw_gl_get_string
   ab0e8:	6469775f 705f6874 6c657869 00000073     _width_pixels...

000ab0f8 <__func__.6618>:
   ab0f8:	675f776d 6f705f6c 0000796c              mw_gl_poly..

000ab104 <__func__.6631>:
   ab104:	675f776d 6f725f6c 65746174 6168735f     mw_gl_rotate_sha
   ab114:	00006570                                pe..

000ab118 <__func__.6705>:
   ab118:	675f776d 6f6d5f6c 68636f6e 656d6f72     mw_gl_monochrome
   ab128:	7469625f 0070616d                       _bitmap.

000ab130 <__func__.6723>:
   ab130:	675f776d 6f635f6c 72756f6c 7469625f     mw_gl_colour_bit
   ab140:	0070616d 206f6f54 796e616d 696f7020     map.Too many poi
   ab150:	2073746e 70206e69 67796c6f 73206e6f     nts in polygon s
   ab160:	65706168 00000000 206f6f54 20776566     hape....Too few 
   ab170:	6e696f70 69207374 6f70206e 6f67796c     points in polygo
   ab180:	6873206e 00657061 6e6b6e55 206e776f     n shape.Unknown 
   ab190:	746e6f66 00000000 6e6b6e55 206e776f     font....Unknown 
   ab1a0:	74786574 746f7220 6f697461 2a2c006e              text rotation.

000ab1ae <pixel_data_command>:
   ab1ae:	002b2a2c                                         ,

000ab1af <window_x_command>:
   ab1af:	00002b2a                                         *

000ab1b0 <window_y_command>:
   ab1b0:	0000002b                                +...

000ab1b4 <__func__.6267>:
   ab1b4:	5f746573 646e6977 645f776f 69617465     set_window_detai
   ab1c4:	0000736c                                ls..

000ab1c8 <__func__.6288>:
   ab1c8:	636c6163 74616c75 656e5f65 69775f77     calculate_new_wi
   ab1d8:	776f646e 7a69735f 65645f65 6c696174     ndow_size_detail
   ab1e8:	00000073                                s...

000ab1ec <__func__.6307>:
   ab1ec:	5f746573 746e6f63 5f6c6f72 61746564     set_control_deta
   ab1fc:	00736c69                                ils.

000ab200 <__func__.6312>:
   ab200:	746f6f72 6961705f 665f746e 74636e75     root_paint_funct
   ab210:	006e6f69                                ion.

000ab214 <__func__.6319>:
   ab214:	746f6f72 73656d5f 65676173 6e75665f     root_message_fun
   ab224:	6f697463 0000006e                       ction...

000ab22c <__func__.6328>:
   ab22c:	646e6966 6f63695f 756e5f6e 7265626d     find_icon_number
   ab23c:	726f665f 6e69775f 00776f64              _for_window.

000ab248 <__func__.6337>:
   ab248:	6f6d6572 6d5f6576 6d696e69 64657369     remove_minimised
   ab258:	6e69775f 5f776f64 6d6f7266 73696c5f     _window_from_lis
   ab268:	00000074                                t...

000ab26c <__func__.6347>:
   ab26c:	5f646461 696e696d 6573696d 69775f64     add_minimised_wi
   ab27c:	776f646e 5f6f745f 7473696c 00000000     ndow_to_list....

000ab28c <__func__.6356>:
   ab28c:	646e6966 6e696d5f 65736d69 63695f64     find_minimsed_ic
   ab29c:	6c5f6e6f 7461636f 006e6f69              on_location.

000ab2a8 <__func__.6376>:
   ab2a8:	77617264 6e696d5f 7365725f 65726f74     draw_min_restore
   ab2b8:	6e69775f 5f776f64 65666665 00007463     _window_effect..

000ab2c8 <__func__.6447>:
   ab2c8:	646e6966 6365725f 69775f74 776f646e     find_rect_window
   ab2d8:	746e695f 65737265 6f697463 0000736e     _intersections..

000ab2e8 <__func__.6463>:
   ab2e8:	646e6966 6769685f 74736568 6f5f7a5f     find_highest_z_o
   ab2f8:	72656472 5f74615f 6e696f70 00000074     rder_at_point...

000ab308 <__func__.6477>:
   ab308:	646e6966 5f66695f 646e6977 695f776f     find_if_window_i
   ab318:	766f5f73 616c7265 64657070 00000000     s_overlapped....

000ab328 <__func__.6500>:
   ab328:	77617264 7469745f 625f656c 00007261     draw_title_bar..

000ab338 <__func__.6509>:
   ab338:	77617264 7469745f 6162656c 65745f72     draw_titlebar_te
   ab348:	00007478                                xt..

000ab34c <__func__.6520>:
   ab34c:	77617264 6e656d5f 61625f75 00000072     draw_menu_bar...

000ab35c <__func__.6532>:
   ab35c:	77617264 726f685f 6e6f7a69 5f6c6174     draw_horizontal_
   ab36c:	646e6977 735f776f 6c6f7263 61625f6c     window_scroll_ba
   ab37c:	00000072                                r...

000ab380 <__func__.6541>:
   ab380:	77617264 7265765f 61636974 69775f6c     draw_vertical_wi
   ab390:	776f646e 7263735f 5f6c6c6f 00726162     ndow_scroll_bar.

000ab3a0 <__func__.6578>:
   ab3a0:	705f6f64 746e6961 6e69775f 5f776f64     do_paint_window_
   ab3b0:	6d617266 00003265                       frame2..

000ab3b8 <__func__.6592>:
   ab3b8:	705f6f64 746e6961 6e69775f 5f776f64     do_paint_window_
   ab3c8:	65696c63 0000746e                       client..

000ab3d0 <__func__.6616>:
   ab3d0:	705f6f64 746e6961 6e69775f 5f776f64     do_paint_window_
   ab3e0:	65696c63 725f746e 00746365              client_rect.

000ab3ec <__func__.6630>:
   ab3ec:	705f6f64 746e6961 6e69775f 5f776f64     do_paint_window_
   ab3fc:	65696c63 0032746e                       client2.

000ab404 <__func__.6646>:
   ab404:	6e696170 6c615f74 6f635f6c 6f72746e     paint_all_contro
   ab414:	695f736c 69775f6e 776f646e 6365725f     ls_in_window_rec
   ab424:	00000074                                t...

000ab428 <__func__.6666>:
   ab428:	705f6f64 746e6961 6e6f635f 6c6f7274     do_paint_control
   ab438:	6365725f 00000074                       _rect...

000ab440 <__func__.6703>:
   ab440:	705f6f64 746e6961 6e6f635f 6c6f7274     do_paint_control
   ab450:	00000032                                2...

000ab454 <__func__.6747>:
   ab454:	636f7270 5f737365 63756f74 76655f68     process_touch_ev
   ab464:	00746e65                                ent.

000ab468 <__func__.6817>:
   ab468:	63656863 6e615f6b 72705f64 7365636f     check_and_proces
   ab478:	6f745f73 5f686375 745f6e6f 656c7469     s_touch_on_title
   ab488:	7261625f 00000000                       _bar....

000ab490 <__func__.6860>:
   ab490:	77617264 6465725f 6e656d69 6e6f6973     draw_redimension
   ab4a0:	5f676e69 646e6977 6f5f776f 696c7475     ing_window_outli
   ab4b0:	0000656e                                ne..

000ab4b4 <__func__.6897>:
   ab4b4:	615f776d 775f6464 6f646e69 00000077     mw_add_window...

000ab4c4 <__func__.6910>:
   ab4c4:	625f776d 676e6972 6e69775f 5f776f64     mw_bring_window_
   ab4d4:	665f6f74 746e6f72 00000000              to_front....

000ab4e0 <__func__.6925>:
   ab4e0:	735f776d 775f7465 6f646e69 69765f77     mw_set_window_vi
   ab4f0:	6c626973 00000065                       sible...

000ab4f8 <__func__.6942>:
   ab4f8:	725f776d 736f7065 6f697469 69775f6e     mw_reposition_wi
   ab508:	776f646e 00000000                       ndow....

000ab510 <__func__.6954>:
   ab510:	725f776d 7a697365 69775f65 776f646e     mw_resize_window
   ab520:	00000000                                ....

000ab524 <__func__.6995>:
   ab524:	735f776d 775f7465 6f646e69 6f685f77     mw_set_window_ho
   ab534:	5f7a6972 6f726373 625f6c6c 655f7261     riz_scroll_bar_e
   ab544:	6c62616e 735f6465 65746174 00000000     nabled_state....

000ab554 <__func__.7001>:
   ab554:	735f776d 775f7465 6f646e69 65765f77     mw_set_window_ve
   ab564:	735f7472 6c6f7263 61625f6c 6e655f72     rt_scroll_bar_en
   ab574:	656c6261 74735f64 00657461              abled_state.

000ab580 <__func__.7019>:
   ab580:	705f776d 746e6961 6e69775f 5f776f64     mw_paint_window_
   ab590:	6d617266 00000065                       frame...

000ab598 <__func__.7023>:
   ab598:	705f776d 746e6961 6e69775f 5f776f64     mw_paint_window_
   ab5a8:	65696c63 0000746e                       client..

000ab5b0 <__func__.7028>:
   ab5b0:	705f776d 746e6961 6e69775f 5f776f64     mw_paint_window_
   ab5c0:	65696c63 725f746e 00746365              client_rect.

000ab5cc <__func__.7036>:
   ab5cc:	725f776d 766f6d65 69775f65 776f646e     mw_remove_window
   ab5dc:	00000000                                ....

000ab5e0 <__func__.7052>:
   ab5e0:	675f776d 775f7465 6f646e69 6c635f77     mw_get_window_cl
   ab5f0:	746e6569 6365725f 00000074              ient_rect...

000ab5fc <__func__.7057>:
   ab5fc:	675f776d 775f7465 6f646e69 6e695f77     mw_get_window_in
   ab60c:	6e617473 645f6563 00617461              stance_data.

000ab618 <__func__.7082>:
   ab618:	615f776d 635f6464 72746e6f 00006c6f     mw_add_control..

000ab628 <__func__.7101>:
   ab628:	735f776d 635f7465 72746e6f 655f6c6f     mw_set_control_e
   ab638:	6c62616e 00006465                       nabled..

000ab640 <__func__.7105>:
   ab640:	705f776d 746e6961 6e6f635f 6c6f7274     mw_paint_control
   ab650:	00000000                                ....

000ab654 <__func__.7110>:
   ab654:	705f776d 746e6961 6e6f635f 6c6f7274     mw_paint_control
   ab664:	6365725f 00000074                       _rect...

000ab66c <__func__.7124>:
   ab66c:	725f776d 766f6d65 6f635f65 6f72746e     mw_remove_contro
   ab67c:	0000006c                                l...

000ab680 <__func__.7137>:
   ab680:	675f776d 635f7465 72746e6f 725f6c6f     mw_get_control_r
   ab690:	00746365                                ect.

000ab694 <__func__.7142>:
   ab694:	675f776d 635f7465 72746e6f 705f6c6f     mw_get_control_p
   ab6a4:	6e657261 69775f74 776f646e 6e61685f     arent_window_han
   ab6b4:	00656c64                                dle.

000ab6b8 <__func__.7147>:
   ab6b8:	675f776d 635f7465 72746e6f 695f6c6f     mw_get_control_i
   ab6c8:	6174736e 5f65636e 61746164 00000000     nstance_data....

000ab6d8 <__func__.7152>:
   ab6d8:	675f776d 635f7465 72746e6f 665f6c6f     mw_get_control_f
   ab6e8:	7367616c 00000000                       lags....

000ab6f0 <__func__.7159>:
   ab6f0:	735f776d 745f7465 72656d69 00000000     mw_set_timer....

000ab700 <__func__.7169>:
   ab700:	635f776d 65636e61 69745f6c 0072656d     mw_cancel_timer.

000ab710 <__func__.7183>:
   ab710:	705f776d 5f74736f 7373656d 00656761     mw_post_message.

000ab720 <__func__.7192>:
   ab720:	705f776d 65636f72 6d5f7373 61737365     mw_process_messa
   ab730:	00006567 20646142 746e6f63 206c6f72     ge..Bad control 
   ab740:	646e6168 0000656c 656c6c49 206c6167     handle..Illegal 
   ab750:	646e6977 6920776f 00000064 00002020     window id...  ..
   ab760:	00000020 20646142 646e6977 6820776f      ...Bad window h
   ab770:	6c646e61 00000065 276e6143 64612074     andle...Can't ad
   ab780:	6f632064 6f72746e 6e69206c 69617020     d control in pai
   ab790:	6620746e 74636e75 006e6f69 276e6143     nt function.Can'
   ab7a0:	64612074 6f632064 6f72746e 6f74206c     t add control to
   ab7b0:	756e7520 20646573 646e6977 0000776f      unused window..
   ab7c0:	276e6143 64612074 6f632064 6f72746e     Can't add contro
   ab7d0:	7461206c 69687420 6f702073 69746973     l at this positi
   ab7e0:	00006e6f 73206f4e 65636170 726f6620     on..No space for
   ab7f0:	77656e20 6e6f6320 6c6f7274 00000000      new control....
   ab800:	656c6c49 206c6167 746e6f63 206c6f72     Illegal control 
   ab810:	00006469 276e6143 64612074 69772064     id..Can't add wi
   ab820:	776f646e 206e6920 6e696170 75662074     ndow in paint fu
   ab830:	6974636e 00006e6f 2d6e6f4e 736e6573     nction..Non-sens
   ab840:	6c616369 67726120 6e656d75 00007374     ical arguments..
   ab850:	73206f4e 65636170 206f7420 20646461     No space to add 
   ab860:	646e6977 0000776f 74646957 6f742068     window..Width to
   ab870:	6d73206f 006c6c61 646e6957 7420776f     o small.Window t
   ab880:	73206f6f 6c6c616d 00000000 6d206f4e     oo small....No m
   ab890:	20756e65 20726162 6d657469 00000073     enu bar items...
   ab8a0:	656c6c49 206c6167 646e6168 0000656c     Illegal handle..
   ab8b0:	656c6c49 206c6167 74737973 6d206d65     Illegal system m
   ab8c0:	61737365 74206567 00657079 656c6c49     essage type.Ille
   ab8d0:	206c6167 7373656d 20656761 69636572     gal message reci
   ab8e0:	6e656970 79742074 00006570 656c6c49     pient type..Ille
   ab8f0:	206c6167 656d6974 65722072 69706963     gal timer recipi
   ab900:	20746e65 746e6f63 206c6f72 00006469     ent control id..
   ab910:	6c6c754e 73656d20 65676173 756f6620     Null message fou
   ab920:	6920646e 7571206e 00657565 656c6c49     nd in queue.Ille
   ab930:	206c6167 656d6974 65722072 69706963     gal timer recipi
   ab940:	20746e65 65707974 00000000 73206f4e     ent type....No s
   ab950:	65636170 206f7420 20646461 656d6974     pace to add time
   ab960:	00000072 65707845 64657463 6f6f7220     r...Expected roo
   ab970:	69772074 776f646e 6e616820 00656c64     t window handle.
   ab980:	45535341 46205452 454c4941 00000044     ASSERT FAILED...

000ab990 <__func__.5971>:
   ab990:	6d5f776d 61737365 715f6567 65756575     mw_message_queue
   ab9a0:	736e695f 00747265                       _insert.

000ab9a8 <__func__.5975>:
   ab9a8:	6d5f776d 61737365 715f6567 65756575     mw_message_queue
   ab9b8:	6d65725f 0065766f                       _remove.

000ab9c0 <__func__.5979>:
   ab9c0:	6d5f776d 61737365 715f6567 65756575     mw_message_queue
   ab9d0:	7465675f 6665725f 5f6f745f 6d657469     _get_ref_to_item
   ab9e0:	5f74615f 69736f70 6e6f6974 00000000     _at_position....
   ab9f0:	2074754f 6220666f 646e756f 656d2073     Out of bounds me
   aba00:	67617373 75712065 20657565 69736f70     ssage queue posi
   aba10:	6e6f6974 00000000 7373654d 20656761     tion....Message 
   aba20:	75657571 75662065 00006c6c              queue full..

000aba2c <__func__.5995>:
   aba2c:	735f776d 69747465 5f73676e 5f746573     mw_settings_set_
   aba3c:	696c6163 74617262 5f6e6f69 7274616d     calibration_matr
   aba4c:	00007869                                ix..

000aba50 <__func__.5819>:
   aba50:	745f776d 6863756f 7465675f 7369645f     mw_touch_get_dis
   aba60:	79616c70 756f745f 00006863              play_touch..

000aba6c <__func__.5829>:
   aba6c:	745f776d 6863756f 6c61635f 61726269     mw_touch_calibra
   aba7c:	00006574 63756f54 65632068 6572746e     te..Touch centre
   aba8c:	20666f20 736f7263 00000073               of cross...

000aba98 <__func__.6005>:
   aba98:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abaa8:	6e695f72 00007469                       r_init..

000abab0 <__func__.6013>:
   abab0:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abac0:	65675f72 69735f74 6e5f657a 5f65646f     r_get_size_node_
   abad0:	61727261 00000079                       array...

000abad8 <__func__.6017>:
   abad8:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abae8:	65675f72 6f6e5f74 615f6564 79617272     r_get_node_array
   abaf8:	00000000                                ....

000abafc <__func__.6023>:
   abafc:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abb0c:	65735f72 656e5f74 6f6e5f77 615f6564     r_set_new_node_a
   abb1c:	79617272 00000000                       rray....

000abb24 <__func__.6033>:
   abb24:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abb34:	64615f72 6f6e5f64 00006564              r_add_node..

000abb40 <__func__.6051>:
   abb40:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abb50:	65675f72 6c615f74 68635f6c 72646c69     r_get_all_childr
   abb60:	00006e65                                en..

000abb64 <__func__.6065>:
   abb64:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abb74:	65675f72 706f5f74 635f6e65 646c6968     r_get_open_child
   abb84:	5f6e6572 6e756f63 00000074              ren_count...

000abb90 <__func__.6082>:
   abb90:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abba0:	68635f72 65676e61 646f6e5f 65735f65     r_change_node_se
   abbb0:	7463656c 735f6465 65746174 00000000     lected_state....

000abbc0 <__func__.6089>:
   abbc0:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abbd0:	68635f72 65676e61 6c6f665f 5f726564     r_change_folder_
   abbe0:	65646f6e 65706f5f 74735f6e 00657461     node_open_state.

000abbf0 <__func__.6105>:
   abbf0:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abc00:	65725f72 65766f6d 646f6e5f 68635f65     r_remove_node_ch
   abc10:	72646c69 00006e65                       ildren..

000abc18 <__func__.6117>:
   abc18:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abc28:	65675f72 61685f74 656c646e 6f72665f     r_get_handle_fro
   abc38:	6f705f6d 69746973 00006e6f              m_position..

000abc44 <__func__.6126>:
   abc44:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abc54:	65675f72 6f6e5f74 665f6564 7367616c     r_get_node_flags
   abc64:	00000000                                ....

000abc68 <__func__.6132>:
   abc68:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abc78:	65675f72 6f6e5f74 6c5f6564 6c657665     r_get_node_level
   abc88:	00000000                                ....

000abc8c <__func__.6138>:
   abc8c:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abc9c:	65675f72 6f6e5f74 6c5f6564 6c656261     r_get_node_label
   abcac:	00000000                                ....

000abcb0 <__func__.6149>:
   abcb0:	745f776d 5f656572 746e6f63 656e6961     mw_tree_containe
   abcc0:	65675f72 6f6e5f74 705f6564 00687461     r_get_node_path.
   abcd0:	73206f4e 65636170 206e6920 65657274     No space in tree
   abce0:	00000000 61766e49 2064696c 65726170     ....Invalid pare
   abcf0:	6620746e 65646c6f 00000072 20746f4e     nt folder...Not 
   abd00:	6f662061 7265646c 00000000 20646142     a folder....Bad 
   abd10:	65646f6e 6e616820 00656c64 65726150     node handle.Pare
   abd20:	6e20746e 2065646f 20746f6e 6f662061     nt node not a fo
   abd30:	7265646c 00000000 61766e49 2064696c     lder....Invalid 
   abd40:	65726170 6620746e 65646c6f 61682072     parent folder ha
   abd50:	656c646e 00000000 65726150 6e20746e     ndle....Parent n
   abd60:	2065646f 6e207369 6120746f 6c6f6620     ode is not a fol
   abd70:	00726564 20646142 65657274 616c6620     der.Bad tree fla
   abd80:	00007367 20646142 6d726f66 74207461     gs..Bad format t
   abd90:	20656572 746f6f72 6c6f6620 20726564     ree root folder 
   abda0:	68746170 00000000 20646142 61726170     path....Bad para
   abdb0:	6574656d 00000072                       meter...

000abdb8 <__func__.5112>:
   abdb8:	755f776d 5f6c6974 5f746573 74636572     mw_util_set_rect
   abdc8:	00000000                                ....

000abdcc <__func__.5118>:
   abdcc:	755f776d 5f6c6974 705f7369 746e696f     mw_util_is_point
   abddc:	5f6e695f 74636572 00000000              _in_rect....

000abde8 <__func__.5123>:
   abde8:	755f776d 5f6c6974 725f6f64 73746365     mw_util_do_rects
   abdf8:	696f635f 6469636e 00000065              _coincide...

000abe04 <__func__.5135>:
   abe04:	755f776d 5f6c6974 65666173 7274735f     mw_util_safe_str
   abe14:	00797063                                cpy.

000abe18 <__func__.5144>:
   abe18:	755f776d 5f6c6974 65666173 7274735f     mw_util_safe_str
   abe28:	00746163                                cat.

000abe2c <__func__.5150>:
   abe2c:	755f776d 5f6c6974 72727473 00007665     mw_util_strrev..

000abe3c <__func__.5182>:
   abe3c:	755f776d 5f6c6974 6c656873 6f735f6c     mw_util_shell_so
   abe4c:	00007472                                rt..

000abe50 <__func__.5195>:
   abe50:	755f776d 5f6c6974 5f746567 656c6966     mw_util_get_file
   abe60:	656d616e 7478655f 00000000              name_ext....

000abe6c <__func__.5212>:
   abe6c:	755f776d 5f6c6974 696d696c 6f705f74     mw_util_limit_po
   abe7c:	5f746e69 725f6f74 5f746365 657a6973     int_to_rect_size
   abe8c:	00000000                                ....

000abe90 <__func__.5227>:
   abe90:	755f776d 5f6c6974 65666173 6f74695f     mw_util_safe_ito
   abea0:	00000061 62206f4e 65666675 70732072     a...No buffer sp
   abeb0:	00656361 656c6c49 206c6167 65736162     ace.Illegal base
   abec0:	00000000 75736e49 63696666 746e6569     ....Insufficient
   abed0:	66756220 20726566 63617073 00000065      buffer space...
   abee0:	43444546 38394142 34353637 30313233     FEDCBA9876543210
   abef0:	34333231 38373635 43424139 00464544     123456789ABCDEF.

000abf00 <__func__.5977>:
   abf00:	6f727261 61705f77 5f746e69 636e7566     arrow_paint_func
   abf10:	6e6f6974 00000000                       tion....

000abf18 <__func__.5982>:
   abf18:	6f727261 656d5f77 67617373 75665f65     arrow_message_fu
   abf28:	6974636e 00006e6f                       nction..

000abf30 <shape_large_x_const>:
   abf30:	0000fff9 00000008                       ........

000abf38 <shape_large_y_const>:
   abf38:	fff90008 00000008                       ........

000abf40 <shape_x_const>:
   abf40:	0000fffd 00000004                       ........

000abf48 <shape_y_const>:
   abf48:	fffd0004 00000004                       ........

000abf50 <__func__.5971>:
   abf50:	74747562 705f6e6f 746e6961 6e75665f     button_paint_fun
   abf60:	6f697463 0000006e                       ction...

000abf68 <__func__.5976>:
   abf68:	74747562 6d5f6e6f 61737365 665f6567     button_message_f
   abf78:	74636e75 006e6f69                       unction.

000abf80 <__func__.5976>:
   abf80:	6279656b 6472616f 6961705f 665f746e     keyboard_paint_f
   abf90:	74636e75 006e6f69                       unction.

000abf98 <__func__.5992>:
   abf98:	6279656b 6472616f 73656d5f 65676173     keyboard_message
   abfa8:	6e75665f 6f697463 0000006e              _function...

000abfb4 <keyboards>:
   abfb4:	52455751 49555954 4120504f 47464453     QWERTYUIOP ASDFG
   abfc4:	4c4b4a48 5a202008 42564358 2e204d4e     HJKL.  ZXCVBNM .
   abfd4:	6577712c 75797472 20706f69 66647361     ,qwertyuiop asdf
   abfe4:	6b6a6867 2020086c 7663787a 206d6e62     ghjkl.  zxcvbnm 
   abff4:	32312c2e 36353433 30393837 23222120     .,1234567890 !"#
   ac004:	265e2524 2008402a 2d2b2928 2c2e3d2f     $%^&*@. ()+-/=.,
   ac014:	313e3c20 35343332 39383736 3b7c2030      <>1234567890 |;
   ac024:	3c7e273a 08255c3e 3f7d7b20 2b5d5b60     :'~<>\%. {}?`[]+
   ac034:	2f2a202d                                - */

000ac038 <__func__.5787>:
   ac038:	6562616c 61705f6c 5f746e69 636e7566     label_paint_func
   ac048:	6e6f6974 00000000                       tion....

000ac050 <__func__.5792>:
   ac050:	6562616c 656d5f6c 67617373 75665f65     label_message_fu
   ac060:	6974636e 00006e6f                       nction..

000ac068 <__func__.5972>:
   ac068:	7473696c 786f625f 6961705f 665f746e     list_box_paint_f
   ac078:	74636e75 006e6f69                       unction.

000ac080 <__func__.5986>:
   ac080:	7473696c 786f625f 73656d5f 65676173     list_box_message
   ac090:	6e75665f 6f697463 0000006e              _function...

000ac09c <__func__.6007>:
   ac09c:	755f776d 696c5f69 625f7473 615f786f     mw_ui_list_box_a
   ac0ac:	6e5f6464 00007765 6c6c754e 696f7020     dd_new..Null poi
   ac0bc:	7265746e 6c617620 69206575 7261206e     nter value in ar
   ac0cc:	00796172                                ray.

000ac0d0 <__func__.5790>:
   ac0d0:	6f726373 625f6c6c 765f7261 5f747265     scroll_bar_vert_
   ac0e0:	6e696170 75665f74 6974636e 00006e6f     paint_function..

000ac0f0 <__func__.5798>:
   ac0f0:	6f726373 625f6c6c 765f7261 5f747265     scroll_bar_vert_
   ac100:	7373656d 5f656761 636e7566 6e6f6974     message_function
   ac110:	00000000                                ....

000ac114 <__func__.5808>:
   ac114:	65657274 6961705f 665f746e 74636e75     tree_paint_funct
   ac124:	006e6f69                                ion.

000ac128 <__func__.5814>:
   ac128:	65657274 73656d5f 65676173 6e75665f     tree_message_fun
   ac138:	6f697463 0000006e                       ction...

000ac140 <__func__.5841>:
   ac140:	755f776d 72745f69 615f6565 6e5f6464     mw_ui_tree_add_n
   ac150:	00007765 20646142 65657274 6e6f6320     ew..Bad tree con
   ac160:	6e696174 00007265                       tainer..

000ac168 <__func__.10464>:
   ac168:	5f707061 75706f70 6574616c 6572745f     app_populate_tre
   ac178:	72665f65 665f6d6f 5f656c69 74737973     e_from_file_syst
   ac188:	00006d65                                em..

000ac18c <__func__.10480>:
   ac18c:	646e6966 6c6f665f 5f726564 72746e65     find_folder_entr
   ac19c:	00736569                                ies.

000ac1a0 <days_in_months>:
   ac1a0:	1f1c1f00 1f1e1f1e 1e1f1e1f 0000001f     ................

000ac1b0 <CSWTCH.14>:
   ac1b0:	03020100                                ....

000ac1b4 <LfnOfs>:
   ac1b4:	07050301 12100e09 1c181614 0000001e     ................

000ac1c4 <excvt.4559>:
   ac1c4:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   ac1d4:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   ac1e4:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   ac1f4:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   ac204:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   ac214:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   ac224:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   ac234:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   ac244:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   ac254:	00005d5b                                []..

000ac258 <Tbl>:
   ac258:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   ac268:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   ac278:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   ac288:	00d600ff 00f800dc 00d800a3 019200d7     ................
   ac298:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   ac2a8:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   ac2b8:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   ac2c8:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   ac2d8:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   ac2e8:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   ac2f8:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   ac308:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   ac318:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   ac328:	00da00de 00d900db 00dd00fd 00b400af     ................
   ac338:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   ac348:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

000ac358 <tbl_lower.4309>:
   ac358:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   ac368:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   ac378:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   ac388:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   ac398:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   ac3a8:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   ac3b8:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   ac3c8:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   ac3d8:	01050103 01090107 010d010b 0111010f     ................
   ac3e8:	01150113 01190117 011d011b 0121011f     ..............!.
   ac3f8:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   ac408:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   ac418:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   ac428:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   ac438:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   ac448:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   ac458:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   ac468:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   ac478:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   ac488:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   ac498:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   ac4a8:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   ac4b8:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   ac4c8:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   ac4d8:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   ac4e8:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   ac4f8:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   ac508:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   ac518:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   ac528:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

000ac538 <tbl_upper.4310>:
   ac538:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   ac548:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   ac558:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   ac568:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   ac578:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   ac588:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   ac598:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   ac5a8:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   ac5b8:	01040102 01080106 010c010a 0110010e     ................
   ac5c8:	01140112 01180116 011c011a 0120011e     .............. .
   ac5d8:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   ac5e8:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   ac5f8:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   ac608:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   ac618:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   ac628:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   ac638:	03940393 03960395 03980397 039a0399     ................
   ac648:	039c039b 039e039d 03a0039f 03a303a1     ................
   ac658:	03a503a4 03a703a6 03a903a8 041003aa     ................
   ac668:	04120411 04140413 04160415 04180417     ................
   ac678:	041a0419 041c041b 041e041d 0420041f     .............. .
   ac688:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   ac698:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   ac6a8:	04030402 04050404 04070406 04090408     ................
   ac6b8:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   ac6c8:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   ac6d8:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   ac6e8:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   ac6f8:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   ac708:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...

000ac718 <npio2_hw>:
   ac718:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
   ac728:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
   ac738:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
   ac748:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
   ac758:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
   ac768:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
   ac778:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
   ac788:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

000ac798 <two_over_pi>:
   ac798:	000000a2 000000f9 00000083 0000006e     ............n...
   ac7a8:	0000004e 00000044 00000015 00000029     N...D.......)...
   ac7b8:	000000fc 00000027 00000057 000000d1     ....'...W.......
   ac7c8:	000000f5 00000034 000000dd 000000c0     ....4...........
   ac7d8:	000000db 00000062 00000095 00000099     ....b...........
   ac7e8:	0000003c 00000043 00000090 00000041     <...C.......A...
   ac7f8:	000000fe 00000051 00000063 000000ab     ....Q...c.......
   ac808:	000000de 000000bb 000000c5 00000061     ............a...
   ac818:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
   ac828:	00000042 0000004d 000000d2 000000e0     B...M...........
   ac838:	00000006 00000049 0000002e 000000ea     ....I...........
   ac848:	00000009 000000d1 00000092 0000001c     ................
   ac858:	000000fe 0000001d 000000eb 0000001c     ................
   ac868:	000000b1 00000029 000000a7 0000003e     ....).......>...
   ac878:	000000e8 00000082 00000035 000000f5     ........5.......
   ac888:	0000002e 000000bb 00000044 00000084     ........D.......
   ac898:	000000e9 0000009c 00000070 00000026     ........p...&...
   ac8a8:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
   ac8b8:	00000039 00000091 000000d6 00000039     9...........9...
   ac8c8:	00000083 00000053 00000039 000000f4     ....S...9.......
   ac8d8:	0000009c 00000084 0000005f 0000008b     ........_.......
   ac8e8:	000000bd 000000f9 00000028 0000003b     ........(...;...
   ac8f8:	0000001f 000000f8 00000097 000000ff     ................
   ac908:	000000de 00000005 00000098 0000000f     ................
   ac918:	000000ef 0000002f 00000011 0000008b     ..../...........
   ac928:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
   ac938:	0000006d 00000036 0000007e 000000cf     m...6...~.......
   ac948:	00000027 000000cb 00000009 000000b7     '...............
   ac958:	0000004f 00000046 0000003f 00000066     O...F...?...f...
   ac968:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
   ac978:	00000075 00000027 000000ba 000000c7     u...'...........
   ac988:	000000eb 000000e5 000000f1 0000007b     ............{...
   ac998:	0000003d 00000007 00000039 000000f7     =.......9.......
   ac9a8:	0000008a 00000052 00000092 000000ea     ....R...........
   ac9b8:	0000006b 000000fb 0000005f 000000b1     k......._.......
   ac9c8:	0000001f 0000008d 0000005d 00000008     ........].......
   ac9d8:	00000056 00000003 00000030 00000046     V.......0...F...
   ac9e8:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
   ac9f8:	000000f0 000000cf 000000bc 00000020     ............ ...
   aca08:	0000009a 000000f4 00000036 0000001d     ........6.......
   aca18:	000000a9 000000e3 00000091 00000061     ............a...
   aca28:	0000005e 000000e6 0000001b 00000008     ^...............
   aca38:	00000065 00000099 00000085 0000005f     e..........._...
   aca48:	00000014 000000a0 00000068 00000040     ........h...@...
   aca58:	0000008d 000000ff 000000d8 00000080     ................
   aca68:	0000004d 00000073 00000027 00000031     M...s...'...1...
   aca78:	00000006 00000006 00000015 00000056     ............V...
   aca88:	000000ca 00000073 000000a8 000000c9     ....s...........
   aca98:	00000060 000000e2 0000007b 000000c0     `.......{.......
   acaa8:	0000008c 0000006b                       ....k...

000acab0 <PIo2>:
   acab0:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
   acac0:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
   acad0:	1fc40000 1bc60000 17440000              ..........D.

000acadc <init_jk>:
   acadc:	00000004 00000007 00000009              ............

000acae8 <_global_impure_ptr>:
   acae8:	20070278 00000043 49534f50 00000058     x.. C...POSIX...

000acaf8 <_ctype_>:
   acaf8:	20202000 20202020 28282020 20282828     .         ((((( 
   acb08:	20202020 20202020 20202020 20202020                     
   acb18:	10108820 10101010 10101010 10101010      ...............
   acb28:	04040410 04040404 10040404 10101010     ................
   acb38:	41411010 41414141 01010101 01010101     ..AAAAAA........
   acb48:	01010101 01010101 01010101 10101010     ................
   acb58:	42421010 42424242 02020202 02020202     ..BBBBBB........
   acb68:	02020202 02020202 02020202 10101010     ................
   acb78:	00000020 00000000 00000000 00000000      ...............
	...

000acbfc <_init>:
   acbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   acbfe:	bf00      	nop
   acc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   acc02:	bc08      	pop	{r3}
   acc04:	469e      	mov	lr, r3
   acc06:	4770      	bx	lr

000acc08 <__init_array_start>:
   acc08:	000a5f6d 	.word	0x000a5f6d

000acc0c <__frame_dummy_init_array_entry>:
   acc0c:	00080119                                ....

000acc10 <_fini>:
   acc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   acc12:	bf00      	nop
   acc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   acc16:	bc08      	pop	{r3}
   acc18:	469e      	mov	lr, r3
   acc1a:	4770      	bx	lr

000acc1c <__fini_array_start>:
   acc1c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2007000c:	b470      	push	{r4, r5, r6}
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2007000e:	4c1c      	ldr	r4, [pc, #112]	; (20070080 <efc_perform_read_sequence+0x74>)
{
20070010:	b083      	sub	sp, #12
			(uint32_t *) ((p_efc == EFC0) ?
20070012:	42a0      	cmp	r0, r4
20070014:	bf0c      	ite	eq
20070016:	f44f 2400 	moveq.w	r4, #524288	; 0x80000
2007001a:	f44f 2440 	movne.w	r4, #786432	; 0xc0000
{
2007001e:	9d06      	ldr	r5, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070020:	b34b      	cbz	r3, 20070076 <efc_perform_read_sequence+0x6a>
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070022:	6806      	ldr	r6, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070024:	b2c9      	uxtb	r1, r1
20070026:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);
2007002a:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
2007002e:	6006      	str	r6, [r0, #0]
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070030:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070032:	6881      	ldr	r1, [r0, #8]
20070034:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20070036:	9901      	ldr	r1, [sp, #4]
20070038:	07c9      	lsls	r1, r1, #31
2007003a:	d4fa      	bmi.n	20070032 <efc_perform_read_sequence+0x26>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007003c:	b14d      	cbz	r5, 20070052 <efc_perform_read_sequence+0x46>
2007003e:	4621      	mov	r1, r4
20070040:	3b04      	subs	r3, #4
20070042:	eb04 0585 	add.w	r5, r4, r5, lsl #2
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20070046:	f851 4b04 	ldr.w	r4, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007004a:	42a9      	cmp	r1, r5
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007004c:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070050:	d1f9      	bne.n	20070046 <efc_perform_read_sequence+0x3a>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20070052:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070054:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20070058:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2007005a:	6883      	ldr	r3, [r0, #8]
2007005c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2007005e:	9b01      	ldr	r3, [sp, #4]
20070060:	07db      	lsls	r3, r3, #31
20070062:	d5fa      	bpl.n	2007005a <efc_perform_read_sequence+0x4e>

	p_efc->EEFC_FMR &= ~(0x1u << 16);

	return EFC_RC_OK;
20070064:	2200      	movs	r2, #0
	p_efc->EEFC_FMR &= ~(0x1u << 16);
20070066:	6803      	ldr	r3, [r0, #0]
20070068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2007006c:	6003      	str	r3, [r0, #0]
}
2007006e:	4610      	mov	r0, r2
20070070:	b003      	add	sp, #12
20070072:	bc70      	pop	{r4, r5, r6}
20070074:	4770      	bx	lr
		return EFC_RC_INVALID;
20070076:	2202      	movs	r2, #2
}
20070078:	4610      	mov	r0, r2
2007007a:	b003      	add	sp, #12
2007007c:	bc70      	pop	{r4, r5, r6}
2007007e:	4770      	bx	lr
20070080:	400e0a00 	.word	0x400e0a00

20070084 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070084:	6001      	str	r1, [r0, #0]
20070086:	4770      	bx	lr

20070088 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20070088:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007008a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2007008c:	6883      	ldr	r3, [r0, #8]
2007008e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070090:	9b01      	ldr	r3, [sp, #4]
20070092:	07db      	lsls	r3, r3, #31
20070094:	d5fa      	bpl.n	2007008c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20070096:	9801      	ldr	r0, [sp, #4]
}
20070098:	f000 0006 	and.w	r0, r0, #6
2007009c:	b002      	add	sp, #8
2007009e:	4770      	bx	lr

200700a0 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
200700a4:	481a      	ldr	r0, [pc, #104]	; (20070110 <SystemInit+0x70>)
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200700a6:	491b      	ldr	r1, [pc, #108]	; (20070114 <SystemInit+0x74>)
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200700a8:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <SystemInit+0x78>)
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700aa:	6002      	str	r2, [r0, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200700ac:	600a      	str	r2, [r1, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200700ae:	6a1a      	ldr	r2, [r3, #32]
200700b0:	01d2      	lsls	r2, r2, #7
200700b2:	d405      	bmi.n	200700c0 <SystemInit+0x20>
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200700b4:	461a      	mov	r2, r3
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700b6:	4919      	ldr	r1, [pc, #100]	; (2007011c <SystemInit+0x7c>)
200700b8:	6219      	str	r1, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200700ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700bc:	07d8      	lsls	r0, r3, #31
200700be:	d5fc      	bpl.n	200700ba <SystemInit+0x1a>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700c0:	4b15      	ldr	r3, [pc, #84]	; (20070118 <SystemInit+0x78>)
200700c2:	4917      	ldr	r1, [pc, #92]	; (20070120 <SystemInit+0x80>)
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200700c4:	461a      	mov	r2, r3
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700c6:	6219      	str	r1, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200700c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ca:	03d9      	lsls	r1, r3, #15
200700cc:	d5fc      	bpl.n	200700c8 <SystemInit+0x28>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200700ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700d0:	4811      	ldr	r0, [pc, #68]	; (20070118 <SystemInit+0x78>)
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200700d2:	f023 0303 	bic.w	r3, r3, #3
200700d6:	f043 0301 	orr.w	r3, r3, #1
200700da:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700dc:	6e83      	ldr	r3, [r0, #104]	; 0x68
200700de:	071b      	lsls	r3, r3, #28
200700e0:	d5fc      	bpl.n	200700dc <SystemInit+0x3c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200700e2:	4b10      	ldr	r3, [pc, #64]	; (20070124 <SystemInit+0x84>)
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200700e4:	490c      	ldr	r1, [pc, #48]	; (20070118 <SystemInit+0x78>)
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200700e6:	6283      	str	r3, [r0, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200700e8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
200700ea:	0798      	lsls	r0, r3, #30
200700ec:	d5fc      	bpl.n	200700e8 <SystemInit+0x48>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200700ee:	2311      	movs	r3, #17
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700f0:	4a09      	ldr	r2, [pc, #36]	; (20070118 <SystemInit+0x78>)
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200700f2:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700f6:	0719      	lsls	r1, r3, #28
200700f8:	d5fc      	bpl.n	200700f4 <SystemInit+0x54>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
200700fa:	2312      	movs	r3, #18
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700fc:	4906      	ldr	r1, [pc, #24]	; (20070118 <SystemInit+0x78>)
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
200700fe:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070100:	6e8b      	ldr	r3, [r1, #104]	; 0x68
20070102:	071b      	lsls	r3, r3, #28
20070104:	d5fc      	bpl.n	20070100 <SystemInit+0x60>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070106:	4b08      	ldr	r3, [pc, #32]	; (20070128 <SystemInit+0x88>)
20070108:	4a08      	ldr	r2, [pc, #32]	; (2007012c <SystemInit+0x8c>)
2007010a:	601a      	str	r2, [r3, #0]
2007010c:	4770      	bx	lr
2007010e:	bf00      	nop
20070110:	400e0a00 	.word	0x400e0a00
20070114:	400e0c00 	.word	0x400e0c00
20070118:	400e0600 	.word	0x400e0600
2007011c:	00370809 	.word	0x00370809
20070120:	01370809 	.word	0x01370809
20070124:	200d3f01 	.word	0x200d3f01
20070128:	2007026c 	.word	0x2007026c
2007012c:	0501bd00 	.word	0x0501bd00

20070130 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20070130:	4b19      	ldr	r3, [pc, #100]	; (20070198 <system_init_flash+0x68>)
20070132:	4298      	cmp	r0, r3
20070134:	d91b      	bls.n	2007016e <system_init_flash+0x3e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20070136:	4b19      	ldr	r3, [pc, #100]	; (2007019c <system_init_flash+0x6c>)
20070138:	4298      	cmp	r0, r3
2007013a:	d911      	bls.n	20070160 <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
2007013c:	4b18      	ldr	r3, [pc, #96]	; (200701a0 <system_init_flash+0x70>)
2007013e:	4298      	cmp	r0, r3
20070140:	d922      	bls.n	20070188 <system_init_flash+0x58>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070142:	4b18      	ldr	r3, [pc, #96]	; (200701a4 <system_init_flash+0x74>)
20070144:	4298      	cmp	r0, r3
20070146:	d918      	bls.n	2007017a <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070148:	4b17      	ldr	r3, [pc, #92]	; (200701a8 <system_init_flash+0x78>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
2007014a:	4918      	ldr	r1, [pc, #96]	; (200701ac <system_init_flash+0x7c>)
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007014c:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007014e:	bf94      	ite	ls
20070150:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070154:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070158:	4a15      	ldr	r2, [pc, #84]	; (200701b0 <system_init_flash+0x80>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
2007015a:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015c:	6013      	str	r3, [r2, #0]
2007015e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20070160:	f44f 7380 	mov.w	r3, #256	; 0x100
20070164:	4911      	ldr	r1, [pc, #68]	; (200701ac <system_init_flash+0x7c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20070166:	4a12      	ldr	r2, [pc, #72]	; (200701b0 <system_init_flash+0x80>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20070168:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2007016a:	6013      	str	r3, [r2, #0]
2007016c:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2007016e:	2300      	movs	r3, #0
20070170:	490e      	ldr	r1, [pc, #56]	; (200701ac <system_init_flash+0x7c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070172:	4a0f      	ldr	r2, [pc, #60]	; (200701b0 <system_init_flash+0x80>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070174:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070176:	6013      	str	r3, [r2, #0]
20070178:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007017a:	f44f 7340 	mov.w	r3, #768	; 0x300
2007017e:	490b      	ldr	r1, [pc, #44]	; (200701ac <system_init_flash+0x7c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070180:	4a0b      	ldr	r2, [pc, #44]	; (200701b0 <system_init_flash+0x80>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070182:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070184:	6013      	str	r3, [r2, #0]
20070186:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070188:	f44f 7300 	mov.w	r3, #512	; 0x200
2007018c:	4907      	ldr	r1, [pc, #28]	; (200701ac <system_init_flash+0x7c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2007018e:	4a08      	ldr	r2, [pc, #32]	; (200701b0 <system_init_flash+0x80>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070190:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070192:	6013      	str	r3, [r2, #0]
20070194:	4770      	bx	lr
20070196:	bf00      	nop
20070198:	0121eabf 	.word	0x0121eabf
2007019c:	02faf07f 	.word	0x02faf07f
200701a0:	03d08fff 	.word	0x03d08fff
200701a4:	04c4b3ff 	.word	0x04c4b3ff
200701a8:	055d4a7f 	.word	0x055d4a7f
200701ac:	400e0a00 	.word	0x400e0a00
200701b0:	400e0c00 	.word	0x400e0c00

200701b4 <button_no_label>:
200701b4:	00006f4e                                No..

200701b8 <button_ok_label>:
200701b8:	00004b4f                                OK..

200701bc <button_warning_label>:
200701bc:	6e726157 00676e69                       Warning.

200701c4 <button_yes_label>:
200701c4:	00736559                                Yes.

200701c8 <choose_file_message>:
200701c8:	6f6f6843 66206573 00656c69              Choose file.

200701d4 <choose_folder_message>:
200701d4:	6f6f6843 66206573 65646c6f 00000072     Choose folder...

200701e4 <creating_file_message>:
200701e4:	61657243 676e6974 6c696620 00000065     Creating file...

200701f4 <file_already_exists_message>:
200701f4:	656c6946 726c6120 79646165 69786520     File already exi
20070204:	2e737473 65764f20 69727772 003f6574     sts. Overwrite?.

20070214 <new_file_name_message>:
20070214:	2077654e 656c6966 6d616e20 00000065     New file name...

20070224 <no_more_windows_message>:
20070224:	6d206f4e 2065726f 646e6977 2e73776f     No more windows.
	...

20070236 <previous_width>:
20070236:	ffffffff                                         ..

20070238 <previous_x>:
20070238:	ffffffff                                         ..

2007023a <previous_y>:
2007023a:	0001ffff                                         ..

2007023c <next_handle.6882>:
2007023c:	00000001                                ....

20070240 <previous_touch_state.6740>:
20070240:	00000001                                ....

20070244 <root_folder_path.10454>:
20070244:	002f3a30                                0:/.

20070248 <b_uhi_msc_free>:
20070248:	00000001                                ....

2007024c <uhi_msc_cbw>:
2007024c:	43425355 00000000 00000000 00000000     USBC............
	...

2007026b <g_interrupt_enabled>:
2007026b:	3d090001                                         .

2007026c <SystemCoreClock>:
2007026c:	003d0900                                ..=.

20070270 <_impure_ptr>:
20070270:	20070278 00000000                       x.. ....

20070278 <impure_data>:
20070278:	00000000 20070564 200705cc 20070634     ....d.. ... 4.. 
	...
20070320:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070330:	0005deec 0000000b 00000000 00000000     ................
	...

200706a0 <__global_locale>:
200706a0:	00000043 00000000 00000000 00000000     C...............
	...
200706c0:	00000043 00000000 00000000 00000000     C...............
	...
200706e0:	00000043 00000000 00000000 00000000     C...............
	...
20070700:	00000043 00000000 00000000 00000000     C...............
	...
20070720:	00000043 00000000 00000000 00000000     C...............
	...
20070740:	00000043 00000000 00000000 00000000     C...............
	...
20070760:	00000043 00000000 00000000 00000000     C...............
	...
20070780:	000a5f55 000a5845 00000000 000acaf8     U_..EX..........
20070790:	000a64dc 000a6c00 000a6c00 000a6c00     .d...l...l...l..
200707a0:	000a6c00 000a6c00 000a6c00 000a6c00     .l...l...l...l..
200707b0:	000a6c00 000a6c00 ffffffff ffffffff     .l...l..........
200707c0:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200707e8:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

2007080c <__malloc_av_>:
	...
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 
20070994:	2007098c 2007098c 20070994 20070994     ... ... ... ... 
200709a4:	2007099c 2007099c 200709a4 200709a4     ... ... ... ... 
200709b4:	200709ac 200709ac 200709b4 200709b4     ... ... ... ... 
200709c4:	200709bc 200709bc 200709c4 200709c4     ... ... ... ... 
200709d4:	200709cc 200709cc 200709d4 200709d4     ... ... ... ... 
200709e4:	200709dc 200709dc 200709e4 200709e4     ... ... ... ... 
200709f4:	200709ec 200709ec 200709f4 200709f4     ... ... ... ... 
20070a04:	200709fc 200709fc 20070a04 20070a04     ... ... ... ... 
20070a14:	20070a0c 20070a0c 20070a14 20070a14     ... ... ... ... 
20070a24:	20070a1c 20070a1c 20070a24 20070a24     ... ... $.. $.. 
20070a34:	20070a2c 20070a2c 20070a34 20070a34     ,.. ,.. 4.. 4.. 
20070a44:	20070a3c 20070a3c 20070a44 20070a44     <.. <.. D.. D.. 
20070a54:	20070a4c 20070a4c 20070a54 20070a54     L.. L.. T.. T.. 
20070a64:	20070a5c 20070a5c 20070a64 20070a64     \.. \.. d.. d.. 
20070a74:	20070a6c 20070a6c 20070a74 20070a74     l.. l.. t.. t.. 
20070a84:	20070a7c 20070a7c 20070a84 20070a84     |.. |.. ... ... 
20070a94:	20070a8c 20070a8c 20070a94 20070a94     ... ... ... ... 
20070aa4:	20070a9c 20070a9c 20070aa4 20070aa4     ... ... ... ... 
20070ab4:	20070aac 20070aac 20070ab4 20070ab4     ... ... ... ... 
20070ac4:	20070abc 20070abc 20070ac4 20070ac4     ... ... ... ... 
20070ad4:	20070acc 20070acc 20070ad4 20070ad4     ... ... ... ... 
20070ae4:	20070adc 20070adc 20070ae4 20070ae4     ... ... ... ... 
20070af4:	20070aec 20070aec 20070af4 20070af4     ... ... ... ... 
20070b04:	20070afc 20070afc 20070b04 20070b04     ... ... ... ... 
20070b14:	20070b0c 20070b0c 20070b14 20070b14     ... ... ... ... 
20070b24:	20070b1c 20070b1c 20070b24 20070b24     ... ... $.. $.. 
20070b34:	20070b2c 20070b2c 20070b34 20070b34     ,.. ,.. 4.. 4.. 
20070b44:	20070b3c 20070b3c 20070b44 20070b44     <.. <.. D.. D.. 
20070b54:	20070b4c 20070b4c 20070b54 20070b54     L.. L.. T.. T.. 
20070b64:	20070b5c 20070b5c 20070b64 20070b64     \.. \.. d.. d.. 
20070b74:	20070b6c 20070b6c 20070b74 20070b74     l.. l.. t.. t.. 
20070b84:	20070b7c 20070b7c 20070b84 20070b84     |.. |.. ... ... 
20070b94:	20070b8c 20070b8c 20070b94 20070b94     ... ... ... ... 
20070ba4:	20070b9c 20070b9c 20070ba4 20070ba4     ... ... ... ... 
20070bb4:	20070bac 20070bac 20070bb4 20070bb4     ... ... ... ... 
20070bc4:	20070bbc 20070bbc 20070bc4 20070bc4     ... ... ... ... 
20070bd4:	20070bcc 20070bcc 20070bd4 20070bd4     ... ... ... ... 
20070be4:	20070bdc 20070bdc 20070be4 20070be4     ... ... ... ... 
20070bf4:	20070bec 20070bec 20070bf4 20070bf4     ... ... ... ... 
20070c04:	20070bfc 20070bfc 20070c04 20070c04     ... ... ... ... 

20070c14 <__malloc_sbrk_base>:
20070c14:	ffffffff                                ....

20070c18 <__malloc_trim_threshold>:
20070c18:	00020000                                ....

20070c1c <__atexit_recursive_mutex>:
20070c1c:	20072fb8                                ./. 
